// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AssetBundleExportJobDataSourcePropertyToOverride`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let assetbundleexportjobdatasourcepropertytooverride = unimplemented!();
/// match assetbundleexportjobdatasourcepropertytooverride {
///     AssetBundleExportJobDataSourcePropertyToOverride::Catalog => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::ClusterId => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::DataSetName => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Database => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::DisableSsl => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Domain => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Host => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::InstanceId => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::ManifestFileLocation => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Name => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Password => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Port => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::ProductType => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::RoleArn => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::SecretArn => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Username => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::Warehouse => { /* ... */ },
///     AssetBundleExportJobDataSourcePropertyToOverride::WorkGroup => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `assetbundleexportjobdatasourcepropertytooverride` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AssetBundleExportJobDataSourcePropertyToOverride::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AssetBundleExportJobDataSourcePropertyToOverride::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AssetBundleExportJobDataSourcePropertyToOverride::NewFeature` is defined.
/// Specifically, when `assetbundleexportjobdatasourcepropertytooverride` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AssetBundleExportJobDataSourcePropertyToOverride::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AssetBundleExportJobDataSourcePropertyToOverride {
    #[allow(missing_docs)] // documentation missing in model
    Catalog,
    #[allow(missing_docs)] // documentation missing in model
    ClusterId,
    #[allow(missing_docs)] // documentation missing in model
    DataSetName,
    #[allow(missing_docs)] // documentation missing in model
    Database,
    #[allow(missing_docs)] // documentation missing in model
    DisableSsl,
    #[allow(missing_docs)] // documentation missing in model
    Domain,
    #[allow(missing_docs)] // documentation missing in model
    Host,
    #[allow(missing_docs)] // documentation missing in model
    InstanceId,
    #[allow(missing_docs)] // documentation missing in model
    ManifestFileLocation,
    #[allow(missing_docs)] // documentation missing in model
    Name,
    #[allow(missing_docs)] // documentation missing in model
    Password,
    #[allow(missing_docs)] // documentation missing in model
    Port,
    #[allow(missing_docs)] // documentation missing in model
    ProductType,
    #[allow(missing_docs)] // documentation missing in model
    RoleArn,
    #[allow(missing_docs)] // documentation missing in model
    SecretArn,
    #[allow(missing_docs)] // documentation missing in model
    Username,
    #[allow(missing_docs)] // documentation missing in model
    Warehouse,
    #[allow(missing_docs)] // documentation missing in model
    WorkGroup,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AssetBundleExportJobDataSourcePropertyToOverride {
    fn from(s: &str) -> Self {
        match s {
            "Catalog" => AssetBundleExportJobDataSourcePropertyToOverride::Catalog,
            "ClusterId" => AssetBundleExportJobDataSourcePropertyToOverride::ClusterId,
            "DataSetName" => AssetBundleExportJobDataSourcePropertyToOverride::DataSetName,
            "Database" => AssetBundleExportJobDataSourcePropertyToOverride::Database,
            "DisableSsl" => AssetBundleExportJobDataSourcePropertyToOverride::DisableSsl,
            "Domain" => AssetBundleExportJobDataSourcePropertyToOverride::Domain,
            "Host" => AssetBundleExportJobDataSourcePropertyToOverride::Host,
            "InstanceId" => AssetBundleExportJobDataSourcePropertyToOverride::InstanceId,
            "ManifestFileLocation" => AssetBundleExportJobDataSourcePropertyToOverride::ManifestFileLocation,
            "Name" => AssetBundleExportJobDataSourcePropertyToOverride::Name,
            "Password" => AssetBundleExportJobDataSourcePropertyToOverride::Password,
            "Port" => AssetBundleExportJobDataSourcePropertyToOverride::Port,
            "ProductType" => AssetBundleExportJobDataSourcePropertyToOverride::ProductType,
            "RoleArn" => AssetBundleExportJobDataSourcePropertyToOverride::RoleArn,
            "SecretArn" => AssetBundleExportJobDataSourcePropertyToOverride::SecretArn,
            "Username" => AssetBundleExportJobDataSourcePropertyToOverride::Username,
            "Warehouse" => AssetBundleExportJobDataSourcePropertyToOverride::Warehouse,
            "WorkGroup" => AssetBundleExportJobDataSourcePropertyToOverride::WorkGroup,
            other => AssetBundleExportJobDataSourcePropertyToOverride::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl ::std::str::FromStr for AssetBundleExportJobDataSourcePropertyToOverride {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AssetBundleExportJobDataSourcePropertyToOverride::from(s))
    }
}
impl AssetBundleExportJobDataSourcePropertyToOverride {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AssetBundleExportJobDataSourcePropertyToOverride::Catalog => "Catalog",
            AssetBundleExportJobDataSourcePropertyToOverride::ClusterId => "ClusterId",
            AssetBundleExportJobDataSourcePropertyToOverride::DataSetName => "DataSetName",
            AssetBundleExportJobDataSourcePropertyToOverride::Database => "Database",
            AssetBundleExportJobDataSourcePropertyToOverride::DisableSsl => "DisableSsl",
            AssetBundleExportJobDataSourcePropertyToOverride::Domain => "Domain",
            AssetBundleExportJobDataSourcePropertyToOverride::Host => "Host",
            AssetBundleExportJobDataSourcePropertyToOverride::InstanceId => "InstanceId",
            AssetBundleExportJobDataSourcePropertyToOverride::ManifestFileLocation => "ManifestFileLocation",
            AssetBundleExportJobDataSourcePropertyToOverride::Name => "Name",
            AssetBundleExportJobDataSourcePropertyToOverride::Password => "Password",
            AssetBundleExportJobDataSourcePropertyToOverride::Port => "Port",
            AssetBundleExportJobDataSourcePropertyToOverride::ProductType => "ProductType",
            AssetBundleExportJobDataSourcePropertyToOverride::RoleArn => "RoleArn",
            AssetBundleExportJobDataSourcePropertyToOverride::SecretArn => "SecretArn",
            AssetBundleExportJobDataSourcePropertyToOverride::Username => "Username",
            AssetBundleExportJobDataSourcePropertyToOverride::Warehouse => "Warehouse",
            AssetBundleExportJobDataSourcePropertyToOverride::WorkGroup => "WorkGroup",
            AssetBundleExportJobDataSourcePropertyToOverride::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Catalog",
            "ClusterId",
            "DataSetName",
            "Database",
            "DisableSsl",
            "Domain",
            "Host",
            "InstanceId",
            "ManifestFileLocation",
            "Name",
            "Password",
            "Port",
            "ProductType",
            "RoleArn",
            "SecretArn",
            "Username",
            "Warehouse",
            "WorkGroup",
        ]
    }
}
impl ::std::convert::AsRef<str> for AssetBundleExportJobDataSourcePropertyToOverride {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AssetBundleExportJobDataSourcePropertyToOverride {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AssetBundleExportJobDataSourcePropertyToOverride {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AssetBundleExportJobDataSourcePropertyToOverride::Catalog => write!(f, "Catalog"),
            AssetBundleExportJobDataSourcePropertyToOverride::ClusterId => write!(f, "ClusterId"),
            AssetBundleExportJobDataSourcePropertyToOverride::DataSetName => write!(f, "DataSetName"),
            AssetBundleExportJobDataSourcePropertyToOverride::Database => write!(f, "Database"),
            AssetBundleExportJobDataSourcePropertyToOverride::DisableSsl => write!(f, "DisableSsl"),
            AssetBundleExportJobDataSourcePropertyToOverride::Domain => write!(f, "Domain"),
            AssetBundleExportJobDataSourcePropertyToOverride::Host => write!(f, "Host"),
            AssetBundleExportJobDataSourcePropertyToOverride::InstanceId => write!(f, "InstanceId"),
            AssetBundleExportJobDataSourcePropertyToOverride::ManifestFileLocation => write!(f, "ManifestFileLocation"),
            AssetBundleExportJobDataSourcePropertyToOverride::Name => write!(f, "Name"),
            AssetBundleExportJobDataSourcePropertyToOverride::Password => write!(f, "Password"),
            AssetBundleExportJobDataSourcePropertyToOverride::Port => write!(f, "Port"),
            AssetBundleExportJobDataSourcePropertyToOverride::ProductType => write!(f, "ProductType"),
            AssetBundleExportJobDataSourcePropertyToOverride::RoleArn => write!(f, "RoleArn"),
            AssetBundleExportJobDataSourcePropertyToOverride::SecretArn => write!(f, "SecretArn"),
            AssetBundleExportJobDataSourcePropertyToOverride::Username => write!(f, "Username"),
            AssetBundleExportJobDataSourcePropertyToOverride::Warehouse => write!(f, "Warehouse"),
            AssetBundleExportJobDataSourcePropertyToOverride::WorkGroup => write!(f, "WorkGroup"),
            AssetBundleExportJobDataSourcePropertyToOverride::Unknown(value) => write!(f, "{}", value),
        }
    }
}
