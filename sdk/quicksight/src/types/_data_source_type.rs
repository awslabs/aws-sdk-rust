// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DataSourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let datasourcetype = unimplemented!();
/// match datasourcetype {
///     DataSourceType::AdobeAnalytics => { /* ... */ },
///     DataSourceType::AmazonElasticsearch => { /* ... */ },
///     DataSourceType::AmazonOpensearch => { /* ... */ },
///     DataSourceType::Athena => { /* ... */ },
///     DataSourceType::Aurora => { /* ... */ },
///     DataSourceType::AuroraPostgresql => { /* ... */ },
///     DataSourceType::AwsIotAnalytics => { /* ... */ },
///     DataSourceType::Bigquery => { /* ... */ },
///     DataSourceType::Confluence => { /* ... */ },
///     DataSourceType::Databricks => { /* ... */ },
///     DataSourceType::Exasol => { /* ... */ },
///     DataSourceType::Github => { /* ... */ },
///     DataSourceType::Googlesheets => { /* ... */ },
///     DataSourceType::GoogleDrive => { /* ... */ },
///     DataSourceType::Jira => { /* ... */ },
///     DataSourceType::Mariadb => { /* ... */ },
///     DataSourceType::Mysql => { /* ... */ },
///     DataSourceType::OneDrive => { /* ... */ },
///     DataSourceType::Oracle => { /* ... */ },
///     DataSourceType::Postgresql => { /* ... */ },
///     DataSourceType::Presto => { /* ... */ },
///     DataSourceType::Qbusiness => { /* ... */ },
///     DataSourceType::Redshift => { /* ... */ },
///     DataSourceType::S3 => { /* ... */ },
///     DataSourceType::S3KnowledgeBase => { /* ... */ },
///     DataSourceType::Salesforce => { /* ... */ },
///     DataSourceType::Servicenow => { /* ... */ },
///     DataSourceType::Sharepoint => { /* ... */ },
///     DataSourceType::Snowflake => { /* ... */ },
///     DataSourceType::Spark => { /* ... */ },
///     DataSourceType::Sqlserver => { /* ... */ },
///     DataSourceType::Starburst => { /* ... */ },
///     DataSourceType::Teradata => { /* ... */ },
///     DataSourceType::Timestream => { /* ... */ },
///     DataSourceType::Trino => { /* ... */ },
///     DataSourceType::Twitter => { /* ... */ },
///     DataSourceType::WebCrawler => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `datasourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DataSourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DataSourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DataSourceType::NewFeature` is defined.
/// Specifically, when `datasourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DataSourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DataSourceType {
    #[allow(missing_docs)] // documentation missing in model
    AdobeAnalytics,
    #[allow(missing_docs)] // documentation missing in model
    AmazonElasticsearch,
    #[allow(missing_docs)] // documentation missing in model
    AmazonOpensearch,
    #[allow(missing_docs)] // documentation missing in model
    Athena,
    #[allow(missing_docs)] // documentation missing in model
    Aurora,
    #[allow(missing_docs)] // documentation missing in model
    AuroraPostgresql,
    #[allow(missing_docs)] // documentation missing in model
    AwsIotAnalytics,
    #[allow(missing_docs)] // documentation missing in model
    Bigquery,
    #[allow(missing_docs)] // documentation missing in model
    Confluence,
    #[allow(missing_docs)] // documentation missing in model
    Databricks,
    #[allow(missing_docs)] // documentation missing in model
    Exasol,
    #[allow(missing_docs)] // documentation missing in model
    Github,
    #[allow(missing_docs)] // documentation missing in model
    Googlesheets,
    #[allow(missing_docs)] // documentation missing in model
    GoogleDrive,
    #[allow(missing_docs)] // documentation missing in model
    Jira,
    #[allow(missing_docs)] // documentation missing in model
    Mariadb,
    #[allow(missing_docs)] // documentation missing in model
    Mysql,
    #[allow(missing_docs)] // documentation missing in model
    OneDrive,
    #[allow(missing_docs)] // documentation missing in model
    Oracle,
    #[allow(missing_docs)] // documentation missing in model
    Postgresql,
    #[allow(missing_docs)] // documentation missing in model
    Presto,
    #[allow(missing_docs)] // documentation missing in model
    Qbusiness,
    #[allow(missing_docs)] // documentation missing in model
    Redshift,
    #[allow(missing_docs)] // documentation missing in model
    S3,
    #[allow(missing_docs)] // documentation missing in model
    S3KnowledgeBase,
    #[allow(missing_docs)] // documentation missing in model
    Salesforce,
    #[allow(missing_docs)] // documentation missing in model
    Servicenow,
    #[allow(missing_docs)] // documentation missing in model
    Sharepoint,
    #[allow(missing_docs)] // documentation missing in model
    Snowflake,
    #[allow(missing_docs)] // documentation missing in model
    Spark,
    #[allow(missing_docs)] // documentation missing in model
    Sqlserver,
    #[allow(missing_docs)] // documentation missing in model
    Starburst,
    #[allow(missing_docs)] // documentation missing in model
    Teradata,
    #[allow(missing_docs)] // documentation missing in model
    Timestream,
    #[allow(missing_docs)] // documentation missing in model
    Trino,
    #[allow(missing_docs)] // documentation missing in model
    Twitter,
    #[allow(missing_docs)] // documentation missing in model
    WebCrawler,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DataSourceType {
    fn from(s: &str) -> Self {
        match s {
            "ADOBE_ANALYTICS" => DataSourceType::AdobeAnalytics,
            "AMAZON_ELASTICSEARCH" => DataSourceType::AmazonElasticsearch,
            "AMAZON_OPENSEARCH" => DataSourceType::AmazonOpensearch,
            "ATHENA" => DataSourceType::Athena,
            "AURORA" => DataSourceType::Aurora,
            "AURORA_POSTGRESQL" => DataSourceType::AuroraPostgresql,
            "AWS_IOT_ANALYTICS" => DataSourceType::AwsIotAnalytics,
            "BIGQUERY" => DataSourceType::Bigquery,
            "CONFLUENCE" => DataSourceType::Confluence,
            "DATABRICKS" => DataSourceType::Databricks,
            "EXASOL" => DataSourceType::Exasol,
            "GITHUB" => DataSourceType::Github,
            "GOOGLESHEETS" => DataSourceType::Googlesheets,
            "GOOGLE_DRIVE" => DataSourceType::GoogleDrive,
            "JIRA" => DataSourceType::Jira,
            "MARIADB" => DataSourceType::Mariadb,
            "MYSQL" => DataSourceType::Mysql,
            "ONE_DRIVE" => DataSourceType::OneDrive,
            "ORACLE" => DataSourceType::Oracle,
            "POSTGRESQL" => DataSourceType::Postgresql,
            "PRESTO" => DataSourceType::Presto,
            "QBUSINESS" => DataSourceType::Qbusiness,
            "REDSHIFT" => DataSourceType::Redshift,
            "S3" => DataSourceType::S3,
            "S3_KNOWLEDGE_BASE" => DataSourceType::S3KnowledgeBase,
            "SALESFORCE" => DataSourceType::Salesforce,
            "SERVICENOW" => DataSourceType::Servicenow,
            "SHAREPOINT" => DataSourceType::Sharepoint,
            "SNOWFLAKE" => DataSourceType::Snowflake,
            "SPARK" => DataSourceType::Spark,
            "SQLSERVER" => DataSourceType::Sqlserver,
            "STARBURST" => DataSourceType::Starburst,
            "TERADATA" => DataSourceType::Teradata,
            "TIMESTREAM" => DataSourceType::Timestream,
            "TRINO" => DataSourceType::Trino,
            "TWITTER" => DataSourceType::Twitter,
            "WEB_CRAWLER" => DataSourceType::WebCrawler,
            other => DataSourceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DataSourceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DataSourceType::from(s))
    }
}
impl DataSourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DataSourceType::AdobeAnalytics => "ADOBE_ANALYTICS",
            DataSourceType::AmazonElasticsearch => "AMAZON_ELASTICSEARCH",
            DataSourceType::AmazonOpensearch => "AMAZON_OPENSEARCH",
            DataSourceType::Athena => "ATHENA",
            DataSourceType::Aurora => "AURORA",
            DataSourceType::AuroraPostgresql => "AURORA_POSTGRESQL",
            DataSourceType::AwsIotAnalytics => "AWS_IOT_ANALYTICS",
            DataSourceType::Bigquery => "BIGQUERY",
            DataSourceType::Confluence => "CONFLUENCE",
            DataSourceType::Databricks => "DATABRICKS",
            DataSourceType::Exasol => "EXASOL",
            DataSourceType::Github => "GITHUB",
            DataSourceType::Googlesheets => "GOOGLESHEETS",
            DataSourceType::GoogleDrive => "GOOGLE_DRIVE",
            DataSourceType::Jira => "JIRA",
            DataSourceType::Mariadb => "MARIADB",
            DataSourceType::Mysql => "MYSQL",
            DataSourceType::OneDrive => "ONE_DRIVE",
            DataSourceType::Oracle => "ORACLE",
            DataSourceType::Postgresql => "POSTGRESQL",
            DataSourceType::Presto => "PRESTO",
            DataSourceType::Qbusiness => "QBUSINESS",
            DataSourceType::Redshift => "REDSHIFT",
            DataSourceType::S3 => "S3",
            DataSourceType::S3KnowledgeBase => "S3_KNOWLEDGE_BASE",
            DataSourceType::Salesforce => "SALESFORCE",
            DataSourceType::Servicenow => "SERVICENOW",
            DataSourceType::Sharepoint => "SHAREPOINT",
            DataSourceType::Snowflake => "SNOWFLAKE",
            DataSourceType::Spark => "SPARK",
            DataSourceType::Sqlserver => "SQLSERVER",
            DataSourceType::Starburst => "STARBURST",
            DataSourceType::Teradata => "TERADATA",
            DataSourceType::Timestream => "TIMESTREAM",
            DataSourceType::Trino => "TRINO",
            DataSourceType::Twitter => "TWITTER",
            DataSourceType::WebCrawler => "WEB_CRAWLER",
            DataSourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADOBE_ANALYTICS",
            "AMAZON_ELASTICSEARCH",
            "AMAZON_OPENSEARCH",
            "ATHENA",
            "AURORA",
            "AURORA_POSTGRESQL",
            "AWS_IOT_ANALYTICS",
            "BIGQUERY",
            "CONFLUENCE",
            "DATABRICKS",
            "EXASOL",
            "GITHUB",
            "GOOGLESHEETS",
            "GOOGLE_DRIVE",
            "JIRA",
            "MARIADB",
            "MYSQL",
            "ONE_DRIVE",
            "ORACLE",
            "POSTGRESQL",
            "PRESTO",
            "QBUSINESS",
            "REDSHIFT",
            "S3",
            "S3_KNOWLEDGE_BASE",
            "SALESFORCE",
            "SERVICENOW",
            "SHAREPOINT",
            "SNOWFLAKE",
            "SPARK",
            "SQLSERVER",
            "STARBURST",
            "TERADATA",
            "TIMESTREAM",
            "TRINO",
            "TWITTER",
            "WEB_CRAWLER",
        ]
    }
}
impl ::std::convert::AsRef<str> for DataSourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DataSourceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DataSourceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DataSourceType::AdobeAnalytics => write!(f, "ADOBE_ANALYTICS"),
            DataSourceType::AmazonElasticsearch => write!(f, "AMAZON_ELASTICSEARCH"),
            DataSourceType::AmazonOpensearch => write!(f, "AMAZON_OPENSEARCH"),
            DataSourceType::Athena => write!(f, "ATHENA"),
            DataSourceType::Aurora => write!(f, "AURORA"),
            DataSourceType::AuroraPostgresql => write!(f, "AURORA_POSTGRESQL"),
            DataSourceType::AwsIotAnalytics => write!(f, "AWS_IOT_ANALYTICS"),
            DataSourceType::Bigquery => write!(f, "BIGQUERY"),
            DataSourceType::Confluence => write!(f, "CONFLUENCE"),
            DataSourceType::Databricks => write!(f, "DATABRICKS"),
            DataSourceType::Exasol => write!(f, "EXASOL"),
            DataSourceType::Github => write!(f, "GITHUB"),
            DataSourceType::Googlesheets => write!(f, "GOOGLESHEETS"),
            DataSourceType::GoogleDrive => write!(f, "GOOGLE_DRIVE"),
            DataSourceType::Jira => write!(f, "JIRA"),
            DataSourceType::Mariadb => write!(f, "MARIADB"),
            DataSourceType::Mysql => write!(f, "MYSQL"),
            DataSourceType::OneDrive => write!(f, "ONE_DRIVE"),
            DataSourceType::Oracle => write!(f, "ORACLE"),
            DataSourceType::Postgresql => write!(f, "POSTGRESQL"),
            DataSourceType::Presto => write!(f, "PRESTO"),
            DataSourceType::Qbusiness => write!(f, "QBUSINESS"),
            DataSourceType::Redshift => write!(f, "REDSHIFT"),
            DataSourceType::S3 => write!(f, "S3"),
            DataSourceType::S3KnowledgeBase => write!(f, "S3_KNOWLEDGE_BASE"),
            DataSourceType::Salesforce => write!(f, "SALESFORCE"),
            DataSourceType::Servicenow => write!(f, "SERVICENOW"),
            DataSourceType::Sharepoint => write!(f, "SHAREPOINT"),
            DataSourceType::Snowflake => write!(f, "SNOWFLAKE"),
            DataSourceType::Spark => write!(f, "SPARK"),
            DataSourceType::Sqlserver => write!(f, "SQLSERVER"),
            DataSourceType::Starburst => write!(f, "STARBURST"),
            DataSourceType::Teradata => write!(f, "TERADATA"),
            DataSourceType::Timestream => write!(f, "TIMESTREAM"),
            DataSourceType::Trino => write!(f, "TRINO"),
            DataSourceType::Twitter => write!(f, "TWITTER"),
            DataSourceType::WebCrawler => write!(f, "WEB_CRAWLER"),
            DataSourceType::Unknown(value) => write!(f, "{}", value),
        }
    }
}
