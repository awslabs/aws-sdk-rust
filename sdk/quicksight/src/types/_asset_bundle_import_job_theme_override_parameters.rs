// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The override parameters for a single theme that is imported.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleImportJobThemeOverrideParameters {
    /// <p>The ID of the theme to apply overrides to.</p>
    pub theme_id: ::std::string::String,
    /// <p>A new name for the theme.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobThemeOverrideParameters {
    /// <p>The ID of the theme to apply overrides to.</p>
    pub fn theme_id(&self) -> &str {
        use std::ops::Deref;
        self.theme_id.deref()
    }
    /// <p>A new name for the theme.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AssetBundleImportJobThemeOverrideParameters {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportJobThemeOverrideParameters`](crate::types::AssetBundleImportJobThemeOverrideParameters).
    pub fn builder() -> crate::types::builders::AssetBundleImportJobThemeOverrideParametersBuilder {
        crate::types::builders::AssetBundleImportJobThemeOverrideParametersBuilder::default()
    }
}

/// A builder for [`AssetBundleImportJobThemeOverrideParameters`](crate::types::AssetBundleImportJobThemeOverrideParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetBundleImportJobThemeOverrideParametersBuilder {
    pub(crate) theme_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobThemeOverrideParametersBuilder {
    /// <p>The ID of the theme to apply overrides to.</p>
    /// This field is required.
    pub fn theme_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.theme_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the theme to apply overrides to.</p>
    pub fn set_theme_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.theme_id = input;
        self
    }
    /// <p>The ID of the theme to apply overrides to.</p>
    pub fn get_theme_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.theme_id
    }
    /// <p>A new name for the theme.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the theme.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the theme.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AssetBundleImportJobThemeOverrideParameters`](crate::types::AssetBundleImportJobThemeOverrideParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`theme_id`](crate::types::builders::AssetBundleImportJobThemeOverrideParametersBuilder::theme_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AssetBundleImportJobThemeOverrideParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetBundleImportJobThemeOverrideParameters {
            theme_id: self.theme_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "theme_id",
                    "theme_id was not specified but it is required when building AssetBundleImportJobThemeOverrideParameters",
                )
            })?,
            name: self.name,
        })
    }
}
