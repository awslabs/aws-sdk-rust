// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a <code>BarChartVisual</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BarChartConfiguration {
    /// <p>The field wells of the visual.</p>
    pub field_wells: ::std::option::Option<crate::types::BarChartFieldWells>,
    /// <p>The sort configuration of a <code>BarChartVisual</code>.</p>
    pub sort_configuration: ::std::option::Option<crate::types::BarChartSortConfiguration>,
    /// <p>The orientation of the bars in a bar chart visual. There are two valid values in this structure:</p>
    /// <ul>
    /// <li> <p> <code>HORIZONTAL</code>: Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.</p> </li>
    /// <li> <p> <code>VERTICAL</code>: Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.</p> </li>
    /// </ul>
    pub orientation: ::std::option::Option<crate::types::BarChartOrientation>,
    /// <p>Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.</p>
    pub bars_arrangement: ::std::option::Option<crate::types::BarsArrangement>,
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub visual_palette: ::std::option::Option<crate::types::VisualPalette>,
    /// <p>The small multiples setup for the visual.</p>
    pub small_multiples_options: ::std::option::Option<crate::types::SmallMultiplesOptions>,
    /// <p>The label display options (grid line, range, scale, axis step) for bar chart category.</p>
    pub category_axis: ::std::option::Option<crate::types::AxisDisplayOptions>,
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart.</p>
    pub category_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The label display options (grid line, range, scale, axis step) for a bar chart value.</p>
    pub value_axis: ::std::option::Option<crate::types::AxisDisplayOptions>,
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart value.</p>
    pub value_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.</p>
    pub color_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The legend display setup of the visual.</p>
    pub legend: ::std::option::Option<crate::types::LegendOptions>,
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub data_labels: ::std::option::Option<crate::types::DataLabelOptions>,
    /// <p>The tooltip display setup of the visual.</p>
    pub tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    /// <p>The reference line setup of the visual.</p>
    pub reference_lines: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceLine>>,
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub contribution_analysis_defaults: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
}
impl BarChartConfiguration {
    /// <p>The field wells of the visual.</p>
    pub fn field_wells(&self) -> ::std::option::Option<&crate::types::BarChartFieldWells> {
        self.field_wells.as_ref()
    }
    /// <p>The sort configuration of a <code>BarChartVisual</code>.</p>
    pub fn sort_configuration(&self) -> ::std::option::Option<&crate::types::BarChartSortConfiguration> {
        self.sort_configuration.as_ref()
    }
    /// <p>The orientation of the bars in a bar chart visual. There are two valid values in this structure:</p>
    /// <ul>
    /// <li> <p> <code>HORIZONTAL</code>: Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.</p> </li>
    /// <li> <p> <code>VERTICAL</code>: Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.</p> </li>
    /// </ul>
    pub fn orientation(&self) -> ::std::option::Option<&crate::types::BarChartOrientation> {
        self.orientation.as_ref()
    }
    /// <p>Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.</p>
    pub fn bars_arrangement(&self) -> ::std::option::Option<&crate::types::BarsArrangement> {
        self.bars_arrangement.as_ref()
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn visual_palette(&self) -> ::std::option::Option<&crate::types::VisualPalette> {
        self.visual_palette.as_ref()
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn small_multiples_options(&self) -> ::std::option::Option<&crate::types::SmallMultiplesOptions> {
        self.small_multiples_options.as_ref()
    }
    /// <p>The label display options (grid line, range, scale, axis step) for bar chart category.</p>
    pub fn category_axis(&self) -> ::std::option::Option<&crate::types::AxisDisplayOptions> {
        self.category_axis.as_ref()
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart.</p>
    pub fn category_label_options(&self) -> ::std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.category_label_options.as_ref()
    }
    /// <p>The label display options (grid line, range, scale, axis step) for a bar chart value.</p>
    pub fn value_axis(&self) -> ::std::option::Option<&crate::types::AxisDisplayOptions> {
        self.value_axis.as_ref()
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart value.</p>
    pub fn value_label_options(&self) -> ::std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.value_label_options.as_ref()
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.</p>
    pub fn color_label_options(&self) -> ::std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.color_label_options.as_ref()
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn legend(&self) -> ::std::option::Option<&crate::types::LegendOptions> {
        self.legend.as_ref()
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn data_labels(&self) -> ::std::option::Option<&crate::types::DataLabelOptions> {
        self.data_labels.as_ref()
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn tooltip(&self) -> ::std::option::Option<&crate::types::TooltipOptions> {
        self.tooltip.as_ref()
    }
    /// <p>The reference line setup of the visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reference_lines.is_none()`.
    pub fn reference_lines(&self) -> &[crate::types::ReferenceLine] {
        self.reference_lines.as_deref().unwrap_or_default()
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contribution_analysis_defaults.is_none()`.
    pub fn contribution_analysis_defaults(&self) -> &[crate::types::ContributionAnalysisDefault] {
        self.contribution_analysis_defaults.as_deref().unwrap_or_default()
    }
}
impl BarChartConfiguration {
    /// Creates a new builder-style object to manufacture [`BarChartConfiguration`](crate::types::BarChartConfiguration).
    pub fn builder() -> crate::types::builders::BarChartConfigurationBuilder {
        crate::types::builders::BarChartConfigurationBuilder::default()
    }
}

/// A builder for [`BarChartConfiguration`](crate::types::BarChartConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BarChartConfigurationBuilder {
    pub(crate) field_wells: ::std::option::Option<crate::types::BarChartFieldWells>,
    pub(crate) sort_configuration: ::std::option::Option<crate::types::BarChartSortConfiguration>,
    pub(crate) orientation: ::std::option::Option<crate::types::BarChartOrientation>,
    pub(crate) bars_arrangement: ::std::option::Option<crate::types::BarsArrangement>,
    pub(crate) visual_palette: ::std::option::Option<crate::types::VisualPalette>,
    pub(crate) small_multiples_options: ::std::option::Option<crate::types::SmallMultiplesOptions>,
    pub(crate) category_axis: ::std::option::Option<crate::types::AxisDisplayOptions>,
    pub(crate) category_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) value_axis: ::std::option::Option<crate::types::AxisDisplayOptions>,
    pub(crate) value_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) color_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) legend: ::std::option::Option<crate::types::LegendOptions>,
    pub(crate) data_labels: ::std::option::Option<crate::types::DataLabelOptions>,
    pub(crate) tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    pub(crate) reference_lines: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceLine>>,
    pub(crate) contribution_analysis_defaults: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
}
impl BarChartConfigurationBuilder {
    /// <p>The field wells of the visual.</p>
    pub fn field_wells(mut self, input: crate::types::BarChartFieldWells) -> Self {
        self.field_wells = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field wells of the visual.</p>
    pub fn set_field_wells(mut self, input: ::std::option::Option<crate::types::BarChartFieldWells>) -> Self {
        self.field_wells = input;
        self
    }
    /// <p>The field wells of the visual.</p>
    pub fn get_field_wells(&self) -> &::std::option::Option<crate::types::BarChartFieldWells> {
        &self.field_wells
    }
    /// <p>The sort configuration of a <code>BarChartVisual</code>.</p>
    pub fn sort_configuration(mut self, input: crate::types::BarChartSortConfiguration) -> Self {
        self.sort_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort configuration of a <code>BarChartVisual</code>.</p>
    pub fn set_sort_configuration(mut self, input: ::std::option::Option<crate::types::BarChartSortConfiguration>) -> Self {
        self.sort_configuration = input;
        self
    }
    /// <p>The sort configuration of a <code>BarChartVisual</code>.</p>
    pub fn get_sort_configuration(&self) -> &::std::option::Option<crate::types::BarChartSortConfiguration> {
        &self.sort_configuration
    }
    /// <p>The orientation of the bars in a bar chart visual. There are two valid values in this structure:</p>
    /// <ul>
    /// <li> <p> <code>HORIZONTAL</code>: Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.</p> </li>
    /// <li> <p> <code>VERTICAL</code>: Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.</p> </li>
    /// </ul>
    pub fn orientation(mut self, input: crate::types::BarChartOrientation) -> Self {
        self.orientation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The orientation of the bars in a bar chart visual. There are two valid values in this structure:</p>
    /// <ul>
    /// <li> <p> <code>HORIZONTAL</code>: Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.</p> </li>
    /// <li> <p> <code>VERTICAL</code>: Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.</p> </li>
    /// </ul>
    pub fn set_orientation(mut self, input: ::std::option::Option<crate::types::BarChartOrientation>) -> Self {
        self.orientation = input;
        self
    }
    /// <p>The orientation of the bars in a bar chart visual. There are two valid values in this structure:</p>
    /// <ul>
    /// <li> <p> <code>HORIZONTAL</code>: Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.</p> </li>
    /// <li> <p> <code>VERTICAL</code>: Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.</p> </li>
    /// </ul>
    pub fn get_orientation(&self) -> &::std::option::Option<crate::types::BarChartOrientation> {
        &self.orientation
    }
    /// <p>Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.</p>
    pub fn bars_arrangement(mut self, input: crate::types::BarsArrangement) -> Self {
        self.bars_arrangement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.</p>
    pub fn set_bars_arrangement(mut self, input: ::std::option::Option<crate::types::BarsArrangement>) -> Self {
        self.bars_arrangement = input;
        self
    }
    /// <p>Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.</p>
    pub fn get_bars_arrangement(&self) -> &::std::option::Option<crate::types::BarsArrangement> {
        &self.bars_arrangement
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn visual_palette(mut self, input: crate::types::VisualPalette) -> Self {
        self.visual_palette = ::std::option::Option::Some(input);
        self
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn set_visual_palette(mut self, input: ::std::option::Option<crate::types::VisualPalette>) -> Self {
        self.visual_palette = input;
        self
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn get_visual_palette(&self) -> &::std::option::Option<crate::types::VisualPalette> {
        &self.visual_palette
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn small_multiples_options(mut self, input: crate::types::SmallMultiplesOptions) -> Self {
        self.small_multiples_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn set_small_multiples_options(mut self, input: ::std::option::Option<crate::types::SmallMultiplesOptions>) -> Self {
        self.small_multiples_options = input;
        self
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn get_small_multiples_options(&self) -> &::std::option::Option<crate::types::SmallMultiplesOptions> {
        &self.small_multiples_options
    }
    /// <p>The label display options (grid line, range, scale, axis step) for bar chart category.</p>
    pub fn category_axis(mut self, input: crate::types::AxisDisplayOptions) -> Self {
        self.category_axis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label display options (grid line, range, scale, axis step) for bar chart category.</p>
    pub fn set_category_axis(mut self, input: ::std::option::Option<crate::types::AxisDisplayOptions>) -> Self {
        self.category_axis = input;
        self
    }
    /// <p>The label display options (grid line, range, scale, axis step) for bar chart category.</p>
    pub fn get_category_axis(&self) -> &::std::option::Option<crate::types::AxisDisplayOptions> {
        &self.category_axis
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart.</p>
    pub fn category_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.category_label_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart.</p>
    pub fn set_category_label_options(mut self, input: ::std::option::Option<crate::types::ChartAxisLabelOptions>) -> Self {
        self.category_label_options = input;
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart.</p>
    pub fn get_category_label_options(&self) -> &::std::option::Option<crate::types::ChartAxisLabelOptions> {
        &self.category_label_options
    }
    /// <p>The label display options (grid line, range, scale, axis step) for a bar chart value.</p>
    pub fn value_axis(mut self, input: crate::types::AxisDisplayOptions) -> Self {
        self.value_axis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label display options (grid line, range, scale, axis step) for a bar chart value.</p>
    pub fn set_value_axis(mut self, input: ::std::option::Option<crate::types::AxisDisplayOptions>) -> Self {
        self.value_axis = input;
        self
    }
    /// <p>The label display options (grid line, range, scale, axis step) for a bar chart value.</p>
    pub fn get_value_axis(&self) -> &::std::option::Option<crate::types::AxisDisplayOptions> {
        &self.value_axis
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart value.</p>
    pub fn value_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.value_label_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart value.</p>
    pub fn set_value_label_options(mut self, input: ::std::option::Option<crate::types::ChartAxisLabelOptions>) -> Self {
        self.value_label_options = input;
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a bar chart value.</p>
    pub fn get_value_label_options(&self) -> &::std::option::Option<crate::types::ChartAxisLabelOptions> {
        &self.value_label_options
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.</p>
    pub fn color_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.color_label_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.</p>
    pub fn set_color_label_options(mut self, input: ::std::option::Option<crate::types::ChartAxisLabelOptions>) -> Self {
        self.color_label_options = input;
        self
    }
    /// <p>The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.</p>
    pub fn get_color_label_options(&self) -> &::std::option::Option<crate::types::ChartAxisLabelOptions> {
        &self.color_label_options
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn legend(mut self, input: crate::types::LegendOptions) -> Self {
        self.legend = ::std::option::Option::Some(input);
        self
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn set_legend(mut self, input: ::std::option::Option<crate::types::LegendOptions>) -> Self {
        self.legend = input;
        self
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn get_legend(&self) -> &::std::option::Option<crate::types::LegendOptions> {
        &self.legend
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn data_labels(mut self, input: crate::types::DataLabelOptions) -> Self {
        self.data_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn set_data_labels(mut self, input: ::std::option::Option<crate::types::DataLabelOptions>) -> Self {
        self.data_labels = input;
        self
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn get_data_labels(&self) -> &::std::option::Option<crate::types::DataLabelOptions> {
        &self.data_labels
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn tooltip(mut self, input: crate::types::TooltipOptions) -> Self {
        self.tooltip = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn set_tooltip(mut self, input: ::std::option::Option<crate::types::TooltipOptions>) -> Self {
        self.tooltip = input;
        self
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn get_tooltip(&self) -> &::std::option::Option<crate::types::TooltipOptions> {
        &self.tooltip
    }
    /// Appends an item to `reference_lines`.
    ///
    /// To override the contents of this collection use [`set_reference_lines`](Self::set_reference_lines).
    ///
    /// <p>The reference line setup of the visual.</p>
    pub fn reference_lines(mut self, input: crate::types::ReferenceLine) -> Self {
        let mut v = self.reference_lines.unwrap_or_default();
        v.push(input);
        self.reference_lines = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reference line setup of the visual.</p>
    pub fn set_reference_lines(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReferenceLine>>) -> Self {
        self.reference_lines = input;
        self
    }
    /// <p>The reference line setup of the visual.</p>
    pub fn get_reference_lines(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReferenceLine>> {
        &self.reference_lines
    }
    /// Appends an item to `contribution_analysis_defaults`.
    ///
    /// To override the contents of this collection use [`set_contribution_analysis_defaults`](Self::set_contribution_analysis_defaults).
    ///
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn contribution_analysis_defaults(mut self, input: crate::types::ContributionAnalysisDefault) -> Self {
        let mut v = self.contribution_analysis_defaults.unwrap_or_default();
        v.push(input);
        self.contribution_analysis_defaults = ::std::option::Option::Some(v);
        self
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn set_contribution_analysis_defaults(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
    ) -> Self {
        self.contribution_analysis_defaults = input;
        self
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn get_contribution_analysis_defaults(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>> {
        &self.contribution_analysis_defaults
    }
    /// Consumes the builder and constructs a [`BarChartConfiguration`](crate::types::BarChartConfiguration).
    pub fn build(self) -> crate::types::BarChartConfiguration {
        crate::types::BarChartConfiguration {
            field_wells: self.field_wells,
            sort_configuration: self.sort_configuration,
            orientation: self.orientation,
            bars_arrangement: self.bars_arrangement,
            visual_palette: self.visual_palette,
            small_multiples_options: self.small_multiples_options,
            category_axis: self.category_axis,
            category_label_options: self.category_label_options,
            value_axis: self.value_axis,
            value_label_options: self.value_label_options,
            color_label_options: self.color_label_options,
            legend: self.legend,
            data_labels: self.data_labels,
            tooltip: self.tooltip,
            reference_lines: self.reference_lines,
            contribution_analysis_defaults: self.contribution_analysis_defaults,
        }
    }
}
