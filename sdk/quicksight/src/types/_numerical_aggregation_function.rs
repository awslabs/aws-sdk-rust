// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aggregation for numerical values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NumericalAggregationFunction {
    /// <p>Built-in aggregation functions for numerical values.</p>
    /// <ul>
    /// <li> <p> <code>SUM</code>: The sum of a dimension or measure. </p> </li>
    /// <li> <p> <code>AVERAGE</code>: The average of a dimension or measure.</p> </li>
    /// <li> <p> <code>MIN</code>: The minimum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>MAX</code>: The maximum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>COUNT</code>: The count of a dimension or measure.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: The count of distinct values in a dimension or measure.</p> </li>
    /// <li> <p> <code>VAR</code>: The variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>VARP</code>: The partitioned variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEV</code>: The standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEVP</code>: The partitioned standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>MEDIAN</code>: The median value of a dimension or measure.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub simple_numerical_aggregation:
        std::option::Option<crate::types::SimpleNumericalAggregationFunction>,
    /// <p>An aggregation based on the percentile of values in a dimension or measure.</p>
    #[doc(hidden)]
    pub percentile_aggregation: std::option::Option<crate::types::PercentileAggregation>,
}
impl NumericalAggregationFunction {
    /// <p>Built-in aggregation functions for numerical values.</p>
    /// <ul>
    /// <li> <p> <code>SUM</code>: The sum of a dimension or measure. </p> </li>
    /// <li> <p> <code>AVERAGE</code>: The average of a dimension or measure.</p> </li>
    /// <li> <p> <code>MIN</code>: The minimum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>MAX</code>: The maximum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>COUNT</code>: The count of a dimension or measure.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: The count of distinct values in a dimension or measure.</p> </li>
    /// <li> <p> <code>VAR</code>: The variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>VARP</code>: The partitioned variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEV</code>: The standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEVP</code>: The partitioned standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>MEDIAN</code>: The median value of a dimension or measure.</p> </li>
    /// </ul>
    pub fn simple_numerical_aggregation(
        &self,
    ) -> std::option::Option<&crate::types::SimpleNumericalAggregationFunction> {
        self.simple_numerical_aggregation.as_ref()
    }
    /// <p>An aggregation based on the percentile of values in a dimension or measure.</p>
    pub fn percentile_aggregation(
        &self,
    ) -> std::option::Option<&crate::types::PercentileAggregation> {
        self.percentile_aggregation.as_ref()
    }
}
impl NumericalAggregationFunction {
    /// Creates a new builder-style object to manufacture [`NumericalAggregationFunction`](crate::types::NumericalAggregationFunction).
    pub fn builder() -> crate::types::builders::NumericalAggregationFunctionBuilder {
        crate::types::builders::NumericalAggregationFunctionBuilder::default()
    }
}

/// A builder for [`NumericalAggregationFunction`](crate::types::NumericalAggregationFunction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NumericalAggregationFunctionBuilder {
    pub(crate) simple_numerical_aggregation:
        std::option::Option<crate::types::SimpleNumericalAggregationFunction>,
    pub(crate) percentile_aggregation: std::option::Option<crate::types::PercentileAggregation>,
}
impl NumericalAggregationFunctionBuilder {
    /// <p>Built-in aggregation functions for numerical values.</p>
    /// <ul>
    /// <li> <p> <code>SUM</code>: The sum of a dimension or measure. </p> </li>
    /// <li> <p> <code>AVERAGE</code>: The average of a dimension or measure.</p> </li>
    /// <li> <p> <code>MIN</code>: The minimum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>MAX</code>: The maximum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>COUNT</code>: The count of a dimension or measure.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: The count of distinct values in a dimension or measure.</p> </li>
    /// <li> <p> <code>VAR</code>: The variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>VARP</code>: The partitioned variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEV</code>: The standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEVP</code>: The partitioned standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>MEDIAN</code>: The median value of a dimension or measure.</p> </li>
    /// </ul>
    pub fn simple_numerical_aggregation(
        mut self,
        input: crate::types::SimpleNumericalAggregationFunction,
    ) -> Self {
        self.simple_numerical_aggregation = Some(input);
        self
    }
    /// <p>Built-in aggregation functions for numerical values.</p>
    /// <ul>
    /// <li> <p> <code>SUM</code>: The sum of a dimension or measure. </p> </li>
    /// <li> <p> <code>AVERAGE</code>: The average of a dimension or measure.</p> </li>
    /// <li> <p> <code>MIN</code>: The minimum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>MAX</code>: The maximum value of a dimension or measure.</p> </li>
    /// <li> <p> <code>COUNT</code>: The count of a dimension or measure.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: The count of distinct values in a dimension or measure.</p> </li>
    /// <li> <p> <code>VAR</code>: The variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>VARP</code>: The partitioned variance of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEV</code>: The standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>STDEVP</code>: The partitioned standard deviation of a dimension or measure.</p> </li>
    /// <li> <p> <code>MEDIAN</code>: The median value of a dimension or measure.</p> </li>
    /// </ul>
    pub fn set_simple_numerical_aggregation(
        mut self,
        input: std::option::Option<crate::types::SimpleNumericalAggregationFunction>,
    ) -> Self {
        self.simple_numerical_aggregation = input;
        self
    }
    /// <p>An aggregation based on the percentile of values in a dimension or measure.</p>
    pub fn percentile_aggregation(mut self, input: crate::types::PercentileAggregation) -> Self {
        self.percentile_aggregation = Some(input);
        self
    }
    /// <p>An aggregation based on the percentile of values in a dimension or measure.</p>
    pub fn set_percentile_aggregation(
        mut self,
        input: std::option::Option<crate::types::PercentileAggregation>,
    ) -> Self {
        self.percentile_aggregation = input;
        self
    }
    /// Consumes the builder and constructs a [`NumericalAggregationFunction`](crate::types::NumericalAggregationFunction).
    pub fn build(self) -> crate::types::NumericalAggregationFunction {
        crate::types::NumericalAggregationFunction {
            simple_numerical_aggregation: self.simple_numerical_aggregation,
            percentile_aggregation: self.percentile_aggregation,
        }
    }
}
