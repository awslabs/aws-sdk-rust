// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `IngestionErrorType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let ingestionerrortype = unimplemented!();
/// match ingestionerrortype {
///     IngestionErrorType::AccountCapacityLimitExceeded => { /* ... */ },
///     IngestionErrorType::ConnectionFailure => { /* ... */ },
///     IngestionErrorType::CursorNotEnabled => { /* ... */ },
///     IngestionErrorType::CustomerError => { /* ... */ },
///     IngestionErrorType::DataSetDeleted => { /* ... */ },
///     IngestionErrorType::DataSetNotSpice => { /* ... */ },
///     IngestionErrorType::DataSetSizeLimitExceeded => { /* ... */ },
///     IngestionErrorType::DataSourceAuthFailed => { /* ... */ },
///     IngestionErrorType::DataSourceConnectionFailed => { /* ... */ },
///     IngestionErrorType::DataSourceNotFound => { /* ... */ },
///     IngestionErrorType::DataToleranceException => { /* ... */ },
///     IngestionErrorType::ElasticsearchCursorNotEnabled => { /* ... */ },
///     IngestionErrorType::FailureToAssumeRole => { /* ... */ },
///     IngestionErrorType::FailureToProcessJsonFile => { /* ... */ },
///     IngestionErrorType::IamRoleNotAvailable => { /* ... */ },
///     IngestionErrorType::IngestionCanceled => { /* ... */ },
///     IngestionErrorType::IngestionSuperseded => { /* ... */ },
///     IngestionErrorType::InternalServiceError => { /* ... */ },
///     IngestionErrorType::InvalidDataprepSyntax => { /* ... */ },
///     IngestionErrorType::InvalidDataSourceConfig => { /* ... */ },
///     IngestionErrorType::InvalidDateFormat => { /* ... */ },
///     IngestionErrorType::IotDataSetFileEmpty => { /* ... */ },
///     IngestionErrorType::IotFileNotFound => { /* ... */ },
///     IngestionErrorType::OauthTokenFailure => { /* ... */ },
///     IngestionErrorType::PasswordAuthenticationFailure => { /* ... */ },
///     IngestionErrorType::PermissionDenied => { /* ... */ },
///     IngestionErrorType::PermissionNotFound => { /* ... */ },
///     IngestionErrorType::QueryTimeout => { /* ... */ },
///     IngestionErrorType::RefreshSuppressedByEdit => { /* ... */ },
///     IngestionErrorType::RowSizeLimitExceeded => { /* ... */ },
///     IngestionErrorType::S3FileInaccessible => { /* ... */ },
///     IngestionErrorType::S3ManifestError => { /* ... */ },
///     IngestionErrorType::S3UploadedFileDeleted => { /* ... */ },
///     IngestionErrorType::SourceApiLimitExceededFailure => { /* ... */ },
///     IngestionErrorType::SourceResourceLimitExceeded => { /* ... */ },
///     IngestionErrorType::SpiceTableNotFound => { /* ... */ },
///     IngestionErrorType::SqlException => { /* ... */ },
///     IngestionErrorType::SqlInvalidParameterValue => { /* ... */ },
///     IngestionErrorType::SqlNumericOverflow => { /* ... */ },
///     IngestionErrorType::SqlSchemaMismatchError => { /* ... */ },
///     IngestionErrorType::SqlTableNotFound => { /* ... */ },
///     IngestionErrorType::SslCertificateValidationFailure => { /* ... */ },
///     IngestionErrorType::UnresolvableHost => { /* ... */ },
///     IngestionErrorType::UnroutableHost => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `ingestionerrortype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `IngestionErrorType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `IngestionErrorType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `IngestionErrorType::NewFeature` is defined.
/// Specifically, when `ingestionerrortype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `IngestionErrorType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum IngestionErrorType {
    #[allow(missing_docs)] // documentation missing in model
    AccountCapacityLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ConnectionFailure,
    #[allow(missing_docs)] // documentation missing in model
    CursorNotEnabled,
    #[allow(missing_docs)] // documentation missing in model
    CustomerError,
    #[allow(missing_docs)] // documentation missing in model
    DataSetDeleted,
    #[allow(missing_docs)] // documentation missing in model
    DataSetNotSpice,
    #[allow(missing_docs)] // documentation missing in model
    DataSetSizeLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    DataSourceAuthFailed,
    #[allow(missing_docs)] // documentation missing in model
    DataSourceConnectionFailed,
    #[allow(missing_docs)] // documentation missing in model
    DataSourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DataToleranceException,
    #[allow(missing_docs)] // documentation missing in model
    ElasticsearchCursorNotEnabled,
    #[allow(missing_docs)] // documentation missing in model
    FailureToAssumeRole,
    #[allow(missing_docs)] // documentation missing in model
    FailureToProcessJsonFile,
    #[allow(missing_docs)] // documentation missing in model
    IamRoleNotAvailable,
    #[allow(missing_docs)] // documentation missing in model
    IngestionCanceled,
    #[allow(missing_docs)] // documentation missing in model
    IngestionSuperseded,
    #[allow(missing_docs)] // documentation missing in model
    InternalServiceError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidDataprepSyntax,
    #[allow(missing_docs)] // documentation missing in model
    InvalidDataSourceConfig,
    #[allow(missing_docs)] // documentation missing in model
    InvalidDateFormat,
    #[allow(missing_docs)] // documentation missing in model
    IotDataSetFileEmpty,
    #[allow(missing_docs)] // documentation missing in model
    IotFileNotFound,
    #[allow(missing_docs)] // documentation missing in model
    OauthTokenFailure,
    #[allow(missing_docs)] // documentation missing in model
    PasswordAuthenticationFailure,
    #[allow(missing_docs)] // documentation missing in model
    PermissionDenied,
    #[allow(missing_docs)] // documentation missing in model
    PermissionNotFound,
    #[allow(missing_docs)] // documentation missing in model
    QueryTimeout,
    #[allow(missing_docs)] // documentation missing in model
    RefreshSuppressedByEdit,
    #[allow(missing_docs)] // documentation missing in model
    RowSizeLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    S3FileInaccessible,
    #[allow(missing_docs)] // documentation missing in model
    S3ManifestError,
    #[allow(missing_docs)] // documentation missing in model
    S3UploadedFileDeleted,
    #[allow(missing_docs)] // documentation missing in model
    SourceApiLimitExceededFailure,
    #[allow(missing_docs)] // documentation missing in model
    SourceResourceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    SpiceTableNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SqlException,
    #[allow(missing_docs)] // documentation missing in model
    SqlInvalidParameterValue,
    #[allow(missing_docs)] // documentation missing in model
    SqlNumericOverflow,
    #[allow(missing_docs)] // documentation missing in model
    SqlSchemaMismatchError,
    #[allow(missing_docs)] // documentation missing in model
    SqlTableNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SslCertificateValidationFailure,
    #[allow(missing_docs)] // documentation missing in model
    UnresolvableHost,
    #[allow(missing_docs)] // documentation missing in model
    UnroutableHost,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for IngestionErrorType {
    fn from(s: &str) -> Self {
        match s {
            "ACCOUNT_CAPACITY_LIMIT_EXCEEDED" => IngestionErrorType::AccountCapacityLimitExceeded,
            "CONNECTION_FAILURE" => IngestionErrorType::ConnectionFailure,
            "CURSOR_NOT_ENABLED" => IngestionErrorType::CursorNotEnabled,
            "CUSTOMER_ERROR" => IngestionErrorType::CustomerError,
            "DATA_SET_DELETED" => IngestionErrorType::DataSetDeleted,
            "DATA_SET_NOT_SPICE" => IngestionErrorType::DataSetNotSpice,
            "DATA_SET_SIZE_LIMIT_EXCEEDED" => IngestionErrorType::DataSetSizeLimitExceeded,
            "DATA_SOURCE_AUTH_FAILED" => IngestionErrorType::DataSourceAuthFailed,
            "DATA_SOURCE_CONNECTION_FAILED" => IngestionErrorType::DataSourceConnectionFailed,
            "DATA_SOURCE_NOT_FOUND" => IngestionErrorType::DataSourceNotFound,
            "DATA_TOLERANCE_EXCEPTION" => IngestionErrorType::DataToleranceException,
            "ELASTICSEARCH_CURSOR_NOT_ENABLED" => IngestionErrorType::ElasticsearchCursorNotEnabled,
            "FAILURE_TO_ASSUME_ROLE" => IngestionErrorType::FailureToAssumeRole,
            "FAILURE_TO_PROCESS_JSON_FILE" => IngestionErrorType::FailureToProcessJsonFile,
            "IAM_ROLE_NOT_AVAILABLE" => IngestionErrorType::IamRoleNotAvailable,
            "INGESTION_CANCELED" => IngestionErrorType::IngestionCanceled,
            "INGESTION_SUPERSEDED" => IngestionErrorType::IngestionSuperseded,
            "INTERNAL_SERVICE_ERROR" => IngestionErrorType::InternalServiceError,
            "INVALID_DATAPREP_SYNTAX" => IngestionErrorType::InvalidDataprepSyntax,
            "INVALID_DATA_SOURCE_CONFIG" => IngestionErrorType::InvalidDataSourceConfig,
            "INVALID_DATE_FORMAT" => IngestionErrorType::InvalidDateFormat,
            "IOT_DATA_SET_FILE_EMPTY" => IngestionErrorType::IotDataSetFileEmpty,
            "IOT_FILE_NOT_FOUND" => IngestionErrorType::IotFileNotFound,
            "OAUTH_TOKEN_FAILURE" => IngestionErrorType::OauthTokenFailure,
            "PASSWORD_AUTHENTICATION_FAILURE" => IngestionErrorType::PasswordAuthenticationFailure,
            "PERMISSION_DENIED" => IngestionErrorType::PermissionDenied,
            "PERMISSION_NOT_FOUND" => IngestionErrorType::PermissionNotFound,
            "QUERY_TIMEOUT" => IngestionErrorType::QueryTimeout,
            "REFRESH_SUPPRESSED_BY_EDIT" => IngestionErrorType::RefreshSuppressedByEdit,
            "ROW_SIZE_LIMIT_EXCEEDED" => IngestionErrorType::RowSizeLimitExceeded,
            "S3_FILE_INACCESSIBLE" => IngestionErrorType::S3FileInaccessible,
            "S3_MANIFEST_ERROR" => IngestionErrorType::S3ManifestError,
            "S3_UPLOADED_FILE_DELETED" => IngestionErrorType::S3UploadedFileDeleted,
            "SOURCE_API_LIMIT_EXCEEDED_FAILURE" => {
                IngestionErrorType::SourceApiLimitExceededFailure
            }
            "SOURCE_RESOURCE_LIMIT_EXCEEDED" => IngestionErrorType::SourceResourceLimitExceeded,
            "SPICE_TABLE_NOT_FOUND" => IngestionErrorType::SpiceTableNotFound,
            "SQL_EXCEPTION" => IngestionErrorType::SqlException,
            "SQL_INVALID_PARAMETER_VALUE" => IngestionErrorType::SqlInvalidParameterValue,
            "SQL_NUMERIC_OVERFLOW" => IngestionErrorType::SqlNumericOverflow,
            "SQL_SCHEMA_MISMATCH_ERROR" => IngestionErrorType::SqlSchemaMismatchError,
            "SQL_TABLE_NOT_FOUND" => IngestionErrorType::SqlTableNotFound,
            "SSL_CERTIFICATE_VALIDATION_FAILURE" => {
                IngestionErrorType::SslCertificateValidationFailure
            }
            "UNRESOLVABLE_HOST" => IngestionErrorType::UnresolvableHost,
            "UNROUTABLE_HOST" => IngestionErrorType::UnroutableHost,
            other => IngestionErrorType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for IngestionErrorType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(IngestionErrorType::from(s))
    }
}
impl IngestionErrorType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            IngestionErrorType::AccountCapacityLimitExceeded => "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
            IngestionErrorType::ConnectionFailure => "CONNECTION_FAILURE",
            IngestionErrorType::CursorNotEnabled => "CURSOR_NOT_ENABLED",
            IngestionErrorType::CustomerError => "CUSTOMER_ERROR",
            IngestionErrorType::DataSetDeleted => "DATA_SET_DELETED",
            IngestionErrorType::DataSetNotSpice => "DATA_SET_NOT_SPICE",
            IngestionErrorType::DataSetSizeLimitExceeded => "DATA_SET_SIZE_LIMIT_EXCEEDED",
            IngestionErrorType::DataSourceAuthFailed => "DATA_SOURCE_AUTH_FAILED",
            IngestionErrorType::DataSourceConnectionFailed => "DATA_SOURCE_CONNECTION_FAILED",
            IngestionErrorType::DataSourceNotFound => "DATA_SOURCE_NOT_FOUND",
            IngestionErrorType::DataToleranceException => "DATA_TOLERANCE_EXCEPTION",
            IngestionErrorType::ElasticsearchCursorNotEnabled => "ELASTICSEARCH_CURSOR_NOT_ENABLED",
            IngestionErrorType::FailureToAssumeRole => "FAILURE_TO_ASSUME_ROLE",
            IngestionErrorType::FailureToProcessJsonFile => "FAILURE_TO_PROCESS_JSON_FILE",
            IngestionErrorType::IamRoleNotAvailable => "IAM_ROLE_NOT_AVAILABLE",
            IngestionErrorType::IngestionCanceled => "INGESTION_CANCELED",
            IngestionErrorType::IngestionSuperseded => "INGESTION_SUPERSEDED",
            IngestionErrorType::InternalServiceError => "INTERNAL_SERVICE_ERROR",
            IngestionErrorType::InvalidDataprepSyntax => "INVALID_DATAPREP_SYNTAX",
            IngestionErrorType::InvalidDataSourceConfig => "INVALID_DATA_SOURCE_CONFIG",
            IngestionErrorType::InvalidDateFormat => "INVALID_DATE_FORMAT",
            IngestionErrorType::IotDataSetFileEmpty => "IOT_DATA_SET_FILE_EMPTY",
            IngestionErrorType::IotFileNotFound => "IOT_FILE_NOT_FOUND",
            IngestionErrorType::OauthTokenFailure => "OAUTH_TOKEN_FAILURE",
            IngestionErrorType::PasswordAuthenticationFailure => "PASSWORD_AUTHENTICATION_FAILURE",
            IngestionErrorType::PermissionDenied => "PERMISSION_DENIED",
            IngestionErrorType::PermissionNotFound => "PERMISSION_NOT_FOUND",
            IngestionErrorType::QueryTimeout => "QUERY_TIMEOUT",
            IngestionErrorType::RefreshSuppressedByEdit => "REFRESH_SUPPRESSED_BY_EDIT",
            IngestionErrorType::RowSizeLimitExceeded => "ROW_SIZE_LIMIT_EXCEEDED",
            IngestionErrorType::S3FileInaccessible => "S3_FILE_INACCESSIBLE",
            IngestionErrorType::S3ManifestError => "S3_MANIFEST_ERROR",
            IngestionErrorType::S3UploadedFileDeleted => "S3_UPLOADED_FILE_DELETED",
            IngestionErrorType::SourceApiLimitExceededFailure => {
                "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
            }
            IngestionErrorType::SourceResourceLimitExceeded => "SOURCE_RESOURCE_LIMIT_EXCEEDED",
            IngestionErrorType::SpiceTableNotFound => "SPICE_TABLE_NOT_FOUND",
            IngestionErrorType::SqlException => "SQL_EXCEPTION",
            IngestionErrorType::SqlInvalidParameterValue => "SQL_INVALID_PARAMETER_VALUE",
            IngestionErrorType::SqlNumericOverflow => "SQL_NUMERIC_OVERFLOW",
            IngestionErrorType::SqlSchemaMismatchError => "SQL_SCHEMA_MISMATCH_ERROR",
            IngestionErrorType::SqlTableNotFound => "SQL_TABLE_NOT_FOUND",
            IngestionErrorType::SslCertificateValidationFailure => {
                "SSL_CERTIFICATE_VALIDATION_FAILURE"
            }
            IngestionErrorType::UnresolvableHost => "UNRESOLVABLE_HOST",
            IngestionErrorType::UnroutableHost => "UNROUTABLE_HOST",
            IngestionErrorType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
            "CONNECTION_FAILURE",
            "CURSOR_NOT_ENABLED",
            "CUSTOMER_ERROR",
            "DATA_SET_DELETED",
            "DATA_SET_NOT_SPICE",
            "DATA_SET_SIZE_LIMIT_EXCEEDED",
            "DATA_SOURCE_AUTH_FAILED",
            "DATA_SOURCE_CONNECTION_FAILED",
            "DATA_SOURCE_NOT_FOUND",
            "DATA_TOLERANCE_EXCEPTION",
            "ELASTICSEARCH_CURSOR_NOT_ENABLED",
            "FAILURE_TO_ASSUME_ROLE",
            "FAILURE_TO_PROCESS_JSON_FILE",
            "IAM_ROLE_NOT_AVAILABLE",
            "INGESTION_CANCELED",
            "INGESTION_SUPERSEDED",
            "INTERNAL_SERVICE_ERROR",
            "INVALID_DATAPREP_SYNTAX",
            "INVALID_DATA_SOURCE_CONFIG",
            "INVALID_DATE_FORMAT",
            "IOT_DATA_SET_FILE_EMPTY",
            "IOT_FILE_NOT_FOUND",
            "OAUTH_TOKEN_FAILURE",
            "PASSWORD_AUTHENTICATION_FAILURE",
            "PERMISSION_DENIED",
            "PERMISSION_NOT_FOUND",
            "QUERY_TIMEOUT",
            "REFRESH_SUPPRESSED_BY_EDIT",
            "ROW_SIZE_LIMIT_EXCEEDED",
            "S3_FILE_INACCESSIBLE",
            "S3_MANIFEST_ERROR",
            "S3_UPLOADED_FILE_DELETED",
            "SOURCE_API_LIMIT_EXCEEDED_FAILURE",
            "SOURCE_RESOURCE_LIMIT_EXCEEDED",
            "SPICE_TABLE_NOT_FOUND",
            "SQL_EXCEPTION",
            "SQL_INVALID_PARAMETER_VALUE",
            "SQL_NUMERIC_OVERFLOW",
            "SQL_SCHEMA_MISMATCH_ERROR",
            "SQL_TABLE_NOT_FOUND",
            "SSL_CERTIFICATE_VALIDATION_FAILURE",
            "UNRESOLVABLE_HOST",
            "UNROUTABLE_HOST",
        ]
    }
}
impl AsRef<str> for IngestionErrorType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
