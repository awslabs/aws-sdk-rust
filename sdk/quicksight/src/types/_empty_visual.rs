// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An empty visual.</p>
/// <p>Empty visuals are used in layouts but have not been configured to show any data. A new visual created in the Amazon QuickSight console is considered an <code>EmptyVisual</code> until a visual type is selected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmptyVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub visual_id: ::std::string::String,
    /// <p>The data set that is used in the empty visual. Every visual requires a dataset to render.</p>
    pub data_set_identifier: ::std::string::String,
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
}
impl EmptyVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn visual_id(&self) -> &str {
        use std::ops::Deref;
        self.visual_id.deref()
    }
    /// <p>The data set that is used in the empty visual. Every visual requires a dataset to render.</p>
    pub fn data_set_identifier(&self) -> &str {
        use std::ops::Deref;
        self.data_set_identifier.deref()
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::VisualCustomAction] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl EmptyVisual {
    /// Creates a new builder-style object to manufacture [`EmptyVisual`](crate::types::EmptyVisual).
    pub fn builder() -> crate::types::builders::EmptyVisualBuilder {
        crate::types::builders::EmptyVisualBuilder::default()
    }
}

/// A builder for [`EmptyVisual`](crate::types::EmptyVisual).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EmptyVisualBuilder {
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
}
impl EmptyVisualBuilder {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    /// This field is required.
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// <p>The data set that is used in the empty visual. Every visual requires a dataset to render.</p>
    /// This field is required.
    pub fn data_set_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data set that is used in the empty visual. Every visual requires a dataset to render.</p>
    pub fn set_data_set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_identifier = input;
        self
    }
    /// <p>The data set that is used in the empty visual. Every visual requires a dataset to render.</p>
    pub fn get_data_set_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_identifier
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn actions(mut self, input: crate::types::VisualCustomAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`EmptyVisual`](crate::types::EmptyVisual).
    /// This method will fail if any of the following fields are not set:
    /// - [`visual_id`](crate::types::builders::EmptyVisualBuilder::visual_id)
    /// - [`data_set_identifier`](crate::types::builders::EmptyVisualBuilder::data_set_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::EmptyVisual, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EmptyVisual {
            visual_id: self.visual_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visual_id",
                    "visual_id was not specified but it is required when building EmptyVisual",
                )
            })?,
            data_set_identifier: self.data_set_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_set_identifier",
                    "data_set_identifier was not specified but it is required when building EmptyVisual",
                )
            })?,
            actions: self.actions,
        })
    }
}
