// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An element within a free-form layout.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FreeFormLayoutElement {
    /// <p>A unique identifier for an element within a free-form layout.</p>
    pub element_id: ::std::string::String,
    /// <p>The type of element.</p>
    pub element_type: crate::types::LayoutElementType,
    /// <p>The x-axis coordinate of the element.</p>
    pub x_axis_location: ::std::string::String,
    /// <p>The y-axis coordinate of the element.</p>
    pub y_axis_location: ::std::string::String,
    /// <p>The width of an element within a free-form layout.</p>
    pub width: ::std::string::String,
    /// <p>The height of an element within a free-form layout.</p>
    pub height: ::std::string::String,
    /// <p>The visibility of an element within a free-form layout.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The rendering rules that determine when an element should be displayed within a free-form layout.</p>
    pub rendering_rules: ::std::option::Option<::std::vec::Vec<crate::types::SheetElementRenderingRule>>,
    /// <p>The border style configuration of a free-form layout element.</p>
    pub border_style: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>,
    /// <p>The border style configuration of a free-form layout element. This border style is used when the element is selected.</p>
    pub selected_border_style: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>,
    /// <p>The background style configuration of a free-form layout element.</p>
    pub background_style: ::std::option::Option<crate::types::FreeFormLayoutElementBackgroundStyle>,
    /// <p>The loading animation configuration of a free-form layout element.</p>
    pub loading_animation: ::std::option::Option<crate::types::LoadingAnimation>,
}
impl FreeFormLayoutElement {
    /// <p>A unique identifier for an element within a free-form layout.</p>
    pub fn element_id(&self) -> &str {
        use std::ops::Deref;
        self.element_id.deref()
    }
    /// <p>The type of element.</p>
    pub fn element_type(&self) -> &crate::types::LayoutElementType {
        &self.element_type
    }
    /// <p>The x-axis coordinate of the element.</p>
    pub fn x_axis_location(&self) -> &str {
        use std::ops::Deref;
        self.x_axis_location.deref()
    }
    /// <p>The y-axis coordinate of the element.</p>
    pub fn y_axis_location(&self) -> &str {
        use std::ops::Deref;
        self.y_axis_location.deref()
    }
    /// <p>The width of an element within a free-form layout.</p>
    pub fn width(&self) -> &str {
        use std::ops::Deref;
        self.width.deref()
    }
    /// <p>The height of an element within a free-form layout.</p>
    pub fn height(&self) -> &str {
        use std::ops::Deref;
        self.height.deref()
    }
    /// <p>The visibility of an element within a free-form layout.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The rendering rules that determine when an element should be displayed within a free-form layout.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rendering_rules.is_none()`.
    pub fn rendering_rules(&self) -> &[crate::types::SheetElementRenderingRule] {
        self.rendering_rules.as_deref().unwrap_or_default()
    }
    /// <p>The border style configuration of a free-form layout element.</p>
    pub fn border_style(&self) -> ::std::option::Option<&crate::types::FreeFormLayoutElementBorderStyle> {
        self.border_style.as_ref()
    }
    /// <p>The border style configuration of a free-form layout element. This border style is used when the element is selected.</p>
    pub fn selected_border_style(&self) -> ::std::option::Option<&crate::types::FreeFormLayoutElementBorderStyle> {
        self.selected_border_style.as_ref()
    }
    /// <p>The background style configuration of a free-form layout element.</p>
    pub fn background_style(&self) -> ::std::option::Option<&crate::types::FreeFormLayoutElementBackgroundStyle> {
        self.background_style.as_ref()
    }
    /// <p>The loading animation configuration of a free-form layout element.</p>
    pub fn loading_animation(&self) -> ::std::option::Option<&crate::types::LoadingAnimation> {
        self.loading_animation.as_ref()
    }
}
impl FreeFormLayoutElement {
    /// Creates a new builder-style object to manufacture [`FreeFormLayoutElement`](crate::types::FreeFormLayoutElement).
    pub fn builder() -> crate::types::builders::FreeFormLayoutElementBuilder {
        crate::types::builders::FreeFormLayoutElementBuilder::default()
    }
}

/// A builder for [`FreeFormLayoutElement`](crate::types::FreeFormLayoutElement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FreeFormLayoutElementBuilder {
    pub(crate) element_id: ::std::option::Option<::std::string::String>,
    pub(crate) element_type: ::std::option::Option<crate::types::LayoutElementType>,
    pub(crate) x_axis_location: ::std::option::Option<::std::string::String>,
    pub(crate) y_axis_location: ::std::option::Option<::std::string::String>,
    pub(crate) width: ::std::option::Option<::std::string::String>,
    pub(crate) height: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) rendering_rules: ::std::option::Option<::std::vec::Vec<crate::types::SheetElementRenderingRule>>,
    pub(crate) border_style: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>,
    pub(crate) selected_border_style: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>,
    pub(crate) background_style: ::std::option::Option<crate::types::FreeFormLayoutElementBackgroundStyle>,
    pub(crate) loading_animation: ::std::option::Option<crate::types::LoadingAnimation>,
}
impl FreeFormLayoutElementBuilder {
    /// <p>A unique identifier for an element within a free-form layout.</p>
    /// This field is required.
    pub fn element_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.element_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for an element within a free-form layout.</p>
    pub fn set_element_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.element_id = input;
        self
    }
    /// <p>A unique identifier for an element within a free-form layout.</p>
    pub fn get_element_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.element_id
    }
    /// <p>The type of element.</p>
    /// This field is required.
    pub fn element_type(mut self, input: crate::types::LayoutElementType) -> Self {
        self.element_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of element.</p>
    pub fn set_element_type(mut self, input: ::std::option::Option<crate::types::LayoutElementType>) -> Self {
        self.element_type = input;
        self
    }
    /// <p>The type of element.</p>
    pub fn get_element_type(&self) -> &::std::option::Option<crate::types::LayoutElementType> {
        &self.element_type
    }
    /// <p>The x-axis coordinate of the element.</p>
    /// This field is required.
    pub fn x_axis_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.x_axis_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The x-axis coordinate of the element.</p>
    pub fn set_x_axis_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.x_axis_location = input;
        self
    }
    /// <p>The x-axis coordinate of the element.</p>
    pub fn get_x_axis_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.x_axis_location
    }
    /// <p>The y-axis coordinate of the element.</p>
    /// This field is required.
    pub fn y_axis_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.y_axis_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The y-axis coordinate of the element.</p>
    pub fn set_y_axis_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.y_axis_location = input;
        self
    }
    /// <p>The y-axis coordinate of the element.</p>
    pub fn get_y_axis_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.y_axis_location
    }
    /// <p>The width of an element within a free-form layout.</p>
    /// This field is required.
    pub fn width(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.width = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The width of an element within a free-form layout.</p>
    pub fn set_width(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.width = input;
        self
    }
    /// <p>The width of an element within a free-form layout.</p>
    pub fn get_width(&self) -> &::std::option::Option<::std::string::String> {
        &self.width
    }
    /// <p>The height of an element within a free-form layout.</p>
    /// This field is required.
    pub fn height(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.height = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The height of an element within a free-form layout.</p>
    pub fn set_height(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.height = input;
        self
    }
    /// <p>The height of an element within a free-form layout.</p>
    pub fn get_height(&self) -> &::std::option::Option<::std::string::String> {
        &self.height
    }
    /// <p>The visibility of an element within a free-form layout.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of an element within a free-form layout.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of an element within a free-form layout.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// Appends an item to `rendering_rules`.
    ///
    /// To override the contents of this collection use [`set_rendering_rules`](Self::set_rendering_rules).
    ///
    /// <p>The rendering rules that determine when an element should be displayed within a free-form layout.</p>
    pub fn rendering_rules(mut self, input: crate::types::SheetElementRenderingRule) -> Self {
        let mut v = self.rendering_rules.unwrap_or_default();
        v.push(input);
        self.rendering_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rendering rules that determine when an element should be displayed within a free-form layout.</p>
    pub fn set_rendering_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SheetElementRenderingRule>>) -> Self {
        self.rendering_rules = input;
        self
    }
    /// <p>The rendering rules that determine when an element should be displayed within a free-form layout.</p>
    pub fn get_rendering_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SheetElementRenderingRule>> {
        &self.rendering_rules
    }
    /// <p>The border style configuration of a free-form layout element.</p>
    pub fn border_style(mut self, input: crate::types::FreeFormLayoutElementBorderStyle) -> Self {
        self.border_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The border style configuration of a free-form layout element.</p>
    pub fn set_border_style(mut self, input: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>) -> Self {
        self.border_style = input;
        self
    }
    /// <p>The border style configuration of a free-form layout element.</p>
    pub fn get_border_style(&self) -> &::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle> {
        &self.border_style
    }
    /// <p>The border style configuration of a free-form layout element. This border style is used when the element is selected.</p>
    pub fn selected_border_style(mut self, input: crate::types::FreeFormLayoutElementBorderStyle) -> Self {
        self.selected_border_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The border style configuration of a free-form layout element. This border style is used when the element is selected.</p>
    pub fn set_selected_border_style(mut self, input: ::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle>) -> Self {
        self.selected_border_style = input;
        self
    }
    /// <p>The border style configuration of a free-form layout element. This border style is used when the element is selected.</p>
    pub fn get_selected_border_style(&self) -> &::std::option::Option<crate::types::FreeFormLayoutElementBorderStyle> {
        &self.selected_border_style
    }
    /// <p>The background style configuration of a free-form layout element.</p>
    pub fn background_style(mut self, input: crate::types::FreeFormLayoutElementBackgroundStyle) -> Self {
        self.background_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The background style configuration of a free-form layout element.</p>
    pub fn set_background_style(mut self, input: ::std::option::Option<crate::types::FreeFormLayoutElementBackgroundStyle>) -> Self {
        self.background_style = input;
        self
    }
    /// <p>The background style configuration of a free-form layout element.</p>
    pub fn get_background_style(&self) -> &::std::option::Option<crate::types::FreeFormLayoutElementBackgroundStyle> {
        &self.background_style
    }
    /// <p>The loading animation configuration of a free-form layout element.</p>
    pub fn loading_animation(mut self, input: crate::types::LoadingAnimation) -> Self {
        self.loading_animation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The loading animation configuration of a free-form layout element.</p>
    pub fn set_loading_animation(mut self, input: ::std::option::Option<crate::types::LoadingAnimation>) -> Self {
        self.loading_animation = input;
        self
    }
    /// <p>The loading animation configuration of a free-form layout element.</p>
    pub fn get_loading_animation(&self) -> &::std::option::Option<crate::types::LoadingAnimation> {
        &self.loading_animation
    }
    /// Consumes the builder and constructs a [`FreeFormLayoutElement`](crate::types::FreeFormLayoutElement).
    /// This method will fail if any of the following fields are not set:
    /// - [`element_id`](crate::types::builders::FreeFormLayoutElementBuilder::element_id)
    /// - [`element_type`](crate::types::builders::FreeFormLayoutElementBuilder::element_type)
    /// - [`x_axis_location`](crate::types::builders::FreeFormLayoutElementBuilder::x_axis_location)
    /// - [`y_axis_location`](crate::types::builders::FreeFormLayoutElementBuilder::y_axis_location)
    /// - [`width`](crate::types::builders::FreeFormLayoutElementBuilder::width)
    /// - [`height`](crate::types::builders::FreeFormLayoutElementBuilder::height)
    pub fn build(self) -> ::std::result::Result<crate::types::FreeFormLayoutElement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FreeFormLayoutElement {
            element_id: self.element_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element_id",
                    "element_id was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            element_type: self.element_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element_type",
                    "element_type was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            x_axis_location: self.x_axis_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "x_axis_location",
                    "x_axis_location was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            y_axis_location: self.y_axis_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "y_axis_location",
                    "y_axis_location was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            width: self.width.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "width",
                    "width was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            height: self.height.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "height",
                    "height was not specified but it is required when building FreeFormLayoutElement",
                )
            })?,
            visibility: self.visibility,
            rendering_rules: self.rendering_rules,
            border_style: self.border_style,
            selected_border_style: self.selected_border_style,
            background_style: self.background_style,
            loading_animation: self.loading_animation,
        })
    }
}
