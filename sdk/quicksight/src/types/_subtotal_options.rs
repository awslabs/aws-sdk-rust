// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The subtotal options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubtotalOptions {
    /// <p>The visibility configuration for the subtotal cells.</p>
    #[doc(hidden)]
    pub totals_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The custom label string for the subtotal cells.</p>
    #[doc(hidden)]
    pub custom_label: std::option::Option<std::string::String>,
    /// <p>The field level (all, custom, last) for the subtotal cells.</p>
    #[doc(hidden)]
    pub field_level: std::option::Option<crate::types::PivotTableSubtotalLevel>,
    /// <p>The optional configuration of subtotal cells.</p>
    #[doc(hidden)]
    pub field_level_options:
        std::option::Option<std::vec::Vec<crate::types::PivotTableFieldSubtotalOptions>>,
    /// <p>The cell styling options for the subtotal cells.</p>
    #[doc(hidden)]
    pub total_cell_style: std::option::Option<crate::types::TableCellStyle>,
    /// <p>The cell styling options for the subtotals of value cells.</p>
    #[doc(hidden)]
    pub value_cell_style: std::option::Option<crate::types::TableCellStyle>,
    /// <p>The cell styling options for the subtotals of header cells.</p>
    #[doc(hidden)]
    pub metric_header_cell_style: std::option::Option<crate::types::TableCellStyle>,
}
impl SubtotalOptions {
    /// <p>The visibility configuration for the subtotal cells.</p>
    pub fn totals_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.totals_visibility.as_ref()
    }
    /// <p>The custom label string for the subtotal cells.</p>
    pub fn custom_label(&self) -> std::option::Option<&str> {
        self.custom_label.as_deref()
    }
    /// <p>The field level (all, custom, last) for the subtotal cells.</p>
    pub fn field_level(&self) -> std::option::Option<&crate::types::PivotTableSubtotalLevel> {
        self.field_level.as_ref()
    }
    /// <p>The optional configuration of subtotal cells.</p>
    pub fn field_level_options(
        &self,
    ) -> std::option::Option<&[crate::types::PivotTableFieldSubtotalOptions]> {
        self.field_level_options.as_deref()
    }
    /// <p>The cell styling options for the subtotal cells.</p>
    pub fn total_cell_style(&self) -> std::option::Option<&crate::types::TableCellStyle> {
        self.total_cell_style.as_ref()
    }
    /// <p>The cell styling options for the subtotals of value cells.</p>
    pub fn value_cell_style(&self) -> std::option::Option<&crate::types::TableCellStyle> {
        self.value_cell_style.as_ref()
    }
    /// <p>The cell styling options for the subtotals of header cells.</p>
    pub fn metric_header_cell_style(&self) -> std::option::Option<&crate::types::TableCellStyle> {
        self.metric_header_cell_style.as_ref()
    }
}
impl SubtotalOptions {
    /// Creates a new builder-style object to manufacture [`SubtotalOptions`](crate::types::SubtotalOptions).
    pub fn builder() -> crate::types::builders::SubtotalOptionsBuilder {
        crate::types::builders::SubtotalOptionsBuilder::default()
    }
}

/// A builder for [`SubtotalOptions`](crate::types::SubtotalOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubtotalOptionsBuilder {
    pub(crate) totals_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) custom_label: std::option::Option<std::string::String>,
    pub(crate) field_level: std::option::Option<crate::types::PivotTableSubtotalLevel>,
    pub(crate) field_level_options:
        std::option::Option<std::vec::Vec<crate::types::PivotTableFieldSubtotalOptions>>,
    pub(crate) total_cell_style: std::option::Option<crate::types::TableCellStyle>,
    pub(crate) value_cell_style: std::option::Option<crate::types::TableCellStyle>,
    pub(crate) metric_header_cell_style: std::option::Option<crate::types::TableCellStyle>,
}
impl SubtotalOptionsBuilder {
    /// <p>The visibility configuration for the subtotal cells.</p>
    pub fn totals_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.totals_visibility = Some(input);
        self
    }
    /// <p>The visibility configuration for the subtotal cells.</p>
    pub fn set_totals_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.totals_visibility = input;
        self
    }
    /// <p>The custom label string for the subtotal cells.</p>
    pub fn custom_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_label = Some(input.into());
        self
    }
    /// <p>The custom label string for the subtotal cells.</p>
    pub fn set_custom_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_label = input;
        self
    }
    /// <p>The field level (all, custom, last) for the subtotal cells.</p>
    pub fn field_level(mut self, input: crate::types::PivotTableSubtotalLevel) -> Self {
        self.field_level = Some(input);
        self
    }
    /// <p>The field level (all, custom, last) for the subtotal cells.</p>
    pub fn set_field_level(
        mut self,
        input: std::option::Option<crate::types::PivotTableSubtotalLevel>,
    ) -> Self {
        self.field_level = input;
        self
    }
    /// Appends an item to `field_level_options`.
    ///
    /// To override the contents of this collection use [`set_field_level_options`](Self::set_field_level_options).
    ///
    /// <p>The optional configuration of subtotal cells.</p>
    pub fn field_level_options(
        mut self,
        input: crate::types::PivotTableFieldSubtotalOptions,
    ) -> Self {
        let mut v = self.field_level_options.unwrap_or_default();
        v.push(input);
        self.field_level_options = Some(v);
        self
    }
    /// <p>The optional configuration of subtotal cells.</p>
    pub fn set_field_level_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PivotTableFieldSubtotalOptions>>,
    ) -> Self {
        self.field_level_options = input;
        self
    }
    /// <p>The cell styling options for the subtotal cells.</p>
    pub fn total_cell_style(mut self, input: crate::types::TableCellStyle) -> Self {
        self.total_cell_style = Some(input);
        self
    }
    /// <p>The cell styling options for the subtotal cells.</p>
    pub fn set_total_cell_style(
        mut self,
        input: std::option::Option<crate::types::TableCellStyle>,
    ) -> Self {
        self.total_cell_style = input;
        self
    }
    /// <p>The cell styling options for the subtotals of value cells.</p>
    pub fn value_cell_style(mut self, input: crate::types::TableCellStyle) -> Self {
        self.value_cell_style = Some(input);
        self
    }
    /// <p>The cell styling options for the subtotals of value cells.</p>
    pub fn set_value_cell_style(
        mut self,
        input: std::option::Option<crate::types::TableCellStyle>,
    ) -> Self {
        self.value_cell_style = input;
        self
    }
    /// <p>The cell styling options for the subtotals of header cells.</p>
    pub fn metric_header_cell_style(mut self, input: crate::types::TableCellStyle) -> Self {
        self.metric_header_cell_style = Some(input);
        self
    }
    /// <p>The cell styling options for the subtotals of header cells.</p>
    pub fn set_metric_header_cell_style(
        mut self,
        input: std::option::Option<crate::types::TableCellStyle>,
    ) -> Self {
        self.metric_header_cell_style = input;
        self
    }
    /// Consumes the builder and constructs a [`SubtotalOptions`](crate::types::SubtotalOptions).
    pub fn build(self) -> crate::types::SubtotalOptions {
        crate::types::SubtotalOptions {
            totals_visibility: self.totals_visibility,
            custom_label: self.custom_label,
            field_level: self.field_level,
            field_level_options: self.field_level_options,
            total_cell_style: self.total_cell_style,
            value_cell_style: self.value_cell_style,
            metric_header_cell_style: self.metric_header_cell_style,
        }
    }
}
