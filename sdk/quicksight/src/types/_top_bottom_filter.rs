// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>TopBottomFilter</code> filters values that are at the top or the bottom.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopBottomFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub filter_id: ::std::string::String,
    /// <p>The column that the filter is applied to.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The number of items to include in the top bottom filter results.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The aggregation and sort configuration of the top bottom filter.</p>
    pub aggregation_sort_configurations: ::std::vec::Vec<crate::types::AggregationSortConfiguration>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub parameter_name: ::std::option::Option<::std::string::String>,
}
impl TopBottomFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_id.deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The number of items to include in the top bottom filter results.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The aggregation and sort configuration of the top bottom filter.</p>
    pub fn aggregation_sort_configurations(&self) -> &[crate::types::AggregationSortConfiguration] {
        use std::ops::Deref;
        self.aggregation_sort_configurations.deref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn parameter_name(&self) -> ::std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
}
impl TopBottomFilter {
    /// Creates a new builder-style object to manufacture [`TopBottomFilter`](crate::types::TopBottomFilter).
    pub fn builder() -> crate::types::builders::TopBottomFilterBuilder {
        crate::types::builders::TopBottomFilterBuilder::default()
    }
}

/// A builder for [`TopBottomFilter`](crate::types::TopBottomFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TopBottomFilterBuilder {
    pub(crate) filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) aggregation_sort_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AggregationSortConfiguration>>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) parameter_name: ::std::option::Option<::std::string::String>,
}
impl TopBottomFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    /// This field is required.
    pub fn filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn get_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_id
    }
    /// <p>The column that the filter is applied to.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The number of items to include in the top bottom filter results.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of items to include in the top bottom filter results.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The number of items to include in the top bottom filter results.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Appends an item to `aggregation_sort_configurations`.
    ///
    /// To override the contents of this collection use [`set_aggregation_sort_configurations`](Self::set_aggregation_sort_configurations).
    ///
    /// <p>The aggregation and sort configuration of the top bottom filter.</p>
    pub fn aggregation_sort_configurations(mut self, input: crate::types::AggregationSortConfiguration) -> Self {
        let mut v = self.aggregation_sort_configurations.unwrap_or_default();
        v.push(input);
        self.aggregation_sort_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The aggregation and sort configuration of the top bottom filter.</p>
    pub fn set_aggregation_sort_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AggregationSortConfiguration>>,
    ) -> Self {
        self.aggregation_sort_configurations = input;
        self
    }
    /// <p>The aggregation and sort configuration of the top bottom filter.</p>
    pub fn get_aggregation_sort_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregationSortConfiguration>> {
        &self.aggregation_sort_configurations
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    pub fn get_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_name
    }
    /// Consumes the builder and constructs a [`TopBottomFilter`](crate::types::TopBottomFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_id`](crate::types::builders::TopBottomFilterBuilder::filter_id)
    /// - [`aggregation_sort_configurations`](crate::types::builders::TopBottomFilterBuilder::aggregation_sort_configurations)
    pub fn build(self) -> ::std::result::Result<crate::types::TopBottomFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TopBottomFilter {
            filter_id: self.filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_id",
                    "filter_id was not specified but it is required when building TopBottomFilter",
                )
            })?,
            column: self.column,
            limit: self.limit,
            aggregation_sort_configurations: self.aggregation_sort_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregation_sort_configurations",
                    "aggregation_sort_configurations was not specified but it is required when building TopBottomFilter",
                )
            })?,
            time_granularity: self.time_granularity,
            parameter_name: self.parameter_name,
        })
    }
}
