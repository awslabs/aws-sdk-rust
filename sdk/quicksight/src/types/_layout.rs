// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>Layout</code> defines the placement of elements within a sheet.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Layout {
    /// <p>The configuration that determines what the type of layout for a sheet.</p>
    pub configuration: ::std::option::Option<crate::types::LayoutConfiguration>,
}
impl Layout {
    /// <p>The configuration that determines what the type of layout for a sheet.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::LayoutConfiguration> {
        self.configuration.as_ref()
    }
}
impl Layout {
    /// Creates a new builder-style object to manufacture [`Layout`](crate::types::Layout).
    pub fn builder() -> crate::types::builders::LayoutBuilder {
        crate::types::builders::LayoutBuilder::default()
    }
}

/// A builder for [`Layout`](crate::types::Layout).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LayoutBuilder {
    pub(crate) configuration: ::std::option::Option<crate::types::LayoutConfiguration>,
}
impl LayoutBuilder {
    /// <p>The configuration that determines what the type of layout for a sheet.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::LayoutConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that determines what the type of layout for a sheet.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::LayoutConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration that determines what the type of layout for a sheet.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::LayoutConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`Layout`](crate::types::Layout).
    pub fn build(self) -> crate::types::Layout {
        crate::types::Layout {
            configuration: self.configuration,
        }
    }
}
