// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter used to search for action connectors based on specific criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionConnectorSearchFilter {
    /// <p>The name of the filter attribute (e.g., ACTION_CONNECTOR_NAME, ACTION_CONNECTOR_TYPE, QUICKSIGHT_VIEWER_OR_OWNER).</p>
    pub name: crate::types::ActionConnectorSearchFilterNameEnum,
    /// <p>The comparison operator to use for the filter (e.g., StringEquals, StringLike).</p>
    pub operator: crate::types::FilterOperator,
    /// <p>The value to compare against using the specified operator.</p>
    pub value: ::std::string::String,
}
impl ActionConnectorSearchFilter {
    /// <p>The name of the filter attribute (e.g., ACTION_CONNECTOR_NAME, ACTION_CONNECTOR_TYPE, QUICKSIGHT_VIEWER_OR_OWNER).</p>
    pub fn name(&self) -> &crate::types::ActionConnectorSearchFilterNameEnum {
        &self.name
    }
    /// <p>The comparison operator to use for the filter (e.g., StringEquals, StringLike).</p>
    pub fn operator(&self) -> &crate::types::FilterOperator {
        &self.operator
    }
    /// <p>The value to compare against using the specified operator.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl ActionConnectorSearchFilter {
    /// Creates a new builder-style object to manufacture [`ActionConnectorSearchFilter`](crate::types::ActionConnectorSearchFilter).
    pub fn builder() -> crate::types::builders::ActionConnectorSearchFilterBuilder {
        crate::types::builders::ActionConnectorSearchFilterBuilder::default()
    }
}

/// A builder for [`ActionConnectorSearchFilter`](crate::types::ActionConnectorSearchFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActionConnectorSearchFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::ActionConnectorSearchFilterNameEnum>,
    pub(crate) operator: ::std::option::Option<crate::types::FilterOperator>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ActionConnectorSearchFilterBuilder {
    /// <p>The name of the filter attribute (e.g., ACTION_CONNECTOR_NAME, ACTION_CONNECTOR_TYPE, QUICKSIGHT_VIEWER_OR_OWNER).</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::ActionConnectorSearchFilterNameEnum) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the filter attribute (e.g., ACTION_CONNECTOR_NAME, ACTION_CONNECTOR_TYPE, QUICKSIGHT_VIEWER_OR_OWNER).</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::ActionConnectorSearchFilterNameEnum>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the filter attribute (e.g., ACTION_CONNECTOR_NAME, ACTION_CONNECTOR_TYPE, QUICKSIGHT_VIEWER_OR_OWNER).</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::ActionConnectorSearchFilterNameEnum> {
        &self.name
    }
    /// <p>The comparison operator to use for the filter (e.g., StringEquals, StringLike).</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::FilterOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison operator to use for the filter (e.g., StringEquals, StringLike).</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::FilterOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The comparison operator to use for the filter (e.g., StringEquals, StringLike).</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::FilterOperator> {
        &self.operator
    }
    /// <p>The value to compare against using the specified operator.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to compare against using the specified operator.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value to compare against using the specified operator.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ActionConnectorSearchFilter`](crate::types::ActionConnectorSearchFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ActionConnectorSearchFilterBuilder::name)
    /// - [`operator`](crate::types::builders::ActionConnectorSearchFilterBuilder::operator)
    /// - [`value`](crate::types::builders::ActionConnectorSearchFilterBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionConnectorSearchFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionConnectorSearchFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ActionConnectorSearchFilter",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building ActionConnectorSearchFilter",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building ActionConnectorSearchFilter",
                )
            })?,
        })
    }
}
