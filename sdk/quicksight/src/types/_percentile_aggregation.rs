// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An aggregation based on the percentile of values in a dimension or measure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PercentileAggregation {
    /// <p>The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.</p>
    #[doc(hidden)]
    pub percentile_value: std::option::Option<f64>,
}
impl PercentileAggregation {
    /// <p>The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.</p>
    pub fn percentile_value(&self) -> std::option::Option<f64> {
        self.percentile_value
    }
}
impl PercentileAggregation {
    /// Creates a new builder-style object to manufacture [`PercentileAggregation`](crate::types::PercentileAggregation).
    pub fn builder() -> crate::types::builders::PercentileAggregationBuilder {
        crate::types::builders::PercentileAggregationBuilder::default()
    }
}

/// A builder for [`PercentileAggregation`](crate::types::PercentileAggregation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PercentileAggregationBuilder {
    pub(crate) percentile_value: std::option::Option<f64>,
}
impl PercentileAggregationBuilder {
    /// <p>The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.</p>
    pub fn percentile_value(mut self, input: f64) -> Self {
        self.percentile_value = Some(input);
        self
    }
    /// <p>The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.</p>
    pub fn set_percentile_value(mut self, input: std::option::Option<f64>) -> Self {
        self.percentile_value = input;
        self
    }
    /// Consumes the builder and constructs a [`PercentileAggregation`](crate::types::PercentileAggregation).
    pub fn build(self) -> crate::types::PercentileAggregation {
        crate::types::PercentileAggregation {
            percentile_value: self.percentile_value,
        }
    }
}
