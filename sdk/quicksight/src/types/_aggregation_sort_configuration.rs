// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration options to sort aggregated values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregationSortConfiguration {
    /// <p>The column that determines the sort order of aggregated values.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The sort direction of values.</p>
    /// <ul>
    /// <li> <p> <code>ASC</code>: Sort in ascending order.</p> </li>
    /// <li> <p> <code>DESC</code>: Sort in descending order.</p> </li>
    /// </ul>
    pub sort_direction: crate::types::SortDirection,
    /// <p>The function that aggregates the values in <code>Column</code>.</p>
    pub aggregation_function: ::std::option::Option<crate::types::AggregationFunction>,
}
impl AggregationSortConfiguration {
    /// <p>The column that determines the sort order of aggregated values.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The sort direction of values.</p>
    /// <ul>
    /// <li> <p> <code>ASC</code>: Sort in ascending order.</p> </li>
    /// <li> <p> <code>DESC</code>: Sort in descending order.</p> </li>
    /// </ul>
    pub fn sort_direction(&self) -> &crate::types::SortDirection {
        &self.sort_direction
    }
    /// <p>The function that aggregates the values in <code>Column</code>.</p>
    pub fn aggregation_function(&self) -> ::std::option::Option<&crate::types::AggregationFunction> {
        self.aggregation_function.as_ref()
    }
}
impl AggregationSortConfiguration {
    /// Creates a new builder-style object to manufacture [`AggregationSortConfiguration`](crate::types::AggregationSortConfiguration).
    pub fn builder() -> crate::types::builders::AggregationSortConfigurationBuilder {
        crate::types::builders::AggregationSortConfigurationBuilder::default()
    }
}

/// A builder for [`AggregationSortConfiguration`](crate::types::AggregationSortConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AggregationSortConfigurationBuilder {
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) sort_direction: ::std::option::Option<crate::types::SortDirection>,
    pub(crate) aggregation_function: ::std::option::Option<crate::types::AggregationFunction>,
}
impl AggregationSortConfigurationBuilder {
    /// <p>The column that determines the sort order of aggregated values.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that determines the sort order of aggregated values.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that determines the sort order of aggregated values.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The sort direction of values.</p>
    /// <ul>
    /// <li> <p> <code>ASC</code>: Sort in ascending order.</p> </li>
    /// <li> <p> <code>DESC</code>: Sort in descending order.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn sort_direction(mut self, input: crate::types::SortDirection) -> Self {
        self.sort_direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort direction of values.</p>
    /// <ul>
    /// <li> <p> <code>ASC</code>: Sort in ascending order.</p> </li>
    /// <li> <p> <code>DESC</code>: Sort in descending order.</p> </li>
    /// </ul>
    pub fn set_sort_direction(mut self, input: ::std::option::Option<crate::types::SortDirection>) -> Self {
        self.sort_direction = input;
        self
    }
    /// <p>The sort direction of values.</p>
    /// <ul>
    /// <li> <p> <code>ASC</code>: Sort in ascending order.</p> </li>
    /// <li> <p> <code>DESC</code>: Sort in descending order.</p> </li>
    /// </ul>
    pub fn get_sort_direction(&self) -> &::std::option::Option<crate::types::SortDirection> {
        &self.sort_direction
    }
    /// <p>The function that aggregates the values in <code>Column</code>.</p>
    pub fn aggregation_function(mut self, input: crate::types::AggregationFunction) -> Self {
        self.aggregation_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The function that aggregates the values in <code>Column</code>.</p>
    pub fn set_aggregation_function(mut self, input: ::std::option::Option<crate::types::AggregationFunction>) -> Self {
        self.aggregation_function = input;
        self
    }
    /// <p>The function that aggregates the values in <code>Column</code>.</p>
    pub fn get_aggregation_function(&self) -> &::std::option::Option<crate::types::AggregationFunction> {
        &self.aggregation_function
    }
    /// Consumes the builder and constructs a [`AggregationSortConfiguration`](crate::types::AggregationSortConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`sort_direction`](crate::types::builders::AggregationSortConfigurationBuilder::sort_direction)
    pub fn build(self) -> ::std::result::Result<crate::types::AggregationSortConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AggregationSortConfiguration {
            column: self.column,
            sort_direction: self.sort_direction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sort_direction",
                    "sort_direction was not specified but it is required when building AggregationSortConfiguration",
                )
            })?,
            aggregation_function: self.aggregation_function,
        })
    }
}
