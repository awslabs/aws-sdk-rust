// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field well configuration of a waterfall visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WaterfallChartAggregatedFieldWells {
    /// <p>The category field wells of a waterfall visual.</p>
    #[doc(hidden)]
    pub categories: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The value field wells of a waterfall visual.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    /// <p>The breakdown field wells of a waterfall visual.</p>
    #[doc(hidden)]
    pub breakdowns: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
}
impl WaterfallChartAggregatedFieldWells {
    /// <p>The category field wells of a waterfall visual.</p>
    pub fn categories(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.categories.as_deref()
    }
    /// <p>The value field wells of a waterfall visual.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::MeasureField]> {
        self.values.as_deref()
    }
    /// <p>The breakdown field wells of a waterfall visual.</p>
    pub fn breakdowns(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.breakdowns.as_deref()
    }
}
impl WaterfallChartAggregatedFieldWells {
    /// Creates a new builder-style object to manufacture [`WaterfallChartAggregatedFieldWells`](crate::types::WaterfallChartAggregatedFieldWells).
    pub fn builder() -> crate::types::builders::WaterfallChartAggregatedFieldWellsBuilder {
        crate::types::builders::WaterfallChartAggregatedFieldWellsBuilder::default()
    }
}

/// A builder for [`WaterfallChartAggregatedFieldWells`](crate::types::WaterfallChartAggregatedFieldWells).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WaterfallChartAggregatedFieldWellsBuilder {
    pub(crate) categories: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    pub(crate) breakdowns: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
}
impl WaterfallChartAggregatedFieldWellsBuilder {
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>The category field wells of a waterfall visual.</p>
    pub fn categories(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = Some(v);
        self
    }
    /// <p>The category field wells of a waterfall visual.</p>
    pub fn set_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.categories = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value field wells of a waterfall visual.</p>
    pub fn values(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>The value field wells of a waterfall visual.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Appends an item to `breakdowns`.
    ///
    /// To override the contents of this collection use [`set_breakdowns`](Self::set_breakdowns).
    ///
    /// <p>The breakdown field wells of a waterfall visual.</p>
    pub fn breakdowns(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.breakdowns.unwrap_or_default();
        v.push(input);
        self.breakdowns = Some(v);
        self
    }
    /// <p>The breakdown field wells of a waterfall visual.</p>
    pub fn set_breakdowns(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.breakdowns = input;
        self
    }
    /// Consumes the builder and constructs a [`WaterfallChartAggregatedFieldWells`](crate::types::WaterfallChartAggregatedFieldWells).
    pub fn build(self) -> crate::types::WaterfallChartAggregatedFieldWells {
        crate::types::WaterfallChartAggregatedFieldWells {
            categories: self.categories,
            values: self.values,
            breakdowns: self.breakdowns,
        }
    }
}
