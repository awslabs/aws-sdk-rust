// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that determines the data label type.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataLabelType {
    /// <p>Determines the label configuration for the entire field.</p>
    #[doc(hidden)]
    pub field_label_type: std::option::Option<crate::types::FieldLabelType>,
    /// <p>The option that specifies individual data values for labels.</p>
    #[doc(hidden)]
    pub data_path_label_type: std::option::Option<crate::types::DataPathLabelType>,
    /// <p>Determines the label configuration for range end value in a visual.</p>
    #[doc(hidden)]
    pub range_ends_label_type: std::option::Option<crate::types::RangeEndsLabelType>,
    /// <p>Determines the label configuration for the minimum value in a visual.</p>
    #[doc(hidden)]
    pub minimum_label_type: std::option::Option<crate::types::MinimumLabelType>,
    /// <p>Determines the label configuration for the maximum value in a visual.</p>
    #[doc(hidden)]
    pub maximum_label_type: std::option::Option<crate::types::MaximumLabelType>,
}
impl DataLabelType {
    /// <p>Determines the label configuration for the entire field.</p>
    pub fn field_label_type(&self) -> std::option::Option<&crate::types::FieldLabelType> {
        self.field_label_type.as_ref()
    }
    /// <p>The option that specifies individual data values for labels.</p>
    pub fn data_path_label_type(&self) -> std::option::Option<&crate::types::DataPathLabelType> {
        self.data_path_label_type.as_ref()
    }
    /// <p>Determines the label configuration for range end value in a visual.</p>
    pub fn range_ends_label_type(&self) -> std::option::Option<&crate::types::RangeEndsLabelType> {
        self.range_ends_label_type.as_ref()
    }
    /// <p>Determines the label configuration for the minimum value in a visual.</p>
    pub fn minimum_label_type(&self) -> std::option::Option<&crate::types::MinimumLabelType> {
        self.minimum_label_type.as_ref()
    }
    /// <p>Determines the label configuration for the maximum value in a visual.</p>
    pub fn maximum_label_type(&self) -> std::option::Option<&crate::types::MaximumLabelType> {
        self.maximum_label_type.as_ref()
    }
}
impl DataLabelType {
    /// Creates a new builder-style object to manufacture [`DataLabelType`](crate::types::DataLabelType).
    pub fn builder() -> crate::types::builders::DataLabelTypeBuilder {
        crate::types::builders::DataLabelTypeBuilder::default()
    }
}

/// A builder for [`DataLabelType`](crate::types::DataLabelType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataLabelTypeBuilder {
    pub(crate) field_label_type: std::option::Option<crate::types::FieldLabelType>,
    pub(crate) data_path_label_type: std::option::Option<crate::types::DataPathLabelType>,
    pub(crate) range_ends_label_type: std::option::Option<crate::types::RangeEndsLabelType>,
    pub(crate) minimum_label_type: std::option::Option<crate::types::MinimumLabelType>,
    pub(crate) maximum_label_type: std::option::Option<crate::types::MaximumLabelType>,
}
impl DataLabelTypeBuilder {
    /// <p>Determines the label configuration for the entire field.</p>
    pub fn field_label_type(mut self, input: crate::types::FieldLabelType) -> Self {
        self.field_label_type = Some(input);
        self
    }
    /// <p>Determines the label configuration for the entire field.</p>
    pub fn set_field_label_type(
        mut self,
        input: std::option::Option<crate::types::FieldLabelType>,
    ) -> Self {
        self.field_label_type = input;
        self
    }
    /// <p>The option that specifies individual data values for labels.</p>
    pub fn data_path_label_type(mut self, input: crate::types::DataPathLabelType) -> Self {
        self.data_path_label_type = Some(input);
        self
    }
    /// <p>The option that specifies individual data values for labels.</p>
    pub fn set_data_path_label_type(
        mut self,
        input: std::option::Option<crate::types::DataPathLabelType>,
    ) -> Self {
        self.data_path_label_type = input;
        self
    }
    /// <p>Determines the label configuration for range end value in a visual.</p>
    pub fn range_ends_label_type(mut self, input: crate::types::RangeEndsLabelType) -> Self {
        self.range_ends_label_type = Some(input);
        self
    }
    /// <p>Determines the label configuration for range end value in a visual.</p>
    pub fn set_range_ends_label_type(
        mut self,
        input: std::option::Option<crate::types::RangeEndsLabelType>,
    ) -> Self {
        self.range_ends_label_type = input;
        self
    }
    /// <p>Determines the label configuration for the minimum value in a visual.</p>
    pub fn minimum_label_type(mut self, input: crate::types::MinimumLabelType) -> Self {
        self.minimum_label_type = Some(input);
        self
    }
    /// <p>Determines the label configuration for the minimum value in a visual.</p>
    pub fn set_minimum_label_type(
        mut self,
        input: std::option::Option<crate::types::MinimumLabelType>,
    ) -> Self {
        self.minimum_label_type = input;
        self
    }
    /// <p>Determines the label configuration for the maximum value in a visual.</p>
    pub fn maximum_label_type(mut self, input: crate::types::MaximumLabelType) -> Self {
        self.maximum_label_type = Some(input);
        self
    }
    /// <p>Determines the label configuration for the maximum value in a visual.</p>
    pub fn set_maximum_label_type(
        mut self,
        input: std::option::Option<crate::types::MaximumLabelType>,
    ) -> Self {
        self.maximum_label_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DataLabelType`](crate::types::DataLabelType).
    pub fn build(self) -> crate::types::DataLabelType {
        crate::types::DataLabelType {
            field_label_type: self.field_label_type,
            data_path_label_type: self.data_path_label_type,
            range_ends_label_type: self.range_ends_label_type,
            minimum_label_type: self.minimum_label_type,
            maximum_label_type: self.maximum_label_type,
        }
    }
}
