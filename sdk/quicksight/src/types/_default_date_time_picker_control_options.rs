// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default options that correspond to the filter control type of a <code>DateTimePicker</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultDateTimePickerControlOptions {
    /// <p>The date time picker type of the <code>DefaultDateTimePickerControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_VALUED</code>: The filter condition is a fixed date.</p></li>
    /// <li>
    /// <p><code>DATE_RANGE</code>: The filter condition is a date time range.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::SheetControlDateTimePickerType>,
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>,
}
impl DefaultDateTimePickerControlOptions {
    /// <p>The date time picker type of the <code>DefaultDateTimePickerControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_VALUED</code>: The filter condition is a fixed date.</p></li>
    /// <li>
    /// <p><code>DATE_RANGE</code>: The filter condition is a date time range.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SheetControlDateTimePickerType> {
        self.r#type.as_ref()
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::DateTimePickerControlDisplayOptions> {
        self.display_options.as_ref()
    }
}
impl DefaultDateTimePickerControlOptions {
    /// Creates a new builder-style object to manufacture [`DefaultDateTimePickerControlOptions`](crate::types::DefaultDateTimePickerControlOptions).
    pub fn builder() -> crate::types::builders::DefaultDateTimePickerControlOptionsBuilder {
        crate::types::builders::DefaultDateTimePickerControlOptionsBuilder::default()
    }
}

/// A builder for [`DefaultDateTimePickerControlOptions`](crate::types::DefaultDateTimePickerControlOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultDateTimePickerControlOptionsBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SheetControlDateTimePickerType>,
    pub(crate) display_options: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>,
}
impl DefaultDateTimePickerControlOptionsBuilder {
    /// <p>The date time picker type of the <code>DefaultDateTimePickerControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_VALUED</code>: The filter condition is a fixed date.</p></li>
    /// <li>
    /// <p><code>DATE_RANGE</code>: The filter condition is a date time range.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::SheetControlDateTimePickerType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date time picker type of the <code>DefaultDateTimePickerControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_VALUED</code>: The filter condition is a fixed date.</p></li>
    /// <li>
    /// <p><code>DATE_RANGE</code>: The filter condition is a date time range.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SheetControlDateTimePickerType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The date time picker type of the <code>DefaultDateTimePickerControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>SINGLE_VALUED</code>: The filter condition is a fixed date.</p></li>
    /// <li>
    /// <p><code>DATE_RANGE</code>: The filter condition is a date time range.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SheetControlDateTimePickerType> {
        &self.r#type
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::DateTimePickerControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::DateTimePickerControlDisplayOptions> {
        &self.display_options
    }
    /// Consumes the builder and constructs a [`DefaultDateTimePickerControlOptions`](crate::types::DefaultDateTimePickerControlOptions).
    pub fn build(self) -> crate::types::DefaultDateTimePickerControlOptions {
        crate::types::DefaultDateTimePickerControlOptions {
            r#type: self.r#type,
            display_options: self.display_options,
        }
    }
}
