// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of a VPC connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcConnection {
    /// <p>The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.</p>
    pub vpc_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the VPC connection.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The display name for the VPC connection.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 VPC ID associated with the VPC connection.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 security group IDs associated with the VPC connection.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of IP addresses of DNS resolver endpoints for the VPC connection.</p>
    pub dns_resolvers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The status of the VPC connection.</p>
    pub status: ::std::option::Option<crate::types::VpcConnectionResourceStatus>,
    /// <p>The availability status of the VPC connection.</p>
    pub availability_status: ::std::option::Option<crate::types::VpcConnectionAvailabilityStatus>,
    /// <p>A list of network interfaces.</p>
    pub network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    /// <p>The ARN of the IAM role associated with the VPC connection.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the VPC connection was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the VPC connection was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl VpcConnection {
    /// <p>The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn vpc_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpc_connection_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC connection.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The display name for the VPC connection.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon EC2 VPC ID associated with the VPC connection.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The Amazon EC2 security group IDs associated with the VPC connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of IP addresses of DNS resolver endpoints for the VPC connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_resolvers.is_none()`.
    pub fn dns_resolvers(&self) -> &[::std::string::String] {
        self.dns_resolvers.as_deref().unwrap_or_default()
    }
    /// <p>The status of the VPC connection.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VpcConnectionResourceStatus> {
        self.status.as_ref()
    }
    /// <p>The availability status of the VPC connection.</p>
    pub fn availability_status(&self) -> ::std::option::Option<&crate::types::VpcConnectionAvailabilityStatus> {
        self.availability_status.as_ref()
    }
    /// <p>A list of network interfaces.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces.is_none()`.
    pub fn network_interfaces(&self) -> &[crate::types::NetworkInterface] {
        self.network_interfaces.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the IAM role associated with the VPC connection.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The time that the VPC connection was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The time that the VPC connection was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl VpcConnection {
    /// Creates a new builder-style object to manufacture [`VpcConnection`](crate::types::VpcConnection).
    pub fn builder() -> crate::types::builders::VpcConnectionBuilder {
        crate::types::builders::VpcConnectionBuilder::default()
    }
}

/// A builder for [`VpcConnection`](crate::types::VpcConnection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcConnectionBuilder {
    pub(crate) vpc_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_resolvers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::VpcConnectionResourceStatus>,
    pub(crate) availability_status: ::std::option::Option<crate::types::VpcConnectionAvailabilityStatus>,
    pub(crate) network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl VpcConnectionBuilder {
    /// <p>The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn vpc_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn set_vpc_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_id = input;
        self
    }
    /// <p>The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.</p>
    pub fn get_vpc_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_id
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC connection.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC connection.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC connection.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The display name for the VPC connection.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name for the VPC connection.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name for the VPC connection.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon EC2 VPC ID associated with the VPC connection.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EC2 VPC ID associated with the VPC connection.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The Amazon EC2 VPC ID associated with the VPC connection.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The Amazon EC2 security group IDs associated with the VPC connection.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon EC2 security group IDs associated with the VPC connection.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The Amazon EC2 security group IDs associated with the VPC connection.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Appends an item to `dns_resolvers`.
    ///
    /// To override the contents of this collection use [`set_dns_resolvers`](Self::set_dns_resolvers).
    ///
    /// <p>A list of IP addresses of DNS resolver endpoints for the VPC connection.</p>
    pub fn dns_resolvers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_resolvers.unwrap_or_default();
        v.push(input.into());
        self.dns_resolvers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IP addresses of DNS resolver endpoints for the VPC connection.</p>
    pub fn set_dns_resolvers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_resolvers = input;
        self
    }
    /// <p>A list of IP addresses of DNS resolver endpoints for the VPC connection.</p>
    pub fn get_dns_resolvers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_resolvers
    }
    /// <p>The status of the VPC connection.</p>
    pub fn status(mut self, input: crate::types::VpcConnectionResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the VPC connection.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VpcConnectionResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the VPC connection.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VpcConnectionResourceStatus> {
        &self.status
    }
    /// <p>The availability status of the VPC connection.</p>
    pub fn availability_status(mut self, input: crate::types::VpcConnectionAvailabilityStatus) -> Self {
        self.availability_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The availability status of the VPC connection.</p>
    pub fn set_availability_status(mut self, input: ::std::option::Option<crate::types::VpcConnectionAvailabilityStatus>) -> Self {
        self.availability_status = input;
        self
    }
    /// <p>The availability status of the VPC connection.</p>
    pub fn get_availability_status(&self) -> &::std::option::Option<crate::types::VpcConnectionAvailabilityStatus> {
        &self.availability_status
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>A list of network interfaces.</p>
    pub fn network_interfaces(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of network interfaces.</p>
    pub fn set_network_interfaces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>>) -> Self {
        self.network_interfaces = input;
        self
    }
    /// <p>A list of network interfaces.</p>
    pub fn get_network_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkInterface>> {
        &self.network_interfaces
    }
    /// <p>The ARN of the IAM role associated with the VPC connection.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role associated with the VPC connection.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role associated with the VPC connection.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The time that the VPC connection was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the VPC connection was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the VPC connection was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The time that the VPC connection was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the VPC connection was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time that the VPC connection was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// Consumes the builder and constructs a [`VpcConnection`](crate::types::VpcConnection).
    pub fn build(self) -> crate::types::VpcConnection {
        crate::types::VpcConnection {
            vpc_connection_id: self.vpc_connection_id,
            arn: self.arn,
            name: self.name,
            vpc_id: self.vpc_id,
            security_group_ids: self.security_group_ids,
            dns_resolvers: self.dns_resolvers,
            status: self.status,
            availability_status: self.availability_status,
            network_interfaces: self.network_interfaces,
            role_arn: self.role_arn,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
        }
    }
}
