// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The paginated report options for a table visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TablePaginatedReportOptions {
    /// <p>The visibility of printing table overflow across pages.</p>
    #[doc(hidden)]
    pub vertical_overflow_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The visibility of repeating header rows on each page.</p>
    #[doc(hidden)]
    pub overflow_column_header_visibility: std::option::Option<crate::types::Visibility>,
}
impl TablePaginatedReportOptions {
    /// <p>The visibility of printing table overflow across pages.</p>
    pub fn vertical_overflow_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.vertical_overflow_visibility.as_ref()
    }
    /// <p>The visibility of repeating header rows on each page.</p>
    pub fn overflow_column_header_visibility(
        &self,
    ) -> std::option::Option<&crate::types::Visibility> {
        self.overflow_column_header_visibility.as_ref()
    }
}
impl TablePaginatedReportOptions {
    /// Creates a new builder-style object to manufacture [`TablePaginatedReportOptions`](crate::types::TablePaginatedReportOptions).
    pub fn builder() -> crate::types::builders::TablePaginatedReportOptionsBuilder {
        crate::types::builders::TablePaginatedReportOptionsBuilder::default()
    }
}

/// A builder for [`TablePaginatedReportOptions`](crate::types::TablePaginatedReportOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TablePaginatedReportOptionsBuilder {
    pub(crate) vertical_overflow_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) overflow_column_header_visibility: std::option::Option<crate::types::Visibility>,
}
impl TablePaginatedReportOptionsBuilder {
    /// <p>The visibility of printing table overflow across pages.</p>
    pub fn vertical_overflow_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.vertical_overflow_visibility = Some(input);
        self
    }
    /// <p>The visibility of printing table overflow across pages.</p>
    pub fn set_vertical_overflow_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.vertical_overflow_visibility = input;
        self
    }
    /// <p>The visibility of repeating header rows on each page.</p>
    pub fn overflow_column_header_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.overflow_column_header_visibility = Some(input);
        self
    }
    /// <p>The visibility of repeating header rows on each page.</p>
    pub fn set_overflow_column_header_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.overflow_column_header_visibility = input;
        self
    }
    /// Consumes the builder and constructs a [`TablePaginatedReportOptions`](crate::types::TablePaginatedReportOptions).
    pub fn build(self) -> crate::types::TablePaginatedReportOptions {
        crate::types::TablePaginatedReportOptions {
            vertical_overflow_visibility: self.vertical_overflow_visibility,
            overflow_column_header_visibility: self.overflow_column_header_visibility,
        }
    }
}
