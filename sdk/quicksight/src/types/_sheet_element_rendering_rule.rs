// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rendering rules of a sheet that uses a free-form layout.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SheetElementRenderingRule {
    /// <p>The expression of the rendering rules of a sheet.</p>
    pub expression: ::std::string::String,
    /// <p>The override configuration of the rendering rules of a sheet.</p>
    pub configuration_overrides: ::std::option::Option<crate::types::SheetElementConfigurationOverrides>,
}
impl SheetElementRenderingRule {
    /// <p>The expression of the rendering rules of a sheet.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>The override configuration of the rendering rules of a sheet.</p>
    pub fn configuration_overrides(&self) -> ::std::option::Option<&crate::types::SheetElementConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
}
impl ::std::fmt::Debug for SheetElementRenderingRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SheetElementRenderingRule");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration_overrides", &self.configuration_overrides);
        formatter.finish()
    }
}
impl SheetElementRenderingRule {
    /// Creates a new builder-style object to manufacture [`SheetElementRenderingRule`](crate::types::SheetElementRenderingRule).
    pub fn builder() -> crate::types::builders::SheetElementRenderingRuleBuilder {
        crate::types::builders::SheetElementRenderingRuleBuilder::default()
    }
}

/// A builder for [`SheetElementRenderingRule`](crate::types::SheetElementRenderingRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SheetElementRenderingRuleBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_overrides: ::std::option::Option<crate::types::SheetElementConfigurationOverrides>,
}
impl SheetElementRenderingRuleBuilder {
    /// <p>The expression of the rendering rules of a sheet.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression of the rendering rules of a sheet.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression of the rendering rules of a sheet.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>The override configuration of the rendering rules of a sheet.</p>
    /// This field is required.
    pub fn configuration_overrides(mut self, input: crate::types::SheetElementConfigurationOverrides) -> Self {
        self.configuration_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>The override configuration of the rendering rules of a sheet.</p>
    pub fn set_configuration_overrides(mut self, input: ::std::option::Option<crate::types::SheetElementConfigurationOverrides>) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// <p>The override configuration of the rendering rules of a sheet.</p>
    pub fn get_configuration_overrides(&self) -> &::std::option::Option<crate::types::SheetElementConfigurationOverrides> {
        &self.configuration_overrides
    }
    /// Consumes the builder and constructs a [`SheetElementRenderingRule`](crate::types::SheetElementRenderingRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::SheetElementRenderingRuleBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::SheetElementRenderingRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SheetElementRenderingRule {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building SheetElementRenderingRule",
                )
            })?,
            configuration_overrides: self.configuration_overrides,
        })
    }
}
impl ::std::fmt::Debug for SheetElementRenderingRuleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SheetElementRenderingRuleBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration_overrides", &self.configuration_overrides);
        formatter.finish()
    }
}
