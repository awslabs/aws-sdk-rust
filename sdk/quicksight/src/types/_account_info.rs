// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the following account information elements:</p>
/// <ul>
/// <li>
/// <p>Your Quick Sight account name.</p></li>
/// <li>
/// <p>The edition of Quick Sight that your account is using.</p></li>
/// <li>
/// <p>The notification email address that is associated with the Quick Sight account.</p></li>
/// <li>
/// <p>The authentication type of the Quick Sight account.</p></li>
/// <li>
/// <p>The status of the Quick Sight account's subscription.</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountInfo {
    /// <p>The account name that you provided for the Amazon Quick Sight subscription in your Amazon Web Services account. You create this name when you sign up for QuickSight. It's unique over all of Amazon Web Services, and it appears only when users sign in.</p>
    pub account_name: ::std::option::Option<::std::string::String>,
    /// <p>The edition of your Quick Sight account.</p>
    pub edition: ::std::option::Option<crate::types::Edition>,
    /// <p>The email address that will be used for Quick Sight to send notifications regarding your Amazon Web Services account or Quick Sight subscription.</p>
    pub notification_email: ::std::option::Option<::std::string::String>,
    /// <p>The way that your Amazon Quick Sight account is authenticated.</p>
    pub authentication_type: ::std::option::Option<::std::string::String>,
    /// <p>The status of your account subscription.</p>
    pub account_subscription_status: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub iam_identity_center_instance_arn: ::std::option::Option<::std::string::String>,
}
impl AccountInfo {
    /// <p>The account name that you provided for the Amazon Quick Sight subscription in your Amazon Web Services account. You create this name when you sign up for QuickSight. It's unique over all of Amazon Web Services, and it appears only when users sign in.</p>
    pub fn account_name(&self) -> ::std::option::Option<&str> {
        self.account_name.as_deref()
    }
    /// <p>The edition of your Quick Sight account.</p>
    pub fn edition(&self) -> ::std::option::Option<&crate::types::Edition> {
        self.edition.as_ref()
    }
    /// <p>The email address that will be used for Quick Sight to send notifications regarding your Amazon Web Services account or Quick Sight subscription.</p>
    pub fn notification_email(&self) -> ::std::option::Option<&str> {
        self.notification_email.as_deref()
    }
    /// <p>The way that your Amazon Quick Sight account is authenticated.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&str> {
        self.authentication_type.as_deref()
    }
    /// <p>The status of your account subscription.</p>
    pub fn account_subscription_status(&self) -> ::std::option::Option<&str> {
        self.account_subscription_status.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn iam_identity_center_instance_arn(&self) -> ::std::option::Option<&str> {
        self.iam_identity_center_instance_arn.as_deref()
    }
}
impl AccountInfo {
    /// Creates a new builder-style object to manufacture [`AccountInfo`](crate::types::AccountInfo).
    pub fn builder() -> crate::types::builders::AccountInfoBuilder {
        crate::types::builders::AccountInfoBuilder::default()
    }
}

/// A builder for [`AccountInfo`](crate::types::AccountInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccountInfoBuilder {
    pub(crate) account_name: ::std::option::Option<::std::string::String>,
    pub(crate) edition: ::std::option::Option<crate::types::Edition>,
    pub(crate) notification_email: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<::std::string::String>,
    pub(crate) account_subscription_status: ::std::option::Option<::std::string::String>,
    pub(crate) iam_identity_center_instance_arn: ::std::option::Option<::std::string::String>,
}
impl AccountInfoBuilder {
    /// <p>The account name that you provided for the Amazon Quick Sight subscription in your Amazon Web Services account. You create this name when you sign up for QuickSight. It's unique over all of Amazon Web Services, and it appears only when users sign in.</p>
    pub fn account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account name that you provided for the Amazon Quick Sight subscription in your Amazon Web Services account. You create this name when you sign up for QuickSight. It's unique over all of Amazon Web Services, and it appears only when users sign in.</p>
    pub fn set_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_name = input;
        self
    }
    /// <p>The account name that you provided for the Amazon Quick Sight subscription in your Amazon Web Services account. You create this name when you sign up for QuickSight. It's unique over all of Amazon Web Services, and it appears only when users sign in.</p>
    pub fn get_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_name
    }
    /// <p>The edition of your Quick Sight account.</p>
    pub fn edition(mut self, input: crate::types::Edition) -> Self {
        self.edition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The edition of your Quick Sight account.</p>
    pub fn set_edition(mut self, input: ::std::option::Option<crate::types::Edition>) -> Self {
        self.edition = input;
        self
    }
    /// <p>The edition of your Quick Sight account.</p>
    pub fn get_edition(&self) -> &::std::option::Option<crate::types::Edition> {
        &self.edition
    }
    /// <p>The email address that will be used for Quick Sight to send notifications regarding your Amazon Web Services account or Quick Sight subscription.</p>
    pub fn notification_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address that will be used for Quick Sight to send notifications regarding your Amazon Web Services account or Quick Sight subscription.</p>
    pub fn set_notification_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_email = input;
        self
    }
    /// <p>The email address that will be used for Quick Sight to send notifications regarding your Amazon Web Services account or Quick Sight subscription.</p>
    pub fn get_notification_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_email
    }
    /// <p>The way that your Amazon Quick Sight account is authenticated.</p>
    pub fn authentication_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The way that your Amazon Quick Sight account is authenticated.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The way that your Amazon Quick Sight account is authenticated.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_type
    }
    /// <p>The status of your account subscription.</p>
    pub fn account_subscription_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_subscription_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of your account subscription.</p>
    pub fn set_account_subscription_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_subscription_status = input;
        self
    }
    /// <p>The status of your account subscription.</p>
    pub fn get_account_subscription_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_subscription_status
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn iam_identity_center_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_identity_center_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn set_iam_identity_center_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_identity_center_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM Identity Center instance.</p>
    pub fn get_iam_identity_center_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_identity_center_instance_arn
    }
    /// Consumes the builder and constructs a [`AccountInfo`](crate::types::AccountInfo).
    pub fn build(self) -> crate::types::AccountInfo {
        crate::types::AccountInfo {
            account_name: self.account_name,
            edition: self.edition,
            notification_email: self.notification_email,
            authentication_type: self.authentication_type,
            account_subscription_status: self.account_subscription_status,
            iam_identity_center_instance_arn: self.iam_identity_center_instance_arn,
        }
    }
}
