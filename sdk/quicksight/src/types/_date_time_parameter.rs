// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A date-time parameter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateTimeParameter {
    /// <p>A display name for the date-time parameter.</p>
    pub name: ::std::string::String,
    /// <p>The values for the date-time parameter.</p>
    pub values: ::std::vec::Vec<::aws_smithy_types::DateTime>,
}
impl DateTimeParameter {
    /// <p>A display name for the date-time parameter.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The values for the date-time parameter.</p>
    pub fn values(&self) -> &[::aws_smithy_types::DateTime] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl DateTimeParameter {
    /// Creates a new builder-style object to manufacture [`DateTimeParameter`](crate::types::DateTimeParameter).
    pub fn builder() -> crate::types::builders::DateTimeParameterBuilder {
        crate::types::builders::DateTimeParameterBuilder::default()
    }
}

/// A builder for [`DateTimeParameter`](crate::types::DateTimeParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DateTimeParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
}
impl DateTimeParameterBuilder {
    /// <p>A display name for the date-time parameter.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A display name for the date-time parameter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A display name for the date-time parameter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values for the date-time parameter.</p>
    pub fn values(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values for the date-time parameter.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values for the date-time parameter.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`DateTimeParameter`](crate::types::DateTimeParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DateTimeParameterBuilder::name)
    /// - [`values`](crate::types::builders::DateTimeParameterBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::DateTimeParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DateTimeParameter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DateTimeParameter",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building DateTimeParameter",
                )
            })?,
        })
    }
}
