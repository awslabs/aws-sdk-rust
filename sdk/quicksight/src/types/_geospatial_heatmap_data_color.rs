// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color to be used in the heatmap point style.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialHeatmapDataColor {
    /// <p>The hex color to be used in the heatmap point style.</p>
    pub color: ::std::string::String,
}
impl GeospatialHeatmapDataColor {
    /// <p>The hex color to be used in the heatmap point style.</p>
    pub fn color(&self) -> &str {
        use std::ops::Deref;
        self.color.deref()
    }
}
impl GeospatialHeatmapDataColor {
    /// Creates a new builder-style object to manufacture [`GeospatialHeatmapDataColor`](crate::types::GeospatialHeatmapDataColor).
    pub fn builder() -> crate::types::builders::GeospatialHeatmapDataColorBuilder {
        crate::types::builders::GeospatialHeatmapDataColorBuilder::default()
    }
}

/// A builder for [`GeospatialHeatmapDataColor`](crate::types::GeospatialHeatmapDataColor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeospatialHeatmapDataColorBuilder {
    pub(crate) color: ::std::option::Option<::std::string::String>,
}
impl GeospatialHeatmapDataColorBuilder {
    /// <p>The hex color to be used in the heatmap point style.</p>
    /// This field is required.
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hex color to be used in the heatmap point style.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The hex color to be used in the heatmap point style.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// Consumes the builder and constructs a [`GeospatialHeatmapDataColor`](crate::types::GeospatialHeatmapDataColor).
    /// This method will fail if any of the following fields are not set:
    /// - [`color`](crate::types::builders::GeospatialHeatmapDataColorBuilder::color)
    pub fn build(self) -> ::std::result::Result<crate::types::GeospatialHeatmapDataColor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeospatialHeatmapDataColor {
            color: self.color.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color",
                    "color was not specified but it is required when building GeospatialHeatmapDataColor",
                )
            })?,
        })
    }
}
