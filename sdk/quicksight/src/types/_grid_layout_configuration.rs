// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a grid layout. Also called a tiled layout.</p>
/// <p>Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GridLayoutConfiguration {
    /// <p>The elements that are included in a grid layout.</p>
    #[doc(hidden)]
    pub elements: std::option::Option<std::vec::Vec<crate::types::GridLayoutElement>>,
    /// <p>Configuration options for the canvas of a grid layout.</p>
    #[doc(hidden)]
    pub canvas_size_options: std::option::Option<crate::types::GridLayoutCanvasSizeOptions>,
}
impl GridLayoutConfiguration {
    /// <p>The elements that are included in a grid layout.</p>
    pub fn elements(&self) -> std::option::Option<&[crate::types::GridLayoutElement]> {
        self.elements.as_deref()
    }
    /// <p>Configuration options for the canvas of a grid layout.</p>
    pub fn canvas_size_options(
        &self,
    ) -> std::option::Option<&crate::types::GridLayoutCanvasSizeOptions> {
        self.canvas_size_options.as_ref()
    }
}
impl GridLayoutConfiguration {
    /// Creates a new builder-style object to manufacture [`GridLayoutConfiguration`](crate::types::GridLayoutConfiguration).
    pub fn builder() -> crate::types::builders::GridLayoutConfigurationBuilder {
        crate::types::builders::GridLayoutConfigurationBuilder::default()
    }
}

/// A builder for [`GridLayoutConfiguration`](crate::types::GridLayoutConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GridLayoutConfigurationBuilder {
    pub(crate) elements: std::option::Option<std::vec::Vec<crate::types::GridLayoutElement>>,
    pub(crate) canvas_size_options: std::option::Option<crate::types::GridLayoutCanvasSizeOptions>,
}
impl GridLayoutConfigurationBuilder {
    /// Appends an item to `elements`.
    ///
    /// To override the contents of this collection use [`set_elements`](Self::set_elements).
    ///
    /// <p>The elements that are included in a grid layout.</p>
    pub fn elements(mut self, input: crate::types::GridLayoutElement) -> Self {
        let mut v = self.elements.unwrap_or_default();
        v.push(input);
        self.elements = Some(v);
        self
    }
    /// <p>The elements that are included in a grid layout.</p>
    pub fn set_elements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GridLayoutElement>>,
    ) -> Self {
        self.elements = input;
        self
    }
    /// <p>Configuration options for the canvas of a grid layout.</p>
    pub fn canvas_size_options(mut self, input: crate::types::GridLayoutCanvasSizeOptions) -> Self {
        self.canvas_size_options = Some(input);
        self
    }
    /// <p>Configuration options for the canvas of a grid layout.</p>
    pub fn set_canvas_size_options(
        mut self,
        input: std::option::Option<crate::types::GridLayoutCanvasSizeOptions>,
    ) -> Self {
        self.canvas_size_options = input;
        self
    }
    /// Consumes the builder and constructs a [`GridLayoutConfiguration`](crate::types::GridLayoutConfiguration).
    pub fn build(self) -> crate::types::GridLayoutConfiguration {
        crate::types::GridLayoutConfiguration {
            elements: self.elements,
            canvas_size_options: self.canvas_size_options,
        }
    }
}
