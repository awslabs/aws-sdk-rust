// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the forecast to meet the target for a particular date.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WhatIfPointScenario {
    /// <p>The date that you need the forecast results for.</p>
    #[doc(hidden)]
    pub date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The target value that you want to meet for the provided date.</p>
    #[doc(hidden)]
    pub value: f64,
}
impl WhatIfPointScenario {
    /// <p>The date that you need the forecast results for.</p>
    pub fn date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl WhatIfPointScenario {
    /// Creates a new builder-style object to manufacture [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
    pub fn builder() -> crate::types::builders::WhatIfPointScenarioBuilder {
        crate::types::builders::WhatIfPointScenarioBuilder::default()
    }
}

/// A builder for [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WhatIfPointScenarioBuilder {
    pub(crate) date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) value: std::option::Option<f64>,
}
impl WhatIfPointScenarioBuilder {
    /// <p>The date that you need the forecast results for.</p>
    pub fn date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.date = Some(input);
        self
    }
    /// <p>The date that you need the forecast results for.</p>
    pub fn set_date(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
    pub fn build(self) -> crate::types::WhatIfPointScenario {
        crate::types::WhatIfPointScenario {
            date: self.date,
            value: self.value.unwrap_or_default(),
        }
    }
}
