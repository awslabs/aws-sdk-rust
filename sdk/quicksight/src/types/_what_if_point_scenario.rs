// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the forecast to meet the target for a particular date.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WhatIfPointScenario {
    /// <p>The date that you need the forecast results for.</p>
    pub date: ::aws_smithy_types::DateTime,
    /// <p>The target value that you want to meet for the provided date.</p>
    pub value: f64,
}
impl WhatIfPointScenario {
    /// <p>The date that you need the forecast results for.</p>
    pub fn date(&self) -> &::aws_smithy_types::DateTime {
        &self.date
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl WhatIfPointScenario {
    /// Creates a new builder-style object to manufacture [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
    pub fn builder() -> crate::types::builders::WhatIfPointScenarioBuilder {
        crate::types::builders::WhatIfPointScenarioBuilder::default()
    }
}

/// A builder for [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WhatIfPointScenarioBuilder {
    pub(crate) date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl WhatIfPointScenarioBuilder {
    /// <p>The date that you need the forecast results for.</p>
    /// This field is required.
    pub fn date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date that you need the forecast results for.</p>
    pub fn set_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p>The date that you need the forecast results for.</p>
    pub fn get_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The target value that you want to meet for the provided date.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`WhatIfPointScenario`](crate::types::WhatIfPointScenario).
    /// This method will fail if any of the following fields are not set:
    /// - [`date`](crate::types::builders::WhatIfPointScenarioBuilder::date)
    pub fn build(self) -> ::std::result::Result<crate::types::WhatIfPointScenario, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WhatIfPointScenario {
            date: self.date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "date",
                    "date was not specified but it is required when building WhatIfPointScenario",
                )
            })?,
            value: self.value.unwrap_or_default(),
        })
    }
}
