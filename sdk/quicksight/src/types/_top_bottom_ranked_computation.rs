// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The top ranked and bottom ranked computation configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopBottomRankedComputation {
    /// <p>The ID for a computation.</p>
    pub computation_id: ::std::string::String,
    /// <p>The name of a computation.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The category field that is used in a computation.</p>
    pub category: ::std::option::Option<crate::types::DimensionField>,
    /// <p>The value field that is used in a computation.</p>
    pub value: ::std::option::Option<crate::types::MeasureField>,
    /// <p>The result size of a top and bottom ranked computation.</p>
    pub result_size: ::std::option::Option<i32>,
    /// <p>The computation type. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>TOP: A top ranked computation.</p> </li>
    /// <li> <p>BOTTOM: A bottom ranked computation.</p> </li>
    /// </ul>
    pub r#type: crate::types::TopBottomComputationType,
}
impl TopBottomRankedComputation {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(&self) -> &str {
        use std::ops::Deref;
        self.computation_id.deref()
    }
    /// <p>The name of a computation.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The category field that is used in a computation.</p>
    pub fn category(&self) -> ::std::option::Option<&crate::types::DimensionField> {
        self.category.as_ref()
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::MeasureField> {
        self.value.as_ref()
    }
    /// <p>The result size of a top and bottom ranked computation.</p>
    pub fn result_size(&self) -> ::std::option::Option<i32> {
        self.result_size
    }
    /// <p>The computation type. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>TOP: A top ranked computation.</p> </li>
    /// <li> <p>BOTTOM: A bottom ranked computation.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::TopBottomComputationType {
        &self.r#type
    }
}
impl TopBottomRankedComputation {
    /// Creates a new builder-style object to manufacture [`TopBottomRankedComputation`](crate::types::TopBottomRankedComputation).
    pub fn builder() -> crate::types::builders::TopBottomRankedComputationBuilder {
        crate::types::builders::TopBottomRankedComputationBuilder::default()
    }
}

/// A builder for [`TopBottomRankedComputation`](crate::types::TopBottomRankedComputation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TopBottomRankedComputationBuilder {
    pub(crate) computation_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<crate::types::DimensionField>,
    pub(crate) value: ::std::option::Option<crate::types::MeasureField>,
    pub(crate) result_size: ::std::option::Option<i32>,
    pub(crate) r#type: ::std::option::Option<crate::types::TopBottomComputationType>,
}
impl TopBottomRankedComputationBuilder {
    /// <p>The ID for a computation.</p>
    /// This field is required.
    pub fn computation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn set_computation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_id = input;
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn get_computation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_id
    }
    /// <p>The name of a computation.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a computation.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a computation.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The category field that is used in a computation.</p>
    pub fn category(mut self, input: crate::types::DimensionField) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category field that is used in a computation.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::DimensionField>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category field that is used in a computation.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::DimensionField> {
        &self.category
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(mut self, input: crate::types::MeasureField) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::MeasureField>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::MeasureField> {
        &self.value
    }
    /// <p>The result size of a top and bottom ranked computation.</p>
    pub fn result_size(mut self, input: i32) -> Self {
        self.result_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result size of a top and bottom ranked computation.</p>
    pub fn set_result_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.result_size = input;
        self
    }
    /// <p>The result size of a top and bottom ranked computation.</p>
    pub fn get_result_size(&self) -> &::std::option::Option<i32> {
        &self.result_size
    }
    /// <p>The computation type. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>TOP: A top ranked computation.</p> </li>
    /// <li> <p>BOTTOM: A bottom ranked computation.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TopBottomComputationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The computation type. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>TOP: A top ranked computation.</p> </li>
    /// <li> <p>BOTTOM: A bottom ranked computation.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TopBottomComputationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The computation type. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>TOP: A top ranked computation.</p> </li>
    /// <li> <p>BOTTOM: A bottom ranked computation.</p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TopBottomComputationType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`TopBottomRankedComputation`](crate::types::TopBottomRankedComputation).
    /// This method will fail if any of the following fields are not set:
    /// - [`computation_id`](crate::types::builders::TopBottomRankedComputationBuilder::computation_id)
    /// - [`r#type`](crate::types::builders::TopBottomRankedComputationBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::TopBottomRankedComputation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TopBottomRankedComputation {
            computation_id: self.computation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "computation_id",
                    "computation_id was not specified but it is required when building TopBottomRankedComputation",
                )
            })?,
            name: self.name,
            category: self.category,
            value: self.value,
            result_size: self.result_size,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TopBottomRankedComputation",
                )
            })?,
        })
    }
}
