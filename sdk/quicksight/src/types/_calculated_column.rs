// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A calculated column for a dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CalculatedColumn {
    /// <p>Column name.</p>
    pub column_name: ::std::string::String,
    /// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.</p>
    pub column_id: ::std::string::String,
    /// <p>An expression that defines the calculated column.</p>
    pub expression: ::std::string::String,
}
impl CalculatedColumn {
    /// <p>Column name.</p>
    pub fn column_name(&self) -> &str {
        use std::ops::Deref;
        self.column_name.deref()
    }
    /// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.</p>
    pub fn column_id(&self) -> &str {
        use std::ops::Deref;
        self.column_id.deref()
    }
    /// <p>An expression that defines the calculated column.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
}
impl ::std::fmt::Debug for CalculatedColumn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculatedColumn");
        formatter.field("column_name", &self.column_name);
        formatter.field("column_id", &self.column_id);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CalculatedColumn {
    /// Creates a new builder-style object to manufacture [`CalculatedColumn`](crate::types::CalculatedColumn).
    pub fn builder() -> crate::types::builders::CalculatedColumnBuilder {
        crate::types::builders::CalculatedColumnBuilder::default()
    }
}

/// A builder for [`CalculatedColumn`](crate::types::CalculatedColumn).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CalculatedColumnBuilder {
    pub(crate) column_name: ::std::option::Option<::std::string::String>,
    pub(crate) column_id: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl CalculatedColumnBuilder {
    /// <p>Column name.</p>
    /// This field is required.
    pub fn column_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Column name.</p>
    pub fn set_column_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>Column name.</p>
    pub fn get_column_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_name
    }
    /// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.</p>
    /// This field is required.
    pub fn column_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.</p>
    pub fn set_column_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_id = input;
        self
    }
    /// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.</p>
    pub fn get_column_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_id
    }
    /// <p>An expression that defines the calculated column.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An expression that defines the calculated column.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>An expression that defines the calculated column.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`CalculatedColumn`](crate::types::CalculatedColumn).
    /// This method will fail if any of the following fields are not set:
    /// - [`column_name`](crate::types::builders::CalculatedColumnBuilder::column_name)
    /// - [`column_id`](crate::types::builders::CalculatedColumnBuilder::column_id)
    /// - [`expression`](crate::types::builders::CalculatedColumnBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::CalculatedColumn, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CalculatedColumn {
            column_name: self.column_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column_name",
                    "column_name was not specified but it is required when building CalculatedColumn",
                )
            })?,
            column_id: self.column_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column_id",
                    "column_id was not specified but it is required when building CalculatedColumn",
                )
            })?,
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building CalculatedColumn",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CalculatedColumnBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculatedColumnBuilder");
        formatter.field("column_name", &self.column_name);
        formatter.field("column_id", &self.column_id);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
