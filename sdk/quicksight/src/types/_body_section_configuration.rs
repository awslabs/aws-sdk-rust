// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a body section.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BodySectionConfiguration {
    /// <p>The unique identifier of a body section.</p>
    #[doc(hidden)]
    pub section_id: std::option::Option<std::string::String>,
    /// <p>The configuration of content in a body section.</p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::BodySectionContent>,
    /// <p>The style options of a body section.</p>
    #[doc(hidden)]
    pub style: std::option::Option<crate::types::SectionStyle>,
    /// <p>The configuration of a page break for a section.</p>
    #[doc(hidden)]
    pub page_break_configuration: std::option::Option<crate::types::SectionPageBreakConfiguration>,
}
impl BodySectionConfiguration {
    /// <p>The unique identifier of a body section.</p>
    pub fn section_id(&self) -> std::option::Option<&str> {
        self.section_id.as_deref()
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn content(&self) -> std::option::Option<&crate::types::BodySectionContent> {
        self.content.as_ref()
    }
    /// <p>The style options of a body section.</p>
    pub fn style(&self) -> std::option::Option<&crate::types::SectionStyle> {
        self.style.as_ref()
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn page_break_configuration(
        &self,
    ) -> std::option::Option<&crate::types::SectionPageBreakConfiguration> {
        self.page_break_configuration.as_ref()
    }
}
impl BodySectionConfiguration {
    /// Creates a new builder-style object to manufacture [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
    pub fn builder() -> crate::types::builders::BodySectionConfigurationBuilder {
        crate::types::builders::BodySectionConfigurationBuilder::default()
    }
}

/// A builder for [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BodySectionConfigurationBuilder {
    pub(crate) section_id: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<crate::types::BodySectionContent>,
    pub(crate) style: std::option::Option<crate::types::SectionStyle>,
    pub(crate) page_break_configuration:
        std::option::Option<crate::types::SectionPageBreakConfiguration>,
}
impl BodySectionConfigurationBuilder {
    /// <p>The unique identifier of a body section.</p>
    pub fn section_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.section_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of a body section.</p>
    pub fn set_section_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.section_id = input;
        self
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn content(mut self, input: crate::types::BodySectionContent) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<crate::types::BodySectionContent>,
    ) -> Self {
        self.content = input;
        self
    }
    /// <p>The style options of a body section.</p>
    pub fn style(mut self, input: crate::types::SectionStyle) -> Self {
        self.style = Some(input);
        self
    }
    /// <p>The style options of a body section.</p>
    pub fn set_style(mut self, input: std::option::Option<crate::types::SectionStyle>) -> Self {
        self.style = input;
        self
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn page_break_configuration(
        mut self,
        input: crate::types::SectionPageBreakConfiguration,
    ) -> Self {
        self.page_break_configuration = Some(input);
        self
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn set_page_break_configuration(
        mut self,
        input: std::option::Option<crate::types::SectionPageBreakConfiguration>,
    ) -> Self {
        self.page_break_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
    pub fn build(self) -> crate::types::BodySectionConfiguration {
        crate::types::BodySectionConfiguration {
            section_id: self.section_id,
            content: self.content,
            style: self.style,
            page_break_configuration: self.page_break_configuration,
        }
    }
}
