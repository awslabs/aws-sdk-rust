// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a body section.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BodySectionConfiguration {
    /// <p>The unique identifier of a body section.</p>
    pub section_id: ::std::string::String,
    /// <p>The configuration of content in a body section.</p>
    pub content: ::std::option::Option<crate::types::BodySectionContent>,
    /// <p>The style options of a body section.</p>
    pub style: ::std::option::Option<crate::types::SectionStyle>,
    /// <p>The configuration of a page break for a section.</p>
    pub page_break_configuration: ::std::option::Option<crate::types::SectionPageBreakConfiguration>,
}
impl BodySectionConfiguration {
    /// <p>The unique identifier of a body section.</p>
    pub fn section_id(&self) -> &str {
        use std::ops::Deref;
        self.section_id.deref()
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::BodySectionContent> {
        self.content.as_ref()
    }
    /// <p>The style options of a body section.</p>
    pub fn style(&self) -> ::std::option::Option<&crate::types::SectionStyle> {
        self.style.as_ref()
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn page_break_configuration(&self) -> ::std::option::Option<&crate::types::SectionPageBreakConfiguration> {
        self.page_break_configuration.as_ref()
    }
}
impl BodySectionConfiguration {
    /// Creates a new builder-style object to manufacture [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
    pub fn builder() -> crate::types::builders::BodySectionConfigurationBuilder {
        crate::types::builders::BodySectionConfigurationBuilder::default()
    }
}

/// A builder for [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BodySectionConfigurationBuilder {
    pub(crate) section_id: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<crate::types::BodySectionContent>,
    pub(crate) style: ::std::option::Option<crate::types::SectionStyle>,
    pub(crate) page_break_configuration: ::std::option::Option<crate::types::SectionPageBreakConfiguration>,
}
impl BodySectionConfigurationBuilder {
    /// <p>The unique identifier of a body section.</p>
    /// This field is required.
    pub fn section_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.section_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a body section.</p>
    pub fn set_section_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.section_id = input;
        self
    }
    /// <p>The unique identifier of a body section.</p>
    pub fn get_section_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.section_id
    }
    /// <p>The configuration of content in a body section.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::BodySectionContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::BodySectionContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>The configuration of content in a body section.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::BodySectionContent> {
        &self.content
    }
    /// <p>The style options of a body section.</p>
    pub fn style(mut self, input: crate::types::SectionStyle) -> Self {
        self.style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The style options of a body section.</p>
    pub fn set_style(mut self, input: ::std::option::Option<crate::types::SectionStyle>) -> Self {
        self.style = input;
        self
    }
    /// <p>The style options of a body section.</p>
    pub fn get_style(&self) -> &::std::option::Option<crate::types::SectionStyle> {
        &self.style
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn page_break_configuration(mut self, input: crate::types::SectionPageBreakConfiguration) -> Self {
        self.page_break_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn set_page_break_configuration(mut self, input: ::std::option::Option<crate::types::SectionPageBreakConfiguration>) -> Self {
        self.page_break_configuration = input;
        self
    }
    /// <p>The configuration of a page break for a section.</p>
    pub fn get_page_break_configuration(&self) -> &::std::option::Option<crate::types::SectionPageBreakConfiguration> {
        &self.page_break_configuration
    }
    /// Consumes the builder and constructs a [`BodySectionConfiguration`](crate::types::BodySectionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`section_id`](crate::types::builders::BodySectionConfigurationBuilder::section_id)
    pub fn build(self) -> ::std::result::Result<crate::types::BodySectionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BodySectionConfiguration {
            section_id: self.section_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "section_id",
                    "section_id was not specified but it is required when building BodySectionConfiguration",
                )
            })?,
            content: self.content,
            style: self.style,
            page_break_configuration: self.page_break_configuration,
        })
    }
}
