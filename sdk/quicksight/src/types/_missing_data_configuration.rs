// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration options that determine how missing data is treated during the rendering of a line chart.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MissingDataConfiguration {
    /// <p>The treatment option that determines how missing data should be rendered. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>INTERPOLATE</code>: Interpolate missing values between the prior and the next known value.</p> </li>
    /// <li> <p> <code>SHOW_AS_ZERO</code>: Show missing values as the value <code>0</code>.</p> </li>
    /// <li> <p> <code>SHOW_AS_BLANK</code>: Display a blank space when rendering missing data.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub treatment_option: std::option::Option<crate::types::MissingDataTreatmentOption>,
}
impl MissingDataConfiguration {
    /// <p>The treatment option that determines how missing data should be rendered. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>INTERPOLATE</code>: Interpolate missing values between the prior and the next known value.</p> </li>
    /// <li> <p> <code>SHOW_AS_ZERO</code>: Show missing values as the value <code>0</code>.</p> </li>
    /// <li> <p> <code>SHOW_AS_BLANK</code>: Display a blank space when rendering missing data.</p> </li>
    /// </ul>
    pub fn treatment_option(
        &self,
    ) -> std::option::Option<&crate::types::MissingDataTreatmentOption> {
        self.treatment_option.as_ref()
    }
}
impl MissingDataConfiguration {
    /// Creates a new builder-style object to manufacture [`MissingDataConfiguration`](crate::types::MissingDataConfiguration).
    pub fn builder() -> crate::types::builders::MissingDataConfigurationBuilder {
        crate::types::builders::MissingDataConfigurationBuilder::default()
    }
}

/// A builder for [`MissingDataConfiguration`](crate::types::MissingDataConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MissingDataConfigurationBuilder {
    pub(crate) treatment_option: std::option::Option<crate::types::MissingDataTreatmentOption>,
}
impl MissingDataConfigurationBuilder {
    /// <p>The treatment option that determines how missing data should be rendered. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>INTERPOLATE</code>: Interpolate missing values between the prior and the next known value.</p> </li>
    /// <li> <p> <code>SHOW_AS_ZERO</code>: Show missing values as the value <code>0</code>.</p> </li>
    /// <li> <p> <code>SHOW_AS_BLANK</code>: Display a blank space when rendering missing data.</p> </li>
    /// </ul>
    pub fn treatment_option(mut self, input: crate::types::MissingDataTreatmentOption) -> Self {
        self.treatment_option = Some(input);
        self
    }
    /// <p>The treatment option that determines how missing data should be rendered. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>INTERPOLATE</code>: Interpolate missing values between the prior and the next known value.</p> </li>
    /// <li> <p> <code>SHOW_AS_ZERO</code>: Show missing values as the value <code>0</code>.</p> </li>
    /// <li> <p> <code>SHOW_AS_BLANK</code>: Display a blank space when rendering missing data.</p> </li>
    /// </ul>
    pub fn set_treatment_option(
        mut self,
        input: std::option::Option<crate::types::MissingDataTreatmentOption>,
    ) -> Self {
        self.treatment_option = input;
        self
    }
    /// Consumes the builder and constructs a [`MissingDataConfiguration`](crate::types::MissingDataConfiguration).
    pub fn build(self) -> crate::types::MissingDataConfiguration {
        crate::types::MissingDataConfiguration {
            treatment_option: self.treatment_option,
        }
    }
}
