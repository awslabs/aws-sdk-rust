// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The text format for a subtitle.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LongFormatText {
    /// <p>Plain text format.</p>
    #[doc(hidden)]
    pub plain_text: std::option::Option<std::string::String>,
    /// <p>Rich text. Examples of rich text include bold, underline, and italics.</p>
    #[doc(hidden)]
    pub rich_text: std::option::Option<std::string::String>,
}
impl LongFormatText {
    /// <p>Plain text format.</p>
    pub fn plain_text(&self) -> std::option::Option<&str> {
        self.plain_text.as_deref()
    }
    /// <p>Rich text. Examples of rich text include bold, underline, and italics.</p>
    pub fn rich_text(&self) -> std::option::Option<&str> {
        self.rich_text.as_deref()
    }
}
impl LongFormatText {
    /// Creates a new builder-style object to manufacture [`LongFormatText`](crate::types::LongFormatText).
    pub fn builder() -> crate::types::builders::LongFormatTextBuilder {
        crate::types::builders::LongFormatTextBuilder::default()
    }
}

/// A builder for [`LongFormatText`](crate::types::LongFormatText).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LongFormatTextBuilder {
    pub(crate) plain_text: std::option::Option<std::string::String>,
    pub(crate) rich_text: std::option::Option<std::string::String>,
}
impl LongFormatTextBuilder {
    /// <p>Plain text format.</p>
    pub fn plain_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.plain_text = Some(input.into());
        self
    }
    /// <p>Plain text format.</p>
    pub fn set_plain_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.plain_text = input;
        self
    }
    /// <p>Rich text. Examples of rich text include bold, underline, and italics.</p>
    pub fn rich_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.rich_text = Some(input.into());
        self
    }
    /// <p>Rich text. Examples of rich text include bold, underline, and italics.</p>
    pub fn set_rich_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rich_text = input;
        self
    }
    /// Consumes the builder and constructs a [`LongFormatText`](crate::types::LongFormatText).
    pub fn build(self) -> crate::types::LongFormatText {
        crate::types::LongFormatText {
            plain_text: self.plain_text,
            rich_text: self.rich_text,
        }
    }
}
