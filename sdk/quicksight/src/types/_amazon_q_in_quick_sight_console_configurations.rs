// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of Amazon Q feature configurations in an embedded Quick Sight console.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmazonQInQuickSightConsoleConfigurations {
    /// <p>Adds generative Q&amp;A capabilitiees to an embedded Quick Sight console.</p>
    pub data_qn_a: ::std::option::Option<crate::types::DataQnAConfigurations>,
    /// <p>Adds the generative BI authoring experience to an embedded Quick Sight console.</p>
    pub generative_authoring: ::std::option::Option<crate::types::GenerativeAuthoringConfigurations>,
    /// <p>Adds the executive summaries feature to an embedded Quick Sight console.</p>
    pub executive_summary: ::std::option::Option<crate::types::ExecutiveSummaryConfigurations>,
    /// <p>Adds the data stories feature to an embedded Quick Sight console.</p>
    pub data_stories: ::std::option::Option<crate::types::DataStoriesConfigurations>,
}
impl AmazonQInQuickSightConsoleConfigurations {
    /// <p>Adds generative Q&amp;A capabilitiees to an embedded Quick Sight console.</p>
    pub fn data_qn_a(&self) -> ::std::option::Option<&crate::types::DataQnAConfigurations> {
        self.data_qn_a.as_ref()
    }
    /// <p>Adds the generative BI authoring experience to an embedded Quick Sight console.</p>
    pub fn generative_authoring(&self) -> ::std::option::Option<&crate::types::GenerativeAuthoringConfigurations> {
        self.generative_authoring.as_ref()
    }
    /// <p>Adds the executive summaries feature to an embedded Quick Sight console.</p>
    pub fn executive_summary(&self) -> ::std::option::Option<&crate::types::ExecutiveSummaryConfigurations> {
        self.executive_summary.as_ref()
    }
    /// <p>Adds the data stories feature to an embedded Quick Sight console.</p>
    pub fn data_stories(&self) -> ::std::option::Option<&crate::types::DataStoriesConfigurations> {
        self.data_stories.as_ref()
    }
}
impl AmazonQInQuickSightConsoleConfigurations {
    /// Creates a new builder-style object to manufacture [`AmazonQInQuickSightConsoleConfigurations`](crate::types::AmazonQInQuickSightConsoleConfigurations).
    pub fn builder() -> crate::types::builders::AmazonQInQuickSightConsoleConfigurationsBuilder {
        crate::types::builders::AmazonQInQuickSightConsoleConfigurationsBuilder::default()
    }
}

/// A builder for [`AmazonQInQuickSightConsoleConfigurations`](crate::types::AmazonQInQuickSightConsoleConfigurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AmazonQInQuickSightConsoleConfigurationsBuilder {
    pub(crate) data_qn_a: ::std::option::Option<crate::types::DataQnAConfigurations>,
    pub(crate) generative_authoring: ::std::option::Option<crate::types::GenerativeAuthoringConfigurations>,
    pub(crate) executive_summary: ::std::option::Option<crate::types::ExecutiveSummaryConfigurations>,
    pub(crate) data_stories: ::std::option::Option<crate::types::DataStoriesConfigurations>,
}
impl AmazonQInQuickSightConsoleConfigurationsBuilder {
    /// <p>Adds generative Q&amp;A capabilitiees to an embedded Quick Sight console.</p>
    pub fn data_qn_a(mut self, input: crate::types::DataQnAConfigurations) -> Self {
        self.data_qn_a = ::std::option::Option::Some(input);
        self
    }
    /// <p>Adds generative Q&amp;A capabilitiees to an embedded Quick Sight console.</p>
    pub fn set_data_qn_a(mut self, input: ::std::option::Option<crate::types::DataQnAConfigurations>) -> Self {
        self.data_qn_a = input;
        self
    }
    /// <p>Adds generative Q&amp;A capabilitiees to an embedded Quick Sight console.</p>
    pub fn get_data_qn_a(&self) -> &::std::option::Option<crate::types::DataQnAConfigurations> {
        &self.data_qn_a
    }
    /// <p>Adds the generative BI authoring experience to an embedded Quick Sight console.</p>
    pub fn generative_authoring(mut self, input: crate::types::GenerativeAuthoringConfigurations) -> Self {
        self.generative_authoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Adds the generative BI authoring experience to an embedded Quick Sight console.</p>
    pub fn set_generative_authoring(mut self, input: ::std::option::Option<crate::types::GenerativeAuthoringConfigurations>) -> Self {
        self.generative_authoring = input;
        self
    }
    /// <p>Adds the generative BI authoring experience to an embedded Quick Sight console.</p>
    pub fn get_generative_authoring(&self) -> &::std::option::Option<crate::types::GenerativeAuthoringConfigurations> {
        &self.generative_authoring
    }
    /// <p>Adds the executive summaries feature to an embedded Quick Sight console.</p>
    pub fn executive_summary(mut self, input: crate::types::ExecutiveSummaryConfigurations) -> Self {
        self.executive_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Adds the executive summaries feature to an embedded Quick Sight console.</p>
    pub fn set_executive_summary(mut self, input: ::std::option::Option<crate::types::ExecutiveSummaryConfigurations>) -> Self {
        self.executive_summary = input;
        self
    }
    /// <p>Adds the executive summaries feature to an embedded Quick Sight console.</p>
    pub fn get_executive_summary(&self) -> &::std::option::Option<crate::types::ExecutiveSummaryConfigurations> {
        &self.executive_summary
    }
    /// <p>Adds the data stories feature to an embedded Quick Sight console.</p>
    pub fn data_stories(mut self, input: crate::types::DataStoriesConfigurations) -> Self {
        self.data_stories = ::std::option::Option::Some(input);
        self
    }
    /// <p>Adds the data stories feature to an embedded Quick Sight console.</p>
    pub fn set_data_stories(mut self, input: ::std::option::Option<crate::types::DataStoriesConfigurations>) -> Self {
        self.data_stories = input;
        self
    }
    /// <p>Adds the data stories feature to an embedded Quick Sight console.</p>
    pub fn get_data_stories(&self) -> &::std::option::Option<crate::types::DataStoriesConfigurations> {
        &self.data_stories
    }
    /// Consumes the builder and constructs a [`AmazonQInQuickSightConsoleConfigurations`](crate::types::AmazonQInQuickSightConsoleConfigurations).
    pub fn build(self) -> crate::types::AmazonQInQuickSightConsoleConfigurations {
        crate::types::AmazonQInQuickSightConsoleConfigurations {
            data_qn_a: self.data_qn_a,
            generative_authoring: self.generative_authoring,
            executive_summary: self.executive_summary,
            data_stories: self.data_stories,
        }
    }
}
