// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The total options for a table visual.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TotalOptions {
    /// <p>The visibility configuration for the total cells.</p>
    pub totals_visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The placement (start, end) for the total cells.</p>
    pub placement: ::std::option::Option<crate::types::TableTotalsPlacement>,
    /// <p>The scroll status (pinned, scrolled) for the total cells.</p>
    pub scroll_status: ::std::option::Option<crate::types::TableTotalsScrollStatus>,
    /// <p>The custom label string for the total cells.</p>
    pub custom_label: ::std::option::Option<::std::string::String>,
    /// <p>Cell styling options for the total cells.</p>
    pub total_cell_style: ::std::option::Option<crate::types::TableCellStyle>,
    /// <p>The total aggregation settings for each value field.</p>
    pub total_aggregation_options: ::std::option::Option<::std::vec::Vec<crate::types::TotalAggregationOption>>,
}
impl TotalOptions {
    /// <p>The visibility configuration for the total cells.</p>
    pub fn totals_visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.totals_visibility.as_ref()
    }
    /// <p>The placement (start, end) for the total cells.</p>
    pub fn placement(&self) -> ::std::option::Option<&crate::types::TableTotalsPlacement> {
        self.placement.as_ref()
    }
    /// <p>The scroll status (pinned, scrolled) for the total cells.</p>
    pub fn scroll_status(&self) -> ::std::option::Option<&crate::types::TableTotalsScrollStatus> {
        self.scroll_status.as_ref()
    }
    /// <p>The custom label string for the total cells.</p>
    pub fn custom_label(&self) -> ::std::option::Option<&str> {
        self.custom_label.as_deref()
    }
    /// <p>Cell styling options for the total cells.</p>
    pub fn total_cell_style(&self) -> ::std::option::Option<&crate::types::TableCellStyle> {
        self.total_cell_style.as_ref()
    }
    /// <p>The total aggregation settings for each value field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.total_aggregation_options.is_none()`.
    pub fn total_aggregation_options(&self) -> &[crate::types::TotalAggregationOption] {
        self.total_aggregation_options.as_deref().unwrap_or_default()
    }
}
impl TotalOptions {
    /// Creates a new builder-style object to manufacture [`TotalOptions`](crate::types::TotalOptions).
    pub fn builder() -> crate::types::builders::TotalOptionsBuilder {
        crate::types::builders::TotalOptionsBuilder::default()
    }
}

/// A builder for [`TotalOptions`](crate::types::TotalOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TotalOptionsBuilder {
    pub(crate) totals_visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) placement: ::std::option::Option<crate::types::TableTotalsPlacement>,
    pub(crate) scroll_status: ::std::option::Option<crate::types::TableTotalsScrollStatus>,
    pub(crate) custom_label: ::std::option::Option<::std::string::String>,
    pub(crate) total_cell_style: ::std::option::Option<crate::types::TableCellStyle>,
    pub(crate) total_aggregation_options: ::std::option::Option<::std::vec::Vec<crate::types::TotalAggregationOption>>,
}
impl TotalOptionsBuilder {
    /// <p>The visibility configuration for the total cells.</p>
    pub fn totals_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.totals_visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility configuration for the total cells.</p>
    pub fn set_totals_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.totals_visibility = input;
        self
    }
    /// <p>The visibility configuration for the total cells.</p>
    pub fn get_totals_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.totals_visibility
    }
    /// <p>The placement (start, end) for the total cells.</p>
    pub fn placement(mut self, input: crate::types::TableTotalsPlacement) -> Self {
        self.placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The placement (start, end) for the total cells.</p>
    pub fn set_placement(mut self, input: ::std::option::Option<crate::types::TableTotalsPlacement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>The placement (start, end) for the total cells.</p>
    pub fn get_placement(&self) -> &::std::option::Option<crate::types::TableTotalsPlacement> {
        &self.placement
    }
    /// <p>The scroll status (pinned, scrolled) for the total cells.</p>
    pub fn scroll_status(mut self, input: crate::types::TableTotalsScrollStatus) -> Self {
        self.scroll_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scroll status (pinned, scrolled) for the total cells.</p>
    pub fn set_scroll_status(mut self, input: ::std::option::Option<crate::types::TableTotalsScrollStatus>) -> Self {
        self.scroll_status = input;
        self
    }
    /// <p>The scroll status (pinned, scrolled) for the total cells.</p>
    pub fn get_scroll_status(&self) -> &::std::option::Option<crate::types::TableTotalsScrollStatus> {
        &self.scroll_status
    }
    /// <p>The custom label string for the total cells.</p>
    pub fn custom_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom label string for the total cells.</p>
    pub fn set_custom_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_label = input;
        self
    }
    /// <p>The custom label string for the total cells.</p>
    pub fn get_custom_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_label
    }
    /// <p>Cell styling options for the total cells.</p>
    pub fn total_cell_style(mut self, input: crate::types::TableCellStyle) -> Self {
        self.total_cell_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>Cell styling options for the total cells.</p>
    pub fn set_total_cell_style(mut self, input: ::std::option::Option<crate::types::TableCellStyle>) -> Self {
        self.total_cell_style = input;
        self
    }
    /// <p>Cell styling options for the total cells.</p>
    pub fn get_total_cell_style(&self) -> &::std::option::Option<crate::types::TableCellStyle> {
        &self.total_cell_style
    }
    /// Appends an item to `total_aggregation_options`.
    ///
    /// To override the contents of this collection use [`set_total_aggregation_options`](Self::set_total_aggregation_options).
    ///
    /// <p>The total aggregation settings for each value field.</p>
    pub fn total_aggregation_options(mut self, input: crate::types::TotalAggregationOption) -> Self {
        let mut v = self.total_aggregation_options.unwrap_or_default();
        v.push(input);
        self.total_aggregation_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The total aggregation settings for each value field.</p>
    pub fn set_total_aggregation_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TotalAggregationOption>>) -> Self {
        self.total_aggregation_options = input;
        self
    }
    /// <p>The total aggregation settings for each value field.</p>
    pub fn get_total_aggregation_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TotalAggregationOption>> {
        &self.total_aggregation_options
    }
    /// Consumes the builder and constructs a [`TotalOptions`](crate::types::TotalOptions).
    pub fn build(self) -> crate::types::TotalOptions {
        crate::types::TotalOptions {
            totals_visibility: self.totals_visibility,
            placement: self.placement,
            scroll_status: self.scroll_status,
            custom_label: self.custom_label,
            total_cell_style: self.total_cell_style,
            total_aggregation_options: self.total_aggregation_options,
        }
    }
}
