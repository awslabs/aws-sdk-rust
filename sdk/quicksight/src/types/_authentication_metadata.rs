// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Union type containing authentication metadata for different authentication methods.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AuthenticationMetadata {
    /// <p>API key authentication metadata.</p>
    ApiKeyConnectionMetadata(crate::types::ApiKeyConnectionMetadata),
    /// <p>OAuth 2.0 authorization code grant authentication metadata.</p>
    AuthorizationCodeGrantMetadata(crate::types::AuthorizationCodeGrantMetadata),
    /// <p>Basic authentication metadata using username and password.</p>
    BasicAuthConnectionMetadata(crate::types::BasicAuthConnectionMetadata),
    /// <p>OAuth 2.0 client credentials grant authentication metadata.</p>
    ClientCredentialsGrantMetadata(crate::types::ClientCredentialsGrantMetadata),
    /// <p>IAM role-based authentication metadata for Amazon Web Services services.</p>
    IamConnectionMetadata(crate::types::IamConnectionMetadata),
    /// <p>No authentication metadata for services that don't require authentication.</p>
    NoneConnectionMetadata(crate::types::NoneConnectionMetadata),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AuthenticationMetadata {
    /// Tries to convert the enum instance into [`ApiKeyConnectionMetadata`](crate::types::AuthenticationMetadata::ApiKeyConnectionMetadata), extracting the inner [`ApiKeyConnectionMetadata`](crate::types::ApiKeyConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_api_key_connection_metadata(&self) -> ::std::result::Result<&crate::types::ApiKeyConnectionMetadata, &Self> {
        if let AuthenticationMetadata::ApiKeyConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ApiKeyConnectionMetadata`](crate::types::AuthenticationMetadata::ApiKeyConnectionMetadata).
    pub fn is_api_key_connection_metadata(&self) -> bool {
        self.as_api_key_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`AuthorizationCodeGrantMetadata`](crate::types::AuthenticationMetadata::AuthorizationCodeGrantMetadata), extracting the inner [`AuthorizationCodeGrantMetadata`](crate::types::AuthorizationCodeGrantMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_authorization_code_grant_metadata(&self) -> ::std::result::Result<&crate::types::AuthorizationCodeGrantMetadata, &Self> {
        if let AuthenticationMetadata::AuthorizationCodeGrantMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AuthorizationCodeGrantMetadata`](crate::types::AuthenticationMetadata::AuthorizationCodeGrantMetadata).
    pub fn is_authorization_code_grant_metadata(&self) -> bool {
        self.as_authorization_code_grant_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`BasicAuthConnectionMetadata`](crate::types::AuthenticationMetadata::BasicAuthConnectionMetadata), extracting the inner [`BasicAuthConnectionMetadata`](crate::types::BasicAuthConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_basic_auth_connection_metadata(&self) -> ::std::result::Result<&crate::types::BasicAuthConnectionMetadata, &Self> {
        if let AuthenticationMetadata::BasicAuthConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BasicAuthConnectionMetadata`](crate::types::AuthenticationMetadata::BasicAuthConnectionMetadata).
    pub fn is_basic_auth_connection_metadata(&self) -> bool {
        self.as_basic_auth_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`ClientCredentialsGrantMetadata`](crate::types::AuthenticationMetadata::ClientCredentialsGrantMetadata), extracting the inner [`ClientCredentialsGrantMetadata`](crate::types::ClientCredentialsGrantMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_client_credentials_grant_metadata(&self) -> ::std::result::Result<&crate::types::ClientCredentialsGrantMetadata, &Self> {
        if let AuthenticationMetadata::ClientCredentialsGrantMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ClientCredentialsGrantMetadata`](crate::types::AuthenticationMetadata::ClientCredentialsGrantMetadata).
    pub fn is_client_credentials_grant_metadata(&self) -> bool {
        self.as_client_credentials_grant_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`IamConnectionMetadata`](crate::types::AuthenticationMetadata::IamConnectionMetadata), extracting the inner [`IamConnectionMetadata`](crate::types::IamConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iam_connection_metadata(&self) -> ::std::result::Result<&crate::types::IamConnectionMetadata, &Self> {
        if let AuthenticationMetadata::IamConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IamConnectionMetadata`](crate::types::AuthenticationMetadata::IamConnectionMetadata).
    pub fn is_iam_connection_metadata(&self) -> bool {
        self.as_iam_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`NoneConnectionMetadata`](crate::types::AuthenticationMetadata::NoneConnectionMetadata), extracting the inner [`NoneConnectionMetadata`](crate::types::NoneConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_none_connection_metadata(&self) -> ::std::result::Result<&crate::types::NoneConnectionMetadata, &Self> {
        if let AuthenticationMetadata::NoneConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NoneConnectionMetadata`](crate::types::AuthenticationMetadata::NoneConnectionMetadata).
    pub fn is_none_connection_metadata(&self) -> bool {
        self.as_none_connection_metadata().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
