// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for an axis with a numeric field.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NumericAxisOptions {
    /// <p>The scale setup of a numeric axis.</p>
    #[doc(hidden)]
    pub scale: std::option::Option<crate::types::AxisScale>,
    /// <p>The range setup of a numeric axis.</p>
    #[doc(hidden)]
    pub range: std::option::Option<crate::types::AxisDisplayRange>,
}
impl NumericAxisOptions {
    /// <p>The scale setup of a numeric axis.</p>
    pub fn scale(&self) -> std::option::Option<&crate::types::AxisScale> {
        self.scale.as_ref()
    }
    /// <p>The range setup of a numeric axis.</p>
    pub fn range(&self) -> std::option::Option<&crate::types::AxisDisplayRange> {
        self.range.as_ref()
    }
}
impl NumericAxisOptions {
    /// Creates a new builder-style object to manufacture [`NumericAxisOptions`](crate::types::NumericAxisOptions).
    pub fn builder() -> crate::types::builders::NumericAxisOptionsBuilder {
        crate::types::builders::NumericAxisOptionsBuilder::default()
    }
}

/// A builder for [`NumericAxisOptions`](crate::types::NumericAxisOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NumericAxisOptionsBuilder {
    pub(crate) scale: std::option::Option<crate::types::AxisScale>,
    pub(crate) range: std::option::Option<crate::types::AxisDisplayRange>,
}
impl NumericAxisOptionsBuilder {
    /// <p>The scale setup of a numeric axis.</p>
    pub fn scale(mut self, input: crate::types::AxisScale) -> Self {
        self.scale = Some(input);
        self
    }
    /// <p>The scale setup of a numeric axis.</p>
    pub fn set_scale(mut self, input: std::option::Option<crate::types::AxisScale>) -> Self {
        self.scale = input;
        self
    }
    /// <p>The range setup of a numeric axis.</p>
    pub fn range(mut self, input: crate::types::AxisDisplayRange) -> Self {
        self.range = Some(input);
        self
    }
    /// <p>The range setup of a numeric axis.</p>
    pub fn set_range(mut self, input: std::option::Option<crate::types::AxisDisplayRange>) -> Self {
        self.range = input;
        self
    }
    /// Consumes the builder and constructs a [`NumericAxisOptions`](crate::types::NumericAxisOptions).
    pub fn build(self) -> crate::types::NumericAxisOptions {
        crate::types::NumericAxisOptions {
            scale: self.scale,
            range: self.range,
        }
    }
}
