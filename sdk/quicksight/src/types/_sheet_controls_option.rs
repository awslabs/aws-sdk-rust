// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sheet controls option.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SheetControlsOption {
    /// <p>Visibility state.</p>
    #[doc(hidden)]
    pub visibility_state: std::option::Option<crate::types::DashboardUiState>,
}
impl SheetControlsOption {
    /// <p>Visibility state.</p>
    pub fn visibility_state(&self) -> std::option::Option<&crate::types::DashboardUiState> {
        self.visibility_state.as_ref()
    }
}
impl SheetControlsOption {
    /// Creates a new builder-style object to manufacture [`SheetControlsOption`](crate::types::SheetControlsOption).
    pub fn builder() -> crate::types::builders::SheetControlsOptionBuilder {
        crate::types::builders::SheetControlsOptionBuilder::default()
    }
}

/// A builder for [`SheetControlsOption`](crate::types::SheetControlsOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SheetControlsOptionBuilder {
    pub(crate) visibility_state: std::option::Option<crate::types::DashboardUiState>,
}
impl SheetControlsOptionBuilder {
    /// <p>Visibility state.</p>
    pub fn visibility_state(mut self, input: crate::types::DashboardUiState) -> Self {
        self.visibility_state = Some(input);
        self
    }
    /// <p>Visibility state.</p>
    pub fn set_visibility_state(
        mut self,
        input: std::option::Option<crate::types::DashboardUiState>,
    ) -> Self {
        self.visibility_state = input;
        self
    }
    /// Consumes the builder and constructs a [`SheetControlsOption`](crate::types::SheetControlsOption).
    pub fn build(self) -> crate::types::SheetControlsOption {
        crate::types::SheetControlsOption {
            visibility_state: self.visibility_state,
        }
    }
}
