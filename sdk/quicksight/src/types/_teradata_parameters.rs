// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for Teradata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TeradataParameters {
    /// <p>Host.</p>
    pub host: ::std::string::String,
    /// <p>Port.</p>
    pub port: i32,
    /// <p>Database.</p>
    pub database: ::std::string::String,
}
impl TeradataParameters {
    /// <p>Host.</p>
    pub fn host(&self) -> &str {
        use std::ops::Deref;
        self.host.deref()
    }
    /// <p>Port.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>Database.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
}
impl TeradataParameters {
    /// Creates a new builder-style object to manufacture [`TeradataParameters`](crate::types::TeradataParameters).
    pub fn builder() -> crate::types::builders::TeradataParametersBuilder {
        crate::types::builders::TeradataParametersBuilder::default()
    }
}

/// A builder for [`TeradataParameters`](crate::types::TeradataParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TeradataParametersBuilder {
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
}
impl TeradataParametersBuilder {
    /// <p>Host.</p>
    /// This field is required.
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Host.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>Host.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>Port.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>Port.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Port.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>Database.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Database.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>Database.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// Consumes the builder and constructs a [`TeradataParameters`](crate::types::TeradataParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`host`](crate::types::builders::TeradataParametersBuilder::host)
    /// - [`port`](crate::types::builders::TeradataParametersBuilder::port)
    /// - [`database`](crate::types::builders::TeradataParametersBuilder::database)
    pub fn build(self) -> ::std::result::Result<crate::types::TeradataParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TeradataParameters {
            host: self.host.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host",
                    "host was not specified but it is required when building TeradataParameters",
                )
            })?,
            port: self.port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port",
                    "port was not specified but it is required when building TeradataParameters",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building TeradataParameters",
                )
            })?,
        })
    }
}
