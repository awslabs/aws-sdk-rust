// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldFolder {
    /// <p>The description for a field folder.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A folder has a list of columns. A column can only be in one folder.</p>
    pub columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FieldFolder {
    /// <p>The description for a field folder.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A folder has a list of columns. A column can only be in one folder.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns.is_none()`.
    pub fn columns(&self) -> &[::std::string::String] {
        self.columns.as_deref().unwrap_or_default()
    }
}
impl FieldFolder {
    /// Creates a new builder-style object to manufacture [`FieldFolder`](crate::types::FieldFolder).
    pub fn builder() -> crate::types::builders::FieldFolderBuilder {
        crate::types::builders::FieldFolderBuilder::default()
    }
}

/// A builder for [`FieldFolder`](crate::types::FieldFolder).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FieldFolderBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FieldFolderBuilder {
    /// <p>The description for a field folder.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for a field folder.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for a field folder.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>A folder has a list of columns. A column can only be in one folder.</p>
    pub fn columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input.into());
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A folder has a list of columns. A column can only be in one folder.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>A folder has a list of columns. A column can only be in one folder.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.columns
    }
    /// Consumes the builder and constructs a [`FieldFolder`](crate::types::FieldFolder).
    pub fn build(self) -> crate::types::FieldFolder {
        crate::types::FieldFolder {
            description: self.description,
            columns: self.columns,
        }
    }
}
