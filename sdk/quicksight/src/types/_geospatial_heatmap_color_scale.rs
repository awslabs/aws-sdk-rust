// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color scale specification for the heatmap point style.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialHeatmapColorScale {
    /// <p>The list of colors to be used in heatmap point style.</p>
    pub colors: ::std::option::Option<::std::vec::Vec<crate::types::GeospatialHeatmapDataColor>>,
}
impl GeospatialHeatmapColorScale {
    /// <p>The list of colors to be used in heatmap point style.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.colors.is_none()`.
    pub fn colors(&self) -> &[crate::types::GeospatialHeatmapDataColor] {
        self.colors.as_deref().unwrap_or_default()
    }
}
impl GeospatialHeatmapColorScale {
    /// Creates a new builder-style object to manufacture [`GeospatialHeatmapColorScale`](crate::types::GeospatialHeatmapColorScale).
    pub fn builder() -> crate::types::builders::GeospatialHeatmapColorScaleBuilder {
        crate::types::builders::GeospatialHeatmapColorScaleBuilder::default()
    }
}

/// A builder for [`GeospatialHeatmapColorScale`](crate::types::GeospatialHeatmapColorScale).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeospatialHeatmapColorScaleBuilder {
    pub(crate) colors: ::std::option::Option<::std::vec::Vec<crate::types::GeospatialHeatmapDataColor>>,
}
impl GeospatialHeatmapColorScaleBuilder {
    /// Appends an item to `colors`.
    ///
    /// To override the contents of this collection use [`set_colors`](Self::set_colors).
    ///
    /// <p>The list of colors to be used in heatmap point style.</p>
    pub fn colors(mut self, input: crate::types::GeospatialHeatmapDataColor) -> Self {
        let mut v = self.colors.unwrap_or_default();
        v.push(input);
        self.colors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of colors to be used in heatmap point style.</p>
    pub fn set_colors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GeospatialHeatmapDataColor>>) -> Self {
        self.colors = input;
        self
    }
    /// <p>The list of colors to be used in heatmap point style.</p>
    pub fn get_colors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GeospatialHeatmapDataColor>> {
        &self.colors
    }
    /// Consumes the builder and constructs a [`GeospatialHeatmapColorScale`](crate::types::GeospatialHeatmapColorScale).
    pub fn build(self) -> crate::types::GeospatialHeatmapColorScale {
        crate::types::GeospatialHeatmapColorScale { colors: self.colors }
    }
}
