// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about the <code>QDataKey</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QDataKey {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use as a <code>QDataKey</code>.</p>
    pub q_data_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of <code>QDataKey</code>.</p>
    pub q_data_key_type: ::std::option::Option<crate::types::QDataKeyType>,
}
impl QDataKey {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use as a <code>QDataKey</code>.</p>
    pub fn q_data_key_arn(&self) -> ::std::option::Option<&str> {
        self.q_data_key_arn.as_deref()
    }
    /// <p>The type of <code>QDataKey</code>.</p>
    pub fn q_data_key_type(&self) -> ::std::option::Option<&crate::types::QDataKeyType> {
        self.q_data_key_type.as_ref()
    }
}
impl QDataKey {
    /// Creates a new builder-style object to manufacture [`QDataKey`](crate::types::QDataKey).
    pub fn builder() -> crate::types::builders::QDataKeyBuilder {
        crate::types::builders::QDataKeyBuilder::default()
    }
}

/// A builder for [`QDataKey`](crate::types::QDataKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QDataKeyBuilder {
    pub(crate) q_data_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) q_data_key_type: ::std::option::Option<crate::types::QDataKeyType>,
}
impl QDataKeyBuilder {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use as a <code>QDataKey</code>.</p>
    pub fn q_data_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.q_data_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use as a <code>QDataKey</code>.</p>
    pub fn set_q_data_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.q_data_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use as a <code>QDataKey</code>.</p>
    pub fn get_q_data_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.q_data_key_arn
    }
    /// <p>The type of <code>QDataKey</code>.</p>
    pub fn q_data_key_type(mut self, input: crate::types::QDataKeyType) -> Self {
        self.q_data_key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of <code>QDataKey</code>.</p>
    pub fn set_q_data_key_type(mut self, input: ::std::option::Option<crate::types::QDataKeyType>) -> Self {
        self.q_data_key_type = input;
        self
    }
    /// <p>The type of <code>QDataKey</code>.</p>
    pub fn get_q_data_key_type(&self) -> &::std::option::Option<crate::types::QDataKeyType> {
        &self.q_data_key_type
    }
    /// Consumes the builder and constructs a [`QDataKey`](crate::types::QDataKey).
    pub fn build(self) -> crate::types::QDataKey {
        crate::types::QDataKey {
            q_data_key_arn: self.q_data_key_arn,
            q_data_key_type: self.q_data_key_type,
        }
    }
}
