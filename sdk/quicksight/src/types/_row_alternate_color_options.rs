// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the row alternate color options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RowAlternateColorOptions {
    /// <p>Determines the widget status.</p>
    pub status: ::std::option::Option<crate::types::WidgetStatus>,
    /// <p>Determines the list of row alternate colors.</p>
    pub row_alternate_colors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The primary background color options for alternate rows.</p>
    pub use_primary_background_color: ::std::option::Option<crate::types::WidgetStatus>,
}
impl RowAlternateColorOptions {
    /// <p>Determines the widget status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WidgetStatus> {
        self.status.as_ref()
    }
    /// <p>Determines the list of row alternate colors.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.row_alternate_colors.is_none()`.
    pub fn row_alternate_colors(&self) -> &[::std::string::String] {
        self.row_alternate_colors.as_deref().unwrap_or_default()
    }
    /// <p>The primary background color options for alternate rows.</p>
    pub fn use_primary_background_color(&self) -> ::std::option::Option<&crate::types::WidgetStatus> {
        self.use_primary_background_color.as_ref()
    }
}
impl RowAlternateColorOptions {
    /// Creates a new builder-style object to manufacture [`RowAlternateColorOptions`](crate::types::RowAlternateColorOptions).
    pub fn builder() -> crate::types::builders::RowAlternateColorOptionsBuilder {
        crate::types::builders::RowAlternateColorOptionsBuilder::default()
    }
}

/// A builder for [`RowAlternateColorOptions`](crate::types::RowAlternateColorOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RowAlternateColorOptionsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::WidgetStatus>,
    pub(crate) row_alternate_colors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) use_primary_background_color: ::std::option::Option<crate::types::WidgetStatus>,
}
impl RowAlternateColorOptionsBuilder {
    /// <p>Determines the widget status.</p>
    pub fn status(mut self, input: crate::types::WidgetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the widget status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WidgetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Determines the widget status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WidgetStatus> {
        &self.status
    }
    /// Appends an item to `row_alternate_colors`.
    ///
    /// To override the contents of this collection use [`set_row_alternate_colors`](Self::set_row_alternate_colors).
    ///
    /// <p>Determines the list of row alternate colors.</p>
    pub fn row_alternate_colors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.row_alternate_colors.unwrap_or_default();
        v.push(input.into());
        self.row_alternate_colors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Determines the list of row alternate colors.</p>
    pub fn set_row_alternate_colors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.row_alternate_colors = input;
        self
    }
    /// <p>Determines the list of row alternate colors.</p>
    pub fn get_row_alternate_colors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.row_alternate_colors
    }
    /// <p>The primary background color options for alternate rows.</p>
    pub fn use_primary_background_color(mut self, input: crate::types::WidgetStatus) -> Self {
        self.use_primary_background_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The primary background color options for alternate rows.</p>
    pub fn set_use_primary_background_color(mut self, input: ::std::option::Option<crate::types::WidgetStatus>) -> Self {
        self.use_primary_background_color = input;
        self
    }
    /// <p>The primary background color options for alternate rows.</p>
    pub fn get_use_primary_background_color(&self) -> &::std::option::Option<crate::types::WidgetStatus> {
        &self.use_primary_background_color
    }
    /// Consumes the builder and constructs a [`RowAlternateColorOptions`](crate::types::RowAlternateColorOptions).
    pub fn build(self) -> crate::types::RowAlternateColorOptions {
        crate::types::RowAlternateColorOptions {
            status: self.status,
            row_alternate_colors: self.row_alternate_colors,
            use_primary_background_color: self.use_primary_background_color,
        }
    }
}
