// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of filter configurations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterListConfiguration {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    #[doc(hidden)]
    pub match_operator: std::option::Option<crate::types::CategoryFilterMatchOperator>,
    /// <p>The list of category values for the filter.</p>
    #[doc(hidden)]
    pub category_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub select_all_options: std::option::Option<crate::types::CategoryFilterSelectAllOptions>,
}
impl FilterListConfiguration {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn match_operator(
        &self,
    ) -> std::option::Option<&crate::types::CategoryFilterMatchOperator> {
        self.match_operator.as_ref()
    }
    /// <p>The list of category values for the filter.</p>
    pub fn category_values(&self) -> std::option::Option<&[std::string::String]> {
        self.category_values.as_deref()
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn select_all_options(
        &self,
    ) -> std::option::Option<&crate::types::CategoryFilterSelectAllOptions> {
        self.select_all_options.as_ref()
    }
}
impl FilterListConfiguration {
    /// Creates a new builder-style object to manufacture [`FilterListConfiguration`](crate::types::FilterListConfiguration).
    pub fn builder() -> crate::types::builders::FilterListConfigurationBuilder {
        crate::types::builders::FilterListConfigurationBuilder::default()
    }
}

/// A builder for [`FilterListConfiguration`](crate::types::FilterListConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterListConfigurationBuilder {
    pub(crate) match_operator: std::option::Option<crate::types::CategoryFilterMatchOperator>,
    pub(crate) category_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) select_all_options:
        std::option::Option<crate::types::CategoryFilterSelectAllOptions>,
}
impl FilterListConfigurationBuilder {
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn match_operator(mut self, input: crate::types::CategoryFilterMatchOperator) -> Self {
        self.match_operator = Some(input);
        self
    }
    /// <p>The match operator that is used to determine if a filter should be applied.</p>
    pub fn set_match_operator(
        mut self,
        input: std::option::Option<crate::types::CategoryFilterMatchOperator>,
    ) -> Self {
        self.match_operator = input;
        self
    }
    /// Appends an item to `category_values`.
    ///
    /// To override the contents of this collection use [`set_category_values`](Self::set_category_values).
    ///
    /// <p>The list of category values for the filter.</p>
    pub fn category_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.category_values.unwrap_or_default();
        v.push(input.into());
        self.category_values = Some(v);
        self
    }
    /// <p>The list of category values for the filter.</p>
    pub fn set_category_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.category_values = input;
        self
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn select_all_options(
        mut self,
        input: crate::types::CategoryFilterSelectAllOptions,
    ) -> Self {
        self.select_all_options = Some(input);
        self
    }
    /// <p>Select all of the values. Null is not the assigned value of select all.</p>
    /// <ul>
    /// <li> <p> <code>FILTER_ALL_VALUES</code> </p> </li>
    /// </ul>
    pub fn set_select_all_options(
        mut self,
        input: std::option::Option<crate::types::CategoryFilterSelectAllOptions>,
    ) -> Self {
        self.select_all_options = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterListConfiguration`](crate::types::FilterListConfiguration).
    pub fn build(self) -> crate::types::FilterListConfiguration {
        crate::types::FilterListConfiguration {
            match_operator: self.match_operator,
            category_values: self.category_values,
            select_all_options: self.select_all_options,
        }
    }
}
