// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ExceptionResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let exceptionresourcetype = unimplemented!();
/// match exceptionresourcetype {
///     ExceptionResourceType::AccountSettings => { /* ... */ },
///     ExceptionResourceType::DataSet => { /* ... */ },
///     ExceptionResourceType::DataSource => { /* ... */ },
///     ExceptionResourceType::Group => { /* ... */ },
///     ExceptionResourceType::IampolicyAssignment => { /* ... */ },
///     ExceptionResourceType::Ingestion => { /* ... */ },
///     ExceptionResourceType::Namespace => { /* ... */ },
///     ExceptionResourceType::User => { /* ... */ },
///     ExceptionResourceType::VpcConnection => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `exceptionresourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ExceptionResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ExceptionResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ExceptionResourceType::NewFeature` is defined.
/// Specifically, when `exceptionresourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ExceptionResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ExceptionResourceType {
    #[allow(missing_docs)] // documentation missing in model
    AccountSettings,
    #[allow(missing_docs)] // documentation missing in model
    DataSet,
    #[allow(missing_docs)] // documentation missing in model
    DataSource,
    #[allow(missing_docs)] // documentation missing in model
    Group,
    #[allow(missing_docs)] // documentation missing in model
    IampolicyAssignment,
    #[allow(missing_docs)] // documentation missing in model
    Ingestion,
    #[allow(missing_docs)] // documentation missing in model
    Namespace,
    #[allow(missing_docs)] // documentation missing in model
    User,
    #[allow(missing_docs)] // documentation missing in model
    VpcConnection,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ExceptionResourceType {
    fn from(s: &str) -> Self {
        match s {
            "ACCOUNT_SETTINGS" => ExceptionResourceType::AccountSettings,
            "DATA_SET" => ExceptionResourceType::DataSet,
            "DATA_SOURCE" => ExceptionResourceType::DataSource,
            "GROUP" => ExceptionResourceType::Group,
            "IAMPOLICY_ASSIGNMENT" => ExceptionResourceType::IampolicyAssignment,
            "INGESTION" => ExceptionResourceType::Ingestion,
            "NAMESPACE" => ExceptionResourceType::Namespace,
            "USER" => ExceptionResourceType::User,
            "VPC_CONNECTION" => ExceptionResourceType::VpcConnection,
            other => ExceptionResourceType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ExceptionResourceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ExceptionResourceType::from(s))
    }
}
impl ExceptionResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ExceptionResourceType::AccountSettings => "ACCOUNT_SETTINGS",
            ExceptionResourceType::DataSet => "DATA_SET",
            ExceptionResourceType::DataSource => "DATA_SOURCE",
            ExceptionResourceType::Group => "GROUP",
            ExceptionResourceType::IampolicyAssignment => "IAMPOLICY_ASSIGNMENT",
            ExceptionResourceType::Ingestion => "INGESTION",
            ExceptionResourceType::Namespace => "NAMESPACE",
            ExceptionResourceType::User => "USER",
            ExceptionResourceType::VpcConnection => "VPC_CONNECTION",
            ExceptionResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_SETTINGS",
            "DATA_SET",
            "DATA_SOURCE",
            "GROUP",
            "IAMPOLICY_ASSIGNMENT",
            "INGESTION",
            "NAMESPACE",
            "USER",
            "VPC_CONNECTION",
        ]
    }
}
impl AsRef<str> for ExceptionResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
