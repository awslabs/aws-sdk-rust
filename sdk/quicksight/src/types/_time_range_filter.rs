// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>TimeRangeFilter</code> filters values that are between two specified values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeRangeFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    #[doc(hidden)]
    pub filter_id: std::option::Option<std::string::String>,
    /// <p>The column that the filter is applied to.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>Determines whether the minimum value in the filter value range should be included in the filtered results.</p>
    #[doc(hidden)]
    pub include_minimum: std::option::Option<bool>,
    /// <p>Determines whether the maximum value in the filter value range should be included in the filtered results.</p>
    #[doc(hidden)]
    pub include_maximum: std::option::Option<bool>,
    /// <p>The minimum value for the filter value range.</p>
    #[doc(hidden)]
    pub range_minimum_value: std::option::Option<crate::types::TimeRangeFilterValue>,
    /// <p>The maximum value for the filter value range.</p>
    #[doc(hidden)]
    pub range_maximum_value: std::option::Option<crate::types::TimeRangeFilterValue>,
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub null_option: std::option::Option<crate::types::FilterNullOption>,
    /// <p>The exclude period of the time range filter.</p>
    #[doc(hidden)]
    pub exclude_period_configuration: std::option::Option<crate::types::ExcludePeriodConfiguration>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    #[doc(hidden)]
    pub time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeRangeFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> std::option::Option<&str> {
        self.filter_id.as_deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>Determines whether the minimum value in the filter value range should be included in the filtered results.</p>
    pub fn include_minimum(&self) -> std::option::Option<bool> {
        self.include_minimum
    }
    /// <p>Determines whether the maximum value in the filter value range should be included in the filtered results.</p>
    pub fn include_maximum(&self) -> std::option::Option<bool> {
        self.include_maximum
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn range_minimum_value(&self) -> std::option::Option<&crate::types::TimeRangeFilterValue> {
        self.range_minimum_value.as_ref()
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn range_maximum_value(&self) -> std::option::Option<&crate::types::TimeRangeFilterValue> {
        self.range_maximum_value.as_ref()
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn null_option(&self) -> std::option::Option<&crate::types::FilterNullOption> {
        self.null_option.as_ref()
    }
    /// <p>The exclude period of the time range filter.</p>
    pub fn exclude_period_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ExcludePeriodConfiguration> {
        self.exclude_period_configuration.as_ref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
}
impl TimeRangeFilter {
    /// Creates a new builder-style object to manufacture [`TimeRangeFilter`](crate::types::TimeRangeFilter).
    pub fn builder() -> crate::types::builders::TimeRangeFilterBuilder {
        crate::types::builders::TimeRangeFilterBuilder::default()
    }
}

/// A builder for [`TimeRangeFilter`](crate::types::TimeRangeFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeRangeFilterBuilder {
    pub(crate) filter_id: std::option::Option<std::string::String>,
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) include_minimum: std::option::Option<bool>,
    pub(crate) include_maximum: std::option::Option<bool>,
    pub(crate) range_minimum_value: std::option::Option<crate::types::TimeRangeFilterValue>,
    pub(crate) range_maximum_value: std::option::Option<crate::types::TimeRangeFilterValue>,
    pub(crate) null_option: std::option::Option<crate::types::FilterNullOption>,
    pub(crate) exclude_period_configuration:
        std::option::Option<crate::types::ExcludePeriodConfiguration>,
    pub(crate) time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeRangeFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_id = Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>Determines whether the minimum value in the filter value range should be included in the filtered results.</p>
    pub fn include_minimum(mut self, input: bool) -> Self {
        self.include_minimum = Some(input);
        self
    }
    /// <p>Determines whether the minimum value in the filter value range should be included in the filtered results.</p>
    pub fn set_include_minimum(mut self, input: std::option::Option<bool>) -> Self {
        self.include_minimum = input;
        self
    }
    /// <p>Determines whether the maximum value in the filter value range should be included in the filtered results.</p>
    pub fn include_maximum(mut self, input: bool) -> Self {
        self.include_maximum = Some(input);
        self
    }
    /// <p>Determines whether the maximum value in the filter value range should be included in the filtered results.</p>
    pub fn set_include_maximum(mut self, input: std::option::Option<bool>) -> Self {
        self.include_maximum = input;
        self
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn range_minimum_value(mut self, input: crate::types::TimeRangeFilterValue) -> Self {
        self.range_minimum_value = Some(input);
        self
    }
    /// <p>The minimum value for the filter value range.</p>
    pub fn set_range_minimum_value(
        mut self,
        input: std::option::Option<crate::types::TimeRangeFilterValue>,
    ) -> Self {
        self.range_minimum_value = input;
        self
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn range_maximum_value(mut self, input: crate::types::TimeRangeFilterValue) -> Self {
        self.range_maximum_value = Some(input);
        self
    }
    /// <p>The maximum value for the filter value range.</p>
    pub fn set_range_maximum_value(
        mut self,
        input: std::option::Option<crate::types::TimeRangeFilterValue>,
    ) -> Self {
        self.range_maximum_value = input;
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn null_option(mut self, input: crate::types::FilterNullOption) -> Self {
        self.null_option = Some(input);
        self
    }
    /// <p>This option determines how null values should be treated when filtering data.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VALUES</code>: Include null values in filtered results.</p> </li>
    /// <li> <p> <code>NULLS_ONLY</code>: Only include null values in filtered results.</p> </li>
    /// <li> <p> <code>NON_NULLS_ONLY</code>: Exclude null values from filtered results.</p> </li>
    /// </ul>
    pub fn set_null_option(
        mut self,
        input: std::option::Option<crate::types::FilterNullOption>,
    ) -> Self {
        self.null_option = input;
        self
    }
    /// <p>The exclude period of the time range filter.</p>
    pub fn exclude_period_configuration(
        mut self,
        input: crate::types::ExcludePeriodConfiguration,
    ) -> Self {
        self.exclude_period_configuration = Some(input);
        self
    }
    /// <p>The exclude period of the time range filter.</p>
    pub fn set_exclude_period_configuration(
        mut self,
        input: std::option::Option<crate::types::ExcludePeriodConfiguration>,
    ) -> Self {
        self.exclude_period_configuration = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(
        mut self,
        input: std::option::Option<crate::types::TimeGranularity>,
    ) -> Self {
        self.time_granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeRangeFilter`](crate::types::TimeRangeFilter).
    pub fn build(self) -> crate::types::TimeRangeFilter {
        crate::types::TimeRangeFilter {
            filter_id: self.filter_id,
            column: self.column,
            include_minimum: self.include_minimum,
            include_maximum: self.include_maximum,
            range_minimum_value: self.range_minimum_value,
            range_maximum_value: self.range_maximum_value,
            null_option: self.null_option,
            exclude_period_configuration: self.exclude_period_configuration,
            time_granularity: self.time_granularity,
        }
    }
}
