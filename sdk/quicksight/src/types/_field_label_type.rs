// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field label type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldLabelType {
    /// <p>Indicates the field that is targeted by the field label.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
    /// <p>The visibility of the field label.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
}
impl FieldLabelType {
    /// <p>Indicates the field that is targeted by the field label.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>The visibility of the field label.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl FieldLabelType {
    /// Creates a new builder-style object to manufacture [`FieldLabelType`](crate::types::FieldLabelType).
    pub fn builder() -> crate::types::builders::FieldLabelTypeBuilder {
        crate::types::builders::FieldLabelTypeBuilder::default()
    }
}

/// A builder for [`FieldLabelType`](crate::types::FieldLabelType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldLabelTypeBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
}
impl FieldLabelTypeBuilder {
    /// <p>Indicates the field that is targeted by the field label.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>Indicates the field that is targeted by the field label.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The visibility of the field label.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>The visibility of the field label.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldLabelType`](crate::types::FieldLabelType).
    pub fn build(self) -> crate::types::FieldLabelType {
        crate::types::FieldLabelType {
            field_id: self.field_id,
            visibility: self.visibility,
        }
    }
}
