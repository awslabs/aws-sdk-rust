// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A sheet is an object that contains a set of visuals that are viewed together on one page in a paginated report. Every analysis and dashboard must contain at least one sheet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetDefinition {
    /// <p>The unique identifier of a sheet.</p>
    pub sheet_id: ::std::string::String,
    /// <p>The title of the sheet.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>A description of the sheet.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The list of parameter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html">Using a Control with a Parameter in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub parameter_controls: ::std::option::Option<::std::vec::Vec<crate::types::ParameterControl>>,
    /// <p>The list of filter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html">Adding filter controls to analysis sheets</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub filter_controls: ::std::option::Option<::std::vec::Vec<crate::types::FilterControl>>,
    /// <p>A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.</p>
    pub visuals: ::std::option::Option<::std::vec::Vec<crate::types::Visual>>,
    /// <p>The text boxes that are on a sheet.</p>
    pub text_boxes: ::std::option::Option<::std::vec::Vec<crate::types::SheetTextBox>>,
    /// <p>Layouts define how the components of a sheet are arranged.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub layouts: ::std::option::Option<::std::vec::Vec<crate::types::Layout>>,
    /// <p>The control layouts of the sheet.</p>
    pub sheet_control_layouts: ::std::option::Option<::std::vec::Vec<crate::types::SheetControlLayout>>,
    /// <p>The layout content type of the sheet. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>PAGINATED</code>: Creates a sheet for a paginated report.</p> </li>
    /// <li> <p> <code>INTERACTIVE</code>: Creates a sheet for an interactive dashboard.</p> </li>
    /// </ul>
    pub content_type: ::std::option::Option<crate::types::SheetContentType>,
}
impl SheetDefinition {
    /// <p>The unique identifier of a sheet.</p>
    pub fn sheet_id(&self) -> &str {
        use std::ops::Deref;
        self.sheet_id.deref()
    }
    /// <p>The title of the sheet.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>A description of the sheet.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of parameter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html">Using a Control with a Parameter in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameter_controls.is_none()`.
    pub fn parameter_controls(&self) -> &[crate::types::ParameterControl] {
        self.parameter_controls.as_deref().unwrap_or_default()
    }
    /// <p>The list of filter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html">Adding filter controls to analysis sheets</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_controls.is_none()`.
    pub fn filter_controls(&self) -> &[crate::types::FilterControl] {
        self.filter_controls.as_deref().unwrap_or_default()
    }
    /// <p>A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.visuals.is_none()`.
    pub fn visuals(&self) -> &[crate::types::Visual] {
        self.visuals.as_deref().unwrap_or_default()
    }
    /// <p>The text boxes that are on a sheet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.text_boxes.is_none()`.
    pub fn text_boxes(&self) -> &[crate::types::SheetTextBox] {
        self.text_boxes.as_deref().unwrap_or_default()
    }
    /// <p>Layouts define how the components of a sheet are arranged.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.layouts.is_none()`.
    pub fn layouts(&self) -> &[crate::types::Layout] {
        self.layouts.as_deref().unwrap_or_default()
    }
    /// <p>The control layouts of the sheet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sheet_control_layouts.is_none()`.
    pub fn sheet_control_layouts(&self) -> &[crate::types::SheetControlLayout] {
        self.sheet_control_layouts.as_deref().unwrap_or_default()
    }
    /// <p>The layout content type of the sheet. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>PAGINATED</code>: Creates a sheet for a paginated report.</p> </li>
    /// <li> <p> <code>INTERACTIVE</code>: Creates a sheet for an interactive dashboard.</p> </li>
    /// </ul>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::SheetContentType> {
        self.content_type.as_ref()
    }
}
impl SheetDefinition {
    /// Creates a new builder-style object to manufacture [`SheetDefinition`](crate::types::SheetDefinition).
    pub fn builder() -> crate::types::builders::SheetDefinitionBuilder {
        crate::types::builders::SheetDefinitionBuilder::default()
    }
}

/// A builder for [`SheetDefinition`](crate::types::SheetDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SheetDefinitionBuilder {
    pub(crate) sheet_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_controls: ::std::option::Option<::std::vec::Vec<crate::types::ParameterControl>>,
    pub(crate) filter_controls: ::std::option::Option<::std::vec::Vec<crate::types::FilterControl>>,
    pub(crate) visuals: ::std::option::Option<::std::vec::Vec<crate::types::Visual>>,
    pub(crate) text_boxes: ::std::option::Option<::std::vec::Vec<crate::types::SheetTextBox>>,
    pub(crate) layouts: ::std::option::Option<::std::vec::Vec<crate::types::Layout>>,
    pub(crate) sheet_control_layouts: ::std::option::Option<::std::vec::Vec<crate::types::SheetControlLayout>>,
    pub(crate) content_type: ::std::option::Option<crate::types::SheetContentType>,
}
impl SheetDefinitionBuilder {
    /// <p>The unique identifier of a sheet.</p>
    /// This field is required.
    pub fn sheet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a sheet.</p>
    pub fn set_sheet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_id = input;
        self
    }
    /// <p>The unique identifier of a sheet.</p>
    pub fn get_sheet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_id
    }
    /// <p>The title of the sheet.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the sheet.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the sheet.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>A description of the sheet.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the sheet.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the sheet.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `parameter_controls`.
    ///
    /// To override the contents of this collection use [`set_parameter_controls`](Self::set_parameter_controls).
    ///
    /// <p>The list of parameter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html">Using a Control with a Parameter in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn parameter_controls(mut self, input: crate::types::ParameterControl) -> Self {
        let mut v = self.parameter_controls.unwrap_or_default();
        v.push(input);
        self.parameter_controls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of parameter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html">Using a Control with a Parameter in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_parameter_controls(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ParameterControl>>) -> Self {
        self.parameter_controls = input;
        self
    }
    /// <p>The list of parameter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html">Using a Control with a Parameter in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn get_parameter_controls(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ParameterControl>> {
        &self.parameter_controls
    }
    /// Appends an item to `filter_controls`.
    ///
    /// To override the contents of this collection use [`set_filter_controls`](Self::set_filter_controls).
    ///
    /// <p>The list of filter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html">Adding filter controls to analysis sheets</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn filter_controls(mut self, input: crate::types::FilterControl) -> Self {
        let mut v = self.filter_controls.unwrap_or_default();
        v.push(input);
        self.filter_controls = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html">Adding filter controls to analysis sheets</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_filter_controls(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterControl>>) -> Self {
        self.filter_controls = input;
        self
    }
    /// <p>The list of filter controls that are on a sheet.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html">Adding filter controls to analysis sheets</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn get_filter_controls(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterControl>> {
        &self.filter_controls
    }
    /// Appends an item to `visuals`.
    ///
    /// To override the contents of this collection use [`set_visuals`](Self::set_visuals).
    ///
    /// <p>A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.</p>
    pub fn visuals(mut self, input: crate::types::Visual) -> Self {
        let mut v = self.visuals.unwrap_or_default();
        v.push(input);
        self.visuals = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.</p>
    pub fn set_visuals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Visual>>) -> Self {
        self.visuals = input;
        self
    }
    /// <p>A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.</p>
    pub fn get_visuals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Visual>> {
        &self.visuals
    }
    /// Appends an item to `text_boxes`.
    ///
    /// To override the contents of this collection use [`set_text_boxes`](Self::set_text_boxes).
    ///
    /// <p>The text boxes that are on a sheet.</p>
    pub fn text_boxes(mut self, input: crate::types::SheetTextBox) -> Self {
        let mut v = self.text_boxes.unwrap_or_default();
        v.push(input);
        self.text_boxes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The text boxes that are on a sheet.</p>
    pub fn set_text_boxes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SheetTextBox>>) -> Self {
        self.text_boxes = input;
        self
    }
    /// <p>The text boxes that are on a sheet.</p>
    pub fn get_text_boxes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SheetTextBox>> {
        &self.text_boxes
    }
    /// Appends an item to `layouts`.
    ///
    /// To override the contents of this collection use [`set_layouts`](Self::set_layouts).
    ///
    /// <p>Layouts define how the components of a sheet are arranged.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn layouts(mut self, input: crate::types::Layout) -> Self {
        let mut v = self.layouts.unwrap_or_default();
        v.push(input);
        self.layouts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Layouts define how the components of a sheet are arranged.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_layouts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Layout>>) -> Self {
        self.layouts = input;
        self
    }
    /// <p>Layouts define how the components of a sheet are arranged.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn get_layouts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Layout>> {
        &self.layouts
    }
    /// Appends an item to `sheet_control_layouts`.
    ///
    /// To override the contents of this collection use [`set_sheet_control_layouts`](Self::set_sheet_control_layouts).
    ///
    /// <p>The control layouts of the sheet.</p>
    pub fn sheet_control_layouts(mut self, input: crate::types::SheetControlLayout) -> Self {
        let mut v = self.sheet_control_layouts.unwrap_or_default();
        v.push(input);
        self.sheet_control_layouts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The control layouts of the sheet.</p>
    pub fn set_sheet_control_layouts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SheetControlLayout>>) -> Self {
        self.sheet_control_layouts = input;
        self
    }
    /// <p>The control layouts of the sheet.</p>
    pub fn get_sheet_control_layouts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SheetControlLayout>> {
        &self.sheet_control_layouts
    }
    /// <p>The layout content type of the sheet. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>PAGINATED</code>: Creates a sheet for a paginated report.</p> </li>
    /// <li> <p> <code>INTERACTIVE</code>: Creates a sheet for an interactive dashboard.</p> </li>
    /// </ul>
    pub fn content_type(mut self, input: crate::types::SheetContentType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The layout content type of the sheet. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>PAGINATED</code>: Creates a sheet for a paginated report.</p> </li>
    /// <li> <p> <code>INTERACTIVE</code>: Creates a sheet for an interactive dashboard.</p> </li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::SheetContentType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The layout content type of the sheet. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>PAGINATED</code>: Creates a sheet for a paginated report.</p> </li>
    /// <li> <p> <code>INTERACTIVE</code>: Creates a sheet for an interactive dashboard.</p> </li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::SheetContentType> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`SheetDefinition`](crate::types::SheetDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`sheet_id`](crate::types::builders::SheetDefinitionBuilder::sheet_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SheetDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SheetDefinition {
            sheet_id: self.sheet_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sheet_id",
                    "sheet_id was not specified but it is required when building SheetDefinition",
                )
            })?,
            title: self.title,
            description: self.description,
            name: self.name,
            parameter_controls: self.parameter_controls,
            filter_controls: self.filter_controls,
            visuals: self.visuals,
            text_boxes: self.text_boxes,
            layouts: self.layouts,
            sheet_control_layouts: self.sheet_control_layouts,
            content_type: self.content_type,
        })
    }
}
