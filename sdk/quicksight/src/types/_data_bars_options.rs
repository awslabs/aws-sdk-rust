// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for data bars.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataBarsOptions {
    /// <p>The field ID for the data bars options.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
    /// <p>The color of the positive data bar.</p>
    #[doc(hidden)]
    pub positive_color: std::option::Option<std::string::String>,
    /// <p>The color of the negative data bar.</p>
    #[doc(hidden)]
    pub negative_color: std::option::Option<std::string::String>,
}
impl DataBarsOptions {
    /// <p>The field ID for the data bars options.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>The color of the positive data bar.</p>
    pub fn positive_color(&self) -> std::option::Option<&str> {
        self.positive_color.as_deref()
    }
    /// <p>The color of the negative data bar.</p>
    pub fn negative_color(&self) -> std::option::Option<&str> {
        self.negative_color.as_deref()
    }
}
impl DataBarsOptions {
    /// Creates a new builder-style object to manufacture [`DataBarsOptions`](crate::types::DataBarsOptions).
    pub fn builder() -> crate::types::builders::DataBarsOptionsBuilder {
        crate::types::builders::DataBarsOptionsBuilder::default()
    }
}

/// A builder for [`DataBarsOptions`](crate::types::DataBarsOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataBarsOptionsBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
    pub(crate) positive_color: std::option::Option<std::string::String>,
    pub(crate) negative_color: std::option::Option<std::string::String>,
}
impl DataBarsOptionsBuilder {
    /// <p>The field ID for the data bars options.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>The field ID for the data bars options.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The color of the positive data bar.</p>
    pub fn positive_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.positive_color = Some(input.into());
        self
    }
    /// <p>The color of the positive data bar.</p>
    pub fn set_positive_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.positive_color = input;
        self
    }
    /// <p>The color of the negative data bar.</p>
    pub fn negative_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.negative_color = Some(input.into());
        self
    }
    /// <p>The color of the negative data bar.</p>
    pub fn set_negative_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.negative_color = input;
        self
    }
    /// Consumes the builder and constructs a [`DataBarsOptions`](crate::types::DataBarsOptions).
    pub fn build(self) -> crate::types::DataBarsOptions {
        crate::types::DataBarsOptions {
            field_id: self.field_id,
            positive_color: self.positive_color,
            negative_color: self.negative_color,
        }
    }
}
