// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for data bars.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataBarsOptions {
    /// <p>The field ID for the data bars options.</p>
    pub field_id: ::std::string::String,
    /// <p>The color of the positive data bar.</p>
    pub positive_color: ::std::option::Option<::std::string::String>,
    /// <p>The color of the negative data bar.</p>
    pub negative_color: ::std::option::Option<::std::string::String>,
}
impl DataBarsOptions {
    /// <p>The field ID for the data bars options.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The color of the positive data bar.</p>
    pub fn positive_color(&self) -> ::std::option::Option<&str> {
        self.positive_color.as_deref()
    }
    /// <p>The color of the negative data bar.</p>
    pub fn negative_color(&self) -> ::std::option::Option<&str> {
        self.negative_color.as_deref()
    }
}
impl DataBarsOptions {
    /// Creates a new builder-style object to manufacture [`DataBarsOptions`](crate::types::DataBarsOptions).
    pub fn builder() -> crate::types::builders::DataBarsOptionsBuilder {
        crate::types::builders::DataBarsOptionsBuilder::default()
    }
}

/// A builder for [`DataBarsOptions`](crate::types::DataBarsOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataBarsOptionsBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) positive_color: ::std::option::Option<::std::string::String>,
    pub(crate) negative_color: ::std::option::Option<::std::string::String>,
}
impl DataBarsOptionsBuilder {
    /// <p>The field ID for the data bars options.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field ID for the data bars options.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The field ID for the data bars options.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The color of the positive data bar.</p>
    pub fn positive_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.positive_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color of the positive data bar.</p>
    pub fn set_positive_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.positive_color = input;
        self
    }
    /// <p>The color of the positive data bar.</p>
    pub fn get_positive_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.positive_color
    }
    /// <p>The color of the negative data bar.</p>
    pub fn negative_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.negative_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color of the negative data bar.</p>
    pub fn set_negative_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.negative_color = input;
        self
    }
    /// <p>The color of the negative data bar.</p>
    pub fn get_negative_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.negative_color
    }
    /// Consumes the builder and constructs a [`DataBarsOptions`](crate::types::DataBarsOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::DataBarsOptionsBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DataBarsOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataBarsOptions {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building DataBarsOptions",
                )
            })?,
            positive_color: self.positive_color,
            negative_color: self.negative_color,
        })
    }
}
