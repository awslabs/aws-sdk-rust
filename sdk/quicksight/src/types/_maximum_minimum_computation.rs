// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The maximum and minimum computation configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MaximumMinimumComputation {
    /// <p>The ID for a computation.</p>
    #[doc(hidden)]
    pub computation_id: std::option::Option<std::string::String>,
    /// <p>The name of a computation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The time field that is used in a computation.</p>
    #[doc(hidden)]
    pub time: std::option::Option<crate::types::DimensionField>,
    /// <p>The value field that is used in a computation.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::MeasureField>,
    /// <p>The type of computation. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>MAXIMUM: A maximum computation.</p> </li>
    /// <li> <p>MINIMUM: A minimum computation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::MaximumMinimumComputationType>,
}
impl MaximumMinimumComputation {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(&self) -> std::option::Option<&str> {
        self.computation_id.as_deref()
    }
    /// <p>The name of a computation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(&self) -> std::option::Option<&crate::types::DimensionField> {
        self.time.as_ref()
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::MeasureField> {
        self.value.as_ref()
    }
    /// <p>The type of computation. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>MAXIMUM: A maximum computation.</p> </li>
    /// <li> <p>MINIMUM: A minimum computation.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::MaximumMinimumComputationType> {
        self.r#type.as_ref()
    }
}
impl MaximumMinimumComputation {
    /// Creates a new builder-style object to manufacture [`MaximumMinimumComputation`](crate::types::MaximumMinimumComputation).
    pub fn builder() -> crate::types::builders::MaximumMinimumComputationBuilder {
        crate::types::builders::MaximumMinimumComputationBuilder::default()
    }
}

/// A builder for [`MaximumMinimumComputation`](crate::types::MaximumMinimumComputation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MaximumMinimumComputationBuilder {
    pub(crate) computation_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) time: std::option::Option<crate::types::DimensionField>,
    pub(crate) value: std::option::Option<crate::types::MeasureField>,
    pub(crate) r#type: std::option::Option<crate::types::MaximumMinimumComputationType>,
}
impl MaximumMinimumComputationBuilder {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.computation_id = Some(input.into());
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn set_computation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.computation_id = input;
        self
    }
    /// <p>The name of a computation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a computation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(mut self, input: crate::types::DimensionField) -> Self {
        self.time = Some(input);
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn set_time(mut self, input: std::option::Option<crate::types::DimensionField>) -> Self {
        self.time = input;
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(mut self, input: crate::types::MeasureField) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn set_value(mut self, input: std::option::Option<crate::types::MeasureField>) -> Self {
        self.value = input;
        self
    }
    /// <p>The type of computation. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>MAXIMUM: A maximum computation.</p> </li>
    /// <li> <p>MINIMUM: A minimum computation.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::MaximumMinimumComputationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of computation. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p>MAXIMUM: A maximum computation.</p> </li>
    /// <li> <p>MINIMUM: A minimum computation.</p> </li>
    /// </ul>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::MaximumMinimumComputationType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`MaximumMinimumComputation`](crate::types::MaximumMinimumComputation).
    pub fn build(self) -> crate::types::MaximumMinimumComputation {
        crate::types::MaximumMinimumComputation {
            computation_id: self.computation_id,
            name: self.name,
            time: self.time,
            value: self.value,
            r#type: self.r#type,
        }
    }
}
