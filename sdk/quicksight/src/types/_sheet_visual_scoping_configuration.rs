// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filter that is applied to the options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetVisualScopingConfiguration {
    /// <p>The selected sheet that the filter is applied to.</p>
    pub sheet_id: ::std::string::String,
    /// <p>The scope of the applied entities. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> </p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> </p> </li>
    /// </ul>
    pub scope: crate::types::FilterVisualScope,
    /// <p>The selected visuals that the filter is applied to.</p>
    pub visual_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SheetVisualScopingConfiguration {
    /// <p>The selected sheet that the filter is applied to.</p>
    pub fn sheet_id(&self) -> &str {
        use std::ops::Deref;
        self.sheet_id.deref()
    }
    /// <p>The scope of the applied entities. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> </p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> </p> </li>
    /// </ul>
    pub fn scope(&self) -> &crate::types::FilterVisualScope {
        &self.scope
    }
    /// <p>The selected visuals that the filter is applied to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.visual_ids.is_none()`.
    pub fn visual_ids(&self) -> &[::std::string::String] {
        self.visual_ids.as_deref().unwrap_or_default()
    }
}
impl SheetVisualScopingConfiguration {
    /// Creates a new builder-style object to manufacture [`SheetVisualScopingConfiguration`](crate::types::SheetVisualScopingConfiguration).
    pub fn builder() -> crate::types::builders::SheetVisualScopingConfigurationBuilder {
        crate::types::builders::SheetVisualScopingConfigurationBuilder::default()
    }
}

/// A builder for [`SheetVisualScopingConfiguration`](crate::types::SheetVisualScopingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SheetVisualScopingConfigurationBuilder {
    pub(crate) sheet_id: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<crate::types::FilterVisualScope>,
    pub(crate) visual_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SheetVisualScopingConfigurationBuilder {
    /// <p>The selected sheet that the filter is applied to.</p>
    /// This field is required.
    pub fn sheet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The selected sheet that the filter is applied to.</p>
    pub fn set_sheet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_id = input;
        self
    }
    /// <p>The selected sheet that the filter is applied to.</p>
    pub fn get_sheet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_id
    }
    /// <p>The scope of the applied entities. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> </p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::FilterVisualScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the applied entities. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> </p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> </p> </li>
    /// </ul>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::FilterVisualScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the applied entities. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> </p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> </p> </li>
    /// </ul>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::FilterVisualScope> {
        &self.scope
    }
    /// Appends an item to `visual_ids`.
    ///
    /// To override the contents of this collection use [`set_visual_ids`](Self::set_visual_ids).
    ///
    /// <p>The selected visuals that the filter is applied to.</p>
    pub fn visual_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.visual_ids.unwrap_or_default();
        v.push(input.into());
        self.visual_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The selected visuals that the filter is applied to.</p>
    pub fn set_visual_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.visual_ids = input;
        self
    }
    /// <p>The selected visuals that the filter is applied to.</p>
    pub fn get_visual_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.visual_ids
    }
    /// Consumes the builder and constructs a [`SheetVisualScopingConfiguration`](crate::types::SheetVisualScopingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`sheet_id`](crate::types::builders::SheetVisualScopingConfigurationBuilder::sheet_id)
    /// - [`scope`](crate::types::builders::SheetVisualScopingConfigurationBuilder::scope)
    pub fn build(self) -> ::std::result::Result<crate::types::SheetVisualScopingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SheetVisualScopingConfiguration {
            sheet_id: self.sheet_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sheet_id",
                    "sheet_id was not specified but it is required when building SheetVisualScopingConfiguration",
                )
            })?,
            scope: self.scope.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scope",
                    "scope was not specified but it is required when building SheetVisualScopingConfiguration",
                )
            })?,
            visual_ids: self.visual_ids,
        })
    }
}
