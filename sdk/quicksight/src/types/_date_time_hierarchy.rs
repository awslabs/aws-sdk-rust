// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that determines the hierarchy of any <code>DateTime</code> fields.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DateTimeHierarchy {
    /// <p>The hierarchy ID of the <code>DateTime</code> hierarchy.</p>
    #[doc(hidden)]
    pub hierarchy_id: std::option::Option<std::string::String>,
    /// <p>The option that determines the drill down filters for the <code>DateTime</code> hierarchy.</p>
    #[doc(hidden)]
    pub drill_down_filters: std::option::Option<std::vec::Vec<crate::types::DrillDownFilter>>,
}
impl DateTimeHierarchy {
    /// <p>The hierarchy ID of the <code>DateTime</code> hierarchy.</p>
    pub fn hierarchy_id(&self) -> std::option::Option<&str> {
        self.hierarchy_id.as_deref()
    }
    /// <p>The option that determines the drill down filters for the <code>DateTime</code> hierarchy.</p>
    pub fn drill_down_filters(&self) -> std::option::Option<&[crate::types::DrillDownFilter]> {
        self.drill_down_filters.as_deref()
    }
}
impl DateTimeHierarchy {
    /// Creates a new builder-style object to manufacture [`DateTimeHierarchy`](crate::types::DateTimeHierarchy).
    pub fn builder() -> crate::types::builders::DateTimeHierarchyBuilder {
        crate::types::builders::DateTimeHierarchyBuilder::default()
    }
}

/// A builder for [`DateTimeHierarchy`](crate::types::DateTimeHierarchy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DateTimeHierarchyBuilder {
    pub(crate) hierarchy_id: std::option::Option<std::string::String>,
    pub(crate) drill_down_filters:
        std::option::Option<std::vec::Vec<crate::types::DrillDownFilter>>,
}
impl DateTimeHierarchyBuilder {
    /// <p>The hierarchy ID of the <code>DateTime</code> hierarchy.</p>
    pub fn hierarchy_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hierarchy_id = Some(input.into());
        self
    }
    /// <p>The hierarchy ID of the <code>DateTime</code> hierarchy.</p>
    pub fn set_hierarchy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hierarchy_id = input;
        self
    }
    /// Appends an item to `drill_down_filters`.
    ///
    /// To override the contents of this collection use [`set_drill_down_filters`](Self::set_drill_down_filters).
    ///
    /// <p>The option that determines the drill down filters for the <code>DateTime</code> hierarchy.</p>
    pub fn drill_down_filters(mut self, input: crate::types::DrillDownFilter) -> Self {
        let mut v = self.drill_down_filters.unwrap_or_default();
        v.push(input);
        self.drill_down_filters = Some(v);
        self
    }
    /// <p>The option that determines the drill down filters for the <code>DateTime</code> hierarchy.</p>
    pub fn set_drill_down_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DrillDownFilter>>,
    ) -> Self {
        self.drill_down_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`DateTimeHierarchy`](crate::types::DateTimeHierarchy).
    pub fn build(self) -> crate::types::DateTimeHierarchy {
        crate::types::DateTimeHierarchy {
            hierarchy_id: self.hierarchy_id,
            drill_down_filters: self.drill_down_filters,
        }
    }
}
