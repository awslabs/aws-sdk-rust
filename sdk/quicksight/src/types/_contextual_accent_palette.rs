// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The contextual accent palette.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContextualAccentPalette {
    /// <p>The color palette.</p>
    pub connection: ::std::option::Option<crate::types::Palette>,
    /// <p>The color palette.</p>
    pub visualization: ::std::option::Option<crate::types::Palette>,
    /// <p>The color palette.</p>
    pub insight: ::std::option::Option<crate::types::Palette>,
    /// <p>The color palette.</p>
    pub automation: ::std::option::Option<crate::types::Palette>,
}
impl ContextualAccentPalette {
    /// <p>The color palette.</p>
    pub fn connection(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.connection.as_ref()
    }
    /// <p>The color palette.</p>
    pub fn visualization(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.visualization.as_ref()
    }
    /// <p>The color palette.</p>
    pub fn insight(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.insight.as_ref()
    }
    /// <p>The color palette.</p>
    pub fn automation(&self) -> ::std::option::Option<&crate::types::Palette> {
        self.automation.as_ref()
    }
}
impl ContextualAccentPalette {
    /// Creates a new builder-style object to manufacture [`ContextualAccentPalette`](crate::types::ContextualAccentPalette).
    pub fn builder() -> crate::types::builders::ContextualAccentPaletteBuilder {
        crate::types::builders::ContextualAccentPaletteBuilder::default()
    }
}

/// A builder for [`ContextualAccentPalette`](crate::types::ContextualAccentPalette).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContextualAccentPaletteBuilder {
    pub(crate) connection: ::std::option::Option<crate::types::Palette>,
    pub(crate) visualization: ::std::option::Option<crate::types::Palette>,
    pub(crate) insight: ::std::option::Option<crate::types::Palette>,
    pub(crate) automation: ::std::option::Option<crate::types::Palette>,
}
impl ContextualAccentPaletteBuilder {
    /// <p>The color palette.</p>
    pub fn connection(mut self, input: crate::types::Palette) -> Self {
        self.connection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color palette.</p>
    pub fn set_connection(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.connection = input;
        self
    }
    /// <p>The color palette.</p>
    pub fn get_connection(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.connection
    }
    /// <p>The color palette.</p>
    pub fn visualization(mut self, input: crate::types::Palette) -> Self {
        self.visualization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color palette.</p>
    pub fn set_visualization(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.visualization = input;
        self
    }
    /// <p>The color palette.</p>
    pub fn get_visualization(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.visualization
    }
    /// <p>The color palette.</p>
    pub fn insight(mut self, input: crate::types::Palette) -> Self {
        self.insight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color palette.</p>
    pub fn set_insight(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.insight = input;
        self
    }
    /// <p>The color palette.</p>
    pub fn get_insight(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.insight
    }
    /// <p>The color palette.</p>
    pub fn automation(mut self, input: crate::types::Palette) -> Self {
        self.automation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color palette.</p>
    pub fn set_automation(mut self, input: ::std::option::Option<crate::types::Palette>) -> Self {
        self.automation = input;
        self
    }
    /// <p>The color palette.</p>
    pub fn get_automation(&self) -> &::std::option::Option<crate::types::Palette> {
        &self.automation
    }
    /// Consumes the builder and constructs a [`ContextualAccentPalette`](crate::types::ContextualAccentPalette).
    pub fn build(self) -> crate::types::ContextualAccentPalette {
        crate::types::ContextualAccentPalette {
            connection: self.connection,
            visualization: self.visualization,
            insight: self.insight,
            automation: self.automation,
        }
    }
}
