// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The shape conditional formatting of a filled map visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ShapeConditionalFormat {
    /// <p>The conditional formatting for the shape background color of a filled map visual.</p>
    #[doc(hidden)]
    pub background_color: std::option::Option<crate::types::ConditionalFormattingColor>,
}
impl ShapeConditionalFormat {
    /// <p>The conditional formatting for the shape background color of a filled map visual.</p>
    pub fn background_color(
        &self,
    ) -> std::option::Option<&crate::types::ConditionalFormattingColor> {
        self.background_color.as_ref()
    }
}
impl ShapeConditionalFormat {
    /// Creates a new builder-style object to manufacture [`ShapeConditionalFormat`](crate::types::ShapeConditionalFormat).
    pub fn builder() -> crate::types::builders::ShapeConditionalFormatBuilder {
        crate::types::builders::ShapeConditionalFormatBuilder::default()
    }
}

/// A builder for [`ShapeConditionalFormat`](crate::types::ShapeConditionalFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ShapeConditionalFormatBuilder {
    pub(crate) background_color: std::option::Option<crate::types::ConditionalFormattingColor>,
}
impl ShapeConditionalFormatBuilder {
    /// <p>The conditional formatting for the shape background color of a filled map visual.</p>
    pub fn background_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.background_color = Some(input);
        self
    }
    /// <p>The conditional formatting for the shape background color of a filled map visual.</p>
    pub fn set_background_color(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingColor>,
    ) -> Self {
        self.background_color = input;
        self
    }
    /// Consumes the builder and constructs a [`ShapeConditionalFormat`](crate::types::ShapeConditionalFormat).
    pub fn build(self) -> crate::types::ShapeConditionalFormat {
        crate::types::ShapeConditionalFormat {
            background_color: self.background_color,
        }
    }
}
