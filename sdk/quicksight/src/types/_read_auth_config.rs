// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Read-only authentication configuration containing non-sensitive authentication details for action connectors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReadAuthConfig {
    /// <p>The type of authentication being used (BASIC, API_KEY, OAUTH2_CLIENT_CREDENTIALS, or OAUTH2_AUTHORIZATION_CODE).</p>
    pub authentication_type: crate::types::ConnectionAuthType,
    /// <p>The authentication metadata containing configuration details specific to the authentication type.</p>
    pub authentication_metadata: ::std::option::Option<crate::types::ReadAuthenticationMetadata>,
}
impl ReadAuthConfig {
    /// <p>The type of authentication being used (BASIC, API_KEY, OAUTH2_CLIENT_CREDENTIALS, or OAUTH2_AUTHORIZATION_CODE).</p>
    pub fn authentication_type(&self) -> &crate::types::ConnectionAuthType {
        &self.authentication_type
    }
    /// <p>The authentication metadata containing configuration details specific to the authentication type.</p>
    pub fn authentication_metadata(&self) -> ::std::option::Option<&crate::types::ReadAuthenticationMetadata> {
        self.authentication_metadata.as_ref()
    }
}
impl ReadAuthConfig {
    /// Creates a new builder-style object to manufacture [`ReadAuthConfig`](crate::types::ReadAuthConfig).
    pub fn builder() -> crate::types::builders::ReadAuthConfigBuilder {
        crate::types::builders::ReadAuthConfigBuilder::default()
    }
}

/// A builder for [`ReadAuthConfig`](crate::types::ReadAuthConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReadAuthConfigBuilder {
    pub(crate) authentication_type: ::std::option::Option<crate::types::ConnectionAuthType>,
    pub(crate) authentication_metadata: ::std::option::Option<crate::types::ReadAuthenticationMetadata>,
}
impl ReadAuthConfigBuilder {
    /// <p>The type of authentication being used (BASIC, API_KEY, OAUTH2_CLIENT_CREDENTIALS, or OAUTH2_AUTHORIZATION_CODE).</p>
    /// This field is required.
    pub fn authentication_type(mut self, input: crate::types::ConnectionAuthType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of authentication being used (BASIC, API_KEY, OAUTH2_CLIENT_CREDENTIALS, or OAUTH2_AUTHORIZATION_CODE).</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::ConnectionAuthType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The type of authentication being used (BASIC, API_KEY, OAUTH2_CLIENT_CREDENTIALS, or OAUTH2_AUTHORIZATION_CODE).</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::ConnectionAuthType> {
        &self.authentication_type
    }
    /// <p>The authentication metadata containing configuration details specific to the authentication type.</p>
    /// This field is required.
    pub fn authentication_metadata(mut self, input: crate::types::ReadAuthenticationMetadata) -> Self {
        self.authentication_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication metadata containing configuration details specific to the authentication type.</p>
    pub fn set_authentication_metadata(mut self, input: ::std::option::Option<crate::types::ReadAuthenticationMetadata>) -> Self {
        self.authentication_metadata = input;
        self
    }
    /// <p>The authentication metadata containing configuration details specific to the authentication type.</p>
    pub fn get_authentication_metadata(&self) -> &::std::option::Option<crate::types::ReadAuthenticationMetadata> {
        &self.authentication_metadata
    }
    /// Consumes the builder and constructs a [`ReadAuthConfig`](crate::types::ReadAuthConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`authentication_type`](crate::types::builders::ReadAuthConfigBuilder::authentication_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ReadAuthConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReadAuthConfig {
            authentication_type: self.authentication_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authentication_type",
                    "authentication_type was not specified but it is required when building ReadAuthConfig",
                )
            })?,
            authentication_metadata: self.authentication_metadata,
        })
    }
}
