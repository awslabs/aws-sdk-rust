// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A transform operation that projects columns. Operations that come after a projection can only refer to projected columns.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProjectOperation {
    /// <p>Projected columns.</p>
    #[doc(hidden)]
    pub projected_columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ProjectOperation {
    /// <p>Projected columns.</p>
    pub fn projected_columns(&self) -> std::option::Option<&[std::string::String]> {
        self.projected_columns.as_deref()
    }
}
impl ProjectOperation {
    /// Creates a new builder-style object to manufacture [`ProjectOperation`](crate::types::ProjectOperation).
    pub fn builder() -> crate::types::builders::ProjectOperationBuilder {
        crate::types::builders::ProjectOperationBuilder::default()
    }
}

/// A builder for [`ProjectOperation`](crate::types::ProjectOperation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProjectOperationBuilder {
    pub(crate) projected_columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ProjectOperationBuilder {
    /// Appends an item to `projected_columns`.
    ///
    /// To override the contents of this collection use [`set_projected_columns`](Self::set_projected_columns).
    ///
    /// <p>Projected columns.</p>
    pub fn projected_columns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.projected_columns.unwrap_or_default();
        v.push(input.into());
        self.projected_columns = Some(v);
        self
    }
    /// <p>Projected columns.</p>
    pub fn set_projected_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.projected_columns = input;
        self
    }
    /// Consumes the builder and constructs a [`ProjectOperation`](crate::types::ProjectOperation).
    pub fn build(self) -> crate::types::ProjectOperation {
        crate::types::ProjectOperation {
            projected_columns: self.projected_columns,
        }
    }
}
