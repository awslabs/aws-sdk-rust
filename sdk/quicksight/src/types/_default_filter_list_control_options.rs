// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default options that correspond to the <code>List</code> filter control type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultFilterListControlOptions {
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::ListControlDisplayOptions>,
    /// <p>The type of the <code>DefaultFilterListControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from the list.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from the list.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::SheetControlListType>,
    /// <p>A list of selectable values that are used in a control.</p>
    pub selectable_values: ::std::option::Option<crate::types::FilterSelectableValues>,
}
impl DefaultFilterListControlOptions {
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::ListControlDisplayOptions> {
        self.display_options.as_ref()
    }
    /// <p>The type of the <code>DefaultFilterListControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from the list.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from the list.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SheetControlListType> {
        self.r#type.as_ref()
    }
    /// <p>A list of selectable values that are used in a control.</p>
    pub fn selectable_values(&self) -> ::std::option::Option<&crate::types::FilterSelectableValues> {
        self.selectable_values.as_ref()
    }
}
impl DefaultFilterListControlOptions {
    /// Creates a new builder-style object to manufacture [`DefaultFilterListControlOptions`](crate::types::DefaultFilterListControlOptions).
    pub fn builder() -> crate::types::builders::DefaultFilterListControlOptionsBuilder {
        crate::types::builders::DefaultFilterListControlOptionsBuilder::default()
    }
}

/// A builder for [`DefaultFilterListControlOptions`](crate::types::DefaultFilterListControlOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultFilterListControlOptionsBuilder {
    pub(crate) display_options: ::std::option::Option<crate::types::ListControlDisplayOptions>,
    pub(crate) r#type: ::std::option::Option<crate::types::SheetControlListType>,
    pub(crate) selectable_values: ::std::option::Option<crate::types::FilterSelectableValues>,
}
impl DefaultFilterListControlOptionsBuilder {
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::ListControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::ListControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::ListControlDisplayOptions> {
        &self.display_options
    }
    /// <p>The type of the <code>DefaultFilterListControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from the list.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from the list.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::SheetControlListType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the <code>DefaultFilterListControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from the list.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from the list.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SheetControlListType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the <code>DefaultFilterListControlOptions</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from the list.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from the list.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SheetControlListType> {
        &self.r#type
    }
    /// <p>A list of selectable values that are used in a control.</p>
    pub fn selectable_values(mut self, input: crate::types::FilterSelectableValues) -> Self {
        self.selectable_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of selectable values that are used in a control.</p>
    pub fn set_selectable_values(mut self, input: ::std::option::Option<crate::types::FilterSelectableValues>) -> Self {
        self.selectable_values = input;
        self
    }
    /// <p>A list of selectable values that are used in a control.</p>
    pub fn get_selectable_values(&self) -> &::std::option::Option<crate::types::FilterSelectableValues> {
        &self.selectable_values
    }
    /// Consumes the builder and constructs a [`DefaultFilterListControlOptions`](crate::types::DefaultFilterListControlOptions).
    pub fn build(self) -> crate::types::DefaultFilterListControlOptions {
        crate::types::DefaultFilterListControlOptions {
            display_options: self.display_options,
            r#type: self.r#type,
            selectable_values: self.selectable_values,
        }
    }
}
