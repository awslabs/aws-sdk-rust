// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A waterfall chart.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WaterfallVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub visual_id: ::std::string::String,
    /// <p>The title that is displayed on the visual.</p>
    pub title: ::std::option::Option<crate::types::VisualTitleLabelOptions>,
    /// <p>The subtitle that is displayed on the visual.</p>
    pub subtitle: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    /// <p>The configuration for a waterfall visual.</p>
    pub chart_configuration: ::std::option::Option<crate::types::WaterfallChartConfiguration>,
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub column_hierarchies: ::std::option::Option<::std::vec::Vec<crate::types::ColumnHierarchy>>,
}
impl WaterfallVisual {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn visual_id(&self) -> &str {
        use std::ops::Deref;
        self.visual_id.deref()
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn title(&self) -> ::std::option::Option<&crate::types::VisualTitleLabelOptions> {
        self.title.as_ref()
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn subtitle(&self) -> ::std::option::Option<&crate::types::VisualSubtitleLabelOptions> {
        self.subtitle.as_ref()
    }
    /// <p>The configuration for a waterfall visual.</p>
    pub fn chart_configuration(&self) -> ::std::option::Option<&crate::types::WaterfallChartConfiguration> {
        self.chart_configuration.as_ref()
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::VisualCustomAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.column_hierarchies.is_none()`.
    pub fn column_hierarchies(&self) -> &[crate::types::ColumnHierarchy] {
        self.column_hierarchies.as_deref().unwrap_or_default()
    }
}
impl WaterfallVisual {
    /// Creates a new builder-style object to manufacture [`WaterfallVisual`](crate::types::WaterfallVisual).
    pub fn builder() -> crate::types::builders::WaterfallVisualBuilder {
        crate::types::builders::WaterfallVisualBuilder::default()
    }
}

/// A builder for [`WaterfallVisual`](crate::types::WaterfallVisual).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WaterfallVisualBuilder {
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<crate::types::VisualTitleLabelOptions>,
    pub(crate) subtitle: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    pub(crate) chart_configuration: ::std::option::Option<crate::types::WaterfallChartConfiguration>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
    pub(crate) column_hierarchies: ::std::option::Option<::std::vec::Vec<crate::types::ColumnHierarchy>>,
}
impl WaterfallVisualBuilder {
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    /// This field is required.
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn title(mut self, input: crate::types::VisualTitleLabelOptions) -> Self {
        self.title = ::std::option::Option::Some(input);
        self
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn set_title(mut self, input: ::std::option::Option<crate::types::VisualTitleLabelOptions>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title that is displayed on the visual.</p>
    pub fn get_title(&self) -> &::std::option::Option<crate::types::VisualTitleLabelOptions> {
        &self.title
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn subtitle(mut self, input: crate::types::VisualSubtitleLabelOptions) -> Self {
        self.subtitle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn set_subtitle(mut self, input: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>) -> Self {
        self.subtitle = input;
        self
    }
    /// <p>The subtitle that is displayed on the visual.</p>
    pub fn get_subtitle(&self) -> &::std::option::Option<crate::types::VisualSubtitleLabelOptions> {
        &self.subtitle
    }
    /// <p>The configuration for a waterfall visual.</p>
    pub fn chart_configuration(mut self, input: crate::types::WaterfallChartConfiguration) -> Self {
        self.chart_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a waterfall visual.</p>
    pub fn set_chart_configuration(mut self, input: ::std::option::Option<crate::types::WaterfallChartConfiguration>) -> Self {
        self.chart_configuration = input;
        self
    }
    /// <p>The configuration for a waterfall visual.</p>
    pub fn get_chart_configuration(&self) -> &::std::option::Option<crate::types::WaterfallChartConfiguration> {
        &self.chart_configuration
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn actions(mut self, input: crate::types::VisualCustomAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>> {
        &self.actions
    }
    /// Appends an item to `column_hierarchies`.
    ///
    /// To override the contents of this collection use [`set_column_hierarchies`](Self::set_column_hierarchies).
    ///
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn column_hierarchies(mut self, input: crate::types::ColumnHierarchy) -> Self {
        let mut v = self.column_hierarchies.unwrap_or_default();
        v.push(input);
        self.column_hierarchies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn set_column_hierarchies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnHierarchy>>) -> Self {
        self.column_hierarchies = input;
        self
    }
    /// <p>The column hierarchy that is used during drill-downs and drill-ups.</p>
    pub fn get_column_hierarchies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnHierarchy>> {
        &self.column_hierarchies
    }
    /// Consumes the builder and constructs a [`WaterfallVisual`](crate::types::WaterfallVisual).
    /// This method will fail if any of the following fields are not set:
    /// - [`visual_id`](crate::types::builders::WaterfallVisualBuilder::visual_id)
    pub fn build(self) -> ::std::result::Result<crate::types::WaterfallVisual, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WaterfallVisual {
            visual_id: self.visual_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visual_id",
                    "visual_id was not specified but it is required when building WaterfallVisual",
                )
            })?,
            title: self.title,
            subtitle: self.subtitle,
            chart_configuration: self.chart_configuration,
            actions: self.actions,
            column_hierarchies: self.column_hierarchies,
        })
    }
}
