// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The application theme.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationTheme {
    /// <p>The color palette.</p>
    pub brand_color_palette: ::std::option::Option<crate::types::BrandColorPalette>,
    /// <p>The contextual accent palette.</p>
    pub contextual_accent_palette: ::std::option::Option<crate::types::ContextualAccentPalette>,
    /// <p>The element style.</p>
    pub brand_element_style: ::std::option::Option<crate::types::BrandElementStyle>,
}
impl ApplicationTheme {
    /// <p>The color palette.</p>
    pub fn brand_color_palette(&self) -> ::std::option::Option<&crate::types::BrandColorPalette> {
        self.brand_color_palette.as_ref()
    }
    /// <p>The contextual accent palette.</p>
    pub fn contextual_accent_palette(&self) -> ::std::option::Option<&crate::types::ContextualAccentPalette> {
        self.contextual_accent_palette.as_ref()
    }
    /// <p>The element style.</p>
    pub fn brand_element_style(&self) -> ::std::option::Option<&crate::types::BrandElementStyle> {
        self.brand_element_style.as_ref()
    }
}
impl ApplicationTheme {
    /// Creates a new builder-style object to manufacture [`ApplicationTheme`](crate::types::ApplicationTheme).
    pub fn builder() -> crate::types::builders::ApplicationThemeBuilder {
        crate::types::builders::ApplicationThemeBuilder::default()
    }
}

/// A builder for [`ApplicationTheme`](crate::types::ApplicationTheme).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationThemeBuilder {
    pub(crate) brand_color_palette: ::std::option::Option<crate::types::BrandColorPalette>,
    pub(crate) contextual_accent_palette: ::std::option::Option<crate::types::ContextualAccentPalette>,
    pub(crate) brand_element_style: ::std::option::Option<crate::types::BrandElementStyle>,
}
impl ApplicationThemeBuilder {
    /// <p>The color palette.</p>
    pub fn brand_color_palette(mut self, input: crate::types::BrandColorPalette) -> Self {
        self.brand_color_palette = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color palette.</p>
    pub fn set_brand_color_palette(mut self, input: ::std::option::Option<crate::types::BrandColorPalette>) -> Self {
        self.brand_color_palette = input;
        self
    }
    /// <p>The color palette.</p>
    pub fn get_brand_color_palette(&self) -> &::std::option::Option<crate::types::BrandColorPalette> {
        &self.brand_color_palette
    }
    /// <p>The contextual accent palette.</p>
    pub fn contextual_accent_palette(mut self, input: crate::types::ContextualAccentPalette) -> Self {
        self.contextual_accent_palette = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contextual accent palette.</p>
    pub fn set_contextual_accent_palette(mut self, input: ::std::option::Option<crate::types::ContextualAccentPalette>) -> Self {
        self.contextual_accent_palette = input;
        self
    }
    /// <p>The contextual accent palette.</p>
    pub fn get_contextual_accent_palette(&self) -> &::std::option::Option<crate::types::ContextualAccentPalette> {
        &self.contextual_accent_palette
    }
    /// <p>The element style.</p>
    pub fn brand_element_style(mut self, input: crate::types::BrandElementStyle) -> Self {
        self.brand_element_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>The element style.</p>
    pub fn set_brand_element_style(mut self, input: ::std::option::Option<crate::types::BrandElementStyle>) -> Self {
        self.brand_element_style = input;
        self
    }
    /// <p>The element style.</p>
    pub fn get_brand_element_style(&self) -> &::std::option::Option<crate::types::BrandElementStyle> {
        &self.brand_element_style
    }
    /// Consumes the builder and constructs a [`ApplicationTheme`](crate::types::ApplicationTheme).
    pub fn build(self) -> crate::types::ApplicationTheme {
        crate::types::ApplicationTheme {
            brand_color_palette: self.brand_color_palette,
            contextual_accent_palette: self.contextual_accent_palette,
            brand_element_style: self.brand_element_style,
        }
    }
}
