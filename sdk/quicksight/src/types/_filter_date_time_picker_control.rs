// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A control from a date filter that is used to specify date and time.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterDateTimePickerControl {
    /// <p>The ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub filter_control_id: ::std::string::String,
    /// <p>The title of the <code>FilterDateTimePickerControl</code>.</p>
    pub title: ::std::string::String,
    /// <p>The source filter ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub source_filter_id: ::std::string::String,
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>,
    /// <p>The type of the <code>FilterDropDownControl</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from a dropdown menu.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from a dropdown menu.</p></li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::SheetControlDateTimePickerType>,
}
impl FilterDateTimePickerControl {
    /// <p>The ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn filter_control_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_control_id.deref()
    }
    /// <p>The title of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The source filter ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn source_filter_id(&self) -> &str {
        use std::ops::Deref;
        self.source_filter_id.deref()
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::DateTimePickerControlDisplayOptions> {
        self.display_options.as_ref()
    }
    /// <p>The type of the <code>FilterDropDownControl</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from a dropdown menu.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from a dropdown menu.</p></li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SheetControlDateTimePickerType> {
        self.r#type.as_ref()
    }
}
impl FilterDateTimePickerControl {
    /// Creates a new builder-style object to manufacture [`FilterDateTimePickerControl`](crate::types::FilterDateTimePickerControl).
    pub fn builder() -> crate::types::builders::FilterDateTimePickerControlBuilder {
        crate::types::builders::FilterDateTimePickerControlBuilder::default()
    }
}

/// A builder for [`FilterDateTimePickerControl`](crate::types::FilterDateTimePickerControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterDateTimePickerControlBuilder {
    pub(crate) filter_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) source_filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_options: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>,
    pub(crate) r#type: ::std::option::Option<crate::types::SheetControlDateTimePickerType>,
}
impl FilterDateTimePickerControlBuilder {
    /// <p>The ID of the <code>FilterDateTimePickerControl</code>.</p>
    /// This field is required.
    pub fn filter_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn set_filter_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_control_id = input;
        self
    }
    /// <p>The ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn get_filter_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_control_id
    }
    /// <p>The title of the <code>FilterDateTimePickerControl</code>.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The source filter ID of the <code>FilterDateTimePickerControl</code>.</p>
    /// This field is required.
    pub fn source_filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source filter ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn set_source_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_filter_id = input;
        self
    }
    /// <p>The source filter ID of the <code>FilterDateTimePickerControl</code>.</p>
    pub fn get_source_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_filter_id
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::DateTimePickerControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::DateTimePickerControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::DateTimePickerControlDisplayOptions> {
        &self.display_options
    }
    /// <p>The type of the <code>FilterDropDownControl</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from a dropdown menu.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from a dropdown menu.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::SheetControlDateTimePickerType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the <code>FilterDropDownControl</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from a dropdown menu.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from a dropdown menu.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SheetControlDateTimePickerType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the <code>FilterDropDownControl</code>. Choose one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>MULTI_SELECT</code>: The user can select multiple entries from a dropdown menu.</p></li>
    /// <li>
    /// <p><code>SINGLE_SELECT</code>: The user can select a single entry from a dropdown menu.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SheetControlDateTimePickerType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`FilterDateTimePickerControl`](crate::types::FilterDateTimePickerControl).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_control_id`](crate::types::builders::FilterDateTimePickerControlBuilder::filter_control_id)
    /// - [`title`](crate::types::builders::FilterDateTimePickerControlBuilder::title)
    /// - [`source_filter_id`](crate::types::builders::FilterDateTimePickerControlBuilder::source_filter_id)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterDateTimePickerControl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterDateTimePickerControl {
            filter_control_id: self.filter_control_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_control_id",
                    "filter_control_id was not specified but it is required when building FilterDateTimePickerControl",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building FilterDateTimePickerControl",
                )
            })?,
            source_filter_id: self.source_filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_filter_id",
                    "source_filter_id was not specified but it is required when building FilterDateTimePickerControl",
                )
            })?,
            display_options: self.display_options,
            r#type: self.r#type,
        })
    }
}
