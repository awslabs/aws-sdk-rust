// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the dashboard you want to embed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisteredUserDashboardEmbeddingConfiguration {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard if the user has permissions to view it.</p>
    /// <p>If the user does not have permission to view this dashboard, they see a permissions error message.</p>
    #[doc(hidden)]
    pub initial_dashboard_id: std::option::Option<std::string::String>,
}
impl RegisteredUserDashboardEmbeddingConfiguration {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard if the user has permissions to view it.</p>
    /// <p>If the user does not have permission to view this dashboard, they see a permissions error message.</p>
    pub fn initial_dashboard_id(&self) -> std::option::Option<&str> {
        self.initial_dashboard_id.as_deref()
    }
}
impl RegisteredUserDashboardEmbeddingConfiguration {
    /// Creates a new builder-style object to manufacture [`RegisteredUserDashboardEmbeddingConfiguration`](crate::types::RegisteredUserDashboardEmbeddingConfiguration).
    pub fn builder() -> crate::types::builders::RegisteredUserDashboardEmbeddingConfigurationBuilder
    {
        crate::types::builders::RegisteredUserDashboardEmbeddingConfigurationBuilder::default()
    }
}

/// A builder for [`RegisteredUserDashboardEmbeddingConfiguration`](crate::types::RegisteredUserDashboardEmbeddingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisteredUserDashboardEmbeddingConfigurationBuilder {
    pub(crate) initial_dashboard_id: std::option::Option<std::string::String>,
}
impl RegisteredUserDashboardEmbeddingConfigurationBuilder {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard if the user has permissions to view it.</p>
    /// <p>If the user does not have permission to view this dashboard, they see a permissions error message.</p>
    pub fn initial_dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.initial_dashboard_id = Some(input.into());
        self
    }
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard if the user has permissions to view it.</p>
    /// <p>If the user does not have permission to view this dashboard, they see a permissions error message.</p>
    pub fn set_initial_dashboard_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.initial_dashboard_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisteredUserDashboardEmbeddingConfiguration`](crate::types::RegisteredUserDashboardEmbeddingConfiguration).
    pub fn build(self) -> crate::types::RegisteredUserDashboardEmbeddingConfiguration {
        crate::types::RegisteredUserDashboardEmbeddingConfiguration {
            initial_dashboard_id: self.initial_dashboard_id,
        }
    }
}
