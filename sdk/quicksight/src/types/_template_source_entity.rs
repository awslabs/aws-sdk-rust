// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source entity of the template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateSourceEntity {
    /// <p>The source analysis, if it is based on an analysis.</p>
    #[doc(hidden)]
    pub source_analysis: std::option::Option<crate::types::TemplateSourceAnalysis>,
    /// <p>The source template, if it is based on an template.</p>
    #[doc(hidden)]
    pub source_template: std::option::Option<crate::types::TemplateSourceTemplate>,
}
impl TemplateSourceEntity {
    /// <p>The source analysis, if it is based on an analysis.</p>
    pub fn source_analysis(&self) -> std::option::Option<&crate::types::TemplateSourceAnalysis> {
        self.source_analysis.as_ref()
    }
    /// <p>The source template, if it is based on an template.</p>
    pub fn source_template(&self) -> std::option::Option<&crate::types::TemplateSourceTemplate> {
        self.source_template.as_ref()
    }
}
impl TemplateSourceEntity {
    /// Creates a new builder-style object to manufacture [`TemplateSourceEntity`](crate::types::TemplateSourceEntity).
    pub fn builder() -> crate::types::builders::TemplateSourceEntityBuilder {
        crate::types::builders::TemplateSourceEntityBuilder::default()
    }
}

/// A builder for [`TemplateSourceEntity`](crate::types::TemplateSourceEntity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateSourceEntityBuilder {
    pub(crate) source_analysis: std::option::Option<crate::types::TemplateSourceAnalysis>,
    pub(crate) source_template: std::option::Option<crate::types::TemplateSourceTemplate>,
}
impl TemplateSourceEntityBuilder {
    /// <p>The source analysis, if it is based on an analysis.</p>
    pub fn source_analysis(mut self, input: crate::types::TemplateSourceAnalysis) -> Self {
        self.source_analysis = Some(input);
        self
    }
    /// <p>The source analysis, if it is based on an analysis.</p>
    pub fn set_source_analysis(
        mut self,
        input: std::option::Option<crate::types::TemplateSourceAnalysis>,
    ) -> Self {
        self.source_analysis = input;
        self
    }
    /// <p>The source template, if it is based on an template.</p>
    pub fn source_template(mut self, input: crate::types::TemplateSourceTemplate) -> Self {
        self.source_template = Some(input);
        self
    }
    /// <p>The source template, if it is based on an template.</p>
    pub fn set_source_template(
        mut self,
        input: std::option::Option<crate::types::TemplateSourceTemplate>,
    ) -> Self {
        self.source_template = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateSourceEntity`](crate::types::TemplateSourceEntity).
    pub fn build(self) -> crate::types::TemplateSourceEntity {
        crate::types::TemplateSourceEntity {
            source_analysis: self.source_analysis,
            source_template: self.source_template,
        }
    }
}
