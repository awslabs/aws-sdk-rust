// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An asset in a Amazon QuickSight folder, such as a dashboard, analysis, or dataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FolderMember {
    /// <p>The ID of an asset in the folder.</p>
    #[doc(hidden)]
    pub member_id: std::option::Option<std::string::String>,
    /// <p>The type of asset that it is.</p>
    #[doc(hidden)]
    pub member_type: std::option::Option<crate::types::MemberType>,
}
impl FolderMember {
    /// <p>The ID of an asset in the folder.</p>
    pub fn member_id(&self) -> std::option::Option<&str> {
        self.member_id.as_deref()
    }
    /// <p>The type of asset that it is.</p>
    pub fn member_type(&self) -> std::option::Option<&crate::types::MemberType> {
        self.member_type.as_ref()
    }
}
impl FolderMember {
    /// Creates a new builder-style object to manufacture [`FolderMember`](crate::types::FolderMember).
    pub fn builder() -> crate::types::builders::FolderMemberBuilder {
        crate::types::builders::FolderMemberBuilder::default()
    }
}

/// A builder for [`FolderMember`](crate::types::FolderMember).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FolderMemberBuilder {
    pub(crate) member_id: std::option::Option<std::string::String>,
    pub(crate) member_type: std::option::Option<crate::types::MemberType>,
}
impl FolderMemberBuilder {
    /// <p>The ID of an asset in the folder.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.member_id = Some(input.into());
        self
    }
    /// <p>The ID of an asset in the folder.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.member_id = input;
        self
    }
    /// <p>The type of asset that it is.</p>
    pub fn member_type(mut self, input: crate::types::MemberType) -> Self {
        self.member_type = Some(input);
        self
    }
    /// <p>The type of asset that it is.</p>
    pub fn set_member_type(mut self, input: std::option::Option<crate::types::MemberType>) -> Self {
        self.member_type = input;
        self
    }
    /// Consumes the builder and constructs a [`FolderMember`](crate::types::FolderMember).
    pub fn build(self) -> crate::types::FolderMember {
        crate::types::FolderMember {
            member_id: self.member_id,
            member_type: self.member_type,
        }
    }
}
