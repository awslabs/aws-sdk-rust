// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A version of a theme.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThemeVersion {
    /// <p>The version number of the theme.</p>
    #[doc(hidden)]
    pub version_number: std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The description of the theme.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    #[doc(hidden)]
    pub base_theme_id: std::option::Option<std::string::String>,
    /// <p>The date and time that this theme version was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The theme configuration, which contains all the theme display properties.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::types::ThemeConfiguration>,
    /// <p>Errors associated with the theme.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::ThemeError>>,
    /// <p>The status of the theme version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ResourceStatus>,
}
impl ThemeVersion {
    /// <p>The version number of the theme.</p>
    pub fn version_number(&self) -> std::option::Option<i64> {
        self.version_number
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description of the theme.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn base_theme_id(&self) -> std::option::Option<&str> {
        self.base_theme_id.as_deref()
    }
    /// <p>The date and time that this theme version was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The theme configuration, which contains all the theme display properties.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::types::ThemeConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>Errors associated with the theme.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::ThemeError]> {
        self.errors.as_deref()
    }
    /// <p>The status of the theme version.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
}
impl ThemeVersion {
    /// Creates a new builder-style object to manufacture [`ThemeVersion`](crate::types::ThemeVersion).
    pub fn builder() -> crate::types::builders::ThemeVersionBuilder {
        crate::types::builders::ThemeVersionBuilder::default()
    }
}

/// A builder for [`ThemeVersion`](crate::types::ThemeVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThemeVersionBuilder {
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) base_theme_id: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) configuration: std::option::Option<crate::types::ThemeConfiguration>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::ThemeError>>,
    pub(crate) status: std::option::Option<crate::types::ResourceStatus>,
}
impl ThemeVersionBuilder {
    /// <p>The version number of the theme.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version number of the theme.</p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The description of the theme.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the theme.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn base_theme_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_theme_id = Some(input.into());
        self
    }
    /// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn set_base_theme_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_theme_id = input;
        self
    }
    /// <p>The date and time that this theme version was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The date and time that this theme version was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The theme configuration, which contains all the theme display properties.</p>
    pub fn configuration(mut self, input: crate::types::ThemeConfiguration) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The theme configuration, which contains all the theme display properties.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ThemeConfiguration>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Errors associated with the theme.</p>
    pub fn errors(mut self, input: crate::types::ThemeError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>Errors associated with the theme.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ThemeError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// <p>The status of the theme version.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the theme version.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ThemeVersion`](crate::types::ThemeVersion).
    pub fn build(self) -> crate::types::ThemeVersion {
        crate::types::ThemeVersion {
            version_number: self.version_number,
            arn: self.arn,
            description: self.description,
            base_theme_id: self.base_theme_id,
            created_time: self.created_time,
            configuration: self.configuration,
            errors: self.errors,
            status: self.status,
        }
    }
}
