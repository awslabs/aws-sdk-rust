// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the permission information for one principal against one flow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Permission {
    /// <p>A list of actions that the principal can perform against the flow.</p>
    /// <p>The following are the list of values to set a principal as a flow owner:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:PublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UnpublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// <li>
    /// <p>quicksight:DeleteFlow</p></li>
    /// <li>
    /// <p>quicksight:DescribeFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlow</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// </ul>
    /// <p>The following are the list of values to set a principal as a flow viewer:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// </ul>
    pub actions: ::std::vec::Vec<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the principal. This can be an Amazon QuickSight user, group or namespace associated with the flow. Namespace principal can only be set as a viewer and will grant everyone in the same namespace viewer permissions.</p>
    pub principal: ::std::string::String,
}
impl Permission {
    /// <p>A list of actions that the principal can perform against the flow.</p>
    /// <p>The following are the list of values to set a principal as a flow owner:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:PublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UnpublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// <li>
    /// <p>quicksight:DeleteFlow</p></li>
    /// <li>
    /// <p>quicksight:DescribeFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlow</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// </ul>
    /// <p>The following are the list of values to set a principal as a flow viewer:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// </ul>
    pub fn actions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.actions.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the principal. This can be an Amazon QuickSight user, group or namespace associated with the flow. Namespace principal can only be set as a viewer and will grant everyone in the same namespace viewer permissions.</p>
    pub fn principal(&self) -> &str {
        use std::ops::Deref;
        self.principal.deref()
    }
}
impl Permission {
    /// Creates a new builder-style object to manufacture [`Permission`](crate::types::Permission).
    pub fn builder() -> crate::types::builders::PermissionBuilder {
        crate::types::builders::PermissionBuilder::default()
    }
}

/// A builder for [`Permission`](crate::types::Permission).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PermissionBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
}
impl PermissionBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of actions that the principal can perform against the flow.</p>
    /// <p>The following are the list of values to set a principal as a flow owner:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:PublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UnpublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// <li>
    /// <p>quicksight:DeleteFlow</p></li>
    /// <li>
    /// <p>quicksight:DescribeFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlow</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// </ul>
    /// <p>The following are the list of values to set a principal as a flow viewer:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// </ul>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of actions that the principal can perform against the flow.</p>
    /// <p>The following are the list of values to set a principal as a flow owner:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:PublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UnpublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// <li>
    /// <p>quicksight:DeleteFlow</p></li>
    /// <li>
    /// <p>quicksight:DescribeFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlow</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// </ul>
    /// <p>The following are the list of values to set a principal as a flow viewer:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// </ul>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>A list of actions that the principal can perform against the flow.</p>
    /// <p>The following are the list of values to set a principal as a flow owner:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:PublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:UnpublishFlow</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// <li>
    /// <p>quicksight:DeleteFlow</p></li>
    /// <li>
    /// <p>quicksight:DescribeFlowPermissions</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlow</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// </ul>
    /// <p>The following are the list of values to set a principal as a flow viewer:</p>
    /// <ul>
    /// <li>
    /// <p>quicksight:GetFlow</p></li>
    /// <li>
    /// <p>quicksight:UpdateFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StartFlowSession</p></li>
    /// <li>
    /// <p>quicksight:StopFlowSession</p></li>
    /// <li>
    /// <p>quicksight:GetFlowSession</p></li>
    /// <li>
    /// <p>quicksight:CreatePresignedUrl</p></li>
    /// <li>
    /// <p>quicksight:GetFlowStages</p></li>
    /// </ul>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// <p>The Amazon Resource Name (ARN) of the principal. This can be an Amazon QuickSight user, group or namespace associated with the flow. Namespace principal can only be set as a viewer and will grant everyone in the same namespace viewer permissions.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the principal. This can be an Amazon QuickSight user, group or namespace associated with the flow. Namespace principal can only be set as a viewer and will grant everyone in the same namespace viewer permissions.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the principal. This can be an Amazon QuickSight user, group or namespace associated with the flow. Namespace principal can only be set as a viewer and will grant everyone in the same namespace viewer permissions.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Consumes the builder and constructs a [`Permission`](crate::types::Permission).
    /// This method will fail if any of the following fields are not set:
    /// - [`actions`](crate::types::builders::PermissionBuilder::actions)
    /// - [`principal`](crate::types::builders::PermissionBuilder::principal)
    pub fn build(self) -> ::std::result::Result<crate::types::Permission, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Permission {
            actions: self.actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actions",
                    "actions was not specified but it is required when building Permission",
                )
            })?,
            principal: self.principal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal",
                    "principal was not specified but it is required when building Permission",
                )
            })?,
        })
    }
}
