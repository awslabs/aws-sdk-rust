// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Conditional formatting options of a <code>GaugeChartVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GaugeChartConditionalFormattingOption {
    /// <p>The conditional formatting for the primary value of a <code>GaugeChartVisual</code>.</p>
    #[doc(hidden)]
    pub primary_value:
        std::option::Option<crate::types::GaugeChartPrimaryValueConditionalFormatting>,
    /// <p>The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>.</p>
    #[doc(hidden)]
    pub arc: std::option::Option<crate::types::GaugeChartArcConditionalFormatting>,
}
impl GaugeChartConditionalFormattingOption {
    /// <p>The conditional formatting for the primary value of a <code>GaugeChartVisual</code>.</p>
    pub fn primary_value(
        &self,
    ) -> std::option::Option<&crate::types::GaugeChartPrimaryValueConditionalFormatting> {
        self.primary_value.as_ref()
    }
    /// <p>The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>.</p>
    pub fn arc(&self) -> std::option::Option<&crate::types::GaugeChartArcConditionalFormatting> {
        self.arc.as_ref()
    }
}
impl GaugeChartConditionalFormattingOption {
    /// Creates a new builder-style object to manufacture [`GaugeChartConditionalFormattingOption`](crate::types::GaugeChartConditionalFormattingOption).
    pub fn builder() -> crate::types::builders::GaugeChartConditionalFormattingOptionBuilder {
        crate::types::builders::GaugeChartConditionalFormattingOptionBuilder::default()
    }
}

/// A builder for [`GaugeChartConditionalFormattingOption`](crate::types::GaugeChartConditionalFormattingOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GaugeChartConditionalFormattingOptionBuilder {
    pub(crate) primary_value:
        std::option::Option<crate::types::GaugeChartPrimaryValueConditionalFormatting>,
    pub(crate) arc: std::option::Option<crate::types::GaugeChartArcConditionalFormatting>,
}
impl GaugeChartConditionalFormattingOptionBuilder {
    /// <p>The conditional formatting for the primary value of a <code>GaugeChartVisual</code>.</p>
    pub fn primary_value(
        mut self,
        input: crate::types::GaugeChartPrimaryValueConditionalFormatting,
    ) -> Self {
        self.primary_value = Some(input);
        self
    }
    /// <p>The conditional formatting for the primary value of a <code>GaugeChartVisual</code>.</p>
    pub fn set_primary_value(
        mut self,
        input: std::option::Option<crate::types::GaugeChartPrimaryValueConditionalFormatting>,
    ) -> Self {
        self.primary_value = input;
        self
    }
    /// <p>The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>.</p>
    pub fn arc(mut self, input: crate::types::GaugeChartArcConditionalFormatting) -> Self {
        self.arc = Some(input);
        self
    }
    /// <p>The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>.</p>
    pub fn set_arc(
        mut self,
        input: std::option::Option<crate::types::GaugeChartArcConditionalFormatting>,
    ) -> Self {
        self.arc = input;
        self
    }
    /// Consumes the builder and constructs a [`GaugeChartConditionalFormattingOption`](crate::types::GaugeChartConditionalFormattingOption).
    pub fn build(self) -> crate::types::GaugeChartConditionalFormattingOption {
        crate::types::GaugeChartConditionalFormattingOption {
            primary_value: self.primary_value,
            arc: self.arc,
        }
    }
}
