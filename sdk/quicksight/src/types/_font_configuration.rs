// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the display properties of the given text.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FontConfiguration {
    /// <p>The option that determines the text display size.</p>
    #[doc(hidden)]
    pub font_size: std::option::Option<crate::types::FontSize>,
    /// <p>Determines the appearance of decorative lines on the text.</p>
    #[doc(hidden)]
    pub font_decoration: std::option::Option<crate::types::FontDecoration>,
    /// <p>Determines the color of the text.</p>
    #[doc(hidden)]
    pub font_color: std::option::Option<std::string::String>,
    /// <p>The option that determines the text display weight, or boldness.</p>
    #[doc(hidden)]
    pub font_weight: std::option::Option<crate::types::FontWeight>,
    /// <p>Determines the text display face that is inherited by the given font family.</p>
    #[doc(hidden)]
    pub font_style: std::option::Option<crate::types::FontStyle>,
}
impl FontConfiguration {
    /// <p>The option that determines the text display size.</p>
    pub fn font_size(&self) -> std::option::Option<&crate::types::FontSize> {
        self.font_size.as_ref()
    }
    /// <p>Determines the appearance of decorative lines on the text.</p>
    pub fn font_decoration(&self) -> std::option::Option<&crate::types::FontDecoration> {
        self.font_decoration.as_ref()
    }
    /// <p>Determines the color of the text.</p>
    pub fn font_color(&self) -> std::option::Option<&str> {
        self.font_color.as_deref()
    }
    /// <p>The option that determines the text display weight, or boldness.</p>
    pub fn font_weight(&self) -> std::option::Option<&crate::types::FontWeight> {
        self.font_weight.as_ref()
    }
    /// <p>Determines the text display face that is inherited by the given font family.</p>
    pub fn font_style(&self) -> std::option::Option<&crate::types::FontStyle> {
        self.font_style.as_ref()
    }
}
impl FontConfiguration {
    /// Creates a new builder-style object to manufacture [`FontConfiguration`](crate::types::FontConfiguration).
    pub fn builder() -> crate::types::builders::FontConfigurationBuilder {
        crate::types::builders::FontConfigurationBuilder::default()
    }
}

/// A builder for [`FontConfiguration`](crate::types::FontConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FontConfigurationBuilder {
    pub(crate) font_size: std::option::Option<crate::types::FontSize>,
    pub(crate) font_decoration: std::option::Option<crate::types::FontDecoration>,
    pub(crate) font_color: std::option::Option<std::string::String>,
    pub(crate) font_weight: std::option::Option<crate::types::FontWeight>,
    pub(crate) font_style: std::option::Option<crate::types::FontStyle>,
}
impl FontConfigurationBuilder {
    /// <p>The option that determines the text display size.</p>
    pub fn font_size(mut self, input: crate::types::FontSize) -> Self {
        self.font_size = Some(input);
        self
    }
    /// <p>The option that determines the text display size.</p>
    pub fn set_font_size(mut self, input: std::option::Option<crate::types::FontSize>) -> Self {
        self.font_size = input;
        self
    }
    /// <p>Determines the appearance of decorative lines on the text.</p>
    pub fn font_decoration(mut self, input: crate::types::FontDecoration) -> Self {
        self.font_decoration = Some(input);
        self
    }
    /// <p>Determines the appearance of decorative lines on the text.</p>
    pub fn set_font_decoration(
        mut self,
        input: std::option::Option<crate::types::FontDecoration>,
    ) -> Self {
        self.font_decoration = input;
        self
    }
    /// <p>Determines the color of the text.</p>
    pub fn font_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.font_color = Some(input.into());
        self
    }
    /// <p>Determines the color of the text.</p>
    pub fn set_font_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.font_color = input;
        self
    }
    /// <p>The option that determines the text display weight, or boldness.</p>
    pub fn font_weight(mut self, input: crate::types::FontWeight) -> Self {
        self.font_weight = Some(input);
        self
    }
    /// <p>The option that determines the text display weight, or boldness.</p>
    pub fn set_font_weight(mut self, input: std::option::Option<crate::types::FontWeight>) -> Self {
        self.font_weight = input;
        self
    }
    /// <p>Determines the text display face that is inherited by the given font family.</p>
    pub fn font_style(mut self, input: crate::types::FontStyle) -> Self {
        self.font_style = Some(input);
        self
    }
    /// <p>Determines the text display face that is inherited by the given font family.</p>
    pub fn set_font_style(mut self, input: std::option::Option<crate::types::FontStyle>) -> Self {
        self.font_style = input;
        self
    }
    /// Consumes the builder and constructs a [`FontConfiguration`](crate::types::FontConfiguration).
    pub fn build(self) -> crate::types::FontConfiguration {
        crate::types::FontConfiguration {
            font_size: self.font_size,
            font_decoration: self.font_decoration,
            font_color: self.font_color,
            font_weight: self.font_weight,
            font_style: self.font_style,
        }
    }
}
