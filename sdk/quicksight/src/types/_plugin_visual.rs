// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A flexible visualization type that allows engineers to create new custom charts in Quick Sight.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginVisual {
    /// <p>The ID of the visual that you want to use.</p>
    pub visual_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) that reflects the plugin and version.</p>
    pub plugin_arn: ::std::string::String,
    /// <p>The title label options for a visual.</p>
    pub title: ::std::option::Option<crate::types::VisualTitleLabelOptions>,
    /// <p>The subtitle label options for a visual.</p>
    pub subtitle: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    /// <p>A description of the plugin field wells and their persisted properties.</p>
    pub chart_configuration: ::std::option::Option<crate::types::PluginVisualConfiguration>,
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
    /// <p>The alt text for the visual.</p>
    pub visual_content_alt_text: ::std::option::Option<::std::string::String>,
}
impl PluginVisual {
    /// <p>The ID of the visual that you want to use.</p>
    pub fn visual_id(&self) -> &str {
        use std::ops::Deref;
        self.visual_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) that reflects the plugin and version.</p>
    pub fn plugin_arn(&self) -> &str {
        use std::ops::Deref;
        self.plugin_arn.deref()
    }
    /// <p>The title label options for a visual.</p>
    pub fn title(&self) -> ::std::option::Option<&crate::types::VisualTitleLabelOptions> {
        self.title.as_ref()
    }
    /// <p>The subtitle label options for a visual.</p>
    pub fn subtitle(&self) -> ::std::option::Option<&crate::types::VisualSubtitleLabelOptions> {
        self.subtitle.as_ref()
    }
    /// <p>A description of the plugin field wells and their persisted properties.</p>
    pub fn chart_configuration(&self) -> ::std::option::Option<&crate::types::PluginVisualConfiguration> {
        self.chart_configuration.as_ref()
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::VisualCustomAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The alt text for the visual.</p>
    pub fn visual_content_alt_text(&self) -> ::std::option::Option<&str> {
        self.visual_content_alt_text.as_deref()
    }
}
impl PluginVisual {
    /// Creates a new builder-style object to manufacture [`PluginVisual`](crate::types::PluginVisual).
    pub fn builder() -> crate::types::builders::PluginVisualBuilder {
        crate::types::builders::PluginVisualBuilder::default()
    }
}

/// A builder for [`PluginVisual`](crate::types::PluginVisual).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginVisualBuilder {
    pub(crate) visual_id: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<crate::types::VisualTitleLabelOptions>,
    pub(crate) subtitle: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>,
    pub(crate) chart_configuration: ::std::option::Option<crate::types::PluginVisualConfiguration>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>,
    pub(crate) visual_content_alt_text: ::std::option::Option<::std::string::String>,
}
impl PluginVisualBuilder {
    /// <p>The ID of the visual that you want to use.</p>
    /// This field is required.
    pub fn visual_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the visual that you want to use.</p>
    pub fn set_visual_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_id = input;
        self
    }
    /// <p>The ID of the visual that you want to use.</p>
    pub fn get_visual_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_id
    }
    /// <p>The Amazon Resource Name (ARN) that reflects the plugin and version.</p>
    /// This field is required.
    pub fn plugin_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that reflects the plugin and version.</p>
    pub fn set_plugin_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that reflects the plugin and version.</p>
    pub fn get_plugin_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_arn
    }
    /// <p>The title label options for a visual.</p>
    pub fn title(mut self, input: crate::types::VisualTitleLabelOptions) -> Self {
        self.title = ::std::option::Option::Some(input);
        self
    }
    /// <p>The title label options for a visual.</p>
    pub fn set_title(mut self, input: ::std::option::Option<crate::types::VisualTitleLabelOptions>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title label options for a visual.</p>
    pub fn get_title(&self) -> &::std::option::Option<crate::types::VisualTitleLabelOptions> {
        &self.title
    }
    /// <p>The subtitle label options for a visual.</p>
    pub fn subtitle(mut self, input: crate::types::VisualSubtitleLabelOptions) -> Self {
        self.subtitle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subtitle label options for a visual.</p>
    pub fn set_subtitle(mut self, input: ::std::option::Option<crate::types::VisualSubtitleLabelOptions>) -> Self {
        self.subtitle = input;
        self
    }
    /// <p>The subtitle label options for a visual.</p>
    pub fn get_subtitle(&self) -> &::std::option::Option<crate::types::VisualSubtitleLabelOptions> {
        &self.subtitle
    }
    /// <p>A description of the plugin field wells and their persisted properties.</p>
    pub fn chart_configuration(mut self, input: crate::types::PluginVisualConfiguration) -> Self {
        self.chart_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A description of the plugin field wells and their persisted properties.</p>
    pub fn set_chart_configuration(mut self, input: ::std::option::Option<crate::types::PluginVisualConfiguration>) -> Self {
        self.chart_configuration = input;
        self
    }
    /// <p>A description of the plugin field wells and their persisted properties.</p>
    pub fn get_chart_configuration(&self) -> &::std::option::Option<crate::types::PluginVisualConfiguration> {
        &self.chart_configuration
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn actions(mut self, input: crate::types::VisualCustomAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The list of custom actions that are configured for a visual.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VisualCustomAction>> {
        &self.actions
    }
    /// <p>The alt text for the visual.</p>
    pub fn visual_content_alt_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visual_content_alt_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alt text for the visual.</p>
    pub fn set_visual_content_alt_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visual_content_alt_text = input;
        self
    }
    /// <p>The alt text for the visual.</p>
    pub fn get_visual_content_alt_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.visual_content_alt_text
    }
    /// Consumes the builder and constructs a [`PluginVisual`](crate::types::PluginVisual).
    /// This method will fail if any of the following fields are not set:
    /// - [`visual_id`](crate::types::builders::PluginVisualBuilder::visual_id)
    /// - [`plugin_arn`](crate::types::builders::PluginVisualBuilder::plugin_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::PluginVisual, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PluginVisual {
            visual_id: self.visual_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visual_id",
                    "visual_id was not specified but it is required when building PluginVisual",
                )
            })?,
            plugin_arn: self.plugin_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plugin_arn",
                    "plugin_arn was not specified but it is required when building PluginVisual",
                )
            })?,
            title: self.title,
            subtitle: self.subtitle,
            chart_configuration: self.chart_configuration,
            actions: self.actions,
            visual_content_alt_text: self.visual_content_alt_text,
        })
    }
}
