// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A grid layout to define the placement of sheet control.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SheetControlLayout {
    /// <p>The configuration that determines the elements and canvas size options of sheet control.</p>
    pub configuration: ::std::option::Option<crate::types::SheetControlLayoutConfiguration>,
}
impl SheetControlLayout {
    /// <p>The configuration that determines the elements and canvas size options of sheet control.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::SheetControlLayoutConfiguration> {
        self.configuration.as_ref()
    }
}
impl SheetControlLayout {
    /// Creates a new builder-style object to manufacture [`SheetControlLayout`](crate::types::SheetControlLayout).
    pub fn builder() -> crate::types::builders::SheetControlLayoutBuilder {
        crate::types::builders::SheetControlLayoutBuilder::default()
    }
}

/// A builder for [`SheetControlLayout`](crate::types::SheetControlLayout).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SheetControlLayoutBuilder {
    pub(crate) configuration: ::std::option::Option<crate::types::SheetControlLayoutConfiguration>,
}
impl SheetControlLayoutBuilder {
    /// <p>The configuration that determines the elements and canvas size options of sheet control.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::SheetControlLayoutConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that determines the elements and canvas size options of sheet control.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::SheetControlLayoutConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration that determines the elements and canvas size options of sheet control.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::SheetControlLayoutConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`SheetControlLayout`](crate::types::SheetControlLayout).
    pub fn build(self) -> crate::types::SheetControlLayout {
        crate::types::SheetControlLayout {
            configuration: self.configuration,
        }
    }
}
