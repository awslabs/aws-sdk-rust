// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Conditional formatting options of a <code>FilledMapVisual</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilledMapConditionalFormattingOption {
    /// <p>The conditional formatting that determines the shape of the filled map.</p>
    pub shape: ::std::option::Option<crate::types::FilledMapShapeConditionalFormatting>,
}
impl FilledMapConditionalFormattingOption {
    /// <p>The conditional formatting that determines the shape of the filled map.</p>
    pub fn shape(&self) -> ::std::option::Option<&crate::types::FilledMapShapeConditionalFormatting> {
        self.shape.as_ref()
    }
}
impl FilledMapConditionalFormattingOption {
    /// Creates a new builder-style object to manufacture [`FilledMapConditionalFormattingOption`](crate::types::FilledMapConditionalFormattingOption).
    pub fn builder() -> crate::types::builders::FilledMapConditionalFormattingOptionBuilder {
        crate::types::builders::FilledMapConditionalFormattingOptionBuilder::default()
    }
}

/// A builder for [`FilledMapConditionalFormattingOption`](crate::types::FilledMapConditionalFormattingOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilledMapConditionalFormattingOptionBuilder {
    pub(crate) shape: ::std::option::Option<crate::types::FilledMapShapeConditionalFormatting>,
}
impl FilledMapConditionalFormattingOptionBuilder {
    /// <p>The conditional formatting that determines the shape of the filled map.</p>
    /// This field is required.
    pub fn shape(mut self, input: crate::types::FilledMapShapeConditionalFormatting) -> Self {
        self.shape = ::std::option::Option::Some(input);
        self
    }
    /// <p>The conditional formatting that determines the shape of the filled map.</p>
    pub fn set_shape(mut self, input: ::std::option::Option<crate::types::FilledMapShapeConditionalFormatting>) -> Self {
        self.shape = input;
        self
    }
    /// <p>The conditional formatting that determines the shape of the filled map.</p>
    pub fn get_shape(&self) -> &::std::option::Option<crate::types::FilledMapShapeConditionalFormatting> {
        &self.shape
    }
    /// Consumes the builder and constructs a [`FilledMapConditionalFormattingOption`](crate::types::FilledMapConditionalFormattingOption).
    pub fn build(self) -> crate::types::FilledMapConditionalFormattingOption {
        crate::types::FilledMapConditionalFormattingOption { shape: self.shape }
    }
}
