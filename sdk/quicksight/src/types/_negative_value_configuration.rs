// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the negative value configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NegativeValueConfiguration {
    /// <p>Determines the display mode of the negative value configuration.</p>
    #[doc(hidden)]
    pub display_mode: std::option::Option<crate::types::NegativeValueDisplayMode>,
}
impl NegativeValueConfiguration {
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn display_mode(&self) -> std::option::Option<&crate::types::NegativeValueDisplayMode> {
        self.display_mode.as_ref()
    }
}
impl NegativeValueConfiguration {
    /// Creates a new builder-style object to manufacture [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
    pub fn builder() -> crate::types::builders::NegativeValueConfigurationBuilder {
        crate::types::builders::NegativeValueConfigurationBuilder::default()
    }
}

/// A builder for [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NegativeValueConfigurationBuilder {
    pub(crate) display_mode: std::option::Option<crate::types::NegativeValueDisplayMode>,
}
impl NegativeValueConfigurationBuilder {
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn display_mode(mut self, input: crate::types::NegativeValueDisplayMode) -> Self {
        self.display_mode = Some(input);
        self
    }
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn set_display_mode(
        mut self,
        input: std::option::Option<crate::types::NegativeValueDisplayMode>,
    ) -> Self {
        self.display_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
    pub fn build(self) -> crate::types::NegativeValueConfiguration {
        crate::types::NegativeValueConfiguration {
            display_mode: self.display_mode,
        }
    }
}
