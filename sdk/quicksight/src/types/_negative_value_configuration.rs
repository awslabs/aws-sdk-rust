// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the negative value configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NegativeValueConfiguration {
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub display_mode: crate::types::NegativeValueDisplayMode,
}
impl NegativeValueConfiguration {
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn display_mode(&self) -> &crate::types::NegativeValueDisplayMode {
        &self.display_mode
    }
}
impl NegativeValueConfiguration {
    /// Creates a new builder-style object to manufacture [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
    pub fn builder() -> crate::types::builders::NegativeValueConfigurationBuilder {
        crate::types::builders::NegativeValueConfigurationBuilder::default()
    }
}

/// A builder for [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NegativeValueConfigurationBuilder {
    pub(crate) display_mode: ::std::option::Option<crate::types::NegativeValueDisplayMode>,
}
impl NegativeValueConfigurationBuilder {
    /// <p>Determines the display mode of the negative value configuration.</p>
    /// This field is required.
    pub fn display_mode(mut self, input: crate::types::NegativeValueDisplayMode) -> Self {
        self.display_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn set_display_mode(mut self, input: ::std::option::Option<crate::types::NegativeValueDisplayMode>) -> Self {
        self.display_mode = input;
        self
    }
    /// <p>Determines the display mode of the negative value configuration.</p>
    pub fn get_display_mode(&self) -> &::std::option::Option<crate::types::NegativeValueDisplayMode> {
        &self.display_mode
    }
    /// Consumes the builder and constructs a [`NegativeValueConfiguration`](crate::types::NegativeValueConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`display_mode`](crate::types::builders::NegativeValueConfigurationBuilder::display_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::NegativeValueConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NegativeValueConfiguration {
            display_mode: self.display_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_mode",
                    "display_mode was not specified but it is required when building NegativeValueConfiguration",
                )
            })?,
        })
    }
}
