// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A success entry that occurs when a <code>KeyRegistration</code> job is successfully applied to the Quick Sight account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuccessfulKeyRegistrationEntry {
    /// <p>The ARN of the KMS key that is associated with the <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub key_arn: ::std::string::String,
    /// <p>The HTTP status of a <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub status_code: i32,
}
impl SuccessfulKeyRegistrationEntry {
    /// <p>The ARN of the KMS key that is associated with the <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn key_arn(&self) -> &str {
        use std::ops::Deref;
        self.key_arn.deref()
    }
    /// <p>The HTTP status of a <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn status_code(&self) -> i32 {
        self.status_code
    }
}
impl SuccessfulKeyRegistrationEntry {
    /// Creates a new builder-style object to manufacture [`SuccessfulKeyRegistrationEntry`](crate::types::SuccessfulKeyRegistrationEntry).
    pub fn builder() -> crate::types::builders::SuccessfulKeyRegistrationEntryBuilder {
        crate::types::builders::SuccessfulKeyRegistrationEntryBuilder::default()
    }
}

/// A builder for [`SuccessfulKeyRegistrationEntry`](crate::types::SuccessfulKeyRegistrationEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SuccessfulKeyRegistrationEntryBuilder {
    pub(crate) key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<i32>,
}
impl SuccessfulKeyRegistrationEntryBuilder {
    /// <p>The ARN of the KMS key that is associated with the <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    /// This field is required.
    pub fn key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that is associated with the <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn set_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key that is associated with the <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn get_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_arn
    }
    /// <p>The HTTP status of a <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    /// This field is required.
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of a <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The HTTP status of a <code>SuccessfulKeyRegistrationEntry</code> entry.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    /// Consumes the builder and constructs a [`SuccessfulKeyRegistrationEntry`](crate::types::SuccessfulKeyRegistrationEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_arn`](crate::types::builders::SuccessfulKeyRegistrationEntryBuilder::key_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SuccessfulKeyRegistrationEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SuccessfulKeyRegistrationEntry {
            key_arn: self.key_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_arn",
                    "key_arn was not specified but it is required when building SuccessfulKeyRegistrationEntry",
                )
            })?,
            status_code: self.status_code.unwrap_or_default(),
        })
    }
}
