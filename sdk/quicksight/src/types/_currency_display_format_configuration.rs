// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the currency display format configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CurrencyDisplayFormatConfiguration {
    /// <p>Determines the prefix value of the currency format.</p>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>Determines the suffix value of the currency format.</p>
    #[doc(hidden)]
    pub suffix: std::option::Option<std::string::String>,
    /// <p>The options that determine the numeric separator configuration.</p>
    #[doc(hidden)]
    pub separator_configuration: std::option::Option<crate::types::NumericSeparatorConfiguration>,
    /// <p>Determines the symbol for the currency format.</p>
    #[doc(hidden)]
    pub symbol: std::option::Option<std::string::String>,
    /// <p>The option that determines the decimal places configuration.</p>
    #[doc(hidden)]
    pub decimal_places_configuration: std::option::Option<crate::types::DecimalPlacesConfiguration>,
    /// <p>Determines the number scale value for the currency format.</p>
    #[doc(hidden)]
    pub number_scale: std::option::Option<crate::types::NumberScale>,
    /// <p>The options that determine the negative value configuration.</p>
    #[doc(hidden)]
    pub negative_value_configuration: std::option::Option<crate::types::NegativeValueConfiguration>,
    /// <p>The options that determine the null value format configuration.</p>
    #[doc(hidden)]
    pub null_value_format_configuration:
        std::option::Option<crate::types::NullValueFormatConfiguration>,
}
impl CurrencyDisplayFormatConfiguration {
    /// <p>Determines the prefix value of the currency format.</p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>Determines the suffix value of the currency format.</p>
    pub fn suffix(&self) -> std::option::Option<&str> {
        self.suffix.as_deref()
    }
    /// <p>The options that determine the numeric separator configuration.</p>
    pub fn separator_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NumericSeparatorConfiguration> {
        self.separator_configuration.as_ref()
    }
    /// <p>Determines the symbol for the currency format.</p>
    pub fn symbol(&self) -> std::option::Option<&str> {
        self.symbol.as_deref()
    }
    /// <p>The option that determines the decimal places configuration.</p>
    pub fn decimal_places_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DecimalPlacesConfiguration> {
        self.decimal_places_configuration.as_ref()
    }
    /// <p>Determines the number scale value for the currency format.</p>
    pub fn number_scale(&self) -> std::option::Option<&crate::types::NumberScale> {
        self.number_scale.as_ref()
    }
    /// <p>The options that determine the negative value configuration.</p>
    pub fn negative_value_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NegativeValueConfiguration> {
        self.negative_value_configuration.as_ref()
    }
    /// <p>The options that determine the null value format configuration.</p>
    pub fn null_value_format_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NullValueFormatConfiguration> {
        self.null_value_format_configuration.as_ref()
    }
}
impl std::fmt::Debug for CurrencyDisplayFormatConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CurrencyDisplayFormatConfiguration");
        formatter.field("prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("suffix", &"*** Sensitive Data Redacted ***");
        formatter.field("separator_configuration", &self.separator_configuration);
        formatter.field("symbol", &self.symbol);
        formatter.field(
            "decimal_places_configuration",
            &self.decimal_places_configuration,
        );
        formatter.field("number_scale", &self.number_scale);
        formatter.field(
            "negative_value_configuration",
            &self.negative_value_configuration,
        );
        formatter.field(
            "null_value_format_configuration",
            &self.null_value_format_configuration,
        );
        formatter.finish()
    }
}
impl CurrencyDisplayFormatConfiguration {
    /// Creates a new builder-style object to manufacture [`CurrencyDisplayFormatConfiguration`](crate::types::CurrencyDisplayFormatConfiguration).
    pub fn builder() -> crate::types::builders::CurrencyDisplayFormatConfigurationBuilder {
        crate::types::builders::CurrencyDisplayFormatConfigurationBuilder::default()
    }
}

/// A builder for [`CurrencyDisplayFormatConfiguration`](crate::types::CurrencyDisplayFormatConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CurrencyDisplayFormatConfigurationBuilder {
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) suffix: std::option::Option<std::string::String>,
    pub(crate) separator_configuration:
        std::option::Option<crate::types::NumericSeparatorConfiguration>,
    pub(crate) symbol: std::option::Option<std::string::String>,
    pub(crate) decimal_places_configuration:
        std::option::Option<crate::types::DecimalPlacesConfiguration>,
    pub(crate) number_scale: std::option::Option<crate::types::NumberScale>,
    pub(crate) negative_value_configuration:
        std::option::Option<crate::types::NegativeValueConfiguration>,
    pub(crate) null_value_format_configuration:
        std::option::Option<crate::types::NullValueFormatConfiguration>,
}
impl CurrencyDisplayFormatConfigurationBuilder {
    /// <p>Determines the prefix value of the currency format.</p>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>Determines the prefix value of the currency format.</p>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>Determines the suffix value of the currency format.</p>
    pub fn suffix(mut self, input: impl Into<std::string::String>) -> Self {
        self.suffix = Some(input.into());
        self
    }
    /// <p>Determines the suffix value of the currency format.</p>
    pub fn set_suffix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.suffix = input;
        self
    }
    /// <p>The options that determine the numeric separator configuration.</p>
    pub fn separator_configuration(
        mut self,
        input: crate::types::NumericSeparatorConfiguration,
    ) -> Self {
        self.separator_configuration = Some(input);
        self
    }
    /// <p>The options that determine the numeric separator configuration.</p>
    pub fn set_separator_configuration(
        mut self,
        input: std::option::Option<crate::types::NumericSeparatorConfiguration>,
    ) -> Self {
        self.separator_configuration = input;
        self
    }
    /// <p>Determines the symbol for the currency format.</p>
    pub fn symbol(mut self, input: impl Into<std::string::String>) -> Self {
        self.symbol = Some(input.into());
        self
    }
    /// <p>Determines the symbol for the currency format.</p>
    pub fn set_symbol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.symbol = input;
        self
    }
    /// <p>The option that determines the decimal places configuration.</p>
    pub fn decimal_places_configuration(
        mut self,
        input: crate::types::DecimalPlacesConfiguration,
    ) -> Self {
        self.decimal_places_configuration = Some(input);
        self
    }
    /// <p>The option that determines the decimal places configuration.</p>
    pub fn set_decimal_places_configuration(
        mut self,
        input: std::option::Option<crate::types::DecimalPlacesConfiguration>,
    ) -> Self {
        self.decimal_places_configuration = input;
        self
    }
    /// <p>Determines the number scale value for the currency format.</p>
    pub fn number_scale(mut self, input: crate::types::NumberScale) -> Self {
        self.number_scale = Some(input);
        self
    }
    /// <p>Determines the number scale value for the currency format.</p>
    pub fn set_number_scale(
        mut self,
        input: std::option::Option<crate::types::NumberScale>,
    ) -> Self {
        self.number_scale = input;
        self
    }
    /// <p>The options that determine the negative value configuration.</p>
    pub fn negative_value_configuration(
        mut self,
        input: crate::types::NegativeValueConfiguration,
    ) -> Self {
        self.negative_value_configuration = Some(input);
        self
    }
    /// <p>The options that determine the negative value configuration.</p>
    pub fn set_negative_value_configuration(
        mut self,
        input: std::option::Option<crate::types::NegativeValueConfiguration>,
    ) -> Self {
        self.negative_value_configuration = input;
        self
    }
    /// <p>The options that determine the null value format configuration.</p>
    pub fn null_value_format_configuration(
        mut self,
        input: crate::types::NullValueFormatConfiguration,
    ) -> Self {
        self.null_value_format_configuration = Some(input);
        self
    }
    /// <p>The options that determine the null value format configuration.</p>
    pub fn set_null_value_format_configuration(
        mut self,
        input: std::option::Option<crate::types::NullValueFormatConfiguration>,
    ) -> Self {
        self.null_value_format_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CurrencyDisplayFormatConfiguration`](crate::types::CurrencyDisplayFormatConfiguration).
    pub fn build(self) -> crate::types::CurrencyDisplayFormatConfiguration {
        crate::types::CurrencyDisplayFormatConfiguration {
            prefix: self.prefix,
            suffix: self.suffix,
            separator_configuration: self.separator_configuration,
            symbol: self.symbol,
            decimal_places_configuration: self.decimal_places_configuration,
            number_scale: self.number_scale,
            negative_value_configuration: self.negative_value_configuration,
            null_value_format_configuration: self.null_value_format_configuration,
        }
    }
}
impl std::fmt::Debug for CurrencyDisplayFormatConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CurrencyDisplayFormatConfigurationBuilder");
        formatter.field("prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("suffix", &"*** Sensitive Data Redacted ***");
        formatter.field("separator_configuration", &self.separator_configuration);
        formatter.field("symbol", &self.symbol);
        formatter.field(
            "decimal_places_configuration",
            &self.decimal_places_configuration,
        );
        formatter.field("number_scale", &self.number_scale);
        formatter.field(
            "negative_value_configuration",
            &self.negative_value_configuration,
        );
        formatter.field(
            "null_value_format_configuration",
            &self.null_value_format_configuration,
        );
        formatter.finish()
    }
}
