// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the title styles for each small multiples panel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PanelTitleOptions {
    /// <p>Determines whether or not panel titles are displayed.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Configures the display properties of the given text.</p>
    #[doc(hidden)]
    pub font_configuration: std::option::Option<crate::types::FontConfiguration>,
    /// <p>Sets the horizontal text alignment of the title within each panel.</p>
    #[doc(hidden)]
    pub horizontal_text_alignment: std::option::Option<crate::types::HorizontalTextAlignment>,
}
impl PanelTitleOptions {
    /// <p>Determines whether or not panel titles are displayed.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>Configures the display properties of the given text.</p>
    pub fn font_configuration(&self) -> std::option::Option<&crate::types::FontConfiguration> {
        self.font_configuration.as_ref()
    }
    /// <p>Sets the horizontal text alignment of the title within each panel.</p>
    pub fn horizontal_text_alignment(
        &self,
    ) -> std::option::Option<&crate::types::HorizontalTextAlignment> {
        self.horizontal_text_alignment.as_ref()
    }
}
impl PanelTitleOptions {
    /// Creates a new builder-style object to manufacture [`PanelTitleOptions`](crate::types::PanelTitleOptions).
    pub fn builder() -> crate::types::builders::PanelTitleOptionsBuilder {
        crate::types::builders::PanelTitleOptionsBuilder::default()
    }
}

/// A builder for [`PanelTitleOptions`](crate::types::PanelTitleOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PanelTitleOptionsBuilder {
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) font_configuration: std::option::Option<crate::types::FontConfiguration>,
    pub(crate) horizontal_text_alignment:
        std::option::Option<crate::types::HorizontalTextAlignment>,
}
impl PanelTitleOptionsBuilder {
    /// <p>Determines whether or not panel titles are displayed.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>Determines whether or not panel titles are displayed.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Configures the display properties of the given text.</p>
    pub fn font_configuration(mut self, input: crate::types::FontConfiguration) -> Self {
        self.font_configuration = Some(input);
        self
    }
    /// <p>Configures the display properties of the given text.</p>
    pub fn set_font_configuration(
        mut self,
        input: std::option::Option<crate::types::FontConfiguration>,
    ) -> Self {
        self.font_configuration = input;
        self
    }
    /// <p>Sets the horizontal text alignment of the title within each panel.</p>
    pub fn horizontal_text_alignment(
        mut self,
        input: crate::types::HorizontalTextAlignment,
    ) -> Self {
        self.horizontal_text_alignment = Some(input);
        self
    }
    /// <p>Sets the horizontal text alignment of the title within each panel.</p>
    pub fn set_horizontal_text_alignment(
        mut self,
        input: std::option::Option<crate::types::HorizontalTextAlignment>,
    ) -> Self {
        self.horizontal_text_alignment = input;
        self
    }
    /// Consumes the builder and constructs a [`PanelTitleOptions`](crate::types::PanelTitleOptions).
    pub fn build(self) -> crate::types::PanelTitleOptions {
        crate::types::PanelTitleOptions {
            visibility: self.visibility,
            font_configuration: self.font_configuration,
            horizontal_text_alignment: self.horizontal_text_alignment,
        }
    }
}
