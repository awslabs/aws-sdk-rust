// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters that are required to connect to a S3 Knowledge Base data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3KnowledgeBaseParameters {
    /// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 Knowledge Base data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 Knowledge Base data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the S3 bucket that contains the knowledge base data.</p>
    pub bucket_url: ::std::string::String,
    /// <p>The location of metadata files within the S3 bucket that describe the structure and content of the knowledge base.</p>
    pub metadata_files_location: ::std::option::Option<::std::string::String>,
}
impl S3KnowledgeBaseParameters {
    /// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 Knowledge Base data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 Knowledge Base data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The URL of the S3 bucket that contains the knowledge base data.</p>
    pub fn bucket_url(&self) -> &str {
        use std::ops::Deref;
        self.bucket_url.deref()
    }
    /// <p>The location of metadata files within the S3 bucket that describe the structure and content of the knowledge base.</p>
    pub fn metadata_files_location(&self) -> ::std::option::Option<&str> {
        self.metadata_files_location.as_deref()
    }
}
impl S3KnowledgeBaseParameters {
    /// Creates a new builder-style object to manufacture [`S3KnowledgeBaseParameters`](crate::types::S3KnowledgeBaseParameters).
    pub fn builder() -> crate::types::builders::S3KnowledgeBaseParametersBuilder {
        crate::types::builders::S3KnowledgeBaseParametersBuilder::default()
    }
}

/// A builder for [`S3KnowledgeBaseParameters`](crate::types::S3KnowledgeBaseParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3KnowledgeBaseParametersBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_url: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_files_location: ::std::option::Option<::std::string::String>,
}
impl S3KnowledgeBaseParametersBuilder {
    /// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 Knowledge Base data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 Knowledge Base data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 Knowledge Base data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 Knowledge Base data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 Knowledge Base data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 Knowledge Base data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The URL of the S3 bucket that contains the knowledge base data.</p>
    /// This field is required.
    pub fn bucket_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the S3 bucket that contains the knowledge base data.</p>
    pub fn set_bucket_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_url = input;
        self
    }
    /// <p>The URL of the S3 bucket that contains the knowledge base data.</p>
    pub fn get_bucket_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_url
    }
    /// <p>The location of metadata files within the S3 bucket that describe the structure and content of the knowledge base.</p>
    pub fn metadata_files_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_files_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location of metadata files within the S3 bucket that describe the structure and content of the knowledge base.</p>
    pub fn set_metadata_files_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_files_location = input;
        self
    }
    /// <p>The location of metadata files within the S3 bucket that describe the structure and content of the knowledge base.</p>
    pub fn get_metadata_files_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_files_location
    }
    /// Consumes the builder and constructs a [`S3KnowledgeBaseParameters`](crate::types::S3KnowledgeBaseParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_url`](crate::types::builders::S3KnowledgeBaseParametersBuilder::bucket_url)
    pub fn build(self) -> ::std::result::Result<crate::types::S3KnowledgeBaseParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3KnowledgeBaseParameters {
            role_arn: self.role_arn,
            bucket_url: self.bucket_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_url",
                    "bucket_url was not specified but it is required when building S3KnowledgeBaseParameters",
                )
            })?,
            metadata_files_location: self.metadata_files_location,
        })
    }
}
