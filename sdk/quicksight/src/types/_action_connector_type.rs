// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ActionConnectorType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let actionconnectortype = unimplemented!();
/// match actionconnectortype {
///     ActionConnectorType::AmazonBedrockAgentRuntime => { /* ... */ },
///     ActionConnectorType::AmazonBedrockDataAutomationRuntime => { /* ... */ },
///     ActionConnectorType::AmazonBedrockRuntime => { /* ... */ },
///     ActionConnectorType::AmazonComprehend => { /* ... */ },
///     ActionConnectorType::AmazonComprehendMedical => { /* ... */ },
///     ActionConnectorType::AmazonS3 => { /* ... */ },
///     ActionConnectorType::AmazonTextract => { /* ... */ },
///     ActionConnectorType::Asana => { /* ... */ },
///     ActionConnectorType::AtlassianConfluence => { /* ... */ },
///     ActionConnectorType::BambooHr => { /* ... */ },
///     ActionConnectorType::GenericHttp => { /* ... */ },
///     ActionConnectorType::JiraCloud => { /* ... */ },
///     ActionConnectorType::MicrosoftOnedrive => { /* ... */ },
///     ActionConnectorType::MicrosoftOutlook => { /* ... */ },
///     ActionConnectorType::MicrosoftSharepoint => { /* ... */ },
///     ActionConnectorType::MicrosoftTeams => { /* ... */ },
///     ActionConnectorType::PagerdutyAdvance => { /* ... */ },
///     ActionConnectorType::SalesforceCrm => { /* ... */ },
///     ActionConnectorType::SapBillofmaterials => { /* ... */ },
///     ActionConnectorType::SapBusinesspartner => { /* ... */ },
///     ActionConnectorType::SapMaterialstock => { /* ... */ },
///     ActionConnectorType::SapPhysicalinventory => { /* ... */ },
///     ActionConnectorType::SapProductmasterdata => { /* ... */ },
///     ActionConnectorType::ServicenowNowPlatform => { /* ... */ },
///     ActionConnectorType::Slack => { /* ... */ },
///     ActionConnectorType::Smartsheet => { /* ... */ },
///     ActionConnectorType::ZendeskSuite => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `actionconnectortype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ActionConnectorType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ActionConnectorType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ActionConnectorType::NewFeature` is defined.
/// Specifically, when `actionconnectortype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ActionConnectorType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ActionConnectorType {
    #[allow(missing_docs)] // documentation missing in model
    AmazonBedrockAgentRuntime,
    #[allow(missing_docs)] // documentation missing in model
    AmazonBedrockDataAutomationRuntime,
    #[allow(missing_docs)] // documentation missing in model
    AmazonBedrockRuntime,
    #[allow(missing_docs)] // documentation missing in model
    AmazonComprehend,
    #[allow(missing_docs)] // documentation missing in model
    AmazonComprehendMedical,
    #[allow(missing_docs)] // documentation missing in model
    AmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    AmazonTextract,
    #[allow(missing_docs)] // documentation missing in model
    Asana,
    #[allow(missing_docs)] // documentation missing in model
    AtlassianConfluence,
    #[allow(missing_docs)] // documentation missing in model
    BambooHr,
    #[allow(missing_docs)] // documentation missing in model
    GenericHttp,
    #[allow(missing_docs)] // documentation missing in model
    JiraCloud,
    #[allow(missing_docs)] // documentation missing in model
    MicrosoftOnedrive,
    #[allow(missing_docs)] // documentation missing in model
    MicrosoftOutlook,
    #[allow(missing_docs)] // documentation missing in model
    MicrosoftSharepoint,
    #[allow(missing_docs)] // documentation missing in model
    MicrosoftTeams,
    #[allow(missing_docs)] // documentation missing in model
    PagerdutyAdvance,
    #[allow(missing_docs)] // documentation missing in model
    SalesforceCrm,
    #[allow(missing_docs)] // documentation missing in model
    SapBillofmaterials,
    #[allow(missing_docs)] // documentation missing in model
    SapBusinesspartner,
    #[allow(missing_docs)] // documentation missing in model
    SapMaterialstock,
    #[allow(missing_docs)] // documentation missing in model
    SapPhysicalinventory,
    #[allow(missing_docs)] // documentation missing in model
    SapProductmasterdata,
    #[allow(missing_docs)] // documentation missing in model
    ServicenowNowPlatform,
    #[allow(missing_docs)] // documentation missing in model
    Slack,
    #[allow(missing_docs)] // documentation missing in model
    Smartsheet,
    #[allow(missing_docs)] // documentation missing in model
    ZendeskSuite,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ActionConnectorType {
    fn from(s: &str) -> Self {
        match s {
            "AMAZON_BEDROCK_AGENT_RUNTIME" => ActionConnectorType::AmazonBedrockAgentRuntime,
            "AMAZON_BEDROCK_DATA_AUTOMATION_RUNTIME" => ActionConnectorType::AmazonBedrockDataAutomationRuntime,
            "AMAZON_BEDROCK_RUNTIME" => ActionConnectorType::AmazonBedrockRuntime,
            "AMAZON_COMPREHEND" => ActionConnectorType::AmazonComprehend,
            "AMAZON_COMPREHEND_MEDICAL" => ActionConnectorType::AmazonComprehendMedical,
            "AMAZON_S3" => ActionConnectorType::AmazonS3,
            "AMAZON_TEXTRACT" => ActionConnectorType::AmazonTextract,
            "ASANA" => ActionConnectorType::Asana,
            "ATLASSIAN_CONFLUENCE" => ActionConnectorType::AtlassianConfluence,
            "BAMBOO_HR" => ActionConnectorType::BambooHr,
            "GENERIC_HTTP" => ActionConnectorType::GenericHttp,
            "JIRA_CLOUD" => ActionConnectorType::JiraCloud,
            "MICROSOFT_ONEDRIVE" => ActionConnectorType::MicrosoftOnedrive,
            "MICROSOFT_OUTLOOK" => ActionConnectorType::MicrosoftOutlook,
            "MICROSOFT_SHAREPOINT" => ActionConnectorType::MicrosoftSharepoint,
            "MICROSOFT_TEAMS" => ActionConnectorType::MicrosoftTeams,
            "PAGERDUTY_ADVANCE" => ActionConnectorType::PagerdutyAdvance,
            "SALESFORCE_CRM" => ActionConnectorType::SalesforceCrm,
            "SAP_BILLOFMATERIALS" => ActionConnectorType::SapBillofmaterials,
            "SAP_BUSINESSPARTNER" => ActionConnectorType::SapBusinesspartner,
            "SAP_MATERIALSTOCK" => ActionConnectorType::SapMaterialstock,
            "SAP_PHYSICALINVENTORY" => ActionConnectorType::SapPhysicalinventory,
            "SAP_PRODUCTMASTERDATA" => ActionConnectorType::SapProductmasterdata,
            "SERVICENOW_NOW_PLATFORM" => ActionConnectorType::ServicenowNowPlatform,
            "SLACK" => ActionConnectorType::Slack,
            "SMARTSHEET" => ActionConnectorType::Smartsheet,
            "ZENDESK_SUITE" => ActionConnectorType::ZendeskSuite,
            other => ActionConnectorType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ActionConnectorType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ActionConnectorType::from(s))
    }
}
impl ActionConnectorType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ActionConnectorType::AmazonBedrockAgentRuntime => "AMAZON_BEDROCK_AGENT_RUNTIME",
            ActionConnectorType::AmazonBedrockDataAutomationRuntime => "AMAZON_BEDROCK_DATA_AUTOMATION_RUNTIME",
            ActionConnectorType::AmazonBedrockRuntime => "AMAZON_BEDROCK_RUNTIME",
            ActionConnectorType::AmazonComprehend => "AMAZON_COMPREHEND",
            ActionConnectorType::AmazonComprehendMedical => "AMAZON_COMPREHEND_MEDICAL",
            ActionConnectorType::AmazonS3 => "AMAZON_S3",
            ActionConnectorType::AmazonTextract => "AMAZON_TEXTRACT",
            ActionConnectorType::Asana => "ASANA",
            ActionConnectorType::AtlassianConfluence => "ATLASSIAN_CONFLUENCE",
            ActionConnectorType::BambooHr => "BAMBOO_HR",
            ActionConnectorType::GenericHttp => "GENERIC_HTTP",
            ActionConnectorType::JiraCloud => "JIRA_CLOUD",
            ActionConnectorType::MicrosoftOnedrive => "MICROSOFT_ONEDRIVE",
            ActionConnectorType::MicrosoftOutlook => "MICROSOFT_OUTLOOK",
            ActionConnectorType::MicrosoftSharepoint => "MICROSOFT_SHAREPOINT",
            ActionConnectorType::MicrosoftTeams => "MICROSOFT_TEAMS",
            ActionConnectorType::PagerdutyAdvance => "PAGERDUTY_ADVANCE",
            ActionConnectorType::SalesforceCrm => "SALESFORCE_CRM",
            ActionConnectorType::SapBillofmaterials => "SAP_BILLOFMATERIALS",
            ActionConnectorType::SapBusinesspartner => "SAP_BUSINESSPARTNER",
            ActionConnectorType::SapMaterialstock => "SAP_MATERIALSTOCK",
            ActionConnectorType::SapPhysicalinventory => "SAP_PHYSICALINVENTORY",
            ActionConnectorType::SapProductmasterdata => "SAP_PRODUCTMASTERDATA",
            ActionConnectorType::ServicenowNowPlatform => "SERVICENOW_NOW_PLATFORM",
            ActionConnectorType::Slack => "SLACK",
            ActionConnectorType::Smartsheet => "SMARTSHEET",
            ActionConnectorType::ZendeskSuite => "ZENDESK_SUITE",
            ActionConnectorType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AMAZON_BEDROCK_AGENT_RUNTIME",
            "AMAZON_BEDROCK_DATA_AUTOMATION_RUNTIME",
            "AMAZON_BEDROCK_RUNTIME",
            "AMAZON_COMPREHEND",
            "AMAZON_COMPREHEND_MEDICAL",
            "AMAZON_S3",
            "AMAZON_TEXTRACT",
            "ASANA",
            "ATLASSIAN_CONFLUENCE",
            "BAMBOO_HR",
            "GENERIC_HTTP",
            "JIRA_CLOUD",
            "MICROSOFT_ONEDRIVE",
            "MICROSOFT_OUTLOOK",
            "MICROSOFT_SHAREPOINT",
            "MICROSOFT_TEAMS",
            "PAGERDUTY_ADVANCE",
            "SALESFORCE_CRM",
            "SAP_BILLOFMATERIALS",
            "SAP_BUSINESSPARTNER",
            "SAP_MATERIALSTOCK",
            "SAP_PHYSICALINVENTORY",
            "SAP_PRODUCTMASTERDATA",
            "SERVICENOW_NOW_PLATFORM",
            "SLACK",
            "SMARTSHEET",
            "ZENDESK_SUITE",
        ]
    }
}
impl ::std::convert::AsRef<str> for ActionConnectorType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ActionConnectorType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ActionConnectorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionConnectorType::AmazonBedrockAgentRuntime => write!(f, "AMAZON_BEDROCK_AGENT_RUNTIME"),
            ActionConnectorType::AmazonBedrockDataAutomationRuntime => write!(f, "AMAZON_BEDROCK_DATA_AUTOMATION_RUNTIME"),
            ActionConnectorType::AmazonBedrockRuntime => write!(f, "AMAZON_BEDROCK_RUNTIME"),
            ActionConnectorType::AmazonComprehend => write!(f, "AMAZON_COMPREHEND"),
            ActionConnectorType::AmazonComprehendMedical => write!(f, "AMAZON_COMPREHEND_MEDICAL"),
            ActionConnectorType::AmazonS3 => write!(f, "AMAZON_S3"),
            ActionConnectorType::AmazonTextract => write!(f, "AMAZON_TEXTRACT"),
            ActionConnectorType::Asana => write!(f, "ASANA"),
            ActionConnectorType::AtlassianConfluence => write!(f, "ATLASSIAN_CONFLUENCE"),
            ActionConnectorType::BambooHr => write!(f, "BAMBOO_HR"),
            ActionConnectorType::GenericHttp => write!(f, "GENERIC_HTTP"),
            ActionConnectorType::JiraCloud => write!(f, "JIRA_CLOUD"),
            ActionConnectorType::MicrosoftOnedrive => write!(f, "MICROSOFT_ONEDRIVE"),
            ActionConnectorType::MicrosoftOutlook => write!(f, "MICROSOFT_OUTLOOK"),
            ActionConnectorType::MicrosoftSharepoint => write!(f, "MICROSOFT_SHAREPOINT"),
            ActionConnectorType::MicrosoftTeams => write!(f, "MICROSOFT_TEAMS"),
            ActionConnectorType::PagerdutyAdvance => write!(f, "PAGERDUTY_ADVANCE"),
            ActionConnectorType::SalesforceCrm => write!(f, "SALESFORCE_CRM"),
            ActionConnectorType::SapBillofmaterials => write!(f, "SAP_BILLOFMATERIALS"),
            ActionConnectorType::SapBusinesspartner => write!(f, "SAP_BUSINESSPARTNER"),
            ActionConnectorType::SapMaterialstock => write!(f, "SAP_MATERIALSTOCK"),
            ActionConnectorType::SapPhysicalinventory => write!(f, "SAP_PHYSICALINVENTORY"),
            ActionConnectorType::SapProductmasterdata => write!(f, "SAP_PRODUCTMASTERDATA"),
            ActionConnectorType::ServicenowNowPlatform => write!(f, "SERVICENOW_NOW_PLATFORM"),
            ActionConnectorType::Slack => write!(f, "SLACK"),
            ActionConnectorType::Smartsheet => write!(f, "SMARTSHEET"),
            ActionConnectorType::ZendeskSuite => write!(f, "ZENDESK_SUITE"),
            ActionConnectorType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
