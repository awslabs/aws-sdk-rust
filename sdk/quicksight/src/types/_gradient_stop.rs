// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the gradient stop configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GradientStop {
    /// <p>Determines gradient offset value.</p>
    pub gradient_offset: f64,
    /// <p>Determines the data value.</p>
    pub data_value: ::std::option::Option<f64>,
    /// <p>Determines the color.</p>
    pub color: ::std::option::Option<::std::string::String>,
}
impl GradientStop {
    /// <p>Determines gradient offset value.</p>
    pub fn gradient_offset(&self) -> f64 {
        self.gradient_offset
    }
    /// <p>Determines the data value.</p>
    pub fn data_value(&self) -> ::std::option::Option<f64> {
        self.data_value
    }
    /// <p>Determines the color.</p>
    pub fn color(&self) -> ::std::option::Option<&str> {
        self.color.as_deref()
    }
}
impl GradientStop {
    /// Creates a new builder-style object to manufacture [`GradientStop`](crate::types::GradientStop).
    pub fn builder() -> crate::types::builders::GradientStopBuilder {
        crate::types::builders::GradientStopBuilder::default()
    }
}

/// A builder for [`GradientStop`](crate::types::GradientStop).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GradientStopBuilder {
    pub(crate) gradient_offset: ::std::option::Option<f64>,
    pub(crate) data_value: ::std::option::Option<f64>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
}
impl GradientStopBuilder {
    /// <p>Determines gradient offset value.</p>
    /// This field is required.
    pub fn gradient_offset(mut self, input: f64) -> Self {
        self.gradient_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines gradient offset value.</p>
    pub fn set_gradient_offset(mut self, input: ::std::option::Option<f64>) -> Self {
        self.gradient_offset = input;
        self
    }
    /// <p>Determines gradient offset value.</p>
    pub fn get_gradient_offset(&self) -> &::std::option::Option<f64> {
        &self.gradient_offset
    }
    /// <p>Determines the data value.</p>
    pub fn data_value(mut self, input: f64) -> Self {
        self.data_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the data value.</p>
    pub fn set_data_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.data_value = input;
        self
    }
    /// <p>Determines the data value.</p>
    pub fn get_data_value(&self) -> &::std::option::Option<f64> {
        &self.data_value
    }
    /// <p>Determines the color.</p>
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the color.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>Determines the color.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// Consumes the builder and constructs a [`GradientStop`](crate::types::GradientStop).
    pub fn build(self) -> crate::types::GradientStop {
        crate::types::GradientStop {
            gradient_offset: self.gradient_offset.unwrap_or_default(),
            data_value: self.data_value,
            color: self.color,
        }
    }
}
