// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedshiftParameters {
    /// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
    #[doc(hidden)]
    pub host: std::option::Option<std::string::String>,
    /// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
    #[doc(hidden)]
    pub port: i32,
    /// <p>Database.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided.</p>
    #[doc(hidden)]
    pub cluster_id: std::option::Option<std::string::String>,
}
impl RedshiftParameters {
    /// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
    pub fn host(&self) -> std::option::Option<&str> {
        self.host.as_deref()
    }
    /// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>Database.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided.</p>
    pub fn cluster_id(&self) -> std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
}
impl RedshiftParameters {
    /// Creates a new builder-style object to manufacture [`RedshiftParameters`](crate::types::RedshiftParameters).
    pub fn builder() -> crate::types::builders::RedshiftParametersBuilder {
        crate::types::builders::RedshiftParametersBuilder::default()
    }
}

/// A builder for [`RedshiftParameters`](crate::types::RedshiftParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RedshiftParametersBuilder {
    pub(crate) host: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) cluster_id: std::option::Option<std::string::String>,
}
impl RedshiftParametersBuilder {
    /// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
    pub fn host(mut self, input: impl Into<std::string::String>) -> Self {
        self.host = Some(input.into());
        self
    }
    /// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
    pub fn set_host(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Database.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>Database.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided.</p>
    pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_id = Some(input.into());
        self
    }
    /// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided.</p>
    pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RedshiftParameters`](crate::types::RedshiftParameters).
    pub fn build(self) -> crate::types::RedshiftParameters {
        crate::types::RedshiftParameters {
            host: self.host,
            port: self.port.unwrap_or_default(),
            database: self.database,
            cluster_id: self.cluster_id,
        }
    }
}
