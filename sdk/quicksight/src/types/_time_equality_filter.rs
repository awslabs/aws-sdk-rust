// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>TimeEqualityFilter</code> filters values that are equal to a given value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeEqualityFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub filter_id: ::std::string::String,
    /// <p>The column that the filter is applied to.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>RollingDate</code> and <code>ParameterName</code>.</p>
    pub value: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>RollingDate</code>.</p>
    pub parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    /// <p>The rolling date input for the <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>ParameterName</code>.</p>
    pub rolling_date: ::std::option::Option<crate::types::RollingDateConfiguration>,
    /// <p>The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.</p>
    pub default_filter_control_configuration: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>,
}
impl TimeEqualityFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_id.deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>RollingDate</code> and <code>ParameterName</code>.</p>
    pub fn value(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.value.as_ref()
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>RollingDate</code>.</p>
    pub fn parameter_name(&self) -> ::std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
    /// <p>The rolling date input for the <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>ParameterName</code>.</p>
    pub fn rolling_date(&self) -> ::std::option::Option<&crate::types::RollingDateConfiguration> {
        self.rolling_date.as_ref()
    }
    /// <p>The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.</p>
    pub fn default_filter_control_configuration(&self) -> ::std::option::Option<&crate::types::DefaultFilterControlConfiguration> {
        self.default_filter_control_configuration.as_ref()
    }
}
impl TimeEqualityFilter {
    /// Creates a new builder-style object to manufacture [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
    pub fn builder() -> crate::types::builders::TimeEqualityFilterBuilder {
        crate::types::builders::TimeEqualityFilterBuilder::default()
    }
}

/// A builder for [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeEqualityFilterBuilder {
    pub(crate) filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) value: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) rolling_date: ::std::option::Option<crate::types::RollingDateConfiguration>,
    pub(crate) default_filter_control_configuration: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>,
}
impl TimeEqualityFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    /// This field is required.
    pub fn filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn get_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_id
    }
    /// <p>The column that the filter is applied to.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>RollingDate</code> and <code>ParameterName</code>.</p>
    pub fn value(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>RollingDate</code> and <code>ParameterName</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>RollingDate</code> and <code>ParameterName</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.value
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>RollingDate</code>.</p>
    pub fn parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>RollingDate</code>.</p>
    pub fn set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>RollingDate</code>.</p>
    pub fn get_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_name
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// <p>The rolling date input for the <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>ParameterName</code>.</p>
    pub fn rolling_date(mut self, input: crate::types::RollingDateConfiguration) -> Self {
        self.rolling_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rolling date input for the <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>ParameterName</code>.</p>
    pub fn set_rolling_date(mut self, input: ::std::option::Option<crate::types::RollingDateConfiguration>) -> Self {
        self.rolling_date = input;
        self
    }
    /// <p>The rolling date input for the <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>Value</code> and <code>ParameterName</code>.</p>
    pub fn get_rolling_date(&self) -> &::std::option::Option<crate::types::RollingDateConfiguration> {
        &self.rolling_date
    }
    /// <p>The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.</p>
    pub fn default_filter_control_configuration(mut self, input: crate::types::DefaultFilterControlConfiguration) -> Self {
        self.default_filter_control_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.</p>
    pub fn set_default_filter_control_configuration(mut self, input: ::std::option::Option<crate::types::DefaultFilterControlConfiguration>) -> Self {
        self.default_filter_control_configuration = input;
        self
    }
    /// <p>The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.</p>
    pub fn get_default_filter_control_configuration(&self) -> &::std::option::Option<crate::types::DefaultFilterControlConfiguration> {
        &self.default_filter_control_configuration
    }
    /// Consumes the builder and constructs a [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_id`](crate::types::builders::TimeEqualityFilterBuilder::filter_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TimeEqualityFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimeEqualityFilter {
            filter_id: self.filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_id",
                    "filter_id was not specified but it is required when building TimeEqualityFilter",
                )
            })?,
            column: self.column,
            value: self.value,
            parameter_name: self.parameter_name,
            time_granularity: self.time_granularity,
            rolling_date: self.rolling_date,
            default_filter_control_configuration: self.default_filter_control_configuration,
        })
    }
}
