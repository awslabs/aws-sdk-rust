// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>TimeEqualityFilter</code> filters values that are equal to a given value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeEqualityFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    #[doc(hidden)]
    pub filter_id: std::option::Option<std::string::String>,
    /// <p>The column that the filter is applied to.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    #[doc(hidden)]
    pub value: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code>.</p>
    #[doc(hidden)]
    pub parameter_name: std::option::Option<std::string::String>,
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    #[doc(hidden)]
    pub time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeEqualityFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> std::option::Option<&str> {
        self.filter_id.as_deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn value(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.value.as_ref()
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code>.</p>
    pub fn parameter_name(&self) -> std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
}
impl TimeEqualityFilter {
    /// Creates a new builder-style object to manufacture [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
    pub fn builder() -> crate::types::builders::TimeEqualityFilterBuilder {
        crate::types::builders::TimeEqualityFilterBuilder::default()
    }
}

/// A builder for [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeEqualityFilterBuilder {
    pub(crate) filter_id: std::option::Option<std::string::String>,
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) value: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) parameter_name: std::option::Option<std::string::String>,
    pub(crate) time_granularity: std::option::Option<crate::types::TimeGranularity>,
}
impl TimeEqualityFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_id = Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn value(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of a <code>TimeEquality</code> filter.</p>
    /// <p>This field is mutually exclusive to <code>ParameterName</code>.</p>
    pub fn set_value(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.value = input;
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code>.</p>
    pub fn parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_name = Some(input.into());
        self
    }
    /// <p>The parameter whose value should be used for the filter value.</p>
    /// <p>This field is mutually exclusive to <code>Value</code>.</p>
    pub fn set_parameter_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(
        mut self,
        input: std::option::Option<crate::types::TimeGranularity>,
    ) -> Self {
        self.time_granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeEqualityFilter`](crate::types::TimeEqualityFilter).
    pub fn build(self) -> crate::types::TimeEqualityFilter {
        crate::types::TimeEqualityFilter {
            filter_id: self.filter_id,
            column: self.column,
            value: self.value,
            parameter_name: self.parameter_name,
            time_granularity: self.time_granularity,
        }
    }
}
