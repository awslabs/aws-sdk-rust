// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQnAConfigurations {
    /// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
    pub enabled: bool,
}
impl DataQnAConfigurations {
    /// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl DataQnAConfigurations {
    /// Creates a new builder-style object to manufacture [`DataQnAConfigurations`](crate::types::DataQnAConfigurations).
    pub fn builder() -> crate::types::builders::DataQnAConfigurationsBuilder {
        crate::types::builders::DataQnAConfigurationsBuilder::default()
    }
}

/// A builder for [`DataQnAConfigurations`](crate::types::DataQnAConfigurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataQnAConfigurationsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl DataQnAConfigurationsBuilder {
    /// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The generative Q&amp;A settings of an embedded Quick Sight console.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`DataQnAConfigurations`](crate::types::DataQnAConfigurations).
    pub fn build(self) -> crate::types::DataQnAConfigurations {
        crate::types::DataQnAConfigurations {
            enabled: self.enabled.unwrap_or_default(),
        }
    }
}
