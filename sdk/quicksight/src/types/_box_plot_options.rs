// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options of a box plot visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BoxPlotOptions {
    /// <p>The style options of the box plot.</p>
    #[doc(hidden)]
    pub style_options: std::option::Option<crate::types::BoxPlotStyleOptions>,
    /// <p>Determines the visibility of the outlier in a box plot.</p>
    #[doc(hidden)]
    pub outlier_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Determines the visibility of all data points of the box plot.</p>
    #[doc(hidden)]
    pub all_data_points_visibility: std::option::Option<crate::types::Visibility>,
}
impl BoxPlotOptions {
    /// <p>The style options of the box plot.</p>
    pub fn style_options(&self) -> std::option::Option<&crate::types::BoxPlotStyleOptions> {
        self.style_options.as_ref()
    }
    /// <p>Determines the visibility of the outlier in a box plot.</p>
    pub fn outlier_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.outlier_visibility.as_ref()
    }
    /// <p>Determines the visibility of all data points of the box plot.</p>
    pub fn all_data_points_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.all_data_points_visibility.as_ref()
    }
}
impl BoxPlotOptions {
    /// Creates a new builder-style object to manufacture [`BoxPlotOptions`](crate::types::BoxPlotOptions).
    pub fn builder() -> crate::types::builders::BoxPlotOptionsBuilder {
        crate::types::builders::BoxPlotOptionsBuilder::default()
    }
}

/// A builder for [`BoxPlotOptions`](crate::types::BoxPlotOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BoxPlotOptionsBuilder {
    pub(crate) style_options: std::option::Option<crate::types::BoxPlotStyleOptions>,
    pub(crate) outlier_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) all_data_points_visibility: std::option::Option<crate::types::Visibility>,
}
impl BoxPlotOptionsBuilder {
    /// <p>The style options of the box plot.</p>
    pub fn style_options(mut self, input: crate::types::BoxPlotStyleOptions) -> Self {
        self.style_options = Some(input);
        self
    }
    /// <p>The style options of the box plot.</p>
    pub fn set_style_options(
        mut self,
        input: std::option::Option<crate::types::BoxPlotStyleOptions>,
    ) -> Self {
        self.style_options = input;
        self
    }
    /// <p>Determines the visibility of the outlier in a box plot.</p>
    pub fn outlier_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.outlier_visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of the outlier in a box plot.</p>
    pub fn set_outlier_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.outlier_visibility = input;
        self
    }
    /// <p>Determines the visibility of all data points of the box plot.</p>
    pub fn all_data_points_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.all_data_points_visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of all data points of the box plot.</p>
    pub fn set_all_data_points_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.all_data_points_visibility = input;
        self
    }
    /// Consumes the builder and constructs a [`BoxPlotOptions`](crate::types::BoxPlotOptions).
    pub fn build(self) -> crate::types::BoxPlotOptions {
        crate::types::BoxPlotOptions {
            style_options: self.style_options,
            outlier_visibility: self.outlier_visibility,
            all_data_points_visibility: self.all_data_points_visibility,
        }
    }
}
