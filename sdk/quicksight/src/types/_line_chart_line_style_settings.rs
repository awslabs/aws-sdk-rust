// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Line styles options for a line series in <code>LineChartVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LineChartLineStyleSettings {
    /// <p>Configuration option that determines whether to show the line for the series.</p>
    #[doc(hidden)]
    pub line_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Interpolation style for line series.</p>
    /// <ul>
    /// <li> <p> <code>LINEAR</code>: Show as default, linear style.</p> </li>
    /// <li> <p> <code>SMOOTH</code>: Show as a smooth curve.</p> </li>
    /// <li> <p> <code>STEPPED</code>: Show steps in line.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub line_interpolation: std::option::Option<crate::types::LineInterpolation>,
    /// <p>Line style for line series.</p>
    /// <ul>
    /// <li> <p> <code>SOLID</code>: Show as a solid line.</p> </li>
    /// <li> <p> <code>DOTTED</code>: Show as a dotted line.</p> </li>
    /// <li> <p> <code>DASHED</code>: Show as a dashed line.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub line_style: std::option::Option<crate::types::LineChartLineStyle>,
    /// <p>Width that determines the line thickness.</p>
    #[doc(hidden)]
    pub line_width: std::option::Option<std::string::String>,
}
impl LineChartLineStyleSettings {
    /// <p>Configuration option that determines whether to show the line for the series.</p>
    pub fn line_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.line_visibility.as_ref()
    }
    /// <p>Interpolation style for line series.</p>
    /// <ul>
    /// <li> <p> <code>LINEAR</code>: Show as default, linear style.</p> </li>
    /// <li> <p> <code>SMOOTH</code>: Show as a smooth curve.</p> </li>
    /// <li> <p> <code>STEPPED</code>: Show steps in line.</p> </li>
    /// </ul>
    pub fn line_interpolation(&self) -> std::option::Option<&crate::types::LineInterpolation> {
        self.line_interpolation.as_ref()
    }
    /// <p>Line style for line series.</p>
    /// <ul>
    /// <li> <p> <code>SOLID</code>: Show as a solid line.</p> </li>
    /// <li> <p> <code>DOTTED</code>: Show as a dotted line.</p> </li>
    /// <li> <p> <code>DASHED</code>: Show as a dashed line.</p> </li>
    /// </ul>
    pub fn line_style(&self) -> std::option::Option<&crate::types::LineChartLineStyle> {
        self.line_style.as_ref()
    }
    /// <p>Width that determines the line thickness.</p>
    pub fn line_width(&self) -> std::option::Option<&str> {
        self.line_width.as_deref()
    }
}
impl LineChartLineStyleSettings {
    /// Creates a new builder-style object to manufacture [`LineChartLineStyleSettings`](crate::types::LineChartLineStyleSettings).
    pub fn builder() -> crate::types::builders::LineChartLineStyleSettingsBuilder {
        crate::types::builders::LineChartLineStyleSettingsBuilder::default()
    }
}

/// A builder for [`LineChartLineStyleSettings`](crate::types::LineChartLineStyleSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LineChartLineStyleSettingsBuilder {
    pub(crate) line_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) line_interpolation: std::option::Option<crate::types::LineInterpolation>,
    pub(crate) line_style: std::option::Option<crate::types::LineChartLineStyle>,
    pub(crate) line_width: std::option::Option<std::string::String>,
}
impl LineChartLineStyleSettingsBuilder {
    /// <p>Configuration option that determines whether to show the line for the series.</p>
    pub fn line_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.line_visibility = Some(input);
        self
    }
    /// <p>Configuration option that determines whether to show the line for the series.</p>
    pub fn set_line_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.line_visibility = input;
        self
    }
    /// <p>Interpolation style for line series.</p>
    /// <ul>
    /// <li> <p> <code>LINEAR</code>: Show as default, linear style.</p> </li>
    /// <li> <p> <code>SMOOTH</code>: Show as a smooth curve.</p> </li>
    /// <li> <p> <code>STEPPED</code>: Show steps in line.</p> </li>
    /// </ul>
    pub fn line_interpolation(mut self, input: crate::types::LineInterpolation) -> Self {
        self.line_interpolation = Some(input);
        self
    }
    /// <p>Interpolation style for line series.</p>
    /// <ul>
    /// <li> <p> <code>LINEAR</code>: Show as default, linear style.</p> </li>
    /// <li> <p> <code>SMOOTH</code>: Show as a smooth curve.</p> </li>
    /// <li> <p> <code>STEPPED</code>: Show steps in line.</p> </li>
    /// </ul>
    pub fn set_line_interpolation(
        mut self,
        input: std::option::Option<crate::types::LineInterpolation>,
    ) -> Self {
        self.line_interpolation = input;
        self
    }
    /// <p>Line style for line series.</p>
    /// <ul>
    /// <li> <p> <code>SOLID</code>: Show as a solid line.</p> </li>
    /// <li> <p> <code>DOTTED</code>: Show as a dotted line.</p> </li>
    /// <li> <p> <code>DASHED</code>: Show as a dashed line.</p> </li>
    /// </ul>
    pub fn line_style(mut self, input: crate::types::LineChartLineStyle) -> Self {
        self.line_style = Some(input);
        self
    }
    /// <p>Line style for line series.</p>
    /// <ul>
    /// <li> <p> <code>SOLID</code>: Show as a solid line.</p> </li>
    /// <li> <p> <code>DOTTED</code>: Show as a dotted line.</p> </li>
    /// <li> <p> <code>DASHED</code>: Show as a dashed line.</p> </li>
    /// </ul>
    pub fn set_line_style(
        mut self,
        input: std::option::Option<crate::types::LineChartLineStyle>,
    ) -> Self {
        self.line_style = input;
        self
    }
    /// <p>Width that determines the line thickness.</p>
    pub fn line_width(mut self, input: impl Into<std::string::String>) -> Self {
        self.line_width = Some(input.into());
        self
    }
    /// <p>Width that determines the line thickness.</p>
    pub fn set_line_width(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.line_width = input;
        self
    }
    /// Consumes the builder and constructs a [`LineChartLineStyleSettings`](crate::types::LineChartLineStyleSettings).
    pub fn build(self) -> crate::types::LineChartLineStyleSettings {
        crate::types::LineChartLineStyleSettings {
            line_visibility: self.line_visibility,
            line_interpolation: self.line_interpolation,
            line_style: self.line_style,
            line_width: self.line_width,
        }
    }
}
