// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting for the text.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TextConditionalFormat {
    /// <p>The conditional formatting for the text background color.</p>
    #[doc(hidden)]
    pub background_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    /// <p>The conditional formatting for the text color.</p>
    #[doc(hidden)]
    pub text_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    /// <p>The conditional formatting for the icon.</p>
    #[doc(hidden)]
    pub icon: std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl TextConditionalFormat {
    /// <p>The conditional formatting for the text background color.</p>
    pub fn background_color(
        &self,
    ) -> std::option::Option<&crate::types::ConditionalFormattingColor> {
        self.background_color.as_ref()
    }
    /// <p>The conditional formatting for the text color.</p>
    pub fn text_color(&self) -> std::option::Option<&crate::types::ConditionalFormattingColor> {
        self.text_color.as_ref()
    }
    /// <p>The conditional formatting for the icon.</p>
    pub fn icon(&self) -> std::option::Option<&crate::types::ConditionalFormattingIcon> {
        self.icon.as_ref()
    }
}
impl TextConditionalFormat {
    /// Creates a new builder-style object to manufacture [`TextConditionalFormat`](crate::types::TextConditionalFormat).
    pub fn builder() -> crate::types::builders::TextConditionalFormatBuilder {
        crate::types::builders::TextConditionalFormatBuilder::default()
    }
}

/// A builder for [`TextConditionalFormat`](crate::types::TextConditionalFormat).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TextConditionalFormatBuilder {
    pub(crate) background_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    pub(crate) text_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    pub(crate) icon: std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl TextConditionalFormatBuilder {
    /// <p>The conditional formatting for the text background color.</p>
    pub fn background_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.background_color = Some(input);
        self
    }
    /// <p>The conditional formatting for the text background color.</p>
    pub fn set_background_color(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingColor>,
    ) -> Self {
        self.background_color = input;
        self
    }
    /// <p>The conditional formatting for the text color.</p>
    pub fn text_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.text_color = Some(input);
        self
    }
    /// <p>The conditional formatting for the text color.</p>
    pub fn set_text_color(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingColor>,
    ) -> Self {
        self.text_color = input;
        self
    }
    /// <p>The conditional formatting for the icon.</p>
    pub fn icon(mut self, input: crate::types::ConditionalFormattingIcon) -> Self {
        self.icon = Some(input);
        self
    }
    /// <p>The conditional formatting for the icon.</p>
    pub fn set_icon(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingIcon>,
    ) -> Self {
        self.icon = input;
        self
    }
    /// Consumes the builder and constructs a [`TextConditionalFormat`](crate::types::TextConditionalFormat).
    pub fn build(self) -> crate::types::TextConditionalFormat {
        crate::types::TextConditionalFormat {
            background_color: self.background_color,
            text_color: self.text_color,
            icon: self.icon,
        }
    }
}
