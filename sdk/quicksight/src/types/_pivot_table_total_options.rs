// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The total options for a pivot table visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PivotTableTotalOptions {
    /// <p>The row subtotal options.</p>
    #[doc(hidden)]
    pub row_subtotal_options: std::option::Option<crate::types::SubtotalOptions>,
    /// <p>The column subtotal options.</p>
    #[doc(hidden)]
    pub column_subtotal_options: std::option::Option<crate::types::SubtotalOptions>,
    /// <p>The row total options.</p>
    #[doc(hidden)]
    pub row_total_options: std::option::Option<crate::types::PivotTotalOptions>,
    /// <p>The column total options.</p>
    #[doc(hidden)]
    pub column_total_options: std::option::Option<crate::types::PivotTotalOptions>,
}
impl PivotTableTotalOptions {
    /// <p>The row subtotal options.</p>
    pub fn row_subtotal_options(&self) -> std::option::Option<&crate::types::SubtotalOptions> {
        self.row_subtotal_options.as_ref()
    }
    /// <p>The column subtotal options.</p>
    pub fn column_subtotal_options(&self) -> std::option::Option<&crate::types::SubtotalOptions> {
        self.column_subtotal_options.as_ref()
    }
    /// <p>The row total options.</p>
    pub fn row_total_options(&self) -> std::option::Option<&crate::types::PivotTotalOptions> {
        self.row_total_options.as_ref()
    }
    /// <p>The column total options.</p>
    pub fn column_total_options(&self) -> std::option::Option<&crate::types::PivotTotalOptions> {
        self.column_total_options.as_ref()
    }
}
impl PivotTableTotalOptions {
    /// Creates a new builder-style object to manufacture [`PivotTableTotalOptions`](crate::types::PivotTableTotalOptions).
    pub fn builder() -> crate::types::builders::PivotTableTotalOptionsBuilder {
        crate::types::builders::PivotTableTotalOptionsBuilder::default()
    }
}

/// A builder for [`PivotTableTotalOptions`](crate::types::PivotTableTotalOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PivotTableTotalOptionsBuilder {
    pub(crate) row_subtotal_options: std::option::Option<crate::types::SubtotalOptions>,
    pub(crate) column_subtotal_options: std::option::Option<crate::types::SubtotalOptions>,
    pub(crate) row_total_options: std::option::Option<crate::types::PivotTotalOptions>,
    pub(crate) column_total_options: std::option::Option<crate::types::PivotTotalOptions>,
}
impl PivotTableTotalOptionsBuilder {
    /// <p>The row subtotal options.</p>
    pub fn row_subtotal_options(mut self, input: crate::types::SubtotalOptions) -> Self {
        self.row_subtotal_options = Some(input);
        self
    }
    /// <p>The row subtotal options.</p>
    pub fn set_row_subtotal_options(
        mut self,
        input: std::option::Option<crate::types::SubtotalOptions>,
    ) -> Self {
        self.row_subtotal_options = input;
        self
    }
    /// <p>The column subtotal options.</p>
    pub fn column_subtotal_options(mut self, input: crate::types::SubtotalOptions) -> Self {
        self.column_subtotal_options = Some(input);
        self
    }
    /// <p>The column subtotal options.</p>
    pub fn set_column_subtotal_options(
        mut self,
        input: std::option::Option<crate::types::SubtotalOptions>,
    ) -> Self {
        self.column_subtotal_options = input;
        self
    }
    /// <p>The row total options.</p>
    pub fn row_total_options(mut self, input: crate::types::PivotTotalOptions) -> Self {
        self.row_total_options = Some(input);
        self
    }
    /// <p>The row total options.</p>
    pub fn set_row_total_options(
        mut self,
        input: std::option::Option<crate::types::PivotTotalOptions>,
    ) -> Self {
        self.row_total_options = input;
        self
    }
    /// <p>The column total options.</p>
    pub fn column_total_options(mut self, input: crate::types::PivotTotalOptions) -> Self {
        self.column_total_options = Some(input);
        self
    }
    /// <p>The column total options.</p>
    pub fn set_column_total_options(
        mut self,
        input: std::option::Option<crate::types::PivotTotalOptions>,
    ) -> Self {
        self.column_total_options = input;
        self
    }
    /// Consumes the builder and constructs a [`PivotTableTotalOptions`](crate::types::PivotTableTotalOptions).
    pub fn build(self) -> crate::types::PivotTableTotalOptions {
        crate::types::PivotTableTotalOptions {
            row_subtotal_options: self.row_subtotal_options,
            column_subtotal_options: self.column_subtotal_options,
            row_total_options: self.row_total_options,
            column_total_options: self.column_total_options,
        }
    }
}
