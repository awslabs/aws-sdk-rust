// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterCrossSheetControl {
    /// <p>The ID of the <code>FilterCrossSheetControl</code>.</p>
    pub filter_control_id: ::std::string::String,
    /// <p>The source filter ID of the <code>FilterCrossSheetControl</code>.</p>
    pub source_filter_id: ::std::string::String,
    /// <p>The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.</p>
    pub cascading_control_configuration: ::std::option::Option<crate::types::CascadingControlConfiguration>,
}
impl FilterCrossSheetControl {
    /// <p>The ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn filter_control_id(&self) -> &str {
        use std::ops::Deref;
        self.filter_control_id.deref()
    }
    /// <p>The source filter ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn source_filter_id(&self) -> &str {
        use std::ops::Deref;
        self.source_filter_id.deref()
    }
    /// <p>The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.</p>
    pub fn cascading_control_configuration(&self) -> ::std::option::Option<&crate::types::CascadingControlConfiguration> {
        self.cascading_control_configuration.as_ref()
    }
}
impl FilterCrossSheetControl {
    /// Creates a new builder-style object to manufacture [`FilterCrossSheetControl`](crate::types::FilterCrossSheetControl).
    pub fn builder() -> crate::types::builders::FilterCrossSheetControlBuilder {
        crate::types::builders::FilterCrossSheetControlBuilder::default()
    }
}

/// A builder for [`FilterCrossSheetControl`](crate::types::FilterCrossSheetControl).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterCrossSheetControlBuilder {
    pub(crate) filter_control_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_filter_id: ::std::option::Option<::std::string::String>,
    pub(crate) cascading_control_configuration: ::std::option::Option<crate::types::CascadingControlConfiguration>,
}
impl FilterCrossSheetControlBuilder {
    /// <p>The ID of the <code>FilterCrossSheetControl</code>.</p>
    /// This field is required.
    pub fn filter_control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn set_filter_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_control_id = input;
        self
    }
    /// <p>The ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn get_filter_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_control_id
    }
    /// <p>The source filter ID of the <code>FilterCrossSheetControl</code>.</p>
    /// This field is required.
    pub fn source_filter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_filter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source filter ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn set_source_filter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_filter_id = input;
        self
    }
    /// <p>The source filter ID of the <code>FilterCrossSheetControl</code>.</p>
    pub fn get_source_filter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_filter_id
    }
    /// <p>The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.</p>
    pub fn cascading_control_configuration(mut self, input: crate::types::CascadingControlConfiguration) -> Self {
        self.cascading_control_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.</p>
    pub fn set_cascading_control_configuration(mut self, input: ::std::option::Option<crate::types::CascadingControlConfiguration>) -> Self {
        self.cascading_control_configuration = input;
        self
    }
    /// <p>The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.</p>
    pub fn get_cascading_control_configuration(&self) -> &::std::option::Option<crate::types::CascadingControlConfiguration> {
        &self.cascading_control_configuration
    }
    /// Consumes the builder and constructs a [`FilterCrossSheetControl`](crate::types::FilterCrossSheetControl).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_control_id`](crate::types::builders::FilterCrossSheetControlBuilder::filter_control_id)
    /// - [`source_filter_id`](crate::types::builders::FilterCrossSheetControlBuilder::source_filter_id)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterCrossSheetControl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterCrossSheetControl {
            filter_control_id: self.filter_control_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_control_id",
                    "filter_control_id was not specified but it is required when building FilterCrossSheetControl",
                )
            })?,
            source_filter_id: self.source_filter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_filter_id",
                    "source_filter_id was not specified but it is required when building FilterCrossSheetControl",
                )
            })?,
            cascading_control_configuration: self.cascading_control_configuration,
        })
    }
}
