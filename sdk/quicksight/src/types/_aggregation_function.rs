// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An aggregation function aggregates values from a dimension or measure.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AggregationFunction {
    /// <p>Aggregation for numerical values.</p>
    #[doc(hidden)]
    pub numerical_aggregation_function:
        std::option::Option<crate::types::NumericalAggregationFunction>,
    /// <p>Aggregation for categorical values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub categorical_aggregation_function:
        std::option::Option<crate::types::CategoricalAggregationFunction>,
    /// <p>Aggregation for date values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// <li> <p> <code>MIN</code>: Select the smallest date value.</p> </li>
    /// <li> <p> <code>MAX</code>: Select the largest date value.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub date_aggregation_function: std::option::Option<crate::types::DateAggregationFunction>,
}
impl AggregationFunction {
    /// <p>Aggregation for numerical values.</p>
    pub fn numerical_aggregation_function(
        &self,
    ) -> std::option::Option<&crate::types::NumericalAggregationFunction> {
        self.numerical_aggregation_function.as_ref()
    }
    /// <p>Aggregation for categorical values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// </ul>
    pub fn categorical_aggregation_function(
        &self,
    ) -> std::option::Option<&crate::types::CategoricalAggregationFunction> {
        self.categorical_aggregation_function.as_ref()
    }
    /// <p>Aggregation for date values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// <li> <p> <code>MIN</code>: Select the smallest date value.</p> </li>
    /// <li> <p> <code>MAX</code>: Select the largest date value.</p> </li>
    /// </ul>
    pub fn date_aggregation_function(
        &self,
    ) -> std::option::Option<&crate::types::DateAggregationFunction> {
        self.date_aggregation_function.as_ref()
    }
}
impl AggregationFunction {
    /// Creates a new builder-style object to manufacture [`AggregationFunction`](crate::types::AggregationFunction).
    pub fn builder() -> crate::types::builders::AggregationFunctionBuilder {
        crate::types::builders::AggregationFunctionBuilder::default()
    }
}

/// A builder for [`AggregationFunction`](crate::types::AggregationFunction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregationFunctionBuilder {
    pub(crate) numerical_aggregation_function:
        std::option::Option<crate::types::NumericalAggregationFunction>,
    pub(crate) categorical_aggregation_function:
        std::option::Option<crate::types::CategoricalAggregationFunction>,
    pub(crate) date_aggregation_function:
        std::option::Option<crate::types::DateAggregationFunction>,
}
impl AggregationFunctionBuilder {
    /// <p>Aggregation for numerical values.</p>
    pub fn numerical_aggregation_function(
        mut self,
        input: crate::types::NumericalAggregationFunction,
    ) -> Self {
        self.numerical_aggregation_function = Some(input);
        self
    }
    /// <p>Aggregation for numerical values.</p>
    pub fn set_numerical_aggregation_function(
        mut self,
        input: std::option::Option<crate::types::NumericalAggregationFunction>,
    ) -> Self {
        self.numerical_aggregation_function = input;
        self
    }
    /// <p>Aggregation for categorical values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// </ul>
    pub fn categorical_aggregation_function(
        mut self,
        input: crate::types::CategoricalAggregationFunction,
    ) -> Self {
        self.categorical_aggregation_function = Some(input);
        self
    }
    /// <p>Aggregation for categorical values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// </ul>
    pub fn set_categorical_aggregation_function(
        mut self,
        input: std::option::Option<crate::types::CategoricalAggregationFunction>,
    ) -> Self {
        self.categorical_aggregation_function = input;
        self
    }
    /// <p>Aggregation for date values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// <li> <p> <code>MIN</code>: Select the smallest date value.</p> </li>
    /// <li> <p> <code>MAX</code>: Select the largest date value.</p> </li>
    /// </ul>
    pub fn date_aggregation_function(
        mut self,
        input: crate::types::DateAggregationFunction,
    ) -> Self {
        self.date_aggregation_function = Some(input);
        self
    }
    /// <p>Aggregation for date values.</p>
    /// <ul>
    /// <li> <p> <code>COUNT</code>: Aggregate by the total number of values, including duplicates.</p> </li>
    /// <li> <p> <code>DISTINCT_COUNT</code>: Aggregate by the total number of distinct values.</p> </li>
    /// <li> <p> <code>MIN</code>: Select the smallest date value.</p> </li>
    /// <li> <p> <code>MAX</code>: Select the largest date value.</p> </li>
    /// </ul>
    pub fn set_date_aggregation_function(
        mut self,
        input: std::option::Option<crate::types::DateAggregationFunction>,
    ) -> Self {
        self.date_aggregation_function = input;
        self
    }
    /// Consumes the builder and constructs a [`AggregationFunction`](crate::types::AggregationFunction).
    pub fn build(self) -> crate::types::AggregationFunction {
        crate::types::AggregationFunction {
            numerical_aggregation_function: self.numerical_aggregation_function,
            categorical_aggregation_function: self.categorical_aggregation_function,
            date_aggregation_function: self.date_aggregation_function,
        }
    }
}
