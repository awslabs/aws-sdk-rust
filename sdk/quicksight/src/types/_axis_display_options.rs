// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The display options for the axis label.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AxisDisplayOptions {
    /// <p>The tick label options of an axis.</p>
    #[doc(hidden)]
    pub tick_label_options: std::option::Option<crate::types::AxisTickLabelOptions>,
    /// <p>Determines whether or not the axis line is visible.</p>
    #[doc(hidden)]
    pub axis_line_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>Determines whether or not the grid line is visible.</p>
    #[doc(hidden)]
    pub grid_line_visibility: std::option::Option<crate::types::Visibility>,
    /// <p>The data options for an axis.</p>
    #[doc(hidden)]
    pub data_options: std::option::Option<crate::types::AxisDataOptions>,
    /// <p>The scroll bar options for an axis.</p>
    #[doc(hidden)]
    pub scrollbar_options: std::option::Option<crate::types::ScrollBarOptions>,
    /// <p>The offset value that determines the starting placement of the axis within a visual's bounds.</p>
    #[doc(hidden)]
    pub axis_offset: std::option::Option<std::string::String>,
}
impl AxisDisplayOptions {
    /// <p>The tick label options of an axis.</p>
    pub fn tick_label_options(&self) -> std::option::Option<&crate::types::AxisTickLabelOptions> {
        self.tick_label_options.as_ref()
    }
    /// <p>Determines whether or not the axis line is visible.</p>
    pub fn axis_line_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.axis_line_visibility.as_ref()
    }
    /// <p>Determines whether or not the grid line is visible.</p>
    pub fn grid_line_visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.grid_line_visibility.as_ref()
    }
    /// <p>The data options for an axis.</p>
    pub fn data_options(&self) -> std::option::Option<&crate::types::AxisDataOptions> {
        self.data_options.as_ref()
    }
    /// <p>The scroll bar options for an axis.</p>
    pub fn scrollbar_options(&self) -> std::option::Option<&crate::types::ScrollBarOptions> {
        self.scrollbar_options.as_ref()
    }
    /// <p>The offset value that determines the starting placement of the axis within a visual's bounds.</p>
    pub fn axis_offset(&self) -> std::option::Option<&str> {
        self.axis_offset.as_deref()
    }
}
impl AxisDisplayOptions {
    /// Creates a new builder-style object to manufacture [`AxisDisplayOptions`](crate::types::AxisDisplayOptions).
    pub fn builder() -> crate::types::builders::AxisDisplayOptionsBuilder {
        crate::types::builders::AxisDisplayOptionsBuilder::default()
    }
}

/// A builder for [`AxisDisplayOptions`](crate::types::AxisDisplayOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AxisDisplayOptionsBuilder {
    pub(crate) tick_label_options: std::option::Option<crate::types::AxisTickLabelOptions>,
    pub(crate) axis_line_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) grid_line_visibility: std::option::Option<crate::types::Visibility>,
    pub(crate) data_options: std::option::Option<crate::types::AxisDataOptions>,
    pub(crate) scrollbar_options: std::option::Option<crate::types::ScrollBarOptions>,
    pub(crate) axis_offset: std::option::Option<std::string::String>,
}
impl AxisDisplayOptionsBuilder {
    /// <p>The tick label options of an axis.</p>
    pub fn tick_label_options(mut self, input: crate::types::AxisTickLabelOptions) -> Self {
        self.tick_label_options = Some(input);
        self
    }
    /// <p>The tick label options of an axis.</p>
    pub fn set_tick_label_options(
        mut self,
        input: std::option::Option<crate::types::AxisTickLabelOptions>,
    ) -> Self {
        self.tick_label_options = input;
        self
    }
    /// <p>Determines whether or not the axis line is visible.</p>
    pub fn axis_line_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.axis_line_visibility = Some(input);
        self
    }
    /// <p>Determines whether or not the axis line is visible.</p>
    pub fn set_axis_line_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.axis_line_visibility = input;
        self
    }
    /// <p>Determines whether or not the grid line is visible.</p>
    pub fn grid_line_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.grid_line_visibility = Some(input);
        self
    }
    /// <p>Determines whether or not the grid line is visible.</p>
    pub fn set_grid_line_visibility(
        mut self,
        input: std::option::Option<crate::types::Visibility>,
    ) -> Self {
        self.grid_line_visibility = input;
        self
    }
    /// <p>The data options for an axis.</p>
    pub fn data_options(mut self, input: crate::types::AxisDataOptions) -> Self {
        self.data_options = Some(input);
        self
    }
    /// <p>The data options for an axis.</p>
    pub fn set_data_options(
        mut self,
        input: std::option::Option<crate::types::AxisDataOptions>,
    ) -> Self {
        self.data_options = input;
        self
    }
    /// <p>The scroll bar options for an axis.</p>
    pub fn scrollbar_options(mut self, input: crate::types::ScrollBarOptions) -> Self {
        self.scrollbar_options = Some(input);
        self
    }
    /// <p>The scroll bar options for an axis.</p>
    pub fn set_scrollbar_options(
        mut self,
        input: std::option::Option<crate::types::ScrollBarOptions>,
    ) -> Self {
        self.scrollbar_options = input;
        self
    }
    /// <p>The offset value that determines the starting placement of the axis within a visual's bounds.</p>
    pub fn axis_offset(mut self, input: impl Into<std::string::String>) -> Self {
        self.axis_offset = Some(input.into());
        self
    }
    /// <p>The offset value that determines the starting placement of the axis within a visual's bounds.</p>
    pub fn set_axis_offset(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.axis_offset = input;
        self
    }
    /// Consumes the builder and constructs a [`AxisDisplayOptions`](crate::types::AxisDisplayOptions).
    pub fn build(self) -> crate::types::AxisDisplayOptions {
        crate::types::AxisDisplayOptions {
            tick_label_options: self.tick_label_options,
            axis_line_visibility: self.axis_line_visibility,
            grid_line_visibility: self.grid_line_visibility,
            data_options: self.data_options,
            scrollbar_options: self.scrollbar_options,
            axis_offset: self.axis_offset,
        }
    }
}
