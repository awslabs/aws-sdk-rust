// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The label options for an axis on a chart.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChartAxisLabelOptions {
    /// <p>The visibility of an axis label on a chart. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code>: Shows the axis.</p> </li>
    /// <li> <p> <code>HIDDEN</code>: Hides the axis.</p> </li>
    /// </ul>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The visibility configuration of the sort icon on a chart's axis label.</p>
    pub sort_icon_visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>The label options for a chart axis.</p>
    pub axis_label_options: ::std::option::Option<::std::vec::Vec<crate::types::AxisLabelOptions>>,
}
impl ChartAxisLabelOptions {
    /// <p>The visibility of an axis label on a chart. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code>: Shows the axis.</p> </li>
    /// <li> <p> <code>HIDDEN</code>: Hides the axis.</p> </li>
    /// </ul>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>The visibility configuration of the sort icon on a chart's axis label.</p>
    pub fn sort_icon_visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.sort_icon_visibility.as_ref()
    }
    /// <p>The label options for a chart axis.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.axis_label_options.is_none()`.
    pub fn axis_label_options(&self) -> &[crate::types::AxisLabelOptions] {
        self.axis_label_options.as_deref().unwrap_or_default()
    }
}
impl ChartAxisLabelOptions {
    /// Creates a new builder-style object to manufacture [`ChartAxisLabelOptions`](crate::types::ChartAxisLabelOptions).
    pub fn builder() -> crate::types::builders::ChartAxisLabelOptionsBuilder {
        crate::types::builders::ChartAxisLabelOptionsBuilder::default()
    }
}

/// A builder for [`ChartAxisLabelOptions`](crate::types::ChartAxisLabelOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChartAxisLabelOptionsBuilder {
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) sort_icon_visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) axis_label_options: ::std::option::Option<::std::vec::Vec<crate::types::AxisLabelOptions>>,
}
impl ChartAxisLabelOptionsBuilder {
    /// <p>The visibility of an axis label on a chart. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code>: Shows the axis.</p> </li>
    /// <li> <p> <code>HIDDEN</code>: Hides the axis.</p> </li>
    /// </ul>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of an axis label on a chart. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code>: Shows the axis.</p> </li>
    /// <li> <p> <code>HIDDEN</code>: Hides the axis.</p> </li>
    /// </ul>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of an axis label on a chart. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code>: Shows the axis.</p> </li>
    /// <li> <p> <code>HIDDEN</code>: Hides the axis.</p> </li>
    /// </ul>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>The visibility configuration of the sort icon on a chart's axis label.</p>
    pub fn sort_icon_visibility(mut self, input: crate::types::Visibility) -> Self {
        self.sort_icon_visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility configuration of the sort icon on a chart's axis label.</p>
    pub fn set_sort_icon_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.sort_icon_visibility = input;
        self
    }
    /// <p>The visibility configuration of the sort icon on a chart's axis label.</p>
    pub fn get_sort_icon_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.sort_icon_visibility
    }
    /// Appends an item to `axis_label_options`.
    ///
    /// To override the contents of this collection use [`set_axis_label_options`](Self::set_axis_label_options).
    ///
    /// <p>The label options for a chart axis.</p>
    pub fn axis_label_options(mut self, input: crate::types::AxisLabelOptions) -> Self {
        let mut v = self.axis_label_options.unwrap_or_default();
        v.push(input);
        self.axis_label_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The label options for a chart axis.</p>
    pub fn set_axis_label_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AxisLabelOptions>>) -> Self {
        self.axis_label_options = input;
        self
    }
    /// <p>The label options for a chart axis.</p>
    pub fn get_axis_label_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AxisLabelOptions>> {
        &self.axis_label_options
    }
    /// Consumes the builder and constructs a [`ChartAxisLabelOptions`](crate::types::ChartAxisLabelOptions).
    pub fn build(self) -> crate::types::ChartAxisLabelOptions {
        crate::types::ChartAxisLabelOptions {
            visibility: self.visibility,
            sort_icon_visibility: self.sort_icon_visibility,
            axis_label_options: self.axis_label_options,
        }
    }
}
