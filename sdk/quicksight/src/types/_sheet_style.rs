// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The theme display options for sheets. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SheetStyle {
    /// <p>The display options for tiles.</p>
    #[doc(hidden)]
    pub tile: std::option::Option<crate::types::TileStyle>,
    /// <p>The layout options for tiles.</p>
    #[doc(hidden)]
    pub tile_layout: std::option::Option<crate::types::TileLayoutStyle>,
}
impl SheetStyle {
    /// <p>The display options for tiles.</p>
    pub fn tile(&self) -> std::option::Option<&crate::types::TileStyle> {
        self.tile.as_ref()
    }
    /// <p>The layout options for tiles.</p>
    pub fn tile_layout(&self) -> std::option::Option<&crate::types::TileLayoutStyle> {
        self.tile_layout.as_ref()
    }
}
impl SheetStyle {
    /// Creates a new builder-style object to manufacture [`SheetStyle`](crate::types::SheetStyle).
    pub fn builder() -> crate::types::builders::SheetStyleBuilder {
        crate::types::builders::SheetStyleBuilder::default()
    }
}

/// A builder for [`SheetStyle`](crate::types::SheetStyle).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SheetStyleBuilder {
    pub(crate) tile: std::option::Option<crate::types::TileStyle>,
    pub(crate) tile_layout: std::option::Option<crate::types::TileLayoutStyle>,
}
impl SheetStyleBuilder {
    /// <p>The display options for tiles.</p>
    pub fn tile(mut self, input: crate::types::TileStyle) -> Self {
        self.tile = Some(input);
        self
    }
    /// <p>The display options for tiles.</p>
    pub fn set_tile(mut self, input: std::option::Option<crate::types::TileStyle>) -> Self {
        self.tile = input;
        self
    }
    /// <p>The layout options for tiles.</p>
    pub fn tile_layout(mut self, input: crate::types::TileLayoutStyle) -> Self {
        self.tile_layout = Some(input);
        self
    }
    /// <p>The layout options for tiles.</p>
    pub fn set_tile_layout(
        mut self,
        input: std::option::Option<crate::types::TileLayoutStyle>,
    ) -> Self {
        self.tile_layout = input;
        self
    }
    /// Consumes the builder and constructs a [`SheetStyle`](crate::types::SheetStyle).
    pub fn build(self) -> crate::types::SheetStyle {
        crate::types::SheetStyle {
            tile: self.tile,
            tile_layout: self.tile_layout,
        }
    }
}
