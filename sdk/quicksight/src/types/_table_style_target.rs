// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The table style target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableStyleTarget {
    /// <p>The cell type of the table style target.</p>
    pub cell_type: crate::types::StyledCellType,
}
impl TableStyleTarget {
    /// <p>The cell type of the table style target.</p>
    pub fn cell_type(&self) -> &crate::types::StyledCellType {
        &self.cell_type
    }
}
impl TableStyleTarget {
    /// Creates a new builder-style object to manufacture [`TableStyleTarget`](crate::types::TableStyleTarget).
    pub fn builder() -> crate::types::builders::TableStyleTargetBuilder {
        crate::types::builders::TableStyleTargetBuilder::default()
    }
}

/// A builder for [`TableStyleTarget`](crate::types::TableStyleTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TableStyleTargetBuilder {
    pub(crate) cell_type: ::std::option::Option<crate::types::StyledCellType>,
}
impl TableStyleTargetBuilder {
    /// <p>The cell type of the table style target.</p>
    /// This field is required.
    pub fn cell_type(mut self, input: crate::types::StyledCellType) -> Self {
        self.cell_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cell type of the table style target.</p>
    pub fn set_cell_type(mut self, input: ::std::option::Option<crate::types::StyledCellType>) -> Self {
        self.cell_type = input;
        self
    }
    /// <p>The cell type of the table style target.</p>
    pub fn get_cell_type(&self) -> &::std::option::Option<crate::types::StyledCellType> {
        &self.cell_type
    }
    /// Consumes the builder and constructs a [`TableStyleTarget`](crate::types::TableStyleTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`cell_type`](crate::types::builders::TableStyleTargetBuilder::cell_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TableStyleTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TableStyleTarget {
            cell_type: self.cell_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cell_type",
                    "cell_type was not specified but it is required when building TableStyleTarget",
                )
            })?,
        })
    }
}
