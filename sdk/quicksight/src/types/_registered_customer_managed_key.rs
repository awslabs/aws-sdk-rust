// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A customer managed key structure that contains the information listed below:</p>
/// <ul>
/// <li>
/// <p><code>KeyArn</code> - The ARN of a KMS key that is registered to a Quick Sight account for encryption and decryption use.</p></li>
/// <li>
/// <p><code>DefaultKey</code> - Indicates whether the current key is set as the default key for encryption and decryption use.</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisteredCustomerManagedKey {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use.</p>
    pub key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether a <code>RegisteredCustomerManagedKey</code> is set as the default key for encryption and decryption use.</p>
    pub default_key: bool,
}
impl RegisteredCustomerManagedKey {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use.</p>
    pub fn key_arn(&self) -> ::std::option::Option<&str> {
        self.key_arn.as_deref()
    }
    /// <p>Indicates whether a <code>RegisteredCustomerManagedKey</code> is set as the default key for encryption and decryption use.</p>
    pub fn default_key(&self) -> bool {
        self.default_key
    }
}
impl RegisteredCustomerManagedKey {
    /// Creates a new builder-style object to manufacture [`RegisteredCustomerManagedKey`](crate::types::RegisteredCustomerManagedKey).
    pub fn builder() -> crate::types::builders::RegisteredCustomerManagedKeyBuilder {
        crate::types::builders::RegisteredCustomerManagedKeyBuilder::default()
    }
}

/// A builder for [`RegisteredCustomerManagedKey`](crate::types::RegisteredCustomerManagedKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegisteredCustomerManagedKeyBuilder {
    pub(crate) key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_key: ::std::option::Option<bool>,
}
impl RegisteredCustomerManagedKeyBuilder {
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use.</p>
    pub fn key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use.</p>
    pub fn set_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key that is registered to a Quick Sight account for encryption and decryption use.</p>
    pub fn get_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_arn
    }
    /// <p>Indicates whether a <code>RegisteredCustomerManagedKey</code> is set as the default key for encryption and decryption use.</p>
    pub fn default_key(mut self, input: bool) -> Self {
        self.default_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether a <code>RegisteredCustomerManagedKey</code> is set as the default key for encryption and decryption use.</p>
    pub fn set_default_key(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_key = input;
        self
    }
    /// <p>Indicates whether a <code>RegisteredCustomerManagedKey</code> is set as the default key for encryption and decryption use.</p>
    pub fn get_default_key(&self) -> &::std::option::Option<bool> {
        &self.default_key
    }
    /// Consumes the builder and constructs a [`RegisteredCustomerManagedKey`](crate::types::RegisteredCustomerManagedKey).
    pub fn build(self) -> crate::types::RegisteredCustomerManagedKey {
        crate::types::RegisteredCustomerManagedKey {
            key_arn: self.key_arn,
            default_key: self.default_key.unwrap_or_default(),
        }
    }
}
