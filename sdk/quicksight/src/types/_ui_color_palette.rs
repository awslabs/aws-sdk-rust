// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UiColorPalette {
    /// <p>The color of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.</p>
    #[doc(hidden)]
    pub primary_foreground: std::option::Option<std::string::String>,
    /// <p>The background color that applies to visuals and other high emphasis UI.</p>
    #[doc(hidden)]
    pub primary_background: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any sheet title, sheet control text, or UI that appears over the secondary background.</p>
    #[doc(hidden)]
    pub secondary_foreground: std::option::Option<std::string::String>,
    /// <p>The background color that applies to the sheet background and sheet controls.</p>
    #[doc(hidden)]
    pub secondary_background: std::option::Option<std::string::String>,
    /// <p>This color is that applies to selected states and buttons.</p>
    #[doc(hidden)]
    pub accent: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the accent color.</p>
    #[doc(hidden)]
    pub accent_foreground: std::option::Option<std::string::String>,
    /// <p>The color that applies to error messages.</p>
    #[doc(hidden)]
    pub danger: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the error color.</p>
    #[doc(hidden)]
    pub danger_foreground: std::option::Option<std::string::String>,
    /// <p>This color that applies to warning and informational messages.</p>
    #[doc(hidden)]
    pub warning: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the warning color.</p>
    #[doc(hidden)]
    pub warning_foreground: std::option::Option<std::string::String>,
    /// <p>The color that applies to success messages, for example the check mark for a successful download.</p>
    #[doc(hidden)]
    pub success: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the success color.</p>
    #[doc(hidden)]
    pub success_foreground: std::option::Option<std::string::String>,
    /// <p>The color that applies to the names of fields that are identified as dimensions.</p>
    #[doc(hidden)]
    pub dimension: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the dimension color.</p>
    #[doc(hidden)]
    pub dimension_foreground: std::option::Option<std::string::String>,
    /// <p>The color that applies to the names of fields that are identified as measures.</p>
    #[doc(hidden)]
    pub measure: std::option::Option<std::string::String>,
    /// <p>The foreground color that applies to any text or other elements that appear over the measure color.</p>
    #[doc(hidden)]
    pub measure_foreground: std::option::Option<std::string::String>,
}
impl UiColorPalette {
    /// <p>The color of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.</p>
    pub fn primary_foreground(&self) -> std::option::Option<&str> {
        self.primary_foreground.as_deref()
    }
    /// <p>The background color that applies to visuals and other high emphasis UI.</p>
    pub fn primary_background(&self) -> std::option::Option<&str> {
        self.primary_background.as_deref()
    }
    /// <p>The foreground color that applies to any sheet title, sheet control text, or UI that appears over the secondary background.</p>
    pub fn secondary_foreground(&self) -> std::option::Option<&str> {
        self.secondary_foreground.as_deref()
    }
    /// <p>The background color that applies to the sheet background and sheet controls.</p>
    pub fn secondary_background(&self) -> std::option::Option<&str> {
        self.secondary_background.as_deref()
    }
    /// <p>This color is that applies to selected states and buttons.</p>
    pub fn accent(&self) -> std::option::Option<&str> {
        self.accent.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the accent color.</p>
    pub fn accent_foreground(&self) -> std::option::Option<&str> {
        self.accent_foreground.as_deref()
    }
    /// <p>The color that applies to error messages.</p>
    pub fn danger(&self) -> std::option::Option<&str> {
        self.danger.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the error color.</p>
    pub fn danger_foreground(&self) -> std::option::Option<&str> {
        self.danger_foreground.as_deref()
    }
    /// <p>This color that applies to warning and informational messages.</p>
    pub fn warning(&self) -> std::option::Option<&str> {
        self.warning.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the warning color.</p>
    pub fn warning_foreground(&self) -> std::option::Option<&str> {
        self.warning_foreground.as_deref()
    }
    /// <p>The color that applies to success messages, for example the check mark for a successful download.</p>
    pub fn success(&self) -> std::option::Option<&str> {
        self.success.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the success color.</p>
    pub fn success_foreground(&self) -> std::option::Option<&str> {
        self.success_foreground.as_deref()
    }
    /// <p>The color that applies to the names of fields that are identified as dimensions.</p>
    pub fn dimension(&self) -> std::option::Option<&str> {
        self.dimension.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the dimension color.</p>
    pub fn dimension_foreground(&self) -> std::option::Option<&str> {
        self.dimension_foreground.as_deref()
    }
    /// <p>The color that applies to the names of fields that are identified as measures.</p>
    pub fn measure(&self) -> std::option::Option<&str> {
        self.measure.as_deref()
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the measure color.</p>
    pub fn measure_foreground(&self) -> std::option::Option<&str> {
        self.measure_foreground.as_deref()
    }
}
impl UiColorPalette {
    /// Creates a new builder-style object to manufacture [`UiColorPalette`](crate::types::UiColorPalette).
    pub fn builder() -> crate::types::builders::UiColorPaletteBuilder {
        crate::types::builders::UiColorPaletteBuilder::default()
    }
}

/// A builder for [`UiColorPalette`](crate::types::UiColorPalette).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UiColorPaletteBuilder {
    pub(crate) primary_foreground: std::option::Option<std::string::String>,
    pub(crate) primary_background: std::option::Option<std::string::String>,
    pub(crate) secondary_foreground: std::option::Option<std::string::String>,
    pub(crate) secondary_background: std::option::Option<std::string::String>,
    pub(crate) accent: std::option::Option<std::string::String>,
    pub(crate) accent_foreground: std::option::Option<std::string::String>,
    pub(crate) danger: std::option::Option<std::string::String>,
    pub(crate) danger_foreground: std::option::Option<std::string::String>,
    pub(crate) warning: std::option::Option<std::string::String>,
    pub(crate) warning_foreground: std::option::Option<std::string::String>,
    pub(crate) success: std::option::Option<std::string::String>,
    pub(crate) success_foreground: std::option::Option<std::string::String>,
    pub(crate) dimension: std::option::Option<std::string::String>,
    pub(crate) dimension_foreground: std::option::Option<std::string::String>,
    pub(crate) measure: std::option::Option<std::string::String>,
    pub(crate) measure_foreground: std::option::Option<std::string::String>,
}
impl UiColorPaletteBuilder {
    /// <p>The color of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.</p>
    pub fn primary_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_foreground = Some(input.into());
        self
    }
    /// <p>The color of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.</p>
    pub fn set_primary_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_foreground = input;
        self
    }
    /// <p>The background color that applies to visuals and other high emphasis UI.</p>
    pub fn primary_background(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_background = Some(input.into());
        self
    }
    /// <p>The background color that applies to visuals and other high emphasis UI.</p>
    pub fn set_primary_background(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_background = input;
        self
    }
    /// <p>The foreground color that applies to any sheet title, sheet control text, or UI that appears over the secondary background.</p>
    pub fn secondary_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.secondary_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any sheet title, sheet control text, or UI that appears over the secondary background.</p>
    pub fn set_secondary_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secondary_foreground = input;
        self
    }
    /// <p>The background color that applies to the sheet background and sheet controls.</p>
    pub fn secondary_background(mut self, input: impl Into<std::string::String>) -> Self {
        self.secondary_background = Some(input.into());
        self
    }
    /// <p>The background color that applies to the sheet background and sheet controls.</p>
    pub fn set_secondary_background(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secondary_background = input;
        self
    }
    /// <p>This color is that applies to selected states and buttons.</p>
    pub fn accent(mut self, input: impl Into<std::string::String>) -> Self {
        self.accent = Some(input.into());
        self
    }
    /// <p>This color is that applies to selected states and buttons.</p>
    pub fn set_accent(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accent = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the accent color.</p>
    pub fn accent_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.accent_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the accent color.</p>
    pub fn set_accent_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.accent_foreground = input;
        self
    }
    /// <p>The color that applies to error messages.</p>
    pub fn danger(mut self, input: impl Into<std::string::String>) -> Self {
        self.danger = Some(input.into());
        self
    }
    /// <p>The color that applies to error messages.</p>
    pub fn set_danger(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.danger = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the error color.</p>
    pub fn danger_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.danger_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the error color.</p>
    pub fn set_danger_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.danger_foreground = input;
        self
    }
    /// <p>This color that applies to warning and informational messages.</p>
    pub fn warning(mut self, input: impl Into<std::string::String>) -> Self {
        self.warning = Some(input.into());
        self
    }
    /// <p>This color that applies to warning and informational messages.</p>
    pub fn set_warning(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.warning = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the warning color.</p>
    pub fn warning_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.warning_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the warning color.</p>
    pub fn set_warning_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.warning_foreground = input;
        self
    }
    /// <p>The color that applies to success messages, for example the check mark for a successful download.</p>
    pub fn success(mut self, input: impl Into<std::string::String>) -> Self {
        self.success = Some(input.into());
        self
    }
    /// <p>The color that applies to success messages, for example the check mark for a successful download.</p>
    pub fn set_success(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.success = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the success color.</p>
    pub fn success_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.success_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the success color.</p>
    pub fn set_success_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.success_foreground = input;
        self
    }
    /// <p>The color that applies to the names of fields that are identified as dimensions.</p>
    pub fn dimension(mut self, input: impl Into<std::string::String>) -> Self {
        self.dimension = Some(input.into());
        self
    }
    /// <p>The color that applies to the names of fields that are identified as dimensions.</p>
    pub fn set_dimension(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the dimension color.</p>
    pub fn dimension_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.dimension_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the dimension color.</p>
    pub fn set_dimension_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dimension_foreground = input;
        self
    }
    /// <p>The color that applies to the names of fields that are identified as measures.</p>
    pub fn measure(mut self, input: impl Into<std::string::String>) -> Self {
        self.measure = Some(input.into());
        self
    }
    /// <p>The color that applies to the names of fields that are identified as measures.</p>
    pub fn set_measure(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.measure = input;
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the measure color.</p>
    pub fn measure_foreground(mut self, input: impl Into<std::string::String>) -> Self {
        self.measure_foreground = Some(input.into());
        self
    }
    /// <p>The foreground color that applies to any text or other elements that appear over the measure color.</p>
    pub fn set_measure_foreground(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.measure_foreground = input;
        self
    }
    /// Consumes the builder and constructs a [`UiColorPalette`](crate::types::UiColorPalette).
    pub fn build(self) -> crate::types::UiColorPalette {
        crate::types::UiColorPalette {
            primary_foreground: self.primary_foreground,
            primary_background: self.primary_background,
            secondary_foreground: self.secondary_foreground,
            secondary_background: self.secondary_background,
            accent: self.accent,
            accent_foreground: self.accent_foreground,
            danger: self.danger,
            danger_foreground: self.danger_foreground,
            warning: self.warning,
            warning_foreground: self.warning_foreground,
            success: self.success,
            success_foreground: self.success_foreground,
            dimension: self.dimension,
            dimension_foreground: self.dimension_foreground,
            measure: self.measure,
            measure_foreground: self.measure_foreground,
        }
    }
}
