// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A physical table type for relational data sources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RelationalTable {
    /// <p>The Amazon Resource Name (ARN) for the data source.</p>
    #[doc(hidden)]
    pub data_source_arn: std::option::Option<std::string::String>,
    /// <p>The catalog associated with a table.</p>
    #[doc(hidden)]
    pub catalog: std::option::Option<std::string::String>,
    /// <p>The schema name. This name applies to certain relational database engines.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>The name of the relational table.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The column schema of the table.</p>
    #[doc(hidden)]
    pub input_columns: std::option::Option<std::vec::Vec<crate::types::InputColumn>>,
}
impl RelationalTable {
    /// <p>The Amazon Resource Name (ARN) for the data source.</p>
    pub fn data_source_arn(&self) -> std::option::Option<&str> {
        self.data_source_arn.as_deref()
    }
    /// <p>The catalog associated with a table.</p>
    pub fn catalog(&self) -> std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The schema name. This name applies to certain relational database engines.</p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>The name of the relational table.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The column schema of the table.</p>
    pub fn input_columns(&self) -> std::option::Option<&[crate::types::InputColumn]> {
        self.input_columns.as_deref()
    }
}
impl RelationalTable {
    /// Creates a new builder-style object to manufacture [`RelationalTable`](crate::types::RelationalTable).
    pub fn builder() -> crate::types::builders::RelationalTableBuilder {
        crate::types::builders::RelationalTableBuilder::default()
    }
}

/// A builder for [`RelationalTable`](crate::types::RelationalTable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RelationalTableBuilder {
    pub(crate) data_source_arn: std::option::Option<std::string::String>,
    pub(crate) catalog: std::option::Option<std::string::String>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) input_columns: std::option::Option<std::vec::Vec<crate::types::InputColumn>>,
}
impl RelationalTableBuilder {
    /// <p>The Amazon Resource Name (ARN) for the data source.</p>
    pub fn data_source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the data source.</p>
    pub fn set_data_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_arn = input;
        self
    }
    /// <p>The catalog associated with a table.</p>
    pub fn catalog(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog = Some(input.into());
        self
    }
    /// <p>The catalog associated with a table.</p>
    pub fn set_catalog(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The schema name. This name applies to certain relational database engines.</p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>The schema name. This name applies to certain relational database engines.</p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The name of the relational table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the relational table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `input_columns`.
    ///
    /// To override the contents of this collection use [`set_input_columns`](Self::set_input_columns).
    ///
    /// <p>The column schema of the table.</p>
    pub fn input_columns(mut self, input: crate::types::InputColumn) -> Self {
        let mut v = self.input_columns.unwrap_or_default();
        v.push(input);
        self.input_columns = Some(v);
        self
    }
    /// <p>The column schema of the table.</p>
    pub fn set_input_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InputColumn>>,
    ) -> Self {
        self.input_columns = input;
        self
    }
    /// Consumes the builder and constructs a [`RelationalTable`](crate::types::RelationalTable).
    pub fn build(self) -> crate::types::RelationalTable {
        crate::types::RelationalTable {
            data_source_arn: self.data_source_arn,
            catalog: self.catalog,
            schema: self.schema,
            name: self.name,
            input_columns: self.input_columns,
        }
    }
}
