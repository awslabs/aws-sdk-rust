// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geospatial column group that denotes a hierarchy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeoSpatialColumnGroup {
    /// <p>A display name for the hierarchy.</p>
    pub name: ::std::string::String,
    /// <p>Country code.</p>
    pub country_code: ::std::option::Option<crate::types::GeoSpatialCountryCode>,
    /// <p>Columns in this hierarchy.</p>
    pub columns: ::std::vec::Vec<::std::string::String>,
}
impl GeoSpatialColumnGroup {
    /// <p>A display name for the hierarchy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Country code.</p>
    pub fn country_code(&self) -> ::std::option::Option<&crate::types::GeoSpatialCountryCode> {
        self.country_code.as_ref()
    }
    /// <p>Columns in this hierarchy.</p>
    pub fn columns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.columns.deref()
    }
}
impl GeoSpatialColumnGroup {
    /// Creates a new builder-style object to manufacture [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
    pub fn builder() -> crate::types::builders::GeoSpatialColumnGroupBuilder {
        crate::types::builders::GeoSpatialColumnGroupBuilder::default()
    }
}

/// A builder for [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeoSpatialColumnGroupBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<crate::types::GeoSpatialCountryCode>,
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GeoSpatialColumnGroupBuilder {
    /// <p>A display name for the hierarchy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A display name for the hierarchy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A display name for the hierarchy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Country code.</p>
    pub fn country_code(mut self, input: crate::types::GeoSpatialCountryCode) -> Self {
        self.country_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Country code.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<crate::types::GeoSpatialCountryCode>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>Country code.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<crate::types::GeoSpatialCountryCode> {
        &self.country_code
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>Columns in this hierarchy.</p>
    pub fn columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input.into());
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Columns in this hierarchy.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>Columns in this hierarchy.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.columns
    }
    /// Consumes the builder and constructs a [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::GeoSpatialColumnGroupBuilder::name)
    /// - [`columns`](crate::types::builders::GeoSpatialColumnGroupBuilder::columns)
    pub fn build(self) -> ::std::result::Result<crate::types::GeoSpatialColumnGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeoSpatialColumnGroup {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GeoSpatialColumnGroup",
                )
            })?,
            country_code: self.country_code,
            columns: self.columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "columns",
                    "columns was not specified but it is required when building GeoSpatialColumnGroup",
                )
            })?,
        })
    }
}
