// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Geospatial column group that denotes a hierarchy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeoSpatialColumnGroup {
    /// <p>A display name for the hierarchy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Country code.</p>
    #[doc(hidden)]
    pub country_code: std::option::Option<crate::types::GeoSpatialCountryCode>,
    /// <p>Columns in this hierarchy.</p>
    #[doc(hidden)]
    pub columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GeoSpatialColumnGroup {
    /// <p>A display name for the hierarchy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Country code.</p>
    pub fn country_code(&self) -> std::option::Option<&crate::types::GeoSpatialCountryCode> {
        self.country_code.as_ref()
    }
    /// <p>Columns in this hierarchy.</p>
    pub fn columns(&self) -> std::option::Option<&[std::string::String]> {
        self.columns.as_deref()
    }
}
impl GeoSpatialColumnGroup {
    /// Creates a new builder-style object to manufacture [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
    pub fn builder() -> crate::types::builders::GeoSpatialColumnGroupBuilder {
        crate::types::builders::GeoSpatialColumnGroupBuilder::default()
    }
}

/// A builder for [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeoSpatialColumnGroupBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) country_code: std::option::Option<crate::types::GeoSpatialCountryCode>,
    pub(crate) columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GeoSpatialColumnGroupBuilder {
    /// <p>A display name for the hierarchy.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A display name for the hierarchy.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Country code.</p>
    pub fn country_code(mut self, input: crate::types::GeoSpatialCountryCode) -> Self {
        self.country_code = Some(input);
        self
    }
    /// <p>Country code.</p>
    pub fn set_country_code(
        mut self,
        input: std::option::Option<crate::types::GeoSpatialCountryCode>,
    ) -> Self {
        self.country_code = input;
        self
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>Columns in this hierarchy.</p>
    pub fn columns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input.into());
        self.columns = Some(v);
        self
    }
    /// <p>Columns in this hierarchy.</p>
    pub fn set_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.columns = input;
        self
    }
    /// Consumes the builder and constructs a [`GeoSpatialColumnGroup`](crate::types::GeoSpatialColumnGroup).
    pub fn build(self) -> crate::types::GeoSpatialColumnGroup {
        crate::types::GeoSpatialColumnGroup {
            name: self.name,
            country_code: self.country_code,
            columns: self.columns,
        }
    }
}
