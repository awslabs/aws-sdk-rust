// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>CategoryFilter</code> filters text values.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CategoryFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    #[doc(hidden)]
    pub filter_id: std::option::Option<std::string::String>,
    /// <p>The column that the filter is applied to.</p>
    #[doc(hidden)]
    pub column: std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::types::CategoryFilterConfiguration>,
}
impl CategoryFilter {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(&self) -> std::option::Option<&str> {
        self.filter_id.as_deref()
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(&self) -> std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::types::CategoryFilterConfiguration> {
        self.configuration.as_ref()
    }
}
impl CategoryFilter {
    /// Creates a new builder-style object to manufacture [`CategoryFilter`](crate::types::CategoryFilter).
    pub fn builder() -> crate::types::builders::CategoryFilterBuilder {
        crate::types::builders::CategoryFilterBuilder::default()
    }
}

/// A builder for [`CategoryFilter`](crate::types::CategoryFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CategoryFilterBuilder {
    pub(crate) filter_id: std::option::Option<std::string::String>,
    pub(crate) column: std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) configuration: std::option::Option<crate::types::CategoryFilterConfiguration>,
}
impl CategoryFilterBuilder {
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn filter_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_id = Some(input.into());
        self
    }
    /// <p>An identifier that uniquely identifies a filter within a dashboard, analysis, or template.</p>
    pub fn set_filter_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter_id = input;
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column that the filter is applied to.</p>
    pub fn set_column(
        mut self,
        input: std::option::Option<crate::types::ColumnIdentifier>,
    ) -> Self {
        self.column = input;
        self
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    pub fn configuration(mut self, input: crate::types::CategoryFilterConfiguration) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The configuration for a <code>CategoryFilter</code>.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::CategoryFilterConfiguration>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CategoryFilter`](crate::types::CategoryFilter).
    pub fn build(self) -> crate::types::CategoryFilter {
        crate::types::CategoryFilter {
            filter_id: self.filter_id,
            column: self.column,
            configuration: self.configuration,
        }
    }
}
