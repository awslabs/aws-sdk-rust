// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters that are required to connect to a Starburst data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StarburstParameters {
    /// <p>The host name of the Starburst data source.</p>
    pub host: ::std::string::String,
    /// <p>The port for the Starburst data source.</p>
    pub port: i32,
    /// <p>The catalog name for the Starburst data source.</p>
    pub catalog: ::std::string::String,
    /// <p>The product type for the Starburst data source.</p>
    pub product_type: ::std::option::Option<crate::types::StarburstProductType>,
    /// <p>The database access control role.</p>
    pub database_access_control_role: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Starburst.</p>
    pub o_auth_parameters: ::std::option::Option<crate::types::OAuthParameters>,
}
impl StarburstParameters {
    /// <p>The host name of the Starburst data source.</p>
    pub fn host(&self) -> &str {
        use std::ops::Deref;
        self.host.deref()
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn product_type(&self) -> ::std::option::Option<&crate::types::StarburstProductType> {
        self.product_type.as_ref()
    }
    /// <p>The database access control role.</p>
    pub fn database_access_control_role(&self) -> ::std::option::Option<&str> {
        self.database_access_control_role.as_deref()
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Starburst.</p>
    pub fn o_auth_parameters(&self) -> ::std::option::Option<&crate::types::OAuthParameters> {
        self.o_auth_parameters.as_ref()
    }
}
impl StarburstParameters {
    /// Creates a new builder-style object to manufacture [`StarburstParameters`](crate::types::StarburstParameters).
    pub fn builder() -> crate::types::builders::StarburstParametersBuilder {
        crate::types::builders::StarburstParametersBuilder::default()
    }
}

/// A builder for [`StarburstParameters`](crate::types::StarburstParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StarburstParametersBuilder {
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) product_type: ::std::option::Option<crate::types::StarburstProductType>,
    pub(crate) database_access_control_role: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) o_auth_parameters: ::std::option::Option<crate::types::OAuthParameters>,
}
impl StarburstParametersBuilder {
    /// <p>The host name of the Starburst data source.</p>
    /// This field is required.
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name of the Starburst data source.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>The host name of the Starburst data source.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>The port for the Starburst data source.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port for the Starburst data source.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The catalog name for the Starburst data source.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog name for the Starburst data source.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn product_type(mut self, input: crate::types::StarburstProductType) -> Self {
        self.product_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn set_product_type(mut self, input: ::std::option::Option<crate::types::StarburstProductType>) -> Self {
        self.product_type = input;
        self
    }
    /// <p>The product type for the Starburst data source.</p>
    pub fn get_product_type(&self) -> &::std::option::Option<crate::types::StarburstProductType> {
        &self.product_type
    }
    /// <p>The database access control role.</p>
    pub fn database_access_control_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_access_control_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database access control role.</p>
    pub fn set_database_access_control_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_access_control_role = input;
        self
    }
    /// <p>The database access control role.</p>
    pub fn get_database_access_control_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_access_control_role
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Starburst.</p>
    pub fn o_auth_parameters(mut self, input: crate::types::OAuthParameters) -> Self {
        self.o_auth_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Starburst.</p>
    pub fn set_o_auth_parameters(mut self, input: ::std::option::Option<crate::types::OAuthParameters>) -> Self {
        self.o_auth_parameters = input;
        self
    }
    /// <p>An object that contains information needed to create a data source connection between an Quick Sight account and Starburst.</p>
    pub fn get_o_auth_parameters(&self) -> &::std::option::Option<crate::types::OAuthParameters> {
        &self.o_auth_parameters
    }
    /// Consumes the builder and constructs a [`StarburstParameters`](crate::types::StarburstParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`host`](crate::types::builders::StarburstParametersBuilder::host)
    /// - [`port`](crate::types::builders::StarburstParametersBuilder::port)
    /// - [`catalog`](crate::types::builders::StarburstParametersBuilder::catalog)
    pub fn build(self) -> ::std::result::Result<crate::types::StarburstParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StarburstParameters {
            host: self.host.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "host",
                    "host was not specified but it is required when building StarburstParameters",
                )
            })?,
            port: self.port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "port",
                    "port was not specified but it is required when building StarburstParameters",
                )
            })?,
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building StarburstParameters",
                )
            })?,
            product_type: self.product_type,
            database_access_control_role: self.database_access_control_role,
            authentication_type: self.authentication_type,
            o_auth_parameters: self.o_auth_parameters,
        })
    }
}
