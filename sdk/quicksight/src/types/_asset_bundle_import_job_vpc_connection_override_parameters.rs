// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The override parameters for a single VPC connection that is imported.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleImportJobVpcConnectionOverrideParameters {
    /// <p>The ID of the VPC Connection to apply overrides to.</p>
    pub vpc_connection_id: ::std::string::String,
    /// <p>A new name for the VPC connection.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An optional override of DNS resolvers to be used by the VPC connection.</p>
    pub dns_resolvers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An optional override of the role ARN to be used by the VPC connection.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobVpcConnectionOverrideParameters {
    /// <p>The ID of the VPC Connection to apply overrides to.</p>
    pub fn vpc_connection_id(&self) -> &str {
        use std::ops::Deref;
        self.vpc_connection_id.deref()
    }
    /// <p>A new name for the VPC connection.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>An optional override of DNS resolvers to be used by the VPC connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_resolvers.is_none()`.
    pub fn dns_resolvers(&self) -> &[::std::string::String] {
        self.dns_resolvers.as_deref().unwrap_or_default()
    }
    /// <p>An optional override of the role ARN to be used by the VPC connection.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl AssetBundleImportJobVpcConnectionOverrideParameters {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportJobVpcConnectionOverrideParameters`](crate::types::AssetBundleImportJobVpcConnectionOverrideParameters).
    pub fn builder() -> crate::types::builders::AssetBundleImportJobVpcConnectionOverrideParametersBuilder {
        crate::types::builders::AssetBundleImportJobVpcConnectionOverrideParametersBuilder::default()
    }
}

/// A builder for [`AssetBundleImportJobVpcConnectionOverrideParameters`](crate::types::AssetBundleImportJobVpcConnectionOverrideParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetBundleImportJobVpcConnectionOverrideParametersBuilder {
    pub(crate) vpc_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_resolvers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobVpcConnectionOverrideParametersBuilder {
    /// <p>The ID of the VPC Connection to apply overrides to.</p>
    /// This field is required.
    pub fn vpc_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC Connection to apply overrides to.</p>
    pub fn set_vpc_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_id = input;
        self
    }
    /// <p>The ID of the VPC Connection to apply overrides to.</p>
    pub fn get_vpc_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_id
    }
    /// <p>A new name for the VPC connection.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the VPC connection.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the VPC connection.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Appends an item to `dns_resolvers`.
    ///
    /// To override the contents of this collection use [`set_dns_resolvers`](Self::set_dns_resolvers).
    ///
    /// <p>An optional override of DNS resolvers to be used by the VPC connection.</p>
    pub fn dns_resolvers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_resolvers.unwrap_or_default();
        v.push(input.into());
        self.dns_resolvers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional override of DNS resolvers to be used by the VPC connection.</p>
    pub fn set_dns_resolvers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_resolvers = input;
        self
    }
    /// <p>An optional override of DNS resolvers to be used by the VPC connection.</p>
    pub fn get_dns_resolvers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_resolvers
    }
    /// <p>An optional override of the role ARN to be used by the VPC connection.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional override of the role ARN to be used by the VPC connection.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>An optional override of the role ARN to be used by the VPC connection.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`AssetBundleImportJobVpcConnectionOverrideParameters`](crate::types::AssetBundleImportJobVpcConnectionOverrideParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`vpc_connection_id`](crate::types::builders::AssetBundleImportJobVpcConnectionOverrideParametersBuilder::vpc_connection_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AssetBundleImportJobVpcConnectionOverrideParameters, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::AssetBundleImportJobVpcConnectionOverrideParameters {
            vpc_connection_id: self.vpc_connection_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_connection_id",
                    "vpc_connection_id was not specified but it is required when building AssetBundleImportJobVpcConnectionOverrideParameters",
                )
            })?,
            name: self.name,
            subnet_ids: self.subnet_ids,
            security_group_ids: self.security_group_ids,
            dns_resolvers: self.dns_resolvers,
            role_arn: self.role_arn,
        })
    }
}
