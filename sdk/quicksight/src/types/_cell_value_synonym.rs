// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents the cell value synonym.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CellValueSynonym {
    /// <p>The cell value.</p>
    pub cell_value: ::std::option::Option<::std::string::String>,
    /// <p>Other names or aliases for the cell value.</p>
    pub synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CellValueSynonym {
    /// <p>The cell value.</p>
    pub fn cell_value(&self) -> ::std::option::Option<&str> {
        self.cell_value.as_deref()
    }
    /// <p>Other names or aliases for the cell value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.synonyms.is_none()`.
    pub fn synonyms(&self) -> &[::std::string::String] {
        self.synonyms.as_deref().unwrap_or_default()
    }
}
impl CellValueSynonym {
    /// Creates a new builder-style object to manufacture [`CellValueSynonym`](crate::types::CellValueSynonym).
    pub fn builder() -> crate::types::builders::CellValueSynonymBuilder {
        crate::types::builders::CellValueSynonymBuilder::default()
    }
}

/// A builder for [`CellValueSynonym`](crate::types::CellValueSynonym).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CellValueSynonymBuilder {
    pub(crate) cell_value: ::std::option::Option<::std::string::String>,
    pub(crate) synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CellValueSynonymBuilder {
    /// <p>The cell value.</p>
    pub fn cell_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cell_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cell value.</p>
    pub fn set_cell_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cell_value = input;
        self
    }
    /// <p>The cell value.</p>
    pub fn get_cell_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.cell_value
    }
    /// Appends an item to `synonyms`.
    ///
    /// To override the contents of this collection use [`set_synonyms`](Self::set_synonyms).
    ///
    /// <p>Other names or aliases for the cell value.</p>
    pub fn synonyms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.synonyms.unwrap_or_default();
        v.push(input.into());
        self.synonyms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Other names or aliases for the cell value.</p>
    pub fn set_synonyms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.synonyms = input;
        self
    }
    /// <p>Other names or aliases for the cell value.</p>
    pub fn get_synonyms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.synonyms
    }
    /// Consumes the builder and constructs a [`CellValueSynonym`](crate::types::CellValueSynonym).
    pub fn build(self) -> crate::types::CellValueSynonym {
        crate::types::CellValueSynonym {
            cell_value: self.cell_value,
            synonyms: self.synonyms,
        }
    }
}
