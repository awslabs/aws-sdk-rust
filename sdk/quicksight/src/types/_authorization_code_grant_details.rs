// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration details for OAuth 2.0 authorization code grant flow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AuthorizationCodeGrantDetails {
    /// <p>The client ID for the OAuth application.</p>
    pub client_id: ::std::string::String,
    /// <p>The client secret for the OAuth application.</p>
    pub client_secret: ::std::string::String,
    /// <p>The token endpoint URL for obtaining access tokens.</p>
    pub token_endpoint: ::std::string::String,
    /// <p>The authorization endpoint URL for the OAuth flow.</p>
    pub authorization_endpoint: ::std::string::String,
}
impl AuthorizationCodeGrantDetails {
    /// <p>The client ID for the OAuth application.</p>
    pub fn client_id(&self) -> &str {
        use std::ops::Deref;
        self.client_id.deref()
    }
    /// <p>The client secret for the OAuth application.</p>
    pub fn client_secret(&self) -> &str {
        use std::ops::Deref;
        self.client_secret.deref()
    }
    /// <p>The token endpoint URL for obtaining access tokens.</p>
    pub fn token_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.token_endpoint.deref()
    }
    /// <p>The authorization endpoint URL for the OAuth flow.</p>
    pub fn authorization_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.authorization_endpoint.deref()
    }
}
impl ::std::fmt::Debug for AuthorizationCodeGrantDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizationCodeGrantDetails");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("token_endpoint", &self.token_endpoint);
        formatter.field("authorization_endpoint", &self.authorization_endpoint);
        formatter.finish()
    }
}
impl AuthorizationCodeGrantDetails {
    /// Creates a new builder-style object to manufacture [`AuthorizationCodeGrantDetails`](crate::types::AuthorizationCodeGrantDetails).
    pub fn builder() -> crate::types::builders::AuthorizationCodeGrantDetailsBuilder {
        crate::types::builders::AuthorizationCodeGrantDetailsBuilder::default()
    }
}

/// A builder for [`AuthorizationCodeGrantDetails`](crate::types::AuthorizationCodeGrantDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AuthorizationCodeGrantDetailsBuilder {
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
}
impl AuthorizationCodeGrantDetailsBuilder {
    /// <p>The client ID for the OAuth application.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client ID for the OAuth application.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The client ID for the OAuth application.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The client secret for the OAuth application.</p>
    /// This field is required.
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client secret for the OAuth application.</p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p>The client secret for the OAuth application.</p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// <p>The token endpoint URL for obtaining access tokens.</p>
    /// This field is required.
    pub fn token_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token endpoint URL for obtaining access tokens.</p>
    pub fn set_token_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_endpoint = input;
        self
    }
    /// <p>The token endpoint URL for obtaining access tokens.</p>
    pub fn get_token_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_endpoint
    }
    /// <p>The authorization endpoint URL for the OAuth flow.</p>
    /// This field is required.
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization endpoint URL for the OAuth flow.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The authorization endpoint URL for the OAuth flow.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// Consumes the builder and constructs a [`AuthorizationCodeGrantDetails`](crate::types::AuthorizationCodeGrantDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`client_id`](crate::types::builders::AuthorizationCodeGrantDetailsBuilder::client_id)
    /// - [`client_secret`](crate::types::builders::AuthorizationCodeGrantDetailsBuilder::client_secret)
    /// - [`token_endpoint`](crate::types::builders::AuthorizationCodeGrantDetailsBuilder::token_endpoint)
    /// - [`authorization_endpoint`](crate::types::builders::AuthorizationCodeGrantDetailsBuilder::authorization_endpoint)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthorizationCodeGrantDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthorizationCodeGrantDetails {
            client_id: self.client_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_id",
                    "client_id was not specified but it is required when building AuthorizationCodeGrantDetails",
                )
            })?,
            client_secret: self.client_secret.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_secret",
                    "client_secret was not specified but it is required when building AuthorizationCodeGrantDetails",
                )
            })?,
            token_endpoint: self.token_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_endpoint",
                    "token_endpoint was not specified but it is required when building AuthorizationCodeGrantDetails",
                )
            })?,
            authorization_endpoint: self.authorization_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_endpoint",
                    "authorization_endpoint was not specified but it is required when building AuthorizationCodeGrantDetails",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AuthorizationCodeGrantDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizationCodeGrantDetailsBuilder");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("token_endpoint", &self.token_endpoint);
        formatter.field("authorization_endpoint", &self.authorization_endpoint);
        formatter.finish()
    }
}
