// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The pagination configuration for a table visual or boxplot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PaginationConfiguration {
    /// <p>Indicates how many items render in one page.</p>
    #[doc(hidden)]
    pub page_size: std::option::Option<i64>,
    /// <p>Indicates the page number.</p>
    #[doc(hidden)]
    pub page_number: std::option::Option<i64>,
}
impl PaginationConfiguration {
    /// <p>Indicates how many items render in one page.</p>
    pub fn page_size(&self) -> std::option::Option<i64> {
        self.page_size
    }
    /// <p>Indicates the page number.</p>
    pub fn page_number(&self) -> std::option::Option<i64> {
        self.page_number
    }
}
impl PaginationConfiguration {
    /// Creates a new builder-style object to manufacture [`PaginationConfiguration`](crate::types::PaginationConfiguration).
    pub fn builder() -> crate::types::builders::PaginationConfigurationBuilder {
        crate::types::builders::PaginationConfigurationBuilder::default()
    }
}

/// A builder for [`PaginationConfiguration`](crate::types::PaginationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PaginationConfigurationBuilder {
    pub(crate) page_size: std::option::Option<i64>,
    pub(crate) page_number: std::option::Option<i64>,
}
impl PaginationConfigurationBuilder {
    /// <p>Indicates how many items render in one page.</p>
    pub fn page_size(mut self, input: i64) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>Indicates how many items render in one page.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i64>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>Indicates the page number.</p>
    pub fn page_number(mut self, input: i64) -> Self {
        self.page_number = Some(input);
        self
    }
    /// <p>Indicates the page number.</p>
    pub fn set_page_number(mut self, input: std::option::Option<i64>) -> Self {
        self.page_number = input;
        self
    }
    /// Consumes the builder and constructs a [`PaginationConfiguration`](crate::types::PaginationConfiguration).
    pub fn build(self) -> crate::types::PaginationConfiguration {
        crate::types::PaginationConfiguration {
            page_size: self.page_size,
            page_number: self.page_number,
        }
    }
}
