// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The pagination configuration for a table visual or boxplot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PaginationConfiguration {
    /// <p>Indicates how many items render in one page.</p>
    pub page_size: i64,
    /// <p>Indicates the page number.</p>
    pub page_number: i64,
}
impl PaginationConfiguration {
    /// <p>Indicates how many items render in one page.</p>
    pub fn page_size(&self) -> i64 {
        self.page_size
    }
    /// <p>Indicates the page number.</p>
    pub fn page_number(&self) -> i64 {
        self.page_number
    }
}
impl PaginationConfiguration {
    /// Creates a new builder-style object to manufacture [`PaginationConfiguration`](crate::types::PaginationConfiguration).
    pub fn builder() -> crate::types::builders::PaginationConfigurationBuilder {
        crate::types::builders::PaginationConfigurationBuilder::default()
    }
}

/// A builder for [`PaginationConfiguration`](crate::types::PaginationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PaginationConfigurationBuilder {
    pub(crate) page_size: ::std::option::Option<i64>,
    pub(crate) page_number: ::std::option::Option<i64>,
}
impl PaginationConfigurationBuilder {
    /// <p>Indicates how many items render in one page.</p>
    /// This field is required.
    pub fn page_size(mut self, input: i64) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how many items render in one page.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>Indicates how many items render in one page.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i64> {
        &self.page_size
    }
    /// <p>Indicates the page number.</p>
    /// This field is required.
    pub fn page_number(mut self, input: i64) -> Self {
        self.page_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the page number.</p>
    pub fn set_page_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.page_number = input;
        self
    }
    /// <p>Indicates the page number.</p>
    pub fn get_page_number(&self) -> &::std::option::Option<i64> {
        &self.page_number
    }
    /// Consumes the builder and constructs a [`PaginationConfiguration`](crate::types::PaginationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`page_size`](crate::types::builders::PaginationConfigurationBuilder::page_size)
    /// - [`page_number`](crate::types::builders::PaginationConfigurationBuilder::page_number)
    pub fn build(self) -> ::std::result::Result<crate::types::PaginationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PaginationConfiguration {
            page_size: self.page_size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "page_size",
                    "page_size was not specified but it is required when building PaginationConfiguration",
                )
            })?,
            page_number: self.page_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "page_number",
                    "page_number was not specified but it is required when building PaginationConfiguration",
                )
            })?,
        })
    }
}
