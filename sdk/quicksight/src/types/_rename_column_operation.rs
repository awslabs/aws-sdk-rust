// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A transform operation that renames a column.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RenameColumnOperation {
    /// <p>The name of the column to be renamed.</p>
    #[doc(hidden)]
    pub column_name: std::option::Option<std::string::String>,
    /// <p>The new name for the column.</p>
    #[doc(hidden)]
    pub new_column_name: std::option::Option<std::string::String>,
}
impl RenameColumnOperation {
    /// <p>The name of the column to be renamed.</p>
    pub fn column_name(&self) -> std::option::Option<&str> {
        self.column_name.as_deref()
    }
    /// <p>The new name for the column.</p>
    pub fn new_column_name(&self) -> std::option::Option<&str> {
        self.new_column_name.as_deref()
    }
}
impl RenameColumnOperation {
    /// Creates a new builder-style object to manufacture [`RenameColumnOperation`](crate::types::RenameColumnOperation).
    pub fn builder() -> crate::types::builders::RenameColumnOperationBuilder {
        crate::types::builders::RenameColumnOperationBuilder::default()
    }
}

/// A builder for [`RenameColumnOperation`](crate::types::RenameColumnOperation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RenameColumnOperationBuilder {
    pub(crate) column_name: std::option::Option<std::string::String>,
    pub(crate) new_column_name: std::option::Option<std::string::String>,
}
impl RenameColumnOperationBuilder {
    /// <p>The name of the column to be renamed.</p>
    pub fn column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.column_name = Some(input.into());
        self
    }
    /// <p>The name of the column to be renamed.</p>
    pub fn set_column_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The new name for the column.</p>
    pub fn new_column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_column_name = Some(input.into());
        self
    }
    /// <p>The new name for the column.</p>
    pub fn set_new_column_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_column_name = input;
        self
    }
    /// Consumes the builder and constructs a [`RenameColumnOperation`](crate::types::RenameColumnOperation).
    pub fn build(self) -> crate::types::RenameColumnOperation {
        crate::types::RenameColumnOperation {
            column_name: self.column_name,
            new_column_name: self.new_column_name,
        }
    }
}
