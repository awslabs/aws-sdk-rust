// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TransformOperation {
    /// <p>A transform operation that casts a column to a different type.</p>
    CastColumnTypeOperation(crate::types::CastColumnTypeOperation),
    /// <p>An operation that creates calculated columns. Columns created in one such operation form a lexical closure.</p>
    CreateColumnsOperation(crate::types::CreateColumnsOperation),
    /// <p>An operation that filters rows based on some condition.</p>
    FilterOperation(crate::types::FilterOperation),
    /// <p>An operation that projects columns. Operations that come after a projection can only refer to projected columns.</p>
    ProjectOperation(crate::types::ProjectOperation),
    /// <p>An operation that renames a column.</p>
    RenameColumnOperation(crate::types::RenameColumnOperation),
    /// <p>An operation that tags a column with additional information.</p>
    TagColumnOperation(crate::types::TagColumnOperation),
    /// <p>A transform operation that removes tags associated with a column.</p>
    UntagColumnOperation(crate::types::UntagColumnOperation),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TransformOperation {
    /// Tries to convert the enum instance into [`CastColumnTypeOperation`](crate::types::TransformOperation::CastColumnTypeOperation), extracting the inner [`CastColumnTypeOperation`](crate::types::CastColumnTypeOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cast_column_type_operation(
        &self,
    ) -> std::result::Result<&crate::types::CastColumnTypeOperation, &Self> {
        if let TransformOperation::CastColumnTypeOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CastColumnTypeOperation`](crate::types::TransformOperation::CastColumnTypeOperation).
    pub fn is_cast_column_type_operation(&self) -> bool {
        self.as_cast_column_type_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateColumnsOperation`](crate::types::TransformOperation::CreateColumnsOperation), extracting the inner [`CreateColumnsOperation`](crate::types::CreateColumnsOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_columns_operation(
        &self,
    ) -> std::result::Result<&crate::types::CreateColumnsOperation, &Self> {
        if let TransformOperation::CreateColumnsOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CreateColumnsOperation`](crate::types::TransformOperation::CreateColumnsOperation).
    pub fn is_create_columns_operation(&self) -> bool {
        self.as_create_columns_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`FilterOperation`](crate::types::TransformOperation::FilterOperation), extracting the inner [`FilterOperation`](crate::types::FilterOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_filter_operation(
        &self,
    ) -> std::result::Result<&crate::types::FilterOperation, &Self> {
        if let TransformOperation::FilterOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`FilterOperation`](crate::types::TransformOperation::FilterOperation).
    pub fn is_filter_operation(&self) -> bool {
        self.as_filter_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`ProjectOperation`](crate::types::TransformOperation::ProjectOperation), extracting the inner [`ProjectOperation`](crate::types::ProjectOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_project_operation(
        &self,
    ) -> std::result::Result<&crate::types::ProjectOperation, &Self> {
        if let TransformOperation::ProjectOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ProjectOperation`](crate::types::TransformOperation::ProjectOperation).
    pub fn is_project_operation(&self) -> bool {
        self.as_project_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`RenameColumnOperation`](crate::types::TransformOperation::RenameColumnOperation), extracting the inner [`RenameColumnOperation`](crate::types::RenameColumnOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_rename_column_operation(
        &self,
    ) -> std::result::Result<&crate::types::RenameColumnOperation, &Self> {
        if let TransformOperation::RenameColumnOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`RenameColumnOperation`](crate::types::TransformOperation::RenameColumnOperation).
    pub fn is_rename_column_operation(&self) -> bool {
        self.as_rename_column_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`TagColumnOperation`](crate::types::TransformOperation::TagColumnOperation), extracting the inner [`TagColumnOperation`](crate::types::TagColumnOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_tag_column_operation(
        &self,
    ) -> std::result::Result<&crate::types::TagColumnOperation, &Self> {
        if let TransformOperation::TagColumnOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`TagColumnOperation`](crate::types::TransformOperation::TagColumnOperation).
    pub fn is_tag_column_operation(&self) -> bool {
        self.as_tag_column_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`UntagColumnOperation`](crate::types::TransformOperation::UntagColumnOperation), extracting the inner [`UntagColumnOperation`](crate::types::UntagColumnOperation).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_untag_column_operation(
        &self,
    ) -> std::result::Result<&crate::types::UntagColumnOperation, &Self> {
        if let TransformOperation::UntagColumnOperation(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`UntagColumnOperation`](crate::types::TransformOperation::UntagColumnOperation).
    pub fn is_untag_column_operation(&self) -> bool {
        self.as_untag_column_operation().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
