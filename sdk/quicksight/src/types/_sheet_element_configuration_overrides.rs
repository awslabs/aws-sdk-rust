// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The override configuration of the rendering rules of a sheet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SheetElementConfigurationOverrides {
    /// <p>Determines whether or not the overrides are visible. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code> </p> </li>
    /// <li> <p> <code>HIDDEN</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
}
impl SheetElementConfigurationOverrides {
    /// <p>Determines whether or not the overrides are visible. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code> </p> </li>
    /// <li> <p> <code>HIDDEN</code> </p> </li>
    /// </ul>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl SheetElementConfigurationOverrides {
    /// Creates a new builder-style object to manufacture [`SheetElementConfigurationOverrides`](crate::types::SheetElementConfigurationOverrides).
    pub fn builder() -> crate::types::builders::SheetElementConfigurationOverridesBuilder {
        crate::types::builders::SheetElementConfigurationOverridesBuilder::default()
    }
}

/// A builder for [`SheetElementConfigurationOverrides`](crate::types::SheetElementConfigurationOverrides).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SheetElementConfigurationOverridesBuilder {
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
}
impl SheetElementConfigurationOverridesBuilder {
    /// <p>Determines whether or not the overrides are visible. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code> </p> </li>
    /// <li> <p> <code>HIDDEN</code> </p> </li>
    /// </ul>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>Determines whether or not the overrides are visible. Choose one of the following options:</p>
    /// <ul>
    /// <li> <p> <code>VISIBLE</code> </p> </li>
    /// <li> <p> <code>HIDDEN</code> </p> </li>
    /// </ul>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// Consumes the builder and constructs a [`SheetElementConfigurationOverrides`](crate::types::SheetElementConfigurationOverrides).
    pub fn build(self) -> crate::types::SheetElementConfigurationOverrides {
        crate::types::SheetElementConfigurationOverrides {
            visibility: self.visibility,
        }
    }
}
