// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A visual displayed on a sheet in an analysis, dashboard, or template.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Visual {
    /// <p>A table visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub table_visual: std::option::Option<crate::types::TableVisual>,
    /// <p>A pivot table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub pivot_table_visual: std::option::Option<crate::types::PivotTableVisual>,
    /// <p>A bar chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub bar_chart_visual: std::option::Option<crate::types::BarChartVisual>,
    /// <p>A key performance indicator (KPI).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub kpi_visual: std::option::Option<crate::types::KpiVisual>,
    /// <p>A pie or donut chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub pie_chart_visual: std::option::Option<crate::types::PieChartVisual>,
    /// <p>A gauge chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub gauge_chart_visual: std::option::Option<crate::types::GaugeChartVisual>,
    /// <p>A line chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub line_chart_visual: std::option::Option<crate::types::LineChartVisual>,
    /// <p>A heat map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub heat_map_visual: std::option::Option<crate::types::HeatMapVisual>,
    /// <p>A tree map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub tree_map_visual: std::option::Option<crate::types::TreeMapVisual>,
    /// <p>A geospatial map or a points on map visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub geospatial_map_visual: std::option::Option<crate::types::GeospatialMapVisual>,
    /// <p>A filled map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub filled_map_visual: std::option::Option<crate::types::FilledMapVisual>,
    /// <p>A funnel chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub funnel_chart_visual: std::option::Option<crate::types::FunnelChartVisual>,
    /// <p>A scatter plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub scatter_plot_visual: std::option::Option<crate::types::ScatterPlotVisual>,
    /// <p>A combo chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub combo_chart_visual: std::option::Option<crate::types::ComboChartVisual>,
    /// <p>A box plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub box_plot_visual: std::option::Option<crate::types::BoxPlotVisual>,
    /// <p>A waterfall chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub waterfall_visual: std::option::Option<crate::types::WaterfallVisual>,
    /// <p>A histogram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub histogram_visual: std::option::Option<crate::types::HistogramVisual>,
    /// <p>A word cloud.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub word_cloud_visual: std::option::Option<crate::types::WordCloudVisual>,
    /// <p>An insight visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub insight_visual: std::option::Option<crate::types::InsightVisual>,
    /// <p>A sankey diagram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub sankey_diagram_visual: std::option::Option<crate::types::SankeyDiagramVisual>,
    /// <p>A visual that contains custom content.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub custom_content_visual: std::option::Option<crate::types::CustomContentVisual>,
    /// <p>An empty visual.</p>
    #[doc(hidden)]
    pub empty_visual: std::option::Option<crate::types::EmptyVisual>,
}
impl Visual {
    /// <p>A table visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn table_visual(&self) -> std::option::Option<&crate::types::TableVisual> {
        self.table_visual.as_ref()
    }
    /// <p>A pivot table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn pivot_table_visual(&self) -> std::option::Option<&crate::types::PivotTableVisual> {
        self.pivot_table_visual.as_ref()
    }
    /// <p>A bar chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn bar_chart_visual(&self) -> std::option::Option<&crate::types::BarChartVisual> {
        self.bar_chart_visual.as_ref()
    }
    /// <p>A key performance indicator (KPI).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn kpi_visual(&self) -> std::option::Option<&crate::types::KpiVisual> {
        self.kpi_visual.as_ref()
    }
    /// <p>A pie or donut chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn pie_chart_visual(&self) -> std::option::Option<&crate::types::PieChartVisual> {
        self.pie_chart_visual.as_ref()
    }
    /// <p>A gauge chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn gauge_chart_visual(&self) -> std::option::Option<&crate::types::GaugeChartVisual> {
        self.gauge_chart_visual.as_ref()
    }
    /// <p>A line chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn line_chart_visual(&self) -> std::option::Option<&crate::types::LineChartVisual> {
        self.line_chart_visual.as_ref()
    }
    /// <p>A heat map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn heat_map_visual(&self) -> std::option::Option<&crate::types::HeatMapVisual> {
        self.heat_map_visual.as_ref()
    }
    /// <p>A tree map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn tree_map_visual(&self) -> std::option::Option<&crate::types::TreeMapVisual> {
        self.tree_map_visual.as_ref()
    }
    /// <p>A geospatial map or a points on map visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn geospatial_map_visual(&self) -> std::option::Option<&crate::types::GeospatialMapVisual> {
        self.geospatial_map_visual.as_ref()
    }
    /// <p>A filled map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn filled_map_visual(&self) -> std::option::Option<&crate::types::FilledMapVisual> {
        self.filled_map_visual.as_ref()
    }
    /// <p>A funnel chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn funnel_chart_visual(&self) -> std::option::Option<&crate::types::FunnelChartVisual> {
        self.funnel_chart_visual.as_ref()
    }
    /// <p>A scatter plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn scatter_plot_visual(&self) -> std::option::Option<&crate::types::ScatterPlotVisual> {
        self.scatter_plot_visual.as_ref()
    }
    /// <p>A combo chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn combo_chart_visual(&self) -> std::option::Option<&crate::types::ComboChartVisual> {
        self.combo_chart_visual.as_ref()
    }
    /// <p>A box plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn box_plot_visual(&self) -> std::option::Option<&crate::types::BoxPlotVisual> {
        self.box_plot_visual.as_ref()
    }
    /// <p>A waterfall chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn waterfall_visual(&self) -> std::option::Option<&crate::types::WaterfallVisual> {
        self.waterfall_visual.as_ref()
    }
    /// <p>A histogram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn histogram_visual(&self) -> std::option::Option<&crate::types::HistogramVisual> {
        self.histogram_visual.as_ref()
    }
    /// <p>A word cloud.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn word_cloud_visual(&self) -> std::option::Option<&crate::types::WordCloudVisual> {
        self.word_cloud_visual.as_ref()
    }
    /// <p>An insight visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn insight_visual(&self) -> std::option::Option<&crate::types::InsightVisual> {
        self.insight_visual.as_ref()
    }
    /// <p>A sankey diagram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn sankey_diagram_visual(&self) -> std::option::Option<&crate::types::SankeyDiagramVisual> {
        self.sankey_diagram_visual.as_ref()
    }
    /// <p>A visual that contains custom content.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn custom_content_visual(&self) -> std::option::Option<&crate::types::CustomContentVisual> {
        self.custom_content_visual.as_ref()
    }
    /// <p>An empty visual.</p>
    pub fn empty_visual(&self) -> std::option::Option<&crate::types::EmptyVisual> {
        self.empty_visual.as_ref()
    }
}
impl Visual {
    /// Creates a new builder-style object to manufacture [`Visual`](crate::types::Visual).
    pub fn builder() -> crate::types::builders::VisualBuilder {
        crate::types::builders::VisualBuilder::default()
    }
}

/// A builder for [`Visual`](crate::types::Visual).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VisualBuilder {
    pub(crate) table_visual: std::option::Option<crate::types::TableVisual>,
    pub(crate) pivot_table_visual: std::option::Option<crate::types::PivotTableVisual>,
    pub(crate) bar_chart_visual: std::option::Option<crate::types::BarChartVisual>,
    pub(crate) kpi_visual: std::option::Option<crate::types::KpiVisual>,
    pub(crate) pie_chart_visual: std::option::Option<crate::types::PieChartVisual>,
    pub(crate) gauge_chart_visual: std::option::Option<crate::types::GaugeChartVisual>,
    pub(crate) line_chart_visual: std::option::Option<crate::types::LineChartVisual>,
    pub(crate) heat_map_visual: std::option::Option<crate::types::HeatMapVisual>,
    pub(crate) tree_map_visual: std::option::Option<crate::types::TreeMapVisual>,
    pub(crate) geospatial_map_visual: std::option::Option<crate::types::GeospatialMapVisual>,
    pub(crate) filled_map_visual: std::option::Option<crate::types::FilledMapVisual>,
    pub(crate) funnel_chart_visual: std::option::Option<crate::types::FunnelChartVisual>,
    pub(crate) scatter_plot_visual: std::option::Option<crate::types::ScatterPlotVisual>,
    pub(crate) combo_chart_visual: std::option::Option<crate::types::ComboChartVisual>,
    pub(crate) box_plot_visual: std::option::Option<crate::types::BoxPlotVisual>,
    pub(crate) waterfall_visual: std::option::Option<crate::types::WaterfallVisual>,
    pub(crate) histogram_visual: std::option::Option<crate::types::HistogramVisual>,
    pub(crate) word_cloud_visual: std::option::Option<crate::types::WordCloudVisual>,
    pub(crate) insight_visual: std::option::Option<crate::types::InsightVisual>,
    pub(crate) sankey_diagram_visual: std::option::Option<crate::types::SankeyDiagramVisual>,
    pub(crate) custom_content_visual: std::option::Option<crate::types::CustomContentVisual>,
    pub(crate) empty_visual: std::option::Option<crate::types::EmptyVisual>,
}
impl VisualBuilder {
    /// <p>A table visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn table_visual(mut self, input: crate::types::TableVisual) -> Self {
        self.table_visual = Some(input);
        self
    }
    /// <p>A table visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_table_visual(
        mut self,
        input: std::option::Option<crate::types::TableVisual>,
    ) -> Self {
        self.table_visual = input;
        self
    }
    /// <p>A pivot table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn pivot_table_visual(mut self, input: crate::types::PivotTableVisual) -> Self {
        self.pivot_table_visual = Some(input);
        self
    }
    /// <p>A pivot table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_pivot_table_visual(
        mut self,
        input: std::option::Option<crate::types::PivotTableVisual>,
    ) -> Self {
        self.pivot_table_visual = input;
        self
    }
    /// <p>A bar chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn bar_chart_visual(mut self, input: crate::types::BarChartVisual) -> Self {
        self.bar_chart_visual = Some(input);
        self
    }
    /// <p>A bar chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_bar_chart_visual(
        mut self,
        input: std::option::Option<crate::types::BarChartVisual>,
    ) -> Self {
        self.bar_chart_visual = input;
        self
    }
    /// <p>A key performance indicator (KPI).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn kpi_visual(mut self, input: crate::types::KpiVisual) -> Self {
        self.kpi_visual = Some(input);
        self
    }
    /// <p>A key performance indicator (KPI).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_kpi_visual(mut self, input: std::option::Option<crate::types::KpiVisual>) -> Self {
        self.kpi_visual = input;
        self
    }
    /// <p>A pie or donut chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn pie_chart_visual(mut self, input: crate::types::PieChartVisual) -> Self {
        self.pie_chart_visual = Some(input);
        self
    }
    /// <p>A pie or donut chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_pie_chart_visual(
        mut self,
        input: std::option::Option<crate::types::PieChartVisual>,
    ) -> Self {
        self.pie_chart_visual = input;
        self
    }
    /// <p>A gauge chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn gauge_chart_visual(mut self, input: crate::types::GaugeChartVisual) -> Self {
        self.gauge_chart_visual = Some(input);
        self
    }
    /// <p>A gauge chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_gauge_chart_visual(
        mut self,
        input: std::option::Option<crate::types::GaugeChartVisual>,
    ) -> Self {
        self.gauge_chart_visual = input;
        self
    }
    /// <p>A line chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn line_chart_visual(mut self, input: crate::types::LineChartVisual) -> Self {
        self.line_chart_visual = Some(input);
        self
    }
    /// <p>A line chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_line_chart_visual(
        mut self,
        input: std::option::Option<crate::types::LineChartVisual>,
    ) -> Self {
        self.line_chart_visual = input;
        self
    }
    /// <p>A heat map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn heat_map_visual(mut self, input: crate::types::HeatMapVisual) -> Self {
        self.heat_map_visual = Some(input);
        self
    }
    /// <p>A heat map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_heat_map_visual(
        mut self,
        input: std::option::Option<crate::types::HeatMapVisual>,
    ) -> Self {
        self.heat_map_visual = input;
        self
    }
    /// <p>A tree map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn tree_map_visual(mut self, input: crate::types::TreeMapVisual) -> Self {
        self.tree_map_visual = Some(input);
        self
    }
    /// <p>A tree map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_tree_map_visual(
        mut self,
        input: std::option::Option<crate::types::TreeMapVisual>,
    ) -> Self {
        self.tree_map_visual = input;
        self
    }
    /// <p>A geospatial map or a points on map visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn geospatial_map_visual(mut self, input: crate::types::GeospatialMapVisual) -> Self {
        self.geospatial_map_visual = Some(input);
        self
    }
    /// <p>A geospatial map or a points on map visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_geospatial_map_visual(
        mut self,
        input: std::option::Option<crate::types::GeospatialMapVisual>,
    ) -> Self {
        self.geospatial_map_visual = input;
        self
    }
    /// <p>A filled map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn filled_map_visual(mut self, input: crate::types::FilledMapVisual) -> Self {
        self.filled_map_visual = Some(input);
        self
    }
    /// <p>A filled map.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_filled_map_visual(
        mut self,
        input: std::option::Option<crate::types::FilledMapVisual>,
    ) -> Self {
        self.filled_map_visual = input;
        self
    }
    /// <p>A funnel chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn funnel_chart_visual(mut self, input: crate::types::FunnelChartVisual) -> Self {
        self.funnel_chart_visual = Some(input);
        self
    }
    /// <p>A funnel chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_funnel_chart_visual(
        mut self,
        input: std::option::Option<crate::types::FunnelChartVisual>,
    ) -> Self {
        self.funnel_chart_visual = input;
        self
    }
    /// <p>A scatter plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn scatter_plot_visual(mut self, input: crate::types::ScatterPlotVisual) -> Self {
        self.scatter_plot_visual = Some(input);
        self
    }
    /// <p>A scatter plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_scatter_plot_visual(
        mut self,
        input: std::option::Option<crate::types::ScatterPlotVisual>,
    ) -> Self {
        self.scatter_plot_visual = input;
        self
    }
    /// <p>A combo chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn combo_chart_visual(mut self, input: crate::types::ComboChartVisual) -> Self {
        self.combo_chart_visual = Some(input);
        self
    }
    /// <p>A combo chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_combo_chart_visual(
        mut self,
        input: std::option::Option<crate::types::ComboChartVisual>,
    ) -> Self {
        self.combo_chart_visual = input;
        self
    }
    /// <p>A box plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn box_plot_visual(mut self, input: crate::types::BoxPlotVisual) -> Self {
        self.box_plot_visual = Some(input);
        self
    }
    /// <p>A box plot.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_box_plot_visual(
        mut self,
        input: std::option::Option<crate::types::BoxPlotVisual>,
    ) -> Self {
        self.box_plot_visual = input;
        self
    }
    /// <p>A waterfall chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn waterfall_visual(mut self, input: crate::types::WaterfallVisual) -> Self {
        self.waterfall_visual = Some(input);
        self
    }
    /// <p>A waterfall chart.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_waterfall_visual(
        mut self,
        input: std::option::Option<crate::types::WaterfallVisual>,
    ) -> Self {
        self.waterfall_visual = input;
        self
    }
    /// <p>A histogram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn histogram_visual(mut self, input: crate::types::HistogramVisual) -> Self {
        self.histogram_visual = Some(input);
        self
    }
    /// <p>A histogram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_histogram_visual(
        mut self,
        input: std::option::Option<crate::types::HistogramVisual>,
    ) -> Self {
        self.histogram_visual = input;
        self
    }
    /// <p>A word cloud.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn word_cloud_visual(mut self, input: crate::types::WordCloudVisual) -> Self {
        self.word_cloud_visual = Some(input);
        self
    }
    /// <p>A word cloud.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_word_cloud_visual(
        mut self,
        input: std::option::Option<crate::types::WordCloudVisual>,
    ) -> Self {
        self.word_cloud_visual = input;
        self
    }
    /// <p>An insight visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn insight_visual(mut self, input: crate::types::InsightVisual) -> Self {
        self.insight_visual = Some(input);
        self
    }
    /// <p>An insight visual.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_insight_visual(
        mut self,
        input: std::option::Option<crate::types::InsightVisual>,
    ) -> Self {
        self.insight_visual = input;
        self
    }
    /// <p>A sankey diagram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn sankey_diagram_visual(mut self, input: crate::types::SankeyDiagramVisual) -> Self {
        self.sankey_diagram_visual = Some(input);
        self
    }
    /// <p>A sankey diagram.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_sankey_diagram_visual(
        mut self,
        input: std::option::Option<crate::types::SankeyDiagramVisual>,
    ) -> Self {
        self.sankey_diagram_visual = input;
        self
    }
    /// <p>A visual that contains custom content.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn custom_content_visual(mut self, input: crate::types::CustomContentVisual) -> Self {
        self.custom_content_visual = Some(input);
        self
    }
    /// <p>A visual that contains custom content.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_custom_content_visual(
        mut self,
        input: std::option::Option<crate::types::CustomContentVisual>,
    ) -> Self {
        self.custom_content_visual = input;
        self
    }
    /// <p>An empty visual.</p>
    pub fn empty_visual(mut self, input: crate::types::EmptyVisual) -> Self {
        self.empty_visual = Some(input);
        self
    }
    /// <p>An empty visual.</p>
    pub fn set_empty_visual(
        mut self,
        input: std::option::Option<crate::types::EmptyVisual>,
    ) -> Self {
        self.empty_visual = input;
        self
    }
    /// Consumes the builder and constructs a [`Visual`](crate::types::Visual).
    pub fn build(self) -> crate::types::Visual {
        crate::types::Visual {
            table_visual: self.table_visual,
            pivot_table_visual: self.pivot_table_visual,
            bar_chart_visual: self.bar_chart_visual,
            kpi_visual: self.kpi_visual,
            pie_chart_visual: self.pie_chart_visual,
            gauge_chart_visual: self.gauge_chart_visual,
            line_chart_visual: self.line_chart_visual,
            heat_map_visual: self.heat_map_visual,
            tree_map_visual: self.tree_map_visual,
            geospatial_map_visual: self.geospatial_map_visual,
            filled_map_visual: self.filled_map_visual,
            funnel_chart_visual: self.funnel_chart_visual,
            scatter_plot_visual: self.scatter_plot_visual,
            combo_chart_visual: self.combo_chart_visual,
            box_plot_visual: self.box_plot_visual,
            waterfall_visual: self.waterfall_visual,
            histogram_visual: self.histogram_visual,
            word_cloud_visual: self.word_cloud_visual,
            insight_visual: self.insight_visual,
            sankey_diagram_visual: self.sankey_diagram_visual,
            custom_content_visual: self.custom_content_visual,
            empty_visual: self.empty_visual,
        }
    }
}
