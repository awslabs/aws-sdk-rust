// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the thousands separator configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThousandSeparatorOptions {
    /// <p>Determines the thousands separator symbol.</p>
    #[doc(hidden)]
    pub symbol: std::option::Option<crate::types::NumericSeparatorSymbol>,
    /// <p>Determines the visibility of the thousands separator.</p>
    #[doc(hidden)]
    pub visibility: std::option::Option<crate::types::Visibility>,
}
impl ThousandSeparatorOptions {
    /// <p>Determines the thousands separator symbol.</p>
    pub fn symbol(&self) -> std::option::Option<&crate::types::NumericSeparatorSymbol> {
        self.symbol.as_ref()
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn visibility(&self) -> std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl ThousandSeparatorOptions {
    /// Creates a new builder-style object to manufacture [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
    pub fn builder() -> crate::types::builders::ThousandSeparatorOptionsBuilder {
        crate::types::builders::ThousandSeparatorOptionsBuilder::default()
    }
}

/// A builder for [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThousandSeparatorOptionsBuilder {
    pub(crate) symbol: std::option::Option<crate::types::NumericSeparatorSymbol>,
    pub(crate) visibility: std::option::Option<crate::types::Visibility>,
}
impl ThousandSeparatorOptionsBuilder {
    /// <p>Determines the thousands separator symbol.</p>
    pub fn symbol(mut self, input: crate::types::NumericSeparatorSymbol) -> Self {
        self.symbol = Some(input);
        self
    }
    /// <p>Determines the thousands separator symbol.</p>
    pub fn set_symbol(
        mut self,
        input: std::option::Option<crate::types::NumericSeparatorSymbol>,
    ) -> Self {
        self.symbol = input;
        self
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = Some(input);
        self
    }
    /// <p>Determines the visibility of the thousands separator.</p>
    pub fn set_visibility(mut self, input: std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// Consumes the builder and constructs a [`ThousandSeparatorOptions`](crate::types::ThousandSeparatorOptions).
    pub fn build(self) -> crate::types::ThousandSeparatorOptions {
        crate::types::ThousandSeparatorOptions {
            symbol: self.symbol,
            visibility: self.visibility,
        }
    }
}
