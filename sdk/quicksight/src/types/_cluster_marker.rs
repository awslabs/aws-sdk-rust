// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The cluster marker that is a part of the cluster marker configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClusterMarker {
    /// <p>The simple cluster marker of the cluster marker.</p>
    #[doc(hidden)]
    pub simple_cluster_marker: std::option::Option<crate::types::SimpleClusterMarker>,
}
impl ClusterMarker {
    /// <p>The simple cluster marker of the cluster marker.</p>
    pub fn simple_cluster_marker(&self) -> std::option::Option<&crate::types::SimpleClusterMarker> {
        self.simple_cluster_marker.as_ref()
    }
}
impl ClusterMarker {
    /// Creates a new builder-style object to manufacture [`ClusterMarker`](crate::types::ClusterMarker).
    pub fn builder() -> crate::types::builders::ClusterMarkerBuilder {
        crate::types::builders::ClusterMarkerBuilder::default()
    }
}

/// A builder for [`ClusterMarker`](crate::types::ClusterMarker).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusterMarkerBuilder {
    pub(crate) simple_cluster_marker: std::option::Option<crate::types::SimpleClusterMarker>,
}
impl ClusterMarkerBuilder {
    /// <p>The simple cluster marker of the cluster marker.</p>
    pub fn simple_cluster_marker(mut self, input: crate::types::SimpleClusterMarker) -> Self {
        self.simple_cluster_marker = Some(input);
        self
    }
    /// <p>The simple cluster marker of the cluster marker.</p>
    pub fn set_simple_cluster_marker(
        mut self,
        input: std::option::Option<crate::types::SimpleClusterMarker>,
    ) -> Self {
        self.simple_cluster_marker = input;
        self
    }
    /// Consumes the builder and constructs a [`ClusterMarker`](crate::types::ClusterMarker).
    pub fn build(self) -> crate::types::ClusterMarker {
        crate::types::ClusterMarker {
            simple_cluster_marker: self.simple_cluster_marker,
        }
    }
}
