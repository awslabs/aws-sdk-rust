// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The basic information of the flow exluding its definition specifying the steps.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowSummary {
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier of the flow.</p>
    pub flow_id: ::std::string::String,
    /// <p>The display name of the flow.</p>
    pub name: ::std::string::String,
    /// <p>The description of the flow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The time this flow was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The identifier of the principal who created the flow.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The last time this flow was modified.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the last principal who updated the flow.</p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The publish state for the flow. The valid values are <code>DRAFT</code>, <code>PUBLISHED</code>, or <code>PENDING_APPROVAL</code>.</p>
    pub publish_state: ::std::option::Option<crate::types::FlowPublishState>,
    /// <p>The number of runs done for the flow.</p>
    pub run_count: i32,
    /// <p>The number of users who have used the flow.</p>
    pub user_count: i32,
    /// <p>The identifier of the last principal who published the flow.</p>
    pub last_published_by: ::std::option::Option<::std::string::String>,
    /// <p>The last time this flow was published.</p>
    pub last_published_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl FlowSummary {
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier of the flow.</p>
    pub fn flow_id(&self) -> &str {
        use std::ops::Deref;
        self.flow_id.deref()
    }
    /// <p>The display name of the flow.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the flow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time this flow was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The identifier of the principal who created the flow.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The last time this flow was modified.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The identifier of the last principal who updated the flow.</p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p>The publish state for the flow. The valid values are <code>DRAFT</code>, <code>PUBLISHED</code>, or <code>PENDING_APPROVAL</code>.</p>
    pub fn publish_state(&self) -> ::std::option::Option<&crate::types::FlowPublishState> {
        self.publish_state.as_ref()
    }
    /// <p>The number of runs done for the flow.</p>
    pub fn run_count(&self) -> i32 {
        self.run_count
    }
    /// <p>The number of users who have used the flow.</p>
    pub fn user_count(&self) -> i32 {
        self.user_count
    }
    /// <p>The identifier of the last principal who published the flow.</p>
    pub fn last_published_by(&self) -> ::std::option::Option<&str> {
        self.last_published_by.as_deref()
    }
    /// <p>The last time this flow was published.</p>
    pub fn last_published_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_published_at.as_ref()
    }
}
impl FlowSummary {
    /// Creates a new builder-style object to manufacture [`FlowSummary`](crate::types::FlowSummary).
    pub fn builder() -> crate::types::builders::FlowSummaryBuilder {
        crate::types::builders::FlowSummaryBuilder::default()
    }
}

/// A builder for [`FlowSummary`](crate::types::FlowSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) flow_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) publish_state: ::std::option::Option<crate::types::FlowPublishState>,
    pub(crate) run_count: ::std::option::Option<i32>,
    pub(crate) user_count: ::std::option::Option<i32>,
    pub(crate) last_published_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_published_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl FlowSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the flow.</p>
    /// This field is required.
    pub fn flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow.</p>
    pub fn set_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_id = input;
        self
    }
    /// <p>The unique identifier of the flow.</p>
    pub fn get_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_id
    }
    /// <p>The display name of the flow.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the flow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the flow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the flow.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the flow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the flow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The time this flow was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time this flow was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time this flow was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The identifier of the principal who created the flow.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the principal who created the flow.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The identifier of the principal who created the flow.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The last time this flow was modified.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time this flow was modified.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The last time this flow was modified.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The identifier of the last principal who updated the flow.</p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the last principal who updated the flow.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The identifier of the last principal who updated the flow.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// <p>The publish state for the flow. The valid values are <code>DRAFT</code>, <code>PUBLISHED</code>, or <code>PENDING_APPROVAL</code>.</p>
    pub fn publish_state(mut self, input: crate::types::FlowPublishState) -> Self {
        self.publish_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The publish state for the flow. The valid values are <code>DRAFT</code>, <code>PUBLISHED</code>, or <code>PENDING_APPROVAL</code>.</p>
    pub fn set_publish_state(mut self, input: ::std::option::Option<crate::types::FlowPublishState>) -> Self {
        self.publish_state = input;
        self
    }
    /// <p>The publish state for the flow. The valid values are <code>DRAFT</code>, <code>PUBLISHED</code>, or <code>PENDING_APPROVAL</code>.</p>
    pub fn get_publish_state(&self) -> &::std::option::Option<crate::types::FlowPublishState> {
        &self.publish_state
    }
    /// <p>The number of runs done for the flow.</p>
    pub fn run_count(mut self, input: i32) -> Self {
        self.run_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of runs done for the flow.</p>
    pub fn set_run_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.run_count = input;
        self
    }
    /// <p>The number of runs done for the flow.</p>
    pub fn get_run_count(&self) -> &::std::option::Option<i32> {
        &self.run_count
    }
    /// <p>The number of users who have used the flow.</p>
    pub fn user_count(mut self, input: i32) -> Self {
        self.user_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of users who have used the flow.</p>
    pub fn set_user_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.user_count = input;
        self
    }
    /// <p>The number of users who have used the flow.</p>
    pub fn get_user_count(&self) -> &::std::option::Option<i32> {
        &self.user_count
    }
    /// <p>The identifier of the last principal who published the flow.</p>
    pub fn last_published_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_published_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the last principal who published the flow.</p>
    pub fn set_last_published_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_published_by = input;
        self
    }
    /// <p>The identifier of the last principal who published the flow.</p>
    pub fn get_last_published_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_published_by
    }
    /// <p>The last time this flow was published.</p>
    pub fn last_published_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_published_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time this flow was published.</p>
    pub fn set_last_published_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_published_at = input;
        self
    }
    /// <p>The last time this flow was published.</p>
    pub fn get_last_published_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_published_at
    }
    /// Consumes the builder and constructs a [`FlowSummary`](crate::types::FlowSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::FlowSummaryBuilder::arn)
    /// - [`flow_id`](crate::types::builders::FlowSummaryBuilder::flow_id)
    /// - [`name`](crate::types::builders::FlowSummaryBuilder::name)
    /// - [`created_time`](crate::types::builders::FlowSummaryBuilder::created_time)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building FlowSummary",
                )
            })?,
            flow_id: self.flow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "flow_id",
                    "flow_id was not specified but it is required when building FlowSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowSummary",
                )
            })?,
            description: self.description,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building FlowSummary",
                )
            })?,
            created_by: self.created_by,
            last_updated_time: self.last_updated_time,
            last_updated_by: self.last_updated_by,
            publish_state: self.publish_state,
            run_count: self.run_count.unwrap_or_default(),
            user_count: self.user_count.unwrap_or_default(),
            last_published_by: self.last_published_by,
            last_published_at: self.last_published_at,
        })
    }
}
