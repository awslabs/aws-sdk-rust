// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The growth rate computation configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GrowthRateComputation {
    /// <p>The ID for a computation.</p>
    #[doc(hidden)]
    pub computation_id: std::option::Option<std::string::String>,
    /// <p>The name of a computation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The time field that is used in a computation.</p>
    #[doc(hidden)]
    pub time: std::option::Option<crate::types::DimensionField>,
    /// <p>The value field that is used in a computation.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::MeasureField>,
    /// <p>The period size setup of a growth rate computation.</p>
    #[doc(hidden)]
    pub period_size: i32,
}
impl GrowthRateComputation {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(&self) -> std::option::Option<&str> {
        self.computation_id.as_deref()
    }
    /// <p>The name of a computation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(&self) -> std::option::Option<&crate::types::DimensionField> {
        self.time.as_ref()
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::MeasureField> {
        self.value.as_ref()
    }
    /// <p>The period size setup of a growth rate computation.</p>
    pub fn period_size(&self) -> i32 {
        self.period_size
    }
}
impl GrowthRateComputation {
    /// Creates a new builder-style object to manufacture [`GrowthRateComputation`](crate::types::GrowthRateComputation).
    pub fn builder() -> crate::types::builders::GrowthRateComputationBuilder {
        crate::types::builders::GrowthRateComputationBuilder::default()
    }
}

/// A builder for [`GrowthRateComputation`](crate::types::GrowthRateComputation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GrowthRateComputationBuilder {
    pub(crate) computation_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) time: std::option::Option<crate::types::DimensionField>,
    pub(crate) value: std::option::Option<crate::types::MeasureField>,
    pub(crate) period_size: std::option::Option<i32>,
}
impl GrowthRateComputationBuilder {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.computation_id = Some(input.into());
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn set_computation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.computation_id = input;
        self
    }
    /// <p>The name of a computation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a computation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(mut self, input: crate::types::DimensionField) -> Self {
        self.time = Some(input);
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn set_time(mut self, input: std::option::Option<crate::types::DimensionField>) -> Self {
        self.time = input;
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(mut self, input: crate::types::MeasureField) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn set_value(mut self, input: std::option::Option<crate::types::MeasureField>) -> Self {
        self.value = input;
        self
    }
    /// <p>The period size setup of a growth rate computation.</p>
    pub fn period_size(mut self, input: i32) -> Self {
        self.period_size = Some(input);
        self
    }
    /// <p>The period size setup of a growth rate computation.</p>
    pub fn set_period_size(mut self, input: std::option::Option<i32>) -> Self {
        self.period_size = input;
        self
    }
    /// Consumes the builder and constructs a [`GrowthRateComputation`](crate::types::GrowthRateComputation).
    pub fn build(self) -> crate::types::GrowthRateComputation {
        crate::types::GrowthRateComputation {
            computation_id: self.computation_id,
            name: self.name,
            time: self.time,
            value: self.value,
            period_size: self.period_size.unwrap_or_default(),
        }
    }
}
