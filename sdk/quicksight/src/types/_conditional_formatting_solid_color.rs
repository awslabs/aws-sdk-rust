// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Formatting configuration for solid color.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConditionalFormattingSolidColor {
    /// <p>The expression that determines the formatting configuration for solid color.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
    /// <p>Determines the color.</p>
    #[doc(hidden)]
    pub color: std::option::Option<std::string::String>,
}
impl ConditionalFormattingSolidColor {
    /// <p>The expression that determines the formatting configuration for solid color.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>Determines the color.</p>
    pub fn color(&self) -> std::option::Option<&str> {
        self.color.as_deref()
    }
}
impl std::fmt::Debug for ConditionalFormattingSolidColor {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingSolidColor");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("color", &self.color);
        formatter.finish()
    }
}
impl ConditionalFormattingSolidColor {
    /// Creates a new builder-style object to manufacture [`ConditionalFormattingSolidColor`](crate::types::ConditionalFormattingSolidColor).
    pub fn builder() -> crate::types::builders::ConditionalFormattingSolidColorBuilder {
        crate::types::builders::ConditionalFormattingSolidColorBuilder::default()
    }
}

/// A builder for [`ConditionalFormattingSolidColor`](crate::types::ConditionalFormattingSolidColor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ConditionalFormattingSolidColorBuilder {
    pub(crate) expression: std::option::Option<std::string::String>,
    pub(crate) color: std::option::Option<std::string::String>,
}
impl ConditionalFormattingSolidColorBuilder {
    /// <p>The expression that determines the formatting configuration for solid color.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>The expression that determines the formatting configuration for solid color.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>Determines the color.</p>
    pub fn color(mut self, input: impl Into<std::string::String>) -> Self {
        self.color = Some(input.into());
        self
    }
    /// <p>Determines the color.</p>
    pub fn set_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// Consumes the builder and constructs a [`ConditionalFormattingSolidColor`](crate::types::ConditionalFormattingSolidColor).
    pub fn build(self) -> crate::types::ConditionalFormattingSolidColor {
        crate::types::ConditionalFormattingSolidColor {
            expression: self.expression,
            color: self.color,
        }
    }
}
impl std::fmt::Debug for ConditionalFormattingSolidColorBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingSolidColorBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("color", &self.color);
        formatter.finish()
    }
}
