// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExplicitHierarchy {
    /// <p>The hierarchy ID of the explicit hierarchy.</p>
    pub hierarchy_id: ::std::string::String,
    /// <p>The list of columns that define the explicit hierarchy.</p>
    pub columns: ::std::vec::Vec<crate::types::ColumnIdentifier>,
    /// <p>The option that determines the drill down filters for the explicit hierarchy.</p>
    pub drill_down_filters: ::std::option::Option<::std::vec::Vec<crate::types::DrillDownFilter>>,
}
impl ExplicitHierarchy {
    /// <p>The hierarchy ID of the explicit hierarchy.</p>
    pub fn hierarchy_id(&self) -> &str {
        use std::ops::Deref;
        self.hierarchy_id.deref()
    }
    /// <p>The list of columns that define the explicit hierarchy.</p>
    pub fn columns(&self) -> &[crate::types::ColumnIdentifier] {
        use std::ops::Deref;
        self.columns.deref()
    }
    /// <p>The option that determines the drill down filters for the explicit hierarchy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.drill_down_filters.is_none()`.
    pub fn drill_down_filters(&self) -> &[crate::types::DrillDownFilter] {
        self.drill_down_filters.as_deref().unwrap_or_default()
    }
}
impl ExplicitHierarchy {
    /// Creates a new builder-style object to manufacture [`ExplicitHierarchy`](crate::types::ExplicitHierarchy).
    pub fn builder() -> crate::types::builders::ExplicitHierarchyBuilder {
        crate::types::builders::ExplicitHierarchyBuilder::default()
    }
}

/// A builder for [`ExplicitHierarchy`](crate::types::ExplicitHierarchy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExplicitHierarchyBuilder {
    pub(crate) hierarchy_id: ::std::option::Option<::std::string::String>,
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>>,
    pub(crate) drill_down_filters: ::std::option::Option<::std::vec::Vec<crate::types::DrillDownFilter>>,
}
impl ExplicitHierarchyBuilder {
    /// <p>The hierarchy ID of the explicit hierarchy.</p>
    /// This field is required.
    pub fn hierarchy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hierarchy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hierarchy ID of the explicit hierarchy.</p>
    pub fn set_hierarchy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hierarchy_id = input;
        self
    }
    /// <p>The hierarchy ID of the explicit hierarchy.</p>
    pub fn get_hierarchy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hierarchy_id
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>The list of columns that define the explicit hierarchy.</p>
    pub fn columns(mut self, input: crate::types::ColumnIdentifier) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of columns that define the explicit hierarchy.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>The list of columns that define the explicit hierarchy.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnIdentifier>> {
        &self.columns
    }
    /// Appends an item to `drill_down_filters`.
    ///
    /// To override the contents of this collection use [`set_drill_down_filters`](Self::set_drill_down_filters).
    ///
    /// <p>The option that determines the drill down filters for the explicit hierarchy.</p>
    pub fn drill_down_filters(mut self, input: crate::types::DrillDownFilter) -> Self {
        let mut v = self.drill_down_filters.unwrap_or_default();
        v.push(input);
        self.drill_down_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The option that determines the drill down filters for the explicit hierarchy.</p>
    pub fn set_drill_down_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DrillDownFilter>>) -> Self {
        self.drill_down_filters = input;
        self
    }
    /// <p>The option that determines the drill down filters for the explicit hierarchy.</p>
    pub fn get_drill_down_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DrillDownFilter>> {
        &self.drill_down_filters
    }
    /// Consumes the builder and constructs a [`ExplicitHierarchy`](crate::types::ExplicitHierarchy).
    /// This method will fail if any of the following fields are not set:
    /// - [`hierarchy_id`](crate::types::builders::ExplicitHierarchyBuilder::hierarchy_id)
    /// - [`columns`](crate::types::builders::ExplicitHierarchyBuilder::columns)
    pub fn build(self) -> ::std::result::Result<crate::types::ExplicitHierarchy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExplicitHierarchy {
            hierarchy_id: self.hierarchy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "hierarchy_id",
                    "hierarchy_id was not specified but it is required when building ExplicitHierarchy",
                )
            })?,
            columns: self.columns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "columns",
                    "columns was not specified but it is required when building ExplicitHierarchy",
                )
            })?,
            drill_down_filters: self.drill_down_filters,
        })
    }
}
