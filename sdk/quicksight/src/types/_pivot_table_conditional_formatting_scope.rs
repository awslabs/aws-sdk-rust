// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scope of the cell for conditional formatting.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PivotTableConditionalFormattingScope {
    /// <p>The role (field, field total, grand total) of the cell for conditional formatting.</p>
    #[doc(hidden)]
    pub role: std::option::Option<crate::types::PivotTableConditionalFormattingScopeRole>,
}
impl PivotTableConditionalFormattingScope {
    /// <p>The role (field, field total, grand total) of the cell for conditional formatting.</p>
    pub fn role(
        &self,
    ) -> std::option::Option<&crate::types::PivotTableConditionalFormattingScopeRole> {
        self.role.as_ref()
    }
}
impl PivotTableConditionalFormattingScope {
    /// Creates a new builder-style object to manufacture [`PivotTableConditionalFormattingScope`](crate::types::PivotTableConditionalFormattingScope).
    pub fn builder() -> crate::types::builders::PivotTableConditionalFormattingScopeBuilder {
        crate::types::builders::PivotTableConditionalFormattingScopeBuilder::default()
    }
}

/// A builder for [`PivotTableConditionalFormattingScope`](crate::types::PivotTableConditionalFormattingScope).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PivotTableConditionalFormattingScopeBuilder {
    pub(crate) role: std::option::Option<crate::types::PivotTableConditionalFormattingScopeRole>,
}
impl PivotTableConditionalFormattingScopeBuilder {
    /// <p>The role (field, field total, grand total) of the cell for conditional formatting.</p>
    pub fn role(mut self, input: crate::types::PivotTableConditionalFormattingScopeRole) -> Self {
        self.role = Some(input);
        self
    }
    /// <p>The role (field, field total, grand total) of the cell for conditional formatting.</p>
    pub fn set_role(
        mut self,
        input: std::option::Option<crate::types::PivotTableConditionalFormattingScopeRole>,
    ) -> Self {
        self.role = input;
        self
    }
    /// Consumes the builder and constructs a [`PivotTableConditionalFormattingScope`](crate::types::PivotTableConditionalFormattingScope).
    pub fn build(self) -> crate::types::PivotTableConditionalFormattingScope {
        crate::types::PivotTableConditionalFormattingScope { role: self.role }
    }
}
