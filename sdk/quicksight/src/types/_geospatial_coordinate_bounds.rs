// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeospatialCoordinateBounds {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    #[doc(hidden)]
    pub north: std::option::Option<f64>,
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    #[doc(hidden)]
    pub south: std::option::Option<f64>,
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    #[doc(hidden)]
    pub west: std::option::Option<f64>,
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    #[doc(hidden)]
    pub east: std::option::Option<f64>,
}
impl GeospatialCoordinateBounds {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn north(&self) -> std::option::Option<f64> {
        self.north
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn south(&self) -> std::option::Option<f64> {
        self.south
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn west(&self) -> std::option::Option<f64> {
        self.west
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn east(&self) -> std::option::Option<f64> {
        self.east
    }
}
impl GeospatialCoordinateBounds {
    /// Creates a new builder-style object to manufacture [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
    pub fn builder() -> crate::types::builders::GeospatialCoordinateBoundsBuilder {
        crate::types::builders::GeospatialCoordinateBoundsBuilder::default()
    }
}

/// A builder for [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeospatialCoordinateBoundsBuilder {
    pub(crate) north: std::option::Option<f64>,
    pub(crate) south: std::option::Option<f64>,
    pub(crate) west: std::option::Option<f64>,
    pub(crate) east: std::option::Option<f64>,
}
impl GeospatialCoordinateBoundsBuilder {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn north(mut self, input: f64) -> Self {
        self.north = Some(input);
        self
    }
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn set_north(mut self, input: std::option::Option<f64>) -> Self {
        self.north = input;
        self
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn south(mut self, input: f64) -> Self {
        self.south = Some(input);
        self
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn set_south(mut self, input: std::option::Option<f64>) -> Self {
        self.south = input;
        self
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn west(mut self, input: f64) -> Self {
        self.west = Some(input);
        self
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn set_west(mut self, input: std::option::Option<f64>) -> Self {
        self.west = input;
        self
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn east(mut self, input: f64) -> Self {
        self.east = Some(input);
        self
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn set_east(mut self, input: std::option::Option<f64>) -> Self {
        self.east = input;
        self
    }
    /// Consumes the builder and constructs a [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
    pub fn build(self) -> crate::types::GeospatialCoordinateBounds {
        crate::types::GeospatialCoordinateBounds {
            north: self.north,
            south: self.south,
            west: self.west,
            east: self.east,
        }
    }
}
