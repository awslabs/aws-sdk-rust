// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The bound options (north, south, west, east) of the geospatial window options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialCoordinateBounds {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub north: f64,
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub south: f64,
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub west: f64,
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub east: f64,
}
impl GeospatialCoordinateBounds {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn north(&self) -> f64 {
        self.north
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn south(&self) -> f64 {
        self.south
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn west(&self) -> f64 {
        self.west
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn east(&self) -> f64 {
        self.east
    }
}
impl GeospatialCoordinateBounds {
    /// Creates a new builder-style object to manufacture [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
    pub fn builder() -> crate::types::builders::GeospatialCoordinateBoundsBuilder {
        crate::types::builders::GeospatialCoordinateBoundsBuilder::default()
    }
}

/// A builder for [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeospatialCoordinateBoundsBuilder {
    pub(crate) north: ::std::option::Option<f64>,
    pub(crate) south: ::std::option::Option<f64>,
    pub(crate) west: ::std::option::Option<f64>,
    pub(crate) east: ::std::option::Option<f64>,
}
impl GeospatialCoordinateBoundsBuilder {
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    /// This field is required.
    pub fn north(mut self, input: f64) -> Self {
        self.north = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn set_north(mut self, input: ::std::option::Option<f64>) -> Self {
        self.north = input;
        self
    }
    /// <p>The latitude of the north bound of the geospatial coordinate bounds.</p>
    pub fn get_north(&self) -> &::std::option::Option<f64> {
        &self.north
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    /// This field is required.
    pub fn south(mut self, input: f64) -> Self {
        self.south = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn set_south(mut self, input: ::std::option::Option<f64>) -> Self {
        self.south = input;
        self
    }
    /// <p>The latitude of the south bound of the geospatial coordinate bounds.</p>
    pub fn get_south(&self) -> &::std::option::Option<f64> {
        &self.south
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    /// This field is required.
    pub fn west(mut self, input: f64) -> Self {
        self.west = ::std::option::Option::Some(input);
        self
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn set_west(mut self, input: ::std::option::Option<f64>) -> Self {
        self.west = input;
        self
    }
    /// <p>The longitude of the west bound of the geospatial coordinate bounds.</p>
    pub fn get_west(&self) -> &::std::option::Option<f64> {
        &self.west
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    /// This field is required.
    pub fn east(mut self, input: f64) -> Self {
        self.east = ::std::option::Option::Some(input);
        self
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn set_east(mut self, input: ::std::option::Option<f64>) -> Self {
        self.east = input;
        self
    }
    /// <p>The longitude of the east bound of the geospatial coordinate bounds.</p>
    pub fn get_east(&self) -> &::std::option::Option<f64> {
        &self.east
    }
    /// Consumes the builder and constructs a [`GeospatialCoordinateBounds`](crate::types::GeospatialCoordinateBounds).
    /// This method will fail if any of the following fields are not set:
    /// - [`north`](crate::types::builders::GeospatialCoordinateBoundsBuilder::north)
    /// - [`south`](crate::types::builders::GeospatialCoordinateBoundsBuilder::south)
    /// - [`west`](crate::types::builders::GeospatialCoordinateBoundsBuilder::west)
    /// - [`east`](crate::types::builders::GeospatialCoordinateBoundsBuilder::east)
    pub fn build(self) -> ::std::result::Result<crate::types::GeospatialCoordinateBounds, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeospatialCoordinateBounds {
            north: self.north.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "north",
                    "north was not specified but it is required when building GeospatialCoordinateBounds",
                )
            })?,
            south: self.south.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "south",
                    "south was not specified but it is required when building GeospatialCoordinateBounds",
                )
            })?,
            west: self.west.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "west",
                    "west was not specified but it is required when building GeospatialCoordinateBounds",
                )
            })?,
            east: self.east.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "east",
                    "east was not specified but it is required when building GeospatialCoordinateBounds",
                )
            })?,
        })
    }
}
