// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting that determines the shape of the filled map.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilledMapShapeConditionalFormatting {
    /// <p>The field ID of the filled map shape.</p>
    pub field_id: ::std::string::String,
    /// <p>The conditional formatting that determines the background color of a filled map's shape.</p>
    pub format: ::std::option::Option<crate::types::ShapeConditionalFormat>,
}
impl FilledMapShapeConditionalFormatting {
    /// <p>The field ID of the filled map shape.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The conditional formatting that determines the background color of a filled map's shape.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::ShapeConditionalFormat> {
        self.format.as_ref()
    }
}
impl FilledMapShapeConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`FilledMapShapeConditionalFormatting`](crate::types::FilledMapShapeConditionalFormatting).
    pub fn builder() -> crate::types::builders::FilledMapShapeConditionalFormattingBuilder {
        crate::types::builders::FilledMapShapeConditionalFormattingBuilder::default()
    }
}

/// A builder for [`FilledMapShapeConditionalFormatting`](crate::types::FilledMapShapeConditionalFormatting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilledMapShapeConditionalFormattingBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::ShapeConditionalFormat>,
}
impl FilledMapShapeConditionalFormattingBuilder {
    /// <p>The field ID of the filled map shape.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field ID of the filled map shape.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The field ID of the filled map shape.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The conditional formatting that determines the background color of a filled map's shape.</p>
    pub fn format(mut self, input: crate::types::ShapeConditionalFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The conditional formatting that determines the background color of a filled map's shape.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ShapeConditionalFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The conditional formatting that determines the background color of a filled map's shape.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ShapeConditionalFormat> {
        &self.format
    }
    /// Consumes the builder and constructs a [`FilledMapShapeConditionalFormatting`](crate::types::FilledMapShapeConditionalFormatting).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::FilledMapShapeConditionalFormattingBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::FilledMapShapeConditionalFormatting, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilledMapShapeConditionalFormatting {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building FilledMapShapeConditionalFormatting",
                )
            })?,
            format: self.format,
        })
    }
}
