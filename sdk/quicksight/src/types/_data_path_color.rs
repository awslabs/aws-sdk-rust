// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The color map that determines the color options for a particular element.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataPathColor {
    /// <p>The element that the color needs to be applied to.</p>
    pub element: ::std::option::Option<crate::types::DataPathValue>,
    /// <p>The color that needs to be applied to the element.</p>
    pub color: ::std::string::String,
    /// <p>The time granularity of the field that the color needs to be applied to.</p>
    pub time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
}
impl DataPathColor {
    /// <p>The element that the color needs to be applied to.</p>
    pub fn element(&self) -> ::std::option::Option<&crate::types::DataPathValue> {
        self.element.as_ref()
    }
    /// <p>The color that needs to be applied to the element.</p>
    pub fn color(&self) -> &str {
        use std::ops::Deref;
        self.color.deref()
    }
    /// <p>The time granularity of the field that the color needs to be applied to.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.time_granularity.as_ref()
    }
}
impl DataPathColor {
    /// Creates a new builder-style object to manufacture [`DataPathColor`](crate::types::DataPathColor).
    pub fn builder() -> crate::types::builders::DataPathColorBuilder {
        crate::types::builders::DataPathColorBuilder::default()
    }
}

/// A builder for [`DataPathColor`](crate::types::DataPathColor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataPathColorBuilder {
    pub(crate) element: ::std::option::Option<crate::types::DataPathValue>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) time_granularity: ::std::option::Option<crate::types::TimeGranularity>,
}
impl DataPathColorBuilder {
    /// <p>The element that the color needs to be applied to.</p>
    /// This field is required.
    pub fn element(mut self, input: crate::types::DataPathValue) -> Self {
        self.element = ::std::option::Option::Some(input);
        self
    }
    /// <p>The element that the color needs to be applied to.</p>
    pub fn set_element(mut self, input: ::std::option::Option<crate::types::DataPathValue>) -> Self {
        self.element = input;
        self
    }
    /// <p>The element that the color needs to be applied to.</p>
    pub fn get_element(&self) -> &::std::option::Option<crate::types::DataPathValue> {
        &self.element
    }
    /// <p>The color that needs to be applied to the element.</p>
    /// This field is required.
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color that needs to be applied to the element.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color that needs to be applied to the element.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>The time granularity of the field that the color needs to be applied to.</p>
    pub fn time_granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time granularity of the field that the color needs to be applied to.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The time granularity of the field that the color needs to be applied to.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.time_granularity
    }
    /// Consumes the builder and constructs a [`DataPathColor`](crate::types::DataPathColor).
    /// This method will fail if any of the following fields are not set:
    /// - [`color`](crate::types::builders::DataPathColorBuilder::color)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPathColor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPathColor {
            element: self.element,
            color: self.color.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color",
                    "color was not specified but it is required when building DataPathColor",
                )
            })?,
            time_granularity: self.time_granularity,
        })
    }
}
