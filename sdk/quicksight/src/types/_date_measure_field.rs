// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The measure type field with date type columns.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateMeasureField {
    /// <p>The custom field ID.</p>
    pub field_id: ::std::string::String,
    /// <p>The column that is used in the <code>DateMeasureField</code>.</p>
    pub column: ::std::option::Option<crate::types::ColumnIdentifier>,
    /// <p>The aggregation function of the measure field.</p>
    pub aggregation_function: ::std::option::Option<crate::types::DateAggregationFunction>,
    /// <p>The format configuration of the field.</p>
    pub format_configuration: ::std::option::Option<crate::types::DateTimeFormatConfiguration>,
}
impl DateMeasureField {
    /// <p>The custom field ID.</p>
    pub fn field_id(&self) -> &str {
        use std::ops::Deref;
        self.field_id.deref()
    }
    /// <p>The column that is used in the <code>DateMeasureField</code>.</p>
    pub fn column(&self) -> ::std::option::Option<&crate::types::ColumnIdentifier> {
        self.column.as_ref()
    }
    /// <p>The aggregation function of the measure field.</p>
    pub fn aggregation_function(&self) -> ::std::option::Option<&crate::types::DateAggregationFunction> {
        self.aggregation_function.as_ref()
    }
    /// <p>The format configuration of the field.</p>
    pub fn format_configuration(&self) -> ::std::option::Option<&crate::types::DateTimeFormatConfiguration> {
        self.format_configuration.as_ref()
    }
}
impl DateMeasureField {
    /// Creates a new builder-style object to manufacture [`DateMeasureField`](crate::types::DateMeasureField).
    pub fn builder() -> crate::types::builders::DateMeasureFieldBuilder {
        crate::types::builders::DateMeasureFieldBuilder::default()
    }
}

/// A builder for [`DateMeasureField`](crate::types::DateMeasureField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DateMeasureFieldBuilder {
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) column: ::std::option::Option<crate::types::ColumnIdentifier>,
    pub(crate) aggregation_function: ::std::option::Option<crate::types::DateAggregationFunction>,
    pub(crate) format_configuration: ::std::option::Option<crate::types::DateTimeFormatConfiguration>,
}
impl DateMeasureFieldBuilder {
    /// <p>The custom field ID.</p>
    /// This field is required.
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom field ID.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The custom field ID.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// <p>The column that is used in the <code>DateMeasureField</code>.</p>
    /// This field is required.
    pub fn column(mut self, input: crate::types::ColumnIdentifier) -> Self {
        self.column = ::std::option::Option::Some(input);
        self
    }
    /// <p>The column that is used in the <code>DateMeasureField</code>.</p>
    pub fn set_column(mut self, input: ::std::option::Option<crate::types::ColumnIdentifier>) -> Self {
        self.column = input;
        self
    }
    /// <p>The column that is used in the <code>DateMeasureField</code>.</p>
    pub fn get_column(&self) -> &::std::option::Option<crate::types::ColumnIdentifier> {
        &self.column
    }
    /// <p>The aggregation function of the measure field.</p>
    pub fn aggregation_function(mut self, input: crate::types::DateAggregationFunction) -> Self {
        self.aggregation_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation function of the measure field.</p>
    pub fn set_aggregation_function(mut self, input: ::std::option::Option<crate::types::DateAggregationFunction>) -> Self {
        self.aggregation_function = input;
        self
    }
    /// <p>The aggregation function of the measure field.</p>
    pub fn get_aggregation_function(&self) -> &::std::option::Option<crate::types::DateAggregationFunction> {
        &self.aggregation_function
    }
    /// <p>The format configuration of the field.</p>
    pub fn format_configuration(mut self, input: crate::types::DateTimeFormatConfiguration) -> Self {
        self.format_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format configuration of the field.</p>
    pub fn set_format_configuration(mut self, input: ::std::option::Option<crate::types::DateTimeFormatConfiguration>) -> Self {
        self.format_configuration = input;
        self
    }
    /// <p>The format configuration of the field.</p>
    pub fn get_format_configuration(&self) -> &::std::option::Option<crate::types::DateTimeFormatConfiguration> {
        &self.format_configuration
    }
    /// Consumes the builder and constructs a [`DateMeasureField`](crate::types::DateMeasureField).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_id`](crate::types::builders::DateMeasureFieldBuilder::field_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DateMeasureField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DateMeasureField {
            field_id: self.field_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_id",
                    "field_id was not specified but it is required when building DateMeasureField",
                )
            })?,
            column: self.column,
            aggregation_function: self.aggregation_function,
            format_configuration: self.format_configuration,
        })
    }
}
