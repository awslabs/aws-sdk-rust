// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for applying a filter to specific sheets or visuals. You can apply this filter to multiple visuals that are on one sheet or to all visuals on a sheet.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelectedSheetsFilterScopeConfiguration {
    /// <p>The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.</p>
    pub sheet_visual_scoping_configurations: ::std::option::Option<::std::vec::Vec<crate::types::SheetVisualScopingConfiguration>>,
}
impl SelectedSheetsFilterScopeConfiguration {
    /// <p>The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sheet_visual_scoping_configurations.is_none()`.
    pub fn sheet_visual_scoping_configurations(&self) -> &[crate::types::SheetVisualScopingConfiguration] {
        self.sheet_visual_scoping_configurations.as_deref().unwrap_or_default()
    }
}
impl SelectedSheetsFilterScopeConfiguration {
    /// Creates a new builder-style object to manufacture [`SelectedSheetsFilterScopeConfiguration`](crate::types::SelectedSheetsFilterScopeConfiguration).
    pub fn builder() -> crate::types::builders::SelectedSheetsFilterScopeConfigurationBuilder {
        crate::types::builders::SelectedSheetsFilterScopeConfigurationBuilder::default()
    }
}

/// A builder for [`SelectedSheetsFilterScopeConfiguration`](crate::types::SelectedSheetsFilterScopeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SelectedSheetsFilterScopeConfigurationBuilder {
    pub(crate) sheet_visual_scoping_configurations: ::std::option::Option<::std::vec::Vec<crate::types::SheetVisualScopingConfiguration>>,
}
impl SelectedSheetsFilterScopeConfigurationBuilder {
    /// Appends an item to `sheet_visual_scoping_configurations`.
    ///
    /// To override the contents of this collection use [`set_sheet_visual_scoping_configurations`](Self::set_sheet_visual_scoping_configurations).
    ///
    /// <p>The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.</p>
    pub fn sheet_visual_scoping_configurations(mut self, input: crate::types::SheetVisualScopingConfiguration) -> Self {
        let mut v = self.sheet_visual_scoping_configurations.unwrap_or_default();
        v.push(input);
        self.sheet_visual_scoping_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.</p>
    pub fn set_sheet_visual_scoping_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SheetVisualScopingConfiguration>>,
    ) -> Self {
        self.sheet_visual_scoping_configurations = input;
        self
    }
    /// <p>The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.</p>
    pub fn get_sheet_visual_scoping_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SheetVisualScopingConfiguration>> {
        &self.sheet_visual_scoping_configurations
    }
    /// Consumes the builder and constructs a [`SelectedSheetsFilterScopeConfiguration`](crate::types::SelectedSheetsFilterScopeConfiguration).
    pub fn build(self) -> crate::types::SelectedSheetsFilterScopeConfiguration {
        crate::types::SelectedSheetsFilterScopeConfiguration {
            sheet_visual_scoping_configurations: self.sheet_visual_scoping_configurations,
        }
    }
}
