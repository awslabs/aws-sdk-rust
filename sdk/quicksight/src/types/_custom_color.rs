// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the color that's applied to a particular data value in a column.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomColor {
    /// <p>The data value that the color is applied to.</p>
    pub field_value: ::std::option::Option<::std::string::String>,
    /// <p>The color that is applied to the data value.</p>
    pub color: ::std::string::String,
    /// <p>The value of a special data value.</p>
    pub special_value: ::std::option::Option<crate::types::SpecialValue>,
}
impl CustomColor {
    /// <p>The data value that the color is applied to.</p>
    pub fn field_value(&self) -> ::std::option::Option<&str> {
        self.field_value.as_deref()
    }
    /// <p>The color that is applied to the data value.</p>
    pub fn color(&self) -> &str {
        use std::ops::Deref;
        self.color.deref()
    }
    /// <p>The value of a special data value.</p>
    pub fn special_value(&self) -> ::std::option::Option<&crate::types::SpecialValue> {
        self.special_value.as_ref()
    }
}
impl ::std::fmt::Debug for CustomColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomColor");
        formatter.field("field_value", &"*** Sensitive Data Redacted ***");
        formatter.field("color", &self.color);
        formatter.field("special_value", &self.special_value);
        formatter.finish()
    }
}
impl CustomColor {
    /// Creates a new builder-style object to manufacture [`CustomColor`](crate::types::CustomColor).
    pub fn builder() -> crate::types::builders::CustomColorBuilder {
        crate::types::builders::CustomColorBuilder::default()
    }
}

/// A builder for [`CustomColor`](crate::types::CustomColor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CustomColorBuilder {
    pub(crate) field_value: ::std::option::Option<::std::string::String>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) special_value: ::std::option::Option<crate::types::SpecialValue>,
}
impl CustomColorBuilder {
    /// <p>The data value that the color is applied to.</p>
    pub fn field_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data value that the color is applied to.</p>
    pub fn set_field_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_value = input;
        self
    }
    /// <p>The data value that the color is applied to.</p>
    pub fn get_field_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_value
    }
    /// <p>The color that is applied to the data value.</p>
    /// This field is required.
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The color that is applied to the data value.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>The color that is applied to the data value.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>The value of a special data value.</p>
    pub fn special_value(mut self, input: crate::types::SpecialValue) -> Self {
        self.special_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a special data value.</p>
    pub fn set_special_value(mut self, input: ::std::option::Option<crate::types::SpecialValue>) -> Self {
        self.special_value = input;
        self
    }
    /// <p>The value of a special data value.</p>
    pub fn get_special_value(&self) -> &::std::option::Option<crate::types::SpecialValue> {
        &self.special_value
    }
    /// Consumes the builder and constructs a [`CustomColor`](crate::types::CustomColor).
    /// This method will fail if any of the following fields are not set:
    /// - [`color`](crate::types::builders::CustomColorBuilder::color)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomColor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomColor {
            field_value: self.field_value,
            color: self.color.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color",
                    "color was not specified but it is required when building CustomColor",
                )
            })?,
            special_value: self.special_value,
        })
    }
}
impl ::std::fmt::Debug for CustomColorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomColorBuilder");
        formatter.field("field_value", &"*** Sensitive Data Redacted ***");
        formatter.field("color", &self.color);
        formatter.field("special_value", &self.special_value);
        formatter.finish()
    }
}
