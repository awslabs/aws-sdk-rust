// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dataset schema.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSetSchema {
    /// <p>A structure containing the list of column schemas.</p>
    #[doc(hidden)]
    pub column_schema_list: std::option::Option<std::vec::Vec<crate::types::ColumnSchema>>,
}
impl DataSetSchema {
    /// <p>A structure containing the list of column schemas.</p>
    pub fn column_schema_list(&self) -> std::option::Option<&[crate::types::ColumnSchema]> {
        self.column_schema_list.as_deref()
    }
}
impl DataSetSchema {
    /// Creates a new builder-style object to manufacture [`DataSetSchema`](crate::types::DataSetSchema).
    pub fn builder() -> crate::types::builders::DataSetSchemaBuilder {
        crate::types::builders::DataSetSchemaBuilder::default()
    }
}

/// A builder for [`DataSetSchema`](crate::types::DataSetSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSetSchemaBuilder {
    pub(crate) column_schema_list: std::option::Option<std::vec::Vec<crate::types::ColumnSchema>>,
}
impl DataSetSchemaBuilder {
    /// Appends an item to `column_schema_list`.
    ///
    /// To override the contents of this collection use [`set_column_schema_list`](Self::set_column_schema_list).
    ///
    /// <p>A structure containing the list of column schemas.</p>
    pub fn column_schema_list(mut self, input: crate::types::ColumnSchema) -> Self {
        let mut v = self.column_schema_list.unwrap_or_default();
        v.push(input);
        self.column_schema_list = Some(v);
        self
    }
    /// <p>A structure containing the list of column schemas.</p>
    pub fn set_column_schema_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnSchema>>,
    ) -> Self {
        self.column_schema_list = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSetSchema`](crate::types::DataSetSchema).
    pub fn build(self) -> crate::types::DataSetSchema {
        crate::types::DataSetSchema {
            column_schema_list: self.column_schema_list,
        }
    }
}
