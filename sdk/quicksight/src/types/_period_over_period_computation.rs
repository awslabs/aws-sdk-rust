// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The period over period computation configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PeriodOverPeriodComputation {
    /// <p>The ID for a computation.</p>
    pub computation_id: ::std::string::String,
    /// <p>The name of a computation.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time field that is used in a computation.</p>
    pub time: ::std::option::Option<crate::types::DimensionField>,
    /// <p>The value field that is used in a computation.</p>
    pub value: ::std::option::Option<crate::types::MeasureField>,
}
impl PeriodOverPeriodComputation {
    /// <p>The ID for a computation.</p>
    pub fn computation_id(&self) -> &str {
        use std::ops::Deref;
        self.computation_id.deref()
    }
    /// <p>The name of a computation.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(&self) -> ::std::option::Option<&crate::types::DimensionField> {
        self.time.as_ref()
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::MeasureField> {
        self.value.as_ref()
    }
}
impl PeriodOverPeriodComputation {
    /// Creates a new builder-style object to manufacture [`PeriodOverPeriodComputation`](crate::types::PeriodOverPeriodComputation).
    pub fn builder() -> crate::types::builders::PeriodOverPeriodComputationBuilder {
        crate::types::builders::PeriodOverPeriodComputationBuilder::default()
    }
}

/// A builder for [`PeriodOverPeriodComputation`](crate::types::PeriodOverPeriodComputation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PeriodOverPeriodComputationBuilder {
    pub(crate) computation_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) time: ::std::option::Option<crate::types::DimensionField>,
    pub(crate) value: ::std::option::Option<crate::types::MeasureField>,
}
impl PeriodOverPeriodComputationBuilder {
    /// <p>The ID for a computation.</p>
    /// This field is required.
    pub fn computation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn set_computation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_id = input;
        self
    }
    /// <p>The ID for a computation.</p>
    pub fn get_computation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_id
    }
    /// <p>The name of a computation.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a computation.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a computation.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn time(mut self, input: crate::types::DimensionField) -> Self {
        self.time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn set_time(mut self, input: ::std::option::Option<crate::types::DimensionField>) -> Self {
        self.time = input;
        self
    }
    /// <p>The time field that is used in a computation.</p>
    pub fn get_time(&self) -> &::std::option::Option<crate::types::DimensionField> {
        &self.time
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn value(mut self, input: crate::types::MeasureField) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::MeasureField>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value field that is used in a computation.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::MeasureField> {
        &self.value
    }
    /// Consumes the builder and constructs a [`PeriodOverPeriodComputation`](crate::types::PeriodOverPeriodComputation).
    /// This method will fail if any of the following fields are not set:
    /// - [`computation_id`](crate::types::builders::PeriodOverPeriodComputationBuilder::computation_id)
    pub fn build(self) -> ::std::result::Result<crate::types::PeriodOverPeriodComputation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PeriodOverPeriodComputation {
            computation_id: self.computation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "computation_id",
                    "computation_id was not specified but it is required when building PeriodOverPeriodComputation",
                )
            })?,
            name: self.name,
            time: self.time,
            value: self.value,
        })
    }
}
