// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sort configuration of a heat map.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HeatMapSortConfiguration {
    /// <p>The field sort configuration of the rows fields.</p>
    #[doc(hidden)]
    pub heat_map_row_sort: std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    /// <p>The column sort configuration for heat map for columns that aren't a part of a field well.</p>
    #[doc(hidden)]
    pub heat_map_column_sort: std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    /// <p>The limit on the number of rows that are displayed in a heat map.</p>
    #[doc(hidden)]
    pub heat_map_row_items_limit_configuration:
        std::option::Option<crate::types::ItemsLimitConfiguration>,
    /// <p>The limit on the number of columns that are displayed in a heat map.</p>
    #[doc(hidden)]
    pub heat_map_column_items_limit_configuration:
        std::option::Option<crate::types::ItemsLimitConfiguration>,
}
impl HeatMapSortConfiguration {
    /// <p>The field sort configuration of the rows fields.</p>
    pub fn heat_map_row_sort(&self) -> std::option::Option<&[crate::types::FieldSortOptions]> {
        self.heat_map_row_sort.as_deref()
    }
    /// <p>The column sort configuration for heat map for columns that aren't a part of a field well.</p>
    pub fn heat_map_column_sort(&self) -> std::option::Option<&[crate::types::FieldSortOptions]> {
        self.heat_map_column_sort.as_deref()
    }
    /// <p>The limit on the number of rows that are displayed in a heat map.</p>
    pub fn heat_map_row_items_limit_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ItemsLimitConfiguration> {
        self.heat_map_row_items_limit_configuration.as_ref()
    }
    /// <p>The limit on the number of columns that are displayed in a heat map.</p>
    pub fn heat_map_column_items_limit_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ItemsLimitConfiguration> {
        self.heat_map_column_items_limit_configuration.as_ref()
    }
}
impl HeatMapSortConfiguration {
    /// Creates a new builder-style object to manufacture [`HeatMapSortConfiguration`](crate::types::HeatMapSortConfiguration).
    pub fn builder() -> crate::types::builders::HeatMapSortConfigurationBuilder {
        crate::types::builders::HeatMapSortConfigurationBuilder::default()
    }
}

/// A builder for [`HeatMapSortConfiguration`](crate::types::HeatMapSortConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HeatMapSortConfigurationBuilder {
    pub(crate) heat_map_row_sort:
        std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    pub(crate) heat_map_column_sort:
        std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    pub(crate) heat_map_row_items_limit_configuration:
        std::option::Option<crate::types::ItemsLimitConfiguration>,
    pub(crate) heat_map_column_items_limit_configuration:
        std::option::Option<crate::types::ItemsLimitConfiguration>,
}
impl HeatMapSortConfigurationBuilder {
    /// Appends an item to `heat_map_row_sort`.
    ///
    /// To override the contents of this collection use [`set_heat_map_row_sort`](Self::set_heat_map_row_sort).
    ///
    /// <p>The field sort configuration of the rows fields.</p>
    pub fn heat_map_row_sort(mut self, input: crate::types::FieldSortOptions) -> Self {
        let mut v = self.heat_map_row_sort.unwrap_or_default();
        v.push(input);
        self.heat_map_row_sort = Some(v);
        self
    }
    /// <p>The field sort configuration of the rows fields.</p>
    pub fn set_heat_map_row_sort(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    ) -> Self {
        self.heat_map_row_sort = input;
        self
    }
    /// Appends an item to `heat_map_column_sort`.
    ///
    /// To override the contents of this collection use [`set_heat_map_column_sort`](Self::set_heat_map_column_sort).
    ///
    /// <p>The column sort configuration for heat map for columns that aren't a part of a field well.</p>
    pub fn heat_map_column_sort(mut self, input: crate::types::FieldSortOptions) -> Self {
        let mut v = self.heat_map_column_sort.unwrap_or_default();
        v.push(input);
        self.heat_map_column_sort = Some(v);
        self
    }
    /// <p>The column sort configuration for heat map for columns that aren't a part of a field well.</p>
    pub fn set_heat_map_column_sort(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FieldSortOptions>>,
    ) -> Self {
        self.heat_map_column_sort = input;
        self
    }
    /// <p>The limit on the number of rows that are displayed in a heat map.</p>
    pub fn heat_map_row_items_limit_configuration(
        mut self,
        input: crate::types::ItemsLimitConfiguration,
    ) -> Self {
        self.heat_map_row_items_limit_configuration = Some(input);
        self
    }
    /// <p>The limit on the number of rows that are displayed in a heat map.</p>
    pub fn set_heat_map_row_items_limit_configuration(
        mut self,
        input: std::option::Option<crate::types::ItemsLimitConfiguration>,
    ) -> Self {
        self.heat_map_row_items_limit_configuration = input;
        self
    }
    /// <p>The limit on the number of columns that are displayed in a heat map.</p>
    pub fn heat_map_column_items_limit_configuration(
        mut self,
        input: crate::types::ItemsLimitConfiguration,
    ) -> Self {
        self.heat_map_column_items_limit_configuration = Some(input);
        self
    }
    /// <p>The limit on the number of columns that are displayed in a heat map.</p>
    pub fn set_heat_map_column_items_limit_configuration(
        mut self,
        input: std::option::Option<crate::types::ItemsLimitConfiguration>,
    ) -> Self {
        self.heat_map_column_items_limit_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`HeatMapSortConfiguration`](crate::types::HeatMapSortConfiguration).
    pub fn build(self) -> crate::types::HeatMapSortConfiguration {
        crate::types::HeatMapSortConfiguration {
            heat_map_row_sort: self.heat_map_row_sort,
            heat_map_column_sort: self.heat_map_column_sort,
            heat_map_row_items_limit_configuration: self.heat_map_row_items_limit_configuration,
            heat_map_column_items_limit_configuration: self
                .heat_map_column_items_limit_configuration,
        }
    }
}
