// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default options that correspond to the <code>TextArea</code> filter control type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultTextAreaControlOptions {
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub delimiter: ::std::option::Option<::std::string::String>,
    /// <p>The display options of a control.</p>
    pub display_options: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>,
}
impl DefaultTextAreaControlOptions {
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn delimiter(&self) -> ::std::option::Option<&str> {
        self.delimiter.as_deref()
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(&self) -> ::std::option::Option<&crate::types::TextAreaControlDisplayOptions> {
        self.display_options.as_ref()
    }
}
impl DefaultTextAreaControlOptions {
    /// Creates a new builder-style object to manufacture [`DefaultTextAreaControlOptions`](crate::types::DefaultTextAreaControlOptions).
    pub fn builder() -> crate::types::builders::DefaultTextAreaControlOptionsBuilder {
        crate::types::builders::DefaultTextAreaControlOptionsBuilder::default()
    }
}

/// A builder for [`DefaultTextAreaControlOptions`](crate::types::DefaultTextAreaControlOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultTextAreaControlOptionsBuilder {
    pub(crate) delimiter: ::std::option::Option<::std::string::String>,
    pub(crate) display_options: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>,
}
impl DefaultTextAreaControlOptionsBuilder {
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn delimiter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delimiter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn set_delimiter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delimiter = input;
        self
    }
    /// <p>The delimiter that is used to separate the lines in text.</p>
    pub fn get_delimiter(&self) -> &::std::option::Option<::std::string::String> {
        &self.delimiter
    }
    /// <p>The display options of a control.</p>
    pub fn display_options(mut self, input: crate::types::TextAreaControlDisplayOptions) -> Self {
        self.display_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display options of a control.</p>
    pub fn set_display_options(mut self, input: ::std::option::Option<crate::types::TextAreaControlDisplayOptions>) -> Self {
        self.display_options = input;
        self
    }
    /// <p>The display options of a control.</p>
    pub fn get_display_options(&self) -> &::std::option::Option<crate::types::TextAreaControlDisplayOptions> {
        &self.display_options
    }
    /// Consumes the builder and constructs a [`DefaultTextAreaControlOptions`](crate::types::DefaultTextAreaControlOptions).
    pub fn build(self) -> crate::types::DefaultTextAreaControlOptions {
        crate::types::DefaultTextAreaControlOptions {
            delimiter: self.delimiter,
            display_options: self.display_options,
        }
    }
}
