// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Allows data paths to be sorted by a specific data value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataPathSort {
    /// <p>Determines the sort direction.</p>
    pub direction: crate::types::SortDirection,
    /// <p>The list of data paths that need to be sorted.</p>
    pub sort_paths: ::std::vec::Vec<crate::types::DataPathValue>,
}
impl DataPathSort {
    /// <p>Determines the sort direction.</p>
    pub fn direction(&self) -> &crate::types::SortDirection {
        &self.direction
    }
    /// <p>The list of data paths that need to be sorted.</p>
    pub fn sort_paths(&self) -> &[crate::types::DataPathValue] {
        use std::ops::Deref;
        self.sort_paths.deref()
    }
}
impl DataPathSort {
    /// Creates a new builder-style object to manufacture [`DataPathSort`](crate::types::DataPathSort).
    pub fn builder() -> crate::types::builders::DataPathSortBuilder {
        crate::types::builders::DataPathSortBuilder::default()
    }
}

/// A builder for [`DataPathSort`](crate::types::DataPathSort).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataPathSortBuilder {
    pub(crate) direction: ::std::option::Option<crate::types::SortDirection>,
    pub(crate) sort_paths: ::std::option::Option<::std::vec::Vec<crate::types::DataPathValue>>,
}
impl DataPathSortBuilder {
    /// <p>Determines the sort direction.</p>
    /// This field is required.
    pub fn direction(mut self, input: crate::types::SortDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the sort direction.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::SortDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>Determines the sort direction.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::SortDirection> {
        &self.direction
    }
    /// Appends an item to `sort_paths`.
    ///
    /// To override the contents of this collection use [`set_sort_paths`](Self::set_sort_paths).
    ///
    /// <p>The list of data paths that need to be sorted.</p>
    pub fn sort_paths(mut self, input: crate::types::DataPathValue) -> Self {
        let mut v = self.sort_paths.unwrap_or_default();
        v.push(input);
        self.sort_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of data paths that need to be sorted.</p>
    pub fn set_sort_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataPathValue>>) -> Self {
        self.sort_paths = input;
        self
    }
    /// <p>The list of data paths that need to be sorted.</p>
    pub fn get_sort_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataPathValue>> {
        &self.sort_paths
    }
    /// Consumes the builder and constructs a [`DataPathSort`](crate::types::DataPathSort).
    /// This method will fail if any of the following fields are not set:
    /// - [`direction`](crate::types::builders::DataPathSortBuilder::direction)
    /// - [`sort_paths`](crate::types::builders::DataPathSortBuilder::sort_paths)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPathSort, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPathSort {
            direction: self.direction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "direction",
                    "direction was not specified but it is required when building DataPathSort",
                )
            })?,
            sort_paths: self.sort_paths.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sort_paths",
                    "sort_paths was not specified but it is required when building DataPathSort",
                )
            })?,
        })
    }
}
