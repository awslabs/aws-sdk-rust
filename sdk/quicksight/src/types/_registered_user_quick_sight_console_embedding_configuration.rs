// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Amazon QuickSight console that you want to embed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisteredUserQuickSightConsoleEmbeddingConfiguration {
    /// <p>The initial URL path for the Amazon QuickSight console. <code>InitialPath</code> is required.</p>
    /// <p>The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/DashboardId</code>. <i>DashboardId</i> is the actual ID key from the Amazon QuickSight console URL of the dashboard.</p> </li>
    /// <li> <p> <code>/analyses/AnalysisId</code>. <i>AnalysisId</i> is the actual ID key from the Amazon QuickSight console URL of the analysis.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub initial_path: std::option::Option<std::string::String>,
}
impl RegisteredUserQuickSightConsoleEmbeddingConfiguration {
    /// <p>The initial URL path for the Amazon QuickSight console. <code>InitialPath</code> is required.</p>
    /// <p>The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/DashboardId</code>. <i>DashboardId</i> is the actual ID key from the Amazon QuickSight console URL of the dashboard.</p> </li>
    /// <li> <p> <code>/analyses/AnalysisId</code>. <i>AnalysisId</i> is the actual ID key from the Amazon QuickSight console URL of the analysis.</p> </li>
    /// </ul>
    pub fn initial_path(&self) -> std::option::Option<&str> {
        self.initial_path.as_deref()
    }
}
impl RegisteredUserQuickSightConsoleEmbeddingConfiguration {
    /// Creates a new builder-style object to manufacture [`RegisteredUserQuickSightConsoleEmbeddingConfiguration`](crate::types::RegisteredUserQuickSightConsoleEmbeddingConfiguration).
    pub fn builder(
    ) -> crate::types::builders::RegisteredUserQuickSightConsoleEmbeddingConfigurationBuilder {
        crate::types::builders::RegisteredUserQuickSightConsoleEmbeddingConfigurationBuilder::default()
    }
}

/// A builder for [`RegisteredUserQuickSightConsoleEmbeddingConfiguration`](crate::types::RegisteredUserQuickSightConsoleEmbeddingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisteredUserQuickSightConsoleEmbeddingConfigurationBuilder {
    pub(crate) initial_path: std::option::Option<std::string::String>,
}
impl RegisteredUserQuickSightConsoleEmbeddingConfigurationBuilder {
    /// <p>The initial URL path for the Amazon QuickSight console. <code>InitialPath</code> is required.</p>
    /// <p>The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/DashboardId</code>. <i>DashboardId</i> is the actual ID key from the Amazon QuickSight console URL of the dashboard.</p> </li>
    /// <li> <p> <code>/analyses/AnalysisId</code>. <i>AnalysisId</i> is the actual ID key from the Amazon QuickSight console URL of the analysis.</p> </li>
    /// </ul>
    pub fn initial_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.initial_path = Some(input.into());
        self
    }
    /// <p>The initial URL path for the Amazon QuickSight console. <code>InitialPath</code> is required.</p>
    /// <p>The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/DashboardId</code>. <i>DashboardId</i> is the actual ID key from the Amazon QuickSight console URL of the dashboard.</p> </li>
    /// <li> <p> <code>/analyses/AnalysisId</code>. <i>AnalysisId</i> is the actual ID key from the Amazon QuickSight console URL of the analysis.</p> </li>
    /// </ul>
    pub fn set_initial_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.initial_path = input;
        self
    }
    /// Consumes the builder and constructs a [`RegisteredUserQuickSightConsoleEmbeddingConfiguration`](crate::types::RegisteredUserQuickSightConsoleEmbeddingConfiguration).
    pub fn build(self) -> crate::types::RegisteredUserQuickSightConsoleEmbeddingConfiguration {
        crate::types::RegisteredUserQuickSightConsoleEmbeddingConfiguration {
            initial_path: self.initial_path,
        }
    }
}
