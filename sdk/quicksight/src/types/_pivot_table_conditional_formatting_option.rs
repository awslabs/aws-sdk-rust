// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PivotTableConditionalFormattingOption {
    /// <p>The cell conditional formatting option for a pivot table.</p>
    #[doc(hidden)]
    pub cell: std::option::Option<crate::types::PivotTableCellConditionalFormatting>,
}
impl PivotTableConditionalFormattingOption {
    /// <p>The cell conditional formatting option for a pivot table.</p>
    pub fn cell(&self) -> std::option::Option<&crate::types::PivotTableCellConditionalFormatting> {
        self.cell.as_ref()
    }
}
impl PivotTableConditionalFormattingOption {
    /// Creates a new builder-style object to manufacture [`PivotTableConditionalFormattingOption`](crate::types::PivotTableConditionalFormattingOption).
    pub fn builder() -> crate::types::builders::PivotTableConditionalFormattingOptionBuilder {
        crate::types::builders::PivotTableConditionalFormattingOptionBuilder::default()
    }
}

/// A builder for [`PivotTableConditionalFormattingOption`](crate::types::PivotTableConditionalFormattingOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PivotTableConditionalFormattingOptionBuilder {
    pub(crate) cell: std::option::Option<crate::types::PivotTableCellConditionalFormatting>,
}
impl PivotTableConditionalFormattingOptionBuilder {
    /// <p>The cell conditional formatting option for a pivot table.</p>
    pub fn cell(mut self, input: crate::types::PivotTableCellConditionalFormatting) -> Self {
        self.cell = Some(input);
        self
    }
    /// <p>The cell conditional formatting option for a pivot table.</p>
    pub fn set_cell(
        mut self,
        input: std::option::Option<crate::types::PivotTableCellConditionalFormatting>,
    ) -> Self {
        self.cell = input;
        self
    }
    /// Consumes the builder and constructs a [`PivotTableConditionalFormattingOption`](crate::types::PivotTableConditionalFormattingOption).
    pub fn build(self) -> crate::types::PivotTableConditionalFormattingOption {
        crate::types::PivotTableConditionalFormattingOption { cell: self.cell }
    }
}
