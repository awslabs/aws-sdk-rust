// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The instructions associated with a join. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JoinInstruction {
    /// <p>The operand on the left side of a join.</p>
    #[doc(hidden)]
    pub left_operand: std::option::Option<std::string::String>,
    /// <p>The operand on the right side of a join.</p>
    #[doc(hidden)]
    pub right_operand: std::option::Option<std::string::String>,
    /// <p>Join key properties of the left operand.</p>
    #[doc(hidden)]
    pub left_join_key_properties: std::option::Option<crate::types::JoinKeyProperties>,
    /// <p>Join key properties of the right operand.</p>
    #[doc(hidden)]
    pub right_join_key_properties: std::option::Option<crate::types::JoinKeyProperties>,
    /// <p>The type of join that it is.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::JoinType>,
    /// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
    #[doc(hidden)]
    pub on_clause: std::option::Option<std::string::String>,
}
impl JoinInstruction {
    /// <p>The operand on the left side of a join.</p>
    pub fn left_operand(&self) -> std::option::Option<&str> {
        self.left_operand.as_deref()
    }
    /// <p>The operand on the right side of a join.</p>
    pub fn right_operand(&self) -> std::option::Option<&str> {
        self.right_operand.as_deref()
    }
    /// <p>Join key properties of the left operand.</p>
    pub fn left_join_key_properties(
        &self,
    ) -> std::option::Option<&crate::types::JoinKeyProperties> {
        self.left_join_key_properties.as_ref()
    }
    /// <p>Join key properties of the right operand.</p>
    pub fn right_join_key_properties(
        &self,
    ) -> std::option::Option<&crate::types::JoinKeyProperties> {
        self.right_join_key_properties.as_ref()
    }
    /// <p>The type of join that it is.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::JoinType> {
        self.r#type.as_ref()
    }
    /// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
    pub fn on_clause(&self) -> std::option::Option<&str> {
        self.on_clause.as_deref()
    }
}
impl JoinInstruction {
    /// Creates a new builder-style object to manufacture [`JoinInstruction`](crate::types::JoinInstruction).
    pub fn builder() -> crate::types::builders::JoinInstructionBuilder {
        crate::types::builders::JoinInstructionBuilder::default()
    }
}

/// A builder for [`JoinInstruction`](crate::types::JoinInstruction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JoinInstructionBuilder {
    pub(crate) left_operand: std::option::Option<std::string::String>,
    pub(crate) right_operand: std::option::Option<std::string::String>,
    pub(crate) left_join_key_properties: std::option::Option<crate::types::JoinKeyProperties>,
    pub(crate) right_join_key_properties: std::option::Option<crate::types::JoinKeyProperties>,
    pub(crate) r#type: std::option::Option<crate::types::JoinType>,
    pub(crate) on_clause: std::option::Option<std::string::String>,
}
impl JoinInstructionBuilder {
    /// <p>The operand on the left side of a join.</p>
    pub fn left_operand(mut self, input: impl Into<std::string::String>) -> Self {
        self.left_operand = Some(input.into());
        self
    }
    /// <p>The operand on the left side of a join.</p>
    pub fn set_left_operand(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.left_operand = input;
        self
    }
    /// <p>The operand on the right side of a join.</p>
    pub fn right_operand(mut self, input: impl Into<std::string::String>) -> Self {
        self.right_operand = Some(input.into());
        self
    }
    /// <p>The operand on the right side of a join.</p>
    pub fn set_right_operand(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.right_operand = input;
        self
    }
    /// <p>Join key properties of the left operand.</p>
    pub fn left_join_key_properties(mut self, input: crate::types::JoinKeyProperties) -> Self {
        self.left_join_key_properties = Some(input);
        self
    }
    /// <p>Join key properties of the left operand.</p>
    pub fn set_left_join_key_properties(
        mut self,
        input: std::option::Option<crate::types::JoinKeyProperties>,
    ) -> Self {
        self.left_join_key_properties = input;
        self
    }
    /// <p>Join key properties of the right operand.</p>
    pub fn right_join_key_properties(mut self, input: crate::types::JoinKeyProperties) -> Self {
        self.right_join_key_properties = Some(input);
        self
    }
    /// <p>Join key properties of the right operand.</p>
    pub fn set_right_join_key_properties(
        mut self,
        input: std::option::Option<crate::types::JoinKeyProperties>,
    ) -> Self {
        self.right_join_key_properties = input;
        self
    }
    /// <p>The type of join that it is.</p>
    pub fn r#type(mut self, input: crate::types::JoinType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of join that it is.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::JoinType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
    pub fn on_clause(mut self, input: impl Into<std::string::String>) -> Self {
        self.on_clause = Some(input.into());
        self
    }
    /// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
    pub fn set_on_clause(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.on_clause = input;
        self
    }
    /// Consumes the builder and constructs a [`JoinInstruction`](crate::types::JoinInstruction).
    pub fn build(self) -> crate::types::JoinInstruction {
        crate::types::JoinInstruction {
            left_operand: self.left_operand,
            right_operand: self.right_operand,
            left_join_key_properties: self.left_join_key_properties,
            right_join_key_properties: self.right_join_key_properties,
            r#type: self.r#type,
            on_clause: self.on_clause,
        }
    }
}
