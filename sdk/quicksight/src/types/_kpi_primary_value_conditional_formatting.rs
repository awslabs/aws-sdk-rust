// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting for the primary value of a KPI visual.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KpiPrimaryValueConditionalFormatting {
    /// <p>The conditional formatting of the primary value's text color.</p>
    #[doc(hidden)]
    pub text_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    /// <p>The conditional formatting of the primary value's icon.</p>
    #[doc(hidden)]
    pub icon: std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl KpiPrimaryValueConditionalFormatting {
    /// <p>The conditional formatting of the primary value's text color.</p>
    pub fn text_color(&self) -> std::option::Option<&crate::types::ConditionalFormattingColor> {
        self.text_color.as_ref()
    }
    /// <p>The conditional formatting of the primary value's icon.</p>
    pub fn icon(&self) -> std::option::Option<&crate::types::ConditionalFormattingIcon> {
        self.icon.as_ref()
    }
}
impl KpiPrimaryValueConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`KpiPrimaryValueConditionalFormatting`](crate::types::KpiPrimaryValueConditionalFormatting).
    pub fn builder() -> crate::types::builders::KpiPrimaryValueConditionalFormattingBuilder {
        crate::types::builders::KpiPrimaryValueConditionalFormattingBuilder::default()
    }
}

/// A builder for [`KpiPrimaryValueConditionalFormatting`](crate::types::KpiPrimaryValueConditionalFormatting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KpiPrimaryValueConditionalFormattingBuilder {
    pub(crate) text_color: std::option::Option<crate::types::ConditionalFormattingColor>,
    pub(crate) icon: std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl KpiPrimaryValueConditionalFormattingBuilder {
    /// <p>The conditional formatting of the primary value's text color.</p>
    pub fn text_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.text_color = Some(input);
        self
    }
    /// <p>The conditional formatting of the primary value's text color.</p>
    pub fn set_text_color(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingColor>,
    ) -> Self {
        self.text_color = input;
        self
    }
    /// <p>The conditional formatting of the primary value's icon.</p>
    pub fn icon(mut self, input: crate::types::ConditionalFormattingIcon) -> Self {
        self.icon = Some(input);
        self
    }
    /// <p>The conditional formatting of the primary value's icon.</p>
    pub fn set_icon(
        mut self,
        input: std::option::Option<crate::types::ConditionalFormattingIcon>,
    ) -> Self {
        self.icon = input;
        self
    }
    /// Consumes the builder and constructs a [`KpiPrimaryValueConditionalFormatting`](crate::types::KpiPrimaryValueConditionalFormatting).
    pub fn build(self) -> crate::types::KpiPrimaryValueConditionalFormatting {
        crate::types::KpiPrimaryValueConditionalFormatting {
            text_color: self.text_color,
            icon: self.icon,
        }
    }
}
