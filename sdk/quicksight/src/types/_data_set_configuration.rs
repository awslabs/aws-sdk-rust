// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dataset configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSetConfiguration {
    /// <p>Placeholder.</p>
    pub placeholder: ::std::option::Option<::std::string::String>,
    /// <p>Dataset schema.</p>
    pub data_set_schema: ::std::option::Option<crate::types::DataSetSchema>,
    /// <p>A structure containing the list of column group schemas.</p>
    pub column_group_schema_list: ::std::option::Option<::std::vec::Vec<crate::types::ColumnGroupSchema>>,
}
impl DataSetConfiguration {
    /// <p>Placeholder.</p>
    pub fn placeholder(&self) -> ::std::option::Option<&str> {
        self.placeholder.as_deref()
    }
    /// <p>Dataset schema.</p>
    pub fn data_set_schema(&self) -> ::std::option::Option<&crate::types::DataSetSchema> {
        self.data_set_schema.as_ref()
    }
    /// <p>A structure containing the list of column group schemas.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.column_group_schema_list.is_none()`.
    pub fn column_group_schema_list(&self) -> &[crate::types::ColumnGroupSchema] {
        self.column_group_schema_list.as_deref().unwrap_or_default()
    }
}
impl DataSetConfiguration {
    /// Creates a new builder-style object to manufacture [`DataSetConfiguration`](crate::types::DataSetConfiguration).
    pub fn builder() -> crate::types::builders::DataSetConfigurationBuilder {
        crate::types::builders::DataSetConfigurationBuilder::default()
    }
}

/// A builder for [`DataSetConfiguration`](crate::types::DataSetConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSetConfigurationBuilder {
    pub(crate) placeholder: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_schema: ::std::option::Option<crate::types::DataSetSchema>,
    pub(crate) column_group_schema_list: ::std::option::Option<::std::vec::Vec<crate::types::ColumnGroupSchema>>,
}
impl DataSetConfigurationBuilder {
    /// <p>Placeholder.</p>
    pub fn placeholder(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placeholder = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Placeholder.</p>
    pub fn set_placeholder(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placeholder = input;
        self
    }
    /// <p>Placeholder.</p>
    pub fn get_placeholder(&self) -> &::std::option::Option<::std::string::String> {
        &self.placeholder
    }
    /// <p>Dataset schema.</p>
    pub fn data_set_schema(mut self, input: crate::types::DataSetSchema) -> Self {
        self.data_set_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Dataset schema.</p>
    pub fn set_data_set_schema(mut self, input: ::std::option::Option<crate::types::DataSetSchema>) -> Self {
        self.data_set_schema = input;
        self
    }
    /// <p>Dataset schema.</p>
    pub fn get_data_set_schema(&self) -> &::std::option::Option<crate::types::DataSetSchema> {
        &self.data_set_schema
    }
    /// Appends an item to `column_group_schema_list`.
    ///
    /// To override the contents of this collection use [`set_column_group_schema_list`](Self::set_column_group_schema_list).
    ///
    /// <p>A structure containing the list of column group schemas.</p>
    pub fn column_group_schema_list(mut self, input: crate::types::ColumnGroupSchema) -> Self {
        let mut v = self.column_group_schema_list.unwrap_or_default();
        v.push(input);
        self.column_group_schema_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A structure containing the list of column group schemas.</p>
    pub fn set_column_group_schema_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnGroupSchema>>) -> Self {
        self.column_group_schema_list = input;
        self
    }
    /// <p>A structure containing the list of column group schemas.</p>
    pub fn get_column_group_schema_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnGroupSchema>> {
        &self.column_group_schema_list
    }
    /// Consumes the builder and constructs a [`DataSetConfiguration`](crate::types::DataSetConfiguration).
    pub fn build(self) -> crate::types::DataSetConfiguration {
        crate::types::DataSetConfiguration {
            placeholder: self.placeholder,
            data_set_schema: self.data_set_schema,
            column_group_schema_list: self.column_group_schema_list,
        }
    }
}
