// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines the custom condition for an icon set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ConditionalFormattingCustomIconCondition {
    /// <p>The expression that determines the condition of the icon set.</p>
    pub expression: ::std::string::String,
    /// <p>Custom icon options for an icon set.</p>
    pub icon_options: ::std::option::Option<crate::types::ConditionalFormattingCustomIconOptions>,
    /// <p>Determines the color of the icon.</p>
    pub color: ::std::option::Option<::std::string::String>,
    /// <p>Determines the icon display configuration.</p>
    pub display_configuration: ::std::option::Option<crate::types::ConditionalFormattingIconDisplayConfiguration>,
}
impl ConditionalFormattingCustomIconCondition {
    /// <p>The expression that determines the condition of the icon set.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>Custom icon options for an icon set.</p>
    pub fn icon_options(&self) -> ::std::option::Option<&crate::types::ConditionalFormattingCustomIconOptions> {
        self.icon_options.as_ref()
    }
    /// <p>Determines the color of the icon.</p>
    pub fn color(&self) -> ::std::option::Option<&str> {
        self.color.as_deref()
    }
    /// <p>Determines the icon display configuration.</p>
    pub fn display_configuration(&self) -> ::std::option::Option<&crate::types::ConditionalFormattingIconDisplayConfiguration> {
        self.display_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for ConditionalFormattingCustomIconCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingCustomIconCondition");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("icon_options", &self.icon_options);
        formatter.field("color", &self.color);
        formatter.field("display_configuration", &self.display_configuration);
        formatter.finish()
    }
}
impl ConditionalFormattingCustomIconCondition {
    /// Creates a new builder-style object to manufacture [`ConditionalFormattingCustomIconCondition`](crate::types::ConditionalFormattingCustomIconCondition).
    pub fn builder() -> crate::types::builders::ConditionalFormattingCustomIconConditionBuilder {
        crate::types::builders::ConditionalFormattingCustomIconConditionBuilder::default()
    }
}

/// A builder for [`ConditionalFormattingCustomIconCondition`](crate::types::ConditionalFormattingCustomIconCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ConditionalFormattingCustomIconConditionBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) icon_options: ::std::option::Option<crate::types::ConditionalFormattingCustomIconOptions>,
    pub(crate) color: ::std::option::Option<::std::string::String>,
    pub(crate) display_configuration: ::std::option::Option<crate::types::ConditionalFormattingIconDisplayConfiguration>,
}
impl ConditionalFormattingCustomIconConditionBuilder {
    /// <p>The expression that determines the condition of the icon set.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression that determines the condition of the icon set.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression that determines the condition of the icon set.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>Custom icon options for an icon set.</p>
    /// This field is required.
    pub fn icon_options(mut self, input: crate::types::ConditionalFormattingCustomIconOptions) -> Self {
        self.icon_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Custom icon options for an icon set.</p>
    pub fn set_icon_options(mut self, input: ::std::option::Option<crate::types::ConditionalFormattingCustomIconOptions>) -> Self {
        self.icon_options = input;
        self
    }
    /// <p>Custom icon options for an icon set.</p>
    pub fn get_icon_options(&self) -> &::std::option::Option<crate::types::ConditionalFormattingCustomIconOptions> {
        &self.icon_options
    }
    /// <p>Determines the color of the icon.</p>
    pub fn color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the color of the icon.</p>
    pub fn set_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.color = input;
        self
    }
    /// <p>Determines the color of the icon.</p>
    pub fn get_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.color
    }
    /// <p>Determines the icon display configuration.</p>
    pub fn display_configuration(mut self, input: crate::types::ConditionalFormattingIconDisplayConfiguration) -> Self {
        self.display_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the icon display configuration.</p>
    pub fn set_display_configuration(mut self, input: ::std::option::Option<crate::types::ConditionalFormattingIconDisplayConfiguration>) -> Self {
        self.display_configuration = input;
        self
    }
    /// <p>Determines the icon display configuration.</p>
    pub fn get_display_configuration(&self) -> &::std::option::Option<crate::types::ConditionalFormattingIconDisplayConfiguration> {
        &self.display_configuration
    }
    /// Consumes the builder and constructs a [`ConditionalFormattingCustomIconCondition`](crate::types::ConditionalFormattingCustomIconCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::ConditionalFormattingCustomIconConditionBuilder::expression)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ConditionalFormattingCustomIconCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConditionalFormattingCustomIconCondition {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building ConditionalFormattingCustomIconCondition",
                )
            })?,
            icon_options: self.icon_options,
            color: self.color,
            display_configuration: self.display_configuration,
        })
    }
}
impl ::std::fmt::Debug for ConditionalFormattingCustomIconConditionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConditionalFormattingCustomIconConditionBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("icon_options", &self.icon_options);
        formatter.field("color", &self.color);
        formatter.field("display_configuration", &self.display_configuration);
        formatter.finish()
    }
}
