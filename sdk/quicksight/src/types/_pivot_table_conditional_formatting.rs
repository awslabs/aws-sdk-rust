// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting for a <code>PivotTableVisual</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PivotTableConditionalFormatting {
    /// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
    #[doc(hidden)]
    pub conditional_formatting_options:
        std::option::Option<std::vec::Vec<crate::types::PivotTableConditionalFormattingOption>>,
}
impl PivotTableConditionalFormatting {
    /// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
    pub fn conditional_formatting_options(
        &self,
    ) -> std::option::Option<&[crate::types::PivotTableConditionalFormattingOption]> {
        self.conditional_formatting_options.as_deref()
    }
}
impl PivotTableConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`PivotTableConditionalFormatting`](crate::types::PivotTableConditionalFormatting).
    pub fn builder() -> crate::types::builders::PivotTableConditionalFormattingBuilder {
        crate::types::builders::PivotTableConditionalFormattingBuilder::default()
    }
}

/// A builder for [`PivotTableConditionalFormatting`](crate::types::PivotTableConditionalFormatting).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PivotTableConditionalFormattingBuilder {
    pub(crate) conditional_formatting_options:
        std::option::Option<std::vec::Vec<crate::types::PivotTableConditionalFormattingOption>>,
}
impl PivotTableConditionalFormattingBuilder {
    /// Appends an item to `conditional_formatting_options`.
    ///
    /// To override the contents of this collection use [`set_conditional_formatting_options`](Self::set_conditional_formatting_options).
    ///
    /// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
    pub fn conditional_formatting_options(
        mut self,
        input: crate::types::PivotTableConditionalFormattingOption,
    ) -> Self {
        let mut v = self.conditional_formatting_options.unwrap_or_default();
        v.push(input);
        self.conditional_formatting_options = Some(v);
        self
    }
    /// <p>Conditional formatting options for a <code>PivotTableVisual</code>.</p>
    pub fn set_conditional_formatting_options(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::PivotTableConditionalFormattingOption>,
        >,
    ) -> Self {
        self.conditional_formatting_options = input;
        self
    }
    /// Consumes the builder and constructs a [`PivotTableConditionalFormatting`](crate::types::PivotTableConditionalFormatting).
    pub fn build(self) -> crate::types::PivotTableConditionalFormatting {
        crate::types::PivotTableConditionalFormatting {
            conditional_formatting_options: self.conditional_formatting_options,
        }
    }
}
