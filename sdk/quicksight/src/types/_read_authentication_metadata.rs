// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Read-only authentication metadata union containing non-sensitive configuration details for different authentication types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ReadAuthenticationMetadata {
    /// <p>Read-only metadata for API key authentication configuration.</p>
    ApiKeyConnectionMetadata(crate::types::ReadApiKeyConnectionMetadata),
    /// <p>Read-only metadata for OAuth2 authorization code grant flow configuration.</p>
    AuthorizationCodeGrantMetadata(crate::types::ReadAuthorizationCodeGrantMetadata),
    /// <p>Read-only metadata for basic authentication configuration.</p>
    BasicAuthConnectionMetadata(crate::types::ReadBasicAuthConnectionMetadata),
    /// <p>Read-only metadata for OAuth2 client credentials grant flow configuration.</p>
    ClientCredentialsGrantMetadata(crate::types::ReadClientCredentialsGrantMetadata),
    /// <p>Read-only metadata for IAM-based authentication configuration.</p>
    IamConnectionMetadata(crate::types::ReadIamConnectionMetadata),
    /// <p>Read-only metadata for connections that do not require authentication.</p>
    NoneConnectionMetadata(crate::types::ReadNoneConnectionMetadata),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ReadAuthenticationMetadata {
    /// Tries to convert the enum instance into [`ApiKeyConnectionMetadata`](crate::types::ReadAuthenticationMetadata::ApiKeyConnectionMetadata), extracting the inner [`ReadApiKeyConnectionMetadata`](crate::types::ReadApiKeyConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_api_key_connection_metadata(&self) -> ::std::result::Result<&crate::types::ReadApiKeyConnectionMetadata, &Self> {
        if let ReadAuthenticationMetadata::ApiKeyConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ApiKeyConnectionMetadata`](crate::types::ReadAuthenticationMetadata::ApiKeyConnectionMetadata).
    pub fn is_api_key_connection_metadata(&self) -> bool {
        self.as_api_key_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`AuthorizationCodeGrantMetadata`](crate::types::ReadAuthenticationMetadata::AuthorizationCodeGrantMetadata), extracting the inner [`ReadAuthorizationCodeGrantMetadata`](crate::types::ReadAuthorizationCodeGrantMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_authorization_code_grant_metadata(&self) -> ::std::result::Result<&crate::types::ReadAuthorizationCodeGrantMetadata, &Self> {
        if let ReadAuthenticationMetadata::AuthorizationCodeGrantMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AuthorizationCodeGrantMetadata`](crate::types::ReadAuthenticationMetadata::AuthorizationCodeGrantMetadata).
    pub fn is_authorization_code_grant_metadata(&self) -> bool {
        self.as_authorization_code_grant_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`BasicAuthConnectionMetadata`](crate::types::ReadAuthenticationMetadata::BasicAuthConnectionMetadata), extracting the inner [`ReadBasicAuthConnectionMetadata`](crate::types::ReadBasicAuthConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_basic_auth_connection_metadata(&self) -> ::std::result::Result<&crate::types::ReadBasicAuthConnectionMetadata, &Self> {
        if let ReadAuthenticationMetadata::BasicAuthConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BasicAuthConnectionMetadata`](crate::types::ReadAuthenticationMetadata::BasicAuthConnectionMetadata).
    pub fn is_basic_auth_connection_metadata(&self) -> bool {
        self.as_basic_auth_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`ClientCredentialsGrantMetadata`](crate::types::ReadAuthenticationMetadata::ClientCredentialsGrantMetadata), extracting the inner [`ReadClientCredentialsGrantMetadata`](crate::types::ReadClientCredentialsGrantMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_client_credentials_grant_metadata(&self) -> ::std::result::Result<&crate::types::ReadClientCredentialsGrantMetadata, &Self> {
        if let ReadAuthenticationMetadata::ClientCredentialsGrantMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ClientCredentialsGrantMetadata`](crate::types::ReadAuthenticationMetadata::ClientCredentialsGrantMetadata).
    pub fn is_client_credentials_grant_metadata(&self) -> bool {
        self.as_client_credentials_grant_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`IamConnectionMetadata`](crate::types::ReadAuthenticationMetadata::IamConnectionMetadata), extracting the inner [`ReadIamConnectionMetadata`](crate::types::ReadIamConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iam_connection_metadata(&self) -> ::std::result::Result<&crate::types::ReadIamConnectionMetadata, &Self> {
        if let ReadAuthenticationMetadata::IamConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IamConnectionMetadata`](crate::types::ReadAuthenticationMetadata::IamConnectionMetadata).
    pub fn is_iam_connection_metadata(&self) -> bool {
        self.as_iam_connection_metadata().is_ok()
    }
    /// Tries to convert the enum instance into [`NoneConnectionMetadata`](crate::types::ReadAuthenticationMetadata::NoneConnectionMetadata), extracting the inner [`ReadNoneConnectionMetadata`](crate::types::ReadNoneConnectionMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_none_connection_metadata(&self) -> ::std::result::Result<&crate::types::ReadNoneConnectionMetadata, &Self> {
        if let ReadAuthenticationMetadata::NoneConnectionMetadata(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NoneConnectionMetadata`](crate::types::ReadAuthenticationMetadata::NoneConnectionMetadata).
    pub fn is_none_connection_metadata(&self) -> bool {
        self.as_none_connection_metadata().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
