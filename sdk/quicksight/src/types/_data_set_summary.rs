// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dataset summary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSetSummary {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the dataset.</p>
    #[doc(hidden)]
    pub data_set_id: std::option::Option<std::string::String>,
    /// <p>A display name for the dataset.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The time that this dataset was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time that this dataset was updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A value that indicates whether you want to import the data into SPICE.</p>
    #[doc(hidden)]
    pub import_mode: std::option::Option<crate::types::DataSetImportMode>,
    /// <p>The row-level security configuration for the dataset.</p>
    #[doc(hidden)]
    pub row_level_permission_data_set: std::option::Option<crate::types::RowLevelPermissionDataSet>,
    /// <p>Whether or not the row level permission tags are applied.</p>
    #[doc(hidden)]
    pub row_level_permission_tag_configuration_applied: bool,
    /// <p>A value that indicates if the dataset has column level permission configured.</p>
    #[doc(hidden)]
    pub column_level_permission_rules_applied: bool,
}
impl DataSetSummary {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the dataset.</p>
    pub fn data_set_id(&self) -> std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>A display name for the dataset.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time that this dataset was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The last time that this dataset was updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>A value that indicates whether you want to import the data into SPICE.</p>
    pub fn import_mode(&self) -> std::option::Option<&crate::types::DataSetImportMode> {
        self.import_mode.as_ref()
    }
    /// <p>The row-level security configuration for the dataset.</p>
    pub fn row_level_permission_data_set(
        &self,
    ) -> std::option::Option<&crate::types::RowLevelPermissionDataSet> {
        self.row_level_permission_data_set.as_ref()
    }
    /// <p>Whether or not the row level permission tags are applied.</p>
    pub fn row_level_permission_tag_configuration_applied(&self) -> bool {
        self.row_level_permission_tag_configuration_applied
    }
    /// <p>A value that indicates if the dataset has column level permission configured.</p>
    pub fn column_level_permission_rules_applied(&self) -> bool {
        self.column_level_permission_rules_applied
    }
}
impl DataSetSummary {
    /// Creates a new builder-style object to manufacture [`DataSetSummary`](crate::types::DataSetSummary).
    pub fn builder() -> crate::types::builders::DataSetSummaryBuilder {
        crate::types::builders::DataSetSummaryBuilder::default()
    }
}

/// A builder for [`DataSetSummary`](crate::types::DataSetSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSetSummaryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) data_set_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) import_mode: std::option::Option<crate::types::DataSetImportMode>,
    pub(crate) row_level_permission_data_set:
        std::option::Option<crate::types::RowLevelPermissionDataSet>,
    pub(crate) row_level_permission_tag_configuration_applied: std::option::Option<bool>,
    pub(crate) column_level_permission_rules_applied: std::option::Option<bool>,
}
impl DataSetSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the dataset.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_id = Some(input.into());
        self
    }
    /// <p>The ID of the dataset.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>A display name for the dataset.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A display name for the dataset.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The time that this dataset was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The time that this dataset was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The last time that this dataset was updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The last time that this dataset was updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>A value that indicates whether you want to import the data into SPICE.</p>
    pub fn import_mode(mut self, input: crate::types::DataSetImportMode) -> Self {
        self.import_mode = Some(input);
        self
    }
    /// <p>A value that indicates whether you want to import the data into SPICE.</p>
    pub fn set_import_mode(
        mut self,
        input: std::option::Option<crate::types::DataSetImportMode>,
    ) -> Self {
        self.import_mode = input;
        self
    }
    /// <p>The row-level security configuration for the dataset.</p>
    pub fn row_level_permission_data_set(
        mut self,
        input: crate::types::RowLevelPermissionDataSet,
    ) -> Self {
        self.row_level_permission_data_set = Some(input);
        self
    }
    /// <p>The row-level security configuration for the dataset.</p>
    pub fn set_row_level_permission_data_set(
        mut self,
        input: std::option::Option<crate::types::RowLevelPermissionDataSet>,
    ) -> Self {
        self.row_level_permission_data_set = input;
        self
    }
    /// <p>Whether or not the row level permission tags are applied.</p>
    pub fn row_level_permission_tag_configuration_applied(mut self, input: bool) -> Self {
        self.row_level_permission_tag_configuration_applied = Some(input);
        self
    }
    /// <p>Whether or not the row level permission tags are applied.</p>
    pub fn set_row_level_permission_tag_configuration_applied(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.row_level_permission_tag_configuration_applied = input;
        self
    }
    /// <p>A value that indicates if the dataset has column level permission configured.</p>
    pub fn column_level_permission_rules_applied(mut self, input: bool) -> Self {
        self.column_level_permission_rules_applied = Some(input);
        self
    }
    /// <p>A value that indicates if the dataset has column level permission configured.</p>
    pub fn set_column_level_permission_rules_applied(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.column_level_permission_rules_applied = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSetSummary`](crate::types::DataSetSummary).
    pub fn build(self) -> crate::types::DataSetSummary {
        crate::types::DataSetSummary {
            arn: self.arn,
            data_set_id: self.data_set_id,
            name: self.name,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            import_mode: self.import_mode,
            row_level_permission_data_set: self.row_level_permission_data_set,
            row_level_permission_tag_configuration_applied: self
                .row_level_permission_tag_configuration_applied
                .unwrap_or_default(),
            column_level_permission_rules_applied: self
                .column_level_permission_rules_applied
                .unwrap_or_default(),
        }
    }
}
