// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>With a <code>Filter</code>, you can remove portions of data from a particular visual or view.</p>
/// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Filter {
    /// <p>A <code>CategoryFilter</code> filters text values.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    #[doc(hidden)]
    pub category_filter: std::option::Option<crate::types::CategoryFilter>,
    /// <p>A <code>NumericRangeFilter</code> filters numeric values that are either inside or outside a given numeric range.</p>
    #[doc(hidden)]
    pub numeric_range_filter: std::option::Option<crate::types::NumericRangeFilter>,
    /// <p>A <code>NumericEqualityFilter</code> filters numeric values that equal or do not equal a given numeric value.</p>
    #[doc(hidden)]
    pub numeric_equality_filter: std::option::Option<crate::types::NumericEqualityFilter>,
    /// <p>A <code>TimeEqualityFilter</code> filters date-time values that equal or do not equal a given date/time value.</p>
    #[doc(hidden)]
    pub time_equality_filter: std::option::Option<crate::types::TimeEqualityFilter>,
    /// <p>A <code>TimeRangeFilter</code> filters date-time values that are either inside or outside a given date/time range.</p>
    #[doc(hidden)]
    pub time_range_filter: std::option::Option<crate::types::TimeRangeFilter>,
    /// <p>A <code>RelativeDatesFilter</code> filters date values that are relative to a given date.</p>
    #[doc(hidden)]
    pub relative_dates_filter: std::option::Option<crate::types::RelativeDatesFilter>,
    /// <p>A <code>TopBottomFilter</code> filters data to the top or bottom values for a given column.</p>
    #[doc(hidden)]
    pub top_bottom_filter: std::option::Option<crate::types::TopBottomFilter>,
}
impl Filter {
    /// <p>A <code>CategoryFilter</code> filters text values.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn category_filter(&self) -> std::option::Option<&crate::types::CategoryFilter> {
        self.category_filter.as_ref()
    }
    /// <p>A <code>NumericRangeFilter</code> filters numeric values that are either inside or outside a given numeric range.</p>
    pub fn numeric_range_filter(&self) -> std::option::Option<&crate::types::NumericRangeFilter> {
        self.numeric_range_filter.as_ref()
    }
    /// <p>A <code>NumericEqualityFilter</code> filters numeric values that equal or do not equal a given numeric value.</p>
    pub fn numeric_equality_filter(
        &self,
    ) -> std::option::Option<&crate::types::NumericEqualityFilter> {
        self.numeric_equality_filter.as_ref()
    }
    /// <p>A <code>TimeEqualityFilter</code> filters date-time values that equal or do not equal a given date/time value.</p>
    pub fn time_equality_filter(&self) -> std::option::Option<&crate::types::TimeEqualityFilter> {
        self.time_equality_filter.as_ref()
    }
    /// <p>A <code>TimeRangeFilter</code> filters date-time values that are either inside or outside a given date/time range.</p>
    pub fn time_range_filter(&self) -> std::option::Option<&crate::types::TimeRangeFilter> {
        self.time_range_filter.as_ref()
    }
    /// <p>A <code>RelativeDatesFilter</code> filters date values that are relative to a given date.</p>
    pub fn relative_dates_filter(&self) -> std::option::Option<&crate::types::RelativeDatesFilter> {
        self.relative_dates_filter.as_ref()
    }
    /// <p>A <code>TopBottomFilter</code> filters data to the top or bottom values for a given column.</p>
    pub fn top_bottom_filter(&self) -> std::option::Option<&crate::types::TopBottomFilter> {
        self.top_bottom_filter.as_ref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) category_filter: std::option::Option<crate::types::CategoryFilter>,
    pub(crate) numeric_range_filter: std::option::Option<crate::types::NumericRangeFilter>,
    pub(crate) numeric_equality_filter: std::option::Option<crate::types::NumericEqualityFilter>,
    pub(crate) time_equality_filter: std::option::Option<crate::types::TimeEqualityFilter>,
    pub(crate) time_range_filter: std::option::Option<crate::types::TimeRangeFilter>,
    pub(crate) relative_dates_filter: std::option::Option<crate::types::RelativeDatesFilter>,
    pub(crate) top_bottom_filter: std::option::Option<crate::types::TopBottomFilter>,
}
impl FilterBuilder {
    /// <p>A <code>CategoryFilter</code> filters text values.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn category_filter(mut self, input: crate::types::CategoryFilter) -> Self {
        self.category_filter = Some(input);
        self
    }
    /// <p>A <code>CategoryFilter</code> filters text values.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_category_filter(
        mut self,
        input: std::option::Option<crate::types::CategoryFilter>,
    ) -> Self {
        self.category_filter = input;
        self
    }
    /// <p>A <code>NumericRangeFilter</code> filters numeric values that are either inside or outside a given numeric range.</p>
    pub fn numeric_range_filter(mut self, input: crate::types::NumericRangeFilter) -> Self {
        self.numeric_range_filter = Some(input);
        self
    }
    /// <p>A <code>NumericRangeFilter</code> filters numeric values that are either inside or outside a given numeric range.</p>
    pub fn set_numeric_range_filter(
        mut self,
        input: std::option::Option<crate::types::NumericRangeFilter>,
    ) -> Self {
        self.numeric_range_filter = input;
        self
    }
    /// <p>A <code>NumericEqualityFilter</code> filters numeric values that equal or do not equal a given numeric value.</p>
    pub fn numeric_equality_filter(mut self, input: crate::types::NumericEqualityFilter) -> Self {
        self.numeric_equality_filter = Some(input);
        self
    }
    /// <p>A <code>NumericEqualityFilter</code> filters numeric values that equal or do not equal a given numeric value.</p>
    pub fn set_numeric_equality_filter(
        mut self,
        input: std::option::Option<crate::types::NumericEqualityFilter>,
    ) -> Self {
        self.numeric_equality_filter = input;
        self
    }
    /// <p>A <code>TimeEqualityFilter</code> filters date-time values that equal or do not equal a given date/time value.</p>
    pub fn time_equality_filter(mut self, input: crate::types::TimeEqualityFilter) -> Self {
        self.time_equality_filter = Some(input);
        self
    }
    /// <p>A <code>TimeEqualityFilter</code> filters date-time values that equal or do not equal a given date/time value.</p>
    pub fn set_time_equality_filter(
        mut self,
        input: std::option::Option<crate::types::TimeEqualityFilter>,
    ) -> Self {
        self.time_equality_filter = input;
        self
    }
    /// <p>A <code>TimeRangeFilter</code> filters date-time values that are either inside or outside a given date/time range.</p>
    pub fn time_range_filter(mut self, input: crate::types::TimeRangeFilter) -> Self {
        self.time_range_filter = Some(input);
        self
    }
    /// <p>A <code>TimeRangeFilter</code> filters date-time values that are either inside or outside a given date/time range.</p>
    pub fn set_time_range_filter(
        mut self,
        input: std::option::Option<crate::types::TimeRangeFilter>,
    ) -> Self {
        self.time_range_filter = input;
        self
    }
    /// <p>A <code>RelativeDatesFilter</code> filters date values that are relative to a given date.</p>
    pub fn relative_dates_filter(mut self, input: crate::types::RelativeDatesFilter) -> Self {
        self.relative_dates_filter = Some(input);
        self
    }
    /// <p>A <code>RelativeDatesFilter</code> filters date values that are relative to a given date.</p>
    pub fn set_relative_dates_filter(
        mut self,
        input: std::option::Option<crate::types::RelativeDatesFilter>,
    ) -> Self {
        self.relative_dates_filter = input;
        self
    }
    /// <p>A <code>TopBottomFilter</code> filters data to the top or bottom values for a given column.</p>
    pub fn top_bottom_filter(mut self, input: crate::types::TopBottomFilter) -> Self {
        self.top_bottom_filter = Some(input);
        self
    }
    /// <p>A <code>TopBottomFilter</code> filters data to the top or bottom values for a given column.</p>
    pub fn set_top_bottom_filter(
        mut self,
        input: std::option::Option<crate::types::TopBottomFilter>,
    ) -> Self {
        self.top_bottom_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            category_filter: self.category_filter,
            numeric_range_filter: self.numeric_range_filter,
            numeric_equality_filter: self.numeric_equality_filter,
            time_equality_filter: self.time_equality_filter,
            time_range_filter: self.time_range_filter,
            relative_dates_filter: self.relative_dates_filter,
            top_bottom_filter: self.top_bottom_filter,
        }
    }
}
