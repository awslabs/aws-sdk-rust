// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The column schema.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnSchema {
    /// <p>The name of the column schema.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data type of the column schema.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<std::string::String>,
    /// <p>The geographic role of the column schema.</p>
    #[doc(hidden)]
    pub geographic_role: std::option::Option<std::string::String>,
}
impl ColumnSchema {
    /// <p>The name of the column schema.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data type of the column schema.</p>
    pub fn data_type(&self) -> std::option::Option<&str> {
        self.data_type.as_deref()
    }
    /// <p>The geographic role of the column schema.</p>
    pub fn geographic_role(&self) -> std::option::Option<&str> {
        self.geographic_role.as_deref()
    }
}
impl ColumnSchema {
    /// Creates a new builder-style object to manufacture [`ColumnSchema`](crate::types::ColumnSchema).
    pub fn builder() -> crate::types::builders::ColumnSchemaBuilder {
        crate::types::builders::ColumnSchemaBuilder::default()
    }
}

/// A builder for [`ColumnSchema`](crate::types::ColumnSchema).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnSchemaBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<std::string::String>,
    pub(crate) geographic_role: std::option::Option<std::string::String>,
}
impl ColumnSchemaBuilder {
    /// <p>The name of the column schema.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the column schema.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The data type of the column schema.</p>
    pub fn data_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_type = Some(input.into());
        self
    }
    /// <p>The data type of the column schema.</p>
    pub fn set_data_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The geographic role of the column schema.</p>
    pub fn geographic_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.geographic_role = Some(input.into());
        self
    }
    /// <p>The geographic role of the column schema.</p>
    pub fn set_geographic_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.geographic_role = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnSchema`](crate::types::ColumnSchema).
    pub fn build(self) -> crate::types::ColumnSchema {
        crate::types::ColumnSchema {
            name: self.name,
            data_type: self.data_type,
            geographic_role: self.geographic_role,
        }
    }
}
