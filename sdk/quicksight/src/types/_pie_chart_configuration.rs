// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a pie chart.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PieChartConfiguration {
    /// <p>The field wells of the visual.</p>
    pub field_wells: ::std::option::Option<crate::types::PieChartFieldWells>,
    /// <p>The sort configuration of a pie chart.</p>
    pub sort_configuration: ::std::option::Option<crate::types::PieChartSortConfiguration>,
    /// <p>The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.</p>
    pub donut_options: ::std::option::Option<crate::types::DonutOptions>,
    /// <p>The small multiples setup for the visual.</p>
    pub small_multiples_options: ::std::option::Option<crate::types::SmallMultiplesOptions>,
    /// <p>The label options of the group/color that is displayed in a pie chart.</p>
    pub category_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The label options for the value that is displayed in a pie chart.</p>
    pub value_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    /// <p>The legend display setup of the visual.</p>
    pub legend: ::std::option::Option<crate::types::LegendOptions>,
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub data_labels: ::std::option::Option<crate::types::DataLabelOptions>,
    /// <p>The tooltip display setup of the visual.</p>
    pub tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub visual_palette: ::std::option::Option<crate::types::VisualPalette>,
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub contribution_analysis_defaults: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
}
impl PieChartConfiguration {
    /// <p>The field wells of the visual.</p>
    pub fn field_wells(&self) -> ::std::option::Option<&crate::types::PieChartFieldWells> {
        self.field_wells.as_ref()
    }
    /// <p>The sort configuration of a pie chart.</p>
    pub fn sort_configuration(&self) -> ::std::option::Option<&crate::types::PieChartSortConfiguration> {
        self.sort_configuration.as_ref()
    }
    /// <p>The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.</p>
    pub fn donut_options(&self) -> ::std::option::Option<&crate::types::DonutOptions> {
        self.donut_options.as_ref()
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn small_multiples_options(&self) -> ::std::option::Option<&crate::types::SmallMultiplesOptions> {
        self.small_multiples_options.as_ref()
    }
    /// <p>The label options of the group/color that is displayed in a pie chart.</p>
    pub fn category_label_options(&self) -> ::std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.category_label_options.as_ref()
    }
    /// <p>The label options for the value that is displayed in a pie chart.</p>
    pub fn value_label_options(&self) -> ::std::option::Option<&crate::types::ChartAxisLabelOptions> {
        self.value_label_options.as_ref()
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn legend(&self) -> ::std::option::Option<&crate::types::LegendOptions> {
        self.legend.as_ref()
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn data_labels(&self) -> ::std::option::Option<&crate::types::DataLabelOptions> {
        self.data_labels.as_ref()
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn tooltip(&self) -> ::std::option::Option<&crate::types::TooltipOptions> {
        self.tooltip.as_ref()
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn visual_palette(&self) -> ::std::option::Option<&crate::types::VisualPalette> {
        self.visual_palette.as_ref()
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contribution_analysis_defaults.is_none()`.
    pub fn contribution_analysis_defaults(&self) -> &[crate::types::ContributionAnalysisDefault] {
        self.contribution_analysis_defaults.as_deref().unwrap_or_default()
    }
}
impl PieChartConfiguration {
    /// Creates a new builder-style object to manufacture [`PieChartConfiguration`](crate::types::PieChartConfiguration).
    pub fn builder() -> crate::types::builders::PieChartConfigurationBuilder {
        crate::types::builders::PieChartConfigurationBuilder::default()
    }
}

/// A builder for [`PieChartConfiguration`](crate::types::PieChartConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PieChartConfigurationBuilder {
    pub(crate) field_wells: ::std::option::Option<crate::types::PieChartFieldWells>,
    pub(crate) sort_configuration: ::std::option::Option<crate::types::PieChartSortConfiguration>,
    pub(crate) donut_options: ::std::option::Option<crate::types::DonutOptions>,
    pub(crate) small_multiples_options: ::std::option::Option<crate::types::SmallMultiplesOptions>,
    pub(crate) category_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) value_label_options: ::std::option::Option<crate::types::ChartAxisLabelOptions>,
    pub(crate) legend: ::std::option::Option<crate::types::LegendOptions>,
    pub(crate) data_labels: ::std::option::Option<crate::types::DataLabelOptions>,
    pub(crate) tooltip: ::std::option::Option<crate::types::TooltipOptions>,
    pub(crate) visual_palette: ::std::option::Option<crate::types::VisualPalette>,
    pub(crate) contribution_analysis_defaults: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
}
impl PieChartConfigurationBuilder {
    /// <p>The field wells of the visual.</p>
    pub fn field_wells(mut self, input: crate::types::PieChartFieldWells) -> Self {
        self.field_wells = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field wells of the visual.</p>
    pub fn set_field_wells(mut self, input: ::std::option::Option<crate::types::PieChartFieldWells>) -> Self {
        self.field_wells = input;
        self
    }
    /// <p>The field wells of the visual.</p>
    pub fn get_field_wells(&self) -> &::std::option::Option<crate::types::PieChartFieldWells> {
        &self.field_wells
    }
    /// <p>The sort configuration of a pie chart.</p>
    pub fn sort_configuration(mut self, input: crate::types::PieChartSortConfiguration) -> Self {
        self.sort_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort configuration of a pie chart.</p>
    pub fn set_sort_configuration(mut self, input: ::std::option::Option<crate::types::PieChartSortConfiguration>) -> Self {
        self.sort_configuration = input;
        self
    }
    /// <p>The sort configuration of a pie chart.</p>
    pub fn get_sort_configuration(&self) -> &::std::option::Option<crate::types::PieChartSortConfiguration> {
        &self.sort_configuration
    }
    /// <p>The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.</p>
    pub fn donut_options(mut self, input: crate::types::DonutOptions) -> Self {
        self.donut_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.</p>
    pub fn set_donut_options(mut self, input: ::std::option::Option<crate::types::DonutOptions>) -> Self {
        self.donut_options = input;
        self
    }
    /// <p>The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.</p>
    pub fn get_donut_options(&self) -> &::std::option::Option<crate::types::DonutOptions> {
        &self.donut_options
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn small_multiples_options(mut self, input: crate::types::SmallMultiplesOptions) -> Self {
        self.small_multiples_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn set_small_multiples_options(mut self, input: ::std::option::Option<crate::types::SmallMultiplesOptions>) -> Self {
        self.small_multiples_options = input;
        self
    }
    /// <p>The small multiples setup for the visual.</p>
    pub fn get_small_multiples_options(&self) -> &::std::option::Option<crate::types::SmallMultiplesOptions> {
        &self.small_multiples_options
    }
    /// <p>The label options of the group/color that is displayed in a pie chart.</p>
    pub fn category_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.category_label_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label options of the group/color that is displayed in a pie chart.</p>
    pub fn set_category_label_options(mut self, input: ::std::option::Option<crate::types::ChartAxisLabelOptions>) -> Self {
        self.category_label_options = input;
        self
    }
    /// <p>The label options of the group/color that is displayed in a pie chart.</p>
    pub fn get_category_label_options(&self) -> &::std::option::Option<crate::types::ChartAxisLabelOptions> {
        &self.category_label_options
    }
    /// <p>The label options for the value that is displayed in a pie chart.</p>
    pub fn value_label_options(mut self, input: crate::types::ChartAxisLabelOptions) -> Self {
        self.value_label_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The label options for the value that is displayed in a pie chart.</p>
    pub fn set_value_label_options(mut self, input: ::std::option::Option<crate::types::ChartAxisLabelOptions>) -> Self {
        self.value_label_options = input;
        self
    }
    /// <p>The label options for the value that is displayed in a pie chart.</p>
    pub fn get_value_label_options(&self) -> &::std::option::Option<crate::types::ChartAxisLabelOptions> {
        &self.value_label_options
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn legend(mut self, input: crate::types::LegendOptions) -> Self {
        self.legend = ::std::option::Option::Some(input);
        self
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn set_legend(mut self, input: ::std::option::Option<crate::types::LegendOptions>) -> Self {
        self.legend = input;
        self
    }
    /// <p>The legend display setup of the visual.</p>
    pub fn get_legend(&self) -> &::std::option::Option<crate::types::LegendOptions> {
        &self.legend
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn data_labels(mut self, input: crate::types::DataLabelOptions) -> Self {
        self.data_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn set_data_labels(mut self, input: ::std::option::Option<crate::types::DataLabelOptions>) -> Self {
        self.data_labels = input;
        self
    }
    /// <p>The options that determine if visual data labels are displayed.</p>
    pub fn get_data_labels(&self) -> &::std::option::Option<crate::types::DataLabelOptions> {
        &self.data_labels
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn tooltip(mut self, input: crate::types::TooltipOptions) -> Self {
        self.tooltip = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn set_tooltip(mut self, input: ::std::option::Option<crate::types::TooltipOptions>) -> Self {
        self.tooltip = input;
        self
    }
    /// <p>The tooltip display setup of the visual.</p>
    pub fn get_tooltip(&self) -> &::std::option::Option<crate::types::TooltipOptions> {
        &self.tooltip
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn visual_palette(mut self, input: crate::types::VisualPalette) -> Self {
        self.visual_palette = ::std::option::Option::Some(input);
        self
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn set_visual_palette(mut self, input: ::std::option::Option<crate::types::VisualPalette>) -> Self {
        self.visual_palette = input;
        self
    }
    /// <p>The palette (chart color) display setup of the visual.</p>
    pub fn get_visual_palette(&self) -> &::std::option::Option<crate::types::VisualPalette> {
        &self.visual_palette
    }
    /// Appends an item to `contribution_analysis_defaults`.
    ///
    /// To override the contents of this collection use [`set_contribution_analysis_defaults`](Self::set_contribution_analysis_defaults).
    ///
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn contribution_analysis_defaults(mut self, input: crate::types::ContributionAnalysisDefault) -> Self {
        let mut v = self.contribution_analysis_defaults.unwrap_or_default();
        v.push(input);
        self.contribution_analysis_defaults = ::std::option::Option::Some(v);
        self
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn set_contribution_analysis_defaults(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>>,
    ) -> Self {
        self.contribution_analysis_defaults = input;
        self
    }
    /// <p>The contribution analysis (anomaly configuration) setup of the visual.</p>
    pub fn get_contribution_analysis_defaults(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContributionAnalysisDefault>> {
        &self.contribution_analysis_defaults
    }
    /// Consumes the builder and constructs a [`PieChartConfiguration`](crate::types::PieChartConfiguration).
    pub fn build(self) -> crate::types::PieChartConfiguration {
        crate::types::PieChartConfiguration {
            field_wells: self.field_wells,
            sort_configuration: self.sort_configuration,
            donut_options: self.donut_options,
            small_multiples_options: self.small_multiples_options,
            category_label_options: self.category_label_options,
            value_label_options: self.value_label_options,
            legend: self.legend,
            data_labels: self.data_labels,
            tooltip: self.tooltip,
            visual_palette: self.visual_palette,
            contribution_analysis_defaults: self.contribution_analysis_defaults,
        }
    }
}
