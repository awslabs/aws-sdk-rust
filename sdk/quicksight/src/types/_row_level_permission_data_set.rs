// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p>
/// <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RowLevelPermissionDataSet {
    /// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code> is included for backward compatibility only.</p>
    #[doc(hidden)]
    pub permission_policy: std::option::Option<crate::types::RowLevelPermissionPolicy>,
    /// <p>The user or group rules associated with the dataset that contains permissions for RLS.</p>
    /// <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>
    #[doc(hidden)]
    pub format_version: std::option::Option<crate::types::RowLevelPermissionFormatVersion>,
    /// <p>The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
}
impl RowLevelPermissionDataSet {
    /// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code> is included for backward compatibility only.</p>
    pub fn permission_policy(
        &self,
    ) -> std::option::Option<&crate::types::RowLevelPermissionPolicy> {
        self.permission_policy.as_ref()
    }
    /// <p>The user or group rules associated with the dataset that contains permissions for RLS.</p>
    /// <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>
    pub fn format_version(
        &self,
    ) -> std::option::Option<&crate::types::RowLevelPermissionFormatVersion> {
        self.format_version.as_ref()
    }
    /// <p>The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
}
impl RowLevelPermissionDataSet {
    /// Creates a new builder-style object to manufacture [`RowLevelPermissionDataSet`](crate::types::RowLevelPermissionDataSet).
    pub fn builder() -> crate::types::builders::RowLevelPermissionDataSetBuilder {
        crate::types::builders::RowLevelPermissionDataSetBuilder::default()
    }
}

/// A builder for [`RowLevelPermissionDataSet`](crate::types::RowLevelPermissionDataSet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RowLevelPermissionDataSetBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) permission_policy: std::option::Option<crate::types::RowLevelPermissionPolicy>,
    pub(crate) format_version: std::option::Option<crate::types::RowLevelPermissionFormatVersion>,
    pub(crate) status: std::option::Option<crate::types::Status>,
}
impl RowLevelPermissionDataSetBuilder {
    /// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code> is included for backward compatibility only.</p>
    pub fn permission_policy(mut self, input: crate::types::RowLevelPermissionPolicy) -> Self {
        self.permission_policy = Some(input);
        self
    }
    /// <p>The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code> is included for backward compatibility only.</p>
    pub fn set_permission_policy(
        mut self,
        input: std::option::Option<crate::types::RowLevelPermissionPolicy>,
    ) -> Self {
        self.permission_policy = input;
        self
    }
    /// <p>The user or group rules associated with the dataset that contains permissions for RLS.</p>
    /// <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>
    pub fn format_version(mut self, input: crate::types::RowLevelPermissionFormatVersion) -> Self {
        self.format_version = Some(input);
        self
    }
    /// <p>The user or group rules associated with the dataset that contains permissions for RLS.</p>
    /// <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>
    pub fn set_format_version(
        mut self,
        input: std::option::Option<crate::types::RowLevelPermissionFormatVersion>,
    ) -> Self {
        self.format_version = input;
        self
    }
    /// <p>The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`RowLevelPermissionDataSet`](crate::types::RowLevelPermissionDataSet).
    pub fn build(self) -> crate::types::RowLevelPermissionDataSet {
        crate::types::RowLevelPermissionDataSet {
            namespace: self.namespace,
            arn: self.arn,
            permission_policy: self.permission_policy,
            format_version: self.format_version,
            status: self.status,
        }
    }
}
