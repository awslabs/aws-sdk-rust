// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information that identifies the snapshot that needs to be generated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnapshotFileSheetSelection {
    /// <p>The sheet ID of the dashboard to generate the snapshot artifact from. This value is required for CSV, Excel, and PDF format types.</p>
    pub sheet_id: ::std::string::String,
    /// <p>The selection scope of the visuals on a sheet of a dashboard that you are generating a snapthot of. You can choose one of the following options.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> - Selects all visuals that are on the sheet. This value is required if the snapshot is a PDF.</p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> - Select the visual that you want to add to the snapshot. This value is required if the snapshot is a CSV or Excel workbook.</p> </li>
    /// </ul>
    pub selection_scope: crate::types::SnapshotFileSheetSelectionScope,
    /// <p> A structure that lists the IDs of the visuals in the selected sheet. Supported visual types are table, pivot table visuals. This value is required if you are generating a CSV or Excel workbook. This value supports a maximum of 1 visual ID for CSV and 5 visual IDs across up to 5 sheet selections for Excel. If you are generating an Excel workbook, the order of the visual IDs provided in this structure determines the order of the worksheets in the Excel file. </p>
    pub visual_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SnapshotFileSheetSelection {
    /// <p>The sheet ID of the dashboard to generate the snapshot artifact from. This value is required for CSV, Excel, and PDF format types.</p>
    pub fn sheet_id(&self) -> &str {
        use std::ops::Deref;
        self.sheet_id.deref()
    }
    /// <p>The selection scope of the visuals on a sheet of a dashboard that you are generating a snapthot of. You can choose one of the following options.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> - Selects all visuals that are on the sheet. This value is required if the snapshot is a PDF.</p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> - Select the visual that you want to add to the snapshot. This value is required if the snapshot is a CSV or Excel workbook.</p> </li>
    /// </ul>
    pub fn selection_scope(&self) -> &crate::types::SnapshotFileSheetSelectionScope {
        &self.selection_scope
    }
    /// <p> A structure that lists the IDs of the visuals in the selected sheet. Supported visual types are table, pivot table visuals. This value is required if you are generating a CSV or Excel workbook. This value supports a maximum of 1 visual ID for CSV and 5 visual IDs across up to 5 sheet selections for Excel. If you are generating an Excel workbook, the order of the visual IDs provided in this structure determines the order of the worksheets in the Excel file. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.visual_ids.is_none()`.
    pub fn visual_ids(&self) -> &[::std::string::String] {
        self.visual_ids.as_deref().unwrap_or_default()
    }
}
impl SnapshotFileSheetSelection {
    /// Creates a new builder-style object to manufacture [`SnapshotFileSheetSelection`](crate::types::SnapshotFileSheetSelection).
    pub fn builder() -> crate::types::builders::SnapshotFileSheetSelectionBuilder {
        crate::types::builders::SnapshotFileSheetSelectionBuilder::default()
    }
}

/// A builder for [`SnapshotFileSheetSelection`](crate::types::SnapshotFileSheetSelection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnapshotFileSheetSelectionBuilder {
    pub(crate) sheet_id: ::std::option::Option<::std::string::String>,
    pub(crate) selection_scope: ::std::option::Option<crate::types::SnapshotFileSheetSelectionScope>,
    pub(crate) visual_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SnapshotFileSheetSelectionBuilder {
    /// <p>The sheet ID of the dashboard to generate the snapshot artifact from. This value is required for CSV, Excel, and PDF format types.</p>
    /// This field is required.
    pub fn sheet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sheet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sheet ID of the dashboard to generate the snapshot artifact from. This value is required for CSV, Excel, and PDF format types.</p>
    pub fn set_sheet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sheet_id = input;
        self
    }
    /// <p>The sheet ID of the dashboard to generate the snapshot artifact from. This value is required for CSV, Excel, and PDF format types.</p>
    pub fn get_sheet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sheet_id
    }
    /// <p>The selection scope of the visuals on a sheet of a dashboard that you are generating a snapthot of. You can choose one of the following options.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> - Selects all visuals that are on the sheet. This value is required if the snapshot is a PDF.</p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> - Select the visual that you want to add to the snapshot. This value is required if the snapshot is a CSV or Excel workbook.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn selection_scope(mut self, input: crate::types::SnapshotFileSheetSelectionScope) -> Self {
        self.selection_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selection scope of the visuals on a sheet of a dashboard that you are generating a snapthot of. You can choose one of the following options.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> - Selects all visuals that are on the sheet. This value is required if the snapshot is a PDF.</p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> - Select the visual that you want to add to the snapshot. This value is required if the snapshot is a CSV or Excel workbook.</p> </li>
    /// </ul>
    pub fn set_selection_scope(mut self, input: ::std::option::Option<crate::types::SnapshotFileSheetSelectionScope>) -> Self {
        self.selection_scope = input;
        self
    }
    /// <p>The selection scope of the visuals on a sheet of a dashboard that you are generating a snapthot of. You can choose one of the following options.</p>
    /// <ul>
    /// <li> <p> <code>ALL_VISUALS</code> - Selects all visuals that are on the sheet. This value is required if the snapshot is a PDF.</p> </li>
    /// <li> <p> <code>SELECTED_VISUALS</code> - Select the visual that you want to add to the snapshot. This value is required if the snapshot is a CSV or Excel workbook.</p> </li>
    /// </ul>
    pub fn get_selection_scope(&self) -> &::std::option::Option<crate::types::SnapshotFileSheetSelectionScope> {
        &self.selection_scope
    }
    /// Appends an item to `visual_ids`.
    ///
    /// To override the contents of this collection use [`set_visual_ids`](Self::set_visual_ids).
    ///
    /// <p> A structure that lists the IDs of the visuals in the selected sheet. Supported visual types are table, pivot table visuals. This value is required if you are generating a CSV or Excel workbook. This value supports a maximum of 1 visual ID for CSV and 5 visual IDs across up to 5 sheet selections for Excel. If you are generating an Excel workbook, the order of the visual IDs provided in this structure determines the order of the worksheets in the Excel file. </p>
    pub fn visual_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.visual_ids.unwrap_or_default();
        v.push(input.into());
        self.visual_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p> A structure that lists the IDs of the visuals in the selected sheet. Supported visual types are table, pivot table visuals. This value is required if you are generating a CSV or Excel workbook. This value supports a maximum of 1 visual ID for CSV and 5 visual IDs across up to 5 sheet selections for Excel. If you are generating an Excel workbook, the order of the visual IDs provided in this structure determines the order of the worksheets in the Excel file. </p>
    pub fn set_visual_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.visual_ids = input;
        self
    }
    /// <p> A structure that lists the IDs of the visuals in the selected sheet. Supported visual types are table, pivot table visuals. This value is required if you are generating a CSV or Excel workbook. This value supports a maximum of 1 visual ID for CSV and 5 visual IDs across up to 5 sheet selections for Excel. If you are generating an Excel workbook, the order of the visual IDs provided in this structure determines the order of the worksheets in the Excel file. </p>
    pub fn get_visual_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.visual_ids
    }
    /// Consumes the builder and constructs a [`SnapshotFileSheetSelection`](crate::types::SnapshotFileSheetSelection).
    /// This method will fail if any of the following fields are not set:
    /// - [`sheet_id`](crate::types::builders::SnapshotFileSheetSelectionBuilder::sheet_id)
    /// - [`selection_scope`](crate::types::builders::SnapshotFileSheetSelectionBuilder::selection_scope)
    pub fn build(self) -> ::std::result::Result<crate::types::SnapshotFileSheetSelection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SnapshotFileSheetSelection {
            sheet_id: self.sheet_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sheet_id",
                    "sheet_id was not specified but it is required when building SnapshotFileSheetSelection",
                )
            })?,
            selection_scope: self.selection_scope.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "selection_scope",
                    "selection_scope was not specified but it is required when building SnapshotFileSheetSelection",
                )
            })?,
            visual_ids: self.visual_ids,
        })
    }
}
