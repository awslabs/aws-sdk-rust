// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of adding parameters in action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SetParameterValueConfiguration {
    /// <p>The destination parameter name of the <code>SetParameterValueConfiguration</code>.</p>
    #[doc(hidden)]
    pub destination_parameter_name: std::option::Option<std::string::String>,
    /// <p>The configuration of destination parameter values.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::DestinationParameterValueConfiguration>,
}
impl SetParameterValueConfiguration {
    /// <p>The destination parameter name of the <code>SetParameterValueConfiguration</code>.</p>
    pub fn destination_parameter_name(&self) -> std::option::Option<&str> {
        self.destination_parameter_name.as_deref()
    }
    /// <p>The configuration of destination parameter values.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn value(
        &self,
    ) -> std::option::Option<&crate::types::DestinationParameterValueConfiguration> {
        self.value.as_ref()
    }
}
impl SetParameterValueConfiguration {
    /// Creates a new builder-style object to manufacture [`SetParameterValueConfiguration`](crate::types::SetParameterValueConfiguration).
    pub fn builder() -> crate::types::builders::SetParameterValueConfigurationBuilder {
        crate::types::builders::SetParameterValueConfigurationBuilder::default()
    }
}

/// A builder for [`SetParameterValueConfiguration`](crate::types::SetParameterValueConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SetParameterValueConfigurationBuilder {
    pub(crate) destination_parameter_name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<crate::types::DestinationParameterValueConfiguration>,
}
impl SetParameterValueConfigurationBuilder {
    /// <p>The destination parameter name of the <code>SetParameterValueConfiguration</code>.</p>
    pub fn destination_parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_parameter_name = Some(input.into());
        self
    }
    /// <p>The destination parameter name of the <code>SetParameterValueConfiguration</code>.</p>
    pub fn set_destination_parameter_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_parameter_name = input;
        self
    }
    /// <p>The configuration of destination parameter values.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn value(mut self, input: crate::types::DestinationParameterValueConfiguration) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The configuration of destination parameter values.</p>
    /// <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::DestinationParameterValueConfiguration>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`SetParameterValueConfiguration`](crate::types::SetParameterValueConfiguration).
    pub fn build(self) -> crate::types::SetParameterValueConfiguration {
        crate::types::SetParameterValueConfiguration {
            destination_parameter_name: self.destination_parameter_name,
            value: self.value,
        }
    }
}
