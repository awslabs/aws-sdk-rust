// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A transform operation that casts a column to a different type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CastColumnTypeOperation {
    /// <p>Column name.</p>
    pub column_name: ::std::string::String,
    /// <p>New column data type.</p>
    pub new_column_type: crate::types::ColumnDataType,
    /// <p>When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.</p>
    pub format: ::std::option::Option<::std::string::String>,
}
impl CastColumnTypeOperation {
    /// <p>Column name.</p>
    pub fn column_name(&self) -> &str {
        use std::ops::Deref;
        self.column_name.deref()
    }
    /// <p>New column data type.</p>
    pub fn new_column_type(&self) -> &crate::types::ColumnDataType {
        &self.new_column_type
    }
    /// <p>When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.</p>
    pub fn format(&self) -> ::std::option::Option<&str> {
        self.format.as_deref()
    }
}
impl CastColumnTypeOperation {
    /// Creates a new builder-style object to manufacture [`CastColumnTypeOperation`](crate::types::CastColumnTypeOperation).
    pub fn builder() -> crate::types::builders::CastColumnTypeOperationBuilder {
        crate::types::builders::CastColumnTypeOperationBuilder::default()
    }
}

/// A builder for [`CastColumnTypeOperation`](crate::types::CastColumnTypeOperation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CastColumnTypeOperationBuilder {
    pub(crate) column_name: ::std::option::Option<::std::string::String>,
    pub(crate) new_column_type: ::std::option::Option<crate::types::ColumnDataType>,
    pub(crate) format: ::std::option::Option<::std::string::String>,
}
impl CastColumnTypeOperationBuilder {
    /// <p>Column name.</p>
    /// This field is required.
    pub fn column_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Column name.</p>
    pub fn set_column_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>Column name.</p>
    pub fn get_column_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_name
    }
    /// <p>New column data type.</p>
    /// This field is required.
    pub fn new_column_type(mut self, input: crate::types::ColumnDataType) -> Self {
        self.new_column_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>New column data type.</p>
    pub fn set_new_column_type(mut self, input: ::std::option::Option<crate::types::ColumnDataType>) -> Self {
        self.new_column_type = input;
        self
    }
    /// <p>New column data type.</p>
    pub fn get_new_column_type(&self) -> &::std::option::Option<crate::types::ColumnDataType> {
        &self.new_column_type
    }
    /// <p>When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.</p>
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// Consumes the builder and constructs a [`CastColumnTypeOperation`](crate::types::CastColumnTypeOperation).
    /// This method will fail if any of the following fields are not set:
    /// - [`column_name`](crate::types::builders::CastColumnTypeOperationBuilder::column_name)
    /// - [`new_column_type`](crate::types::builders::CastColumnTypeOperationBuilder::new_column_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CastColumnTypeOperation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CastColumnTypeOperation {
            column_name: self.column_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column_name",
                    "column_name was not specified but it is required when building CastColumnTypeOperation",
                )
            })?,
            new_column_type: self.new_column_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "new_column_type",
                    "new_column_type was not specified but it is required when building CastColumnTypeOperation",
                )
            })?,
            format: self.format,
        })
    }
}
