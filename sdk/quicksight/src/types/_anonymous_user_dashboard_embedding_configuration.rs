// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the dashboard that you want to embed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnonymousUserDashboardEmbeddingConfiguration {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
    /// <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
    pub initial_dashboard_id: ::std::string::String,
}
impl AnonymousUserDashboardEmbeddingConfiguration {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
    /// <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
    pub fn initial_dashboard_id(&self) -> &str {
        use std::ops::Deref;
        self.initial_dashboard_id.deref()
    }
}
impl AnonymousUserDashboardEmbeddingConfiguration {
    /// Creates a new builder-style object to manufacture [`AnonymousUserDashboardEmbeddingConfiguration`](crate::types::AnonymousUserDashboardEmbeddingConfiguration).
    pub fn builder() -> crate::types::builders::AnonymousUserDashboardEmbeddingConfigurationBuilder {
        crate::types::builders::AnonymousUserDashboardEmbeddingConfigurationBuilder::default()
    }
}

/// A builder for [`AnonymousUserDashboardEmbeddingConfiguration`](crate::types::AnonymousUserDashboardEmbeddingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnonymousUserDashboardEmbeddingConfigurationBuilder {
    pub(crate) initial_dashboard_id: ::std::option::Option<::std::string::String>,
}
impl AnonymousUserDashboardEmbeddingConfigurationBuilder {
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
    /// <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
    /// This field is required.
    pub fn initial_dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initial_dashboard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
    /// <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
    pub fn set_initial_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initial_dashboard_id = input;
        self
    }
    /// <p>The dashboard ID for the dashboard that you want the user to see first. This ID is included in the output URL. When the URL in response is accessed, Amazon QuickSight renders this dashboard.</p>
    /// <p>The Amazon Resource Name (ARN) of this dashboard must be included in the <code>AuthorizedResourceArns</code> parameter. Otherwise, the request will fail with <code>InvalidParameterValueException</code>.</p>
    pub fn get_initial_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.initial_dashboard_id
    }
    /// Consumes the builder and constructs a [`AnonymousUserDashboardEmbeddingConfiguration`](crate::types::AnonymousUserDashboardEmbeddingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`initial_dashboard_id`](crate::types::builders::AnonymousUserDashboardEmbeddingConfigurationBuilder::initial_dashboard_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AnonymousUserDashboardEmbeddingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnonymousUserDashboardEmbeddingConfiguration {
            initial_dashboard_id: self.initial_dashboard_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "initial_dashboard_id",
                    "initial_dashboard_id was not specified but it is required when building AnonymousUserDashboardEmbeddingConfiguration",
                )
            })?,
        })
    }
}
