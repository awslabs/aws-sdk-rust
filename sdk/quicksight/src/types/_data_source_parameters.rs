// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum DataSourceParameters {
    /// <p>The parameters for OpenSearch.</p>
    AmazonElasticsearchParameters(crate::types::AmazonElasticsearchParameters),
    /// <p>The parameters for OpenSearch.</p>
    AmazonOpenSearchParameters(crate::types::AmazonOpenSearchParameters),
    /// <p>The parameters for Amazon Athena.</p>
    AthenaParameters(crate::types::AthenaParameters),
    /// <p>The parameters for Amazon Aurora MySQL.</p>
    AuroraParameters(crate::types::AuroraParameters),
    /// <p>The parameters for Amazon Aurora.</p>
    AuroraPostgreSqlParameters(crate::types::AuroraPostgreSqlParameters),
    /// <p>The parameters for IoT Analytics.</p>
    AwsIotAnalyticsParameters(crate::types::AwsIotAnalyticsParameters),
    /// <p>The required parameters that are needed to connect to a Databricks data source.</p>
    DatabricksParameters(crate::types::DatabricksParameters),
    /// <p>The parameters for Exasol.</p>
    ExasolParameters(crate::types::ExasolParameters),
    /// <p>The parameters for Jira.</p>
    JiraParameters(crate::types::JiraParameters),
    /// <p>The parameters for MariaDB.</p>
    MariaDbParameters(crate::types::MariaDbParameters),
    /// <p>The parameters for MySQL.</p>
    MySqlParameters(crate::types::MySqlParameters),
    /// <p>The parameters for Oracle.</p>
    OracleParameters(crate::types::OracleParameters),
    /// <p>The parameters for PostgreSQL.</p>
    PostgreSqlParameters(crate::types::PostgreSqlParameters),
    /// <p>The parameters for Presto.</p>
    PrestoParameters(crate::types::PrestoParameters),
    /// <p>The parameters for Amazon RDS.</p>
    RdsParameters(crate::types::RdsParameters),
    /// <p>The parameters for Amazon Redshift.</p>
    RedshiftParameters(crate::types::RedshiftParameters),
    /// <p>The parameters for S3.</p>
    S3Parameters(crate::types::S3Parameters),
    /// <p>The parameters for ServiceNow.</p>
    ServiceNowParameters(crate::types::ServiceNowParameters),
    /// <p>The parameters for Snowflake.</p>
    SnowflakeParameters(crate::types::SnowflakeParameters),
    /// <p>The parameters for Spark.</p>
    SparkParameters(crate::types::SparkParameters),
    /// <p>The parameters for SQL Server.</p>
    SqlServerParameters(crate::types::SqlServerParameters),
    /// <p>The parameters for Teradata.</p>
    TeradataParameters(crate::types::TeradataParameters),
    /// <p>The parameters for Twitter.</p>
    TwitterParameters(crate::types::TwitterParameters),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DataSourceParameters {
    /// Tries to convert the enum instance into [`AmazonElasticsearchParameters`](crate::types::DataSourceParameters::AmazonElasticsearchParameters), extracting the inner [`AmazonElasticsearchParameters`](crate::types::AmazonElasticsearchParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_amazon_elasticsearch_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AmazonElasticsearchParameters, &Self> {
        if let DataSourceParameters::AmazonElasticsearchParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AmazonElasticsearchParameters`](crate::types::DataSourceParameters::AmazonElasticsearchParameters).
    pub fn is_amazon_elasticsearch_parameters(&self) -> bool {
        self.as_amazon_elasticsearch_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`AmazonOpenSearchParameters`](crate::types::DataSourceParameters::AmazonOpenSearchParameters), extracting the inner [`AmazonOpenSearchParameters`](crate::types::AmazonOpenSearchParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_amazon_open_search_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AmazonOpenSearchParameters, &Self> {
        if let DataSourceParameters::AmazonOpenSearchParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AmazonOpenSearchParameters`](crate::types::DataSourceParameters::AmazonOpenSearchParameters).
    pub fn is_amazon_open_search_parameters(&self) -> bool {
        self.as_amazon_open_search_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`AthenaParameters`](crate::types::DataSourceParameters::AthenaParameters), extracting the inner [`AthenaParameters`](crate::types::AthenaParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_athena_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AthenaParameters, &Self> {
        if let DataSourceParameters::AthenaParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AthenaParameters`](crate::types::DataSourceParameters::AthenaParameters).
    pub fn is_athena_parameters(&self) -> bool {
        self.as_athena_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`AuroraParameters`](crate::types::DataSourceParameters::AuroraParameters), extracting the inner [`AuroraParameters`](crate::types::AuroraParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aurora_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AuroraParameters, &Self> {
        if let DataSourceParameters::AuroraParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AuroraParameters`](crate::types::DataSourceParameters::AuroraParameters).
    pub fn is_aurora_parameters(&self) -> bool {
        self.as_aurora_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`AuroraPostgreSqlParameters`](crate::types::DataSourceParameters::AuroraPostgreSqlParameters), extracting the inner [`AuroraPostgreSqlParameters`](crate::types::AuroraPostgreSqlParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aurora_postgre_sql_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AuroraPostgreSqlParameters, &Self> {
        if let DataSourceParameters::AuroraPostgreSqlParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AuroraPostgreSqlParameters`](crate::types::DataSourceParameters::AuroraPostgreSqlParameters).
    pub fn is_aurora_postgre_sql_parameters(&self) -> bool {
        self.as_aurora_postgre_sql_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`AwsIotAnalyticsParameters`](crate::types::DataSourceParameters::AwsIotAnalyticsParameters), extracting the inner [`AwsIotAnalyticsParameters`](crate::types::AwsIotAnalyticsParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aws_iot_analytics_parameters(
        &self,
    ) -> std::result::Result<&crate::types::AwsIotAnalyticsParameters, &Self> {
        if let DataSourceParameters::AwsIotAnalyticsParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AwsIotAnalyticsParameters`](crate::types::DataSourceParameters::AwsIotAnalyticsParameters).
    pub fn is_aws_iot_analytics_parameters(&self) -> bool {
        self.as_aws_iot_analytics_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`DatabricksParameters`](crate::types::DataSourceParameters::DatabricksParameters), extracting the inner [`DatabricksParameters`](crate::types::DatabricksParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_databricks_parameters(
        &self,
    ) -> std::result::Result<&crate::types::DatabricksParameters, &Self> {
        if let DataSourceParameters::DatabricksParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`DatabricksParameters`](crate::types::DataSourceParameters::DatabricksParameters).
    pub fn is_databricks_parameters(&self) -> bool {
        self.as_databricks_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`ExasolParameters`](crate::types::DataSourceParameters::ExasolParameters), extracting the inner [`ExasolParameters`](crate::types::ExasolParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_exasol_parameters(
        &self,
    ) -> std::result::Result<&crate::types::ExasolParameters, &Self> {
        if let DataSourceParameters::ExasolParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ExasolParameters`](crate::types::DataSourceParameters::ExasolParameters).
    pub fn is_exasol_parameters(&self) -> bool {
        self.as_exasol_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`JiraParameters`](crate::types::DataSourceParameters::JiraParameters), extracting the inner [`JiraParameters`](crate::types::JiraParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_jira_parameters(&self) -> std::result::Result<&crate::types::JiraParameters, &Self> {
        if let DataSourceParameters::JiraParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`JiraParameters`](crate::types::DataSourceParameters::JiraParameters).
    pub fn is_jira_parameters(&self) -> bool {
        self.as_jira_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`MariaDbParameters`](crate::types::DataSourceParameters::MariaDbParameters), extracting the inner [`MariaDbParameters`](crate::types::MariaDbParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_maria_db_parameters(
        &self,
    ) -> std::result::Result<&crate::types::MariaDbParameters, &Self> {
        if let DataSourceParameters::MariaDbParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`MariaDbParameters`](crate::types::DataSourceParameters::MariaDbParameters).
    pub fn is_maria_db_parameters(&self) -> bool {
        self.as_maria_db_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`MySqlParameters`](crate::types::DataSourceParameters::MySqlParameters), extracting the inner [`MySqlParameters`](crate::types::MySqlParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_my_sql_parameters(
        &self,
    ) -> std::result::Result<&crate::types::MySqlParameters, &Self> {
        if let DataSourceParameters::MySqlParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`MySqlParameters`](crate::types::DataSourceParameters::MySqlParameters).
    pub fn is_my_sql_parameters(&self) -> bool {
        self.as_my_sql_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`OracleParameters`](crate::types::DataSourceParameters::OracleParameters), extracting the inner [`OracleParameters`](crate::types::OracleParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_oracle_parameters(
        &self,
    ) -> std::result::Result<&crate::types::OracleParameters, &Self> {
        if let DataSourceParameters::OracleParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`OracleParameters`](crate::types::DataSourceParameters::OracleParameters).
    pub fn is_oracle_parameters(&self) -> bool {
        self.as_oracle_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`PostgreSqlParameters`](crate::types::DataSourceParameters::PostgreSqlParameters), extracting the inner [`PostgreSqlParameters`](crate::types::PostgreSqlParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_postgre_sql_parameters(
        &self,
    ) -> std::result::Result<&crate::types::PostgreSqlParameters, &Self> {
        if let DataSourceParameters::PostgreSqlParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`PostgreSqlParameters`](crate::types::DataSourceParameters::PostgreSqlParameters).
    pub fn is_postgre_sql_parameters(&self) -> bool {
        self.as_postgre_sql_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`PrestoParameters`](crate::types::DataSourceParameters::PrestoParameters), extracting the inner [`PrestoParameters`](crate::types::PrestoParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_presto_parameters(
        &self,
    ) -> std::result::Result<&crate::types::PrestoParameters, &Self> {
        if let DataSourceParameters::PrestoParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`PrestoParameters`](crate::types::DataSourceParameters::PrestoParameters).
    pub fn is_presto_parameters(&self) -> bool {
        self.as_presto_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`RdsParameters`](crate::types::DataSourceParameters::RdsParameters), extracting the inner [`RdsParameters`](crate::types::RdsParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_rds_parameters(&self) -> std::result::Result<&crate::types::RdsParameters, &Self> {
        if let DataSourceParameters::RdsParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`RdsParameters`](crate::types::DataSourceParameters::RdsParameters).
    pub fn is_rds_parameters(&self) -> bool {
        self.as_rds_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`RedshiftParameters`](crate::types::DataSourceParameters::RedshiftParameters), extracting the inner [`RedshiftParameters`](crate::types::RedshiftParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_redshift_parameters(
        &self,
    ) -> std::result::Result<&crate::types::RedshiftParameters, &Self> {
        if let DataSourceParameters::RedshiftParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`RedshiftParameters`](crate::types::DataSourceParameters::RedshiftParameters).
    pub fn is_redshift_parameters(&self) -> bool {
        self.as_redshift_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`S3Parameters`](crate::types::DataSourceParameters::S3Parameters), extracting the inner [`S3Parameters`](crate::types::S3Parameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3_parameters(&self) -> std::result::Result<&crate::types::S3Parameters, &Self> {
        if let DataSourceParameters::S3Parameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`S3Parameters`](crate::types::DataSourceParameters::S3Parameters).
    pub fn is_s3_parameters(&self) -> bool {
        self.as_s3_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`ServiceNowParameters`](crate::types::DataSourceParameters::ServiceNowParameters), extracting the inner [`ServiceNowParameters`](crate::types::ServiceNowParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service_now_parameters(
        &self,
    ) -> std::result::Result<&crate::types::ServiceNowParameters, &Self> {
        if let DataSourceParameters::ServiceNowParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ServiceNowParameters`](crate::types::DataSourceParameters::ServiceNowParameters).
    pub fn is_service_now_parameters(&self) -> bool {
        self.as_service_now_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`SnowflakeParameters`](crate::types::DataSourceParameters::SnowflakeParameters), extracting the inner [`SnowflakeParameters`](crate::types::SnowflakeParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_snowflake_parameters(
        &self,
    ) -> std::result::Result<&crate::types::SnowflakeParameters, &Self> {
        if let DataSourceParameters::SnowflakeParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`SnowflakeParameters`](crate::types::DataSourceParameters::SnowflakeParameters).
    pub fn is_snowflake_parameters(&self) -> bool {
        self.as_snowflake_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`SparkParameters`](crate::types::DataSourceParameters::SparkParameters), extracting the inner [`SparkParameters`](crate::types::SparkParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_spark_parameters(
        &self,
    ) -> std::result::Result<&crate::types::SparkParameters, &Self> {
        if let DataSourceParameters::SparkParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`SparkParameters`](crate::types::DataSourceParameters::SparkParameters).
    pub fn is_spark_parameters(&self) -> bool {
        self.as_spark_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`SqlServerParameters`](crate::types::DataSourceParameters::SqlServerParameters), extracting the inner [`SqlServerParameters`](crate::types::SqlServerParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sql_server_parameters(
        &self,
    ) -> std::result::Result<&crate::types::SqlServerParameters, &Self> {
        if let DataSourceParameters::SqlServerParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`SqlServerParameters`](crate::types::DataSourceParameters::SqlServerParameters).
    pub fn is_sql_server_parameters(&self) -> bool {
        self.as_sql_server_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`TeradataParameters`](crate::types::DataSourceParameters::TeradataParameters), extracting the inner [`TeradataParameters`](crate::types::TeradataParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_teradata_parameters(
        &self,
    ) -> std::result::Result<&crate::types::TeradataParameters, &Self> {
        if let DataSourceParameters::TeradataParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`TeradataParameters`](crate::types::DataSourceParameters::TeradataParameters).
    pub fn is_teradata_parameters(&self) -> bool {
        self.as_teradata_parameters().is_ok()
    }
    /// Tries to convert the enum instance into [`TwitterParameters`](crate::types::DataSourceParameters::TwitterParameters), extracting the inner [`TwitterParameters`](crate::types::TwitterParameters).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_twitter_parameters(
        &self,
    ) -> std::result::Result<&crate::types::TwitterParameters, &Self> {
        if let DataSourceParameters::TwitterParameters(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`TwitterParameters`](crate::types::DataSourceParameters::TwitterParameters).
    pub fn is_twitter_parameters(&self) -> bool {
        self.as_twitter_parameters().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
