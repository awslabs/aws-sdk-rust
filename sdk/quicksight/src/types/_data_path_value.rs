// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data path that needs to be sorted.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DataPathValue {
    /// <p>The field ID of the field that needs to be sorted.</p>
    #[doc(hidden)]
    pub field_id: std::option::Option<std::string::String>,
    /// <p>The actual value of the field that needs to be sorted.</p>
    #[doc(hidden)]
    pub field_value: std::option::Option<std::string::String>,
}
impl DataPathValue {
    /// <p>The field ID of the field that needs to be sorted.</p>
    pub fn field_id(&self) -> std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>The actual value of the field that needs to be sorted.</p>
    pub fn field_value(&self) -> std::option::Option<&str> {
        self.field_value.as_deref()
    }
}
impl std::fmt::Debug for DataPathValue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DataPathValue");
        formatter.field("field_id", &self.field_id);
        formatter.field("field_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DataPathValue {
    /// Creates a new builder-style object to manufacture [`DataPathValue`](crate::types::DataPathValue).
    pub fn builder() -> crate::types::builders::DataPathValueBuilder {
        crate::types::builders::DataPathValueBuilder::default()
    }
}

/// A builder for [`DataPathValue`](crate::types::DataPathValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DataPathValueBuilder {
    pub(crate) field_id: std::option::Option<std::string::String>,
    pub(crate) field_value: std::option::Option<std::string::String>,
}
impl DataPathValueBuilder {
    /// <p>The field ID of the field that needs to be sorted.</p>
    pub fn field_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_id = Some(input.into());
        self
    }
    /// <p>The field ID of the field that needs to be sorted.</p>
    pub fn set_field_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>The actual value of the field that needs to be sorted.</p>
    pub fn field_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_value = Some(input.into());
        self
    }
    /// <p>The actual value of the field that needs to be sorted.</p>
    pub fn set_field_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DataPathValue`](crate::types::DataPathValue).
    pub fn build(self) -> crate::types::DataPathValue {
        crate::types::DataPathValue {
            field_id: self.field_id,
            field_value: self.field_value,
        }
    }
}
impl std::fmt::Debug for DataPathValueBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DataPathValueBuilder");
        formatter.field("field_id", &self.field_id);
        formatter.field("field_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
