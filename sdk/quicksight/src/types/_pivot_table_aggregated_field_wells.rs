// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The aggregated field well for the pivot table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PivotTableAggregatedFieldWells {
    /// <p>The rows field well for a pivot table. Values are grouped by rows fields.</p>
    #[doc(hidden)]
    pub rows: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The columns field well for a pivot table. Values are grouped by columns fields.</p>
    #[doc(hidden)]
    pub columns: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    /// <p>The values field well for a pivot table. Values are aggregated based on rows and columns fields.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
}
impl PivotTableAggregatedFieldWells {
    /// <p>The rows field well for a pivot table. Values are grouped by rows fields.</p>
    pub fn rows(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.rows.as_deref()
    }
    /// <p>The columns field well for a pivot table. Values are grouped by columns fields.</p>
    pub fn columns(&self) -> std::option::Option<&[crate::types::DimensionField]> {
        self.columns.as_deref()
    }
    /// <p>The values field well for a pivot table. Values are aggregated based on rows and columns fields.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::MeasureField]> {
        self.values.as_deref()
    }
}
impl PivotTableAggregatedFieldWells {
    /// Creates a new builder-style object to manufacture [`PivotTableAggregatedFieldWells`](crate::types::PivotTableAggregatedFieldWells).
    pub fn builder() -> crate::types::builders::PivotTableAggregatedFieldWellsBuilder {
        crate::types::builders::PivotTableAggregatedFieldWellsBuilder::default()
    }
}

/// A builder for [`PivotTableAggregatedFieldWells`](crate::types::PivotTableAggregatedFieldWells).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PivotTableAggregatedFieldWellsBuilder {
    pub(crate) rows: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) columns: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
}
impl PivotTableAggregatedFieldWellsBuilder {
    /// Appends an item to `rows`.
    ///
    /// To override the contents of this collection use [`set_rows`](Self::set_rows).
    ///
    /// <p>The rows field well for a pivot table. Values are grouped by rows fields.</p>
    pub fn rows(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.rows.unwrap_or_default();
        v.push(input);
        self.rows = Some(v);
        self
    }
    /// <p>The rows field well for a pivot table. Values are grouped by rows fields.</p>
    pub fn set_rows(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.rows = input;
        self
    }
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>The columns field well for a pivot table. Values are grouped by columns fields.</p>
    pub fn columns(mut self, input: crate::types::DimensionField) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = Some(v);
        self
    }
    /// <p>The columns field well for a pivot table. Values are grouped by columns fields.</p>
    pub fn set_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionField>>,
    ) -> Self {
        self.columns = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values field well for a pivot table. Values are aggregated based on rows and columns fields.</p>
    pub fn values(mut self, input: crate::types::MeasureField) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>The values field well for a pivot table. Values are aggregated based on rows and columns fields.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MeasureField>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`PivotTableAggregatedFieldWells`](crate::types::PivotTableAggregatedFieldWells).
    pub fn build(self) -> crate::types::PivotTableAggregatedFieldWells {
        crate::types::PivotTableAggregatedFieldWells {
            rows: self.rows,
            columns: self.columns,
            values: self.values,
        }
    }
}
