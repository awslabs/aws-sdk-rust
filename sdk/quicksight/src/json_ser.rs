// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_customization {
        let mut object_2 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnalysisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.parameters {
        let mut object_9 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.permissions {
        let mut array_11 = object.key("Permissions").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.source_entity {
        let mut object_15 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.theme_arn {
        object.key("ThemeArn").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.dashboard_publish_options {
        let mut object_22 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23.as_str());
    }
    if let Some(var_24) = &input.parameters {
        let mut object_25 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.permissions {
        let mut array_27 = object.key("Permissions").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_29,
                    item_28,
                )?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.source_entity {
        let mut object_31 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("Tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.theme_arn {
        object.key("ThemeArn").string(var_36.as_str());
    }
    if let Some(var_37) = &input.version_description {
        object.key("VersionDescription").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.column_groups {
        let mut array_39 = object.key("ColumnGroups").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_41,
                    item_40,
                )?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.column_level_permission_rules {
        let mut array_43 = object.key("ColumnLevelPermissionRules").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_45,
                    item_44,
                )?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.data_set_id {
        object.key("DataSetId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.data_set_usage_configuration {
        let mut object_48 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.field_folders {
        let mut object_50 = object.key("FieldFolders").start_object();
        for (key_51, value_52) in var_49 {
            {
                let mut object_53 = object_50.key(key_51).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_53,
                    value_52,
                )?;
                object_53.finish();
            }
        }
        object_50.finish();
    }
    if let Some(var_54) = &input.import_mode {
        object.key("ImportMode").string(var_54.as_str());
    }
    if let Some(var_55) = &input.logical_table_map {
        let mut object_56 = object.key("LogicalTableMap").start_object();
        for (key_57, value_58) in var_55 {
            {
                let mut object_59 = object_56.key(key_57).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_59,
                    value_58,
                )?;
                object_59.finish();
            }
        }
        object_56.finish();
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.permissions {
        let mut array_62 = object.key("Permissions").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_64,
                    item_63,
                )?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.physical_table_map {
        let mut object_66 = object.key("PhysicalTableMap").start_object();
        for (key_67, value_68) in var_65 {
            {
                let mut object_69 = object_66.key(key_67).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_69,
                    value_68,
                )?;
                object_69.finish();
            }
        }
        object_66.finish();
    }
    if let Some(var_70) = &input.row_level_permission_data_set {
        let mut object_71 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_71,
            var_70,
        )?;
        object_71.finish();
    }
    if let Some(var_72) = &input.row_level_permission_tag_configuration {
        let mut object_73 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76)?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.credentials {
        let mut object_79 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.data_source_id {
        object.key("DataSourceId").string(var_80.as_str());
    }
    if let Some(var_81) = &input.data_source_parameters {
        let mut object_82 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.name {
        object.key("Name").string(var_83.as_str());
    }
    if let Some(var_84) = &input.permissions {
        let mut array_85 = object.key("Permissions").start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_87,
                    item_86,
                )?;
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if let Some(var_88) = &input.ssl_properties {
        let mut object_89 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92)?;
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.r#type {
        object.key("Type").string(var_94.as_str());
    }
    if let Some(var_95) = &input.vpc_connection_properties {
        let mut object_96 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_96,
            var_95,
        )?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFolderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.folder_type {
        object.key("FolderType").string(var_97.as_str());
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98.as_str());
    }
    if let Some(var_99) = &input.parent_folder_arn {
        object.key("ParentFolderArn").string(var_99.as_str());
    }
    if let Some(var_100) = &input.permissions {
        let mut array_101 = object.key("Permissions").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_103,
                    item_102,
                )?;
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_107, item_106)?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.description {
        object.key("Description").string(var_108.as_str());
    }
    if let Some(var_109) = &input.group_name {
        object.key("GroupName").string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIamPolicyAssignmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.assignment_name {
        object.key("AssignmentName").string(var_110.as_str());
    }
    if let Some(var_111) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_111.as_str());
    }
    if let Some(var_112) = &input.identities {
        let mut object_113 = object.key("Identities").start_object();
        for (key_114, value_115) in var_112 {
            {
                let mut array_116 = object_113.key(key_114).start_array();
                for item_117 in value_115 {
                    {
                        array_116.value().string(item_117.as_str());
                    }
                }
                array_116.finish();
            }
        }
        object_113.finish();
    }
    if let Some(var_118) = &input.policy_arn {
        object.key("PolicyArn").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ingestion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIngestionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.ingestion_type {
        object.key("IngestionType").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_namespace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.identity_store {
        object.key("IdentityStore").string(var_120.as_str());
    }
    if let Some(var_121) = &input.namespace {
        object.key("Namespace").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut array_123 = object.key("Tags").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_125, item_124)?;
                object_125.finish();
            }
        }
        array_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126.as_str());
    }
    if let Some(var_127) = &input.permissions {
        let mut array_128 = object.key("Permissions").start_array();
        for item_129 in var_127 {
            {
                let mut object_130 = array_128.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_130,
                    item_129,
                )?;
                object_130.finish();
            }
        }
        array_128.finish();
    }
    if let Some(var_131) = &input.source_entity {
        let mut object_132 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_132,
            var_131,
        )?;
        object_132.finish();
    }
    if let Some(var_133) = &input.tags {
        let mut array_134 = object.key("Tags").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.version_description {
        object.key("VersionDescription").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.configuration {
        let mut object_141 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_141,
            var_140,
        )?;
        object_141.finish();
    }
    if let Some(var_142) = &input.name {
        object.key("Name").string(var_142.as_str());
    }
    if let Some(var_143) = &input.permissions {
        let mut array_144 = object.key("Permissions").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_146,
                    item_145,
                )?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.tags {
        let mut array_148 = object.key("Tags").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_150, item_149)?;
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.version_description {
        object.key("VersionDescription").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_embed_url_for_anonymous_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForAnonymousUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.authorized_resource_arns {
        let mut array_154 = object.key("AuthorizedResourceArns").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155.as_str());
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.experience_configuration {
        let mut object_157 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(&mut object_157, var_156)?;
        object_157.finish();
    }
    if let Some(var_158) = &input.namespace {
        object.key("Namespace").string(var_158.as_str());
    }
    if let Some(var_159) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.session_tags {
        let mut array_161 = object.key("SessionTags").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_tag(
                    &mut object_163,
                    item_162,
                )?;
                object_163.finish();
            }
        }
        array_161.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_embed_url_for_registered_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForRegisteredUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.experience_configuration {
        let mut object_165 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_embedding_experience_configuration(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.user_arn {
        object.key("UserArn").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_iam_policy_assignments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIamPolicyAssignmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.custom_federation_provider_url {
        object
            .key("CustomFederationProviderUrl")
            .string(var_169.as_str());
    }
    if let Some(var_170) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_170.as_str());
    }
    if let Some(var_171) = &input.email {
        object.key("Email").string(var_171.as_str());
    }
    if let Some(var_172) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_172.as_str());
    }
    if let Some(var_173) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.iam_arn {
        object.key("IamArn").string(var_174.as_str());
    }
    if let Some(var_175) = &input.identity_type {
        object.key("IdentityType").string(var_175.as_str());
    }
    if let Some(var_176) = &input.session_name {
        object.key("SessionName").string(var_176.as_str());
    }
    if let Some(var_177) = &input.user_name {
        object.key("UserName").string(var_177.as_str());
    }
    if let Some(var_178) = &input.user_role {
        object.key("UserRole").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_analyses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAnalysesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.filters {
        let mut array_180 = object.key("Filters").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_crate_model_analysis_search_filter(
                    &mut object_182,
                    item_181,
                )?;
                object_182.finish();
            }
        }
        array_180.finish();
    }
    if let Some(var_183) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_dashboards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDashboardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("Filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dashboard_search_filter(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("NextToken").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_folders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFoldersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.filters {
        let mut array_192 = object.key("Filters").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_search_filter(
                    &mut object_194,
                    item_193,
                )?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_195).into()),
        );
    }
    if let Some(var_196) = &input.next_token {
        object.key("NextToken").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.filters {
        let mut array_198 = object.key("Filters").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_search_filter(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.tags {
        let mut array_202 = object.key("Tags").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_204, item_203)?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountCustomizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.account_customization {
        let mut object_206 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.default_namespace {
        object.key("DefaultNamespace").string(var_207.as_str());
    }
    if let Some(var_208) = &input.notification_email {
        object.key("NotificationEmail").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.name {
        object.key("Name").string(var_209.as_str());
    }
    if let Some(var_210) = &input.parameters {
        let mut object_211 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_211, var_210)?;
        object_211.finish();
    }
    if let Some(var_212) = &input.source_entity {
        let mut object_213 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_213,
            var_212,
        )?;
        object_213.finish();
    }
    if let Some(var_214) = &input.theme_arn {
        object.key("ThemeArn").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_analysis_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.grant_permissions {
        let mut array_216 = object.key("GrantPermissions").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.revoke_permissions {
        let mut array_220 = object.key("RevokePermissions").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_222,
                    item_221,
                )?;
                object_222.finish();
            }
        }
        array_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.dashboard_publish_options {
        let mut object_224 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    if let Some(var_225) = &input.name {
        object.key("Name").string(var_225.as_str());
    }
    if let Some(var_226) = &input.parameters {
        let mut object_227 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_227, var_226)?;
        object_227.finish();
    }
    if let Some(var_228) = &input.source_entity {
        let mut object_229 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    if let Some(var_230) = &input.theme_arn {
        object.key("ThemeArn").string(var_230.as_str());
    }
    if let Some(var_231) = &input.version_description {
        object.key("VersionDescription").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dashboard_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.grant_link_permissions {
        let mut array_233 = object.key("GrantLinkPermissions").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_235,
                    item_234,
                )?;
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.grant_permissions {
        let mut array_237 = object.key("GrantPermissions").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.revoke_link_permissions {
        let mut array_241 = object.key("RevokeLinkPermissions").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.revoke_permissions {
        let mut array_245 = object.key("RevokePermissions").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_247,
                    item_246,
                )?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.column_groups {
        let mut array_249 = object.key("ColumnGroups").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_251,
                    item_250,
                )?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.column_level_permission_rules {
        let mut array_253 = object.key("ColumnLevelPermissionRules").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_255,
                    item_254,
                )?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.data_set_usage_configuration {
        let mut object_257 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    if let Some(var_258) = &input.field_folders {
        let mut object_259 = object.key("FieldFolders").start_object();
        for (key_260, value_261) in var_258 {
            {
                let mut object_262 = object_259.key(key_260).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_262,
                    value_261,
                )?;
                object_262.finish();
            }
        }
        object_259.finish();
    }
    if let Some(var_263) = &input.import_mode {
        object.key("ImportMode").string(var_263.as_str());
    }
    if let Some(var_264) = &input.logical_table_map {
        let mut object_265 = object.key("LogicalTableMap").start_object();
        for (key_266, value_267) in var_264 {
            {
                let mut object_268 = object_265.key(key_266).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_268,
                    value_267,
                )?;
                object_268.finish();
            }
        }
        object_265.finish();
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269.as_str());
    }
    if let Some(var_270) = &input.physical_table_map {
        let mut object_271 = object.key("PhysicalTableMap").start_object();
        for (key_272, value_273) in var_270 {
            {
                let mut object_274 = object_271.key(key_272).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_274,
                    value_273,
                )?;
                object_274.finish();
            }
        }
        object_271.finish();
    }
    if let Some(var_275) = &input.row_level_permission_data_set {
        let mut object_276 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_276,
            var_275,
        )?;
        object_276.finish();
    }
    if let Some(var_277) = &input.row_level_permission_tag_configuration {
        let mut object_278 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_278,
            var_277,
        )?;
        object_278.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_set_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.grant_permissions {
        let mut array_280 = object.key("GrantPermissions").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    if let Some(var_283) = &input.revoke_permissions {
        let mut array_284 = object.key("RevokePermissions").start_array();
        for item_285 in var_283 {
            {
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_286,
                    item_285,
                )?;
                object_286.finish();
            }
        }
        array_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.credentials {
        let mut object_288 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    if let Some(var_289) = &input.data_source_parameters {
        let mut object_290 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_290,
            var_289,
        )?;
        object_290.finish();
    }
    if let Some(var_291) = &input.name {
        object.key("Name").string(var_291.as_str());
    }
    if let Some(var_292) = &input.ssl_properties {
        let mut object_293 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_293, var_292)?;
        object_293.finish();
    }
    if let Some(var_294) = &input.vpc_connection_properties {
        let mut object_295 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_295,
            var_294,
        )?;
        object_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourcePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.grant_permissions {
        let mut array_297 = object.key("GrantPermissions").start_array();
        for item_298 in var_296 {
            {
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_299,
                    item_298,
                )?;
                object_299.finish();
            }
        }
        array_297.finish();
    }
    if let Some(var_300) = &input.revoke_permissions {
        let mut array_301 = object.key("RevokePermissions").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_303,
                    item_302,
                )?;
                object_303.finish();
            }
        }
        array_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.name {
        object.key("Name").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_folder_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.grant_permissions {
        let mut array_306 = object.key("GrantPermissions").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_308,
                    item_307,
                )?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.revoke_permissions {
        let mut array_310 = object.key("RevokePermissions").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.description {
        object.key("Description").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIamPolicyAssignmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_314.as_str());
    }
    if let Some(var_315) = &input.identities {
        let mut object_316 = object.key("Identities").start_object();
        for (key_317, value_318) in var_315 {
            {
                let mut array_319 = object_316.key(key_317).start_array();
                for item_320 in value_318 {
                    {
                        array_319.value().string(item_320.as_str());
                    }
                }
                array_319.finish();
            }
        }
        object_316.finish();
    }
    if let Some(var_321) = &input.policy_arn {
        object.key("PolicyArn").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ip_restriction_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpRestrictionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.enabled {
        object.key("Enabled").boolean(*var_322);
    }
    if let Some(var_323) = &input.ip_restriction_rule_map {
        let mut object_324 = object.key("IpRestrictionRuleMap").start_object();
        for (key_325, value_326) in var_323 {
            {
                object_324.key(key_325).string(value_326.as_str());
            }
        }
        object_324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327.as_str());
    }
    if let Some(var_328) = &input.source_entity {
        let mut object_329 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_329,
            var_328,
        )?;
        object_329.finish();
    }
    if let Some(var_330) = &input.version_description {
        object.key("VersionDescription").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplatePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.grant_permissions {
        let mut array_333 = object.key("GrantPermissions").start_array();
        for item_334 in var_332 {
            {
                let mut object_335 = array_333.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_335,
                    item_334,
                )?;
                object_335.finish();
            }
        }
        array_333.finish();
    }
    if let Some(var_336) = &input.revoke_permissions {
        let mut array_337 = object.key("RevokePermissions").start_array();
        for item_338 in var_336 {
            {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_339,
                    item_338,
                )?;
                object_339.finish();
            }
        }
        array_337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_340.as_str());
    }
    if let Some(var_341) = &input.configuration {
        let mut object_342 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_342,
            var_341,
        )?;
        object_342.finish();
    }
    if let Some(var_343) = &input.name {
        object.key("Name").string(var_343.as_str());
    }
    if let Some(var_344) = &input.version_description {
        object.key("VersionDescription").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_theme_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.grant_permissions {
        let mut array_347 = object.key("GrantPermissions").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.revoke_permissions {
        let mut array_351 = object.key("RevokePermissions").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.custom_federation_provider_url {
        object
            .key("CustomFederationProviderUrl")
            .string(var_354.as_str());
    }
    if let Some(var_355) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_355.as_str());
    }
    if let Some(var_356) = &input.email {
        object.key("Email").string(var_356.as_str());
    }
    if let Some(var_357) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_357.as_str());
    }
    if let Some(var_358) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_358.as_str());
    }
    if let Some(var_359) = &input.role {
        object.key("Role").string(var_359.as_str());
    }
    if input.unapply_custom_permissions {
        object
            .key("UnapplyCustomPermissions")
            .boolean(input.unapply_custom_permissions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_customization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountCustomization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.default_theme {
        object.key("DefaultTheme").string(var_360.as_str());
    }
    if let Some(var_361) = &input.default_email_customization_template {
        object
            .key("DefaultEmailCustomizationTemplate")
            .string(var_361.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.key {
        object.key("Key").string(var_362.as_str());
    }
    if let Some(var_363) = &input.value {
        object.key("Value").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.string_parameters {
        let mut array_365 = object.key("StringParameters").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_parameter(
                    &mut object_367,
                    item_366,
                )?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    if let Some(var_368) = &input.integer_parameters {
        let mut array_369 = object.key("IntegerParameters").start_array();
        for item_370 in var_368 {
            {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter(
                    &mut object_371,
                    item_370,
                )?;
                object_371.finish();
            }
        }
        array_369.finish();
    }
    if let Some(var_372) = &input.decimal_parameters {
        let mut array_373 = object.key("DecimalParameters").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_crate_model_decimal_parameter(
                    &mut object_375,
                    item_374,
                )?;
                object_375.finish();
            }
        }
        array_373.finish();
    }
    if let Some(var_376) = &input.date_time_parameters {
        let mut array_377 = object.key("DateTimeParameters").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_time_parameter(
                    &mut object_379,
                    item_378,
                )?;
                object_379.finish();
            }
        }
        array_377.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.principal {
        object.key("Principal").string(var_380.as_str());
    }
    if let Some(var_381) = &input.actions {
        let mut array_382 = object.key("Actions").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383.as_str());
            }
        }
        array_382.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.source_template {
        let mut object_385 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_template(
            &mut object_385,
            var_384,
        )?;
        object_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_publish_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardPublishOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.ad_hoc_filtering_option {
        let mut object_387 = object.key("AdHocFilteringOption").start_object();
        crate::json_ser::serialize_structure_crate_model_ad_hoc_filtering_option(
            &mut object_387,
            var_386,
        )?;
        object_387.finish();
    }
    if let Some(var_388) = &input.export_to_csv_option {
        let mut object_389 = object.key("ExportToCSVOption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_to_csv_option(
            &mut object_389,
            var_388,
        )?;
        object_389.finish();
    }
    if let Some(var_390) = &input.sheet_controls_option {
        let mut object_391 = object.key("SheetControlsOption").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_controls_option(
            &mut object_391,
            var_390,
        )?;
        object_391.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.source_template {
        let mut object_393 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_template(
            &mut object_393,
            var_392,
        )?;
        object_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.geo_spatial_column_group {
        let mut object_395 = object.key("GeoSpatialColumnGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_spatial_column_group(
            &mut object_395,
            var_394,
        )?;
        object_395.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_level_permission_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnLevelPermissionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.principals {
        let mut array_397 = object.key("Principals").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.column_names {
        let mut array_400 = object.key("ColumnNames").start_array();
        for item_401 in var_399 {
            {
                array_400.value().string(item_401.as_str());
            }
        }
        array_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set_usage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetUsageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.disable_use_as_direct_query_source {
        object
            .key("DisableUseAsDirectQuerySource")
            .boolean(input.disable_use_as_direct_query_source);
    }
    if input.disable_use_as_imported_source {
        object
            .key("DisableUseAsImportedSource")
            .boolean(input.disable_use_as_imported_source);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_folder(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldFolder,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.description {
        object.key("description").string(var_402.as_str());
    }
    if let Some(var_403) = &input.columns {
        let mut array_404 = object.key("columns").start_array();
        for item_405 in var_403 {
            {
                array_404.value().string(item_405.as_str());
            }
        }
        array_404.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logical_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.alias {
        object.key("Alias").string(var_406.as_str());
    }
    if let Some(var_407) = &input.data_transforms {
        let mut array_408 = object.key("DataTransforms").start_array();
        for item_409 in var_407 {
            {
                let mut object_410 = array_408.value().start_object();
                crate::json_ser::serialize_union_crate_model_transform_operation(
                    &mut object_410,
                    item_409,
                )?;
                object_410.finish();
            }
        }
        array_408.finish();
    }
    if let Some(var_411) = &input.source {
        let mut object_412 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_logical_table_source(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_physical_table(
    object_69: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::PhysicalTable::RelationalTable(inner) => {
            let mut object_413 = object_69.key("RelationalTable").start_object();
            crate::json_ser::serialize_structure_crate_model_relational_table(
                &mut object_413,
                inner,
            )?;
            object_413.finish();
        }
        crate::model::PhysicalTable::CustomSql(inner) => {
            let mut object_414 = object_69.key("CustomSql").start_object();
            crate::json_ser::serialize_structure_crate_model_custom_sql(&mut object_414, inner)?;
            object_414.finish();
        }
        crate::model::PhysicalTable::S3Source(inner) => {
            let mut object_415 = object_69.key("S3Source").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_source(&mut object_415, inner)?;
            object_415.finish();
        }
        crate::model::PhysicalTable::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("PhysicalTable"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_data_set(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionDataSet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.namespace {
        object.key("Namespace").string(var_416.as_str());
    }
    if let Some(var_417) = &input.arn {
        object.key("Arn").string(var_417.as_str());
    }
    if let Some(var_418) = &input.permission_policy {
        object.key("PermissionPolicy").string(var_418.as_str());
    }
    if let Some(var_419) = &input.format_version {
        object.key("FormatVersion").string(var_419.as_str());
    }
    if let Some(var_420) = &input.status {
        object.key("Status").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_tag_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.status {
        object.key("Status").string(var_421.as_str());
    }
    if let Some(var_422) = &input.tag_rules {
        let mut array_423 = object.key("TagRules").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_rule(
                    &mut object_425,
                    item_424,
                )?;
                object_425.finish();
            }
        }
        array_423.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.credential_pair {
        let mut object_427 = object.key("CredentialPair").start_object();
        crate::json_ser::serialize_structure_crate_model_credential_pair(&mut object_427, var_426)?;
        object_427.finish();
    }
    if let Some(var_428) = &input.copy_source_arn {
        object.key("CopySourceArn").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_data_source_parameters(
    object_82: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::DataSourceParameters::AmazonElasticsearchParameters(inner) => {
            let mut object_429 = object_82
                .key("AmazonElasticsearchParameters")
                .start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_elasticsearch_parameters(
                &mut object_429,
                inner,
            )?;
            object_429.finish();
        }
        crate::model::DataSourceParameters::AthenaParameters(inner) => {
            let mut object_430 = object_82.key("AthenaParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_athena_parameters(
                &mut object_430,
                inner,
            )?;
            object_430.finish();
        }
        crate::model::DataSourceParameters::AuroraParameters(inner) => {
            let mut object_431 = object_82.key("AuroraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_parameters(
                &mut object_431,
                inner,
            )?;
            object_431.finish();
        }
        crate::model::DataSourceParameters::AuroraPostgreSqlParameters(inner) => {
            let mut object_432 = object_82.key("AuroraPostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_postgre_sql_parameters(
                &mut object_432,
                inner,
            )?;
            object_432.finish();
        }
        crate::model::DataSourceParameters::AwsIotAnalyticsParameters(inner) => {
            let mut object_433 = object_82.key("AwsIotAnalyticsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_iot_analytics_parameters(
                &mut object_433,
                inner,
            )?;
            object_433.finish();
        }
        crate::model::DataSourceParameters::JiraParameters(inner) => {
            let mut object_434 = object_82.key("JiraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_jira_parameters(
                &mut object_434,
                inner,
            )?;
            object_434.finish();
        }
        crate::model::DataSourceParameters::MariaDbParameters(inner) => {
            let mut object_435 = object_82.key("MariaDbParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_maria_db_parameters(
                &mut object_435,
                inner,
            )?;
            object_435.finish();
        }
        crate::model::DataSourceParameters::MySqlParameters(inner) => {
            let mut object_436 = object_82.key("MySqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_my_sql_parameters(
                &mut object_436,
                inner,
            )?;
            object_436.finish();
        }
        crate::model::DataSourceParameters::OracleParameters(inner) => {
            let mut object_437 = object_82.key("OracleParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_oracle_parameters(
                &mut object_437,
                inner,
            )?;
            object_437.finish();
        }
        crate::model::DataSourceParameters::PostgreSqlParameters(inner) => {
            let mut object_438 = object_82.key("PostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_postgre_sql_parameters(
                &mut object_438,
                inner,
            )?;
            object_438.finish();
        }
        crate::model::DataSourceParameters::PrestoParameters(inner) => {
            let mut object_439 = object_82.key("PrestoParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_presto_parameters(
                &mut object_439,
                inner,
            )?;
            object_439.finish();
        }
        crate::model::DataSourceParameters::RdsParameters(inner) => {
            let mut object_440 = object_82.key("RdsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_rds_parameters(
                &mut object_440,
                inner,
            )?;
            object_440.finish();
        }
        crate::model::DataSourceParameters::RedshiftParameters(inner) => {
            let mut object_441 = object_82.key("RedshiftParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_redshift_parameters(
                &mut object_441,
                inner,
            )?;
            object_441.finish();
        }
        crate::model::DataSourceParameters::S3Parameters(inner) => {
            let mut object_442 = object_82.key("S3Parameters").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_parameters(&mut object_442, inner)?;
            object_442.finish();
        }
        crate::model::DataSourceParameters::ServiceNowParameters(inner) => {
            let mut object_443 = object_82.key("ServiceNowParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_service_now_parameters(
                &mut object_443,
                inner,
            )?;
            object_443.finish();
        }
        crate::model::DataSourceParameters::SnowflakeParameters(inner) => {
            let mut object_444 = object_82.key("SnowflakeParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_snowflake_parameters(
                &mut object_444,
                inner,
            )?;
            object_444.finish();
        }
        crate::model::DataSourceParameters::SparkParameters(inner) => {
            let mut object_445 = object_82.key("SparkParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_spark_parameters(
                &mut object_445,
                inner,
            )?;
            object_445.finish();
        }
        crate::model::DataSourceParameters::SqlServerParameters(inner) => {
            let mut object_446 = object_82.key("SqlServerParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_sql_server_parameters(
                &mut object_446,
                inner,
            )?;
            object_446.finish();
        }
        crate::model::DataSourceParameters::TeradataParameters(inner) => {
            let mut object_447 = object_82.key("TeradataParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_teradata_parameters(
                &mut object_447,
                inner,
            )?;
            object_447.finish();
        }
        crate::model::DataSourceParameters::TwitterParameters(inner) => {
            let mut object_448 = object_82.key("TwitterParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_twitter_parameters(
                &mut object_448,
                inner,
            )?;
            object_448.finish();
        }
        crate::model::DataSourceParameters::AmazonOpenSearchParameters(inner) => {
            let mut object_449 = object_82.key("AmazonOpenSearchParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_open_search_parameters(
                &mut object_449,
                inner,
            )?;
            object_449.finish();
        }
        crate::model::DataSourceParameters::ExasolParameters(inner) => {
            let mut object_450 = object_82.key("ExasolParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_exasol_parameters(
                &mut object_450,
                inner,
            )?;
            object_450.finish();
        }
        crate::model::DataSourceParameters::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "DataSourceParameters",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssl_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SslProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.disable_ssl {
        object.key("DisableSsl").boolean(input.disable_ssl);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_connection_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConnectionProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.vpc_connection_arn {
        object.key("VpcConnectionArn").string(var_451.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceEntity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.source_analysis {
        let mut object_453 = object.key("SourceAnalysis").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_analysis(
            &mut object_453,
            var_452,
        )?;
        object_453.finish();
    }
    if let Some(var_454) = &input.source_template {
        let mut object_455 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_template(
            &mut object_455,
            var_454,
        )?;
        object_455.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_theme_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.data_color_palette {
        let mut object_457 = object.key("DataColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_data_color_palette(
            &mut object_457,
            var_456,
        )?;
        object_457.finish();
    }
    if let Some(var_458) = &input.ui_color_palette {
        let mut object_459 = object.key("UIColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_color_palette(
            &mut object_459,
            var_458,
        )?;
        object_459.finish();
    }
    if let Some(var_460) = &input.sheet {
        let mut object_461 = object.key("Sheet").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_style(&mut object_461, var_460)?;
        object_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserEmbeddingExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.dashboard {
        let mut object_463 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(&mut object_463, var_462)?;
        object_463.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_464) = &input.key {
        object.key("Key").string(var_464.as_str());
    }
    if let Some(var_465) = &input.value {
        object.key("Value").string(var_465.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserEmbeddingExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.dashboard {
        let mut object_467 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(&mut object_467, var_466)?;
        object_467.finish();
    }
    if let Some(var_468) = &input.quick_sight_console {
        let mut object_469 = object.key("QuickSightConsole").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(&mut object_469, var_468)?;
        object_469.finish();
    }
    if let Some(var_470) = &input.q_search_bar {
        let mut object_471 = object.key("QSearchBar").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(&mut object_471, var_470)?;
        object_471.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.operator {
        object.key("Operator").string(var_472.as_str());
    }
    if let Some(var_473) = &input.name {
        object.key("Name").string(var_473.as_str());
    }
    if let Some(var_474) = &input.value {
        object.key("Value").string(var_474.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_475) = &input.operator {
        object.key("Operator").string(var_475.as_str());
    }
    if let Some(var_476) = &input.name {
        object.key("Name").string(var_476.as_str());
    }
    if let Some(var_477) = &input.value {
        object.key("Value").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_folder_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.operator {
        object.key("Operator").string(var_478.as_str());
    }
    if let Some(var_479) = &input.name {
        object.key("Name").string(var_479.as_str());
    }
    if let Some(var_480) = &input.value {
        object.key("Value").string(var_480.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.operator {
        object.key("Operator").string(var_481.as_str());
    }
    if let Some(var_482) = &input.name {
        object.key("Name").string(var_482.as_str());
    }
    if let Some(var_483) = &input.value {
        object.key("Value").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.name {
        object.key("Name").string(var_484.as_str());
    }
    if let Some(var_485) = &input.values {
        let mut array_486 = object.key("Values").start_array();
        for item_487 in var_485 {
            {
                array_486.value().string(item_487.as_str());
            }
        }
        array_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.name {
        object.key("Name").string(var_488.as_str());
    }
    if let Some(var_489) = &input.values {
        let mut array_490 = object.key("Values").start_array();
        for item_491 in var_489 {
            {
                array_490.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_491).into()),
                );
            }
        }
        array_490.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_492) = &input.name {
        object.key("Name").string(var_492.as_str());
    }
    if let Some(var_493) = &input.values {
        let mut array_494 = object.key("Values").start_array();
        for item_495 in var_493 {
            {
                array_494.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_495).into()),
                );
            }
        }
        array_494.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_time_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateTimeParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_496) = &input.name {
        object.key("Name").string(var_496.as_str());
    }
    if let Some(var_497) = &input.values {
        let mut array_498 = object.key("Values").start_array();
        for item_499 in var_497 {
            {
                array_498
                    .value()
                    .date_time(item_499, aws_smithy_types::date_time::Format::EpochSeconds)?;
            }
        }
        array_498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analysis_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.data_set_references {
        let mut array_501 = object.key("DataSetReferences").start_array();
        for item_502 in var_500 {
            {
                let mut object_503 = array_501.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_503,
                    item_502,
                )?;
                object_503.finish();
            }
        }
        array_501.finish();
    }
    if let Some(var_504) = &input.arn {
        object.key("Arn").string(var_504.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ad_hoc_filtering_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdHocFilteringOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_505.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_to_csv_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportToCsvOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_506.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sheet_controls_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetControlsOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.visibility_state {
        object.key("VisibilityState").string(var_507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dashboard_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.data_set_references {
        let mut array_509 = object.key("DataSetReferences").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_511,
                    item_510,
                )?;
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.arn {
        object.key("Arn").string(var_512.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_spatial_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoSpatialColumnGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.name {
        object.key("Name").string(var_513.as_str());
    }
    if let Some(var_514) = &input.country_code {
        object.key("CountryCode").string(var_514.as_str());
    }
    if let Some(var_515) = &input.columns {
        let mut array_516 = object.key("Columns").start_array();
        for item_517 in var_515 {
            {
                array_516.value().string(item_517.as_str());
            }
        }
        array_516.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_transform_operation(
    object_410: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TransformOperation::ProjectOperation(inner) => {
            let mut object_518 = object_410.key("ProjectOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_project_operation(
                &mut object_518,
                inner,
            )?;
            object_518.finish();
        }
        crate::model::TransformOperation::FilterOperation(inner) => {
            let mut object_519 = object_410.key("FilterOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_filter_operation(
                &mut object_519,
                inner,
            )?;
            object_519.finish();
        }
        crate::model::TransformOperation::CreateColumnsOperation(inner) => {
            let mut object_520 = object_410.key("CreateColumnsOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_create_columns_operation(
                &mut object_520,
                inner,
            )?;
            object_520.finish();
        }
        crate::model::TransformOperation::RenameColumnOperation(inner) => {
            let mut object_521 = object_410.key("RenameColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_rename_column_operation(
                &mut object_521,
                inner,
            )?;
            object_521.finish();
        }
        crate::model::TransformOperation::CastColumnTypeOperation(inner) => {
            let mut object_522 = object_410.key("CastColumnTypeOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_cast_column_type_operation(
                &mut object_522,
                inner,
            )?;
            object_522.finish();
        }
        crate::model::TransformOperation::TagColumnOperation(inner) => {
            let mut object_523 = object_410.key("TagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_tag_column_operation(
                &mut object_523,
                inner,
            )?;
            object_523.finish();
        }
        crate::model::TransformOperation::UntagColumnOperation(inner) => {
            let mut object_524 = object_410.key("UntagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_untag_column_operation(
                &mut object_524,
                inner,
            )?;
            object_524.finish();
        }
        crate::model::TransformOperation::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TransformOperation",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logical_table_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTableSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_525) = &input.join_instruction {
        let mut object_526 = object.key("JoinInstruction").start_object();
        crate::json_ser::serialize_structure_crate_model_join_instruction(
            &mut object_526,
            var_525,
        )?;
        object_526.finish();
    }
    if let Some(var_527) = &input.physical_table_id {
        object.key("PhysicalTableId").string(var_527.as_str());
    }
    if let Some(var_528) = &input.data_set_arn {
        object.key("DataSetArn").string(var_528.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_529.as_str());
    }
    if let Some(var_530) = &input.catalog {
        object.key("Catalog").string(var_530.as_str());
    }
    if let Some(var_531) = &input.schema {
        object.key("Schema").string(var_531.as_str());
    }
    if let Some(var_532) = &input.name {
        object.key("Name").string(var_532.as_str());
    }
    if let Some(var_533) = &input.input_columns {
        let mut array_534 = object.key("InputColumns").start_array();
        for item_535 in var_533 {
            {
                let mut object_536 = array_534.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_536,
                    item_535,
                )?;
                object_536.finish();
            }
        }
        array_534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_sql(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSql,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_537.as_str());
    }
    if let Some(var_538) = &input.name {
        object.key("Name").string(var_538.as_str());
    }
    if let Some(var_539) = &input.sql_query {
        object.key("SqlQuery").string(var_539.as_str());
    }
    if let Some(var_540) = &input.columns {
        let mut array_541 = object.key("Columns").start_array();
        for item_542 in var_540 {
            {
                let mut object_543 = array_541.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_543,
                    item_542,
                )?;
                object_543.finish();
            }
        }
        array_541.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Source,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_544) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_544.as_str());
    }
    if let Some(var_545) = &input.upload_settings {
        let mut object_546 = object.key("UploadSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_upload_settings(&mut object_546, var_545)?;
        object_546.finish();
    }
    if let Some(var_547) = &input.input_columns {
        let mut array_548 = object.key("InputColumns").start_array();
        for item_549 in var_547 {
            {
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_550,
                    item_549,
                )?;
                object_550.finish();
            }
        }
        array_548.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_row_level_permission_tag_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.tag_key {
        object.key("TagKey").string(var_551.as_str());
    }
    if let Some(var_552) = &input.column_name {
        object.key("ColumnName").string(var_552.as_str());
    }
    if let Some(var_553) = &input.tag_multi_value_delimiter {
        object
            .key("TagMultiValueDelimiter")
            .string(var_553.as_str());
    }
    if let Some(var_554) = &input.match_all_value {
        object.key("MatchAllValue").string(var_554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_credential_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CredentialPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.username {
        object.key("Username").string(var_555.as_str());
    }
    if let Some(var_556) = &input.password {
        object.key("Password").string(var_556.as_str());
    }
    if let Some(var_557) = &input.alternate_data_source_parameters {
        let mut array_558 = object.key("AlternateDataSourceParameters").start_array();
        for item_559 in var_557 {
            {
                let mut object_560 = array_558.value().start_object();
                crate::json_ser::serialize_union_crate_model_data_source_parameters(
                    &mut object_560,
                    item_559,
                )?;
                object_560.finish();
            }
        }
        array_558.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amazon_elasticsearch_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonElasticsearchParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_561) = &input.domain {
        object.key("Domain").string(var_561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_562) = &input.work_group {
        object.key("WorkGroup").string(var_562.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aurora_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.host {
        object.key("Host").string(var_563.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_564) = &input.database {
        object.key("Database").string(var_564.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aurora_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraPostgreSqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_565) = &input.host {
        object.key("Host").string(var_565.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_566) = &input.database {
        object.key("Database").string(var_566.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iot_analytics_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIotAnalyticsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.data_set_name {
        object.key("DataSetName").string(var_567.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jira_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_568) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_568.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maria_db_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MariaDbParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.host {
        object.key("Host").string(var_569.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_570) = &input.database {
        object.key("Database").string(var_570.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_571) = &input.host {
        object.key("Host").string(var_571.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_572) = &input.database {
        object.key("Database").string(var_572.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_573) = &input.host {
        object.key("Host").string(var_573.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_574) = &input.database {
        object.key("Database").string(var_574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_575) = &input.host {
        object.key("Host").string(var_575.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_576) = &input.database {
        object.key("Database").string(var_576.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_presto_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrestoParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.host {
        object.key("Host").string(var_577.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_578) = &input.catalog {
        object.key("Catalog").string(var_578.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_579) = &input.instance_id {
        object.key("InstanceId").string(var_579.as_str());
    }
    if let Some(var_580) = &input.database {
        object.key("Database").string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.host {
        object.key("Host").string(var_581.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_582) = &input.database {
        object.key("Database").string(var_582.as_str());
    }
    if let Some(var_583) = &input.cluster_id {
        object.key("ClusterId").string(var_583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Parameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.manifest_file_location {
        let mut object_585 = object.key("ManifestFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_manifest_file_location(
            &mut object_585,
            var_584,
        )?;
        object_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snowflake_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.host {
        object.key("Host").string(var_587.as_str());
    }
    if let Some(var_588) = &input.database {
        object.key("Database").string(var_588.as_str());
    }
    if let Some(var_589) = &input.warehouse {
        object.key("Warehouse").string(var_589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.host {
        object.key("Host").string(var_590.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_server_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlServerParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.host {
        object.key("Host").string(var_591.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_592) = &input.database {
        object.key("Database").string(var_592.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_teradata_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeradataParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_593) = &input.host {
        object.key("Host").string(var_593.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_594) = &input.database {
        object.key("Database").string(var_594.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_twitter_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TwitterParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.query {
        object.key("Query").string(var_595.as_str());
    }
    {
        object.key("MaxRows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_rows).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_amazon_open_search_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonOpenSearchParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.domain {
        object.key("Domain").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exasol_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExasolParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.host {
        object.key("Host").string(var_597.as_str());
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_analysis(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceAnalysis,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.arn {
        object.key("Arn").string(var_598.as_str());
    }
    if let Some(var_599) = &input.data_set_references {
        let mut array_600 = object.key("DataSetReferences").start_array();
        for item_601 in var_599 {
            {
                let mut object_602 = array_600.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_602,
                    item_601,
                )?;
                object_602.finish();
            }
        }
        array_600.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.arn {
        object.key("Arn").string(var_603.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataColorPalette,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_604) = &input.colors {
        let mut array_605 = object.key("Colors").start_array();
        for item_606 in var_604 {
            {
                array_605.value().string(item_606.as_str());
            }
        }
        array_605.finish();
    }
    if let Some(var_607) = &input.min_max_gradient {
        let mut array_608 = object.key("MinMaxGradient").start_array();
        for item_609 in var_607 {
            {
                array_608.value().string(item_609.as_str());
            }
        }
        array_608.finish();
    }
    if let Some(var_610) = &input.empty_fill_color {
        object.key("EmptyFillColor").string(var_610.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiColorPalette,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_611.as_str());
    }
    if let Some(var_612) = &input.primary_background {
        object.key("PrimaryBackground").string(var_612.as_str());
    }
    if let Some(var_613) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_613.as_str());
    }
    if let Some(var_614) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_614.as_str());
    }
    if let Some(var_615) = &input.accent {
        object.key("Accent").string(var_615.as_str());
    }
    if let Some(var_616) = &input.accent_foreground {
        object.key("AccentForeground").string(var_616.as_str());
    }
    if let Some(var_617) = &input.danger {
        object.key("Danger").string(var_617.as_str());
    }
    if let Some(var_618) = &input.danger_foreground {
        object.key("DangerForeground").string(var_618.as_str());
    }
    if let Some(var_619) = &input.warning {
        object.key("Warning").string(var_619.as_str());
    }
    if let Some(var_620) = &input.warning_foreground {
        object.key("WarningForeground").string(var_620.as_str());
    }
    if let Some(var_621) = &input.success {
        object.key("Success").string(var_621.as_str());
    }
    if let Some(var_622) = &input.success_foreground {
        object.key("SuccessForeground").string(var_622.as_str());
    }
    if let Some(var_623) = &input.dimension {
        object.key("Dimension").string(var_623.as_str());
    }
    if let Some(var_624) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_624.as_str());
    }
    if let Some(var_625) = &input.measure {
        object.key("Measure").string(var_625.as_str());
    }
    if let Some(var_626) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_626.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sheet_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_627) = &input.tile {
        let mut object_628 = object.key("Tile").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_style(&mut object_628, var_627)?;
        object_628.finish();
    }
    if let Some(var_629) = &input.tile_layout {
        let mut object_630 = object.key("TileLayout").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_layout_style(
            &mut object_630,
            var_629,
        )?;
        object_630.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserDashboardEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_631) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserDashboardEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_632.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQuickSightConsoleEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.initial_path {
        object.key("InitialPath").string(var_633.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQSearchBarEmbeddingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_634) = &input.initial_topic_id {
        object.key("InitialTopicId").string(var_634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_set_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.data_set_placeholder {
        object.key("DataSetPlaceholder").string(var_635.as_str());
    }
    if let Some(var_636) = &input.data_set_arn {
        object.key("DataSetArn").string(var_636.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_project_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.projected_columns {
        let mut array_638 = object.key("ProjectedColumns").start_array();
        for item_639 in var_637 {
            {
                array_638.value().string(item_639.as_str());
            }
        }
        array_638.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_640) = &input.condition_expression {
        object.key("ConditionExpression").string(var_640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_columns_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateColumnsOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.columns {
        let mut array_642 = object.key("Columns").start_array();
        for item_643 in var_641 {
            {
                let mut object_644 = array_642.value().start_object();
                crate::json_ser::serialize_structure_crate_model_calculated_column(
                    &mut object_644,
                    item_643,
                )?;
                object_644.finish();
            }
        }
        array_642.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.column_name {
        object.key("ColumnName").string(var_645.as_str());
    }
    if let Some(var_646) = &input.new_column_name {
        object.key("NewColumnName").string(var_646.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cast_column_type_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CastColumnTypeOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_647) = &input.column_name {
        object.key("ColumnName").string(var_647.as_str());
    }
    if let Some(var_648) = &input.new_column_type {
        object.key("NewColumnType").string(var_648.as_str());
    }
    if let Some(var_649) = &input.format {
        object.key("Format").string(var_649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_650) = &input.column_name {
        object.key("ColumnName").string(var_650.as_str());
    }
    if let Some(var_651) = &input.tags {
        let mut array_652 = object.key("Tags").start_array();
        for item_653 in var_651 {
            {
                let mut object_654 = array_652.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_tag(
                    &mut object_654,
                    item_653,
                )?;
                object_654.finish();
            }
        }
        array_652.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_untag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UntagColumnOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.column_name {
        object.key("ColumnName").string(var_655.as_str());
    }
    if let Some(var_656) = &input.tag_names {
        let mut array_657 = object.key("TagNames").start_array();
        for item_658 in var_656 {
            {
                array_657.value().string(item_658.as_str());
            }
        }
        array_657.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_instruction(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinInstruction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.left_operand {
        object.key("LeftOperand").string(var_659.as_str());
    }
    if let Some(var_660) = &input.right_operand {
        object.key("RightOperand").string(var_660.as_str());
    }
    if let Some(var_661) = &input.left_join_key_properties {
        let mut object_662 = object.key("LeftJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_662,
            var_661,
        )?;
        object_662.finish();
    }
    if let Some(var_663) = &input.right_join_key_properties {
        let mut object_664 = object.key("RightJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_664,
            var_663,
        )?;
        object_664.finish();
    }
    if let Some(var_665) = &input.r#type {
        object.key("Type").string(var_665.as_str());
    }
    if let Some(var_666) = &input.on_clause {
        object.key("OnClause").string(var_666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.name {
        object.key("Name").string(var_667.as_str());
    }
    if let Some(var_668) = &input.r#type {
        object.key("Type").string(var_668.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upload_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.format {
        object.key("Format").string(var_669.as_str());
    }
    if let Some(var_670) = &input.start_from_row {
        object.key("StartFromRow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_670).into()),
        );
    }
    if let Some(var_671) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_671);
    }
    if let Some(var_672) = &input.text_qualifier {
        object.key("TextQualifier").string(var_672.as_str());
    }
    if let Some(var_673) = &input.delimiter {
        object.key("Delimiter").string(var_673.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_manifest_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_674) = &input.bucket {
        object.key("Bucket").string(var_674.as_str());
    }
    if let Some(var_675) = &input.key {
        object.key("Key").string(var_675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tile_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_676) = &input.border {
        let mut object_677 = object.key("Border").start_object();
        crate::json_ser::serialize_structure_crate_model_border_style(&mut object_677, var_676)?;
        object_677.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tile_layout_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileLayoutStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.gutter {
        let mut object_679 = object.key("Gutter").start_object();
        crate::json_ser::serialize_structure_crate_model_gutter_style(&mut object_679, var_678)?;
        object_679.finish();
    }
    if let Some(var_680) = &input.margin {
        let mut object_681 = object.key("Margin").start_object();
        crate::json_ser::serialize_structure_crate_model_margin_style(&mut object_681, var_680)?;
        object_681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_calculated_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CalculatedColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.column_name {
        object.key("ColumnName").string(var_682.as_str());
    }
    if let Some(var_683) = &input.column_id {
        object.key("ColumnId").string(var_683.as_str());
    }
    if let Some(var_684) = &input.expression {
        object.key("Expression").string(var_684.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.column_geographic_role {
        object.key("ColumnGeographicRole").string(var_685.as_str());
    }
    if let Some(var_686) = &input.column_description {
        let mut object_687 = object.key("ColumnDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_column_description(
            &mut object_687,
            var_686,
        )?;
        object_687.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_key_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinKeyProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_688) = &input.unique_key {
        object.key("UniqueKey").boolean(*var_688);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_border_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorderStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.show {
        object.key("Show").boolean(*var_689);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_gutter_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GutterStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_690) = &input.show {
        object.key("Show").boolean(*var_690);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_margin_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarginStyle,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_691) = &input.show {
        object.key("Show").boolean(*var_691);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_692) = &input.text {
        object.key("Text").string(var_692.as_str());
    }
    Ok(())
}
