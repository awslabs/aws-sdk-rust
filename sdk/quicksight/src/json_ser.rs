// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountCustomizationInput,
) {
    if let Some(var_1) = &input.account_customization {
        let mut object_2 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_2,
            var_1,
        );
        object_2.finish();
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5);
                object_6.finish();
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_crate_input_create_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnalysisInput,
) {
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7);
    }
    if let Some(var_8) = &input.parameters {
        let mut object_9 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.permissions {
        let mut array_11 = object.key("Permissions").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_13,
                    item_12,
                );
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.source_entity {
        let mut object_15 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_15,
            var_14,
        );
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18);
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.theme_arn {
        object.key("ThemeArn").string(var_20);
    }
}

pub fn serialize_structure_crate_input_create_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) {
    if let Some(var_21) = &input.dashboard_publish_options {
        let mut object_22 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_22,
            var_21,
        );
        object_22.finish();
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23);
    }
    if let Some(var_24) = &input.parameters {
        let mut object_25 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_25, var_24);
        object_25.finish();
    }
    if let Some(var_26) = &input.permissions {
        let mut array_27 = object.key("Permissions").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_29,
                    item_28,
                );
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.source_entity {
        let mut object_31 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_31,
            var_30,
        );
        object_31.finish();
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("Tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_35, item_34);
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.theme_arn {
        object.key("ThemeArn").string(var_36);
    }
    if let Some(var_37) = &input.version_description {
        object.key("VersionDescription").string(var_37);
    }
}

pub fn serialize_structure_crate_input_create_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) {
    if let Some(var_38) = &input.column_groups {
        let mut array_39 = object.key("ColumnGroups").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_41,
                    item_40,
                );
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.column_level_permission_rules {
        let mut array_43 = object.key("ColumnLevelPermissionRules").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_45,
                    item_44,
                );
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.data_set_id {
        object.key("DataSetId").string(var_46);
    }
    if let Some(var_47) = &input.data_set_usage_configuration {
        let mut object_48 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_48,
            var_47,
        );
        object_48.finish();
    }
    if let Some(var_49) = &input.field_folders {
        let mut object_50 = object.key("FieldFolders").start_object();
        for (key_51, value_52) in var_49 {
            {
                let mut object_53 = object_50.key(key_51).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_53,
                    value_52,
                );
                object_53.finish();
            }
        }
        object_50.finish();
    }
    if let Some(var_54) = &input.import_mode {
        object.key("ImportMode").string(var_54.as_str());
    }
    if let Some(var_55) = &input.logical_table_map {
        let mut object_56 = object.key("LogicalTableMap").start_object();
        for (key_57, value_58) in var_55 {
            {
                let mut object_59 = object_56.key(key_57).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_59,
                    value_58,
                );
                object_59.finish();
            }
        }
        object_56.finish();
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60);
    }
    if let Some(var_61) = &input.permissions {
        let mut array_62 = object.key("Permissions").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_64,
                    item_63,
                );
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.physical_table_map {
        let mut object_66 = object.key("PhysicalTableMap").start_object();
        for (key_67, value_68) in var_65 {
            {
                let mut object_69 = object_66.key(key_67).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_69,
                    value_68,
                );
                object_69.finish();
            }
        }
        object_66.finish();
    }
    if let Some(var_70) = &input.row_level_permission_data_set {
        let mut object_71 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_71,
            var_70,
        );
        object_71.finish();
    }
    if let Some(var_72) = &input.row_level_permission_tag_configuration {
        let mut object_73 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_73,
            var_72,
        );
        object_73.finish();
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76);
                object_77.finish();
            }
        }
        array_75.finish();
    }
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_78) = &input.credentials {
        let mut object_79 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_79,
            var_78,
        );
        object_79.finish();
    }
    if let Some(var_80) = &input.data_source_id {
        object.key("DataSourceId").string(var_80);
    }
    if let Some(var_81) = &input.data_source_parameters {
        let mut object_82 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.name {
        object.key("Name").string(var_83);
    }
    if let Some(var_84) = &input.permissions {
        let mut array_85 = object.key("Permissions").start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_87,
                    item_86,
                );
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if let Some(var_88) = &input.ssl_properties {
        let mut object_89 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_89, var_88);
        object_89.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92);
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.r#type {
        object.key("Type").string(var_94.as_str());
    }
    if let Some(var_95) = &input.vpc_connection_properties {
        let mut object_96 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_96,
            var_95,
        );
        object_96.finish();
    }
}

pub fn serialize_structure_crate_input_create_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFolderInput,
) {
    if let Some(var_97) = &input.folder_type {
        object.key("FolderType").string(var_97.as_str());
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98);
    }
    if let Some(var_99) = &input.parent_folder_arn {
        object.key("ParentFolderArn").string(var_99);
    }
    if let Some(var_100) = &input.permissions {
        let mut array_101 = object.key("Permissions").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_103,
                    item_102,
                );
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_107, item_106);
                object_107.finish();
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) {
    if let Some(var_108) = &input.description {
        object.key("Description").string(var_108);
    }
    if let Some(var_109) = &input.group_name {
        object.key("GroupName").string(var_109);
    }
}

pub fn serialize_structure_crate_input_create_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIamPolicyAssignmentInput,
) {
    if let Some(var_110) = &input.assignment_name {
        object.key("AssignmentName").string(var_110);
    }
    if let Some(var_111) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_111.as_str());
    }
    if let Some(var_112) = &input.identities {
        let mut object_113 = object.key("Identities").start_object();
        for (key_114, value_115) in var_112 {
            {
                let mut array_116 = object_113.key(key_114).start_array();
                for item_117 in value_115 {
                    {
                        array_116.value().string(item_117);
                    }
                }
                array_116.finish();
            }
        }
        object_113.finish();
    }
    if let Some(var_118) = &input.policy_arn {
        object.key("PolicyArn").string(var_118);
    }
}

pub fn serialize_structure_crate_input_create_ingestion_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIngestionInput,
) {
    if let Some(var_119) = &input.ingestion_type {
        object.key("IngestionType").string(var_119.as_str());
    }
}

pub fn serialize_structure_crate_input_create_namespace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNamespaceInput,
) {
    if let Some(var_120) = &input.identity_store {
        object.key("IdentityStore").string(var_120.as_str());
    }
    if let Some(var_121) = &input.namespace {
        object.key("Namespace").string(var_121);
    }
    if let Some(var_122) = &input.tags {
        let mut array_123 = object.key("Tags").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_125, item_124);
                object_125.finish();
            }
        }
        array_123.finish();
    }
}

pub fn serialize_structure_crate_input_create_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateInput,
) {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126);
    }
    if let Some(var_127) = &input.permissions {
        let mut array_128 = object.key("Permissions").start_array();
        for item_129 in var_127 {
            {
                let mut object_130 = array_128.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_130,
                    item_129,
                );
                object_130.finish();
            }
        }
        array_128.finish();
    }
    if let Some(var_131) = &input.source_entity {
        let mut object_132 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_132,
            var_131,
        );
        object_132.finish();
    }
    if let Some(var_133) = &input.tags {
        let mut array_134 = object.key("Tags").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_136, item_135);
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.version_description {
        object.key("VersionDescription").string(var_137);
    }
}

pub fn serialize_structure_crate_input_create_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateAliasInput,
) {
    if let Some(var_138) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
}

pub fn serialize_structure_crate_input_create_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeInput,
) {
    if let Some(var_139) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_139);
    }
    if let Some(var_140) = &input.configuration {
        let mut object_141 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_141,
            var_140,
        );
        object_141.finish();
    }
    if let Some(var_142) = &input.name {
        object.key("Name").string(var_142);
    }
    if let Some(var_143) = &input.permissions {
        let mut array_144 = object.key("Permissions").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_146,
                    item_145,
                );
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.tags {
        let mut array_148 = object.key("Tags").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_150, item_149);
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.version_description {
        object.key("VersionDescription").string(var_151);
    }
}

pub fn serialize_structure_crate_input_create_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeAliasInput,
) {
    if let Some(var_152) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
}

pub fn serialize_structure_crate_input_generate_embed_url_for_anonymous_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForAnonymousUserInput,
) {
    if let Some(var_153) = &input.authorized_resource_arns {
        let mut array_154 = object.key("AuthorizedResourceArns").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155);
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.experience_configuration {
        let mut object_157 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(&mut object_157, var_156);
        object_157.finish();
    }
    if let Some(var_158) = &input.namespace {
        object.key("Namespace").string(var_158);
    }
    if let Some(var_159) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.session_tags {
        let mut array_161 = object.key("SessionTags").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_tag(
                    &mut object_163,
                    item_162,
                );
                object_163.finish();
            }
        }
        array_161.finish();
    }
}

pub fn serialize_structure_crate_input_generate_embed_url_for_registered_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForRegisteredUserInput,
) {
    if let Some(var_164) = &input.experience_configuration {
        let mut object_165 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_embedding_experience_configuration(&mut object_165, var_164);
        object_165.finish();
    }
    if let Some(var_166) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.user_arn {
        object.key("UserArn").string(var_167);
    }
}

pub fn serialize_structure_crate_input_list_iam_policy_assignments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIamPolicyAssignmentsInput,
) {
    if let Some(var_168) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_168.as_str());
    }
}

pub fn serialize_structure_crate_input_register_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUserInput,
) {
    if let Some(var_169) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_169);
    }
    if let Some(var_170) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_170);
    }
    if let Some(var_171) = &input.email {
        object.key("Email").string(var_171);
    }
    if let Some(var_172) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_172);
    }
    if let Some(var_173) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_173);
    }
    if let Some(var_174) = &input.iam_arn {
        object.key("IamArn").string(var_174);
    }
    if let Some(var_175) = &input.identity_type {
        object.key("IdentityType").string(var_175.as_str());
    }
    if let Some(var_176) = &input.session_name {
        object.key("SessionName").string(var_176);
    }
    if let Some(var_177) = &input.user_name {
        object.key("UserName").string(var_177);
    }
    if let Some(var_178) = &input.user_role {
        object.key("UserRole").string(var_178.as_str());
    }
}

pub fn serialize_structure_crate_input_search_analyses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAnalysesInput,
) {
    if let Some(var_179) = &input.filters {
        let mut array_180 = object.key("Filters").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_crate_model_analysis_search_filter(
                    &mut object_182,
                    item_181,
                );
                object_182.finish();
            }
        }
        array_180.finish();
    }
    if let Some(var_183) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184);
    }
}

pub fn serialize_structure_crate_input_search_dashboards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDashboardsInput,
) {
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("Filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dashboard_search_filter(
                    &mut object_188,
                    item_187,
                );
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("NextToken").string(var_190);
    }
}

pub fn serialize_structure_crate_input_search_folders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFoldersInput,
) {
    if let Some(var_191) = &input.filters {
        let mut array_192 = object.key("Filters").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_search_filter(
                    &mut object_194,
                    item_193,
                );
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_195).into()),
        );
    }
    if let Some(var_196) = &input.next_token {
        object.key("NextToken").string(var_196);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_197) = &input.tags {
        let mut array_198 = object.key("Tags").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_200, item_199);
                object_200.finish();
            }
        }
        array_198.finish();
    }
}

pub fn serialize_structure_crate_input_update_account_customization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountCustomizationInput,
) {
    if let Some(var_201) = &input.account_customization {
        let mut object_202 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_202,
            var_201,
        );
        object_202.finish();
    }
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) {
    if let Some(var_203) = &input.default_namespace {
        object.key("DefaultNamespace").string(var_203);
    }
    if let Some(var_204) = &input.notification_email {
        object.key("NotificationEmail").string(var_204);
    }
}

pub fn serialize_structure_crate_input_update_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisInput,
) {
    if let Some(var_205) = &input.name {
        object.key("Name").string(var_205);
    }
    if let Some(var_206) = &input.parameters {
        let mut object_207 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_207, var_206);
        object_207.finish();
    }
    if let Some(var_208) = &input.source_entity {
        let mut object_209 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_209,
            var_208,
        );
        object_209.finish();
    }
    if let Some(var_210) = &input.theme_arn {
        object.key("ThemeArn").string(var_210);
    }
}

pub fn serialize_structure_crate_input_update_analysis_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisPermissionsInput,
) {
    if let Some(var_211) = &input.grant_permissions {
        let mut array_212 = object.key("GrantPermissions").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_214,
                    item_213,
                );
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.revoke_permissions {
        let mut array_216 = object.key("RevokePermissions").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_218,
                    item_217,
                );
                object_218.finish();
            }
        }
        array_216.finish();
    }
}

pub fn serialize_structure_crate_input_update_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) {
    if let Some(var_219) = &input.dashboard_publish_options {
        let mut object_220 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_220,
            var_219,
        );
        object_220.finish();
    }
    if let Some(var_221) = &input.name {
        object.key("Name").string(var_221);
    }
    if let Some(var_222) = &input.parameters {
        let mut object_223 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_223, var_222);
        object_223.finish();
    }
    if let Some(var_224) = &input.source_entity {
        let mut object_225 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_225,
            var_224,
        );
        object_225.finish();
    }
    if let Some(var_226) = &input.theme_arn {
        object.key("ThemeArn").string(var_226);
    }
    if let Some(var_227) = &input.version_description {
        object.key("VersionDescription").string(var_227);
    }
}

pub fn serialize_structure_crate_input_update_dashboard_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardPermissionsInput,
) {
    if let Some(var_228) = &input.grant_permissions {
        let mut array_229 = object.key("GrantPermissions").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_231,
                    item_230,
                );
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.revoke_permissions {
        let mut array_233 = object.key("RevokePermissions").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_235,
                    item_234,
                );
                object_235.finish();
            }
        }
        array_233.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) {
    if let Some(var_236) = &input.column_groups {
        let mut array_237 = object.key("ColumnGroups").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_239,
                    item_238,
                );
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.column_level_permission_rules {
        let mut array_241 = object.key("ColumnLevelPermissionRules").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_243,
                    item_242,
                );
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.data_set_usage_configuration {
        let mut object_245 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_245,
            var_244,
        );
        object_245.finish();
    }
    if let Some(var_246) = &input.field_folders {
        let mut object_247 = object.key("FieldFolders").start_object();
        for (key_248, value_249) in var_246 {
            {
                let mut object_250 = object_247.key(key_248).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_250,
                    value_249,
                );
                object_250.finish();
            }
        }
        object_247.finish();
    }
    if let Some(var_251) = &input.import_mode {
        object.key("ImportMode").string(var_251.as_str());
    }
    if let Some(var_252) = &input.logical_table_map {
        let mut object_253 = object.key("LogicalTableMap").start_object();
        for (key_254, value_255) in var_252 {
            {
                let mut object_256 = object_253.key(key_254).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_256,
                    value_255,
                );
                object_256.finish();
            }
        }
        object_253.finish();
    }
    if let Some(var_257) = &input.name {
        object.key("Name").string(var_257);
    }
    if let Some(var_258) = &input.physical_table_map {
        let mut object_259 = object.key("PhysicalTableMap").start_object();
        for (key_260, value_261) in var_258 {
            {
                let mut object_262 = object_259.key(key_260).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_262,
                    value_261,
                );
                object_262.finish();
            }
        }
        object_259.finish();
    }
    if let Some(var_263) = &input.row_level_permission_data_set {
        let mut object_264 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_264,
            var_263,
        );
        object_264.finish();
    }
    if let Some(var_265) = &input.row_level_permission_tag_configuration {
        let mut object_266 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_266,
            var_265,
        );
        object_266.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_set_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetPermissionsInput,
) {
    if let Some(var_267) = &input.grant_permissions {
        let mut array_268 = object.key("GrantPermissions").start_array();
        for item_269 in var_267 {
            {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_270,
                    item_269,
                );
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.revoke_permissions {
        let mut array_272 = object.key("RevokePermissions").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_274,
                    item_273,
                );
                object_274.finish();
            }
        }
        array_272.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_275) = &input.credentials {
        let mut object_276 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.data_source_parameters {
        let mut object_278 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
    if let Some(var_279) = &input.name {
        object.key("Name").string(var_279);
    }
    if let Some(var_280) = &input.ssl_properties {
        let mut object_281 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_281, var_280);
        object_281.finish();
    }
    if let Some(var_282) = &input.vpc_connection_properties {
        let mut object_283 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_283,
            var_282,
        );
        object_283.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourcePermissionsInput,
) {
    if let Some(var_284) = &input.grant_permissions {
        let mut array_285 = object.key("GrantPermissions").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_287,
                    item_286,
                );
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.revoke_permissions {
        let mut array_289 = object.key("RevokePermissions").start_array();
        for item_290 in var_288 {
            {
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_291,
                    item_290,
                );
                object_291.finish();
            }
        }
        array_289.finish();
    }
}

pub fn serialize_structure_crate_input_update_folder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderInput,
) {
    if let Some(var_292) = &input.name {
        object.key("Name").string(var_292);
    }
}

pub fn serialize_structure_crate_input_update_folder_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderPermissionsInput,
) {
    if let Some(var_293) = &input.grant_permissions {
        let mut array_294 = object.key("GrantPermissions").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_296,
                    item_295,
                );
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.revoke_permissions {
        let mut array_298 = object.key("RevokePermissions").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_300,
                    item_299,
                );
                object_300.finish();
            }
        }
        array_298.finish();
    }
}

pub fn serialize_structure_crate_input_update_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) {
    if let Some(var_301) = &input.description {
        object.key("Description").string(var_301);
    }
}

pub fn serialize_structure_crate_input_update_iam_policy_assignment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIamPolicyAssignmentInput,
) {
    if let Some(var_302) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_302.as_str());
    }
    if let Some(var_303) = &input.identities {
        let mut object_304 = object.key("Identities").start_object();
        for (key_305, value_306) in var_303 {
            {
                let mut array_307 = object_304.key(key_305).start_array();
                for item_308 in value_306 {
                    {
                        array_307.value().string(item_308);
                    }
                }
                array_307.finish();
            }
        }
        object_304.finish();
    }
    if let Some(var_309) = &input.policy_arn {
        object.key("PolicyArn").string(var_309);
    }
}

pub fn serialize_structure_crate_input_update_ip_restriction_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIpRestrictionInput,
) {
    if let Some(var_310) = &input.enabled {
        object.key("Enabled").boolean(*var_310);
    }
    if let Some(var_311) = &input.ip_restriction_rule_map {
        let mut object_312 = object.key("IpRestrictionRuleMap").start_object();
        for (key_313, value_314) in var_311 {
            {
                object_312.key(key_313).string(value_314);
            }
        }
        object_312.finish();
    }
}

pub fn serialize_structure_crate_input_update_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateInput,
) {
    if let Some(var_315) = &input.name {
        object.key("Name").string(var_315);
    }
    if let Some(var_316) = &input.source_entity {
        let mut object_317 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_317,
            var_316,
        );
        object_317.finish();
    }
    if let Some(var_318) = &input.version_description {
        object.key("VersionDescription").string(var_318);
    }
}

pub fn serialize_structure_crate_input_update_template_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateAliasInput,
) {
    if let Some(var_319) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_319).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_template_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplatePermissionsInput,
) {
    if let Some(var_320) = &input.grant_permissions {
        let mut array_321 = object.key("GrantPermissions").start_array();
        for item_322 in var_320 {
            {
                let mut object_323 = array_321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_323,
                    item_322,
                );
                object_323.finish();
            }
        }
        array_321.finish();
    }
    if let Some(var_324) = &input.revoke_permissions {
        let mut array_325 = object.key("RevokePermissions").start_array();
        for item_326 in var_324 {
            {
                let mut object_327 = array_325.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_327,
                    item_326,
                );
                object_327.finish();
            }
        }
        array_325.finish();
    }
}

pub fn serialize_structure_crate_input_update_theme_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeInput,
) {
    if let Some(var_328) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_328);
    }
    if let Some(var_329) = &input.configuration {
        let mut object_330 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_330,
            var_329,
        );
        object_330.finish();
    }
    if let Some(var_331) = &input.name {
        object.key("Name").string(var_331);
    }
    if let Some(var_332) = &input.version_description {
        object.key("VersionDescription").string(var_332);
    }
}

pub fn serialize_structure_crate_input_update_theme_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeAliasInput,
) {
    if let Some(var_333) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_333).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_theme_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemePermissionsInput,
) {
    if let Some(var_334) = &input.grant_permissions {
        let mut array_335 = object.key("GrantPermissions").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_337,
                    item_336,
                );
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.revoke_permissions {
        let mut array_339 = object.key("RevokePermissions").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_341,
                    item_340,
                );
                object_341.finish();
            }
        }
        array_339.finish();
    }
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) {
    if let Some(var_342) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_342);
    }
    if let Some(var_343) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_343);
    }
    if let Some(var_344) = &input.email {
        object.key("Email").string(var_344);
    }
    if let Some(var_345) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_345);
    }
    if let Some(var_346) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_346);
    }
    if let Some(var_347) = &input.role {
        object.key("Role").string(var_347.as_str());
    }
    if input.unapply_custom_permissions {
        object
            .key("UnapplyCustomPermissions")
            .boolean(input.unapply_custom_permissions);
    }
}

pub fn serialize_structure_crate_model_account_customization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountCustomization,
) {
    if let Some(var_348) = &input.default_theme {
        object.key("DefaultTheme").string(var_348);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_349) = &input.key {
        object.key("Key").string(var_349);
    }
    if let Some(var_350) = &input.value {
        object.key("Value").string(var_350);
    }
}

pub fn serialize_structure_crate_model_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameters,
) {
    if let Some(var_351) = &input.string_parameters {
        let mut array_352 = object.key("StringParameters").start_array();
        for item_353 in var_351 {
            {
                let mut object_354 = array_352.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_parameter(
                    &mut object_354,
                    item_353,
                );
                object_354.finish();
            }
        }
        array_352.finish();
    }
    if let Some(var_355) = &input.integer_parameters {
        let mut array_356 = object.key("IntegerParameters").start_array();
        for item_357 in var_355 {
            {
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter(
                    &mut object_358,
                    item_357,
                );
                object_358.finish();
            }
        }
        array_356.finish();
    }
    if let Some(var_359) = &input.decimal_parameters {
        let mut array_360 = object.key("DecimalParameters").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_decimal_parameter(
                    &mut object_362,
                    item_361,
                );
                object_362.finish();
            }
        }
        array_360.finish();
    }
    if let Some(var_363) = &input.date_time_parameters {
        let mut array_364 = object.key("DateTimeParameters").start_array();
        for item_365 in var_363 {
            {
                let mut object_366 = array_364.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_time_parameter(
                    &mut object_366,
                    item_365,
                );
                object_366.finish();
            }
        }
        array_364.finish();
    }
}

pub fn serialize_structure_crate_model_resource_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) {
    if let Some(var_367) = &input.principal {
        object.key("Principal").string(var_367);
    }
    if let Some(var_368) = &input.actions {
        let mut array_369 = object.key("Actions").start_array();
        for item_370 in var_368 {
            {
                array_369.value().string(item_370);
            }
        }
        array_369.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceEntity,
) {
    if let Some(var_371) = &input.source_template {
        let mut object_372 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_template(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
}

pub fn serialize_structure_crate_model_dashboard_publish_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardPublishOptions,
) {
    if let Some(var_373) = &input.ad_hoc_filtering_option {
        let mut object_374 = object.key("AdHocFilteringOption").start_object();
        crate::json_ser::serialize_structure_crate_model_ad_hoc_filtering_option(
            &mut object_374,
            var_373,
        );
        object_374.finish();
    }
    if let Some(var_375) = &input.export_to_csv_option {
        let mut object_376 = object.key("ExportToCSVOption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_to_csv_option(
            &mut object_376,
            var_375,
        );
        object_376.finish();
    }
    if let Some(var_377) = &input.sheet_controls_option {
        let mut object_378 = object.key("SheetControlsOption").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_controls_option(
            &mut object_378,
            var_377,
        );
        object_378.finish();
    }
}

pub fn serialize_structure_crate_model_dashboard_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceEntity,
) {
    if let Some(var_379) = &input.source_template {
        let mut object_380 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_template(
            &mut object_380,
            var_379,
        );
        object_380.finish();
    }
}

pub fn serialize_structure_crate_model_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnGroup,
) {
    if let Some(var_381) = &input.geo_spatial_column_group {
        let mut object_382 = object.key("GeoSpatialColumnGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_spatial_column_group(
            &mut object_382,
            var_381,
        );
        object_382.finish();
    }
}

pub fn serialize_structure_crate_model_column_level_permission_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnLevelPermissionRule,
) {
    if let Some(var_383) = &input.principals {
        let mut array_384 = object.key("Principals").start_array();
        for item_385 in var_383 {
            {
                array_384.value().string(item_385);
            }
        }
        array_384.finish();
    }
    if let Some(var_386) = &input.column_names {
        let mut array_387 = object.key("ColumnNames").start_array();
        for item_388 in var_386 {
            {
                array_387.value().string(item_388);
            }
        }
        array_387.finish();
    }
}

pub fn serialize_structure_crate_model_data_set_usage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetUsageConfiguration,
) {
    if input.disable_use_as_direct_query_source {
        object
            .key("DisableUseAsDirectQuerySource")
            .boolean(input.disable_use_as_direct_query_source);
    }
    if input.disable_use_as_imported_source {
        object
            .key("DisableUseAsImportedSource")
            .boolean(input.disable_use_as_imported_source);
    }
}

pub fn serialize_structure_crate_model_field_folder(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldFolder,
) {
    if let Some(var_389) = &input.description {
        object.key("description").string(var_389);
    }
    if let Some(var_390) = &input.columns {
        let mut array_391 = object.key("columns").start_array();
        for item_392 in var_390 {
            {
                array_391.value().string(item_392);
            }
        }
        array_391.finish();
    }
}

pub fn serialize_structure_crate_model_logical_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTable,
) {
    if let Some(var_393) = &input.alias {
        object.key("Alias").string(var_393);
    }
    if let Some(var_394) = &input.data_transforms {
        let mut array_395 = object.key("DataTransforms").start_array();
        for item_396 in var_394 {
            {
                let mut object_397 = array_395.value().start_object();
                crate::json_ser::serialize_union_crate_model_transform_operation(
                    &mut object_397,
                    item_396,
                );
                object_397.finish();
            }
        }
        array_395.finish();
    }
    if let Some(var_398) = &input.source {
        let mut object_399 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_logical_table_source(
            &mut object_399,
            var_398,
        );
        object_399.finish();
    }
}

pub fn serialize_union_crate_model_physical_table(
    object_69: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalTable,
) {
    match input {
        crate::model::PhysicalTable::RelationalTable(inner) => {
            let mut object_400 = object_69.key("RelationalTable").start_object();
            crate::json_ser::serialize_structure_crate_model_relational_table(
                &mut object_400,
                inner,
            );
            object_400.finish();
        }
        crate::model::PhysicalTable::CustomSql(inner) => {
            let mut object_401 = object_69.key("CustomSql").start_object();
            crate::json_ser::serialize_structure_crate_model_custom_sql(&mut object_401, inner);
            object_401.finish();
        }
        crate::model::PhysicalTable::S3Source(inner) => {
            let mut object_402 = object_69.key("S3Source").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_source(&mut object_402, inner);
            object_402.finish();
        }
    }
}

pub fn serialize_structure_crate_model_row_level_permission_data_set(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionDataSet,
) {
    if let Some(var_403) = &input.namespace {
        object.key("Namespace").string(var_403);
    }
    if let Some(var_404) = &input.arn {
        object.key("Arn").string(var_404);
    }
    if let Some(var_405) = &input.permission_policy {
        object.key("PermissionPolicy").string(var_405.as_str());
    }
    if let Some(var_406) = &input.format_version {
        object.key("FormatVersion").string(var_406.as_str());
    }
    if let Some(var_407) = &input.status {
        object.key("Status").string(var_407.as_str());
    }
}

pub fn serialize_structure_crate_model_row_level_permission_tag_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagConfiguration,
) {
    if let Some(var_408) = &input.status {
        object.key("Status").string(var_408.as_str());
    }
    if let Some(var_409) = &input.tag_rules {
        let mut array_410 = object.key("TagRules").start_array();
        for item_411 in var_409 {
            {
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_rule(
                    &mut object_412,
                    item_411,
                );
                object_412.finish();
            }
        }
        array_410.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceCredentials,
) {
    if let Some(var_413) = &input.credential_pair {
        let mut object_414 = object.key("CredentialPair").start_object();
        crate::json_ser::serialize_structure_crate_model_credential_pair(&mut object_414, var_413);
        object_414.finish();
    }
    if let Some(var_415) = &input.copy_source_arn {
        object.key("CopySourceArn").string(var_415);
    }
}

pub fn serialize_union_crate_model_data_source_parameters(
    object_82: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceParameters,
) {
    match input {
        crate::model::DataSourceParameters::AmazonElasticsearchParameters(inner) => {
            let mut object_416 = object_82
                .key("AmazonElasticsearchParameters")
                .start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_elasticsearch_parameters(
                &mut object_416,
                inner,
            );
            object_416.finish();
        }
        crate::model::DataSourceParameters::AthenaParameters(inner) => {
            let mut object_417 = object_82.key("AthenaParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_athena_parameters(
                &mut object_417,
                inner,
            );
            object_417.finish();
        }
        crate::model::DataSourceParameters::AuroraParameters(inner) => {
            let mut object_418 = object_82.key("AuroraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_parameters(
                &mut object_418,
                inner,
            );
            object_418.finish();
        }
        crate::model::DataSourceParameters::AuroraPostgreSqlParameters(inner) => {
            let mut object_419 = object_82.key("AuroraPostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_postgre_sql_parameters(
                &mut object_419,
                inner,
            );
            object_419.finish();
        }
        crate::model::DataSourceParameters::AwsIotAnalyticsParameters(inner) => {
            let mut object_420 = object_82.key("AwsIotAnalyticsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_iot_analytics_parameters(
                &mut object_420,
                inner,
            );
            object_420.finish();
        }
        crate::model::DataSourceParameters::JiraParameters(inner) => {
            let mut object_421 = object_82.key("JiraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_jira_parameters(
                &mut object_421,
                inner,
            );
            object_421.finish();
        }
        crate::model::DataSourceParameters::MariaDbParameters(inner) => {
            let mut object_422 = object_82.key("MariaDbParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_maria_db_parameters(
                &mut object_422,
                inner,
            );
            object_422.finish();
        }
        crate::model::DataSourceParameters::MySqlParameters(inner) => {
            let mut object_423 = object_82.key("MySqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_my_sql_parameters(
                &mut object_423,
                inner,
            );
            object_423.finish();
        }
        crate::model::DataSourceParameters::OracleParameters(inner) => {
            let mut object_424 = object_82.key("OracleParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_oracle_parameters(
                &mut object_424,
                inner,
            );
            object_424.finish();
        }
        crate::model::DataSourceParameters::PostgreSqlParameters(inner) => {
            let mut object_425 = object_82.key("PostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_postgre_sql_parameters(
                &mut object_425,
                inner,
            );
            object_425.finish();
        }
        crate::model::DataSourceParameters::PrestoParameters(inner) => {
            let mut object_426 = object_82.key("PrestoParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_presto_parameters(
                &mut object_426,
                inner,
            );
            object_426.finish();
        }
        crate::model::DataSourceParameters::RdsParameters(inner) => {
            let mut object_427 = object_82.key("RdsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_rds_parameters(&mut object_427, inner);
            object_427.finish();
        }
        crate::model::DataSourceParameters::RedshiftParameters(inner) => {
            let mut object_428 = object_82.key("RedshiftParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_redshift_parameters(
                &mut object_428,
                inner,
            );
            object_428.finish();
        }
        crate::model::DataSourceParameters::S3Parameters(inner) => {
            let mut object_429 = object_82.key("S3Parameters").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_parameters(&mut object_429, inner);
            object_429.finish();
        }
        crate::model::DataSourceParameters::ServiceNowParameters(inner) => {
            let mut object_430 = object_82.key("ServiceNowParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_service_now_parameters(
                &mut object_430,
                inner,
            );
            object_430.finish();
        }
        crate::model::DataSourceParameters::SnowflakeParameters(inner) => {
            let mut object_431 = object_82.key("SnowflakeParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_snowflake_parameters(
                &mut object_431,
                inner,
            );
            object_431.finish();
        }
        crate::model::DataSourceParameters::SparkParameters(inner) => {
            let mut object_432 = object_82.key("SparkParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_spark_parameters(
                &mut object_432,
                inner,
            );
            object_432.finish();
        }
        crate::model::DataSourceParameters::SqlServerParameters(inner) => {
            let mut object_433 = object_82.key("SqlServerParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_sql_server_parameters(
                &mut object_433,
                inner,
            );
            object_433.finish();
        }
        crate::model::DataSourceParameters::TeradataParameters(inner) => {
            let mut object_434 = object_82.key("TeradataParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_teradata_parameters(
                &mut object_434,
                inner,
            );
            object_434.finish();
        }
        crate::model::DataSourceParameters::TwitterParameters(inner) => {
            let mut object_435 = object_82.key("TwitterParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_twitter_parameters(
                &mut object_435,
                inner,
            );
            object_435.finish();
        }
        crate::model::DataSourceParameters::AmazonOpenSearchParameters(inner) => {
            let mut object_436 = object_82.key("AmazonOpenSearchParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_open_search_parameters(
                &mut object_436,
                inner,
            );
            object_436.finish();
        }
    }
}

pub fn serialize_structure_crate_model_ssl_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SslProperties,
) {
    if input.disable_ssl {
        object.key("DisableSsl").boolean(input.disable_ssl);
    }
}

pub fn serialize_structure_crate_model_vpc_connection_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConnectionProperties,
) {
    if let Some(var_437) = &input.vpc_connection_arn {
        object.key("VpcConnectionArn").string(var_437);
    }
}

pub fn serialize_structure_crate_model_template_source_entity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceEntity,
) {
    if let Some(var_438) = &input.source_analysis {
        let mut object_439 = object.key("SourceAnalysis").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_analysis(
            &mut object_439,
            var_438,
        );
        object_439.finish();
    }
    if let Some(var_440) = &input.source_template {
        let mut object_441 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_template(
            &mut object_441,
            var_440,
        );
        object_441.finish();
    }
}

pub fn serialize_structure_crate_model_theme_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeConfiguration,
) {
    if let Some(var_442) = &input.data_color_palette {
        let mut object_443 = object.key("DataColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_data_color_palette(
            &mut object_443,
            var_442,
        );
        object_443.finish();
    }
    if let Some(var_444) = &input.ui_color_palette {
        let mut object_445 = object.key("UIColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_color_palette(&mut object_445, var_444);
        object_445.finish();
    }
    if let Some(var_446) = &input.sheet {
        let mut object_447 = object.key("Sheet").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_style(&mut object_447, var_446);
        object_447.finish();
    }
}

pub fn serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserEmbeddingExperienceConfiguration,
) {
    if let Some(var_448) = &input.dashboard {
        let mut object_449 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(&mut object_449, var_448);
        object_449.finish();
    }
}

pub fn serialize_structure_crate_model_session_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionTag,
) {
    if let Some(var_450) = &input.key {
        object.key("Key").string(var_450);
    }
    if let Some(var_451) = &input.value {
        object.key("Value").string(var_451);
    }
}

pub fn serialize_structure_crate_model_registered_user_embedding_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserEmbeddingExperienceConfiguration,
) {
    if let Some(var_452) = &input.dashboard {
        let mut object_453 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(&mut object_453, var_452);
        object_453.finish();
    }
    if let Some(var_454) = &input.quick_sight_console {
        let mut object_455 = object.key("QuickSightConsole").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(&mut object_455, var_454);
        object_455.finish();
    }
    if let Some(var_456) = &input.q_search_bar {
        let mut object_457 = object.key("QSearchBar").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(&mut object_457, var_456);
        object_457.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSearchFilter,
) {
    if let Some(var_458) = &input.operator {
        object.key("Operator").string(var_458.as_str());
    }
    if let Some(var_459) = &input.name {
        object.key("Name").string(var_459.as_str());
    }
    if let Some(var_460) = &input.value {
        object.key("Value").string(var_460);
    }
}

pub fn serialize_structure_crate_model_dashboard_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSearchFilter,
) {
    if let Some(var_461) = &input.operator {
        object.key("Operator").string(var_461.as_str());
    }
    if let Some(var_462) = &input.name {
        object.key("Name").string(var_462.as_str());
    }
    if let Some(var_463) = &input.value {
        object.key("Value").string(var_463);
    }
}

pub fn serialize_structure_crate_model_folder_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderSearchFilter,
) {
    if let Some(var_464) = &input.operator {
        object.key("Operator").string(var_464.as_str());
    }
    if let Some(var_465) = &input.name {
        object.key("Name").string(var_465.as_str());
    }
    if let Some(var_466) = &input.value {
        object.key("Value").string(var_466);
    }
}

pub fn serialize_structure_crate_model_string_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringParameter,
) {
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467);
    }
    if let Some(var_468) = &input.values {
        let mut array_469 = object.key("Values").start_array();
        for item_470 in var_468 {
            {
                array_469.value().string(item_470);
            }
        }
        array_469.finish();
    }
}

pub fn serialize_structure_crate_model_integer_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameter,
) {
    if let Some(var_471) = &input.name {
        object.key("Name").string(var_471);
    }
    if let Some(var_472) = &input.values {
        let mut array_473 = object.key("Values").start_array();
        for item_474 in var_472 {
            {
                array_473.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_474).into()),
                );
            }
        }
        array_473.finish();
    }
}

pub fn serialize_structure_crate_model_decimal_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalParameter,
) {
    if let Some(var_475) = &input.name {
        object.key("Name").string(var_475);
    }
    if let Some(var_476) = &input.values {
        let mut array_477 = object.key("Values").start_array();
        for item_478 in var_476 {
            {
                array_477.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_478).into()),
                );
            }
        }
        array_477.finish();
    }
}

pub fn serialize_structure_crate_model_date_time_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateTimeParameter,
) {
    if let Some(var_479) = &input.name {
        object.key("Name").string(var_479);
    }
    if let Some(var_480) = &input.values {
        let mut array_481 = object.key("Values").start_array();
        for item_482 in var_480 {
            {
                array_481
                    .value()
                    .instant(item_482, aws_smithy_types::instant::Format::EpochSeconds);
            }
        }
        array_481.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceTemplate,
) {
    if let Some(var_483) = &input.data_set_references {
        let mut array_484 = object.key("DataSetReferences").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_486,
                    item_485,
                );
                object_486.finish();
            }
        }
        array_484.finish();
    }
    if let Some(var_487) = &input.arn {
        object.key("Arn").string(var_487);
    }
}

pub fn serialize_structure_crate_model_ad_hoc_filtering_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdHocFilteringOption,
) {
    if let Some(var_488) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_488.as_str());
    }
}

pub fn serialize_structure_crate_model_export_to_csv_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportToCsvOption,
) {
    if let Some(var_489) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_489.as_str());
    }
}

pub fn serialize_structure_crate_model_sheet_controls_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetControlsOption,
) {
    if let Some(var_490) = &input.visibility_state {
        object.key("VisibilityState").string(var_490.as_str());
    }
}

pub fn serialize_structure_crate_model_dashboard_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceTemplate,
) {
    if let Some(var_491) = &input.data_set_references {
        let mut array_492 = object.key("DataSetReferences").start_array();
        for item_493 in var_491 {
            {
                let mut object_494 = array_492.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_494,
                    item_493,
                );
                object_494.finish();
            }
        }
        array_492.finish();
    }
    if let Some(var_495) = &input.arn {
        object.key("Arn").string(var_495);
    }
}

pub fn serialize_structure_crate_model_geo_spatial_column_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoSpatialColumnGroup,
) {
    if let Some(var_496) = &input.name {
        object.key("Name").string(var_496);
    }
    if let Some(var_497) = &input.country_code {
        object.key("CountryCode").string(var_497.as_str());
    }
    if let Some(var_498) = &input.columns {
        let mut array_499 = object.key("Columns").start_array();
        for item_500 in var_498 {
            {
                array_499.value().string(item_500);
            }
        }
        array_499.finish();
    }
}

pub fn serialize_union_crate_model_transform_operation(
    object_397: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOperation,
) {
    match input {
        crate::model::TransformOperation::ProjectOperation(inner) => {
            let mut object_501 = object_397.key("ProjectOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_project_operation(
                &mut object_501,
                inner,
            );
            object_501.finish();
        }
        crate::model::TransformOperation::FilterOperation(inner) => {
            let mut object_502 = object_397.key("FilterOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_filter_operation(
                &mut object_502,
                inner,
            );
            object_502.finish();
        }
        crate::model::TransformOperation::CreateColumnsOperation(inner) => {
            let mut object_503 = object_397.key("CreateColumnsOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_create_columns_operation(
                &mut object_503,
                inner,
            );
            object_503.finish();
        }
        crate::model::TransformOperation::RenameColumnOperation(inner) => {
            let mut object_504 = object_397.key("RenameColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_rename_column_operation(
                &mut object_504,
                inner,
            );
            object_504.finish();
        }
        crate::model::TransformOperation::CastColumnTypeOperation(inner) => {
            let mut object_505 = object_397.key("CastColumnTypeOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_cast_column_type_operation(
                &mut object_505,
                inner,
            );
            object_505.finish();
        }
        crate::model::TransformOperation::TagColumnOperation(inner) => {
            let mut object_506 = object_397.key("TagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_tag_column_operation(
                &mut object_506,
                inner,
            );
            object_506.finish();
        }
        crate::model::TransformOperation::UntagColumnOperation(inner) => {
            let mut object_507 = object_397.key("UntagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_untag_column_operation(
                &mut object_507,
                inner,
            );
            object_507.finish();
        }
    }
}

pub fn serialize_structure_crate_model_logical_table_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTableSource,
) {
    if let Some(var_508) = &input.join_instruction {
        let mut object_509 = object.key("JoinInstruction").start_object();
        crate::json_ser::serialize_structure_crate_model_join_instruction(&mut object_509, var_508);
        object_509.finish();
    }
    if let Some(var_510) = &input.physical_table_id {
        object.key("PhysicalTableId").string(var_510);
    }
    if let Some(var_511) = &input.data_set_arn {
        object.key("DataSetArn").string(var_511);
    }
}

pub fn serialize_structure_crate_model_relational_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalTable,
) {
    if let Some(var_512) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_512);
    }
    if let Some(var_513) = &input.catalog {
        object.key("Catalog").string(var_513);
    }
    if let Some(var_514) = &input.schema {
        object.key("Schema").string(var_514);
    }
    if let Some(var_515) = &input.name {
        object.key("Name").string(var_515);
    }
    if let Some(var_516) = &input.input_columns {
        let mut array_517 = object.key("InputColumns").start_array();
        for item_518 in var_516 {
            {
                let mut object_519 = array_517.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_519,
                    item_518,
                );
                object_519.finish();
            }
        }
        array_517.finish();
    }
}

pub fn serialize_structure_crate_model_custom_sql(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSql,
) {
    if let Some(var_520) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_520);
    }
    if let Some(var_521) = &input.name {
        object.key("Name").string(var_521);
    }
    if let Some(var_522) = &input.sql_query {
        object.key("SqlQuery").string(var_522);
    }
    if let Some(var_523) = &input.columns {
        let mut array_524 = object.key("Columns").start_array();
        for item_525 in var_523 {
            {
                let mut object_526 = array_524.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_526,
                    item_525,
                );
                object_526.finish();
            }
        }
        array_524.finish();
    }
}

pub fn serialize_structure_crate_model_s3_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Source,
) {
    if let Some(var_527) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_527);
    }
    if let Some(var_528) = &input.upload_settings {
        let mut object_529 = object.key("UploadSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_upload_settings(&mut object_529, var_528);
        object_529.finish();
    }
    if let Some(var_530) = &input.input_columns {
        let mut array_531 = object.key("InputColumns").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_533,
                    item_532,
                );
                object_533.finish();
            }
        }
        array_531.finish();
    }
}

pub fn serialize_structure_crate_model_row_level_permission_tag_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagRule,
) {
    if let Some(var_534) = &input.tag_key {
        object.key("TagKey").string(var_534);
    }
    if let Some(var_535) = &input.column_name {
        object.key("ColumnName").string(var_535);
    }
    if let Some(var_536) = &input.tag_multi_value_delimiter {
        object.key("TagMultiValueDelimiter").string(var_536);
    }
    if let Some(var_537) = &input.match_all_value {
        object.key("MatchAllValue").string(var_537);
    }
}

pub fn serialize_structure_crate_model_credential_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CredentialPair,
) {
    if let Some(var_538) = &input.username {
        object.key("Username").string(var_538);
    }
    if let Some(var_539) = &input.password {
        object.key("Password").string(var_539);
    }
    if let Some(var_540) = &input.alternate_data_source_parameters {
        let mut array_541 = object.key("AlternateDataSourceParameters").start_array();
        for item_542 in var_540 {
            {
                let mut object_543 = array_541.value().start_object();
                crate::json_ser::serialize_union_crate_model_data_source_parameters(
                    &mut object_543,
                    item_542,
                );
                object_543.finish();
            }
        }
        array_541.finish();
    }
}

pub fn serialize_structure_crate_model_amazon_elasticsearch_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonElasticsearchParameters,
) {
    if let Some(var_544) = &input.domain {
        object.key("Domain").string(var_544);
    }
}

pub fn serialize_structure_crate_model_athena_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaParameters,
) {
    if let Some(var_545) = &input.work_group {
        object.key("WorkGroup").string(var_545);
    }
}

pub fn serialize_structure_crate_model_aurora_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraParameters,
) {
    if let Some(var_546) = &input.host {
        object.key("Host").string(var_546);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_547) = &input.database {
        object.key("Database").string(var_547);
    }
}

pub fn serialize_structure_crate_model_aurora_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraPostgreSqlParameters,
) {
    if let Some(var_548) = &input.host {
        object.key("Host").string(var_548);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_549) = &input.database {
        object.key("Database").string(var_549);
    }
}

pub fn serialize_structure_crate_model_aws_iot_analytics_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIotAnalyticsParameters,
) {
    if let Some(var_550) = &input.data_set_name {
        object.key("DataSetName").string(var_550);
    }
}

pub fn serialize_structure_crate_model_jira_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraParameters,
) {
    if let Some(var_551) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_551);
    }
}

pub fn serialize_structure_crate_model_maria_db_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MariaDbParameters,
) {
    if let Some(var_552) = &input.host {
        object.key("Host").string(var_552);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_553) = &input.database {
        object.key("Database").string(var_553);
    }
}

pub fn serialize_structure_crate_model_my_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlParameters,
) {
    if let Some(var_554) = &input.host {
        object.key("Host").string(var_554);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_555) = &input.database {
        object.key("Database").string(var_555);
    }
}

pub fn serialize_structure_crate_model_oracle_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleParameters,
) {
    if let Some(var_556) = &input.host {
        object.key("Host").string(var_556);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_557) = &input.database {
        object.key("Database").string(var_557);
    }
}

pub fn serialize_structure_crate_model_postgre_sql_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlParameters,
) {
    if let Some(var_558) = &input.host {
        object.key("Host").string(var_558);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_559) = &input.database {
        object.key("Database").string(var_559);
    }
}

pub fn serialize_structure_crate_model_presto_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrestoParameters,
) {
    if let Some(var_560) = &input.host {
        object.key("Host").string(var_560);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_561) = &input.catalog {
        object.key("Catalog").string(var_561);
    }
}

pub fn serialize_structure_crate_model_rds_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsParameters,
) {
    if let Some(var_562) = &input.instance_id {
        object.key("InstanceId").string(var_562);
    }
    if let Some(var_563) = &input.database {
        object.key("Database").string(var_563);
    }
}

pub fn serialize_structure_crate_model_redshift_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftParameters,
) {
    if let Some(var_564) = &input.host {
        object.key("Host").string(var_564);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_565) = &input.database {
        object.key("Database").string(var_565);
    }
    if let Some(var_566) = &input.cluster_id {
        object.key("ClusterId").string(var_566);
    }
}

pub fn serialize_structure_crate_model_s3_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Parameters,
) {
    if let Some(var_567) = &input.manifest_file_location {
        let mut object_568 = object.key("ManifestFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_manifest_file_location(
            &mut object_568,
            var_567,
        );
        object_568.finish();
    }
}

pub fn serialize_structure_crate_model_service_now_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowParameters,
) {
    if let Some(var_569) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_569);
    }
}

pub fn serialize_structure_crate_model_snowflake_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeParameters,
) {
    if let Some(var_570) = &input.host {
        object.key("Host").string(var_570);
    }
    if let Some(var_571) = &input.database {
        object.key("Database").string(var_571);
    }
    if let Some(var_572) = &input.warehouse {
        object.key("Warehouse").string(var_572);
    }
}

pub fn serialize_structure_crate_model_spark_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkParameters,
) {
    if let Some(var_573) = &input.host {
        object.key("Host").string(var_573);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
}

pub fn serialize_structure_crate_model_sql_server_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlServerParameters,
) {
    if let Some(var_574) = &input.host {
        object.key("Host").string(var_574);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_575) = &input.database {
        object.key("Database").string(var_575);
    }
}

pub fn serialize_structure_crate_model_teradata_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeradataParameters,
) {
    if let Some(var_576) = &input.host {
        object.key("Host").string(var_576);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_577) = &input.database {
        object.key("Database").string(var_577);
    }
}

pub fn serialize_structure_crate_model_twitter_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TwitterParameters,
) {
    if let Some(var_578) = &input.query {
        object.key("Query").string(var_578);
    }
    {
        object.key("MaxRows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_rows).into()),
        );
    }
}

pub fn serialize_structure_crate_model_amazon_open_search_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonOpenSearchParameters,
) {
    if let Some(var_579) = &input.domain {
        object.key("Domain").string(var_579);
    }
}

pub fn serialize_structure_crate_model_template_source_analysis(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceAnalysis,
) {
    if let Some(var_580) = &input.arn {
        object.key("Arn").string(var_580);
    }
    if let Some(var_581) = &input.data_set_references {
        let mut array_582 = object.key("DataSetReferences").start_array();
        for item_583 in var_581 {
            {
                let mut object_584 = array_582.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_584,
                    item_583,
                );
                object_584.finish();
            }
        }
        array_582.finish();
    }
}

pub fn serialize_structure_crate_model_template_source_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceTemplate,
) {
    if let Some(var_585) = &input.arn {
        object.key("Arn").string(var_585);
    }
}

pub fn serialize_structure_crate_model_data_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataColorPalette,
) {
    if let Some(var_586) = &input.colors {
        let mut array_587 = object.key("Colors").start_array();
        for item_588 in var_586 {
            {
                array_587.value().string(item_588);
            }
        }
        array_587.finish();
    }
    if let Some(var_589) = &input.min_max_gradient {
        let mut array_590 = object.key("MinMaxGradient").start_array();
        for item_591 in var_589 {
            {
                array_590.value().string(item_591);
            }
        }
        array_590.finish();
    }
    if let Some(var_592) = &input.empty_fill_color {
        object.key("EmptyFillColor").string(var_592);
    }
}

pub fn serialize_structure_crate_model_ui_color_palette(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiColorPalette,
) {
    if let Some(var_593) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_593);
    }
    if let Some(var_594) = &input.primary_background {
        object.key("PrimaryBackground").string(var_594);
    }
    if let Some(var_595) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_595);
    }
    if let Some(var_596) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_596);
    }
    if let Some(var_597) = &input.accent {
        object.key("Accent").string(var_597);
    }
    if let Some(var_598) = &input.accent_foreground {
        object.key("AccentForeground").string(var_598);
    }
    if let Some(var_599) = &input.danger {
        object.key("Danger").string(var_599);
    }
    if let Some(var_600) = &input.danger_foreground {
        object.key("DangerForeground").string(var_600);
    }
    if let Some(var_601) = &input.warning {
        object.key("Warning").string(var_601);
    }
    if let Some(var_602) = &input.warning_foreground {
        object.key("WarningForeground").string(var_602);
    }
    if let Some(var_603) = &input.success {
        object.key("Success").string(var_603);
    }
    if let Some(var_604) = &input.success_foreground {
        object.key("SuccessForeground").string(var_604);
    }
    if let Some(var_605) = &input.dimension {
        object.key("Dimension").string(var_605);
    }
    if let Some(var_606) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_606);
    }
    if let Some(var_607) = &input.measure {
        object.key("Measure").string(var_607);
    }
    if let Some(var_608) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_608);
    }
}

pub fn serialize_structure_crate_model_sheet_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetStyle,
) {
    if let Some(var_609) = &input.tile {
        let mut object_610 = object.key("Tile").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_style(&mut object_610, var_609);
        object_610.finish();
    }
    if let Some(var_611) = &input.tile_layout {
        let mut object_612 = object.key("TileLayout").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_layout_style(
            &mut object_612,
            var_611,
        );
        object_612.finish();
    }
}

pub fn serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserDashboardEmbeddingConfiguration,
) {
    if let Some(var_613) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_613);
    }
}

pub fn serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserDashboardEmbeddingConfiguration,
) {
    if let Some(var_614) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_614);
    }
}

pub fn serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQuickSightConsoleEmbeddingConfiguration,
) {
    if let Some(var_615) = &input.initial_path {
        object.key("InitialPath").string(var_615);
    }
}

pub fn serialize_structure_crate_model_registered_user_q_search_bar_embedding_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQSearchBarEmbeddingConfiguration,
) {
    if let Some(var_616) = &input.initial_topic_id {
        object.key("InitialTopicId").string(var_616);
    }
}

pub fn serialize_structure_crate_model_data_set_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetReference,
) {
    if let Some(var_617) = &input.data_set_placeholder {
        object.key("DataSetPlaceholder").string(var_617);
    }
    if let Some(var_618) = &input.data_set_arn {
        object.key("DataSetArn").string(var_618);
    }
}

pub fn serialize_structure_crate_model_project_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectOperation,
) {
    if let Some(var_619) = &input.projected_columns {
        let mut array_620 = object.key("ProjectedColumns").start_array();
        for item_621 in var_619 {
            {
                array_620.value().string(item_621);
            }
        }
        array_620.finish();
    }
}

pub fn serialize_structure_crate_model_filter_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterOperation,
) {
    if let Some(var_622) = &input.condition_expression {
        object.key("ConditionExpression").string(var_622);
    }
}

pub fn serialize_structure_crate_model_create_columns_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateColumnsOperation,
) {
    if let Some(var_623) = &input.columns {
        let mut array_624 = object.key("Columns").start_array();
        for item_625 in var_623 {
            {
                let mut object_626 = array_624.value().start_object();
                crate::json_ser::serialize_structure_crate_model_calculated_column(
                    &mut object_626,
                    item_625,
                );
                object_626.finish();
            }
        }
        array_624.finish();
    }
}

pub fn serialize_structure_crate_model_rename_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameColumnOperation,
) {
    if let Some(var_627) = &input.column_name {
        object.key("ColumnName").string(var_627);
    }
    if let Some(var_628) = &input.new_column_name {
        object.key("NewColumnName").string(var_628);
    }
}

pub fn serialize_structure_crate_model_cast_column_type_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CastColumnTypeOperation,
) {
    if let Some(var_629) = &input.column_name {
        object.key("ColumnName").string(var_629);
    }
    if let Some(var_630) = &input.new_column_type {
        object.key("NewColumnType").string(var_630.as_str());
    }
    if let Some(var_631) = &input.format {
        object.key("Format").string(var_631);
    }
}

pub fn serialize_structure_crate_model_tag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagColumnOperation,
) {
    if let Some(var_632) = &input.column_name {
        object.key("ColumnName").string(var_632);
    }
    if let Some(var_633) = &input.tags {
        let mut array_634 = object.key("Tags").start_array();
        for item_635 in var_633 {
            {
                let mut object_636 = array_634.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_tag(
                    &mut object_636,
                    item_635,
                );
                object_636.finish();
            }
        }
        array_634.finish();
    }
}

pub fn serialize_structure_crate_model_untag_column_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UntagColumnOperation,
) {
    if let Some(var_637) = &input.column_name {
        object.key("ColumnName").string(var_637);
    }
    if let Some(var_638) = &input.tag_names {
        let mut array_639 = object.key("TagNames").start_array();
        for item_640 in var_638 {
            {
                array_639.value().string(item_640.as_str());
            }
        }
        array_639.finish();
    }
}

pub fn serialize_structure_crate_model_join_instruction(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinInstruction,
) {
    if let Some(var_641) = &input.left_operand {
        object.key("LeftOperand").string(var_641);
    }
    if let Some(var_642) = &input.right_operand {
        object.key("RightOperand").string(var_642);
    }
    if let Some(var_643) = &input.left_join_key_properties {
        let mut object_644 = object.key("LeftJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_644,
            var_643,
        );
        object_644.finish();
    }
    if let Some(var_645) = &input.right_join_key_properties {
        let mut object_646 = object.key("RightJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_646,
            var_645,
        );
        object_646.finish();
    }
    if let Some(var_647) = &input.r#type {
        object.key("Type").string(var_647.as_str());
    }
    if let Some(var_648) = &input.on_clause {
        object.key("OnClause").string(var_648);
    }
}

pub fn serialize_structure_crate_model_input_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputColumn,
) {
    if let Some(var_649) = &input.name {
        object.key("Name").string(var_649);
    }
    if let Some(var_650) = &input.r#type {
        object.key("Type").string(var_650.as_str());
    }
}

pub fn serialize_structure_crate_model_upload_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadSettings,
) {
    if let Some(var_651) = &input.format {
        object.key("Format").string(var_651.as_str());
    }
    if let Some(var_652) = &input.start_from_row {
        object.key("StartFromRow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    if let Some(var_653) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_653);
    }
    if let Some(var_654) = &input.text_qualifier {
        object.key("TextQualifier").string(var_654.as_str());
    }
    if let Some(var_655) = &input.delimiter {
        object.key("Delimiter").string(var_655);
    }
}

pub fn serialize_structure_crate_model_manifest_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestFileLocation,
) {
    if let Some(var_656) = &input.bucket {
        object.key("Bucket").string(var_656);
    }
    if let Some(var_657) = &input.key {
        object.key("Key").string(var_657);
    }
}

pub fn serialize_structure_crate_model_tile_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileStyle,
) {
    if let Some(var_658) = &input.border {
        let mut object_659 = object.key("Border").start_object();
        crate::json_ser::serialize_structure_crate_model_border_style(&mut object_659, var_658);
        object_659.finish();
    }
}

pub fn serialize_structure_crate_model_tile_layout_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileLayoutStyle,
) {
    if let Some(var_660) = &input.gutter {
        let mut object_661 = object.key("Gutter").start_object();
        crate::json_ser::serialize_structure_crate_model_gutter_style(&mut object_661, var_660);
        object_661.finish();
    }
    if let Some(var_662) = &input.margin {
        let mut object_663 = object.key("Margin").start_object();
        crate::json_ser::serialize_structure_crate_model_margin_style(&mut object_663, var_662);
        object_663.finish();
    }
}

pub fn serialize_structure_crate_model_calculated_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CalculatedColumn,
) {
    if let Some(var_664) = &input.column_name {
        object.key("ColumnName").string(var_664);
    }
    if let Some(var_665) = &input.column_id {
        object.key("ColumnId").string(var_665);
    }
    if let Some(var_666) = &input.expression {
        object.key("Expression").string(var_666);
    }
}

pub fn serialize_structure_crate_model_column_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnTag,
) {
    if let Some(var_667) = &input.column_geographic_role {
        object.key("ColumnGeographicRole").string(var_667.as_str());
    }
    if let Some(var_668) = &input.column_description {
        let mut object_669 = object.key("ColumnDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_column_description(
            &mut object_669,
            var_668,
        );
        object_669.finish();
    }
}

pub fn serialize_structure_crate_model_join_key_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinKeyProperties,
) {
    if let Some(var_670) = &input.unique_key {
        object.key("UniqueKey").boolean(*var_670);
    }
}

pub fn serialize_structure_crate_model_border_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorderStyle,
) {
    if let Some(var_671) = &input.show {
        object.key("Show").boolean(*var_671);
    }
}

pub fn serialize_structure_crate_model_gutter_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GutterStyle,
) {
    if let Some(var_672) = &input.show {
        object.key("Show").boolean(*var_672);
    }
}

pub fn serialize_structure_crate_model_margin_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarginStyle,
) {
    if let Some(var_673) = &input.show {
        object.key("Show").boolean(*var_673);
    }
}

pub fn serialize_structure_crate_model_column_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDescription,
) {
    if let Some(var_674) = &input.text {
        object.key("Text").string(var_674);
    }
}
