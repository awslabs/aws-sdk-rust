// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_account_customization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountCustomizationInput,
) {
    if let Some(var_1) = &input.account_customization {
        let mut object_2 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_account_customization(&mut object_2, var_1);
        object_2.finish();
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_6, item_5);
                object_6.finish();
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_create_analysis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnalysisInput,
) {
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7);
    }
    if let Some(var_8) = &input.parameters {
        let mut object_9 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_parameters(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.permissions {
        let mut array_11 = object.key("Permissions").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_13, item_12);
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.source_entity {
        let mut object_15 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_analysis_source_entity(&mut object_15, var_14);
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_19, item_18);
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.theme_arn {
        object.key("ThemeArn").string(var_20);
    }
}

pub fn serialize_structure_create_dashboard_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) {
    if let Some(var_21) = &input.dashboard_publish_options {
        let mut object_22 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_dashboard_publish_options(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23);
    }
    if let Some(var_24) = &input.parameters {
        let mut object_25 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_parameters(&mut object_25, var_24);
        object_25.finish();
    }
    if let Some(var_26) = &input.permissions {
        let mut array_27 = object.key("Permissions").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_29, item_28);
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.source_entity {
        let mut object_31 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_dashboard_source_entity(&mut object_31, var_30);
        object_31.finish();
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("Tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_35, item_34);
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.theme_arn {
        object.key("ThemeArn").string(var_36);
    }
    if let Some(var_37) = &input.version_description {
        object.key("VersionDescription").string(var_37);
    }
}

pub fn serialize_structure_create_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) {
    if let Some(var_38) = &input.column_groups {
        let mut array_39 = object.key("ColumnGroups").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_column_group(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.column_level_permission_rules {
        let mut array_43 = object.key("ColumnLevelPermissionRules").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_column_level_permission_rule(
                    &mut object_45,
                    item_44,
                );
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.data_set_id {
        object.key("DataSetId").string(var_46);
    }
    if let Some(var_47) = &input.field_folders {
        let mut object_48 = object.key("FieldFolders").start_object();
        for (key_49, value_50) in var_47 {
            {
                let mut object_51 = object_48.key(key_49).start_object();
                crate::json_ser::serialize_structure_field_folder(&mut object_51, value_50);
                object_51.finish();
            }
        }
        object_48.finish();
    }
    if let Some(var_52) = &input.import_mode {
        object.key("ImportMode").string(var_52.as_str());
    }
    if let Some(var_53) = &input.logical_table_map {
        let mut object_54 = object.key("LogicalTableMap").start_object();
        for (key_55, value_56) in var_53 {
            {
                let mut object_57 = object_54.key(key_55).start_object();
                crate::json_ser::serialize_structure_logical_table(&mut object_57, value_56);
                object_57.finish();
            }
        }
        object_54.finish();
    }
    if let Some(var_58) = &input.name {
        object.key("Name").string(var_58);
    }
    if let Some(var_59) = &input.permissions {
        let mut array_60 = object.key("Permissions").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.physical_table_map {
        let mut object_64 = object.key("PhysicalTableMap").start_object();
        for (key_65, value_66) in var_63 {
            {
                let mut object_67 = object_64.key(key_65).start_object();
                crate::json_ser::serialize_union_physical_table(&mut object_67, value_66);
                object_67.finish();
            }
        }
        object_64.finish();
    }
    if let Some(var_68) = &input.row_level_permission_data_set {
        let mut object_69 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_row_level_permission_data_set(&mut object_69, var_68);
        object_69.finish();
    }
    if let Some(var_70) = &input.tags {
        let mut array_71 = object.key("Tags").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_73, item_72);
                object_73.finish();
            }
        }
        array_71.finish();
    }
}

pub fn serialize_structure_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_74) = &input.credentials {
        let mut object_75 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_data_source_credentials(&mut object_75, var_74);
        object_75.finish();
    }
    if let Some(var_76) = &input.data_source_id {
        object.key("DataSourceId").string(var_76);
    }
    if let Some(var_77) = &input.data_source_parameters {
        let mut object_78 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_data_source_parameters(&mut object_78, var_77);
        object_78.finish();
    }
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79);
    }
    if let Some(var_80) = &input.permissions {
        let mut array_81 = object.key("Permissions").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_83, item_82);
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.ssl_properties {
        let mut object_85 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_ssl_properties(&mut object_85, var_84);
        object_85.finish();
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_89, item_88);
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.r#type {
        object.key("Type").string(var_90.as_str());
    }
    if let Some(var_91) = &input.vpc_connection_properties {
        let mut object_92 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_vpc_connection_properties(&mut object_92, var_91);
        object_92.finish();
    }
}

pub fn serialize_structure_create_folder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFolderInput,
) {
    if let Some(var_93) = &input.folder_type {
        object.key("FolderType").string(var_93.as_str());
    }
    if let Some(var_94) = &input.name {
        object.key("Name").string(var_94);
    }
    if let Some(var_95) = &input.parent_folder_arn {
        object.key("ParentFolderArn").string(var_95);
    }
    if let Some(var_96) = &input.permissions {
        let mut array_97 = object.key("Permissions").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_99, item_98);
                object_99.finish();
            }
        }
        array_97.finish();
    }
    if let Some(var_100) = &input.tags {
        let mut array_101 = object.key("Tags").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_103, item_102);
                object_103.finish();
            }
        }
        array_101.finish();
    }
}

pub fn serialize_structure_create_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) {
    if let Some(var_104) = &input.description {
        object.key("Description").string(var_104);
    }
    if let Some(var_105) = &input.group_name {
        object.key("GroupName").string(var_105);
    }
}

pub fn serialize_structure_create_iam_policy_assignment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIamPolicyAssignmentInput,
) {
    if let Some(var_106) = &input.assignment_name {
        object.key("AssignmentName").string(var_106);
    }
    if let Some(var_107) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_107.as_str());
    }
    if let Some(var_108) = &input.identities {
        let mut object_109 = object.key("Identities").start_object();
        for (key_110, value_111) in var_108 {
            {
                let mut array_112 = object_109.key(key_110).start_array();
                for item_113 in value_111 {
                    {
                        array_112.value().string(item_113);
                    }
                }
                array_112.finish();
            }
        }
        object_109.finish();
    }
    if let Some(var_114) = &input.policy_arn {
        object.key("PolicyArn").string(var_114);
    }
}

pub fn serialize_structure_create_namespace_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNamespaceInput,
) {
    if let Some(var_115) = &input.identity_store {
        object.key("IdentityStore").string(var_115.as_str());
    }
    if let Some(var_116) = &input.namespace {
        object.key("Namespace").string(var_116);
    }
    if let Some(var_117) = &input.tags {
        let mut array_118 = object.key("Tags").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_120, item_119);
                object_120.finish();
            }
        }
        array_118.finish();
    }
}

pub fn serialize_structure_create_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateInput,
) {
    if let Some(var_121) = &input.name {
        object.key("Name").string(var_121);
    }
    if let Some(var_122) = &input.permissions {
        let mut array_123 = object.key("Permissions").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_125, item_124);
                object_125.finish();
            }
        }
        array_123.finish();
    }
    if let Some(var_126) = &input.source_entity {
        let mut object_127 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_template_source_entity(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.tags {
        let mut array_129 = object.key("Tags").start_array();
        for item_130 in var_128 {
            {
                let mut object_131 = array_129.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_131, item_130);
                object_131.finish();
            }
        }
        array_129.finish();
    }
    if let Some(var_132) = &input.version_description {
        object.key("VersionDescription").string(var_132);
    }
}

pub fn serialize_structure_create_template_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateAliasInput,
) {
    if let Some(var_133) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_133).into()),
        );
    }
}

pub fn serialize_structure_create_theme_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeInput,
) {
    if let Some(var_134) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_134);
    }
    if let Some(var_135) = &input.configuration {
        let mut object_136 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_theme_configuration(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.name {
        object.key("Name").string(var_137);
    }
    if let Some(var_138) = &input.permissions {
        let mut array_139 = object.key("Permissions").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_141, item_140);
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.tags {
        let mut array_143 = object.key("Tags").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_145, item_144);
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.version_description {
        object.key("VersionDescription").string(var_146);
    }
}

pub fn serialize_structure_create_theme_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeAliasInput,
) {
    if let Some(var_147) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
}

pub fn serialize_structure_list_iam_policy_assignments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIamPolicyAssignmentsInput,
) {
    if let Some(var_148) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_148.as_str());
    }
}

pub fn serialize_structure_register_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUserInput,
) {
    if let Some(var_149) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_149);
    }
    if let Some(var_150) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_150);
    }
    if let Some(var_151) = &input.email {
        object.key("Email").string(var_151);
    }
    if let Some(var_152) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_152);
    }
    if let Some(var_153) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_153);
    }
    if let Some(var_154) = &input.iam_arn {
        object.key("IamArn").string(var_154);
    }
    if let Some(var_155) = &input.identity_type {
        object.key("IdentityType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.session_name {
        object.key("SessionName").string(var_156);
    }
    if let Some(var_157) = &input.user_name {
        object.key("UserName").string(var_157);
    }
    if let Some(var_158) = &input.user_role {
        object.key("UserRole").string(var_158.as_str());
    }
}

pub fn serialize_structure_search_analyses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAnalysesInput,
) {
    if let Some(var_159) = &input.filters {
        let mut array_160 = object.key("Filters").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_analysis_search_filter(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.next_token {
        object.key("NextToken").string(var_164);
    }
}

pub fn serialize_structure_search_dashboards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDashboardsInput,
) {
    if let Some(var_165) = &input.filters {
        let mut array_166 = object.key("Filters").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_dashboard_search_filter(
                    &mut object_168,
                    item_167,
                );
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170);
    }
}

pub fn serialize_structure_search_folders_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFoldersInput,
) {
    if let Some(var_171) = &input.filters {
        let mut array_172 = object.key("Filters").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_folder_search_filter(
                    &mut object_174,
                    item_173,
                );
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_175).into()),
        );
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_177) = &input.tags {
        let mut array_178 = object.key("Tags").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_180, item_179);
                object_180.finish();
            }
        }
        array_178.finish();
    }
}

pub fn serialize_structure_update_account_customization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountCustomizationInput,
) {
    if let Some(var_181) = &input.account_customization {
        let mut object_182 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_account_customization(&mut object_182, var_181);
        object_182.finish();
    }
}

pub fn serialize_structure_update_account_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) {
    if let Some(var_183) = &input.default_namespace {
        object.key("DefaultNamespace").string(var_183);
    }
    if let Some(var_184) = &input.notification_email {
        object.key("NotificationEmail").string(var_184);
    }
}

pub fn serialize_structure_update_analysis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisInput,
) {
    if let Some(var_185) = &input.name {
        object.key("Name").string(var_185);
    }
    if let Some(var_186) = &input.parameters {
        let mut object_187 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_parameters(&mut object_187, var_186);
        object_187.finish();
    }
    if let Some(var_188) = &input.source_entity {
        let mut object_189 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_analysis_source_entity(&mut object_189, var_188);
        object_189.finish();
    }
    if let Some(var_190) = &input.theme_arn {
        object.key("ThemeArn").string(var_190);
    }
}

pub fn serialize_structure_update_analysis_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisPermissionsInput,
) {
    if let Some(var_191) = &input.grant_permissions {
        let mut array_192 = object.key("GrantPermissions").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_194, item_193);
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.revoke_permissions {
        let mut array_196 = object.key("RevokePermissions").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_198, item_197);
                object_198.finish();
            }
        }
        array_196.finish();
    }
}

pub fn serialize_structure_update_dashboard_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) {
    if let Some(var_199) = &input.dashboard_publish_options {
        let mut object_200 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_dashboard_publish_options(&mut object_200, var_199);
        object_200.finish();
    }
    if let Some(var_201) = &input.name {
        object.key("Name").string(var_201);
    }
    if let Some(var_202) = &input.parameters {
        let mut object_203 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_parameters(&mut object_203, var_202);
        object_203.finish();
    }
    if let Some(var_204) = &input.source_entity {
        let mut object_205 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_dashboard_source_entity(&mut object_205, var_204);
        object_205.finish();
    }
    if let Some(var_206) = &input.theme_arn {
        object.key("ThemeArn").string(var_206);
    }
    if let Some(var_207) = &input.version_description {
        object.key("VersionDescription").string(var_207);
    }
}

pub fn serialize_structure_update_dashboard_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardPermissionsInput,
) {
    if let Some(var_208) = &input.grant_permissions {
        let mut array_209 = object.key("GrantPermissions").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_211, item_210);
                object_211.finish();
            }
        }
        array_209.finish();
    }
    if let Some(var_212) = &input.revoke_permissions {
        let mut array_213 = object.key("RevokePermissions").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_215, item_214);
                object_215.finish();
            }
        }
        array_213.finish();
    }
}

pub fn serialize_structure_update_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) {
    if let Some(var_216) = &input.column_groups {
        let mut array_217 = object.key("ColumnGroups").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_column_group(&mut object_219, item_218);
                object_219.finish();
            }
        }
        array_217.finish();
    }
    if let Some(var_220) = &input.column_level_permission_rules {
        let mut array_221 = object.key("ColumnLevelPermissionRules").start_array();
        for item_222 in var_220 {
            {
                let mut object_223 = array_221.value().start_object();
                crate::json_ser::serialize_structure_column_level_permission_rule(
                    &mut object_223,
                    item_222,
                );
                object_223.finish();
            }
        }
        array_221.finish();
    }
    if let Some(var_224) = &input.field_folders {
        let mut object_225 = object.key("FieldFolders").start_object();
        for (key_226, value_227) in var_224 {
            {
                let mut object_228 = object_225.key(key_226).start_object();
                crate::json_ser::serialize_structure_field_folder(&mut object_228, value_227);
                object_228.finish();
            }
        }
        object_225.finish();
    }
    if let Some(var_229) = &input.import_mode {
        object.key("ImportMode").string(var_229.as_str());
    }
    if let Some(var_230) = &input.logical_table_map {
        let mut object_231 = object.key("LogicalTableMap").start_object();
        for (key_232, value_233) in var_230 {
            {
                let mut object_234 = object_231.key(key_232).start_object();
                crate::json_ser::serialize_structure_logical_table(&mut object_234, value_233);
                object_234.finish();
            }
        }
        object_231.finish();
    }
    if let Some(var_235) = &input.name {
        object.key("Name").string(var_235);
    }
    if let Some(var_236) = &input.physical_table_map {
        let mut object_237 = object.key("PhysicalTableMap").start_object();
        for (key_238, value_239) in var_236 {
            {
                let mut object_240 = object_237.key(key_238).start_object();
                crate::json_ser::serialize_union_physical_table(&mut object_240, value_239);
                object_240.finish();
            }
        }
        object_237.finish();
    }
    if let Some(var_241) = &input.row_level_permission_data_set {
        let mut object_242 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_row_level_permission_data_set(
            &mut object_242,
            var_241,
        );
        object_242.finish();
    }
}

pub fn serialize_structure_update_data_set_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetPermissionsInput,
) {
    if let Some(var_243) = &input.grant_permissions {
        let mut array_244 = object.key("GrantPermissions").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_246, item_245);
                object_246.finish();
            }
        }
        array_244.finish();
    }
    if let Some(var_247) = &input.revoke_permissions {
        let mut array_248 = object.key("RevokePermissions").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_250, item_249);
                object_250.finish();
            }
        }
        array_248.finish();
    }
}

pub fn serialize_structure_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_251) = &input.credentials {
        let mut object_252 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_data_source_credentials(&mut object_252, var_251);
        object_252.finish();
    }
    if let Some(var_253) = &input.data_source_parameters {
        let mut object_254 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_data_source_parameters(&mut object_254, var_253);
        object_254.finish();
    }
    if let Some(var_255) = &input.name {
        object.key("Name").string(var_255);
    }
    if let Some(var_256) = &input.ssl_properties {
        let mut object_257 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_ssl_properties(&mut object_257, var_256);
        object_257.finish();
    }
    if let Some(var_258) = &input.vpc_connection_properties {
        let mut object_259 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_vpc_connection_properties(&mut object_259, var_258);
        object_259.finish();
    }
}

pub fn serialize_structure_update_data_source_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourcePermissionsInput,
) {
    if let Some(var_260) = &input.grant_permissions {
        let mut array_261 = object.key("GrantPermissions").start_array();
        for item_262 in var_260 {
            {
                let mut object_263 = array_261.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_263, item_262);
                object_263.finish();
            }
        }
        array_261.finish();
    }
    if let Some(var_264) = &input.revoke_permissions {
        let mut array_265 = object.key("RevokePermissions").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_267, item_266);
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_update_folder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderInput,
) {
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268);
    }
}

pub fn serialize_structure_update_folder_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderPermissionsInput,
) {
    if let Some(var_269) = &input.grant_permissions {
        let mut array_270 = object.key("GrantPermissions").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_272, item_271);
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.revoke_permissions {
        let mut array_274 = object.key("RevokePermissions").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_276, item_275);
                object_276.finish();
            }
        }
        array_274.finish();
    }
}

pub fn serialize_structure_update_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) {
    if let Some(var_277) = &input.description {
        object.key("Description").string(var_277);
    }
}

pub fn serialize_structure_update_iam_policy_assignment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIamPolicyAssignmentInput,
) {
    if let Some(var_278) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_278.as_str());
    }
    if let Some(var_279) = &input.identities {
        let mut object_280 = object.key("Identities").start_object();
        for (key_281, value_282) in var_279 {
            {
                let mut array_283 = object_280.key(key_281).start_array();
                for item_284 in value_282 {
                    {
                        array_283.value().string(item_284);
                    }
                }
                array_283.finish();
            }
        }
        object_280.finish();
    }
    if let Some(var_285) = &input.policy_arn {
        object.key("PolicyArn").string(var_285);
    }
}

pub fn serialize_structure_update_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateInput,
) {
    if let Some(var_286) = &input.name {
        object.key("Name").string(var_286);
    }
    if let Some(var_287) = &input.source_entity {
        let mut object_288 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_template_source_entity(&mut object_288, var_287);
        object_288.finish();
    }
    if let Some(var_289) = &input.version_description {
        object.key("VersionDescription").string(var_289);
    }
}

pub fn serialize_structure_update_template_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateAliasInput,
) {
    if let Some(var_290) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_290).into()),
        );
    }
}

pub fn serialize_structure_update_template_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplatePermissionsInput,
) {
    if let Some(var_291) = &input.grant_permissions {
        let mut array_292 = object.key("GrantPermissions").start_array();
        for item_293 in var_291 {
            {
                let mut object_294 = array_292.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_294, item_293);
                object_294.finish();
            }
        }
        array_292.finish();
    }
    if let Some(var_295) = &input.revoke_permissions {
        let mut array_296 = object.key("RevokePermissions").start_array();
        for item_297 in var_295 {
            {
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_298, item_297);
                object_298.finish();
            }
        }
        array_296.finish();
    }
}

pub fn serialize_structure_update_theme_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeInput,
) {
    if let Some(var_299) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_299);
    }
    if let Some(var_300) = &input.configuration {
        let mut object_301 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_theme_configuration(&mut object_301, var_300);
        object_301.finish();
    }
    if let Some(var_302) = &input.name {
        object.key("Name").string(var_302);
    }
    if let Some(var_303) = &input.version_description {
        object.key("VersionDescription").string(var_303);
    }
}

pub fn serialize_structure_update_theme_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeAliasInput,
) {
    if let Some(var_304) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_304).into()),
        );
    }
}

pub fn serialize_structure_update_theme_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemePermissionsInput,
) {
    if let Some(var_305) = &input.grant_permissions {
        let mut array_306 = object.key("GrantPermissions").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_308, item_307);
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.revoke_permissions {
        let mut array_310 = object.key("RevokePermissions").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_resource_permission(&mut object_312, item_311);
                object_312.finish();
            }
        }
        array_310.finish();
    }
}

pub fn serialize_structure_update_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) {
    if let Some(var_313) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_313);
    }
    if let Some(var_314) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_314);
    }
    if let Some(var_315) = &input.email {
        object.key("Email").string(var_315);
    }
    if let Some(var_316) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_316);
    }
    if let Some(var_317) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_317);
    }
    if let Some(var_318) = &input.role {
        object.key("Role").string(var_318.as_str());
    }
    if input.unapply_custom_permissions {
        object
            .key("UnapplyCustomPermissions")
            .boolean(input.unapply_custom_permissions);
    }
}

pub fn serialize_structure_account_customization(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountCustomization,
) {
    if let Some(var_319) = &input.default_theme {
        object.key("DefaultTheme").string(var_319);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_320) = &input.key {
        object.key("Key").string(var_320);
    }
    if let Some(var_321) = &input.value {
        object.key("Value").string(var_321);
    }
}

pub fn serialize_structure_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameters,
) {
    if let Some(var_322) = &input.string_parameters {
        let mut array_323 = object.key("StringParameters").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_string_parameter(&mut object_325, item_324);
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.integer_parameters {
        let mut array_327 = object.key("IntegerParameters").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter(&mut object_329, item_328);
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.decimal_parameters {
        let mut array_331 = object.key("DecimalParameters").start_array();
        for item_332 in var_330 {
            {
                let mut object_333 = array_331.value().start_object();
                crate::json_ser::serialize_structure_decimal_parameter(&mut object_333, item_332);
                object_333.finish();
            }
        }
        array_331.finish();
    }
    if let Some(var_334) = &input.date_time_parameters {
        let mut array_335 = object.key("DateTimeParameters").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_date_time_parameter(&mut object_337, item_336);
                object_337.finish();
            }
        }
        array_335.finish();
    }
}

pub fn serialize_structure_resource_permission(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) {
    if let Some(var_338) = &input.principal {
        object.key("Principal").string(var_338);
    }
    if let Some(var_339) = &input.actions {
        let mut array_340 = object.key("Actions").start_array();
        for item_341 in var_339 {
            {
                array_340.value().string(item_341);
            }
        }
        array_340.finish();
    }
}

pub fn serialize_structure_analysis_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceEntity,
) {
    if let Some(var_342) = &input.source_template {
        let mut object_343 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_analysis_source_template(&mut object_343, var_342);
        object_343.finish();
    }
}

pub fn serialize_structure_dashboard_publish_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardPublishOptions,
) {
    if let Some(var_344) = &input.ad_hoc_filtering_option {
        let mut object_345 = object.key("AdHocFilteringOption").start_object();
        crate::json_ser::serialize_structure_ad_hoc_filtering_option(&mut object_345, var_344);
        object_345.finish();
    }
    if let Some(var_346) = &input.export_to_csv_option {
        let mut object_347 = object.key("ExportToCSVOption").start_object();
        crate::json_ser::serialize_structure_export_to_csv_option(&mut object_347, var_346);
        object_347.finish();
    }
    if let Some(var_348) = &input.sheet_controls_option {
        let mut object_349 = object.key("SheetControlsOption").start_object();
        crate::json_ser::serialize_structure_sheet_controls_option(&mut object_349, var_348);
        object_349.finish();
    }
}

pub fn serialize_structure_dashboard_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceEntity,
) {
    if let Some(var_350) = &input.source_template {
        let mut object_351 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_dashboard_source_template(&mut object_351, var_350);
        object_351.finish();
    }
}

pub fn serialize_structure_column_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnGroup,
) {
    if let Some(var_352) = &input.geo_spatial_column_group {
        let mut object_353 = object.key("GeoSpatialColumnGroup").start_object();
        crate::json_ser::serialize_structure_geo_spatial_column_group(&mut object_353, var_352);
        object_353.finish();
    }
}

pub fn serialize_structure_column_level_permission_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnLevelPermissionRule,
) {
    if let Some(var_354) = &input.principals {
        let mut array_355 = object.key("Principals").start_array();
        for item_356 in var_354 {
            {
                array_355.value().string(item_356);
            }
        }
        array_355.finish();
    }
    if let Some(var_357) = &input.column_names {
        let mut array_358 = object.key("ColumnNames").start_array();
        for item_359 in var_357 {
            {
                array_358.value().string(item_359);
            }
        }
        array_358.finish();
    }
}

pub fn serialize_structure_field_folder(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldFolder,
) {
    if let Some(var_360) = &input.description {
        object.key("description").string(var_360);
    }
    if let Some(var_361) = &input.columns {
        let mut array_362 = object.key("columns").start_array();
        for item_363 in var_361 {
            {
                array_362.value().string(item_363);
            }
        }
        array_362.finish();
    }
}

pub fn serialize_structure_logical_table(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTable,
) {
    if let Some(var_364) = &input.alias {
        object.key("Alias").string(var_364);
    }
    if let Some(var_365) = &input.data_transforms {
        let mut array_366 = object.key("DataTransforms").start_array();
        for item_367 in var_365 {
            {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_union_transform_operation(&mut object_368, item_367);
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.source {
        let mut object_370 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_logical_table_source(&mut object_370, var_369);
        object_370.finish();
    }
}

pub fn serialize_union_physical_table(
    object_67: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalTable,
) {
    match input {
        crate::model::PhysicalTable::RelationalTable(inner) => {
            let mut object_371 = object_67.key("RelationalTable").start_object();
            crate::json_ser::serialize_structure_relational_table(&mut object_371, inner);
            object_371.finish();
        }
        crate::model::PhysicalTable::CustomSql(inner) => {
            let mut object_372 = object_67.key("CustomSql").start_object();
            crate::json_ser::serialize_structure_custom_sql(&mut object_372, inner);
            object_372.finish();
        }
        crate::model::PhysicalTable::S3Source(inner) => {
            let mut object_373 = object_67.key("S3Source").start_object();
            crate::json_ser::serialize_structure_s3_source(&mut object_373, inner);
            object_373.finish();
        }
    }
}

pub fn serialize_structure_row_level_permission_data_set(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionDataSet,
) {
    if let Some(var_374) = &input.namespace {
        object.key("Namespace").string(var_374);
    }
    if let Some(var_375) = &input.arn {
        object.key("Arn").string(var_375);
    }
    if let Some(var_376) = &input.permission_policy {
        object.key("PermissionPolicy").string(var_376.as_str());
    }
    if let Some(var_377) = &input.format_version {
        object.key("FormatVersion").string(var_377.as_str());
    }
}

pub fn serialize_structure_data_source_credentials(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceCredentials,
) {
    if let Some(var_378) = &input.credential_pair {
        let mut object_379 = object.key("CredentialPair").start_object();
        crate::json_ser::serialize_structure_credential_pair(&mut object_379, var_378);
        object_379.finish();
    }
    if let Some(var_380) = &input.copy_source_arn {
        object.key("CopySourceArn").string(var_380);
    }
}

pub fn serialize_union_data_source_parameters(
    object_78: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceParameters,
) {
    match input {
        crate::model::DataSourceParameters::AmazonElasticsearchParameters(inner) => {
            let mut object_381 = object_78
                .key("AmazonElasticsearchParameters")
                .start_object();
            crate::json_ser::serialize_structure_amazon_elasticsearch_parameters(
                &mut object_381,
                inner,
            );
            object_381.finish();
        }
        crate::model::DataSourceParameters::AthenaParameters(inner) => {
            let mut object_382 = object_78.key("AthenaParameters").start_object();
            crate::json_ser::serialize_structure_athena_parameters(&mut object_382, inner);
            object_382.finish();
        }
        crate::model::DataSourceParameters::AuroraParameters(inner) => {
            let mut object_383 = object_78.key("AuroraParameters").start_object();
            crate::json_ser::serialize_structure_aurora_parameters(&mut object_383, inner);
            object_383.finish();
        }
        crate::model::DataSourceParameters::AuroraPostgreSqlParameters(inner) => {
            let mut object_384 = object_78.key("AuroraPostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_aurora_postgre_sql_parameters(
                &mut object_384,
                inner,
            );
            object_384.finish();
        }
        crate::model::DataSourceParameters::AwsIotAnalyticsParameters(inner) => {
            let mut object_385 = object_78.key("AwsIotAnalyticsParameters").start_object();
            crate::json_ser::serialize_structure_aws_iot_analytics_parameters(
                &mut object_385,
                inner,
            );
            object_385.finish();
        }
        crate::model::DataSourceParameters::JiraParameters(inner) => {
            let mut object_386 = object_78.key("JiraParameters").start_object();
            crate::json_ser::serialize_structure_jira_parameters(&mut object_386, inner);
            object_386.finish();
        }
        crate::model::DataSourceParameters::MariaDbParameters(inner) => {
            let mut object_387 = object_78.key("MariaDbParameters").start_object();
            crate::json_ser::serialize_structure_maria_db_parameters(&mut object_387, inner);
            object_387.finish();
        }
        crate::model::DataSourceParameters::MySqlParameters(inner) => {
            let mut object_388 = object_78.key("MySqlParameters").start_object();
            crate::json_ser::serialize_structure_my_sql_parameters(&mut object_388, inner);
            object_388.finish();
        }
        crate::model::DataSourceParameters::OracleParameters(inner) => {
            let mut object_389 = object_78.key("OracleParameters").start_object();
            crate::json_ser::serialize_structure_oracle_parameters(&mut object_389, inner);
            object_389.finish();
        }
        crate::model::DataSourceParameters::PostgreSqlParameters(inner) => {
            let mut object_390 = object_78.key("PostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_postgre_sql_parameters(&mut object_390, inner);
            object_390.finish();
        }
        crate::model::DataSourceParameters::PrestoParameters(inner) => {
            let mut object_391 = object_78.key("PrestoParameters").start_object();
            crate::json_ser::serialize_structure_presto_parameters(&mut object_391, inner);
            object_391.finish();
        }
        crate::model::DataSourceParameters::RdsParameters(inner) => {
            let mut object_392 = object_78.key("RdsParameters").start_object();
            crate::json_ser::serialize_structure_rds_parameters(&mut object_392, inner);
            object_392.finish();
        }
        crate::model::DataSourceParameters::RedshiftParameters(inner) => {
            let mut object_393 = object_78.key("RedshiftParameters").start_object();
            crate::json_ser::serialize_structure_redshift_parameters(&mut object_393, inner);
            object_393.finish();
        }
        crate::model::DataSourceParameters::S3Parameters(inner) => {
            let mut object_394 = object_78.key("S3Parameters").start_object();
            crate::json_ser::serialize_structure_s3_parameters(&mut object_394, inner);
            object_394.finish();
        }
        crate::model::DataSourceParameters::ServiceNowParameters(inner) => {
            let mut object_395 = object_78.key("ServiceNowParameters").start_object();
            crate::json_ser::serialize_structure_service_now_parameters(&mut object_395, inner);
            object_395.finish();
        }
        crate::model::DataSourceParameters::SnowflakeParameters(inner) => {
            let mut object_396 = object_78.key("SnowflakeParameters").start_object();
            crate::json_ser::serialize_structure_snowflake_parameters(&mut object_396, inner);
            object_396.finish();
        }
        crate::model::DataSourceParameters::SparkParameters(inner) => {
            let mut object_397 = object_78.key("SparkParameters").start_object();
            crate::json_ser::serialize_structure_spark_parameters(&mut object_397, inner);
            object_397.finish();
        }
        crate::model::DataSourceParameters::SqlServerParameters(inner) => {
            let mut object_398 = object_78.key("SqlServerParameters").start_object();
            crate::json_ser::serialize_structure_sql_server_parameters(&mut object_398, inner);
            object_398.finish();
        }
        crate::model::DataSourceParameters::TeradataParameters(inner) => {
            let mut object_399 = object_78.key("TeradataParameters").start_object();
            crate::json_ser::serialize_structure_teradata_parameters(&mut object_399, inner);
            object_399.finish();
        }
        crate::model::DataSourceParameters::TwitterParameters(inner) => {
            let mut object_400 = object_78.key("TwitterParameters").start_object();
            crate::json_ser::serialize_structure_twitter_parameters(&mut object_400, inner);
            object_400.finish();
        }
    }
}

pub fn serialize_structure_ssl_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SslProperties,
) {
    if input.disable_ssl {
        object.key("DisableSsl").boolean(input.disable_ssl);
    }
}

pub fn serialize_structure_vpc_connection_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConnectionProperties,
) {
    if let Some(var_401) = &input.vpc_connection_arn {
        object.key("VpcConnectionArn").string(var_401);
    }
}

pub fn serialize_structure_template_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceEntity,
) {
    if let Some(var_402) = &input.source_analysis {
        let mut object_403 = object.key("SourceAnalysis").start_object();
        crate::json_ser::serialize_structure_template_source_analysis(&mut object_403, var_402);
        object_403.finish();
    }
    if let Some(var_404) = &input.source_template {
        let mut object_405 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_template_source_template(&mut object_405, var_404);
        object_405.finish();
    }
}

pub fn serialize_structure_theme_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeConfiguration,
) {
    if let Some(var_406) = &input.data_color_palette {
        let mut object_407 = object.key("DataColorPalette").start_object();
        crate::json_ser::serialize_structure_data_color_palette(&mut object_407, var_406);
        object_407.finish();
    }
    if let Some(var_408) = &input.ui_color_palette {
        let mut object_409 = object.key("UIColorPalette").start_object();
        crate::json_ser::serialize_structure_ui_color_palette(&mut object_409, var_408);
        object_409.finish();
    }
    if let Some(var_410) = &input.sheet {
        let mut object_411 = object.key("Sheet").start_object();
        crate::json_ser::serialize_structure_sheet_style(&mut object_411, var_410);
        object_411.finish();
    }
}

pub fn serialize_structure_analysis_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSearchFilter,
) {
    if let Some(var_412) = &input.operator {
        object.key("Operator").string(var_412.as_str());
    }
    if let Some(var_413) = &input.name {
        object.key("Name").string(var_413.as_str());
    }
    if let Some(var_414) = &input.value {
        object.key("Value").string(var_414);
    }
}

pub fn serialize_structure_dashboard_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSearchFilter,
) {
    if let Some(var_415) = &input.operator {
        object.key("Operator").string(var_415.as_str());
    }
    if let Some(var_416) = &input.name {
        object.key("Name").string(var_416.as_str());
    }
    if let Some(var_417) = &input.value {
        object.key("Value").string(var_417);
    }
}

pub fn serialize_structure_folder_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderSearchFilter,
) {
    if let Some(var_418) = &input.operator {
        object.key("Operator").string(var_418.as_str());
    }
    if let Some(var_419) = &input.name {
        object.key("Name").string(var_419.as_str());
    }
    if let Some(var_420) = &input.value {
        object.key("Value").string(var_420);
    }
}

pub fn serialize_structure_string_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringParameter,
) {
    if let Some(var_421) = &input.name {
        object.key("Name").string(var_421);
    }
    if let Some(var_422) = &input.values {
        let mut array_423 = object.key("Values").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
}

pub fn serialize_structure_integer_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameter,
) {
    if let Some(var_425) = &input.name {
        object.key("Name").string(var_425);
    }
    if let Some(var_426) = &input.values {
        let mut array_427 = object.key("Values").start_array();
        for item_428 in var_426 {
            {
                array_427.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_428).into()),
                );
            }
        }
        array_427.finish();
    }
}

pub fn serialize_structure_decimal_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalParameter,
) {
    if let Some(var_429) = &input.name {
        object.key("Name").string(var_429);
    }
    if let Some(var_430) = &input.values {
        let mut array_431 = object.key("Values").start_array();
        for item_432 in var_430 {
            {
                array_431.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*item_432).into()),
                );
            }
        }
        array_431.finish();
    }
}

pub fn serialize_structure_date_time_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateTimeParameter,
) {
    if let Some(var_433) = &input.name {
        object.key("Name").string(var_433);
    }
    if let Some(var_434) = &input.values {
        let mut array_435 = object.key("Values").start_array();
        for item_436 in var_434 {
            {
                array_435
                    .value()
                    .instant(item_436, smithy_types::instant::Format::EpochSeconds);
            }
        }
        array_435.finish();
    }
}

pub fn serialize_structure_analysis_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceTemplate,
) {
    if let Some(var_437) = &input.data_set_references {
        let mut array_438 = object.key("DataSetReferences").start_array();
        for item_439 in var_437 {
            {
                let mut object_440 = array_438.value().start_object();
                crate::json_ser::serialize_structure_data_set_reference(&mut object_440, item_439);
                object_440.finish();
            }
        }
        array_438.finish();
    }
    if let Some(var_441) = &input.arn {
        object.key("Arn").string(var_441);
    }
}

pub fn serialize_structure_ad_hoc_filtering_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdHocFilteringOption,
) {
    if let Some(var_442) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_442.as_str());
    }
}

pub fn serialize_structure_export_to_csv_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportToCsvOption,
) {
    if let Some(var_443) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_443.as_str());
    }
}

pub fn serialize_structure_sheet_controls_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetControlsOption,
) {
    if let Some(var_444) = &input.visibility_state {
        object.key("VisibilityState").string(var_444.as_str());
    }
}

pub fn serialize_structure_dashboard_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceTemplate,
) {
    if let Some(var_445) = &input.data_set_references {
        let mut array_446 = object.key("DataSetReferences").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_data_set_reference(&mut object_448, item_447);
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.arn {
        object.key("Arn").string(var_449);
    }
}

pub fn serialize_structure_geo_spatial_column_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoSpatialColumnGroup,
) {
    if let Some(var_450) = &input.name {
        object.key("Name").string(var_450);
    }
    if let Some(var_451) = &input.country_code {
        object.key("CountryCode").string(var_451.as_str());
    }
    if let Some(var_452) = &input.columns {
        let mut array_453 = object.key("Columns").start_array();
        for item_454 in var_452 {
            {
                array_453.value().string(item_454);
            }
        }
        array_453.finish();
    }
}

pub fn serialize_union_transform_operation(
    object_368: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOperation,
) {
    match input {
        crate::model::TransformOperation::ProjectOperation(inner) => {
            let mut object_455 = object_368.key("ProjectOperation").start_object();
            crate::json_ser::serialize_structure_project_operation(&mut object_455, inner);
            object_455.finish();
        }
        crate::model::TransformOperation::FilterOperation(inner) => {
            let mut object_456 = object_368.key("FilterOperation").start_object();
            crate::json_ser::serialize_structure_filter_operation(&mut object_456, inner);
            object_456.finish();
        }
        crate::model::TransformOperation::CreateColumnsOperation(inner) => {
            let mut object_457 = object_368.key("CreateColumnsOperation").start_object();
            crate::json_ser::serialize_structure_create_columns_operation(&mut object_457, inner);
            object_457.finish();
        }
        crate::model::TransformOperation::RenameColumnOperation(inner) => {
            let mut object_458 = object_368.key("RenameColumnOperation").start_object();
            crate::json_ser::serialize_structure_rename_column_operation(&mut object_458, inner);
            object_458.finish();
        }
        crate::model::TransformOperation::CastColumnTypeOperation(inner) => {
            let mut object_459 = object_368.key("CastColumnTypeOperation").start_object();
            crate::json_ser::serialize_structure_cast_column_type_operation(&mut object_459, inner);
            object_459.finish();
        }
        crate::model::TransformOperation::TagColumnOperation(inner) => {
            let mut object_460 = object_368.key("TagColumnOperation").start_object();
            crate::json_ser::serialize_structure_tag_column_operation(&mut object_460, inner);
            object_460.finish();
        }
    }
}

pub fn serialize_structure_logical_table_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTableSource,
) {
    if let Some(var_461) = &input.join_instruction {
        let mut object_462 = object.key("JoinInstruction").start_object();
        crate::json_ser::serialize_structure_join_instruction(&mut object_462, var_461);
        object_462.finish();
    }
    if let Some(var_463) = &input.physical_table_id {
        object.key("PhysicalTableId").string(var_463);
    }
}

pub fn serialize_structure_relational_table(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalTable,
) {
    if let Some(var_464) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_464);
    }
    if let Some(var_465) = &input.catalog {
        object.key("Catalog").string(var_465);
    }
    if let Some(var_466) = &input.schema {
        object.key("Schema").string(var_466);
    }
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467);
    }
    if let Some(var_468) = &input.input_columns {
        let mut array_469 = object.key("InputColumns").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_input_column(&mut object_471, item_470);
                object_471.finish();
            }
        }
        array_469.finish();
    }
}

pub fn serialize_structure_custom_sql(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSql,
) {
    if let Some(var_472) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_472);
    }
    if let Some(var_473) = &input.name {
        object.key("Name").string(var_473);
    }
    if let Some(var_474) = &input.sql_query {
        object.key("SqlQuery").string(var_474);
    }
    if let Some(var_475) = &input.columns {
        let mut array_476 = object.key("Columns").start_array();
        for item_477 in var_475 {
            {
                let mut object_478 = array_476.value().start_object();
                crate::json_ser::serialize_structure_input_column(&mut object_478, item_477);
                object_478.finish();
            }
        }
        array_476.finish();
    }
}

pub fn serialize_structure_s3_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Source,
) {
    if let Some(var_479) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_479);
    }
    if let Some(var_480) = &input.upload_settings {
        let mut object_481 = object.key("UploadSettings").start_object();
        crate::json_ser::serialize_structure_upload_settings(&mut object_481, var_480);
        object_481.finish();
    }
    if let Some(var_482) = &input.input_columns {
        let mut array_483 = object.key("InputColumns").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_input_column(&mut object_485, item_484);
                object_485.finish();
            }
        }
        array_483.finish();
    }
}

pub fn serialize_structure_credential_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CredentialPair,
) {
    if let Some(var_486) = &input.username {
        object.key("Username").string(var_486);
    }
    if let Some(var_487) = &input.password {
        object.key("Password").string(var_487);
    }
    if let Some(var_488) = &input.alternate_data_source_parameters {
        let mut array_489 = object.key("AlternateDataSourceParameters").start_array();
        for item_490 in var_488 {
            {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_union_data_source_parameters(&mut object_491, item_490);
                object_491.finish();
            }
        }
        array_489.finish();
    }
}

pub fn serialize_structure_amazon_elasticsearch_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonElasticsearchParameters,
) {
    if let Some(var_492) = &input.domain {
        object.key("Domain").string(var_492);
    }
}

pub fn serialize_structure_athena_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaParameters,
) {
    if let Some(var_493) = &input.work_group {
        object.key("WorkGroup").string(var_493);
    }
}

pub fn serialize_structure_aurora_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraParameters,
) {
    if let Some(var_494) = &input.host {
        object.key("Host").string(var_494);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_495) = &input.database {
        object.key("Database").string(var_495);
    }
}

pub fn serialize_structure_aurora_postgre_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraPostgreSqlParameters,
) {
    if let Some(var_496) = &input.host {
        object.key("Host").string(var_496);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_497) = &input.database {
        object.key("Database").string(var_497);
    }
}

pub fn serialize_structure_aws_iot_analytics_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIotAnalyticsParameters,
) {
    if let Some(var_498) = &input.data_set_name {
        object.key("DataSetName").string(var_498);
    }
}

pub fn serialize_structure_jira_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraParameters,
) {
    if let Some(var_499) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_499);
    }
}

pub fn serialize_structure_maria_db_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MariaDbParameters,
) {
    if let Some(var_500) = &input.host {
        object.key("Host").string(var_500);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_501) = &input.database {
        object.key("Database").string(var_501);
    }
}

pub fn serialize_structure_my_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlParameters,
) {
    if let Some(var_502) = &input.host {
        object.key("Host").string(var_502);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_503) = &input.database {
        object.key("Database").string(var_503);
    }
}

pub fn serialize_structure_oracle_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleParameters,
) {
    if let Some(var_504) = &input.host {
        object.key("Host").string(var_504);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_505) = &input.database {
        object.key("Database").string(var_505);
    }
}

pub fn serialize_structure_postgre_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlParameters,
) {
    if let Some(var_506) = &input.host {
        object.key("Host").string(var_506);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_507) = &input.database {
        object.key("Database").string(var_507);
    }
}

pub fn serialize_structure_presto_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrestoParameters,
) {
    if let Some(var_508) = &input.host {
        object.key("Host").string(var_508);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_509) = &input.catalog {
        object.key("Catalog").string(var_509);
    }
}

pub fn serialize_structure_rds_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsParameters,
) {
    if let Some(var_510) = &input.instance_id {
        object.key("InstanceId").string(var_510);
    }
    if let Some(var_511) = &input.database {
        object.key("Database").string(var_511);
    }
}

pub fn serialize_structure_redshift_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftParameters,
) {
    if let Some(var_512) = &input.host {
        object.key("Host").string(var_512);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_513) = &input.database {
        object.key("Database").string(var_513);
    }
    if let Some(var_514) = &input.cluster_id {
        object.key("ClusterId").string(var_514);
    }
}

pub fn serialize_structure_s3_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Parameters,
) {
    if let Some(var_515) = &input.manifest_file_location {
        let mut object_516 = object.key("ManifestFileLocation").start_object();
        crate::json_ser::serialize_structure_manifest_file_location(&mut object_516, var_515);
        object_516.finish();
    }
}

pub fn serialize_structure_service_now_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowParameters,
) {
    if let Some(var_517) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_517);
    }
}

pub fn serialize_structure_snowflake_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeParameters,
) {
    if let Some(var_518) = &input.host {
        object.key("Host").string(var_518);
    }
    if let Some(var_519) = &input.database {
        object.key("Database").string(var_519);
    }
    if let Some(var_520) = &input.warehouse {
        object.key("Warehouse").string(var_520);
    }
}

pub fn serialize_structure_spark_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkParameters,
) {
    if let Some(var_521) = &input.host {
        object.key("Host").string(var_521);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
}

pub fn serialize_structure_sql_server_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlServerParameters,
) {
    if let Some(var_522) = &input.host {
        object.key("Host").string(var_522);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_523) = &input.database {
        object.key("Database").string(var_523);
    }
}

pub fn serialize_structure_teradata_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeradataParameters,
) {
    if let Some(var_524) = &input.host {
        object.key("Host").string(var_524);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_525) = &input.database {
        object.key("Database").string(var_525);
    }
}

pub fn serialize_structure_twitter_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TwitterParameters,
) {
    if let Some(var_526) = &input.query {
        object.key("Query").string(var_526);
    }
    {
        object.key("MaxRows").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_rows).into()),
        );
    }
}

pub fn serialize_structure_template_source_analysis(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceAnalysis,
) {
    if let Some(var_527) = &input.arn {
        object.key("Arn").string(var_527);
    }
    if let Some(var_528) = &input.data_set_references {
        let mut array_529 = object.key("DataSetReferences").start_array();
        for item_530 in var_528 {
            {
                let mut object_531 = array_529.value().start_object();
                crate::json_ser::serialize_structure_data_set_reference(&mut object_531, item_530);
                object_531.finish();
            }
        }
        array_529.finish();
    }
}

pub fn serialize_structure_template_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceTemplate,
) {
    if let Some(var_532) = &input.arn {
        object.key("Arn").string(var_532);
    }
}

pub fn serialize_structure_data_color_palette(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataColorPalette,
) {
    if let Some(var_533) = &input.colors {
        let mut array_534 = object.key("Colors").start_array();
        for item_535 in var_533 {
            {
                array_534.value().string(item_535);
            }
        }
        array_534.finish();
    }
    if let Some(var_536) = &input.min_max_gradient {
        let mut array_537 = object.key("MinMaxGradient").start_array();
        for item_538 in var_536 {
            {
                array_537.value().string(item_538);
            }
        }
        array_537.finish();
    }
    if let Some(var_539) = &input.empty_fill_color {
        object.key("EmptyFillColor").string(var_539);
    }
}

pub fn serialize_structure_ui_color_palette(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiColorPalette,
) {
    if let Some(var_540) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_540);
    }
    if let Some(var_541) = &input.primary_background {
        object.key("PrimaryBackground").string(var_541);
    }
    if let Some(var_542) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_542);
    }
    if let Some(var_543) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_543);
    }
    if let Some(var_544) = &input.accent {
        object.key("Accent").string(var_544);
    }
    if let Some(var_545) = &input.accent_foreground {
        object.key("AccentForeground").string(var_545);
    }
    if let Some(var_546) = &input.danger {
        object.key("Danger").string(var_546);
    }
    if let Some(var_547) = &input.danger_foreground {
        object.key("DangerForeground").string(var_547);
    }
    if let Some(var_548) = &input.warning {
        object.key("Warning").string(var_548);
    }
    if let Some(var_549) = &input.warning_foreground {
        object.key("WarningForeground").string(var_549);
    }
    if let Some(var_550) = &input.success {
        object.key("Success").string(var_550);
    }
    if let Some(var_551) = &input.success_foreground {
        object.key("SuccessForeground").string(var_551);
    }
    if let Some(var_552) = &input.dimension {
        object.key("Dimension").string(var_552);
    }
    if let Some(var_553) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_553);
    }
    if let Some(var_554) = &input.measure {
        object.key("Measure").string(var_554);
    }
    if let Some(var_555) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_555);
    }
}

pub fn serialize_structure_sheet_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetStyle,
) {
    if let Some(var_556) = &input.tile {
        let mut object_557 = object.key("Tile").start_object();
        crate::json_ser::serialize_structure_tile_style(&mut object_557, var_556);
        object_557.finish();
    }
    if let Some(var_558) = &input.tile_layout {
        let mut object_559 = object.key("TileLayout").start_object();
        crate::json_ser::serialize_structure_tile_layout_style(&mut object_559, var_558);
        object_559.finish();
    }
}

pub fn serialize_structure_data_set_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetReference,
) {
    if let Some(var_560) = &input.data_set_placeholder {
        object.key("DataSetPlaceholder").string(var_560);
    }
    if let Some(var_561) = &input.data_set_arn {
        object.key("DataSetArn").string(var_561);
    }
}

pub fn serialize_structure_project_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectOperation,
) {
    if let Some(var_562) = &input.projected_columns {
        let mut array_563 = object.key("ProjectedColumns").start_array();
        for item_564 in var_562 {
            {
                array_563.value().string(item_564);
            }
        }
        array_563.finish();
    }
}

pub fn serialize_structure_filter_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterOperation,
) {
    if let Some(var_565) = &input.condition_expression {
        object.key("ConditionExpression").string(var_565);
    }
}

pub fn serialize_structure_create_columns_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateColumnsOperation,
) {
    if let Some(var_566) = &input.columns {
        let mut array_567 = object.key("Columns").start_array();
        for item_568 in var_566 {
            {
                let mut object_569 = array_567.value().start_object();
                crate::json_ser::serialize_structure_calculated_column(&mut object_569, item_568);
                object_569.finish();
            }
        }
        array_567.finish();
    }
}

pub fn serialize_structure_rename_column_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameColumnOperation,
) {
    if let Some(var_570) = &input.column_name {
        object.key("ColumnName").string(var_570);
    }
    if let Some(var_571) = &input.new_column_name {
        object.key("NewColumnName").string(var_571);
    }
}

pub fn serialize_structure_cast_column_type_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CastColumnTypeOperation,
) {
    if let Some(var_572) = &input.column_name {
        object.key("ColumnName").string(var_572);
    }
    if let Some(var_573) = &input.new_column_type {
        object.key("NewColumnType").string(var_573.as_str());
    }
    if let Some(var_574) = &input.format {
        object.key("Format").string(var_574);
    }
}

pub fn serialize_structure_tag_column_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagColumnOperation,
) {
    if let Some(var_575) = &input.column_name {
        object.key("ColumnName").string(var_575);
    }
    if let Some(var_576) = &input.tags {
        let mut array_577 = object.key("Tags").start_array();
        for item_578 in var_576 {
            {
                let mut object_579 = array_577.value().start_object();
                crate::json_ser::serialize_structure_column_tag(&mut object_579, item_578);
                object_579.finish();
            }
        }
        array_577.finish();
    }
}

pub fn serialize_structure_join_instruction(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinInstruction,
) {
    if let Some(var_580) = &input.left_operand {
        object.key("LeftOperand").string(var_580);
    }
    if let Some(var_581) = &input.right_operand {
        object.key("RightOperand").string(var_581);
    }
    if let Some(var_582) = &input.left_join_key_properties {
        let mut object_583 = object.key("LeftJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_join_key_properties(&mut object_583, var_582);
        object_583.finish();
    }
    if let Some(var_584) = &input.right_join_key_properties {
        let mut object_585 = object.key("RightJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_join_key_properties(&mut object_585, var_584);
        object_585.finish();
    }
    if let Some(var_586) = &input.r#type {
        object.key("Type").string(var_586.as_str());
    }
    if let Some(var_587) = &input.on_clause {
        object.key("OnClause").string(var_587);
    }
}

pub fn serialize_structure_input_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputColumn,
) {
    if let Some(var_588) = &input.name {
        object.key("Name").string(var_588);
    }
    if let Some(var_589) = &input.r#type {
        object.key("Type").string(var_589.as_str());
    }
}

pub fn serialize_structure_upload_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadSettings,
) {
    if let Some(var_590) = &input.format {
        object.key("Format").string(var_590.as_str());
    }
    if let Some(var_591) = &input.start_from_row {
        object.key("StartFromRow").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    if let Some(var_592) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_592);
    }
    if let Some(var_593) = &input.text_qualifier {
        object.key("TextQualifier").string(var_593.as_str());
    }
    if let Some(var_594) = &input.delimiter {
        object.key("Delimiter").string(var_594);
    }
}

pub fn serialize_structure_manifest_file_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestFileLocation,
) {
    if let Some(var_595) = &input.bucket {
        object.key("Bucket").string(var_595);
    }
    if let Some(var_596) = &input.key {
        object.key("Key").string(var_596);
    }
}

pub fn serialize_structure_tile_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileStyle,
) {
    if let Some(var_597) = &input.border {
        let mut object_598 = object.key("Border").start_object();
        crate::json_ser::serialize_structure_border_style(&mut object_598, var_597);
        object_598.finish();
    }
}

pub fn serialize_structure_tile_layout_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileLayoutStyle,
) {
    if let Some(var_599) = &input.gutter {
        let mut object_600 = object.key("Gutter").start_object();
        crate::json_ser::serialize_structure_gutter_style(&mut object_600, var_599);
        object_600.finish();
    }
    if let Some(var_601) = &input.margin {
        let mut object_602 = object.key("Margin").start_object();
        crate::json_ser::serialize_structure_margin_style(&mut object_602, var_601);
        object_602.finish();
    }
}

pub fn serialize_structure_calculated_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CalculatedColumn,
) {
    if let Some(var_603) = &input.column_name {
        object.key("ColumnName").string(var_603);
    }
    if let Some(var_604) = &input.column_id {
        object.key("ColumnId").string(var_604);
    }
    if let Some(var_605) = &input.expression {
        object.key("Expression").string(var_605);
    }
}

pub fn serialize_structure_column_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnTag,
) {
    if let Some(var_606) = &input.column_geographic_role {
        object.key("ColumnGeographicRole").string(var_606.as_str());
    }
    if let Some(var_607) = &input.column_description {
        let mut object_608 = object.key("ColumnDescription").start_object();
        crate::json_ser::serialize_structure_column_description(&mut object_608, var_607);
        object_608.finish();
    }
}

pub fn serialize_structure_join_key_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinKeyProperties,
) {
    if let Some(var_609) = &input.unique_key {
        object.key("UniqueKey").boolean(*var_609);
    }
}

pub fn serialize_structure_border_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorderStyle,
) {
    if let Some(var_610) = &input.show {
        object.key("Show").boolean(*var_610);
    }
}

pub fn serialize_structure_gutter_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GutterStyle,
) {
    if let Some(var_611) = &input.show {
        object.key("Show").boolean(*var_611);
    }
}

pub fn serialize_structure_margin_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarginStyle,
) {
    if let Some(var_612) = &input.show {
        object.key("Show").boolean(*var_612);
    }
}

pub fn serialize_structure_column_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDescription,
) {
    if let Some(var_613) = &input.text {
        object.key("Text").string(var_613);
    }
}
