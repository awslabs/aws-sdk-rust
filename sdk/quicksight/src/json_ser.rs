// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_account_customization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccountCustomizationInput,
) {
    if let Some(var_1) = &input.account_customization {
        let mut object_2 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_2,
            var_1,
        );
        object_2.finish();
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5);
                object_6.finish();
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_crate_input_create_analysis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnalysisInput,
) {
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7);
    }
    if let Some(var_8) = &input.parameters {
        let mut object_9 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.permissions {
        let mut array_11 = object.key("Permissions").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_13,
                    item_12,
                );
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.source_entity {
        let mut object_15 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_15,
            var_14,
        );
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_19, item_18);
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.theme_arn {
        object.key("ThemeArn").string(var_20);
    }
}

pub fn serialize_structure_crate_input_create_dashboard_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDashboardInput,
) {
    if let Some(var_21) = &input.dashboard_publish_options {
        let mut object_22 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_22,
            var_21,
        );
        object_22.finish();
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23);
    }
    if let Some(var_24) = &input.parameters {
        let mut object_25 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_25, var_24);
        object_25.finish();
    }
    if let Some(var_26) = &input.permissions {
        let mut array_27 = object.key("Permissions").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_29,
                    item_28,
                );
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.source_entity {
        let mut object_31 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_31,
            var_30,
        );
        object_31.finish();
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("Tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_35, item_34);
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.theme_arn {
        object.key("ThemeArn").string(var_36);
    }
    if let Some(var_37) = &input.version_description {
        object.key("VersionDescription").string(var_37);
    }
}

pub fn serialize_structure_crate_input_create_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) {
    if let Some(var_38) = &input.column_groups {
        let mut array_39 = object.key("ColumnGroups").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_41,
                    item_40,
                );
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.column_level_permission_rules {
        let mut array_43 = object.key("ColumnLevelPermissionRules").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_45,
                    item_44,
                );
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.data_set_id {
        object.key("DataSetId").string(var_46);
    }
    if let Some(var_47) = &input.data_set_usage_configuration {
        let mut object_48 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_48,
            var_47,
        );
        object_48.finish();
    }
    if let Some(var_49) = &input.field_folders {
        let mut object_50 = object.key("FieldFolders").start_object();
        for (key_51, value_52) in var_49 {
            {
                let mut object_53 = object_50.key(key_51).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_53,
                    value_52,
                );
                object_53.finish();
            }
        }
        object_50.finish();
    }
    if let Some(var_54) = &input.import_mode {
        object.key("ImportMode").string(var_54.as_str());
    }
    if let Some(var_55) = &input.logical_table_map {
        let mut object_56 = object.key("LogicalTableMap").start_object();
        for (key_57, value_58) in var_55 {
            {
                let mut object_59 = object_56.key(key_57).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_59,
                    value_58,
                );
                object_59.finish();
            }
        }
        object_56.finish();
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60);
    }
    if let Some(var_61) = &input.permissions {
        let mut array_62 = object.key("Permissions").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_64,
                    item_63,
                );
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.physical_table_map {
        let mut object_66 = object.key("PhysicalTableMap").start_object();
        for (key_67, value_68) in var_65 {
            {
                let mut object_69 = object_66.key(key_67).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_69,
                    value_68,
                );
                object_69.finish();
            }
        }
        object_66.finish();
    }
    if let Some(var_70) = &input.row_level_permission_data_set {
        let mut object_71 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_71,
            var_70,
        );
        object_71.finish();
    }
    if let Some(var_72) = &input.row_level_permission_tag_configuration {
        let mut object_73 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_73,
            var_72,
        );
        object_73.finish();
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76);
                object_77.finish();
            }
        }
        array_75.finish();
    }
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_78) = &input.credentials {
        let mut object_79 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_79,
            var_78,
        );
        object_79.finish();
    }
    if let Some(var_80) = &input.data_source_id {
        object.key("DataSourceId").string(var_80);
    }
    if let Some(var_81) = &input.data_source_parameters {
        let mut object_82 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.name {
        object.key("Name").string(var_83);
    }
    if let Some(var_84) = &input.permissions {
        let mut array_85 = object.key("Permissions").start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_87,
                    item_86,
                );
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if let Some(var_88) = &input.ssl_properties {
        let mut object_89 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_89, var_88);
        object_89.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92);
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.r#type {
        object.key("Type").string(var_94.as_str());
    }
    if let Some(var_95) = &input.vpc_connection_properties {
        let mut object_96 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_96,
            var_95,
        );
        object_96.finish();
    }
}

pub fn serialize_structure_crate_input_create_folder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFolderInput,
) {
    if let Some(var_97) = &input.folder_type {
        object.key("FolderType").string(var_97.as_str());
    }
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98);
    }
    if let Some(var_99) = &input.parent_folder_arn {
        object.key("ParentFolderArn").string(var_99);
    }
    if let Some(var_100) = &input.permissions {
        let mut array_101 = object.key("Permissions").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_103,
                    item_102,
                );
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_107, item_106);
                object_107.finish();
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) {
    if let Some(var_108) = &input.description {
        object.key("Description").string(var_108);
    }
    if let Some(var_109) = &input.group_name {
        object.key("GroupName").string(var_109);
    }
}

pub fn serialize_structure_crate_input_create_iam_policy_assignment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIamPolicyAssignmentInput,
) {
    if let Some(var_110) = &input.assignment_name {
        object.key("AssignmentName").string(var_110);
    }
    if let Some(var_111) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_111.as_str());
    }
    if let Some(var_112) = &input.identities {
        let mut object_113 = object.key("Identities").start_object();
        for (key_114, value_115) in var_112 {
            {
                let mut array_116 = object_113.key(key_114).start_array();
                for item_117 in value_115 {
                    {
                        array_116.value().string(item_117);
                    }
                }
                array_116.finish();
            }
        }
        object_113.finish();
    }
    if let Some(var_118) = &input.policy_arn {
        object.key("PolicyArn").string(var_118);
    }
}

pub fn serialize_structure_crate_input_create_namespace_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNamespaceInput,
) {
    if let Some(var_119) = &input.identity_store {
        object.key("IdentityStore").string(var_119.as_str());
    }
    if let Some(var_120) = &input.namespace {
        object.key("Namespace").string(var_120);
    }
    if let Some(var_121) = &input.tags {
        let mut array_122 = object.key("Tags").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_124, item_123);
                object_124.finish();
            }
        }
        array_122.finish();
    }
}

pub fn serialize_structure_crate_input_create_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateInput,
) {
    if let Some(var_125) = &input.name {
        object.key("Name").string(var_125);
    }
    if let Some(var_126) = &input.permissions {
        let mut array_127 = object.key("Permissions").start_array();
        for item_128 in var_126 {
            {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_129,
                    item_128,
                );
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.source_entity {
        let mut object_131 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_131,
            var_130,
        );
        object_131.finish();
    }
    if let Some(var_132) = &input.tags {
        let mut array_133 = object.key("Tags").start_array();
        for item_134 in var_132 {
            {
                let mut object_135 = array_133.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_135, item_134);
                object_135.finish();
            }
        }
        array_133.finish();
    }
    if let Some(var_136) = &input.version_description {
        object.key("VersionDescription").string(var_136);
    }
}

pub fn serialize_structure_crate_input_create_template_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateAliasInput,
) {
    if let Some(var_137) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_137).into()),
        );
    }
}

pub fn serialize_structure_crate_input_create_theme_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeInput,
) {
    if let Some(var_138) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_138);
    }
    if let Some(var_139) = &input.configuration {
        let mut object_140 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_140,
            var_139,
        );
        object_140.finish();
    }
    if let Some(var_141) = &input.name {
        object.key("Name").string(var_141);
    }
    if let Some(var_142) = &input.permissions {
        let mut array_143 = object.key("Permissions").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_145,
                    item_144,
                );
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("Tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_149, item_148);
                object_149.finish();
            }
        }
        array_147.finish();
    }
    if let Some(var_150) = &input.version_description {
        object.key("VersionDescription").string(var_150);
    }
}

pub fn serialize_structure_crate_input_create_theme_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThemeAliasInput,
) {
    if let Some(var_151) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_151).into()),
        );
    }
}

pub fn serialize_structure_crate_input_generate_embed_url_for_anonymous_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForAnonymousUserInput,
) {
    if let Some(var_152) = &input.authorized_resource_arns {
        let mut array_153 = object.key("AuthorizedResourceArns").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154);
            }
        }
        array_153.finish();
    }
    if let Some(var_155) = &input.experience_configuration {
        let mut object_156 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.namespace {
        object.key("Namespace").string(var_157);
    }
    if let Some(var_158) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_158).into()),
        );
    }
    if let Some(var_159) = &input.session_tags {
        let mut array_160 = object.key("SessionTags").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_tag(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
}

pub fn serialize_structure_crate_input_generate_embed_url_for_registered_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GenerateEmbedUrlForRegisteredUserInput,
) {
    if let Some(var_163) = &input.experience_configuration {
        let mut object_164 = object.key("ExperienceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_embedding_experience_configuration(&mut object_164, var_163);
        object_164.finish();
    }
    if let Some(var_165) = &input.session_lifetime_in_minutes {
        object.key("SessionLifetimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.user_arn {
        object.key("UserArn").string(var_166);
    }
}

pub fn serialize_structure_crate_input_list_iam_policy_assignments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIamPolicyAssignmentsInput,
) {
    if let Some(var_167) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_167.as_str());
    }
}

pub fn serialize_structure_crate_input_register_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterUserInput,
) {
    if let Some(var_168) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_168);
    }
    if let Some(var_169) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_169);
    }
    if let Some(var_170) = &input.email {
        object.key("Email").string(var_170);
    }
    if let Some(var_171) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_171);
    }
    if let Some(var_172) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_172);
    }
    if let Some(var_173) = &input.iam_arn {
        object.key("IamArn").string(var_173);
    }
    if let Some(var_174) = &input.identity_type {
        object.key("IdentityType").string(var_174.as_str());
    }
    if let Some(var_175) = &input.session_name {
        object.key("SessionName").string(var_175);
    }
    if let Some(var_176) = &input.user_name {
        object.key("UserName").string(var_176);
    }
    if let Some(var_177) = &input.user_role {
        object.key("UserRole").string(var_177.as_str());
    }
}

pub fn serialize_structure_crate_input_search_analyses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAnalysesInput,
) {
    if let Some(var_178) = &input.filters {
        let mut array_179 = object.key("Filters").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_analysis_search_filter(
                    &mut object_181,
                    item_180,
                );
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    if let Some(var_183) = &input.next_token {
        object.key("NextToken").string(var_183);
    }
}

pub fn serialize_structure_crate_input_search_dashboards_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDashboardsInput,
) {
    if let Some(var_184) = &input.filters {
        let mut array_185 = object.key("Filters").start_array();
        for item_186 in var_184 {
            {
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dashboard_search_filter(
                    &mut object_187,
                    item_186,
                );
                object_187.finish();
            }
        }
        array_185.finish();
    }
    if let Some(var_188) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189);
    }
}

pub fn serialize_structure_crate_input_search_folders_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFoldersInput,
) {
    if let Some(var_190) = &input.filters {
        let mut array_191 = object.key("Filters").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_search_filter(
                    &mut object_193,
                    item_192,
                );
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    if let Some(var_195) = &input.next_token {
        object.key("NextToken").string(var_195);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_196) = &input.tags {
        let mut array_197 = object.key("Tags").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_199, item_198);
                object_199.finish();
            }
        }
        array_197.finish();
    }
}

pub fn serialize_structure_crate_input_update_account_customization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountCustomizationInput,
) {
    if let Some(var_200) = &input.account_customization {
        let mut object_201 = object.key("AccountCustomization").start_object();
        crate::json_ser::serialize_structure_crate_model_account_customization(
            &mut object_201,
            var_200,
        );
        object_201.finish();
    }
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) {
    if let Some(var_202) = &input.default_namespace {
        object.key("DefaultNamespace").string(var_202);
    }
    if let Some(var_203) = &input.notification_email {
        object.key("NotificationEmail").string(var_203);
    }
}

pub fn serialize_structure_crate_input_update_analysis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisInput,
) {
    if let Some(var_204) = &input.name {
        object.key("Name").string(var_204);
    }
    if let Some(var_205) = &input.parameters {
        let mut object_206 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_206, var_205);
        object_206.finish();
    }
    if let Some(var_207) = &input.source_entity {
        let mut object_208 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_entity(
            &mut object_208,
            var_207,
        );
        object_208.finish();
    }
    if let Some(var_209) = &input.theme_arn {
        object.key("ThemeArn").string(var_209);
    }
}

pub fn serialize_structure_crate_input_update_analysis_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnalysisPermissionsInput,
) {
    if let Some(var_210) = &input.grant_permissions {
        let mut array_211 = object.key("GrantPermissions").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_213,
                    item_212,
                );
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.revoke_permissions {
        let mut array_215 = object.key("RevokePermissions").start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_217,
                    item_216,
                );
                object_217.finish();
            }
        }
        array_215.finish();
    }
}

pub fn serialize_structure_crate_input_update_dashboard_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardInput,
) {
    if let Some(var_218) = &input.dashboard_publish_options {
        let mut object_219 = object.key("DashboardPublishOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_publish_options(
            &mut object_219,
            var_218,
        );
        object_219.finish();
    }
    if let Some(var_220) = &input.name {
        object.key("Name").string(var_220);
    }
    if let Some(var_221) = &input.parameters {
        let mut object_222 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_parameters(&mut object_222, var_221);
        object_222.finish();
    }
    if let Some(var_223) = &input.source_entity {
        let mut object_224 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_entity(
            &mut object_224,
            var_223,
        );
        object_224.finish();
    }
    if let Some(var_225) = &input.theme_arn {
        object.key("ThemeArn").string(var_225);
    }
    if let Some(var_226) = &input.version_description {
        object.key("VersionDescription").string(var_226);
    }
}

pub fn serialize_structure_crate_input_update_dashboard_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDashboardPermissionsInput,
) {
    if let Some(var_227) = &input.grant_permissions {
        let mut array_228 = object.key("GrantPermissions").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_230,
                    item_229,
                );
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if let Some(var_231) = &input.revoke_permissions {
        let mut array_232 = object.key("RevokePermissions").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_234,
                    item_233,
                );
                object_234.finish();
            }
        }
        array_232.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) {
    if let Some(var_235) = &input.column_groups {
        let mut array_236 = object.key("ColumnGroups").start_array();
        for item_237 in var_235 {
            {
                let mut object_238 = array_236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_group(
                    &mut object_238,
                    item_237,
                );
                object_238.finish();
            }
        }
        array_236.finish();
    }
    if let Some(var_239) = &input.column_level_permission_rules {
        let mut array_240 = object.key("ColumnLevelPermissionRules").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_level_permission_rule(
                    &mut object_242,
                    item_241,
                );
                object_242.finish();
            }
        }
        array_240.finish();
    }
    if let Some(var_243) = &input.data_set_usage_configuration {
        let mut object_244 = object.key("DataSetUsageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_set_usage_configuration(
            &mut object_244,
            var_243,
        );
        object_244.finish();
    }
    if let Some(var_245) = &input.field_folders {
        let mut object_246 = object.key("FieldFolders").start_object();
        for (key_247, value_248) in var_245 {
            {
                let mut object_249 = object_246.key(key_247).start_object();
                crate::json_ser::serialize_structure_crate_model_field_folder(
                    &mut object_249,
                    value_248,
                );
                object_249.finish();
            }
        }
        object_246.finish();
    }
    if let Some(var_250) = &input.import_mode {
        object.key("ImportMode").string(var_250.as_str());
    }
    if let Some(var_251) = &input.logical_table_map {
        let mut object_252 = object.key("LogicalTableMap").start_object();
        for (key_253, value_254) in var_251 {
            {
                let mut object_255 = object_252.key(key_253).start_object();
                crate::json_ser::serialize_structure_crate_model_logical_table(
                    &mut object_255,
                    value_254,
                );
                object_255.finish();
            }
        }
        object_252.finish();
    }
    if let Some(var_256) = &input.name {
        object.key("Name").string(var_256);
    }
    if let Some(var_257) = &input.physical_table_map {
        let mut object_258 = object.key("PhysicalTableMap").start_object();
        for (key_259, value_260) in var_257 {
            {
                let mut object_261 = object_258.key(key_259).start_object();
                crate::json_ser::serialize_union_crate_model_physical_table(
                    &mut object_261,
                    value_260,
                );
                object_261.finish();
            }
        }
        object_258.finish();
    }
    if let Some(var_262) = &input.row_level_permission_data_set {
        let mut object_263 = object.key("RowLevelPermissionDataSet").start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_data_set(
            &mut object_263,
            var_262,
        );
        object_263.finish();
    }
    if let Some(var_264) = &input.row_level_permission_tag_configuration {
        let mut object_265 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_configuration(
            &mut object_265,
            var_264,
        );
        object_265.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_set_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetPermissionsInput,
) {
    if let Some(var_266) = &input.grant_permissions {
        let mut array_267 = object.key("GrantPermissions").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_269,
                    item_268,
                );
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.revoke_permissions {
        let mut array_271 = object.key("RevokePermissions").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_273,
                    item_272,
                );
                object_273.finish();
            }
        }
        array_271.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_274) = &input.credentials {
        let mut object_275 = object.key("Credentials").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_credentials(
            &mut object_275,
            var_274,
        );
        object_275.finish();
    }
    if let Some(var_276) = &input.data_source_parameters {
        let mut object_277 = object.key("DataSourceParameters").start_object();
        crate::json_ser::serialize_union_crate_model_data_source_parameters(
            &mut object_277,
            var_276,
        );
        object_277.finish();
    }
    if let Some(var_278) = &input.name {
        object.key("Name").string(var_278);
    }
    if let Some(var_279) = &input.ssl_properties {
        let mut object_280 = object.key("SslProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_ssl_properties(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.vpc_connection_properties {
        let mut object_282 = object.key("VpcConnectionProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_connection_properties(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourcePermissionsInput,
) {
    if let Some(var_283) = &input.grant_permissions {
        let mut array_284 = object.key("GrantPermissions").start_array();
        for item_285 in var_283 {
            {
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_286,
                    item_285,
                );
                object_286.finish();
            }
        }
        array_284.finish();
    }
    if let Some(var_287) = &input.revoke_permissions {
        let mut array_288 = object.key("RevokePermissions").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_290,
                    item_289,
                );
                object_290.finish();
            }
        }
        array_288.finish();
    }
}

pub fn serialize_structure_crate_input_update_folder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderInput,
) {
    if let Some(var_291) = &input.name {
        object.key("Name").string(var_291);
    }
}

pub fn serialize_structure_crate_input_update_folder_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFolderPermissionsInput,
) {
    if let Some(var_292) = &input.grant_permissions {
        let mut array_293 = object.key("GrantPermissions").start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_295,
                    item_294,
                );
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.revoke_permissions {
        let mut array_297 = object.key("RevokePermissions").start_array();
        for item_298 in var_296 {
            {
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_299,
                    item_298,
                );
                object_299.finish();
            }
        }
        array_297.finish();
    }
}

pub fn serialize_structure_crate_input_update_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGroupInput,
) {
    if let Some(var_300) = &input.description {
        object.key("Description").string(var_300);
    }
}

pub fn serialize_structure_crate_input_update_iam_policy_assignment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIamPolicyAssignmentInput,
) {
    if let Some(var_301) = &input.assignment_status {
        object.key("AssignmentStatus").string(var_301.as_str());
    }
    if let Some(var_302) = &input.identities {
        let mut object_303 = object.key("Identities").start_object();
        for (key_304, value_305) in var_302 {
            {
                let mut array_306 = object_303.key(key_304).start_array();
                for item_307 in value_305 {
                    {
                        array_306.value().string(item_307);
                    }
                }
                array_306.finish();
            }
        }
        object_303.finish();
    }
    if let Some(var_308) = &input.policy_arn {
        object.key("PolicyArn").string(var_308);
    }
}

pub fn serialize_structure_crate_input_update_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateInput,
) {
    if let Some(var_309) = &input.name {
        object.key("Name").string(var_309);
    }
    if let Some(var_310) = &input.source_entity {
        let mut object_311 = object.key("SourceEntity").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_entity(
            &mut object_311,
            var_310,
        );
        object_311.finish();
    }
    if let Some(var_312) = &input.version_description {
        object.key("VersionDescription").string(var_312);
    }
}

pub fn serialize_structure_crate_input_update_template_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateAliasInput,
) {
    if let Some(var_313) = &input.template_version_number {
        object.key("TemplateVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_313).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_template_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplatePermissionsInput,
) {
    if let Some(var_314) = &input.grant_permissions {
        let mut array_315 = object.key("GrantPermissions").start_array();
        for item_316 in var_314 {
            {
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_317,
                    item_316,
                );
                object_317.finish();
            }
        }
        array_315.finish();
    }
    if let Some(var_318) = &input.revoke_permissions {
        let mut array_319 = object.key("RevokePermissions").start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_321,
                    item_320,
                );
                object_321.finish();
            }
        }
        array_319.finish();
    }
}

pub fn serialize_structure_crate_input_update_theme_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeInput,
) {
    if let Some(var_322) = &input.base_theme_id {
        object.key("BaseThemeId").string(var_322);
    }
    if let Some(var_323) = &input.configuration {
        let mut object_324 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_configuration(
            &mut object_324,
            var_323,
        );
        object_324.finish();
    }
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325);
    }
    if let Some(var_326) = &input.version_description {
        object.key("VersionDescription").string(var_326);
    }
}

pub fn serialize_structure_crate_input_update_theme_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemeAliasInput,
) {
    if let Some(var_327) = &input.theme_version_number {
        object.key("ThemeVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_327).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_theme_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThemePermissionsInput,
) {
    if let Some(var_328) = &input.grant_permissions {
        let mut array_329 = object.key("GrantPermissions").start_array();
        for item_330 in var_328 {
            {
                let mut object_331 = array_329.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_331,
                    item_330,
                );
                object_331.finish();
            }
        }
        array_329.finish();
    }
    if let Some(var_332) = &input.revoke_permissions {
        let mut array_333 = object.key("RevokePermissions").start_array();
        for item_334 in var_332 {
            {
                let mut object_335 = array_333.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_335,
                    item_334,
                );
                object_335.finish();
            }
        }
        array_333.finish();
    }
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) {
    if let Some(var_336) = &input.custom_federation_provider_url {
        object.key("CustomFederationProviderUrl").string(var_336);
    }
    if let Some(var_337) = &input.custom_permissions_name {
        object.key("CustomPermissionsName").string(var_337);
    }
    if let Some(var_338) = &input.email {
        object.key("Email").string(var_338);
    }
    if let Some(var_339) = &input.external_login_federation_provider_type {
        object
            .key("ExternalLoginFederationProviderType")
            .string(var_339);
    }
    if let Some(var_340) = &input.external_login_id {
        object.key("ExternalLoginId").string(var_340);
    }
    if let Some(var_341) = &input.role {
        object.key("Role").string(var_341.as_str());
    }
    if input.unapply_custom_permissions {
        object
            .key("UnapplyCustomPermissions")
            .boolean(input.unapply_custom_permissions);
    }
}

pub fn serialize_structure_crate_model_account_customization(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountCustomization,
) {
    if let Some(var_342) = &input.default_theme {
        object.key("DefaultTheme").string(var_342);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_343) = &input.key {
        object.key("Key").string(var_343);
    }
    if let Some(var_344) = &input.value {
        object.key("Value").string(var_344);
    }
}

pub fn serialize_structure_crate_model_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameters,
) {
    if let Some(var_345) = &input.string_parameters {
        let mut array_346 = object.key("StringParameters").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_parameter(
                    &mut object_348,
                    item_347,
                );
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.integer_parameters {
        let mut array_350 = object.key("IntegerParameters").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter(
                    &mut object_352,
                    item_351,
                );
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.decimal_parameters {
        let mut array_354 = object.key("DecimalParameters").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_decimal_parameter(
                    &mut object_356,
                    item_355,
                );
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.date_time_parameters {
        let mut array_358 = object.key("DateTimeParameters").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_time_parameter(
                    &mut object_360,
                    item_359,
                );
                object_360.finish();
            }
        }
        array_358.finish();
    }
}

pub fn serialize_structure_crate_model_resource_permission(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) {
    if let Some(var_361) = &input.principal {
        object.key("Principal").string(var_361);
    }
    if let Some(var_362) = &input.actions {
        let mut array_363 = object.key("Actions").start_array();
        for item_364 in var_362 {
            {
                array_363.value().string(item_364);
            }
        }
        array_363.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceEntity,
) {
    if let Some(var_365) = &input.source_template {
        let mut object_366 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_analysis_source_template(
            &mut object_366,
            var_365,
        );
        object_366.finish();
    }
}

pub fn serialize_structure_crate_model_dashboard_publish_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardPublishOptions,
) {
    if let Some(var_367) = &input.ad_hoc_filtering_option {
        let mut object_368 = object.key("AdHocFilteringOption").start_object();
        crate::json_ser::serialize_structure_crate_model_ad_hoc_filtering_option(
            &mut object_368,
            var_367,
        );
        object_368.finish();
    }
    if let Some(var_369) = &input.export_to_csv_option {
        let mut object_370 = object.key("ExportToCSVOption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_to_csv_option(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
    if let Some(var_371) = &input.sheet_controls_option {
        let mut object_372 = object.key("SheetControlsOption").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_controls_option(
            &mut object_372,
            var_371,
        );
        object_372.finish();
    }
}

pub fn serialize_structure_crate_model_dashboard_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceEntity,
) {
    if let Some(var_373) = &input.source_template {
        let mut object_374 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_dashboard_source_template(
            &mut object_374,
            var_373,
        );
        object_374.finish();
    }
}

pub fn serialize_structure_crate_model_column_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnGroup,
) {
    if let Some(var_375) = &input.geo_spatial_column_group {
        let mut object_376 = object.key("GeoSpatialColumnGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_spatial_column_group(
            &mut object_376,
            var_375,
        );
        object_376.finish();
    }
}

pub fn serialize_structure_crate_model_column_level_permission_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnLevelPermissionRule,
) {
    if let Some(var_377) = &input.principals {
        let mut array_378 = object.key("Principals").start_array();
        for item_379 in var_377 {
            {
                array_378.value().string(item_379);
            }
        }
        array_378.finish();
    }
    if let Some(var_380) = &input.column_names {
        let mut array_381 = object.key("ColumnNames").start_array();
        for item_382 in var_380 {
            {
                array_381.value().string(item_382);
            }
        }
        array_381.finish();
    }
}

pub fn serialize_structure_crate_model_data_set_usage_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetUsageConfiguration,
) {
    if input.disable_use_as_direct_query_source {
        object
            .key("DisableUseAsDirectQuerySource")
            .boolean(input.disable_use_as_direct_query_source);
    }
    if input.disable_use_as_imported_source {
        object
            .key("DisableUseAsImportedSource")
            .boolean(input.disable_use_as_imported_source);
    }
}

pub fn serialize_structure_crate_model_field_folder(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldFolder,
) {
    if let Some(var_383) = &input.description {
        object.key("description").string(var_383);
    }
    if let Some(var_384) = &input.columns {
        let mut array_385 = object.key("columns").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386);
            }
        }
        array_385.finish();
    }
}

pub fn serialize_structure_crate_model_logical_table(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTable,
) {
    if let Some(var_387) = &input.alias {
        object.key("Alias").string(var_387);
    }
    if let Some(var_388) = &input.data_transforms {
        let mut array_389 = object.key("DataTransforms").start_array();
        for item_390 in var_388 {
            {
                let mut object_391 = array_389.value().start_object();
                crate::json_ser::serialize_union_crate_model_transform_operation(
                    &mut object_391,
                    item_390,
                );
                object_391.finish();
            }
        }
        array_389.finish();
    }
    if let Some(var_392) = &input.source {
        let mut object_393 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_logical_table_source(
            &mut object_393,
            var_392,
        );
        object_393.finish();
    }
}

pub fn serialize_union_crate_model_physical_table(
    object_69: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalTable,
) {
    match input {
        crate::model::PhysicalTable::RelationalTable(inner) => {
            let mut object_394 = object_69.key("RelationalTable").start_object();
            crate::json_ser::serialize_structure_crate_model_relational_table(
                &mut object_394,
                inner,
            );
            object_394.finish();
        }
        crate::model::PhysicalTable::CustomSql(inner) => {
            let mut object_395 = object_69.key("CustomSql").start_object();
            crate::json_ser::serialize_structure_crate_model_custom_sql(&mut object_395, inner);
            object_395.finish();
        }
        crate::model::PhysicalTable::S3Source(inner) => {
            let mut object_396 = object_69.key("S3Source").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_source(&mut object_396, inner);
            object_396.finish();
        }
    }
}

pub fn serialize_structure_crate_model_row_level_permission_data_set(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionDataSet,
) {
    if let Some(var_397) = &input.namespace {
        object.key("Namespace").string(var_397);
    }
    if let Some(var_398) = &input.arn {
        object.key("Arn").string(var_398);
    }
    if let Some(var_399) = &input.permission_policy {
        object.key("PermissionPolicy").string(var_399.as_str());
    }
    if let Some(var_400) = &input.format_version {
        object.key("FormatVersion").string(var_400.as_str());
    }
    if let Some(var_401) = &input.status {
        object.key("Status").string(var_401.as_str());
    }
}

pub fn serialize_structure_crate_model_row_level_permission_tag_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagConfiguration,
) {
    if let Some(var_402) = &input.status {
        object.key("Status").string(var_402.as_str());
    }
    if let Some(var_403) = &input.tag_rules {
        let mut array_404 = object.key("TagRules").start_array();
        for item_405 in var_403 {
            {
                let mut object_406 = array_404.value().start_object();
                crate::json_ser::serialize_structure_crate_model_row_level_permission_tag_rule(
                    &mut object_406,
                    item_405,
                );
                object_406.finish();
            }
        }
        array_404.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_credentials(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceCredentials,
) {
    if let Some(var_407) = &input.credential_pair {
        let mut object_408 = object.key("CredentialPair").start_object();
        crate::json_ser::serialize_structure_crate_model_credential_pair(&mut object_408, var_407);
        object_408.finish();
    }
    if let Some(var_409) = &input.copy_source_arn {
        object.key("CopySourceArn").string(var_409);
    }
}

pub fn serialize_union_crate_model_data_source_parameters(
    object_82: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceParameters,
) {
    match input {
        crate::model::DataSourceParameters::AmazonElasticsearchParameters(inner) => {
            let mut object_410 = object_82
                .key("AmazonElasticsearchParameters")
                .start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_elasticsearch_parameters(
                &mut object_410,
                inner,
            );
            object_410.finish();
        }
        crate::model::DataSourceParameters::AthenaParameters(inner) => {
            let mut object_411 = object_82.key("AthenaParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_athena_parameters(
                &mut object_411,
                inner,
            );
            object_411.finish();
        }
        crate::model::DataSourceParameters::AuroraParameters(inner) => {
            let mut object_412 = object_82.key("AuroraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_parameters(
                &mut object_412,
                inner,
            );
            object_412.finish();
        }
        crate::model::DataSourceParameters::AuroraPostgreSqlParameters(inner) => {
            let mut object_413 = object_82.key("AuroraPostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aurora_postgre_sql_parameters(
                &mut object_413,
                inner,
            );
            object_413.finish();
        }
        crate::model::DataSourceParameters::AwsIotAnalyticsParameters(inner) => {
            let mut object_414 = object_82.key("AwsIotAnalyticsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_aws_iot_analytics_parameters(
                &mut object_414,
                inner,
            );
            object_414.finish();
        }
        crate::model::DataSourceParameters::JiraParameters(inner) => {
            let mut object_415 = object_82.key("JiraParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_jira_parameters(
                &mut object_415,
                inner,
            );
            object_415.finish();
        }
        crate::model::DataSourceParameters::MariaDbParameters(inner) => {
            let mut object_416 = object_82.key("MariaDbParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_maria_db_parameters(
                &mut object_416,
                inner,
            );
            object_416.finish();
        }
        crate::model::DataSourceParameters::MySqlParameters(inner) => {
            let mut object_417 = object_82.key("MySqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_my_sql_parameters(
                &mut object_417,
                inner,
            );
            object_417.finish();
        }
        crate::model::DataSourceParameters::OracleParameters(inner) => {
            let mut object_418 = object_82.key("OracleParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_oracle_parameters(
                &mut object_418,
                inner,
            );
            object_418.finish();
        }
        crate::model::DataSourceParameters::PostgreSqlParameters(inner) => {
            let mut object_419 = object_82.key("PostgreSqlParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_postgre_sql_parameters(
                &mut object_419,
                inner,
            );
            object_419.finish();
        }
        crate::model::DataSourceParameters::PrestoParameters(inner) => {
            let mut object_420 = object_82.key("PrestoParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_presto_parameters(
                &mut object_420,
                inner,
            );
            object_420.finish();
        }
        crate::model::DataSourceParameters::RdsParameters(inner) => {
            let mut object_421 = object_82.key("RdsParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_rds_parameters(&mut object_421, inner);
            object_421.finish();
        }
        crate::model::DataSourceParameters::RedshiftParameters(inner) => {
            let mut object_422 = object_82.key("RedshiftParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_redshift_parameters(
                &mut object_422,
                inner,
            );
            object_422.finish();
        }
        crate::model::DataSourceParameters::S3Parameters(inner) => {
            let mut object_423 = object_82.key("S3Parameters").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_parameters(&mut object_423, inner);
            object_423.finish();
        }
        crate::model::DataSourceParameters::ServiceNowParameters(inner) => {
            let mut object_424 = object_82.key("ServiceNowParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_service_now_parameters(
                &mut object_424,
                inner,
            );
            object_424.finish();
        }
        crate::model::DataSourceParameters::SnowflakeParameters(inner) => {
            let mut object_425 = object_82.key("SnowflakeParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_snowflake_parameters(
                &mut object_425,
                inner,
            );
            object_425.finish();
        }
        crate::model::DataSourceParameters::SparkParameters(inner) => {
            let mut object_426 = object_82.key("SparkParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_spark_parameters(
                &mut object_426,
                inner,
            );
            object_426.finish();
        }
        crate::model::DataSourceParameters::SqlServerParameters(inner) => {
            let mut object_427 = object_82.key("SqlServerParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_sql_server_parameters(
                &mut object_427,
                inner,
            );
            object_427.finish();
        }
        crate::model::DataSourceParameters::TeradataParameters(inner) => {
            let mut object_428 = object_82.key("TeradataParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_teradata_parameters(
                &mut object_428,
                inner,
            );
            object_428.finish();
        }
        crate::model::DataSourceParameters::TwitterParameters(inner) => {
            let mut object_429 = object_82.key("TwitterParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_twitter_parameters(
                &mut object_429,
                inner,
            );
            object_429.finish();
        }
        crate::model::DataSourceParameters::AmazonOpenSearchParameters(inner) => {
            let mut object_430 = object_82.key("AmazonOpenSearchParameters").start_object();
            crate::json_ser::serialize_structure_crate_model_amazon_open_search_parameters(
                &mut object_430,
                inner,
            );
            object_430.finish();
        }
    }
}

pub fn serialize_structure_crate_model_ssl_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SslProperties,
) {
    if input.disable_ssl {
        object.key("DisableSsl").boolean(input.disable_ssl);
    }
}

pub fn serialize_structure_crate_model_vpc_connection_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConnectionProperties,
) {
    if let Some(var_431) = &input.vpc_connection_arn {
        object.key("VpcConnectionArn").string(var_431);
    }
}

pub fn serialize_structure_crate_model_template_source_entity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceEntity,
) {
    if let Some(var_432) = &input.source_analysis {
        let mut object_433 = object.key("SourceAnalysis").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_analysis(
            &mut object_433,
            var_432,
        );
        object_433.finish();
    }
    if let Some(var_434) = &input.source_template {
        let mut object_435 = object.key("SourceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template_source_template(
            &mut object_435,
            var_434,
        );
        object_435.finish();
    }
}

pub fn serialize_structure_crate_model_theme_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeConfiguration,
) {
    if let Some(var_436) = &input.data_color_palette {
        let mut object_437 = object.key("DataColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_data_color_palette(
            &mut object_437,
            var_436,
        );
        object_437.finish();
    }
    if let Some(var_438) = &input.ui_color_palette {
        let mut object_439 = object.key("UIColorPalette").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_color_palette(&mut object_439, var_438);
        object_439.finish();
    }
    if let Some(var_440) = &input.sheet {
        let mut object_441 = object.key("Sheet").start_object();
        crate::json_ser::serialize_structure_crate_model_sheet_style(&mut object_441, var_440);
        object_441.finish();
    }
}

pub fn serialize_structure_crate_model_anonymous_user_embedding_experience_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserEmbeddingExperienceConfiguration,
) {
    if let Some(var_442) = &input.dashboard {
        let mut object_443 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(&mut object_443, var_442);
        object_443.finish();
    }
}

pub fn serialize_structure_crate_model_session_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionTag,
) {
    if let Some(var_444) = &input.key {
        object.key("Key").string(var_444);
    }
    if let Some(var_445) = &input.value {
        object.key("Value").string(var_445);
    }
}

pub fn serialize_structure_crate_model_registered_user_embedding_experience_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserEmbeddingExperienceConfiguration,
) {
    if let Some(var_446) = &input.dashboard {
        let mut object_447 = object.key("Dashboard").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(&mut object_447, var_446);
        object_447.finish();
    }
    if let Some(var_448) = &input.quick_sight_console {
        let mut object_449 = object.key("QuickSightConsole").start_object();
        crate::json_ser::serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(&mut object_449, var_448);
        object_449.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSearchFilter,
) {
    if let Some(var_450) = &input.operator {
        object.key("Operator").string(var_450.as_str());
    }
    if let Some(var_451) = &input.name {
        object.key("Name").string(var_451.as_str());
    }
    if let Some(var_452) = &input.value {
        object.key("Value").string(var_452);
    }
}

pub fn serialize_structure_crate_model_dashboard_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSearchFilter,
) {
    if let Some(var_453) = &input.operator {
        object.key("Operator").string(var_453.as_str());
    }
    if let Some(var_454) = &input.name {
        object.key("Name").string(var_454.as_str());
    }
    if let Some(var_455) = &input.value {
        object.key("Value").string(var_455);
    }
}

pub fn serialize_structure_crate_model_folder_search_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderSearchFilter,
) {
    if let Some(var_456) = &input.operator {
        object.key("Operator").string(var_456.as_str());
    }
    if let Some(var_457) = &input.name {
        object.key("Name").string(var_457.as_str());
    }
    if let Some(var_458) = &input.value {
        object.key("Value").string(var_458);
    }
}

pub fn serialize_structure_crate_model_string_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringParameter,
) {
    if let Some(var_459) = &input.name {
        object.key("Name").string(var_459);
    }
    if let Some(var_460) = &input.values {
        let mut array_461 = object.key("Values").start_array();
        for item_462 in var_460 {
            {
                array_461.value().string(item_462);
            }
        }
        array_461.finish();
    }
}

pub fn serialize_structure_crate_model_integer_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameter,
) {
    if let Some(var_463) = &input.name {
        object.key("Name").string(var_463);
    }
    if let Some(var_464) = &input.values {
        let mut array_465 = object.key("Values").start_array();
        for item_466 in var_464 {
            {
                array_465.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_466).into()),
                );
            }
        }
        array_465.finish();
    }
}

pub fn serialize_structure_crate_model_decimal_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalParameter,
) {
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467);
    }
    if let Some(var_468) = &input.values {
        let mut array_469 = object.key("Values").start_array();
        for item_470 in var_468 {
            {
                array_469.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*item_470).into()),
                );
            }
        }
        array_469.finish();
    }
}

pub fn serialize_structure_crate_model_date_time_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateTimeParameter,
) {
    if let Some(var_471) = &input.name {
        object.key("Name").string(var_471);
    }
    if let Some(var_472) = &input.values {
        let mut array_473 = object.key("Values").start_array();
        for item_474 in var_472 {
            {
                array_473
                    .value()
                    .instant(item_474, smithy_types::instant::Format::EpochSeconds);
            }
        }
        array_473.finish();
    }
}

pub fn serialize_structure_crate_model_analysis_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnalysisSourceTemplate,
) {
    if let Some(var_475) = &input.data_set_references {
        let mut array_476 = object.key("DataSetReferences").start_array();
        for item_477 in var_475 {
            {
                let mut object_478 = array_476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_478,
                    item_477,
                );
                object_478.finish();
            }
        }
        array_476.finish();
    }
    if let Some(var_479) = &input.arn {
        object.key("Arn").string(var_479);
    }
}

pub fn serialize_structure_crate_model_ad_hoc_filtering_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdHocFilteringOption,
) {
    if let Some(var_480) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_480.as_str());
    }
}

pub fn serialize_structure_crate_model_export_to_csv_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportToCsvOption,
) {
    if let Some(var_481) = &input.availability_status {
        object.key("AvailabilityStatus").string(var_481.as_str());
    }
}

pub fn serialize_structure_crate_model_sheet_controls_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetControlsOption,
) {
    if let Some(var_482) = &input.visibility_state {
        object.key("VisibilityState").string(var_482.as_str());
    }
}

pub fn serialize_structure_crate_model_dashboard_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DashboardSourceTemplate,
) {
    if let Some(var_483) = &input.data_set_references {
        let mut array_484 = object.key("DataSetReferences").start_array();
        for item_485 in var_483 {
            {
                let mut object_486 = array_484.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_486,
                    item_485,
                );
                object_486.finish();
            }
        }
        array_484.finish();
    }
    if let Some(var_487) = &input.arn {
        object.key("Arn").string(var_487);
    }
}

pub fn serialize_structure_crate_model_geo_spatial_column_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoSpatialColumnGroup,
) {
    if let Some(var_488) = &input.name {
        object.key("Name").string(var_488);
    }
    if let Some(var_489) = &input.country_code {
        object.key("CountryCode").string(var_489.as_str());
    }
    if let Some(var_490) = &input.columns {
        let mut array_491 = object.key("Columns").start_array();
        for item_492 in var_490 {
            {
                array_491.value().string(item_492);
            }
        }
        array_491.finish();
    }
}

pub fn serialize_union_crate_model_transform_operation(
    object_391: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOperation,
) {
    match input {
        crate::model::TransformOperation::ProjectOperation(inner) => {
            let mut object_493 = object_391.key("ProjectOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_project_operation(
                &mut object_493,
                inner,
            );
            object_493.finish();
        }
        crate::model::TransformOperation::FilterOperation(inner) => {
            let mut object_494 = object_391.key("FilterOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_filter_operation(
                &mut object_494,
                inner,
            );
            object_494.finish();
        }
        crate::model::TransformOperation::CreateColumnsOperation(inner) => {
            let mut object_495 = object_391.key("CreateColumnsOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_create_columns_operation(
                &mut object_495,
                inner,
            );
            object_495.finish();
        }
        crate::model::TransformOperation::RenameColumnOperation(inner) => {
            let mut object_496 = object_391.key("RenameColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_rename_column_operation(
                &mut object_496,
                inner,
            );
            object_496.finish();
        }
        crate::model::TransformOperation::CastColumnTypeOperation(inner) => {
            let mut object_497 = object_391.key("CastColumnTypeOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_cast_column_type_operation(
                &mut object_497,
                inner,
            );
            object_497.finish();
        }
        crate::model::TransformOperation::TagColumnOperation(inner) => {
            let mut object_498 = object_391.key("TagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_tag_column_operation(
                &mut object_498,
                inner,
            );
            object_498.finish();
        }
        crate::model::TransformOperation::UntagColumnOperation(inner) => {
            let mut object_499 = object_391.key("UntagColumnOperation").start_object();
            crate::json_ser::serialize_structure_crate_model_untag_column_operation(
                &mut object_499,
                inner,
            );
            object_499.finish();
        }
    }
}

pub fn serialize_structure_crate_model_logical_table_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogicalTableSource,
) {
    if let Some(var_500) = &input.join_instruction {
        let mut object_501 = object.key("JoinInstruction").start_object();
        crate::json_ser::serialize_structure_crate_model_join_instruction(&mut object_501, var_500);
        object_501.finish();
    }
    if let Some(var_502) = &input.physical_table_id {
        object.key("PhysicalTableId").string(var_502);
    }
    if let Some(var_503) = &input.data_set_arn {
        object.key("DataSetArn").string(var_503);
    }
}

pub fn serialize_structure_crate_model_relational_table(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalTable,
) {
    if let Some(var_504) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_504);
    }
    if let Some(var_505) = &input.catalog {
        object.key("Catalog").string(var_505);
    }
    if let Some(var_506) = &input.schema {
        object.key("Schema").string(var_506);
    }
    if let Some(var_507) = &input.name {
        object.key("Name").string(var_507);
    }
    if let Some(var_508) = &input.input_columns {
        let mut array_509 = object.key("InputColumns").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_511,
                    item_510,
                );
                object_511.finish();
            }
        }
        array_509.finish();
    }
}

pub fn serialize_structure_crate_model_custom_sql(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomSql,
) {
    if let Some(var_512) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_512);
    }
    if let Some(var_513) = &input.name {
        object.key("Name").string(var_513);
    }
    if let Some(var_514) = &input.sql_query {
        object.key("SqlQuery").string(var_514);
    }
    if let Some(var_515) = &input.columns {
        let mut array_516 = object.key("Columns").start_array();
        for item_517 in var_515 {
            {
                let mut object_518 = array_516.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_518,
                    item_517,
                );
                object_518.finish();
            }
        }
        array_516.finish();
    }
}

pub fn serialize_structure_crate_model_s3_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Source,
) {
    if let Some(var_519) = &input.data_source_arn {
        object.key("DataSourceArn").string(var_519);
    }
    if let Some(var_520) = &input.upload_settings {
        let mut object_521 = object.key("UploadSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_upload_settings(&mut object_521, var_520);
        object_521.finish();
    }
    if let Some(var_522) = &input.input_columns {
        let mut array_523 = object.key("InputColumns").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_column(
                    &mut object_525,
                    item_524,
                );
                object_525.finish();
            }
        }
        array_523.finish();
    }
}

pub fn serialize_structure_crate_model_row_level_permission_tag_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RowLevelPermissionTagRule,
) {
    if let Some(var_526) = &input.tag_key {
        object.key("TagKey").string(var_526);
    }
    if let Some(var_527) = &input.column_name {
        object.key("ColumnName").string(var_527);
    }
    if let Some(var_528) = &input.tag_multi_value_delimiter {
        object.key("TagMultiValueDelimiter").string(var_528);
    }
    if let Some(var_529) = &input.match_all_value {
        object.key("MatchAllValue").string(var_529);
    }
}

pub fn serialize_structure_crate_model_credential_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CredentialPair,
) {
    if let Some(var_530) = &input.username {
        object.key("Username").string(var_530);
    }
    if let Some(var_531) = &input.password {
        object.key("Password").string(var_531);
    }
    if let Some(var_532) = &input.alternate_data_source_parameters {
        let mut array_533 = object.key("AlternateDataSourceParameters").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_union_crate_model_data_source_parameters(
                    &mut object_535,
                    item_534,
                );
                object_535.finish();
            }
        }
        array_533.finish();
    }
}

pub fn serialize_structure_crate_model_amazon_elasticsearch_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonElasticsearchParameters,
) {
    if let Some(var_536) = &input.domain {
        object.key("Domain").string(var_536);
    }
}

pub fn serialize_structure_crate_model_athena_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaParameters,
) {
    if let Some(var_537) = &input.work_group {
        object.key("WorkGroup").string(var_537);
    }
}

pub fn serialize_structure_crate_model_aurora_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraParameters,
) {
    if let Some(var_538) = &input.host {
        object.key("Host").string(var_538);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_539) = &input.database {
        object.key("Database").string(var_539);
    }
}

pub fn serialize_structure_crate_model_aurora_postgre_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuroraPostgreSqlParameters,
) {
    if let Some(var_540) = &input.host {
        object.key("Host").string(var_540);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_541) = &input.database {
        object.key("Database").string(var_541);
    }
}

pub fn serialize_structure_crate_model_aws_iot_analytics_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIotAnalyticsParameters,
) {
    if let Some(var_542) = &input.data_set_name {
        object.key("DataSetName").string(var_542);
    }
}

pub fn serialize_structure_crate_model_jira_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraParameters,
) {
    if let Some(var_543) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_543);
    }
}

pub fn serialize_structure_crate_model_maria_db_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MariaDbParameters,
) {
    if let Some(var_544) = &input.host {
        object.key("Host").string(var_544);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_545) = &input.database {
        object.key("Database").string(var_545);
    }
}

pub fn serialize_structure_crate_model_my_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlParameters,
) {
    if let Some(var_546) = &input.host {
        object.key("Host").string(var_546);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_547) = &input.database {
        object.key("Database").string(var_547);
    }
}

pub fn serialize_structure_crate_model_oracle_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleParameters,
) {
    if let Some(var_548) = &input.host {
        object.key("Host").string(var_548);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_549) = &input.database {
        object.key("Database").string(var_549);
    }
}

pub fn serialize_structure_crate_model_postgre_sql_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlParameters,
) {
    if let Some(var_550) = &input.host {
        object.key("Host").string(var_550);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_551) = &input.database {
        object.key("Database").string(var_551);
    }
}

pub fn serialize_structure_crate_model_presto_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrestoParameters,
) {
    if let Some(var_552) = &input.host {
        object.key("Host").string(var_552);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_553) = &input.catalog {
        object.key("Catalog").string(var_553);
    }
}

pub fn serialize_structure_crate_model_rds_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsParameters,
) {
    if let Some(var_554) = &input.instance_id {
        object.key("InstanceId").string(var_554);
    }
    if let Some(var_555) = &input.database {
        object.key("Database").string(var_555);
    }
}

pub fn serialize_structure_crate_model_redshift_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftParameters,
) {
    if let Some(var_556) = &input.host {
        object.key("Host").string(var_556);
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_557) = &input.database {
        object.key("Database").string(var_557);
    }
    if let Some(var_558) = &input.cluster_id {
        object.key("ClusterId").string(var_558);
    }
}

pub fn serialize_structure_crate_model_s3_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Parameters,
) {
    if let Some(var_559) = &input.manifest_file_location {
        let mut object_560 = object.key("ManifestFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_manifest_file_location(
            &mut object_560,
            var_559,
        );
        object_560.finish();
    }
}

pub fn serialize_structure_crate_model_service_now_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowParameters,
) {
    if let Some(var_561) = &input.site_base_url {
        object.key("SiteBaseUrl").string(var_561);
    }
}

pub fn serialize_structure_crate_model_snowflake_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnowflakeParameters,
) {
    if let Some(var_562) = &input.host {
        object.key("Host").string(var_562);
    }
    if let Some(var_563) = &input.database {
        object.key("Database").string(var_563);
    }
    if let Some(var_564) = &input.warehouse {
        object.key("Warehouse").string(var_564);
    }
}

pub fn serialize_structure_crate_model_spark_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkParameters,
) {
    if let Some(var_565) = &input.host {
        object.key("Host").string(var_565);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
}

pub fn serialize_structure_crate_model_sql_server_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlServerParameters,
) {
    if let Some(var_566) = &input.host {
        object.key("Host").string(var_566);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_567) = &input.database {
        object.key("Database").string(var_567);
    }
}

pub fn serialize_structure_crate_model_teradata_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TeradataParameters,
) {
    if let Some(var_568) = &input.host {
        object.key("Host").string(var_568);
    }
    {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_569) = &input.database {
        object.key("Database").string(var_569);
    }
}

pub fn serialize_structure_crate_model_twitter_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TwitterParameters,
) {
    if let Some(var_570) = &input.query {
        object.key("Query").string(var_570);
    }
    {
        object.key("MaxRows").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_rows).into()),
        );
    }
}

pub fn serialize_structure_crate_model_amazon_open_search_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmazonOpenSearchParameters,
) {
    if let Some(var_571) = &input.domain {
        object.key("Domain").string(var_571);
    }
}

pub fn serialize_structure_crate_model_template_source_analysis(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceAnalysis,
) {
    if let Some(var_572) = &input.arn {
        object.key("Arn").string(var_572);
    }
    if let Some(var_573) = &input.data_set_references {
        let mut array_574 = object.key("DataSetReferences").start_array();
        for item_575 in var_573 {
            {
                let mut object_576 = array_574.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_set_reference(
                    &mut object_576,
                    item_575,
                );
                object_576.finish();
            }
        }
        array_574.finish();
    }
}

pub fn serialize_structure_crate_model_template_source_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateSourceTemplate,
) {
    if let Some(var_577) = &input.arn {
        object.key("Arn").string(var_577);
    }
}

pub fn serialize_structure_crate_model_data_color_palette(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataColorPalette,
) {
    if let Some(var_578) = &input.colors {
        let mut array_579 = object.key("Colors").start_array();
        for item_580 in var_578 {
            {
                array_579.value().string(item_580);
            }
        }
        array_579.finish();
    }
    if let Some(var_581) = &input.min_max_gradient {
        let mut array_582 = object.key("MinMaxGradient").start_array();
        for item_583 in var_581 {
            {
                array_582.value().string(item_583);
            }
        }
        array_582.finish();
    }
    if let Some(var_584) = &input.empty_fill_color {
        object.key("EmptyFillColor").string(var_584);
    }
}

pub fn serialize_structure_crate_model_ui_color_palette(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiColorPalette,
) {
    if let Some(var_585) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_585);
    }
    if let Some(var_586) = &input.primary_background {
        object.key("PrimaryBackground").string(var_586);
    }
    if let Some(var_587) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_587);
    }
    if let Some(var_588) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_588);
    }
    if let Some(var_589) = &input.accent {
        object.key("Accent").string(var_589);
    }
    if let Some(var_590) = &input.accent_foreground {
        object.key("AccentForeground").string(var_590);
    }
    if let Some(var_591) = &input.danger {
        object.key("Danger").string(var_591);
    }
    if let Some(var_592) = &input.danger_foreground {
        object.key("DangerForeground").string(var_592);
    }
    if let Some(var_593) = &input.warning {
        object.key("Warning").string(var_593);
    }
    if let Some(var_594) = &input.warning_foreground {
        object.key("WarningForeground").string(var_594);
    }
    if let Some(var_595) = &input.success {
        object.key("Success").string(var_595);
    }
    if let Some(var_596) = &input.success_foreground {
        object.key("SuccessForeground").string(var_596);
    }
    if let Some(var_597) = &input.dimension {
        object.key("Dimension").string(var_597);
    }
    if let Some(var_598) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_598);
    }
    if let Some(var_599) = &input.measure {
        object.key("Measure").string(var_599);
    }
    if let Some(var_600) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_600);
    }
}

pub fn serialize_structure_crate_model_sheet_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SheetStyle,
) {
    if let Some(var_601) = &input.tile {
        let mut object_602 = object.key("Tile").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_style(&mut object_602, var_601);
        object_602.finish();
    }
    if let Some(var_603) = &input.tile_layout {
        let mut object_604 = object.key("TileLayout").start_object();
        crate::json_ser::serialize_structure_crate_model_tile_layout_style(
            &mut object_604,
            var_603,
        );
        object_604.finish();
    }
}

pub fn serialize_structure_crate_model_anonymous_user_dashboard_embedding_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnonymousUserDashboardEmbeddingConfiguration,
) {
    if let Some(var_605) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_605);
    }
}

pub fn serialize_structure_crate_model_registered_user_dashboard_embedding_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserDashboardEmbeddingConfiguration,
) {
    if let Some(var_606) = &input.initial_dashboard_id {
        object.key("InitialDashboardId").string(var_606);
    }
}

pub fn serialize_structure_crate_model_registered_user_quick_sight_console_embedding_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegisteredUserQuickSightConsoleEmbeddingConfiguration,
) {
    if let Some(var_607) = &input.initial_path {
        object.key("InitialPath").string(var_607);
    }
}

pub fn serialize_structure_crate_model_data_set_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSetReference,
) {
    if let Some(var_608) = &input.data_set_placeholder {
        object.key("DataSetPlaceholder").string(var_608);
    }
    if let Some(var_609) = &input.data_set_arn {
        object.key("DataSetArn").string(var_609);
    }
}

pub fn serialize_structure_crate_model_project_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProjectOperation,
) {
    if let Some(var_610) = &input.projected_columns {
        let mut array_611 = object.key("ProjectedColumns").start_array();
        for item_612 in var_610 {
            {
                array_611.value().string(item_612);
            }
        }
        array_611.finish();
    }
}

pub fn serialize_structure_crate_model_filter_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterOperation,
) {
    if let Some(var_613) = &input.condition_expression {
        object.key("ConditionExpression").string(var_613);
    }
}

pub fn serialize_structure_crate_model_create_columns_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateColumnsOperation,
) {
    if let Some(var_614) = &input.columns {
        let mut array_615 = object.key("Columns").start_array();
        for item_616 in var_614 {
            {
                let mut object_617 = array_615.value().start_object();
                crate::json_ser::serialize_structure_crate_model_calculated_column(
                    &mut object_617,
                    item_616,
                );
                object_617.finish();
            }
        }
        array_615.finish();
    }
}

pub fn serialize_structure_crate_model_rename_column_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameColumnOperation,
) {
    if let Some(var_618) = &input.column_name {
        object.key("ColumnName").string(var_618);
    }
    if let Some(var_619) = &input.new_column_name {
        object.key("NewColumnName").string(var_619);
    }
}

pub fn serialize_structure_crate_model_cast_column_type_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CastColumnTypeOperation,
) {
    if let Some(var_620) = &input.column_name {
        object.key("ColumnName").string(var_620);
    }
    if let Some(var_621) = &input.new_column_type {
        object.key("NewColumnType").string(var_621.as_str());
    }
    if let Some(var_622) = &input.format {
        object.key("Format").string(var_622);
    }
}

pub fn serialize_structure_crate_model_tag_column_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagColumnOperation,
) {
    if let Some(var_623) = &input.column_name {
        object.key("ColumnName").string(var_623);
    }
    if let Some(var_624) = &input.tags {
        let mut array_625 = object.key("Tags").start_array();
        for item_626 in var_624 {
            {
                let mut object_627 = array_625.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_tag(
                    &mut object_627,
                    item_626,
                );
                object_627.finish();
            }
        }
        array_625.finish();
    }
}

pub fn serialize_structure_crate_model_untag_column_operation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UntagColumnOperation,
) {
    if let Some(var_628) = &input.column_name {
        object.key("ColumnName").string(var_628);
    }
    if let Some(var_629) = &input.tag_names {
        let mut array_630 = object.key("TagNames").start_array();
        for item_631 in var_629 {
            {
                array_630.value().string(item_631.as_str());
            }
        }
        array_630.finish();
    }
}

pub fn serialize_structure_crate_model_join_instruction(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinInstruction,
) {
    if let Some(var_632) = &input.left_operand {
        object.key("LeftOperand").string(var_632);
    }
    if let Some(var_633) = &input.right_operand {
        object.key("RightOperand").string(var_633);
    }
    if let Some(var_634) = &input.left_join_key_properties {
        let mut object_635 = object.key("LeftJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_635,
            var_634,
        );
        object_635.finish();
    }
    if let Some(var_636) = &input.right_join_key_properties {
        let mut object_637 = object.key("RightJoinKeyProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_join_key_properties(
            &mut object_637,
            var_636,
        );
        object_637.finish();
    }
    if let Some(var_638) = &input.r#type {
        object.key("Type").string(var_638.as_str());
    }
    if let Some(var_639) = &input.on_clause {
        object.key("OnClause").string(var_639);
    }
}

pub fn serialize_structure_crate_model_input_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputColumn,
) {
    if let Some(var_640) = &input.name {
        object.key("Name").string(var_640);
    }
    if let Some(var_641) = &input.r#type {
        object.key("Type").string(var_641.as_str());
    }
}

pub fn serialize_structure_crate_model_upload_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadSettings,
) {
    if let Some(var_642) = &input.format {
        object.key("Format").string(var_642.as_str());
    }
    if let Some(var_643) = &input.start_from_row {
        object.key("StartFromRow").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_643).into()),
        );
    }
    if let Some(var_644) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_644);
    }
    if let Some(var_645) = &input.text_qualifier {
        object.key("TextQualifier").string(var_645.as_str());
    }
    if let Some(var_646) = &input.delimiter {
        object.key("Delimiter").string(var_646);
    }
}

pub fn serialize_structure_crate_model_manifest_file_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManifestFileLocation,
) {
    if let Some(var_647) = &input.bucket {
        object.key("Bucket").string(var_647);
    }
    if let Some(var_648) = &input.key {
        object.key("Key").string(var_648);
    }
}

pub fn serialize_structure_crate_model_tile_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileStyle,
) {
    if let Some(var_649) = &input.border {
        let mut object_650 = object.key("Border").start_object();
        crate::json_ser::serialize_structure_crate_model_border_style(&mut object_650, var_649);
        object_650.finish();
    }
}

pub fn serialize_structure_crate_model_tile_layout_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TileLayoutStyle,
) {
    if let Some(var_651) = &input.gutter {
        let mut object_652 = object.key("Gutter").start_object();
        crate::json_ser::serialize_structure_crate_model_gutter_style(&mut object_652, var_651);
        object_652.finish();
    }
    if let Some(var_653) = &input.margin {
        let mut object_654 = object.key("Margin").start_object();
        crate::json_ser::serialize_structure_crate_model_margin_style(&mut object_654, var_653);
        object_654.finish();
    }
}

pub fn serialize_structure_crate_model_calculated_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CalculatedColumn,
) {
    if let Some(var_655) = &input.column_name {
        object.key("ColumnName").string(var_655);
    }
    if let Some(var_656) = &input.column_id {
        object.key("ColumnId").string(var_656);
    }
    if let Some(var_657) = &input.expression {
        object.key("Expression").string(var_657);
    }
}

pub fn serialize_structure_crate_model_column_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnTag,
) {
    if let Some(var_658) = &input.column_geographic_role {
        object.key("ColumnGeographicRole").string(var_658.as_str());
    }
    if let Some(var_659) = &input.column_description {
        let mut object_660 = object.key("ColumnDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_column_description(
            &mut object_660,
            var_659,
        );
        object_660.finish();
    }
}

pub fn serialize_structure_crate_model_join_key_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinKeyProperties,
) {
    if let Some(var_661) = &input.unique_key {
        object.key("UniqueKey").boolean(*var_661);
    }
}

pub fn serialize_structure_crate_model_border_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorderStyle,
) {
    if let Some(var_662) = &input.show {
        object.key("Show").boolean(*var_662);
    }
}

pub fn serialize_structure_crate_model_gutter_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GutterStyle,
) {
    if let Some(var_663) = &input.show {
        object.key("Show").boolean(*var_663);
    }
}

pub fn serialize_structure_crate_model_margin_style(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarginStyle,
) {
    if let Some(var_664) = &input.show {
        object.key("Show").boolean(*var_664);
    }
}

pub fn serialize_structure_crate_model_column_description(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDescription,
) {
    if let Some(var_665) = &input.text {
        object.key("Text").string(var_665);
    }
}
