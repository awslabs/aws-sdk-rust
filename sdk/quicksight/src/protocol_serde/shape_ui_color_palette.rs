// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ui_color_palette(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UiColorPalette,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.primary_foreground {
        object.key("PrimaryForeground").string(var_1.as_str());
    }
    if let Some(var_2) = &input.primary_background {
        object.key("PrimaryBackground").string(var_2.as_str());
    }
    if let Some(var_3) = &input.secondary_foreground {
        object.key("SecondaryForeground").string(var_3.as_str());
    }
    if let Some(var_4) = &input.secondary_background {
        object.key("SecondaryBackground").string(var_4.as_str());
    }
    if let Some(var_5) = &input.accent {
        object.key("Accent").string(var_5.as_str());
    }
    if let Some(var_6) = &input.accent_foreground {
        object.key("AccentForeground").string(var_6.as_str());
    }
    if let Some(var_7) = &input.danger {
        object.key("Danger").string(var_7.as_str());
    }
    if let Some(var_8) = &input.danger_foreground {
        object.key("DangerForeground").string(var_8.as_str());
    }
    if let Some(var_9) = &input.warning {
        object.key("Warning").string(var_9.as_str());
    }
    if let Some(var_10) = &input.warning_foreground {
        object.key("WarningForeground").string(var_10.as_str());
    }
    if let Some(var_11) = &input.success {
        object.key("Success").string(var_11.as_str());
    }
    if let Some(var_12) = &input.success_foreground {
        object.key("SuccessForeground").string(var_12.as_str());
    }
    if let Some(var_13) = &input.dimension {
        object.key("Dimension").string(var_13.as_str());
    }
    if let Some(var_14) = &input.dimension_foreground {
        object.key("DimensionForeground").string(var_14.as_str());
    }
    if let Some(var_15) = &input.measure {
        object.key("Measure").string(var_15.as_str());
    }
    if let Some(var_16) = &input.measure_foreground {
        object.key("MeasureForeground").string(var_16.as_str());
    }
    Ok(())
}

pub(crate) fn de_ui_color_palette<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::UiColorPalette>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::UiColorPaletteBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PrimaryForeground" => {
                            builder = builder.set_primary_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PrimaryBackground" => {
                            builder = builder.set_primary_background(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecondaryForeground" => {
                            builder = builder.set_secondary_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecondaryBackground" => {
                            builder = builder.set_secondary_background(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Accent" => {
                            builder = builder.set_accent(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AccentForeground" => {
                            builder = builder.set_accent_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Danger" => {
                            builder = builder.set_danger(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DangerForeground" => {
                            builder = builder.set_danger_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Warning" => {
                            builder = builder.set_warning(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "WarningForeground" => {
                            builder = builder.set_warning_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Success" => {
                            builder = builder.set_success(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SuccessForeground" => {
                            builder = builder.set_success_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Dimension" => {
                            builder = builder.set_dimension(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DimensionForeground" => {
                            builder = builder.set_dimension_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Measure" => {
                            builder = builder.set_measure(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MeasureForeground" => {
                            builder = builder.set_measure_foreground(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
