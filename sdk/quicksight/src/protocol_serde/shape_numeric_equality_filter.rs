// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_numeric_equality_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NumericEqualityFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.filter_id {
        object.key("FilterId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.column {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Column").start_object();
        crate::protocol_serde::shape_column_identifier::ser_column_identifier(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.select_all_options {
        object.key("SelectAllOptions").string(var_5.as_str());
    }
    if let Some(var_6) = &input.match_operator {
        object.key("MatchOperator").string(var_6.as_str());
    }
    if let Some(var_7) = &input.aggregation_function {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AggregationFunction").start_object();
        crate::protocol_serde::shape_aggregation_function::ser_aggregation_function(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.parameter_name {
        object.key("ParameterName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.null_option {
        object.key("NullOption").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_numeric_equality_filter<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::NumericEqualityFilter>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::NumericEqualityFilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "FilterId" => {
                                builder = builder.set_filter_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Column" => {
                                builder = builder.set_column(
                                    crate::protocol_serde::shape_column_identifier::de_column_identifier(tokens)?
                                );
                            }
                            "Value" => {
                                builder = builder.set_value(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "SelectAllOptions" => {
                                builder = builder.set_select_all_options(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::NumericFilterSelectAllOptions::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "MatchOperator" => {
                                builder = builder.set_match_operator(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::NumericEqualityMatchOperator::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "AggregationFunction" => {
                                builder = builder.set_aggregation_function(
                                    crate::protocol_serde::shape_aggregation_function::de_aggregation_function(tokens)?
                                );
                            }
                            "ParameterName" => {
                                builder = builder.set_parameter_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "NullOption" => {
                                builder = builder.set_null_option(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::FilterNullOption::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
