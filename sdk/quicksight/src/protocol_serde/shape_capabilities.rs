// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_capabilities(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Capabilities,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.export_to_csv {
        object.key("ExportToCsv").string(var_1.as_str());
    }
    if let Some(var_2) = &input.export_to_excel {
        object.key("ExportToExcel").string(var_2.as_str());
    }
    if let Some(var_3) = &input.export_to_pdf {
        object.key("ExportToPdf").string(var_3.as_str());
    }
    if let Some(var_4) = &input.print_reports {
        object.key("PrintReports").string(var_4.as_str());
    }
    if let Some(var_5) = &input.create_and_update_themes {
        object.key("CreateAndUpdateThemes").string(var_5.as_str());
    }
    if let Some(var_6) = &input.add_or_run_anomaly_detection_for_analyses {
        object.key("AddOrRunAnomalyDetectionForAnalyses").string(var_6.as_str());
    }
    if let Some(var_7) = &input.share_analyses {
        object.key("ShareAnalyses").string(var_7.as_str());
    }
    if let Some(var_8) = &input.create_and_update_datasets {
        object.key("CreateAndUpdateDatasets").string(var_8.as_str());
    }
    if let Some(var_9) = &input.share_datasets {
        object.key("ShareDatasets").string(var_9.as_str());
    }
    if let Some(var_10) = &input.subscribe_dashboard_email_reports {
        object.key("SubscribeDashboardEmailReports").string(var_10.as_str());
    }
    if let Some(var_11) = &input.create_and_update_dashboard_email_reports {
        object.key("CreateAndUpdateDashboardEmailReports").string(var_11.as_str());
    }
    if let Some(var_12) = &input.share_dashboards {
        object.key("ShareDashboards").string(var_12.as_str());
    }
    if let Some(var_13) = &input.create_and_update_threshold_alerts {
        object.key("CreateAndUpdateThresholdAlerts").string(var_13.as_str());
    }
    if let Some(var_14) = &input.rename_shared_folders {
        object.key("RenameSharedFolders").string(var_14.as_str());
    }
    if let Some(var_15) = &input.create_shared_folders {
        object.key("CreateSharedFolders").string(var_15.as_str());
    }
    if let Some(var_16) = &input.create_and_update_data_sources {
        object.key("CreateAndUpdateDataSources").string(var_16.as_str());
    }
    if let Some(var_17) = &input.share_data_sources {
        object.key("ShareDataSources").string(var_17.as_str());
    }
    if let Some(var_18) = &input.view_account_spice_capacity {
        object.key("ViewAccountSPICECapacity").string(var_18.as_str());
    }
    if let Some(var_19) = &input.create_spice_dataset {
        object.key("CreateSPICEDataset").string(var_19.as_str());
    }
    if let Some(var_20) = &input.export_to_pdf_in_scheduled_reports {
        object.key("ExportToPdfInScheduledReports").string(var_20.as_str());
    }
    if let Some(var_21) = &input.export_to_csv_in_scheduled_reports {
        object.key("ExportToCsvInScheduledReports").string(var_21.as_str());
    }
    if let Some(var_22) = &input.export_to_excel_in_scheduled_reports {
        object.key("ExportToExcelInScheduledReports").string(var_22.as_str());
    }
    if let Some(var_23) = &input.include_content_in_scheduled_reports_email {
        object.key("IncludeContentInScheduledReportsEmail").string(var_23.as_str());
    }
    if let Some(var_24) = &input.dashboard {
        object.key("Dashboard").string(var_24.as_str());
    }
    if let Some(var_25) = &input.analysis {
        object.key("Analysis").string(var_25.as_str());
    }
    if let Some(var_26) = &input.automate {
        object.key("Automate").string(var_26.as_str());
    }
    if let Some(var_27) = &input.flow {
        object.key("Flow").string(var_27.as_str());
    }
    if let Some(var_28) = &input.publish_without_approval {
        object.key("PublishWithoutApproval").string(var_28.as_str());
    }
    if let Some(var_29) = &input.use_bedrock_models {
        object.key("UseBedrockModels").string(var_29.as_str());
    }
    if let Some(var_30) = &input.perform_flow_ui_task {
        object.key("PerformFlowUiTask").string(var_30.as_str());
    }
    if let Some(var_31) = &input.use_agent_web_search {
        object.key("UseAgentWebSearch").string(var_31.as_str());
    }
    if let Some(var_32) = &input.knowledge_base {
        object.key("KnowledgeBase").string(var_32.as_str());
    }
    if let Some(var_33) = &input.action {
        object.key("Action").string(var_33.as_str());
    }
    if let Some(var_34) = &input.space {
        object.key("Space").string(var_34.as_str());
    }
    if let Some(var_35) = &input.chat_agent {
        object.key("ChatAgent").string(var_35.as_str());
    }
    if let Some(var_36) = &input.create_chat_agents {
        object.key("CreateChatAgents").string(var_36.as_str());
    }
    if let Some(var_37) = &input.research {
        object.key("Research").string(var_37.as_str());
    }
    Ok(())
}

pub(crate) fn de_capabilities<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::Capabilities>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CapabilitiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ExportToCsv" => {
                            builder = builder.set_export_to_csv(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExportToExcel" => {
                            builder = builder.set_export_to_excel(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExportToPdf" => {
                            builder = builder.set_export_to_pdf(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PrintReports" => {
                            builder = builder.set_print_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateAndUpdateThemes" => {
                            builder = builder.set_create_and_update_themes(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AddOrRunAnomalyDetectionForAnalyses" => {
                            builder = builder.set_add_or_run_anomaly_detection_for_analyses(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ShareAnalyses" => {
                            builder = builder.set_share_analyses(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateAndUpdateDatasets" => {
                            builder = builder.set_create_and_update_datasets(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ShareDatasets" => {
                            builder = builder.set_share_datasets(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SubscribeDashboardEmailReports" => {
                            builder = builder.set_subscribe_dashboard_email_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateAndUpdateDashboardEmailReports" => {
                            builder = builder.set_create_and_update_dashboard_email_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ShareDashboards" => {
                            builder = builder.set_share_dashboards(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateAndUpdateThresholdAlerts" => {
                            builder = builder.set_create_and_update_threshold_alerts(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "RenameSharedFolders" => {
                            builder = builder.set_rename_shared_folders(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateSharedFolders" => {
                            builder = builder.set_create_shared_folders(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateAndUpdateDataSources" => {
                            builder = builder.set_create_and_update_data_sources(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ShareDataSources" => {
                            builder = builder.set_share_data_sources(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ViewAccountSPICECapacity" => {
                            builder = builder.set_view_account_spice_capacity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateSPICEDataset" => {
                            builder = builder.set_create_spice_dataset(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExportToPdfInScheduledReports" => {
                            builder = builder.set_export_to_pdf_in_scheduled_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExportToCsvInScheduledReports" => {
                            builder = builder.set_export_to_csv_in_scheduled_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExportToExcelInScheduledReports" => {
                            builder = builder.set_export_to_excel_in_scheduled_reports(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "IncludeContentInScheduledReportsEmail" => {
                            builder = builder.set_include_content_in_scheduled_reports_email(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Dashboard" => {
                            builder = builder.set_dashboard(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Analysis" => {
                            builder = builder.set_analysis(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Automate" => {
                            builder = builder.set_automate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Flow" => {
                            builder = builder.set_flow(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PublishWithoutApproval" => {
                            builder = builder.set_publish_without_approval(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UseBedrockModels" => {
                            builder = builder.set_use_bedrock_models(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PerformFlowUiTask" => {
                            builder = builder.set_perform_flow_ui_task(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UseAgentWebSearch" => {
                            builder = builder.set_use_agent_web_search(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "KnowledgeBase" => {
                            builder = builder.set_knowledge_base(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Action" => {
                            builder = builder.set_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Space" => {
                            builder = builder.set_space(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ChatAgent" => {
                            builder = builder.set_chat_agent(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CreateChatAgents" => {
                            builder = builder.set_create_chat_agents(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Research" => {
                            builder = builder.set_research(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CapabilityState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
