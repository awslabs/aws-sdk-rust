// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_sheet_image(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SheetImage,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("SheetImageId").string(input.sheet_image_id.as_str());
    }
    if let Some(var_1) = &input.source {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Source").start_object();
        crate::protocol_serde::shape_sheet_image_source::ser_sheet_image_source(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.scaling {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Scaling").start_object();
        crate::protocol_serde::shape_sheet_image_scaling_configuration::ser_sheet_image_scaling_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.tooltip {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Tooltip").start_object();
        crate::protocol_serde::shape_sheet_image_tooltip_configuration::ser_sheet_image_tooltip_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.image_content_alt_text {
        object.key("ImageContentAltText").string(var_7.as_str());
    }
    if let Some(var_8) = &input.interactions {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Interactions").start_object();
        crate::protocol_serde::shape_image_interaction_options::ser_image_interaction_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.actions {
        let mut array_11 = object.key("Actions").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_image_custom_action::ser_image_custom_action(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub(crate) fn de_sheet_image<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SheetImage>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SheetImageBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SheetImageId" => {
                            builder = builder.set_sheet_image_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Source" => {
                            builder = builder.set_source(crate::protocol_serde::shape_sheet_image_source::de_sheet_image_source(tokens)?);
                        }
                        "Scaling" => {
                            builder = builder.set_scaling(
                                crate::protocol_serde::shape_sheet_image_scaling_configuration::de_sheet_image_scaling_configuration(tokens)?,
                            );
                        }
                        "Tooltip" => {
                            builder = builder.set_tooltip(
                                crate::protocol_serde::shape_sheet_image_tooltip_configuration::de_sheet_image_tooltip_configuration(tokens)?,
                            );
                        }
                        "ImageContentAltText" => {
                            builder = builder.set_image_content_alt_text(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Interactions" => {
                            builder = builder.set_interactions(crate::protocol_serde::shape_image_interaction_options::de_image_interaction_options(
                                tokens,
                            )?);
                        }
                        "Actions" => {
                            builder = builder.set_actions(crate::protocol_serde::shape_image_custom_action_list::de_image_custom_action_list(
                                tokens,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::sheet_image_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
