// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_asset_bundle_import_job_dashboard_override_permissions(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AssetBundleImportJobDashboardOverridePermissions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("DashboardIds").start_array();
        for item_2 in &input.dashboard_ids {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.permissions {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Permissions").start_object();
        crate::protocol_serde::shape_asset_bundle_resource_permissions::ser_asset_bundle_resource_permissions(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.link_sharing_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LinkSharingConfiguration").start_object();
        crate::protocol_serde::shape_asset_bundle_resource_link_sharing_configuration::ser_asset_bundle_resource_link_sharing_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    Ok(())
}

pub(crate) fn de_asset_bundle_import_job_dashboard_override_permissions<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<
    Option<crate::types::AssetBundleImportJobDashboardOverridePermissions>,
    ::aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AssetBundleImportJobDashboardOverridePermissionsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DashboardIds" => {
                                builder = builder.set_dashboard_ids(
                                    crate::protocol_serde::shape_asset_bundle_restrictive_resource_id_list::de_asset_bundle_restrictive_resource_id_list(tokens)?
                                );
                            }
                            "Permissions" => {
                                builder = builder.set_permissions(
                                    crate::protocol_serde::shape_asset_bundle_resource_permissions::de_asset_bundle_resource_permissions(tokens)?,
                                );
                            }
                            "LinkSharingConfiguration" => {
                                builder = builder.set_link_sharing_configuration(
                                    crate::protocol_serde::shape_asset_bundle_resource_link_sharing_configuration::de_asset_bundle_resource_link_sharing_configuration(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::asset_bundle_import_job_dashboard_override_permissions_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
