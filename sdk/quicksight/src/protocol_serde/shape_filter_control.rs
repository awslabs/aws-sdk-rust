// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter_control(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FilterControl,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.date_time_picker {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DateTimePicker").start_object();
        crate::protocol_serde::shape_filter_date_time_picker_control::ser_filter_date_time_picker_control(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.list {
        #[allow(unused_mut)]
        let mut object_4 = object.key("List").start_object();
        crate::protocol_serde::shape_filter_list_control::ser_filter_list_control(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.dropdown {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Dropdown").start_object();
        crate::protocol_serde::shape_filter_drop_down_control::ser_filter_drop_down_control(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.text_field {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TextField").start_object();
        crate::protocol_serde::shape_filter_text_field_control::ser_filter_text_field_control(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.text_area {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TextArea").start_object();
        crate::protocol_serde::shape_filter_text_area_control::ser_filter_text_area_control(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.slider {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Slider").start_object();
        crate::protocol_serde::shape_filter_slider_control::ser_filter_slider_control(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.relative_date_time {
        #[allow(unused_mut)]
        let mut object_14 = object.key("RelativeDateTime").start_object();
        crate::protocol_serde::shape_filter_relative_date_time_control::ser_filter_relative_date_time_control(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_filter_control<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::FilterControl>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FilterControlBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DateTimePicker" => {
                            builder = builder.set_date_time_picker(
                                crate::protocol_serde::shape_filter_date_time_picker_control::de_filter_date_time_picker_control(tokens)?,
                            );
                        }
                        "List" => {
                            builder = builder.set_list(crate::protocol_serde::shape_filter_list_control::de_filter_list_control(tokens)?);
                        }
                        "Dropdown" => {
                            builder = builder.set_dropdown(crate::protocol_serde::shape_filter_drop_down_control::de_filter_drop_down_control(
                                tokens,
                            )?);
                        }
                        "TextField" => {
                            builder = builder.set_text_field(crate::protocol_serde::shape_filter_text_field_control::de_filter_text_field_control(
                                tokens,
                            )?);
                        }
                        "TextArea" => {
                            builder = builder.set_text_area(crate::protocol_serde::shape_filter_text_area_control::de_filter_text_area_control(
                                tokens,
                            )?);
                        }
                        "Slider" => {
                            builder = builder.set_slider(crate::protocol_serde::shape_filter_slider_control::de_filter_slider_control(tokens)?);
                        }
                        "RelativeDateTime" => {
                            builder = builder.set_relative_date_time(
                                crate::protocol_serde::shape_filter_relative_date_time_control::de_filter_relative_date_time_control(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
