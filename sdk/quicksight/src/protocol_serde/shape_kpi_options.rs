// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_kpi_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KpiOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.progress_bar {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ProgressBar").start_object();
        crate::protocol_serde::shape_progress_bar_options::ser_progress_bar_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.trend_arrows {
        #[allow(unused_mut)]
        let mut object_4 = object.key("TrendArrows").start_object();
        crate::protocol_serde::shape_trend_arrow_options::ser_trend_arrow_options(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.secondary_value {
        #[allow(unused_mut)]
        let mut object_6 = object.key("SecondaryValue").start_object();
        crate::protocol_serde::shape_secondary_value_options::ser_secondary_value_options(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.comparison {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Comparison").start_object();
        crate::protocol_serde::shape_comparison_configuration::ser_comparison_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.primary_value_display_type {
        object.key("PrimaryValueDisplayType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.primary_value_font_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("PrimaryValueFontConfiguration").start_object();
        crate::protocol_serde::shape_font_configuration::ser_font_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.secondary_value_font_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("SecondaryValueFontConfiguration").start_object();
        crate::protocol_serde::shape_font_configuration::ser_font_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.sparkline {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Sparkline").start_object();
        crate::protocol_serde::shape_kpi_sparkline_options::ser_kpi_sparkline_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.visual_layout_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("VisualLayoutOptions").start_object();
        crate::protocol_serde::shape_kpi_visual_layout_options::ser_kpi_visual_layout_options(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}

pub(crate) fn de_kpi_options<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::KpiOptions>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KpiOptionsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ProgressBar" => {
                            builder = builder.set_progress_bar(crate::protocol_serde::shape_progress_bar_options::de_progress_bar_options(tokens)?);
                        }
                        "TrendArrows" => {
                            builder = builder.set_trend_arrows(crate::protocol_serde::shape_trend_arrow_options::de_trend_arrow_options(tokens)?);
                        }
                        "SecondaryValue" => {
                            builder = builder
                                .set_secondary_value(crate::protocol_serde::shape_secondary_value_options::de_secondary_value_options(tokens)?);
                        }
                        "Comparison" => {
                            builder = builder.set_comparison(crate::protocol_serde::shape_comparison_configuration::de_comparison_configuration(
                                tokens,
                            )?);
                        }
                        "PrimaryValueDisplayType" => {
                            builder = builder.set_primary_value_display_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PrimaryValueDisplayType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PrimaryValueFontConfiguration" => {
                            builder = builder.set_primary_value_font_configuration(
                                crate::protocol_serde::shape_font_configuration::de_font_configuration(tokens)?,
                            );
                        }
                        "SecondaryValueFontConfiguration" => {
                            builder = builder.set_secondary_value_font_configuration(
                                crate::protocol_serde::shape_font_configuration::de_font_configuration(tokens)?,
                            );
                        }
                        "Sparkline" => {
                            builder = builder.set_sparkline(crate::protocol_serde::shape_kpi_sparkline_options::de_kpi_sparkline_options(tokens)?);
                        }
                        "VisualLayoutOptions" => {
                            builder = builder.set_visual_layout_options(
                                crate::protocol_serde::shape_kpi_visual_layout_options::de_kpi_visual_layout_options(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
