// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_parameter_drop_down_control(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ParameterDropDownControl,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ParameterControlId").string(input.parameter_control_id.as_str());
    }
    {
        object.key("Title").string(input.title.as_str());
    }
    {
        object.key("SourceParameterName").string(input.source_parameter_name.as_str());
    }
    if let Some(var_1) = &input.display_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DisplayOptions").start_object();
        crate::protocol_serde::shape_drop_down_control_display_options::ser_drop_down_control_display_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.r#type {
        object.key("Type").string(var_3.as_str());
    }
    if let Some(var_4) = &input.selectable_values {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SelectableValues").start_object();
        crate::protocol_serde::shape_parameter_selectable_values::ser_parameter_selectable_values(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.cascading_control_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("CascadingControlConfiguration").start_object();
        crate::protocol_serde::shape_cascading_control_configuration::ser_cascading_control_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    Ok(())
}

pub(crate) fn de_parameter_drop_down_control<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ParameterDropDownControl>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ParameterDropDownControlBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ParameterControlId" => {
                            builder = builder.set_parameter_control_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Title" => {
                            builder = builder.set_title(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SourceParameterName" => {
                            builder = builder.set_source_parameter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DisplayOptions" => {
                            builder = builder.set_display_options(
                                crate::protocol_serde::shape_drop_down_control_display_options::de_drop_down_control_display_options(tokens)?,
                            );
                        }
                        "Type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SheetControlListType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SelectableValues" => {
                            builder = builder.set_selectable_values(
                                crate::protocol_serde::shape_parameter_selectable_values::de_parameter_selectable_values(tokens)?,
                            );
                        }
                        "CascadingControlConfiguration" => {
                            builder = builder.set_cascading_control_configuration(
                                crate::protocol_serde::shape_cascading_control_configuration::de_cascading_control_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::parameter_drop_down_control_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
