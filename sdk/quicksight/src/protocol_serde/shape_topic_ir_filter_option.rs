// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_ir_filter_option(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicIrFilterOption,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filter_type {
        object.key("FilterType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.filter_class {
        object.key("FilterClass").string(var_2.as_str());
    }
    if let Some(var_3) = &input.operand_field {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OperandField").start_object();
        crate::protocol_serde::shape_identifier::ser_identifier(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.function {
        object.key("Function").string(var_5.as_str());
    }
    if let Some(var_6) = &input.constant {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Constant").start_object();
        crate::protocol_serde::shape_topic_constant_value::ser_topic_constant_value(&mut object_7, var_6)?;
        object_7.finish();
    }
    if input.inverse {
        object.key("Inverse").boolean(input.inverse);
    }
    if let Some(var_8) = &input.null_filter {
        object.key("NullFilter").string(var_8.as_str());
    }
    if let Some(var_9) = &input.aggregation {
        object.key("Aggregation").string(var_9.as_str());
    }
    if let Some(var_10) = &input.aggregation_function_parameters {
        #[allow(unused_mut)]
        let mut object_11 = object.key("AggregationFunctionParameters").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.aggregation_partition_by {
        let mut array_15 = object.key("AggregationPartitionBy").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_aggregation_partition_by::ser_aggregation_partition_by(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.range {
        #[allow(unused_mut)]
        let mut object_19 = object.key("Range").start_object();
        crate::protocol_serde::shape_topic_constant_value::ser_topic_constant_value(&mut object_19, var_18)?;
        object_19.finish();
    }
    if input.inclusive {
        object.key("Inclusive").boolean(input.inclusive);
    }
    if let Some(var_20) = &input.time_granularity {
        object.key("TimeGranularity").string(var_20.as_str());
    }
    if let Some(var_21) = &input.last_next_offset {
        #[allow(unused_mut)]
        let mut object_22 = object.key("LastNextOffset").start_object();
        crate::protocol_serde::shape_topic_constant_value::ser_topic_constant_value(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.agg_metrics {
        let mut array_24 = object.key("AggMetrics").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_filter_agg_metrics::ser_filter_agg_metrics(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.top_bottom_limit {
        #[allow(unused_mut)]
        let mut object_28 = object.key("TopBottomLimit").start_object();
        crate::protocol_serde::shape_topic_constant_value::ser_topic_constant_value(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.sort_direction {
        object.key("SortDirection").string(var_29.as_str());
    }
    if let Some(var_30) = &input.anchor {
        #[allow(unused_mut)]
        let mut object_31 = object.key("Anchor").start_object();
        crate::protocol_serde::shape_anchor::ser_anchor(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}

pub(crate) fn de_topic_ir_filter_option<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TopicIrFilterOption>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicIrFilterOptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FilterType" => {
                            builder = builder.set_filter_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TopicIrFilterType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "FilterClass" => {
                            builder = builder.set_filter_class(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FilterClass::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "OperandField" => {
                            builder = builder.set_operand_field(crate::protocol_serde::shape_identifier::de_identifier(tokens)?);
                        }
                        "Function" => {
                            builder = builder.set_function(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TopicIrFilterFunction::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Constant" => {
                            builder = builder.set_constant(crate::protocol_serde::shape_topic_constant_value::de_topic_constant_value(tokens)?);
                        }
                        "Inverse" => {
                            builder = builder.set_inverse(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "NullFilter" => {
                            builder = builder.set_null_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::NullFilterOption::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Aggregation" => {
                            builder = builder.set_aggregation(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AggType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AggregationFunctionParameters" => {
                            builder = builder.set_aggregation_function_parameters(
                                crate::protocol_serde::shape_agg_function_param_map::de_agg_function_param_map(tokens)?,
                            );
                        }
                        "AggregationPartitionBy" => {
                            builder = builder.set_aggregation_partition_by(
                                crate::protocol_serde::shape_aggregation_partition_by_list::de_aggregation_partition_by_list(tokens)?,
                            );
                        }
                        "Range" => {
                            builder = builder.set_range(crate::protocol_serde::shape_topic_constant_value::de_topic_constant_value(tokens)?);
                        }
                        "Inclusive" => {
                            builder = builder.set_inclusive(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "TimeGranularity" => {
                            builder = builder.set_time_granularity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TimeGranularity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "LastNextOffset" => {
                            builder =
                                builder.set_last_next_offset(crate::protocol_serde::shape_topic_constant_value::de_topic_constant_value(tokens)?);
                        }
                        "AggMetrics" => {
                            builder =
                                builder.set_agg_metrics(crate::protocol_serde::shape_filter_agg_metrics_list::de_filter_agg_metrics_list(tokens)?);
                        }
                        "TopBottomLimit" => {
                            builder =
                                builder.set_top_bottom_limit(crate::protocol_serde::shape_topic_constant_value::de_topic_constant_value(tokens)?);
                        }
                        "SortDirection" => {
                            builder = builder.set_sort_direction(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TopicSortDirection::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Anchor" => {
                            builder = builder.set_anchor(crate::protocol_serde::shape_anchor::de_anchor(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
