// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_set::CreateDataSetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.column_groups {
        let mut array_2 = object.key("ColumnGroups").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_column_group::ser_column_group(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.column_level_permission_rules {
        let mut array_6 = object.key("ColumnLevelPermissionRules").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_column_level_permission_rule::ser_column_level_permission_rule(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.data_set_id {
        object.key("DataSetId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.data_set_usage_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("DataSetUsageConfiguration").start_object();
        crate::protocol_serde::shape_data_set_usage_configuration::ser_data_set_usage_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.field_folders {
        #[allow(unused_mut)]
        let mut object_13 = object.key("FieldFolders").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_field_folder::ser_field_folder(
                    &mut object_16,
                    value_15,
                )?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.import_mode {
        object.key("ImportMode").string(var_17.as_str());
    }
    if let Some(var_18) = &input.logical_table_map {
        #[allow(unused_mut)]
        let mut object_19 = object.key("LogicalTableMap").start_object();
        for (key_20, value_21) in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_22 = object_19.key(key_20.as_str()).start_object();
                crate::protocol_serde::shape_logical_table::ser_logical_table(
                    &mut object_22,
                    value_21,
                )?;
                object_22.finish();
            }
        }
        object_19.finish();
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23.as_str());
    }
    if let Some(var_24) = &input.permissions {
        let mut array_25 = object.key("Permissions").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(
                    &mut object_27,
                    item_26,
                )?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.physical_table_map {
        #[allow(unused_mut)]
        let mut object_29 = object.key("PhysicalTableMap").start_object();
        for (key_30, value_31) in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_32 = object_29.key(key_30.as_str()).start_object();
                crate::protocol_serde::shape_physical_table::ser_physical_table(
                    &mut object_32,
                    value_31,
                )?;
                object_32.finish();
            }
        }
        object_29.finish();
    }
    if let Some(var_33) = &input.row_level_permission_data_set {
        #[allow(unused_mut)]
        let mut object_34 = object.key("RowLevelPermissionDataSet").start_object();
        crate::protocol_serde::shape_row_level_permission_data_set::ser_row_level_permission_data_set(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.row_level_permission_tag_configuration {
        #[allow(unused_mut)]
        let mut object_36 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::protocol_serde::shape_row_level_permission_tag_configuration::ser_row_level_permission_tag_configuration(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.tags {
        let mut array_38 = object.key("Tags").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    Ok(())
}
