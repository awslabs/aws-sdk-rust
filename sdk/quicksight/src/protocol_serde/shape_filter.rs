// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Filter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.category_filter {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CategoryFilter").start_object();
        crate::protocol_serde::shape_category_filter::ser_category_filter(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.numeric_range_filter {
        #[allow(unused_mut)]
        let mut object_4 = object.key("NumericRangeFilter").start_object();
        crate::protocol_serde::shape_numeric_range_filter::ser_numeric_range_filter(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.numeric_equality_filter {
        #[allow(unused_mut)]
        let mut object_6 = object.key("NumericEqualityFilter").start_object();
        crate::protocol_serde::shape_numeric_equality_filter::ser_numeric_equality_filter(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.time_equality_filter {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TimeEqualityFilter").start_object();
        crate::protocol_serde::shape_time_equality_filter::ser_time_equality_filter(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.time_range_filter {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TimeRangeFilter").start_object();
        crate::protocol_serde::shape_time_range_filter::ser_time_range_filter(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.relative_dates_filter {
        #[allow(unused_mut)]
        let mut object_12 = object.key("RelativeDatesFilter").start_object();
        crate::protocol_serde::shape_relative_dates_filter::ser_relative_dates_filter(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.top_bottom_filter {
        #[allow(unused_mut)]
        let mut object_14 = object.key("TopBottomFilter").start_object();
        crate::protocol_serde::shape_top_bottom_filter::ser_top_bottom_filter(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_filter<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Filter>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "CategoryFilter" => {
                                builder = builder.set_category_filter(
                                    crate::protocol_serde::shape_category_filter::de_category_filter(tokens)?
                                );
                            }
                            "NumericRangeFilter" => {
                                builder = builder.set_numeric_range_filter(
                                    crate::protocol_serde::shape_numeric_range_filter::de_numeric_range_filter(tokens)?
                                );
                            }
                            "NumericEqualityFilter" => {
                                builder = builder.set_numeric_equality_filter(
                                    crate::protocol_serde::shape_numeric_equality_filter::de_numeric_equality_filter(tokens)?
                                );
                            }
                            "TimeEqualityFilter" => {
                                builder = builder.set_time_equality_filter(
                                    crate::protocol_serde::shape_time_equality_filter::de_time_equality_filter(tokens)?
                                );
                            }
                            "TimeRangeFilter" => {
                                builder = builder.set_time_range_filter(
                                    crate::protocol_serde::shape_time_range_filter::de_time_range_filter(tokens)?
                                );
                            }
                            "RelativeDatesFilter" => {
                                builder = builder.set_relative_dates_filter(
                                    crate::protocol_serde::shape_relative_dates_filter::de_relative_dates_filter(tokens)?
                                );
                            }
                            "TopBottomFilter" => {
                                builder = builder.set_top_bottom_filter(
                                    crate::protocol_serde::shape_top_bottom_filter::de_top_bottom_filter(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
