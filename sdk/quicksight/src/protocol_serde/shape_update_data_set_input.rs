// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_set::UpdateDataSetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.column_groups {
        let mut array_2 = object.key("ColumnGroups").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_column_group::ser_column_group(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.column_level_permission_rules {
        let mut array_6 = object.key("ColumnLevelPermissionRules").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_column_level_permission_rule::ser_column_level_permission_rule(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.data_set_usage_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("DataSetUsageConfiguration").start_object();
        crate::protocol_serde::shape_data_set_usage_configuration::ser_data_set_usage_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.field_folders {
        #[allow(unused_mut)]
        let mut object_12 = object.key("FieldFolders").start_object();
        for (key_13, value_14) in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_15 = object_12.key(key_13.as_str()).start_object();
                crate::protocol_serde::shape_field_folder::ser_field_folder(
                    &mut object_15,
                    value_14,
                )?;
                object_15.finish();
            }
        }
        object_12.finish();
    }
    if let Some(var_16) = &input.import_mode {
        object.key("ImportMode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.logical_table_map {
        #[allow(unused_mut)]
        let mut object_18 = object.key("LogicalTableMap").start_object();
        for (key_19, value_20) in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_21 = object_18.key(key_19.as_str()).start_object();
                crate::protocol_serde::shape_logical_table::ser_logical_table(
                    &mut object_21,
                    value_20,
                )?;
                object_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22.as_str());
    }
    if let Some(var_23) = &input.physical_table_map {
        #[allow(unused_mut)]
        let mut object_24 = object.key("PhysicalTableMap").start_object();
        for (key_25, value_26) in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_27 = object_24.key(key_25.as_str()).start_object();
                crate::protocol_serde::shape_physical_table::ser_physical_table(
                    &mut object_27,
                    value_26,
                )?;
                object_27.finish();
            }
        }
        object_24.finish();
    }
    if let Some(var_28) = &input.row_level_permission_data_set {
        #[allow(unused_mut)]
        let mut object_29 = object.key("RowLevelPermissionDataSet").start_object();
        crate::protocol_serde::shape_row_level_permission_data_set::ser_row_level_permission_data_set(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.row_level_permission_tag_configuration {
        #[allow(unused_mut)]
        let mut object_31 = object
            .key("RowLevelPermissionTagConfiguration")
            .start_object();
        crate::protocol_serde::shape_row_level_permission_tag_configuration::ser_row_level_permission_tag_configuration(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}
