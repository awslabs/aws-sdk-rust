// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_set_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_set::UpdateDataSetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.column_groups {
        let mut array_2 = object.key("ColumnGroups").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_column_group::ser_column_group(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.column_level_permission_rules {
        let mut array_6 = object.key("ColumnLevelPermissionRules").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_column_level_permission_rule::ser_column_level_permission_rule(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.data_set_usage_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("DataSetUsageConfiguration").start_object();
        crate::protocol_serde::shape_data_set_usage_configuration::ser_data_set_usage_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.dataset_parameters {
        let mut array_12 = object.key("DatasetParameters").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_dataset_parameter::ser_dataset_parameter(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.field_folders {
        #[allow(unused_mut)]
        let mut object_16 = object.key("FieldFolders").start_object();
        for (key_17, value_18) in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_19 = object_16.key(key_17.as_str()).start_object();
                crate::protocol_serde::shape_field_folder::ser_field_folder(&mut object_19, value_18)?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.import_mode {
        object.key("ImportMode").string(var_20.as_str());
    }
    if let Some(var_21) = &input.logical_table_map {
        #[allow(unused_mut)]
        let mut object_22 = object.key("LogicalTableMap").start_object();
        for (key_23, value_24) in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_25 = object_22.key(key_23.as_str()).start_object();
                crate::protocol_serde::shape_logical_table::ser_logical_table(&mut object_25, value_24)?;
                object_25.finish();
            }
        }
        object_22.finish();
    }
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26.as_str());
    }
    if let Some(var_27) = &input.physical_table_map {
        #[allow(unused_mut)]
        let mut object_28 = object.key("PhysicalTableMap").start_object();
        for (key_29, value_30) in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_31 = object_28.key(key_29.as_str()).start_object();
                crate::protocol_serde::shape_physical_table::ser_physical_table(&mut object_31, value_30)?;
                object_31.finish();
            }
        }
        object_28.finish();
    }
    if let Some(var_32) = &input.row_level_permission_data_set {
        #[allow(unused_mut)]
        let mut object_33 = object.key("RowLevelPermissionDataSet").start_object();
        crate::protocol_serde::shape_row_level_permission_data_set::ser_row_level_permission_data_set(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.row_level_permission_tag_configuration {
        #[allow(unused_mut)]
        let mut object_35 = object.key("RowLevelPermissionTagConfiguration").start_object();
        crate::protocol_serde::shape_row_level_permission_tag_configuration::ser_row_level_permission_tag_configuration(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}
