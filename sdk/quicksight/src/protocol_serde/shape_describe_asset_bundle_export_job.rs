// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_asset_bundle_export_job_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobOutput,
    crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => {
            crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedUserEditionException" => {
            crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::UnsupportedUserEditionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedUserEditionExceptionBuilder::default();
                    output = crate::protocol_serde::shape_unsupported_user_edition_exception::de_unsupported_user_edition_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_asset_bundle_export_job_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobOutput,
    crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_asset_bundle_export_job::builders::DescribeAssetBundleExportJobOutputBuilder::default();
        output = crate::protocol_serde::shape_describe_asset_bundle_export_job::de_describe_asset_bundle_export_job(_response_body, output)
            .map_err(crate::operation::describe_asset_bundle_export_job::DescribeAssetBundleExportJobError::unhandled)?;
        output = output.set_status(Some(_response_status as _));
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub(crate) fn de_describe_asset_bundle_export_job(
    value: &[u8],
    mut builder: crate::operation::describe_asset_bundle_export_job::builders::DescribeAssetBundleExportJobOutputBuilder,
) -> ::std::result::Result<
    crate::operation::describe_asset_bundle_export_job::builders::DescribeAssetBundleExportJobOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "Arn" => {
                    builder = builder.set_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "AssetBundleExportJobId" => {
                    builder = builder.set_asset_bundle_export_job_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "AwsAccountId" => {
                    builder = builder.set_aws_account_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "CloudFormationOverridePropertyConfiguration" => {
                    builder = builder.set_cloud_formation_override_property_configuration(
                            crate::protocol_serde::shape_asset_bundle_cloud_formation_override_property_configuration::de_asset_bundle_cloud_formation_override_property_configuration(tokens)?
                        );
                }
                "CreatedTime" => {
                    builder = builder.set_created_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                        tokens.next(),
                        ::aws_smithy_types::date_time::Format::EpochSeconds,
                    )?);
                }
                "DownloadUrl" => {
                    builder = builder.set_download_url(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "Errors" => {
                    builder = builder
                        .set_errors(crate::protocol_serde::shape_asset_bundle_export_job_error_list::de_asset_bundle_export_job_error_list(tokens)?);
                }
                "ExportFormat" => {
                    builder = builder.set_export_format(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::AssetBundleExportFormat::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "IncludeAllDependencies" => {
                    builder = builder.set_include_all_dependencies(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "IncludeFolderMembers" => {
                    builder = builder.set_include_folder_members(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::IncludeFolderMembers::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "IncludeFolderMemberships" => {
                    builder = builder.set_include_folder_memberships(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "IncludePermissions" => {
                    builder = builder.set_include_permissions(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "IncludeTags" => {
                    builder = builder.set_include_tags(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "JobStatus" => {
                    builder = builder.set_job_status(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::AssetBundleExportJobStatus::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                "RequestId" => {
                    builder = builder.set_request_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "ResourceArns" => {
                    builder = builder.set_resource_arns(crate::protocol_serde::shape_asset_bundle_resource_arns::de_asset_bundle_resource_arns(
                        tokens,
                    )?);
                }
                "ValidationStrategy" => {
                    builder = builder.set_validation_strategy(
                        crate::protocol_serde::shape_asset_bundle_export_job_validation_strategy::de_asset_bundle_export_job_validation_strategy(
                            tokens,
                        )?,
                    );
                }
                "Warnings" => {
                    builder = builder.set_warnings(
                        crate::protocol_serde::shape_asset_bundle_export_job_warning_list::de_asset_bundle_export_job_warning_list(tokens)?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {other:?}"
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
