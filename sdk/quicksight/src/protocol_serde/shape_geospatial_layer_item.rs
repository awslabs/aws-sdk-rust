// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_geospatial_layer_item(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GeospatialLayerItem,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("LayerId").string(input.layer_id.as_str());
    }
    if let Some(var_1) = &input.layer_type {
        object.key("LayerType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DataSource").start_object();
        crate::protocol_serde::shape_geospatial_data_source_item::ser_geospatial_data_source_item(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.label {
        object.key("Label").string(var_4.as_str());
    }
    if let Some(var_5) = &input.visibility {
        object.key("Visibility").string(var_5.as_str());
    }
    if let Some(var_6) = &input.layer_definition {
        #[allow(unused_mut)]
        let mut object_7 = object.key("LayerDefinition").start_object();
        crate::protocol_serde::shape_geospatial_layer_definition::ser_geospatial_layer_definition(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tooltip {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Tooltip").start_object();
        crate::protocol_serde::shape_tooltip_options::ser_tooltip_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.join_definition {
        #[allow(unused_mut)]
        let mut object_11 = object.key("JoinDefinition").start_object();
        crate::protocol_serde::shape_geospatial_layer_join_definition::ser_geospatial_layer_join_definition(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.actions {
        let mut array_13 = object.key("Actions").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_layer_custom_action::ser_layer_custom_action(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub(crate) fn de_geospatial_layer_item<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::GeospatialLayerItem>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GeospatialLayerItemBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LayerId" => {
                            builder = builder.set_layer_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LayerType" => {
                            builder = builder.set_layer_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::GeospatialLayerType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DataSource" => {
                            builder = builder.set_data_source(
                                crate::protocol_serde::shape_geospatial_data_source_item::de_geospatial_data_source_item(tokens)?,
                            );
                        }
                        "Label" => {
                            builder = builder.set_label(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Visibility" => {
                            builder = builder.set_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "LayerDefinition" => {
                            builder = builder.set_layer_definition(
                                crate::protocol_serde::shape_geospatial_layer_definition::de_geospatial_layer_definition(tokens)?,
                            );
                        }
                        "Tooltip" => {
                            builder = builder.set_tooltip(crate::protocol_serde::shape_tooltip_options::de_tooltip_options(tokens)?);
                        }
                        "JoinDefinition" => {
                            builder = builder.set_join_definition(
                                crate::protocol_serde::shape_geospatial_layer_join_definition::de_geospatial_layer_join_definition(tokens)?,
                            );
                        }
                        "Actions" => {
                            builder = builder.set_actions(crate::protocol_serde::shape_layer_custom_action_list::de_layer_custom_action_list(
                                tokens,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::geospatial_layer_item_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
