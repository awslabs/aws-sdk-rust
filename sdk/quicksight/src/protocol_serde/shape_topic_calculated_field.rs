// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_calculated_field(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicCalculatedField,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("CalculatedFieldName").string(input.calculated_field_name.as_str());
    }
    if let Some(var_1) = &input.calculated_field_description {
        object.key("CalculatedFieldDescription").string(var_1.as_str());
    }
    {
        object.key("Expression").string(input.expression.as_str());
    }
    if let Some(var_2) = &input.calculated_field_synonyms {
        let mut array_3 = object.key("CalculatedFieldSynonyms").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if input.is_included_in_topic {
        object.key("IsIncludedInTopic").boolean(input.is_included_in_topic);
    }
    if let Some(var_5) = &input.disable_indexing {
        object.key("DisableIndexing").boolean(*var_5);
    }
    if let Some(var_6) = &input.column_data_role {
        object.key("ColumnDataRole").string(var_6.as_str());
    }
    if let Some(var_7) = &input.time_granularity {
        object.key("TimeGranularity").string(var_7.as_str());
    }
    if let Some(var_8) = &input.default_formatting {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DefaultFormatting").start_object();
        crate::protocol_serde::shape_default_formatting::ser_default_formatting(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.aggregation {
        object.key("Aggregation").string(var_10.as_str());
    }
    if let Some(var_11) = &input.comparative_order {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ComparativeOrder").start_object();
        crate::protocol_serde::shape_comparative_order::ser_comparative_order(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.semantic_type {
        #[allow(unused_mut)]
        let mut object_14 = object.key("SemanticType").start_object();
        crate::protocol_serde::shape_semantic_type::ser_semantic_type(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.allowed_aggregations {
        let mut array_16 = object.key("AllowedAggregations").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.not_allowed_aggregations {
        let mut array_19 = object.key("NotAllowedAggregations").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if input.never_aggregate_in_filter {
        object.key("NeverAggregateInFilter").boolean(input.never_aggregate_in_filter);
    }
    if let Some(var_21) = &input.cell_value_synonyms {
        let mut array_22 = object.key("CellValueSynonyms").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_cell_value_synonym::ser_cell_value_synonym(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.non_additive {
        object.key("NonAdditive").boolean(*var_25);
    }
    Ok(())
}

pub(crate) fn de_topic_calculated_field<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TopicCalculatedField>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicCalculatedFieldBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CalculatedFieldName" => {
                            builder = builder.set_calculated_field_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CalculatedFieldDescription" => {
                            builder = builder.set_calculated_field_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Expression" => {
                            builder = builder.set_expression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CalculatedFieldSynonyms" => {
                            builder = builder.set_calculated_field_synonyms(crate::protocol_serde::shape_synonyms::de_synonyms(tokens)?);
                        }
                        "IsIncludedInTopic" => {
                            builder = builder.set_is_included_in_topic(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DisableIndexing" => {
                            builder = builder.set_disable_indexing(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ColumnDataRole" => {
                            builder = builder.set_column_data_role(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ColumnDataRole::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "TimeGranularity" => {
                            builder = builder.set_time_granularity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TopicTimeGranularity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DefaultFormatting" => {
                            builder = builder.set_default_formatting(crate::protocol_serde::shape_default_formatting::de_default_formatting(tokens)?);
                        }
                        "Aggregation" => {
                            builder = builder.set_aggregation(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DefaultAggregation::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ComparativeOrder" => {
                            builder = builder.set_comparative_order(crate::protocol_serde::shape_comparative_order::de_comparative_order(tokens)?);
                        }
                        "SemanticType" => {
                            builder = builder.set_semantic_type(crate::protocol_serde::shape_semantic_type::de_semantic_type(tokens)?);
                        }
                        "AllowedAggregations" => {
                            builder = builder.set_allowed_aggregations(
                                crate::protocol_serde::shape_author_specified_aggregations::de_author_specified_aggregations(tokens)?,
                            );
                        }
                        "NotAllowedAggregations" => {
                            builder = builder.set_not_allowed_aggregations(
                                crate::protocol_serde::shape_author_specified_aggregations::de_author_specified_aggregations(tokens)?,
                            );
                        }
                        "NeverAggregateInFilter" => {
                            builder =
                                builder.set_never_aggregate_in_filter(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CellValueSynonyms" => {
                            builder =
                                builder.set_cell_value_synonyms(crate::protocol_serde::shape_cell_value_synonyms::de_cell_value_synonyms(tokens)?);
                        }
                        "NonAdditive" => {
                            builder = builder.set_non_additive(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::topic_calculated_field_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
