// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_web_crawler_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WebCrawlerParameters,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("WebCrawlerAuthType").string(input.web_crawler_auth_type.as_str());
    }
    if let Some(var_1) = &input.username_field_xpath {
        object.key("UsernameFieldXpath").string(var_1.as_str());
    }
    if let Some(var_2) = &input.password_field_xpath {
        object.key("PasswordFieldXpath").string(var_2.as_str());
    }
    if let Some(var_3) = &input.username_button_xpath {
        object.key("UsernameButtonXpath").string(var_3.as_str());
    }
    if let Some(var_4) = &input.password_button_xpath {
        object.key("PasswordButtonXpath").string(var_4.as_str());
    }
    if let Some(var_5) = &input.login_page_url {
        object.key("LoginPageUrl").string(var_5.as_str());
    }
    if let Some(var_6) = &input.web_proxy_host_name {
        object.key("WebProxyHostName").string(var_6.as_str());
    }
    if input.web_proxy_port_number != 0 {
        object.key("WebProxyPortNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.web_proxy_port_number).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_web_crawler_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::WebCrawlerParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::WebCrawlerParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "WebCrawlerAuthType" => {
                            builder = builder.set_web_crawler_auth_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::WebCrawlerAuthType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UsernameFieldXpath" => {
                            builder = builder.set_username_field_xpath(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PasswordFieldXpath" => {
                            builder = builder.set_password_field_xpath(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "UsernameButtonXpath" => {
                            builder = builder.set_username_button_xpath(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PasswordButtonXpath" => {
                            builder = builder.set_password_button_xpath(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LoginPageUrl" => {
                            builder = builder.set_login_page_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "WebProxyHostName" => {
                            builder = builder.set_web_proxy_host_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "WebProxyPortNumber" => {
                            builder = builder.set_web_proxy_port_number(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::web_crawler_parameters_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
