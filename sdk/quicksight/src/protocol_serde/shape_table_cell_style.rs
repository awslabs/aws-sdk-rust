// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_table_cell_style(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TableCellStyle,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.visibility {
        object.key("Visibility").string(var_1.as_str());
    }
    if let Some(var_2) = &input.font_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("FontConfiguration").start_object();
        crate::protocol_serde::shape_font_configuration::ser_font_configuration(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.text_wrap {
        object.key("TextWrap").string(var_4.as_str());
    }
    if let Some(var_5) = &input.horizontal_text_alignment {
        object.key("HorizontalTextAlignment").string(var_5.as_str());
    }
    if let Some(var_6) = &input.vertical_text_alignment {
        object.key("VerticalTextAlignment").string(var_6.as_str());
    }
    if let Some(var_7) = &input.background_color {
        object.key("BackgroundColor").string(var_7.as_str());
    }
    if let Some(var_8) = &input.height {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.border {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Border").start_object();
        crate::protocol_serde::shape_global_table_border_options::ser_global_table_border_options(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_table_cell_style<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::TableCellStyle>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TableCellStyleBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Visibility" => {
                                builder = builder.set_visibility(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Visibility::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "FontConfiguration" => {
                                builder = builder.set_font_configuration(
                                    crate::protocol_serde::shape_font_configuration::de_font_configuration(tokens)?
                                );
                            }
                            "TextWrap" => {
                                builder = builder.set_text_wrap(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::TextWrap::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "HorizontalTextAlignment" => {
                                builder = builder.set_horizontal_text_alignment(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::HorizontalTextAlignment::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "VerticalTextAlignment" => {
                                builder = builder.set_vertical_text_alignment(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::VerticalTextAlignment::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "BackgroundColor" => {
                                builder = builder.set_background_color(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Height" => {
                                builder = builder.set_height(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Border" => {
                                builder = builder.set_border(
                                    crate::protocol_serde::shape_global_table_border_options::de_global_table_border_options(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
