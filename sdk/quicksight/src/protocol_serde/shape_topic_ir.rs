// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_ir(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicIr,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.metrics {
        let mut array_2 = object.key("Metrics").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_topic_ir_metric::ser_topic_ir_metric(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.group_by_list {
        let mut array_6 = object.key("GroupByList").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_topic_ir_group_by::ser_topic_ir_group_by(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.filters {
        let mut array_10 = object.key("Filters").start_array();
        for item_11 in var_9 {
            {
                let mut array_12 = array_10.value().start_array();
                for item_13 in item_11 {
                    {
                        #[allow(unused_mut)]
                        let mut object_14 = array_12.value().start_object();
                        crate::protocol_serde::shape_topic_ir_filter_option::ser_topic_ir_filter_option(&mut object_14, item_13)?;
                        object_14.finish();
                    }
                }
                array_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_15) = &input.sort {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Sort").start_object();
        crate::protocol_serde::shape_topic_sort_clause::ser_topic_sort_clause(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.contribution_analysis {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ContributionAnalysis").start_object();
        crate::protocol_serde::shape_topic_ir_contribution_analysis::ser_topic_ir_contribution_analysis(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.visual {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Visual").start_object();
        crate::protocol_serde::shape_visual_options::ser_visual_options(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub(crate) fn de_topic_ir<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TopicIr>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicIrBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Metrics" => {
                            builder = builder.set_metrics(crate::protocol_serde::shape_topic_ir_metric_list::de_topic_ir_metric_list(tokens)?);
                        }
                        "GroupByList" => {
                            builder =
                                builder.set_group_by_list(crate::protocol_serde::shape_topic_ir_group_by_list::de_topic_ir_group_by_list(tokens)?);
                        }
                        "Filters" => {
                            builder = builder.set_filters(crate::protocol_serde::shape_topic_ir_filter_list::de_topic_ir_filter_list(tokens)?);
                        }
                        "Sort" => {
                            builder = builder.set_sort(crate::protocol_serde::shape_topic_sort_clause::de_topic_sort_clause(tokens)?);
                        }
                        "ContributionAnalysis" => {
                            builder = builder.set_contribution_analysis(
                                crate::protocol_serde::shape_topic_ir_contribution_analysis::de_topic_ir_contribution_analysis(tokens)?,
                            );
                        }
                        "Visual" => {
                            builder = builder.set_visual(crate::protocol_serde::shape_visual_options::de_visual_options(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
