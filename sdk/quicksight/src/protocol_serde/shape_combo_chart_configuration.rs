// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_combo_chart_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ComboChartConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.field_wells {
        #[allow(unused_mut)]
        let mut object_2 = object.key("FieldWells").start_object();
        crate::protocol_serde::shape_combo_chart_field_wells::ser_combo_chart_field_wells(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.sort_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SortConfiguration").start_object();
        crate::protocol_serde::shape_combo_chart_sort_configuration::ser_combo_chart_sort_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.bars_arrangement {
        object.key("BarsArrangement").string(var_5.as_str());
    }
    if let Some(var_6) = &input.category_axis {
        #[allow(unused_mut)]
        let mut object_7 = object.key("CategoryAxis").start_object();
        crate::protocol_serde::shape_axis_display_options::ser_axis_display_options(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.category_label_options {
        #[allow(unused_mut)]
        let mut object_9 = object.key("CategoryLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.primary_y_axis_display_options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("PrimaryYAxisDisplayOptions").start_object();
        crate::protocol_serde::shape_axis_display_options::ser_axis_display_options(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.primary_y_axis_label_options {
        #[allow(unused_mut)]
        let mut object_13 = object.key("PrimaryYAxisLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.secondary_y_axis_display_options {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SecondaryYAxisDisplayOptions").start_object();
        crate::protocol_serde::shape_axis_display_options::ser_axis_display_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.secondary_y_axis_label_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("SecondaryYAxisLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.color_label_options {
        #[allow(unused_mut)]
        let mut object_19 = object.key("ColorLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.legend {
        #[allow(unused_mut)]
        let mut object_21 = object.key("Legend").start_object();
        crate::protocol_serde::shape_legend_options::ser_legend_options(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.bar_data_labels {
        #[allow(unused_mut)]
        let mut object_23 = object.key("BarDataLabels").start_object();
        crate::protocol_serde::shape_data_label_options::ser_data_label_options(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.line_data_labels {
        #[allow(unused_mut)]
        let mut object_25 = object.key("LineDataLabels").start_object();
        crate::protocol_serde::shape_data_label_options::ser_data_label_options(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tooltip {
        #[allow(unused_mut)]
        let mut object_27 = object.key("Tooltip").start_object();
        crate::protocol_serde::shape_tooltip_options::ser_tooltip_options(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.reference_lines {
        let mut array_29 = object.key("ReferenceLines").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_reference_line::ser_reference_line(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.visual_palette {
        #[allow(unused_mut)]
        let mut object_33 = object.key("VisualPalette").start_object();
        crate::protocol_serde::shape_visual_palette::ser_visual_palette(&mut object_33, var_32)?;
        object_33.finish();
    }
    Ok(())
}

pub(crate) fn de_combo_chart_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ComboChartConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ComboChartConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FieldWells" => {
                            builder =
                                builder.set_field_wells(crate::protocol_serde::shape_combo_chart_field_wells::de_combo_chart_field_wells(tokens)?);
                        }
                        "SortConfiguration" => {
                            builder = builder.set_sort_configuration(
                                crate::protocol_serde::shape_combo_chart_sort_configuration::de_combo_chart_sort_configuration(tokens)?,
                            );
                        }
                        "BarsArrangement" => {
                            builder = builder.set_bars_arrangement(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BarsArrangement::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "CategoryAxis" => {
                            builder = builder.set_category_axis(crate::protocol_serde::shape_axis_display_options::de_axis_display_options(tokens)?);
                        }
                        "CategoryLabelOptions" => {
                            builder = builder.set_category_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "PrimaryYAxisDisplayOptions" => {
                            builder = builder.set_primary_y_axis_display_options(
                                crate::protocol_serde::shape_axis_display_options::de_axis_display_options(tokens)?,
                            );
                        }
                        "PrimaryYAxisLabelOptions" => {
                            builder = builder.set_primary_y_axis_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "SecondaryYAxisDisplayOptions" => {
                            builder = builder.set_secondary_y_axis_display_options(
                                crate::protocol_serde::shape_axis_display_options::de_axis_display_options(tokens)?,
                            );
                        }
                        "SecondaryYAxisLabelOptions" => {
                            builder = builder.set_secondary_y_axis_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "ColorLabelOptions" => {
                            builder = builder.set_color_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "Legend" => {
                            builder = builder.set_legend(crate::protocol_serde::shape_legend_options::de_legend_options(tokens)?);
                        }
                        "BarDataLabels" => {
                            builder = builder.set_bar_data_labels(crate::protocol_serde::shape_data_label_options::de_data_label_options(tokens)?);
                        }
                        "LineDataLabels" => {
                            builder = builder.set_line_data_labels(crate::protocol_serde::shape_data_label_options::de_data_label_options(tokens)?);
                        }
                        "Tooltip" => {
                            builder = builder.set_tooltip(crate::protocol_serde::shape_tooltip_options::de_tooltip_options(tokens)?);
                        }
                        "ReferenceLines" => {
                            builder = builder.set_reference_lines(crate::protocol_serde::shape_reference_line_list::de_reference_line_list(tokens)?);
                        }
                        "VisualPalette" => {
                            builder = builder.set_visual_palette(crate::protocol_serde::shape_visual_palette::de_visual_palette(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
