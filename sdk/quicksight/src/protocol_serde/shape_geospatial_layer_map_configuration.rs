// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_geospatial_layer_map_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GeospatialLayerMapConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.legend {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Legend").start_object();
        crate::protocol_serde::shape_legend_options::ser_legend_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.map_layers {
        let mut array_4 = object.key("MapLayers").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_geospatial_layer_item::ser_geospatial_layer_item(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.map_state {
        #[allow(unused_mut)]
        let mut object_8 = object.key("MapState").start_object();
        crate::protocol_serde::shape_geospatial_map_state::ser_geospatial_map_state(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.map_style {
        #[allow(unused_mut)]
        let mut object_10 = object.key("MapStyle").start_object();
        crate::protocol_serde::shape_geospatial_map_style::ser_geospatial_map_style(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.interactions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Interactions").start_object();
        crate::protocol_serde::shape_visual_interaction_options::ser_visual_interaction_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_geospatial_layer_map_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::GeospatialLayerMapConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GeospatialLayerMapConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Legend" => {
                            builder = builder.set_legend(crate::protocol_serde::shape_legend_options::de_legend_options(tokens)?);
                        }
                        "MapLayers" => {
                            builder = builder.set_map_layers(crate::protocol_serde::shape_geospatial_map_layer_list::de_geospatial_map_layer_list(
                                tokens,
                            )?);
                        }
                        "MapState" => {
                            builder = builder.set_map_state(crate::protocol_serde::shape_geospatial_map_state::de_geospatial_map_state(tokens)?);
                        }
                        "MapStyle" => {
                            builder = builder.set_map_style(crate::protocol_serde::shape_geospatial_map_style::de_geospatial_map_style(tokens)?);
                        }
                        "Interactions" => {
                            builder = builder.set_interactions(
                                crate::protocol_serde::shape_visual_interaction_options::de_visual_interaction_options(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
