// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_section_based_layout_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SectionBasedLayoutConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("HeaderSections").start_array();
        for item_2 in &input.header_sections {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_header_footer_section_configuration::ser_header_footer_section_configuration(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        let mut array_4 = object.key("BodySections").start_array();
        for item_5 in &input.body_sections {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_body_section_configuration::ser_body_section_configuration(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    {
        let mut array_7 = object.key("FooterSections").start_array();
        for item_8 in &input.footer_sections {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_header_footer_section_configuration::ser_header_footer_section_configuration(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.canvas_size_options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("CanvasSizeOptions").start_object();
        crate::protocol_serde::shape_section_based_layout_canvas_size_options::ser_section_based_layout_canvas_size_options(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_section_based_layout_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SectionBasedLayoutConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SectionBasedLayoutConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "HeaderSections" => {
                                builder = builder.set_header_sections(
                                    crate::protocol_serde::shape_header_footer_section_configuration_list::de_header_footer_section_configuration_list(tokens)?
                                );
                            }
                            "BodySections" => {
                                builder = builder.set_body_sections(
                                    crate::protocol_serde::shape_body_section_configuration_list::de_body_section_configuration_list(tokens)?,
                                );
                            }
                            "FooterSections" => {
                                builder = builder.set_footer_sections(
                                    crate::protocol_serde::shape_header_footer_section_configuration_list::de_header_footer_section_configuration_list(tokens)?
                                );
                            }
                            "CanvasSizeOptions" => {
                                builder = builder.set_canvas_size_options(
                                    crate::protocol_serde::shape_section_based_layout_canvas_size_options::de_section_based_layout_canvas_size_options(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::section_based_layout_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
