// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_brand_color_palette<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::BrandColorPalette>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BrandColorPaletteBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Primary" => {
                            builder = builder.set_primary(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Secondary" => {
                            builder = builder.set_secondary(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Accent" => {
                            builder = builder.set_accent(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Measure" => {
                            builder = builder.set_measure(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Dimension" => {
                            builder = builder.set_dimension(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Success" => {
                            builder = builder.set_success(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Info" => {
                            builder = builder.set_info(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Warning" => {
                            builder = builder.set_warning(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        "Danger" => {
                            builder = builder.set_danger(crate::protocol_serde::shape_palette::de_palette(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_brand_color_palette(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BrandColorPalette,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.primary {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Primary").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.secondary {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Secondary").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.accent {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Accent").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.measure {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Measure").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.dimension {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Dimension").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.success {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Success").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.info {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Info").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.warning {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Warning").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.danger {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Danger").start_object();
        crate::protocol_serde::shape_palette::ser_palette(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
