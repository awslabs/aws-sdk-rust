// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_ir_metric(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicIrMetric,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.metric_id {
        #[allow(unused_mut)]
        let mut object_2 = object.key("MetricId").start_object();
        crate::protocol_serde::shape_identifier::ser_identifier(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.function {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Function").start_object();
        crate::protocol_serde::shape_agg_function::ser_agg_function(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.operands {
        let mut array_6 = object.key("Operands").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_identifier::ser_identifier(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.comparison_method {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ComparisonMethod").start_object();
        crate::protocol_serde::shape_topic_ir_comparison_method::ser_topic_ir_comparison_method(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.expression {
        object.key("Expression").string(var_11.as_str());
    }
    if let Some(var_12) = &input.calculated_field_references {
        let mut array_13 = object.key("CalculatedFieldReferences").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_identifier::ser_identifier(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.display_format {
        object.key("DisplayFormat").string(var_16.as_str());
    }
    if let Some(var_17) = &input.display_format_options {
        #[allow(unused_mut)]
        let mut object_18 = object.key("DisplayFormatOptions").start_object();
        crate::protocol_serde::shape_display_format_options::ser_display_format_options(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.named_entity {
        #[allow(unused_mut)]
        let mut object_20 = object.key("NamedEntity").start_object();
        crate::protocol_serde::shape_named_entity_ref::ser_named_entity_ref(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub(crate) fn de_topic_ir_metric<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TopicIrMetric>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicIrMetricBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "MetricId" => {
                            builder = builder.set_metric_id(crate::protocol_serde::shape_identifier::de_identifier(tokens)?);
                        }
                        "Function" => {
                            builder = builder.set_function(crate::protocol_serde::shape_agg_function::de_agg_function(tokens)?);
                        }
                        "Operands" => {
                            builder = builder.set_operands(crate::protocol_serde::shape_operand_list::de_operand_list(tokens)?);
                        }
                        "ComparisonMethod" => {
                            builder = builder.set_comparison_method(
                                crate::protocol_serde::shape_topic_ir_comparison_method::de_topic_ir_comparison_method(tokens)?,
                            );
                        }
                        "Expression" => {
                            builder = builder.set_expression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CalculatedFieldReferences" => {
                            builder = builder.set_calculated_field_references(
                                crate::protocol_serde::shape_calculated_field_reference_list::de_calculated_field_reference_list(tokens)?,
                            );
                        }
                        "DisplayFormat" => {
                            builder = builder.set_display_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DisplayFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DisplayFormatOptions" => {
                            builder = builder
                                .set_display_format_options(crate::protocol_serde::shape_display_format_options::de_display_format_options(tokens)?);
                        }
                        "NamedEntity" => {
                            builder = builder.set_named_entity(crate::protocol_serde::shape_named_entity_ref::de_named_entity_ref(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
