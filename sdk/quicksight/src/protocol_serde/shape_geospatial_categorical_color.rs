// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_geospatial_categorical_color(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GeospatialCategoricalColor,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("CategoryDataColors").start_array();
        for item_2 in &input.category_data_colors {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_geospatial_categorical_data_color::ser_geospatial_categorical_data_color(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    if let Some(var_4) = &input.null_data_visibility {
        object.key("NullDataVisibility").string(var_4.as_str());
    }
    if let Some(var_5) = &input.null_data_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("NullDataSettings").start_object();
        crate::protocol_serde::shape_geospatial_null_data_settings::ser_geospatial_null_data_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.default_opacity {
        object.key("DefaultOpacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_7).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_geospatial_categorical_color<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::GeospatialCategoricalColor>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GeospatialCategoricalColorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "CategoryDataColors" => {
                            builder = builder.set_category_data_colors(
                                crate::protocol_serde::shape_geospatial_categorical_data_color_list::de_geospatial_categorical_data_color_list(
                                    tokens,
                                )?,
                            );
                        }
                        "NullDataVisibility" => {
                            builder = builder.set_null_data_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "NullDataSettings" => {
                            builder = builder.set_null_data_settings(
                                crate::protocol_serde::shape_geospatial_null_data_settings::de_geospatial_null_data_settings(tokens)?,
                            );
                        }
                        "DefaultOpacity" => {
                            builder = builder.set_default_opacity(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::geospatial_categorical_color_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
