// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_analysis_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_analysis::CreateAnalysisInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.definition {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Definition").start_object();
        crate::protocol_serde::shape_analysis_definition::ser_analysis_definition(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_parameters::ser_parameters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.permissions {
        let mut array_7 = object.key("Permissions").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.source_entity {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SourceEntity").start_object();
        crate::protocol_serde::shape_analysis_source_entity::ser_analysis_source_entity(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.theme_arn {
        object.key("ThemeArn").string(var_16.as_str());
    }
    Ok(())
}
