// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_analysis_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_analysis::CreateAnalysisInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.definition {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Definition").start_object();
        crate::protocol_serde::shape_analysis_definition::ser_analysis_definition(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.folder_arns {
        let mut array_4 = object.key("FolderArns").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_parameters::ser_parameters(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.permissions {
        let mut array_10 = object.key("Permissions").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.source_entity {
        #[allow(unused_mut)]
        let mut object_14 = object.key("SourceEntity").start_object();
        crate::protocol_serde::shape_analysis_source_entity::ser_analysis_source_entity(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.theme_arn {
        object.key("ThemeArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.validation_strategy {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ValidationStrategy").start_object();
        crate::protocol_serde::shape_validation_strategy::ser_validation_strategy(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}
