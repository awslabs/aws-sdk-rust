// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_panel_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PanelConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.title {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Title").start_object();
        crate::protocol_serde::shape_panel_title_options::ser_panel_title_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.border_visibility {
        object.key("BorderVisibility").string(var_3.as_str());
    }
    if let Some(var_4) = &input.border_thickness {
        object.key("BorderThickness").string(var_4.as_str());
    }
    if let Some(var_5) = &input.border_style {
        object.key("BorderStyle").string(var_5.as_str());
    }
    if let Some(var_6) = &input.border_color {
        object.key("BorderColor").string(var_6.as_str());
    }
    if let Some(var_7) = &input.gutter_visibility {
        object.key("GutterVisibility").string(var_7.as_str());
    }
    if let Some(var_8) = &input.gutter_spacing {
        object.key("GutterSpacing").string(var_8.as_str());
    }
    if let Some(var_9) = &input.background_visibility {
        object.key("BackgroundVisibility").string(var_9.as_str());
    }
    if let Some(var_10) = &input.background_color {
        object.key("BackgroundColor").string(var_10.as_str());
    }
    Ok(())
}

pub(crate) fn de_panel_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::PanelConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PanelConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Title" => {
                            builder = builder.set_title(crate::protocol_serde::shape_panel_title_options::de_panel_title_options(tokens)?);
                        }
                        "BorderVisibility" => {
                            builder = builder.set_border_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BorderThickness" => {
                            builder = builder.set_border_thickness(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BorderStyle" => {
                            builder = builder.set_border_style(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PanelBorderStyle::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BorderColor" => {
                            builder = builder.set_border_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "GutterVisibility" => {
                            builder = builder.set_gutter_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "GutterSpacing" => {
                            builder = builder.set_gutter_spacing(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "BackgroundVisibility" => {
                            builder = builder.set_background_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BackgroundColor" => {
                            builder = builder.set_background_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
