// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_radar_chart_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RadarChartConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.field_wells {
        #[allow(unused_mut)]
        let mut object_2 = object.key("FieldWells").start_object();
        crate::protocol_serde::shape_radar_chart_field_wells::ser_radar_chart_field_wells(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.sort_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SortConfiguration").start_object();
        crate::protocol_serde::shape_radar_chart_sort_configuration::ser_radar_chart_sort_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.shape {
        object.key("Shape").string(var_5.as_str());
    }
    if let Some(var_6) = &input.base_series_settings {
        #[allow(unused_mut)]
        let mut object_7 = object.key("BaseSeriesSettings").start_object();
        crate::protocol_serde::shape_radar_chart_series_settings::ser_radar_chart_series_settings(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.start_angle {
        object.key("StartAngle").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.visual_palette {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VisualPalette").start_object();
        crate::protocol_serde::shape_visual_palette::ser_visual_palette(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.alternate_band_colors_visibility {
        object.key("AlternateBandColorsVisibility").string(var_11.as_str());
    }
    if let Some(var_12) = &input.alternate_band_even_color {
        object.key("AlternateBandEvenColor").string(var_12.as_str());
    }
    if let Some(var_13) = &input.alternate_band_odd_color {
        object.key("AlternateBandOddColor").string(var_13.as_str());
    }
    if let Some(var_14) = &input.category_axis {
        #[allow(unused_mut)]
        let mut object_15 = object.key("CategoryAxis").start_object();
        crate::protocol_serde::shape_axis_display_options::ser_axis_display_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.category_label_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("CategoryLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.color_axis {
        #[allow(unused_mut)]
        let mut object_19 = object.key("ColorAxis").start_object();
        crate::protocol_serde::shape_axis_display_options::ser_axis_display_options(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.color_label_options {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ColorLabelOptions").start_object();
        crate::protocol_serde::shape_chart_axis_label_options::ser_chart_axis_label_options(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.legend {
        #[allow(unused_mut)]
        let mut object_23 = object.key("Legend").start_object();
        crate::protocol_serde::shape_legend_options::ser_legend_options(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.axes_range_scale {
        object.key("AxesRangeScale").string(var_24.as_str());
    }
    Ok(())
}

pub(crate) fn de_radar_chart_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RadarChartConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RadarChartConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FieldWells" => {
                            builder =
                                builder.set_field_wells(crate::protocol_serde::shape_radar_chart_field_wells::de_radar_chart_field_wells(tokens)?);
                        }
                        "SortConfiguration" => {
                            builder = builder.set_sort_configuration(
                                crate::protocol_serde::shape_radar_chart_sort_configuration::de_radar_chart_sort_configuration(tokens)?,
                            );
                        }
                        "Shape" => {
                            builder = builder.set_shape(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::RadarChartShape::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BaseSeriesSettings" => {
                            builder = builder.set_base_series_settings(
                                crate::protocol_serde::shape_radar_chart_series_settings::de_radar_chart_series_settings(tokens)?,
                            );
                        }
                        "StartAngle" => {
                            builder = builder.set_start_angle(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "VisualPalette" => {
                            builder = builder.set_visual_palette(crate::protocol_serde::shape_visual_palette::de_visual_palette(tokens)?);
                        }
                        "AlternateBandColorsVisibility" => {
                            builder = builder.set_alternate_band_colors_visibility(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Visibility::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AlternateBandEvenColor" => {
                            builder = builder.set_alternate_band_even_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AlternateBandOddColor" => {
                            builder = builder.set_alternate_band_odd_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CategoryAxis" => {
                            builder = builder.set_category_axis(crate::protocol_serde::shape_axis_display_options::de_axis_display_options(tokens)?);
                        }
                        "CategoryLabelOptions" => {
                            builder = builder.set_category_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "ColorAxis" => {
                            builder = builder.set_color_axis(crate::protocol_serde::shape_axis_display_options::de_axis_display_options(tokens)?);
                        }
                        "ColorLabelOptions" => {
                            builder = builder.set_color_label_options(
                                crate::protocol_serde::shape_chart_axis_label_options::de_chart_axis_label_options(tokens)?,
                            );
                        }
                        "Legend" => {
                            builder = builder.set_legend(crate::protocol_serde::shape_legend_options::de_legend_options(tokens)?);
                        }
                        "AxesRangeScale" => {
                            builder = builder.set_axes_range_scale(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::RadarChartAxesRangeScale::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
