// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_ir_group_by(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicIrGroupBy,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.field_name {
        #[allow(unused_mut)]
        let mut object_2 = object.key("FieldName").start_object();
        crate::protocol_serde::shape_identifier::ser_identifier(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.time_granularity {
        object.key("TimeGranularity").string(var_3.as_str());
    }
    if let Some(var_4) = &input.sort {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Sort").start_object();
        crate::protocol_serde::shape_topic_sort_clause::ser_topic_sort_clause(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.display_format {
        object.key("DisplayFormat").string(var_6.as_str());
    }
    if let Some(var_7) = &input.display_format_options {
        #[allow(unused_mut)]
        let mut object_8 = object.key("DisplayFormatOptions").start_object();
        crate::protocol_serde::shape_display_format_options::ser_display_format_options(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.named_entity {
        #[allow(unused_mut)]
        let mut object_10 = object.key("NamedEntity").start_object();
        crate::protocol_serde::shape_named_entity_ref::ser_named_entity_ref(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_topic_ir_group_by<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::TopicIrGroupBy>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicIrGroupByBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FieldName" => {
                            builder = builder.set_field_name(crate::protocol_serde::shape_identifier::de_identifier(tokens)?);
                        }
                        "TimeGranularity" => {
                            builder = builder.set_time_granularity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TopicTimeGranularity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Sort" => {
                            builder = builder.set_sort(crate::protocol_serde::shape_topic_sort_clause::de_topic_sort_clause(tokens)?);
                        }
                        "DisplayFormat" => {
                            builder = builder.set_display_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DisplayFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DisplayFormatOptions" => {
                            builder = builder
                                .set_display_format_options(crate::protocol_serde::shape_display_format_options::de_display_format_options(tokens)?);
                        }
                        "NamedEntity" => {
                            builder = builder.set_named_entity(crate::protocol_serde::shape_named_entity_ref::de_named_entity_ref(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
