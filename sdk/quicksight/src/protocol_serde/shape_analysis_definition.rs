// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_analysis_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnalysisDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_set_identifier_declarations {
        let mut array_2 = object.key("DataSetIdentifierDeclarations").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_data_set_identifier_declaration::ser_data_set_identifier_declaration(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.sheets {
        let mut array_6 = object.key("Sheets").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_sheet_definition::ser_sheet_definition(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.calculated_fields {
        let mut array_10 = object.key("CalculatedFields").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_calculated_field::ser_calculated_field(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.parameter_declarations {
        let mut array_14 = object.key("ParameterDeclarations").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_parameter_declaration::ser_parameter_declaration(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.filter_groups {
        let mut array_18 = object.key("FilterGroups").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_filter_group::ser_filter_group(
                    &mut object_20,
                    item_19,
                )?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.column_configurations {
        let mut array_22 = object.key("ColumnConfigurations").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_column_configuration::ser_column_configuration(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.analysis_defaults {
        #[allow(unused_mut)]
        let mut object_26 = object.key("AnalysisDefaults").start_object();
        crate::protocol_serde::shape_analysis_defaults::ser_analysis_defaults(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    Ok(())
}

pub(crate) fn de_analysis_definition<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AnalysisDefinition>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnalysisDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DataSetIdentifierDeclarations" => {
                                builder = builder.set_data_set_identifier_declarations(
                                    crate::protocol_serde::shape_data_set_identifier_declaration_list::de_data_set_identifier_declaration_list(tokens)?
                                );
                            }
                            "Sheets" => {
                                builder = builder.set_sheets(
                                    crate::protocol_serde::shape_sheet_definition_list::de_sheet_definition_list(tokens)?
                                );
                            }
                            "CalculatedFields" => {
                                builder = builder.set_calculated_fields(
                                    crate::protocol_serde::shape_calculated_fields::de_calculated_fields(tokens)?
                                );
                            }
                            "ParameterDeclarations" => {
                                builder = builder.set_parameter_declarations(
                                    crate::protocol_serde::shape_parameter_declaration_list::de_parameter_declaration_list(tokens)?
                                );
                            }
                            "FilterGroups" => {
                                builder = builder.set_filter_groups(
                                    crate::protocol_serde::shape_filter_group_list::de_filter_group_list(tokens)?
                                );
                            }
                            "ColumnConfigurations" => {
                                builder = builder.set_column_configurations(
                                    crate::protocol_serde::shape_column_configuration_list::de_column_configuration_list(tokens)?
                                );
                            }
                            "AnalysisDefaults" => {
                                builder = builder.set_analysis_defaults(
                                    crate::protocol_serde::shape_analysis_defaults::de_analysis_defaults(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
