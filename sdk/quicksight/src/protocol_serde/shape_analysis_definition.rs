// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_analysis_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnalysisDefinition,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("DataSetIdentifierDeclarations").start_array();
        for item_2 in &input.data_set_identifier_declarations {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_data_set_identifier_declaration::ser_data_set_identifier_declaration(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    if let Some(var_4) = &input.sheets {
        let mut array_5 = object.key("Sheets").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_sheet_definition::ser_sheet_definition(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.calculated_fields {
        let mut array_9 = object.key("CalculatedFields").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_calculated_field::ser_calculated_field(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.parameter_declarations {
        let mut array_13 = object.key("ParameterDeclarations").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_parameter_declaration::ser_parameter_declaration(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.filter_groups {
        let mut array_17 = object.key("FilterGroups").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_filter_group::ser_filter_group(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.column_configurations {
        let mut array_21 = object.key("ColumnConfigurations").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_column_configuration::ser_column_configuration(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.analysis_defaults {
        #[allow(unused_mut)]
        let mut object_25 = object.key("AnalysisDefaults").start_object();
        crate::protocol_serde::shape_analysis_defaults::ser_analysis_defaults(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}

pub(crate) fn de_analysis_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AnalysisDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnalysisDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DataSetIdentifierDeclarations" => {
                            builder = builder.set_data_set_identifier_declarations(
                                crate::protocol_serde::shape_data_set_identifier_declaration_list::de_data_set_identifier_declaration_list(tokens)?,
                            );
                        }
                        "Sheets" => {
                            builder = builder.set_sheets(crate::protocol_serde::shape_sheet_definition_list::de_sheet_definition_list(tokens)?);
                        }
                        "CalculatedFields" => {
                            builder = builder.set_calculated_fields(crate::protocol_serde::shape_calculated_fields::de_calculated_fields(tokens)?);
                        }
                        "ParameterDeclarations" => {
                            builder = builder.set_parameter_declarations(
                                crate::protocol_serde::shape_parameter_declaration_list::de_parameter_declaration_list(tokens)?,
                            );
                        }
                        "FilterGroups" => {
                            builder = builder.set_filter_groups(crate::protocol_serde::shape_filter_group_list::de_filter_group_list(tokens)?);
                        }
                        "ColumnConfigurations" => {
                            builder = builder.set_column_configurations(
                                crate::protocol_serde::shape_column_configuration_list::de_column_configuration_list(tokens)?,
                            );
                        }
                        "AnalysisDefaults" => {
                            builder = builder.set_analysis_defaults(crate::protocol_serde::shape_analysis_defaults::de_analysis_defaults(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::analysis_definition_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
