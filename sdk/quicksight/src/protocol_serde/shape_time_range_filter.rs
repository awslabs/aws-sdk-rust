// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_time_range_filter(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TimeRangeFilter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("FilterId").string(input.filter_id.as_str());
    }
    if let Some(var_1) = &input.column {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Column").start_object();
        crate::protocol_serde::shape_column_identifier::ser_column_identifier(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.include_minimum {
        object.key("IncludeMinimum").boolean(*var_3);
    }
    if let Some(var_4) = &input.include_maximum {
        object.key("IncludeMaximum").boolean(*var_4);
    }
    if let Some(var_5) = &input.range_minimum_value {
        #[allow(unused_mut)]
        let mut object_6 = object.key("RangeMinimumValue").start_object();
        crate::protocol_serde::shape_time_range_filter_value::ser_time_range_filter_value(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.range_maximum_value {
        #[allow(unused_mut)]
        let mut object_8 = object.key("RangeMaximumValue").start_object();
        crate::protocol_serde::shape_time_range_filter_value::ser_time_range_filter_value(&mut object_8, var_7)?;
        object_8.finish();
    }
    {
        object.key("NullOption").string(input.null_option.as_str());
    }
    if let Some(var_9) = &input.exclude_period_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ExcludePeriodConfiguration").start_object();
        crate::protocol_serde::shape_exclude_period_configuration::ser_exclude_period_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.time_granularity {
        object.key("TimeGranularity").string(var_11.as_str());
    }
    if let Some(var_12) = &input.default_filter_control_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("DefaultFilterControlConfiguration").start_object();
        crate::protocol_serde::shape_default_filter_control_configuration::ser_default_filter_control_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_time_range_filter<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TimeRangeFilter>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TimeRangeFilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "FilterId" => {
                            builder = builder.set_filter_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Column" => {
                            builder = builder.set_column(crate::protocol_serde::shape_column_identifier::de_column_identifier(tokens)?);
                        }
                        "IncludeMinimum" => {
                            builder = builder.set_include_minimum(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeMaximum" => {
                            builder = builder.set_include_maximum(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RangeMinimumValue" => {
                            builder = builder
                                .set_range_minimum_value(crate::protocol_serde::shape_time_range_filter_value::de_time_range_filter_value(tokens)?);
                        }
                        "RangeMaximumValue" => {
                            builder = builder
                                .set_range_maximum_value(crate::protocol_serde::shape_time_range_filter_value::de_time_range_filter_value(tokens)?);
                        }
                        "NullOption" => {
                            builder = builder.set_null_option(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FilterNullOption::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ExcludePeriodConfiguration" => {
                            builder = builder.set_exclude_period_configuration(
                                crate::protocol_serde::shape_exclude_period_configuration::de_exclude_period_configuration(tokens)?,
                            );
                        }
                        "TimeGranularity" => {
                            builder = builder.set_time_granularity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TimeGranularity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DefaultFilterControlConfiguration" => {
                            builder = builder.set_default_filter_control_configuration(
                                crate::protocol_serde::shape_default_filter_control_configuration::de_default_filter_control_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::time_range_filter_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
