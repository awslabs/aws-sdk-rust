// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_histogram_visual(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::HistogramVisual,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("VisualId").string(input.visual_id.as_str());
    }
    if let Some(var_1) = &input.title {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Title").start_object();
        crate::protocol_serde::shape_visual_title_label_options::ser_visual_title_label_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.subtitle {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Subtitle").start_object();
        crate::protocol_serde::shape_visual_subtitle_label_options::ser_visual_subtitle_label_options(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.chart_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ChartConfiguration").start_object();
        crate::protocol_serde::shape_histogram_configuration::ser_histogram_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.actions {
        let mut array_8 = object.key("Actions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_visual_custom_action::ser_visual_custom_action(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub(crate) fn de_histogram_visual<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::HistogramVisual>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::HistogramVisualBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "VisualId" => {
                            builder = builder.set_visual_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Title" => {
                            builder = builder.set_title(crate::protocol_serde::shape_visual_title_label_options::de_visual_title_label_options(
                                tokens,
                            )?);
                        }
                        "Subtitle" => {
                            builder = builder
                                .set_subtitle(crate::protocol_serde::shape_visual_subtitle_label_options::de_visual_subtitle_label_options(tokens)?);
                        }
                        "ChartConfiguration" => {
                            builder = builder
                                .set_chart_configuration(crate::protocol_serde::shape_histogram_configuration::de_histogram_configuration(tokens)?);
                        }
                        "Actions" => {
                            builder = builder.set_actions(crate::protocol_serde::shape_visual_custom_action_list::de_visual_custom_action_list(
                                tokens,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::histogram_visual_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
