// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dashboard_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dashboard::CreateDashboardInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.dashboard_publish_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DashboardPublishOptions").start_object();
        crate::protocol_serde::shape_dashboard_publish_options::ser_dashboard_publish_options(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.definition {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Definition").start_object();
        crate::protocol_serde::shape_dashboard_version_definition::ser_dashboard_version_definition(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_parameters::ser_parameters(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.permissions {
        let mut array_9 = object.key("Permissions").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.source_entity {
        #[allow(unused_mut)]
        let mut object_13 = object.key("SourceEntity").start_object();
        crate::protocol_serde::shape_dashboard_source_entity::ser_dashboard_source_entity(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.theme_arn {
        object.key("ThemeArn").string(var_18.as_str());
    }
    if let Some(var_19) = &input.version_description {
        object.key("VersionDescription").string(var_19.as_str());
    }
    Ok(())
}
