// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_dataset_metadata(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DatasetMetadata,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("DatasetArn").string(input.dataset_arn.as_str());
    }
    if let Some(var_1) = &input.dataset_name {
        object.key("DatasetName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_description {
        object.key("DatasetDescription").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_aggregation {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DataAggregation").start_object();
        crate::protocol_serde::shape_data_aggregation::ser_data_aggregation(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.filters {
        let mut array_6 = object.key("Filters").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_topic_filter::ser_topic_filter(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.columns {
        let mut array_10 = object.key("Columns").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_topic_column::ser_topic_column(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.calculated_fields {
        let mut array_14 = object.key("CalculatedFields").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_topic_calculated_field::ser_topic_calculated_field(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.named_entities {
        let mut array_18 = object.key("NamedEntities").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_topic_named_entity::ser_topic_named_entity(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}

pub(crate) fn de_dataset_metadata<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::DatasetMetadata>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DatasetMetadataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DatasetArn" => {
                            builder = builder.set_dataset_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DatasetName" => {
                            builder = builder.set_dataset_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DatasetDescription" => {
                            builder = builder.set_dataset_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DataAggregation" => {
                            builder = builder.set_data_aggregation(crate::protocol_serde::shape_data_aggregation::de_data_aggregation(tokens)?);
                        }
                        "Filters" => {
                            builder = builder.set_filters(crate::protocol_serde::shape_topic_filters::de_topic_filters(tokens)?);
                        }
                        "Columns" => {
                            builder = builder.set_columns(crate::protocol_serde::shape_topic_columns::de_topic_columns(tokens)?);
                        }
                        "CalculatedFields" => {
                            builder = builder
                                .set_calculated_fields(crate::protocol_serde::shape_topic_calculated_fields::de_topic_calculated_fields(tokens)?);
                        }
                        "NamedEntities" => {
                            builder = builder.set_named_entities(crate::protocol_serde::shape_topic_named_entities::de_topic_named_entities(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::dataset_metadata_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
