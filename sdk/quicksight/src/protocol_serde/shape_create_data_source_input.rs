// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_source::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.credentials {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Credentials").start_object();
        crate::protocol_serde::shape_data_source_credentials::ser_data_source_credentials(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.data_source_id {
        object.key("DataSourceId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_source_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DataSourceParameters").start_object();
        crate::protocol_serde::shape_data_source_parameters::ser_data_source_parameters(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.permissions {
        let mut array_8 = object.key("Permissions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.ssl_properties {
        #[allow(unused_mut)]
        let mut object_12 = object.key("SslProperties").start_object();
        crate::protocol_serde::shape_ssl_properties::ser_ssl_properties(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("Tags").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.r#type {
        object.key("Type").string(var_17.as_str());
    }
    if let Some(var_18) = &input.vpc_connection_properties {
        #[allow(unused_mut)]
        let mut object_19 = object.key("VpcConnectionProperties").start_object();
        crate::protocol_serde::shape_vpc_connection_properties::ser_vpc_connection_properties(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}
