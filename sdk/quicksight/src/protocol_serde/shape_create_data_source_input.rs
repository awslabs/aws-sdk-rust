// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_source_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_source::CreateDataSourceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.credentials {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Credentials").start_object();
        crate::protocol_serde::shape_data_source_credentials::ser_data_source_credentials(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.data_source_id {
        object.key("DataSourceId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_source_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DataSourceParameters").start_object();
        crate::protocol_serde::shape_data_source_parameters::ser_data_source_parameters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.folder_arns {
        let mut array_7 = object.key("FolderArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.permissions {
        let mut array_11 = object.key("Permissions").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.ssl_properties {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SslProperties").start_object();
        crate::protocol_serde::shape_ssl_properties::ser_ssl_properties(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.r#type {
        object.key("Type").string(var_20.as_str());
    }
    if let Some(var_21) = &input.vpc_connection_properties {
        #[allow(unused_mut)]
        let mut object_22 = object.key("VpcConnectionProperties").start_object();
        crate::protocol_serde::shape_vpc_connection_properties::ser_vpc_connection_properties(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
