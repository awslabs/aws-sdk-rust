// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTheme`](crate::client::fluent_builders::CreateTheme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`aws_account_id(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::aws_account_id) / [`set_aws_account_id(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_aws_account_id): <p>The ID of the Amazon Web Services account where you want to store the new theme. </p>
    ///   - [`theme_id(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::theme_id) / [`set_theme_id(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_theme_id): <p>An ID for the theme that you want to create. The theme ID is unique per Amazon Web Services Region in each Amazon Web Services account.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_name): <p>A display name for the theme.</p>
    ///   - [`base_theme_id(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::base_theme_id) / [`set_base_theme_id(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_base_theme_id): <p>The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within an analysis. </p>
    ///   - [`version_description(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::version_description) / [`set_version_description(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_version_description): <p>A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field.</p>
    ///   - [`configuration(ThemeConfiguration)`](crate::client::fluent_builders::CreateTheme::configuration) / [`set_configuration(Option<ThemeConfiguration>)`](crate::client::fluent_builders::CreateTheme::set_configuration): <p>The theme configuration, which contains the theme display properties.</p>
    ///   - [`permissions(Vec<ResourcePermission>)`](crate::client::fluent_builders::CreateTheme::permissions) / [`set_permissions(Option<Vec<ResourcePermission>>)`](crate::client::fluent_builders::CreateTheme::set_permissions): <p>A valid grouping of resource permissions to apply to the new theme. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTheme::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTheme::set_tags): <p>A map of the key-value pairs for the resource tag or tags that you want to add to the resource.</p>
    /// - On success, responds with [`CreateThemeOutput`](crate::output::CreateThemeOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateThemeOutput::arn): <p>The Amazon Resource Name (ARN) for the theme.</p>
    ///   - [`version_arn(Option<String>)`](crate::output::CreateThemeOutput::version_arn): <p>The Amazon Resource Name (ARN) for the new theme.</p>
    ///   - [`theme_id(Option<String>)`](crate::output::CreateThemeOutput::theme_id): <p>The ID of the theme.</p>
    ///   - [`creation_status(Option<ResourceStatus>)`](crate::output::CreateThemeOutput::creation_status): <p>The theme creation status.</p>
    ///   - [`status(i32)`](crate::output::CreateThemeOutput::status): <p>The HTTP status of the request.</p>
    ///   - [`request_id(Option<String>)`](crate::output::CreateThemeOutput::request_id): <p>The Amazon Web Services request ID for this operation.</p>
    /// - On failure, responds with [`SdkError<CreateThemeError>`](crate::error::CreateThemeError)
    pub fn create_theme(&self) -> crate::client::fluent_builders::CreateTheme {
        crate::client::fluent_builders::CreateTheme::new(self.handle.clone())
    }
}
