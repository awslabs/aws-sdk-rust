// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateFolder`](crate::operation::create_folder::builders::CreateFolderFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`aws_account_id(impl Into<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::aws_account_id) / [`set_aws_account_id(Option<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_aws_account_id):<br>required: **true**<br><p>The ID for the Amazon Web Services account where you want to create the folder.</p><br>
    ///   - [`folder_id(impl Into<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::folder_id) / [`set_folder_id(Option<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_folder_id):<br>required: **true**<br><p>The ID of the folder.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_name):<br>required: **false**<br><p>The name of the folder.</p><br>
    ///   - [`folder_type(FolderType)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::folder_type) / [`set_folder_type(Option<FolderType>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_folder_type):<br>required: **false**<br><p>The type of folder. By default, <code>folderType</code> is <code>SHARED</code>.</p><br>
    ///   - [`parent_folder_arn(impl Into<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::parent_folder_arn) / [`set_parent_folder_arn(Option<String>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_parent_folder_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) for the parent folder.</p>  <p> <code>ParentFolderArn</code> can be null. An empty <code>parentFolderArn</code> creates a root-level folder.</p><br>
    ///   - [`permissions(ResourcePermission)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::permissions) / [`set_permissions(Option<Vec::<ResourcePermission>>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_permissions):<br>required: **false**<br><p>A structure that describes the principals and the resource-level permissions of a folder.</p>  <p>To specify no permissions, omit <code>Permissions</code>.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_tags):<br>required: **false**<br><p>Tags for the folder.</p><br>
    ///   - [`sharing_model(SharingModel)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::sharing_model) / [`set_sharing_model(Option<SharingModel>)`](crate::operation::create_folder::builders::CreateFolderFluentBuilder::set_sharing_model):<br>required: **false**<br><p>An optional parameter that determines the sharing scope of the folder. The default value for this parameter is <code>ACCOUNT</code>.</p><br>
    /// - On success, responds with [`CreateFolderOutput`](crate::operation::create_folder::CreateFolderOutput) with field(s):
    ///   - [`status(i32)`](crate::operation::create_folder::CreateFolderOutput::status): <p>The HTTP status of the request.</p>
    ///   - [`arn(Option<String>)`](crate::operation::create_folder::CreateFolderOutput::arn): <p>The Amazon Resource Name (ARN) for the newly created folder.</p>
    ///   - [`folder_id(Option<String>)`](crate::operation::create_folder::CreateFolderOutput::folder_id): <p>The folder ID for the newly created folder.</p>
    ///   - [`request_id(Option<String>)`](crate::operation::create_folder::CreateFolderOutput::request_id): <p>The request ID for the newly created folder.</p>
    /// - On failure, responds with [`SdkError<CreateFolderError>`](crate::operation::create_folder::CreateFolderError)
    pub fn create_folder(&self) -> crate::operation::create_folder::builders::CreateFolderFluentBuilder {
        crate::operation::create_folder::builders::CreateFolderFluentBuilder::new(self.handle.clone())
    }
}
