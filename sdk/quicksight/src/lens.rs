// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_analyses_output_next_token(
    input: &crate::operation::list_analyses::ListAnalysesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dashboard_versions_output_next_token(
    input: &crate::operation::list_dashboard_versions::ListDashboardVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dashboards_output_next_token(
    input: &crate::operation::list_dashboards::ListDashboardsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_data_sets_output_next_token(
    input: &crate::operation::list_data_sets::ListDataSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_data_sources_output_next_token(
    input: &crate::operation::list_data_sources::ListDataSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ingestions_output_next_token(
    input: &crate::operation::list_ingestions::ListIngestionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_namespaces_output_next_token(
    input: &crate::operation::list_namespaces::ListNamespacesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_template_aliases_output_next_token(
    input: &crate::operation::list_template_aliases::ListTemplateAliasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_template_versions_output_next_token(
    input: &crate::operation::list_template_versions::ListTemplateVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_templates_output_next_token(
    input: &crate::operation::list_templates::ListTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_theme_versions_output_next_token(
    input: &crate::operation::list_theme_versions::ListThemeVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_themes_output_next_token(
    input: &crate::operation::list_themes::ListThemesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_analyses_output_next_token(
    input: &crate::operation::search_analyses::SearchAnalysesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_dashboards_output_next_token(
    input: &crate::operation::search_dashboards::SearchDashboardsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_data_sets_output_next_token(
    input: &crate::operation::search_data_sets::SearchDataSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_data_sources_output_next_token(
    input: &crate::operation::search_data_sources::SearchDataSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_analyses_output_analysis_summary_list(
    input: crate::operation::list_analyses::ListAnalysesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AnalysisSummary>> {
    let input = match input.analysis_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dashboard_versions_output_dashboard_version_summary_list(
    input: crate::operation::list_dashboard_versions::ListDashboardVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DashboardVersionSummary>> {
    let input = match input.dashboard_version_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dashboards_output_dashboard_summary_list(
    input: crate::operation::list_dashboards::ListDashboardsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DashboardSummary>> {
    let input = match input.dashboard_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_data_sets_output_data_set_summaries(
    input: crate::operation::list_data_sets::ListDataSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataSetSummary>> {
    let input = match input.data_set_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_data_sources_output_data_sources(
    input: crate::operation::list_data_sources::ListDataSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataSource>> {
    let input = match input.data_sources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ingestions_output_ingestions(
    input: crate::operation::list_ingestions::ListIngestionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Ingestion>> {
    let input = match input.ingestions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_namespaces_output_namespaces(
    input: crate::operation::list_namespaces::ListNamespacesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NamespaceInfoV2>> {
    let input = match input.namespaces {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_template_aliases_output_template_alias_list(
    input: crate::operation::list_template_aliases::ListTemplateAliasesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TemplateAlias>> {
    let input = match input.template_alias_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_template_versions_output_template_version_summary_list(
    input: crate::operation::list_template_versions::ListTemplateVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TemplateVersionSummary>> {
    let input = match input.template_version_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_templates_output_template_summary_list(
    input: crate::operation::list_templates::ListTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TemplateSummary>> {
    let input = match input.template_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_theme_versions_output_theme_version_summary_list(
    input: crate::operation::list_theme_versions::ListThemeVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThemeVersionSummary>> {
    let input = match input.theme_version_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_themes_output_theme_summary_list(
    input: crate::operation::list_themes::ListThemesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThemeSummary>> {
    let input = match input.theme_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_analyses_output_analysis_summary_list(
    input: crate::operation::search_analyses::SearchAnalysesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AnalysisSummary>> {
    let input = match input.analysis_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_dashboards_output_dashboard_summary_list(
    input: crate::operation::search_dashboards::SearchDashboardsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DashboardSummary>> {
    let input = match input.dashboard_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_data_sets_output_data_set_summaries(
    input: crate::operation::search_data_sets::SearchDataSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataSetSummary>> {
    let input = match input.data_set_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_data_sources_output_data_source_summaries(
    input: crate::operation::search_data_sources::SearchDataSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataSourceSummary>> {
    let input = match input.data_source_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
