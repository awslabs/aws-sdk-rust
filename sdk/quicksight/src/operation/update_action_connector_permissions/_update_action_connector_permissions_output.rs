// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateActionConnectorPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the action connector.</p>
    pub action_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status code of the request.</p>
    pub status: i32,
    /// <p>The updated permissions configuration for the action connector.</p>
    pub permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    _request_id: Option<String>,
}
impl UpdateActionConnectorPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn action_connector_id(&self) -> ::std::option::Option<&str> {
        self.action_connector_id.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The updated permissions configuration for the action connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.permissions.is_none()`.
    pub fn permissions(&self) -> &[crate::types::ResourcePermission] {
        self.permissions.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for UpdateActionConnectorPermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateActionConnectorPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateActionConnectorPermissionsOutput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsOutput).
    pub fn builder() -> crate::operation::update_action_connector_permissions::builders::UpdateActionConnectorPermissionsOutputBuilder {
        crate::operation::update_action_connector_permissions::builders::UpdateActionConnectorPermissionsOutputBuilder::default()
    }
}

/// A builder for [`UpdateActionConnectorPermissionsOutput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateActionConnectorPermissionsOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) action_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    pub(crate) permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    _request_id: Option<String>,
}
impl UpdateActionConnectorPermissionsOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the action connector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_connector_id = input;
        self
    }
    /// <p>The unique identifier of the action connector.</p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_connector_id
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The updated permissions configuration for the action connector.</p>
    pub fn permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated permissions configuration for the action connector.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The updated permissions configuration for the action connector.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>> {
        &self.permissions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateActionConnectorPermissionsOutput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsOutput).
    pub fn build(self) -> crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsOutput {
        crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsOutput {
            arn: self.arn,
            action_connector_id: self.action_connector_id,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            permissions: self.permissions,
            _request_id: self._request_id,
        }
    }
}
