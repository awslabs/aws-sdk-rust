// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateActionConnectorPermissionsInput {
    /// <p>The Amazon Web Services account ID that contains the action connector.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the action connector whose permissions you want to update.</p>
    pub action_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The permissions to grant to users and groups for this action connector.</p>
    pub grant_permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    /// <p>The permissions to revoke from users and groups for this action connector.</p>
    pub revoke_permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
}
impl UpdateActionConnectorPermissionsInput {
    /// <p>The Amazon Web Services account ID that contains the action connector.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The unique identifier of the action connector whose permissions you want to update.</p>
    pub fn action_connector_id(&self) -> ::std::option::Option<&str> {
        self.action_connector_id.as_deref()
    }
    /// <p>The permissions to grant to users and groups for this action connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.grant_permissions.is_none()`.
    pub fn grant_permissions(&self) -> &[crate::types::ResourcePermission] {
        self.grant_permissions.as_deref().unwrap_or_default()
    }
    /// <p>The permissions to revoke from users and groups for this action connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.revoke_permissions.is_none()`.
    pub fn revoke_permissions(&self) -> &[crate::types::ResourcePermission] {
        self.revoke_permissions.as_deref().unwrap_or_default()
    }
}
impl UpdateActionConnectorPermissionsInput {
    /// Creates a new builder-style object to manufacture [`UpdateActionConnectorPermissionsInput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsInput).
    pub fn builder() -> crate::operation::update_action_connector_permissions::builders::UpdateActionConnectorPermissionsInputBuilder {
        crate::operation::update_action_connector_permissions::builders::UpdateActionConnectorPermissionsInputBuilder::default()
    }
}

/// A builder for [`UpdateActionConnectorPermissionsInput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateActionConnectorPermissionsInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) grant_permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    pub(crate) revoke_permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
}
impl UpdateActionConnectorPermissionsInputBuilder {
    /// <p>The Amazon Web Services account ID that contains the action connector.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The unique identifier of the action connector whose permissions you want to update.</p>
    /// This field is required.
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the action connector whose permissions you want to update.</p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_connector_id = input;
        self
    }
    /// <p>The unique identifier of the action connector whose permissions you want to update.</p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_connector_id
    }
    /// Appends an item to `grant_permissions`.
    ///
    /// To override the contents of this collection use [`set_grant_permissions`](Self::set_grant_permissions).
    ///
    /// <p>The permissions to grant to users and groups for this action connector.</p>
    pub fn grant_permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.grant_permissions.unwrap_or_default();
        v.push(input);
        self.grant_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The permissions to grant to users and groups for this action connector.</p>
    pub fn set_grant_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>) -> Self {
        self.grant_permissions = input;
        self
    }
    /// <p>The permissions to grant to users and groups for this action connector.</p>
    pub fn get_grant_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>> {
        &self.grant_permissions
    }
    /// Appends an item to `revoke_permissions`.
    ///
    /// To override the contents of this collection use [`set_revoke_permissions`](Self::set_revoke_permissions).
    ///
    /// <p>The permissions to revoke from users and groups for this action connector.</p>
    pub fn revoke_permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.revoke_permissions.unwrap_or_default();
        v.push(input);
        self.revoke_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The permissions to revoke from users and groups for this action connector.</p>
    pub fn set_revoke_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>) -> Self {
        self.revoke_permissions = input;
        self
    }
    /// <p>The permissions to revoke from users and groups for this action connector.</p>
    pub fn get_revoke_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>> {
        &self.revoke_permissions
    }
    /// Consumes the builder and constructs a [`UpdateActionConnectorPermissionsInput`](crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_action_connector_permissions::UpdateActionConnectorPermissionsInput {
                aws_account_id: self.aws_account_id,
                action_connector_id: self.action_connector_id,
                grant_permissions: self.grant_permissions,
                revoke_permissions: self.revoke_permissions,
            },
        )
    }
}
