// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_analysis::_create_analysis_output::CreateAnalysisOutputBuilder;

pub use crate::operation::create_analysis::_create_analysis_input::CreateAnalysisInputBuilder;

/// Fluent builder constructing a request to `CreateAnalysis`.
///
/// <p>Creates an analysis in Amazon QuickSight.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAnalysisFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_analysis::builders::CreateAnalysisInputBuilder,
}
impl CreateAnalysisFluentBuilder {
    /// Creates a new `CreateAnalysis`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_analysis::CreateAnalysis,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_analysis::CreateAnalysisError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_analysis::CreateAnalysisOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_analysis::CreateAnalysisError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Amazon Web Services account where you are creating an analysis.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account where you are creating an analysis.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID for the analysis that you're creating. This ID displays in the URL of the analysis.</p>
    pub fn analysis_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.analysis_id(input.into());
        self
    }
    /// <p>The ID for the analysis that you're creating. This ID displays in the URL of the analysis.</p>
    pub fn set_analysis_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_analysis_id(input);
        self
    }
    /// <p>A descriptive name for the analysis that you're creating. This name displays for the analysis in the Amazon QuickSight console. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A descriptive name for the analysis that you're creating. This name displays for the analysis in the Amazon QuickSight console. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values. </p>
    pub fn parameters(mut self, input: crate::types::Parameters) -> Self {
        self.inner = self.inner.parameters(input);
        self
    }
    /// <p>The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values. </p>
    pub fn set_parameters(mut self, input: std::option::Option<crate::types::Parameters>) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// Appends an item to `Permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p>
    /// <p>To specify no permissions, omit <code>Permissions</code>.</p>
    pub fn permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        self.inner = self.inner.permissions(input);
        self
    }
    /// <p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p>
    /// <p>To specify no permissions, omit <code>Permissions</code>.</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
    ) -> Self {
        self.inner = self.inner.set_permissions(input);
        self
    }
    /// <p>A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.</p>
    pub fn source_entity(mut self, input: crate::types::AnalysisSourceEntity) -> Self {
        self.inner = self.inner.source_entity(input);
        self
    }
    /// <p>A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.</p>
    pub fn set_source_entity(
        mut self,
        input: std::option::Option<crate::types::AnalysisSourceEntity>,
    ) -> Self {
        self.inner = self.inner.set_source_entity(input);
        self
    }
    /// <p>The ARN for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it.</p>
    pub fn theme_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.theme_arn(input.into());
        self
    }
    /// <p>The ARN for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it.</p>
    pub fn set_theme_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_theme_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The definition of an analysis.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    pub fn definition(mut self, input: crate::types::AnalysisDefinition) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>The definition of an analysis.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::AnalysisDefinition>,
    ) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
}
