// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAssetBundleImportJobOutput {
    /// <p>Indicates the status of a job through its queuing and execution.</p>
    /// <p>Poll the <code>DescribeAssetBundleImport</code> API until <code>JobStatus</code> returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_COMPLETED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_ERROR</code> </p> </li>
    /// </ul>
    pub job_status: ::std::option::Option<crate::types::AssetBundleImportJobStatus>,
    /// <p>An array of error records that describes any failures that occurred during the export job processing.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>,
    /// <p>An array of error records that describes any failures that occurred while an import job was attempting a rollback.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub rollback_errors: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>,
    /// <p>The Amazon Resource Name (ARN) for the import job.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the import job was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.</p>
    pub asset_bundle_import_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account the import job was executed in. </p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The source of the asset bundle zip file that contains the data that is imported by the job.</p>
    pub asset_bundle_import_source: ::std::option::Option<crate::types::AssetBundleImportSourceDescription>,
    /// <p>Optional overrides to be applied to the resource configuration before import.</p>
    pub override_parameters: ::std::option::Option<crate::types::AssetBundleImportJobOverrideParameters>,
    /// <p>The failure action for the import job.</p>
    pub failure_action: ::std::option::Option<crate::types::AssetBundleImportFailureAction>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status of the response.</p>
    pub status: i32,
    _request_id: Option<String>,
}
impl DescribeAssetBundleImportJobOutput {
    /// <p>Indicates the status of a job through its queuing and execution.</p>
    /// <p>Poll the <code>DescribeAssetBundleImport</code> API until <code>JobStatus</code> returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_COMPLETED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_ERROR</code> </p> </li>
    /// </ul>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::AssetBundleImportJobStatus> {
        self.job_status.as_ref()
    }
    /// <p>An array of error records that describes any failures that occurred during the export job processing.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::AssetBundleImportJobError] {
        self.errors.as_deref().unwrap_or_default()
    }
    /// <p>An array of error records that describes any failures that occurred while an import job was attempting a rollback.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rollback_errors.is_none()`.
    pub fn rollback_errors(&self) -> &[crate::types::AssetBundleImportJobError] {
        self.rollback_errors.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) for the import job.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time that the import job was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.</p>
    pub fn asset_bundle_import_job_id(&self) -> ::std::option::Option<&str> {
        self.asset_bundle_import_job_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account the import job was executed in. </p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The source of the asset bundle zip file that contains the data that is imported by the job.</p>
    pub fn asset_bundle_import_source(&self) -> ::std::option::Option<&crate::types::AssetBundleImportSourceDescription> {
        self.asset_bundle_import_source.as_ref()
    }
    /// <p>Optional overrides to be applied to the resource configuration before import.</p>
    pub fn override_parameters(&self) -> ::std::option::Option<&crate::types::AssetBundleImportJobOverrideParameters> {
        self.override_parameters.as_ref()
    }
    /// <p>The failure action for the import job.</p>
    pub fn failure_action(&self) -> ::std::option::Option<&crate::types::AssetBundleImportFailureAction> {
        self.failure_action.as_ref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the response.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl ::aws_http::request_id::RequestId for DescribeAssetBundleImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAssetBundleImportJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssetBundleImportJobOutput`](crate::operation::describe_asset_bundle_import_job::DescribeAssetBundleImportJobOutput).
    pub fn builder() -> crate::operation::describe_asset_bundle_import_job::builders::DescribeAssetBundleImportJobOutputBuilder {
        crate::operation::describe_asset_bundle_import_job::builders::DescribeAssetBundleImportJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeAssetBundleImportJobOutput`](crate::operation::describe_asset_bundle_import_job::DescribeAssetBundleImportJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAssetBundleImportJobOutputBuilder {
    pub(crate) job_status: ::std::option::Option<crate::types::AssetBundleImportJobStatus>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>,
    pub(crate) rollback_errors: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) asset_bundle_import_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_bundle_import_source: ::std::option::Option<crate::types::AssetBundleImportSourceDescription>,
    pub(crate) override_parameters: ::std::option::Option<crate::types::AssetBundleImportJobOverrideParameters>,
    pub(crate) failure_action: ::std::option::Option<crate::types::AssetBundleImportFailureAction>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeAssetBundleImportJobOutputBuilder {
    /// <p>Indicates the status of a job through its queuing and execution.</p>
    /// <p>Poll the <code>DescribeAssetBundleImport</code> API until <code>JobStatus</code> returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_COMPLETED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_ERROR</code> </p> </li>
    /// </ul>
    pub fn job_status(mut self, input: crate::types::AssetBundleImportJobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of a job through its queuing and execution.</p>
    /// <p>Poll the <code>DescribeAssetBundleImport</code> API until <code>JobStatus</code> returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_COMPLETED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_ERROR</code> </p> </li>
    /// </ul>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::AssetBundleImportJobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>Indicates the status of a job through its queuing and execution.</p>
    /// <p>Poll the <code>DescribeAssetBundleImport</code> API until <code>JobStatus</code> returns one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>FAILED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_COMPLETED</code> </p> </li>
    /// <li> <p> <code>FAILED_ROLLBACK_ERROR</code> </p> </li>
    /// </ul>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::AssetBundleImportJobStatus> {
        &self.job_status
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>An array of error records that describes any failures that occurred during the export job processing.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn errors(mut self, input: crate::types::AssetBundleImportJobError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of error records that describes any failures that occurred during the export job processing.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>An array of error records that describes any failures that occurred during the export job processing.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>> {
        &self.errors
    }
    /// Appends an item to `rollback_errors`.
    ///
    /// To override the contents of this collection use [`set_rollback_errors`](Self::set_rollback_errors).
    ///
    /// <p>An array of error records that describes any failures that occurred while an import job was attempting a rollback.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn rollback_errors(mut self, input: crate::types::AssetBundleImportJobError) -> Self {
        let mut v = self.rollback_errors.unwrap_or_default();
        v.push(input);
        self.rollback_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of error records that describes any failures that occurred while an import job was attempting a rollback.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn set_rollback_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>>) -> Self {
        self.rollback_errors = input;
        self
    }
    /// <p>An array of error records that describes any failures that occurred while an import job was attempting a rollback.</p>
    /// <p>Error records accumulate while the job is still running. The complete set of error records is available after the job has completed and failed.</p>
    pub fn get_rollback_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetBundleImportJobError>> {
        &self.rollback_errors
    }
    /// <p>The Amazon Resource Name (ARN) for the import job.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the import job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the import job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time that the import job was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the import job was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the import job was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.</p>
    pub fn asset_bundle_import_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_bundle_import_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.</p>
    pub fn set_asset_bundle_import_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_bundle_import_job_id = input;
        self
    }
    /// <p>The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.</p>
    pub fn get_asset_bundle_import_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_bundle_import_job_id
    }
    /// <p>The ID of the Amazon Web Services account the import job was executed in. </p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account the import job was executed in. </p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account the import job was executed in. </p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The source of the asset bundle zip file that contains the data that is imported by the job.</p>
    pub fn asset_bundle_import_source(mut self, input: crate::types::AssetBundleImportSourceDescription) -> Self {
        self.asset_bundle_import_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the asset bundle zip file that contains the data that is imported by the job.</p>
    pub fn set_asset_bundle_import_source(mut self, input: ::std::option::Option<crate::types::AssetBundleImportSourceDescription>) -> Self {
        self.asset_bundle_import_source = input;
        self
    }
    /// <p>The source of the asset bundle zip file that contains the data that is imported by the job.</p>
    pub fn get_asset_bundle_import_source(&self) -> &::std::option::Option<crate::types::AssetBundleImportSourceDescription> {
        &self.asset_bundle_import_source
    }
    /// <p>Optional overrides to be applied to the resource configuration before import.</p>
    pub fn override_parameters(mut self, input: crate::types::AssetBundleImportJobOverrideParameters) -> Self {
        self.override_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional overrides to be applied to the resource configuration before import.</p>
    pub fn set_override_parameters(mut self, input: ::std::option::Option<crate::types::AssetBundleImportJobOverrideParameters>) -> Self {
        self.override_parameters = input;
        self
    }
    /// <p>Optional overrides to be applied to the resource configuration before import.</p>
    pub fn get_override_parameters(&self) -> &::std::option::Option<crate::types::AssetBundleImportJobOverrideParameters> {
        &self.override_parameters
    }
    /// <p>The failure action for the import job.</p>
    pub fn failure_action(mut self, input: crate::types::AssetBundleImportFailureAction) -> Self {
        self.failure_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure action for the import job.</p>
    pub fn set_failure_action(mut self, input: ::std::option::Option<crate::types::AssetBundleImportFailureAction>) -> Self {
        self.failure_action = input;
        self
    }
    /// <p>The failure action for the import job.</p>
    pub fn get_failure_action(&self) -> &::std::option::Option<crate::types::AssetBundleImportFailureAction> {
        &self.failure_action
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status of the response.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the response.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the response.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAssetBundleImportJobOutput`](crate::operation::describe_asset_bundle_import_job::DescribeAssetBundleImportJobOutput).
    pub fn build(self) -> crate::operation::describe_asset_bundle_import_job::DescribeAssetBundleImportJobOutput {
        crate::operation::describe_asset_bundle_import_job::DescribeAssetBundleImportJobOutput {
            job_status: self.job_status,
            errors: self.errors,
            rollback_errors: self.rollback_errors,
            arn: self.arn,
            created_time: self.created_time,
            asset_bundle_import_job_id: self.asset_bundle_import_job_id,
            aws_account_id: self.aws_account_id,
            asset_bundle_import_source: self.asset_bundle_import_source,
            override_parameters: self.override_parameters,
            failure_action: self.failure_action,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
