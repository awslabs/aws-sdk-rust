// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateActionConnectorInput {
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the action connector to update.</p>
    pub action_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The new name for the action connector.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub authentication_config: ::std::option::Option<crate::types::AuthConfig>,
    /// <p>The updated description of the action connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub vpc_connection_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateActionConnectorInput {
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn action_connector_id(&self) -> ::std::option::Option<&str> {
        self.action_connector_id.as_deref()
    }
    /// <p>The new name for the action connector.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn authentication_config(&self) -> ::std::option::Option<&crate::types::AuthConfig> {
        self.authentication_config.as_ref()
    }
    /// <p>The updated description of the action connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn vpc_connection_arn(&self) -> ::std::option::Option<&str> {
        self.vpc_connection_arn.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateActionConnectorInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateActionConnectorInput");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.finish()
    }
}
impl UpdateActionConnectorInput {
    /// Creates a new builder-style object to manufacture [`UpdateActionConnectorInput`](crate::operation::update_action_connector::UpdateActionConnectorInput).
    pub fn builder() -> crate::operation::update_action_connector::builders::UpdateActionConnectorInputBuilder {
        crate::operation::update_action_connector::builders::UpdateActionConnectorInputBuilder::default()
    }
}

/// A builder for [`UpdateActionConnectorInput`](crate::operation::update_action_connector::UpdateActionConnectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateActionConnectorInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_config: ::std::option::Option<crate::types::AuthConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_connection_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateActionConnectorInputBuilder {
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The unique identifier of the action connector to update.</p>
    /// This field is required.
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_connector_id = input;
        self
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_connector_id
    }
    /// <p>The new name for the action connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the action connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new name for the action connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    /// This field is required.
    pub fn authentication_config(mut self, input: crate::types::AuthConfig) -> Self {
        self.authentication_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn set_authentication_config(mut self, input: ::std::option::Option<crate::types::AuthConfig>) -> Self {
        self.authentication_config = input;
        self
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn get_authentication_config(&self) -> &::std::option::Option<crate::types::AuthConfig> {
        &self.authentication_config
    }
    /// <p>The updated description of the action connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description of the action connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description of the action connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn vpc_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn set_vpc_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_arn = input;
        self
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn get_vpc_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_arn
    }
    /// Consumes the builder and constructs a [`UpdateActionConnectorInput`](crate::operation::update_action_connector::UpdateActionConnectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_action_connector::UpdateActionConnectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_action_connector::UpdateActionConnectorInput {
            aws_account_id: self.aws_account_id,
            action_connector_id: self.action_connector_id,
            name: self.name,
            authentication_config: self.authentication_config,
            description: self.description,
            vpc_connection_arn: self.vpc_connection_arn,
        })
    }
}
impl ::std::fmt::Debug for UpdateActionConnectorInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateActionConnectorInputBuilder");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.finish()
    }
}
