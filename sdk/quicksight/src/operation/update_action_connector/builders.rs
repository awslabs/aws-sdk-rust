// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_action_connector::_update_action_connector_output::UpdateActionConnectorOutputBuilder;

pub use crate::operation::update_action_connector::_update_action_connector_input::UpdateActionConnectorInputBuilder;

impl crate::operation::update_action_connector::builders::UpdateActionConnectorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_action_connector::UpdateActionConnectorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_action_connector::UpdateActionConnectorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_action_connector();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateActionConnector`.
///
/// <p>Updates an existing action connector with new configuration details, authentication settings, or enabled actions. You can modify the connector's name, description, authentication configuration, and which actions are enabled. For more information, <a href="https://docs.aws.amazon.com/quicksuite/latest/userguide/quick-action-auth.html">https://docs.aws.amazon.com/quicksuite/latest/userguide/quick-action-auth.html</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateActionConnectorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_action_connector::builders::UpdateActionConnectorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_action_connector::UpdateActionConnectorOutput,
        crate::operation::update_action_connector::UpdateActionConnectorError,
    > for UpdateActionConnectorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_action_connector::UpdateActionConnectorOutput,
            crate::operation::update_action_connector::UpdateActionConnectorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateActionConnectorFluentBuilder {
    /// Creates a new `UpdateActionConnectorFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateActionConnector as a reference.
    pub fn as_input(&self) -> &crate::operation::update_action_connector::builders::UpdateActionConnectorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_action_connector::UpdateActionConnectorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_action_connector::UpdateActionConnectorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_action_connector::UpdateActionConnector::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_action_connector::UpdateActionConnector::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_action_connector::UpdateActionConnectorOutput,
        crate::operation::update_action_connector::UpdateActionConnectorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID that contains the action connector to update.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.action_connector_id(input.into());
        self
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_action_connector_id(input);
        self
    }
    /// <p>The unique identifier of the action connector to update.</p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_action_connector_id()
    }
    /// <p>The new name for the action connector.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The new name for the action connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The new name for the action connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn authentication_config(mut self, input: crate::types::AuthConfig) -> Self {
        self.inner = self.inner.authentication_config(input);
        self
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn set_authentication_config(mut self, input: ::std::option::Option<crate::types::AuthConfig>) -> Self {
        self.inner = self.inner.set_authentication_config(input);
        self
    }
    /// <p>The updated authentication configuration for connecting to the external service.</p>
    pub fn get_authentication_config(&self) -> &::std::option::Option<crate::types::AuthConfig> {
        self.inner.get_authentication_config()
    }
    /// <p>The updated description of the action connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The updated description of the action connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The updated description of the action connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn vpc_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_connection_arn(input.into());
        self
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn set_vpc_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_connection_arn(input);
        self
    }
    /// <p>The updated ARN of the VPC connection to use for secure connectivity.</p>
    pub fn get_vpc_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vpc_connection_arn()
    }
}
