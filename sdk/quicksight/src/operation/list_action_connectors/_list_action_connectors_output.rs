// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListActionConnectorsOutput {
    /// <p>A list of action connector summaries containing basic information about each connector.</p>
    pub action_connector_summaries: ::std::vec::Vec<crate::types::ActionConnectorSummary>,
    /// <p>A pagination token to retrieve the next set of results. If null, there are no more results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status code of the request.</p>
    pub status: i32,
    _request_id: Option<String>,
}
impl ListActionConnectorsOutput {
    /// <p>A list of action connector summaries containing basic information about each connector.</p>
    pub fn action_connector_summaries(&self) -> &[crate::types::ActionConnectorSummary] {
        use std::ops::Deref;
        self.action_connector_summaries.deref()
    }
    /// <p>A pagination token to retrieve the next set of results. If null, there are no more results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl ::aws_types::request_id::RequestId for ListActionConnectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListActionConnectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListActionConnectorsOutput`](crate::operation::list_action_connectors::ListActionConnectorsOutput).
    pub fn builder() -> crate::operation::list_action_connectors::builders::ListActionConnectorsOutputBuilder {
        crate::operation::list_action_connectors::builders::ListActionConnectorsOutputBuilder::default()
    }
}

/// A builder for [`ListActionConnectorsOutput`](crate::operation::list_action_connectors::ListActionConnectorsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListActionConnectorsOutputBuilder {
    pub(crate) action_connector_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ActionConnectorSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListActionConnectorsOutputBuilder {
    /// Appends an item to `action_connector_summaries`.
    ///
    /// To override the contents of this collection use [`set_action_connector_summaries`](Self::set_action_connector_summaries).
    ///
    /// <p>A list of action connector summaries containing basic information about each connector.</p>
    pub fn action_connector_summaries(mut self, input: crate::types::ActionConnectorSummary) -> Self {
        let mut v = self.action_connector_summaries.unwrap_or_default();
        v.push(input);
        self.action_connector_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of action connector summaries containing basic information about each connector.</p>
    pub fn set_action_connector_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionConnectorSummary>>) -> Self {
        self.action_connector_summaries = input;
        self
    }
    /// <p>A list of action connector summaries containing basic information about each connector.</p>
    pub fn get_action_connector_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionConnectorSummary>> {
        &self.action_connector_summaries
    }
    /// <p>A pagination token to retrieve the next set of results. If null, there are no more results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token to retrieve the next set of results. If null, there are no more results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token to retrieve the next set of results. If null, there are no more results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status code of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListActionConnectorsOutput`](crate::operation::list_action_connectors::ListActionConnectorsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_connector_summaries`](crate::operation::list_action_connectors::builders::ListActionConnectorsOutputBuilder::action_connector_summaries)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_action_connectors::ListActionConnectorsOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_action_connectors::ListActionConnectorsOutput {
            action_connector_summaries: self.action_connector_summaries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_connector_summaries",
                    "action_connector_summaries was not specified but it is required when building ListActionConnectorsOutput",
                )
            })?,
            next_token: self.next_token,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        })
    }
}
