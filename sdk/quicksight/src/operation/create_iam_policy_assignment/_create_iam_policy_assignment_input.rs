// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIamPolicyAssignmentInput {
    /// <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.</p>
    pub assignment_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub assignment_status: ::std::option::Option<crate::types::AssignmentStatus>,
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub identities: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>The namespace that contains the assignment.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
}
impl CreateIamPolicyAssignmentInput {
    /// <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.</p>
    pub fn assignment_name(&self) -> ::std::option::Option<&str> {
        self.assignment_name.as_deref()
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn assignment_status(&self) -> ::std::option::Option<&crate::types::AssignmentStatus> {
        self.assignment_status.as_ref()
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn identities(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.identities.as_ref()
    }
    /// <p>The namespace that contains the assignment.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
}
impl CreateIamPolicyAssignmentInput {
    /// Creates a new builder-style object to manufacture [`CreateIamPolicyAssignmentInput`](crate::operation::create_iam_policy_assignment::CreateIamPolicyAssignmentInput).
    pub fn builder() -> crate::operation::create_iam_policy_assignment::builders::CreateIamPolicyAssignmentInputBuilder {
        crate::operation::create_iam_policy_assignment::builders::CreateIamPolicyAssignmentInputBuilder::default()
    }
}

/// A builder for [`CreateIamPolicyAssignmentInput`](crate::operation::create_iam_policy_assignment::CreateIamPolicyAssignmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateIamPolicyAssignmentInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) assignment_name: ::std::option::Option<::std::string::String>,
    pub(crate) assignment_status: ::std::option::Option<crate::types::AssignmentStatus>,
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) identities: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
}
impl CreateIamPolicyAssignmentInputBuilder {
    /// <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.</p>
    /// This field is required.
    pub fn assignment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assignment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.</p>
    pub fn set_assignment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assignment_name = input;
        self
    }
    /// <p>The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.</p>
    pub fn get_assignment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.assignment_name
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn assignment_status(mut self, input: crate::types::AssignmentStatus) -> Self {
        self.assignment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn set_assignment_status(mut self, input: ::std::option::Option<crate::types::AssignmentStatus>) -> Self {
        self.assignment_status = input;
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn get_assignment_status(&self) -> &::std::option::Option<crate::types::AssignmentStatus> {
        &self.assignment_status
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// Adds a key-value pair to `identities`.
    ///
    /// To override the contents of this collection use [`set_identities`](Self::set_identities).
    ///
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn identities(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.identities.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.identities = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn set_identities(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.identities = input;
        self
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn get_identities(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.identities
    }
    /// <p>The namespace that contains the assignment.</p>
    /// This field is required.
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace that contains the assignment.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace that contains the assignment.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// Consumes the builder and constructs a [`CreateIamPolicyAssignmentInput`](crate::operation::create_iam_policy_assignment::CreateIamPolicyAssignmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_iam_policy_assignment::CreateIamPolicyAssignmentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_iam_policy_assignment::CreateIamPolicyAssignmentInput {
            aws_account_id: self.aws_account_id,
            assignment_name: self.assignment_name,
            assignment_status: self.assignment_status,
            policy_arn: self.policy_arn,
            identities: self.identities,
            namespace: self.namespace,
        })
    }
}
