// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateActionConnectorInput {
    /// <p>The Amazon Web Services account ID associated with the action connector.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the action connector. This ID must be unique within the Amazon Web Services account. The <code>ActionConnectorId</code> must not start with the prefix <code>quicksuite-</code></p>
    pub action_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>A descriptive name for the action connector.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of action connector.</p>
    pub r#type: ::std::option::Option<crate::types::ActionConnectorType>,
    /// <p>The authentication configuration for connecting to the external service. This includes the authentication type, base URL, and authentication metadata such as client credentials or API keys.</p>
    pub authentication_config: ::std::option::Option<crate::types::AuthConfig>,
    /// <p>An optional description of the action connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The permissions configuration that defines which users, groups, or namespaces can access this action connector and what operations they can perform.</p>
    pub permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    /// <p>The ARN of the VPC connection to use for secure connectivity to the external service.</p>
    pub vpc_connection_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags to apply to the action connector for resource management and organization.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateActionConnectorInput {
    /// <p>The Amazon Web Services account ID associated with the action connector.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>A unique identifier for the action connector. This ID must be unique within the Amazon Web Services account. The <code>ActionConnectorId</code> must not start with the prefix <code>quicksuite-</code></p>
    pub fn action_connector_id(&self) -> ::std::option::Option<&str> {
        self.action_connector_id.as_deref()
    }
    /// <p>A descriptive name for the action connector.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of action connector.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ActionConnectorType> {
        self.r#type.as_ref()
    }
    /// <p>The authentication configuration for connecting to the external service. This includes the authentication type, base URL, and authentication metadata such as client credentials or API keys.</p>
    pub fn authentication_config(&self) -> ::std::option::Option<&crate::types::AuthConfig> {
        self.authentication_config.as_ref()
    }
    /// <p>An optional description of the action connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The permissions configuration that defines which users, groups, or namespaces can access this action connector and what operations they can perform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.permissions.is_none()`.
    pub fn permissions(&self) -> &[crate::types::ResourcePermission] {
        self.permissions.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the VPC connection to use for secure connectivity to the external service.</p>
    pub fn vpc_connection_arn(&self) -> ::std::option::Option<&str> {
        self.vpc_connection_arn.as_deref()
    }
    /// <p>A list of tags to apply to the action connector for resource management and organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateActionConnectorInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateActionConnectorInput");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("permissions", &self.permissions);
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateActionConnectorInput {
    /// Creates a new builder-style object to manufacture [`CreateActionConnectorInput`](crate::operation::create_action_connector::CreateActionConnectorInput).
    pub fn builder() -> crate::operation::create_action_connector::builders::CreateActionConnectorInputBuilder {
        crate::operation::create_action_connector::builders::CreateActionConnectorInputBuilder::default()
    }
}

/// A builder for [`CreateActionConnectorInput`](crate::operation::create_action_connector::CreateActionConnectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateActionConnectorInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ActionConnectorType>,
    pub(crate) authentication_config: ::std::option::Option<crate::types::AuthConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) permissions: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>,
    pub(crate) vpc_connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateActionConnectorInputBuilder {
    /// <p>The Amazon Web Services account ID associated with the action connector.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the action connector.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the action connector.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>A unique identifier for the action connector. This ID must be unique within the Amazon Web Services account. The <code>ActionConnectorId</code> must not start with the prefix <code>quicksuite-</code></p>
    /// This field is required.
    pub fn action_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the action connector. This ID must be unique within the Amazon Web Services account. The <code>ActionConnectorId</code> must not start with the prefix <code>quicksuite-</code></p>
    pub fn set_action_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_connector_id = input;
        self
    }
    /// <p>A unique identifier for the action connector. This ID must be unique within the Amazon Web Services account. The <code>ActionConnectorId</code> must not start with the prefix <code>quicksuite-</code></p>
    pub fn get_action_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_connector_id
    }
    /// <p>A descriptive name for the action connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive name for the action connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive name for the action connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of action connector.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ActionConnectorType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action connector.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ActionConnectorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of action connector.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ActionConnectorType> {
        &self.r#type
    }
    /// <p>The authentication configuration for connecting to the external service. This includes the authentication type, base URL, and authentication metadata such as client credentials or API keys.</p>
    /// This field is required.
    pub fn authentication_config(mut self, input: crate::types::AuthConfig) -> Self {
        self.authentication_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration for connecting to the external service. This includes the authentication type, base URL, and authentication metadata such as client credentials or API keys.</p>
    pub fn set_authentication_config(mut self, input: ::std::option::Option<crate::types::AuthConfig>) -> Self {
        self.authentication_config = input;
        self
    }
    /// <p>The authentication configuration for connecting to the external service. This includes the authentication type, base URL, and authentication metadata such as client credentials or API keys.</p>
    pub fn get_authentication_config(&self) -> &::std::option::Option<crate::types::AuthConfig> {
        &self.authentication_config
    }
    /// <p>An optional description of the action connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description of the action connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description of the action connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The permissions configuration that defines which users, groups, or namespaces can access this action connector and what operations they can perform.</p>
    pub fn permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The permissions configuration that defines which users, groups, or namespaces can access this action connector and what operations they can perform.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The permissions configuration that defines which users, groups, or namespaces can access this action connector and what operations they can perform.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>> {
        &self.permissions
    }
    /// <p>The ARN of the VPC connection to use for secure connectivity to the external service.</p>
    pub fn vpc_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the VPC connection to use for secure connectivity to the external service.</p>
    pub fn set_vpc_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_arn = input;
        self
    }
    /// <p>The ARN of the VPC connection to use for secure connectivity to the external service.</p>
    pub fn get_vpc_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to apply to the action connector for resource management and organization.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to apply to the action connector for resource management and organization.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to apply to the action connector for resource management and organization.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateActionConnectorInput`](crate::operation::create_action_connector::CreateActionConnectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_action_connector::CreateActionConnectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_action_connector::CreateActionConnectorInput {
            aws_account_id: self.aws_account_id,
            action_connector_id: self.action_connector_id,
            name: self.name,
            r#type: self.r#type,
            authentication_config: self.authentication_config,
            description: self.description,
            permissions: self.permissions,
            vpc_connection_arn: self.vpc_connection_arn,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateActionConnectorInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateActionConnectorInputBuilder");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("action_connector_id", &self.action_connector_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("authentication_config", &self.authentication_config);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("permissions", &self.permissions);
        formatter.field("vpc_connection_arn", &self.vpc_connection_arn);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
