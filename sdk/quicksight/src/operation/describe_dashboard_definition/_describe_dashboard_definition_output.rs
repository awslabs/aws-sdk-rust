// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDashboardDefinitionOutput {
    /// <p>The ID of the dashboard described.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>Errors associated with this dashboard version.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::DashboardError>>,
    /// <p>The display name of the dashboard.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Status associated with the dashboard version.</p>
    /// <ul>
    /// <li> <p> <code>CREATION_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATION_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>UPDATE_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>UPDATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resource_status: std::option::Option<crate::types::ResourceStatus>,
    /// <p>The ARN of the theme of the dashboard.</p>
    #[doc(hidden)]
    pub theme_arn: std::option::Option<std::string::String>,
    /// <p>The definition of a dashboard.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<crate::types::DashboardVersionDefinition>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDashboardDefinitionOutput {
    /// <p>The ID of the dashboard described.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>Errors associated with this dashboard version.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::DashboardError]> {
        self.errors.as_deref()
    }
    /// <p>The display name of the dashboard.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Status associated with the dashboard version.</p>
    /// <ul>
    /// <li> <p> <code>CREATION_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATION_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>UPDATE_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>UPDATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETED</code> </p> </li>
    /// </ul>
    pub fn resource_status(&self) -> std::option::Option<&crate::types::ResourceStatus> {
        self.resource_status.as_ref()
    }
    /// <p>The ARN of the theme of the dashboard.</p>
    pub fn theme_arn(&self) -> std::option::Option<&str> {
        self.theme_arn.as_deref()
    }
    /// <p>The definition of a dashboard.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    pub fn definition(&self) -> std::option::Option<&crate::types::DashboardVersionDefinition> {
        self.definition.as_ref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDashboardDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDashboardDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardDefinitionOutput`](crate::operation::describe_dashboard_definition::DescribeDashboardDefinitionOutput).
    pub fn builder() -> crate::operation::describe_dashboard_definition::builders::DescribeDashboardDefinitionOutputBuilder{
        crate::operation::describe_dashboard_definition::builders::DescribeDashboardDefinitionOutputBuilder::default()
    }
}

/// A builder for [`DescribeDashboardDefinitionOutput`](crate::operation::describe_dashboard_definition::DescribeDashboardDefinitionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDashboardDefinitionOutputBuilder {
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::DashboardError>>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) resource_status: std::option::Option<crate::types::ResourceStatus>,
    pub(crate) theme_arn: std::option::Option<std::string::String>,
    pub(crate) definition: std::option::Option<crate::types::DashboardVersionDefinition>,
    pub(crate) status: std::option::Option<i32>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDashboardDefinitionOutputBuilder {
    /// <p>The ID of the dashboard described.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID of the dashboard described.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Errors associated with this dashboard version.</p>
    pub fn errors(mut self, input: crate::types::DashboardError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>Errors associated with this dashboard version.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DashboardError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// <p>The display name of the dashboard.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The display name of the dashboard.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Status associated with the dashboard version.</p>
    /// <ul>
    /// <li> <p> <code>CREATION_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATION_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>UPDATE_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>UPDATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETED</code> </p> </li>
    /// </ul>
    pub fn resource_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.resource_status = Some(input);
        self
    }
    /// <p>Status associated with the dashboard version.</p>
    /// <ul>
    /// <li> <p> <code>CREATION_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATION_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>CREATION_FAILED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>UPDATE_SUCCESSFUL</code> </p> </li>
    /// <li> <p> <code>UPDATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETED</code> </p> </li>
    /// </ul>
    pub fn set_resource_status(
        mut self,
        input: std::option::Option<crate::types::ResourceStatus>,
    ) -> Self {
        self.resource_status = input;
        self
    }
    /// <p>The ARN of the theme of the dashboard.</p>
    pub fn theme_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.theme_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the theme of the dashboard.</p>
    pub fn set_theme_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.theme_arn = input;
        self
    }
    /// <p>The definition of a dashboard.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    pub fn definition(mut self, input: crate::types::DashboardVersionDefinition) -> Self {
        self.definition = Some(input);
        self
    }
    /// <p>The definition of a dashboard.</p>
    /// <p>A definition is the data model of all features in a Dashboard, Template, or Analysis.</p>
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::DashboardVersionDefinition>,
    ) -> Self {
        self.definition = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDashboardDefinitionOutput`](crate::operation::describe_dashboard_definition::DescribeDashboardDefinitionOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_dashboard_definition::DescribeDashboardDefinitionOutput {
        crate::operation::describe_dashboard_definition::DescribeDashboardDefinitionOutput {
            dashboard_id: self.dashboard_id,
            errors: self.errors,
            name: self.name,
            resource_status: self.resource_status,
            theme_arn: self.theme_arn,
            definition: self.definition,
            status: self.status.unwrap_or_default(),
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
