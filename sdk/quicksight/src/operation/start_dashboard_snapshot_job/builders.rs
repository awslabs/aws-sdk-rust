// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_dashboard_snapshot_job::_start_dashboard_snapshot_job_output::StartDashboardSnapshotJobOutputBuilder;

pub use crate::operation::start_dashboard_snapshot_job::_start_dashboard_snapshot_job_input::StartDashboardSnapshotJobInputBuilder;

impl crate::operation::start_dashboard_snapshot_job::builders::StartDashboardSnapshotJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_dashboard_snapshot_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartDashboardSnapshotJob`.
///
/// <p>Starts an asynchronous job that generates a snapshot of a dashboard's output. You can request one or several of the following format configurations in each API call.</p>
/// <ul>
/// <li>
/// <p>1 Paginated PDF</p></li>
/// <li>
/// <p>1 Excel workbook that includes up to 5 table or pivot table visuals</p></li>
/// <li>
/// <p>5 CSVs from table or pivot table visuals</p></li>
/// </ul>
/// <p>The status of a submitted job can be polled with the <code>DescribeDashboardSnapshotJob</code> API. When you call the <code>DescribeDashboardSnapshotJob</code> API, check the <code>JobStatus</code> field in the response. Once the job reaches a <code>COMPLETED</code> or <code>FAILED</code> status, use the <code>DescribeDashboardSnapshotJobResult</code> API to obtain the URLs for the generated files. If the job fails, the <code>DescribeDashboardSnapshotJobResult</code> API returns detailed information about the error that occurred.</p>
/// <p><b>StartDashboardSnapshotJob API throttling</b></p>
/// <p>Amazon QuickSight utilizes API throttling to create a more consistent user experience within a time span for customers when they call the <code>StartDashboardSnapshotJob</code>. By default, 12 jobs can run simlutaneously in one Amazon Web Services account and users can submit up 10 API requests per second before an account is throttled. If an overwhelming number of API requests are made by the same user in a short period of time, Amazon QuickSight throttles the API calls to maintin an optimal experience and reliability for all Amazon QuickSight users.</p>
/// <p><b>Common throttling scenarios</b></p>
/// <p>The following list provides information about the most commin throttling scenarios that can occur.</p>
/// <ul>
/// <li>
/// <p><b>A large number of <code>SnapshotExport</code> API jobs are running simultaneously on an Amazon Web Services account.</b> When a new <code>StartDashboardSnapshotJob</code> is created and there are already 12 jobs with the <code>RUNNING</code> status, the new job request fails and returns a <code>LimitExceededException</code> error. Wait for a current job to comlpete before you resubmit the new job.</p></li>
/// <li>
/// <p><b>A large number of API requests are submitted on an Amazon Web Services account.</b> When a user makes more than 10 API calls to the Amazon QuickSight API in one second, a <code>ThrottlingException</code> is returned.</p></li>
/// </ul>
/// <p>If your use case requires a higher throttling limit, contact your account admin or <a href="http://aws.amazon.com/contact-us/">Amazon Web ServicesSupport</a> to explore options to tailor a more optimal expereince for your account.</p>
/// <p><b>Best practices to handle throttling</b></p>
/// <p>If your use case projects high levels of API traffic, try to reduce the degree of frequency and parallelism of API calls as much as you can to avoid throttling. You can also perform a timing test to calculate an estimate for the total processing time of your projected load that stays within the throttling limits of the Amazon QuickSight APIs. For example, if your projected traffic is 100 snapshot jobs before 12:00 PM per day, start 12 jobs in parallel and measure the amount of time it takes to proccess all 12 jobs. Once you obtain the result, multiply the duration by 9, for example <code>(12 minutes * 9 = 108 minutes)</code>. Use the new result to determine the latest time at which the jobs need to be started to meet your target deadline.</p>
/// <p>The time that it takes to process a job can be impacted by the following factors:</p>
/// <ul>
/// <li>
/// <p>The dataset type (Direct Query or SPICE).</p></li>
/// <li>
/// <p>The size of the dataset.</p></li>
/// <li>
/// <p>The complexity of the calculated fields that are used in the dashboard.</p></li>
/// <li>
/// <p>The number of visuals that are on a sheet.</p></li>
/// <li>
/// <p>The types of visuals that are on the sheet.</p></li>
/// <li>
/// <p>The number of formats and snapshots that are requested in the job configuration.</p></li>
/// <li>
/// <p>The size of the generated snapshots.</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartDashboardSnapshotJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_dashboard_snapshot_job::builders::StartDashboardSnapshotJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobOutput,
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobError,
    > for StartDashboardSnapshotJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobOutput,
            crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartDashboardSnapshotJobFluentBuilder {
    /// Creates a new `StartDashboardSnapshotJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartDashboardSnapshotJob as a reference.
    pub fn as_input(&self) -> &crate::operation::start_dashboard_snapshot_job::builders::StartDashboardSnapshotJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobOutput,
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for.</p>
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dashboard_id(input.into());
        self
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for.</p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dashboard_id(input);
        self
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for.</p>
    pub fn get_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_dashboard_id()
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn snapshot_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.snapshot_job_id(input.into());
        self
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn set_snapshot_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_snapshot_job_id(input);
        self
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn get_snapshot_job_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_snapshot_job_id()
    }
    /// <p>A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn user_configuration(mut self, input: crate::types::SnapshotUserConfiguration) -> Self {
        self.inner = self.inner.user_configuration(input);
        self
    }
    /// <p>A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn set_user_configuration(mut self, input: ::std::option::Option<crate::types::SnapshotUserConfiguration>) -> Self {
        self.inner = self.inner.set_user_configuration(input);
        self
    }
    /// <p>A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn get_user_configuration(&self) -> &::std::option::Option<crate::types::SnapshotUserConfiguration> {
        self.inner.get_user_configuration()
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn snapshot_configuration(mut self, input: crate::types::SnapshotConfiguration) -> Self {
        self.inner = self.inner.snapshot_configuration(input);
        self
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn set_snapshot_configuration(mut self, input: ::std::option::Option<crate::types::SnapshotConfiguration>) -> Self {
        self.inner = self.inner.set_snapshot_configuration(input);
        self
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn get_snapshot_configuration(&self) -> &::std::option::Option<crate::types::SnapshotConfiguration> {
        self.inner.get_snapshot_configuration()
    }
}
