// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDashboardSnapshotJobInput {
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the dashboard that you want to start a snapshot job for. </p>
    pub dashboard_id: ::std::option::Option<::std::string::String>,
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub snapshot_job_id: ::std::option::Option<::std::string::String>,
    /// <p> A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub user_configuration: ::std::option::Option<crate::types::SnapshotUserConfiguration>,
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub snapshot_configuration: ::std::option::Option<crate::types::SnapshotConfiguration>,
}
impl StartDashboardSnapshotJobInput {
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for. </p>
    pub fn dashboard_id(&self) -> ::std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn snapshot_job_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_job_id.as_deref()
    }
    /// <p> A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn user_configuration(&self) -> ::std::option::Option<&crate::types::SnapshotUserConfiguration> {
        self.user_configuration.as_ref()
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn snapshot_configuration(&self) -> ::std::option::Option<&crate::types::SnapshotConfiguration> {
        self.snapshot_configuration.as_ref()
    }
}
impl StartDashboardSnapshotJobInput {
    /// Creates a new builder-style object to manufacture [`StartDashboardSnapshotJobInput`](crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobInput).
    pub fn builder() -> crate::operation::start_dashboard_snapshot_job::builders::StartDashboardSnapshotJobInputBuilder {
        crate::operation::start_dashboard_snapshot_job::builders::StartDashboardSnapshotJobInputBuilder::default()
    }
}

/// A builder for [`StartDashboardSnapshotJobInput`](crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDashboardSnapshotJobInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_id: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_configuration: ::std::option::Option<crate::types::SnapshotUserConfiguration>,
    pub(crate) snapshot_configuration: ::std::option::Option<crate::types::SnapshotConfiguration>,
}
impl StartDashboardSnapshotJobInputBuilder {
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for. </p>
    /// This field is required.
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for. </p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The ID of the dashboard that you want to start a snapshot job for. </p>
    pub fn get_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_id
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    /// This field is required.
    pub fn snapshot_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn set_snapshot_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_job_id = input;
        self
    }
    /// <p>An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.</p>
    pub fn get_snapshot_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_job_id
    }
    /// <p> A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    /// This field is required.
    pub fn user_configuration(mut self, input: crate::types::SnapshotUserConfiguration) -> Self {
        self.user_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn set_user_configuration(mut self, input: ::std::option::Option<crate::types::SnapshotUserConfiguration>) -> Self {
        self.user_configuration = input;
        self
    }
    /// <p> A structure that contains information about the anonymous users that the generated snapshot is for. This API will not return information about registered Amazon QuickSight.</p>
    pub fn get_user_configuration(&self) -> &::std::option::Option<crate::types::SnapshotUserConfiguration> {
        &self.user_configuration
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    /// This field is required.
    pub fn snapshot_configuration(mut self, input: crate::types::SnapshotConfiguration) -> Self {
        self.snapshot_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn set_snapshot_configuration(mut self, input: ::std::option::Option<crate::types::SnapshotConfiguration>) -> Self {
        self.snapshot_configuration = input;
        self
    }
    /// <p>A structure that describes the configuration of the dashboard snapshot.</p>
    pub fn get_snapshot_configuration(&self) -> &::std::option::Option<crate::types::SnapshotConfiguration> {
        &self.snapshot_configuration
    }
    /// Consumes the builder and constructs a [`StartDashboardSnapshotJobInput`](crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_dashboard_snapshot_job::StartDashboardSnapshotJobInput {
            aws_account_id: self.aws_account_id,
            dashboard_id: self.dashboard_id,
            snapshot_job_id: self.snapshot_job_id,
            user_configuration: self.user_configuration,
            snapshot_configuration: self.snapshot_configuration,
        })
    }
}
