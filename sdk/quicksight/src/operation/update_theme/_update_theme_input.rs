// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateThemeInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're updating.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The ID for the theme.</p>
    #[doc(hidden)]
    pub theme_id: std::option::Option<std::string::String>,
    /// <p>The name for the theme.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    #[doc(hidden)]
    pub base_theme_id: std::option::Option<std::string::String>,
    /// <p>A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.</p>
    #[doc(hidden)]
    pub version_description: std::option::Option<std::string::String>,
    /// <p>The theme configuration, which contains the theme display properties.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::types::ThemeConfiguration>,
}
impl UpdateThemeInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're updating.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID for the theme.</p>
    pub fn theme_id(&self) -> std::option::Option<&str> {
        self.theme_id.as_deref()
    }
    /// <p>The name for the theme.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn base_theme_id(&self) -> std::option::Option<&str> {
        self.base_theme_id.as_deref()
    }
    /// <p>A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.</p>
    pub fn version_description(&self) -> std::option::Option<&str> {
        self.version_description.as_deref()
    }
    /// <p>The theme configuration, which contains the theme display properties.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::types::ThemeConfiguration> {
        self.configuration.as_ref()
    }
}
impl UpdateThemeInput {
    /// Creates a new builder-style object to manufacture [`UpdateThemeInput`](crate::operation::update_theme::UpdateThemeInput).
    pub fn builder() -> crate::operation::update_theme::builders::UpdateThemeInputBuilder {
        crate::operation::update_theme::builders::UpdateThemeInputBuilder::default()
    }
}

/// A builder for [`UpdateThemeInput`](crate::operation::update_theme::UpdateThemeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateThemeInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) theme_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) base_theme_id: std::option::Option<std::string::String>,
    pub(crate) version_description: std::option::Option<std::string::String>,
    pub(crate) configuration: std::option::Option<crate::types::ThemeConfiguration>,
}
impl UpdateThemeInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're updating.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're updating.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID for the theme.</p>
    pub fn theme_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.theme_id = Some(input.into());
        self
    }
    /// <p>The ID for the theme.</p>
    pub fn set_theme_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.theme_id = input;
        self
    }
    /// <p>The name for the theme.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name for the theme.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn base_theme_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_theme_id = Some(input.into());
        self
    }
    /// <p>The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.</p>
    pub fn set_base_theme_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_theme_id = input;
        self
    }
    /// <p>A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.</p>
    pub fn version_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_description = Some(input.into());
        self
    }
    /// <p>A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.</p>
    pub fn set_version_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.version_description = input;
        self
    }
    /// <p>The theme configuration, which contains the theme display properties.</p>
    pub fn configuration(mut self, input: crate::types::ThemeConfiguration) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The theme configuration, which contains the theme display properties.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ThemeConfiguration>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateThemeInput`](crate::operation::update_theme::UpdateThemeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_theme::UpdateThemeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_theme::UpdateThemeInput {
            aws_account_id: self.aws_account_id,
            theme_id: self.theme_id,
            name: self.name,
            base_theme_id: self.base_theme_id,
            version_description: self.version_description,
            configuration: self.configuration,
        })
    }
}
