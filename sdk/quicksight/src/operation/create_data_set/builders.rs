// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_data_set::_create_data_set_output::CreateDataSetOutputBuilder;

pub use crate::operation::create_data_set::_create_data_set_input::CreateDataSetInputBuilder;

impl crate::operation::create_data_set::builders::CreateDataSetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_data_set::CreateDataSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_set::CreateDataSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_data_set();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDataSet`.
///
/// <p>Creates a dataset. This operation doesn't support datasets that include uploaded files as a source.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDataSetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_data_set::builders::CreateDataSetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_data_set::CreateDataSetOutput,
        crate::operation::create_data_set::CreateDataSetError,
    > for CreateDataSetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_data_set::CreateDataSetOutput,
            crate::operation::create_data_set::CreateDataSetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDataSetFluentBuilder {
    /// Creates a new `CreateDataSet`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDataSet as a reference.
    pub fn as_input(&self) -> &crate::operation::create_data_set::builders::CreateDataSetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_set::CreateDataSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_set::CreateDataSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_data_set::CreateDataSet::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_data_set::CreateDataSet::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_data_set::CreateDataSetOutput,
        crate::operation::create_data_set::CreateDataSetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.data_set_id(input.into());
        self
    }
    /// <p>An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_data_set_id(input);
        self
    }
    /// <p>An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_data_set_id()
    }
    /// <p>The display name for the dataset.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The display name for the dataset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The display name for the dataset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    ///
    /// Adds a key-value pair to `PhysicalTableMap`.
    ///
    /// To override the contents of this collection use [`set_physical_table_map`](Self::set_physical_table_map).
    ///
    /// <p>Declares the physical tables that are available in the underlying data sources.</p>
    pub fn physical_table_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::PhysicalTable) -> Self {
        self.inner = self.inner.physical_table_map(k.into(), v);
        self
    }
    /// <p>Declares the physical tables that are available in the underlying data sources.</p>
    pub fn set_physical_table_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PhysicalTable>>,
    ) -> Self {
        self.inner = self.inner.set_physical_table_map(input);
        self
    }
    /// <p>Declares the physical tables that are available in the underlying data sources.</p>
    pub fn get_physical_table_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::PhysicalTable>> {
        self.inner.get_physical_table_map()
    }
    ///
    /// Adds a key-value pair to `LogicalTableMap`.
    ///
    /// To override the contents of this collection use [`set_logical_table_map`](Self::set_logical_table_map).
    ///
    /// <p>Configures the combination and transformation of the data from the physical tables.</p>
    pub fn logical_table_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::LogicalTable) -> Self {
        self.inner = self.inner.logical_table_map(k.into(), v);
        self
    }
    /// <p>Configures the combination and transformation of the data from the physical tables.</p>
    pub fn set_logical_table_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LogicalTable>>,
    ) -> Self {
        self.inner = self.inner.set_logical_table_map(input);
        self
    }
    /// <p>Configures the combination and transformation of the data from the physical tables.</p>
    pub fn get_logical_table_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LogicalTable>> {
        self.inner.get_logical_table_map()
    }
    /// <p>Indicates whether you want to import the data into SPICE.</p>
    pub fn import_mode(mut self, input: crate::types::DataSetImportMode) -> Self {
        self.inner = self.inner.import_mode(input);
        self
    }
    /// <p>Indicates whether you want to import the data into SPICE.</p>
    pub fn set_import_mode(mut self, input: ::std::option::Option<crate::types::DataSetImportMode>) -> Self {
        self.inner = self.inner.set_import_mode(input);
        self
    }
    /// <p>Indicates whether you want to import the data into SPICE.</p>
    pub fn get_import_mode(&self) -> &::std::option::Option<crate::types::DataSetImportMode> {
        self.inner.get_import_mode()
    }
    ///
    /// Appends an item to `ColumnGroups`.
    ///
    /// To override the contents of this collection use [`set_column_groups`](Self::set_column_groups).
    ///
    /// <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
    pub fn column_groups(mut self, input: crate::types::ColumnGroup) -> Self {
        self.inner = self.inner.column_groups(input);
        self
    }
    /// <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
    pub fn set_column_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnGroup>>) -> Self {
        self.inner = self.inner.set_column_groups(input);
        self
    }
    /// <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
    pub fn get_column_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnGroup>> {
        self.inner.get_column_groups()
    }
    ///
    /// Adds a key-value pair to `FieldFolders`.
    ///
    /// To override the contents of this collection use [`set_field_folders`](Self::set_field_folders).
    ///
    /// <p>The folder that contains fields and nested subfolders for your dataset.</p>
    pub fn field_folders(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FieldFolder) -> Self {
        self.inner = self.inner.field_folders(k.into(), v);
        self
    }
    /// <p>The folder that contains fields and nested subfolders for your dataset.</p>
    pub fn set_field_folders(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FieldFolder>>,
    ) -> Self {
        self.inner = self.inner.set_field_folders(input);
        self
    }
    /// <p>The folder that contains fields and nested subfolders for your dataset.</p>
    pub fn get_field_folders(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FieldFolder>> {
        self.inner.get_field_folders()
    }
    ///
    /// Appends an item to `Permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>A list of resource permissions on the dataset.</p>
    pub fn permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        self.inner = self.inner.permissions(input);
        self
    }
    /// <p>A list of resource permissions on the dataset.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>>) -> Self {
        self.inner = self.inner.set_permissions(input);
        self
    }
    /// <p>A list of resource permissions on the dataset.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourcePermission>> {
        self.inner.get_permissions()
    }
    /// <p>The row-level security configuration for the data that you want to create.</p>
    pub fn row_level_permission_data_set(mut self, input: crate::types::RowLevelPermissionDataSet) -> Self {
        self.inner = self.inner.row_level_permission_data_set(input);
        self
    }
    /// <p>The row-level security configuration for the data that you want to create.</p>
    pub fn set_row_level_permission_data_set(mut self, input: ::std::option::Option<crate::types::RowLevelPermissionDataSet>) -> Self {
        self.inner = self.inner.set_row_level_permission_data_set(input);
        self
    }
    /// <p>The row-level security configuration for the data that you want to create.</p>
    pub fn get_row_level_permission_data_set(&self) -> &::std::option::Option<crate::types::RowLevelPermissionDataSet> {
        self.inner.get_row_level_permission_data_set()
    }
    /// <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
    pub fn row_level_permission_tag_configuration(mut self, input: crate::types::RowLevelPermissionTagConfiguration) -> Self {
        self.inner = self.inner.row_level_permission_tag_configuration(input);
        self
    }
    /// <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
    pub fn set_row_level_permission_tag_configuration(
        mut self,
        input: ::std::option::Option<crate::types::RowLevelPermissionTagConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_row_level_permission_tag_configuration(input);
        self
    }
    /// <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
    pub fn get_row_level_permission_tag_configuration(&self) -> &::std::option::Option<crate::types::RowLevelPermissionTagConfiguration> {
        self.inner.get_row_level_permission_tag_configuration()
    }
    ///
    /// Appends an item to `ColumnLevelPermissionRules`.
    ///
    /// To override the contents of this collection use [`set_column_level_permission_rules`](Self::set_column_level_permission_rules).
    ///
    /// <p>A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.</p>
    pub fn column_level_permission_rules(mut self, input: crate::types::ColumnLevelPermissionRule) -> Self {
        self.inner = self.inner.column_level_permission_rules(input);
        self
    }
    /// <p>A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.</p>
    pub fn set_column_level_permission_rules(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnLevelPermissionRule>>,
    ) -> Self {
        self.inner = self.inner.set_column_level_permission_rules(input);
        self
    }
    /// <p>A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.</p>
    pub fn get_column_level_permission_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnLevelPermissionRule>> {
        self.inner.get_column_level_permission_rules()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
    pub fn data_set_usage_configuration(mut self, input: crate::types::DataSetUsageConfiguration) -> Self {
        self.inner = self.inner.data_set_usage_configuration(input);
        self
    }
    /// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
    pub fn set_data_set_usage_configuration(mut self, input: ::std::option::Option<crate::types::DataSetUsageConfiguration>) -> Self {
        self.inner = self.inner.set_data_set_usage_configuration(input);
        self
    }
    /// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
    pub fn get_data_set_usage_configuration(&self) -> &::std::option::Option<crate::types::DataSetUsageConfiguration> {
        self.inner.get_data_set_usage_configuration()
    }
    ///
    /// Appends an item to `DatasetParameters`.
    ///
    /// To override the contents of this collection use [`set_dataset_parameters`](Self::set_dataset_parameters).
    ///
    /// <p>The parameter declarations of the dataset.</p>
    pub fn dataset_parameters(mut self, input: crate::types::DatasetParameter) -> Self {
        self.inner = self.inner.dataset_parameters(input);
        self
    }
    /// <p>The parameter declarations of the dataset.</p>
    pub fn set_dataset_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DatasetParameter>>) -> Self {
        self.inner = self.inner.set_dataset_parameters(input);
        self
    }
    /// <p>The parameter declarations of the dataset.</p>
    pub fn get_dataset_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DatasetParameter>> {
        self.inner.get_dataset_parameters()
    }
    ///
    /// Appends an item to `FolderArns`.
    ///
    /// To override the contents of this collection use [`set_folder_arns`](Self::set_folder_arns).
    ///
    /// <p>When you create the dataset, Amazon QuickSight adds the dataset to these folders.</p>
    pub fn folder_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.folder_arns(input.into());
        self
    }
    /// <p>When you create the dataset, Amazon QuickSight adds the dataset to these folders.</p>
    pub fn set_folder_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_folder_arns(input);
        self
    }
    /// <p>When you create the dataset, Amazon QuickSight adds the dataset to these folders.</p>
    pub fn get_folder_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_folder_arns()
    }
}
