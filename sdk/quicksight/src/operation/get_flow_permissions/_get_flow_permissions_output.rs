// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFlowPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the flow you are getting permissions against.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier of the flow with permissions.</p>
    pub flow_id: ::std::string::String,
    /// <p>A structure that contains the permissions for the flow.</p>
    pub permissions: ::std::vec::Vec<crate::types::Permission>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    _request_id: Option<String>,
}
impl GetFlowPermissionsOutput {
    /// <p>The Amazon Resource Name (ARN) of the flow you are getting permissions against.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier of the flow with permissions.</p>
    pub fn flow_id(&self) -> &str {
        use std::ops::Deref;
        self.flow_id.deref()
    }
    /// <p>A structure that contains the permissions for the flow.</p>
    pub fn permissions(&self) -> &[crate::types::Permission] {
        use std::ops::Deref;
        self.permissions.deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl ::aws_types::request_id::RequestId for GetFlowPermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFlowPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`GetFlowPermissionsOutput`](crate::operation::get_flow_permissions::GetFlowPermissionsOutput).
    pub fn builder() -> crate::operation::get_flow_permissions::builders::GetFlowPermissionsOutputBuilder {
        crate::operation::get_flow_permissions::builders::GetFlowPermissionsOutputBuilder::default()
    }
}

/// A builder for [`GetFlowPermissionsOutput`](crate::operation::get_flow_permissions::GetFlowPermissionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFlowPermissionsOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) flow_id: ::std::option::Option<::std::string::String>,
    pub(crate) permissions: ::std::option::Option<::std::vec::Vec<crate::types::Permission>>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetFlowPermissionsOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the flow you are getting permissions against.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow you are getting permissions against.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow you are getting permissions against.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the flow with permissions.</p>
    /// This field is required.
    pub fn flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the flow with permissions.</p>
    pub fn set_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_id = input;
        self
    }
    /// <p>The unique identifier of the flow with permissions.</p>
    pub fn get_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_id
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>A structure that contains the permissions for the flow.</p>
    pub fn permissions(mut self, input: crate::types::Permission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A structure that contains the permissions for the flow.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Permission>>) -> Self {
        self.permissions = input;
        self
    }
    /// <p>A structure that contains the permissions for the flow.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Permission>> {
        &self.permissions
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFlowPermissionsOutput`](crate::operation::get_flow_permissions::GetFlowPermissionsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_flow_permissions::builders::GetFlowPermissionsOutputBuilder::arn)
    /// - [`flow_id`](crate::operation::get_flow_permissions::builders::GetFlowPermissionsOutputBuilder::flow_id)
    /// - [`permissions`](crate::operation::get_flow_permissions::builders::GetFlowPermissionsOutputBuilder::permissions)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_flow_permissions::GetFlowPermissionsOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_flow_permissions::GetFlowPermissionsOutput {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetFlowPermissionsOutput",
                )
            })?,
            flow_id: self.flow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "flow_id",
                    "flow_id was not specified but it is required when building GetFlowPermissionsOutput",
                )
            })?,
            permissions: self.permissions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "permissions",
                    "permissions was not specified but it is required when building GetFlowPermissionsOutput",
                )
            })?,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        })
    }
}
