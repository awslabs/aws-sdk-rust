// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateThemeAliasInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme alias that you're updating.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The ID for the theme.</p>
    #[doc(hidden)]
    pub theme_id: std::option::Option<std::string::String>,
    /// <p>The name of the theme alias that you want to update.</p>
    #[doc(hidden)]
    pub alias_name: std::option::Option<std::string::String>,
    /// <p>The version number of the theme that the alias should reference.</p>
    #[doc(hidden)]
    pub theme_version_number: std::option::Option<i64>,
}
impl UpdateThemeAliasInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme alias that you're updating.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID for the theme.</p>
    pub fn theme_id(&self) -> std::option::Option<&str> {
        self.theme_id.as_deref()
    }
    /// <p>The name of the theme alias that you want to update.</p>
    pub fn alias_name(&self) -> std::option::Option<&str> {
        self.alias_name.as_deref()
    }
    /// <p>The version number of the theme that the alias should reference.</p>
    pub fn theme_version_number(&self) -> std::option::Option<i64> {
        self.theme_version_number
    }
}
impl UpdateThemeAliasInput {
    /// Creates a new builder-style object to manufacture [`UpdateThemeAliasInput`](crate::operation::update_theme_alias::UpdateThemeAliasInput).
    pub fn builder() -> crate::operation::update_theme_alias::builders::UpdateThemeAliasInputBuilder
    {
        crate::operation::update_theme_alias::builders::UpdateThemeAliasInputBuilder::default()
    }
}

/// A builder for [`UpdateThemeAliasInput`](crate::operation::update_theme_alias::UpdateThemeAliasInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateThemeAliasInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) theme_id: std::option::Option<std::string::String>,
    pub(crate) alias_name: std::option::Option<std::string::String>,
    pub(crate) theme_version_number: std::option::Option<i64>,
}
impl UpdateThemeAliasInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the theme alias that you're updating.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the theme alias that you're updating.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID for the theme.</p>
    pub fn theme_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.theme_id = Some(input.into());
        self
    }
    /// <p>The ID for the theme.</p>
    pub fn set_theme_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.theme_id = input;
        self
    }
    /// <p>The name of the theme alias that you want to update.</p>
    pub fn alias_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias_name = Some(input.into());
        self
    }
    /// <p>The name of the theme alias that you want to update.</p>
    pub fn set_alias_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias_name = input;
        self
    }
    /// <p>The version number of the theme that the alias should reference.</p>
    pub fn theme_version_number(mut self, input: i64) -> Self {
        self.theme_version_number = Some(input);
        self
    }
    /// <p>The version number of the theme that the alias should reference.</p>
    pub fn set_theme_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.theme_version_number = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateThemeAliasInput`](crate::operation::update_theme_alias::UpdateThemeAliasInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_theme_alias::UpdateThemeAliasInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_theme_alias::UpdateThemeAliasInput {
                aws_account_id: self.aws_account_id,
                theme_id: self.theme_id,
                alias_name: self.alias_name,
                theme_version_number: self.theme_version_number,
            },
        )
    }
}
