// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_ingestion::_create_ingestion_output::CreateIngestionOutputBuilder;

pub use crate::operation::create_ingestion::_create_ingestion_input::CreateIngestionInputBuilder;

/// Fluent builder constructing a request to `CreateIngestion`.
///
/// <p>Creates and starts a new SPICE ingestion for a dataset. You can manually refresh datasets in an Enterprise edition account 32 times in a 24-hour period. You can manually refresh datasets in a Standard edition account 8 times in a 24-hour period. Each 24-hour period is measured starting 24 hours before the current date and time.</p>
/// <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using tags?</a> in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateIngestionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_ingestion::builders::CreateIngestionInputBuilder,
}
impl CreateIngestionFluentBuilder {
    /// Creates a new `CreateIngestion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_ingestion::CreateIngestion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_ingestion::CreateIngestionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_ingestion::CreateIngestionOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_ingestion::CreateIngestionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the dataset used in the ingestion.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_set_id(input.into());
        self
    }
    /// <p>The ID of the dataset used in the ingestion.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_data_set_id(input);
        self
    }
    /// <p>An ID for the ingestion.</p>
    pub fn ingestion_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ingestion_id(input.into());
        self
    }
    /// <p>An ID for the ingestion.</p>
    pub fn set_ingestion_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ingestion_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The type of ingestion that you want to create.</p>
    pub fn ingestion_type(mut self, input: crate::types::IngestionType) -> Self {
        self.inner = self.inner.ingestion_type(input);
        self
    }
    /// <p>The type of ingestion that you want to create.</p>
    pub fn set_ingestion_type(
        mut self,
        input: std::option::Option<crate::types::IngestionType>,
    ) -> Self {
        self.inner = self.inner.set_ingestion_type(input);
        self
    }
}
