// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTopicInput {
    /// <p>The ID of the Amazon Web Services account that contains the topic that you want to update.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub topic_id: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the topic that you want to update.</p>
    pub topic: ::std::option::Option<crate::types::TopicDetails>,
}
impl UpdateTopicInput {
    /// <p>The ID of the Amazon Web Services account that contains the topic that you want to update.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn topic_id(&self) -> ::std::option::Option<&str> {
        self.topic_id.as_deref()
    }
    /// <p>The definition of the topic that you want to update.</p>
    pub fn topic(&self) -> ::std::option::Option<&crate::types::TopicDetails> {
        self.topic.as_ref()
    }
}
impl UpdateTopicInput {
    /// Creates a new builder-style object to manufacture [`UpdateTopicInput`](crate::operation::update_topic::UpdateTopicInput).
    pub fn builder() -> crate::operation::update_topic::builders::UpdateTopicInputBuilder {
        crate::operation::update_topic::builders::UpdateTopicInputBuilder::default()
    }
}

/// A builder for [`UpdateTopicInput`](crate::operation::update_topic::UpdateTopicInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTopicInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) topic_id: ::std::option::Option<::std::string::String>,
    pub(crate) topic: ::std::option::Option<crate::types::TopicDetails>,
}
impl UpdateTopicInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the topic that you want to update.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the topic that you want to update.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the topic that you want to update.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    /// This field is required.
    pub fn topic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_topic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_id = input;
        self
    }
    /// <p>The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn get_topic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_id
    }
    /// <p>The definition of the topic that you want to update.</p>
    /// This field is required.
    pub fn topic(mut self, input: crate::types::TopicDetails) -> Self {
        self.topic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the topic that you want to update.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<crate::types::TopicDetails>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The definition of the topic that you want to update.</p>
    pub fn get_topic(&self) -> &::std::option::Option<crate::types::TopicDetails> {
        &self.topic
    }
    /// Consumes the builder and constructs a [`UpdateTopicInput`](crate::operation::update_topic::UpdateTopicInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_topic::UpdateTopicInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_topic::UpdateTopicInput {
            aws_account_id: self.aws_account_id,
            topic_id: self.topic_id,
            topic: self.topic,
        })
    }
}
