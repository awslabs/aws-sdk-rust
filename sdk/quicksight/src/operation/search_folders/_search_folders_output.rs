// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchFoldersOutput {
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
    #[doc(hidden)]
    pub folder_summary_list: std::option::Option<std::vec::Vec<crate::types::FolderSummary>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchFoldersOutput {
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
    pub fn folder_summary_list(&self) -> std::option::Option<&[crate::types::FolderSummary]> {
        self.folder_summary_list.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchFoldersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchFoldersOutput {
    /// Creates a new builder-style object to manufacture [`SearchFoldersOutput`](crate::operation::search_folders::SearchFoldersOutput).
    pub fn builder() -> crate::operation::search_folders::builders::SearchFoldersOutputBuilder {
        crate::operation::search_folders::builders::SearchFoldersOutputBuilder::default()
    }
}

/// A builder for [`SearchFoldersOutput`](crate::operation::search_folders::SearchFoldersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchFoldersOutputBuilder {
    pub(crate) status: std::option::Option<i32>,
    pub(crate) folder_summary_list: std::option::Option<std::vec::Vec<crate::types::FolderSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchFoldersOutputBuilder {
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `folder_summary_list`.
    ///
    /// To override the contents of this collection use [`set_folder_summary_list`](Self::set_folder_summary_list).
    ///
    /// <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
    pub fn folder_summary_list(mut self, input: crate::types::FolderSummary) -> Self {
        let mut v = self.folder_summary_list.unwrap_or_default();
        v.push(input);
        self.folder_summary_list = Some(v);
        self
    }
    /// <p>A structure that contains all of the folders in the Amazon Web Services account. This structure provides basic information about the folders.</p>
    pub fn set_folder_summary_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FolderSummary>>,
    ) -> Self {
        self.folder_summary_list = input;
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchFoldersOutput`](crate::operation::search_folders::SearchFoldersOutput).
    pub fn build(self) -> crate::operation::search_folders::SearchFoldersOutput {
        crate::operation::search_folders::SearchFoldersOutput {
            status: self.status.unwrap_or_default(),
            folder_summary_list: self.folder_summary_list,
            next_token: self.next_token,
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
