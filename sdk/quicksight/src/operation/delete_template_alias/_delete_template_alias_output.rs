// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTemplateAliasOutput {
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>An ID for the template associated with the deletion.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The name for the template alias.</p>
    #[doc(hidden)]
    pub alias_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the template you want to delete.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTemplateAliasOutput {
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>An ID for the template associated with the deletion.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The name for the template alias.</p>
    pub fn alias_name(&self) -> std::option::Option<&str> {
        self.alias_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the template you want to delete.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteTemplateAliasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteTemplateAliasOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTemplateAliasOutput`](crate::operation::delete_template_alias::DeleteTemplateAliasOutput).
    pub fn builder(
    ) -> crate::operation::delete_template_alias::builders::DeleteTemplateAliasOutputBuilder {
        crate::operation::delete_template_alias::builders::DeleteTemplateAliasOutputBuilder::default(
        )
    }
}

/// A builder for [`DeleteTemplateAliasOutput`](crate::operation::delete_template_alias::DeleteTemplateAliasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteTemplateAliasOutputBuilder {
    pub(crate) status: std::option::Option<i32>,
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) alias_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTemplateAliasOutputBuilder {
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>An ID for the template associated with the deletion.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>An ID for the template associated with the deletion.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The name for the template alias.</p>
    pub fn alias_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias_name = Some(input.into());
        self
    }
    /// <p>The name for the template alias.</p>
    pub fn set_alias_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template you want to delete.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the template you want to delete.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteTemplateAliasOutput`](crate::operation::delete_template_alias::DeleteTemplateAliasOutput).
    pub fn build(self) -> crate::operation::delete_template_alias::DeleteTemplateAliasOutput {
        crate::operation::delete_template_alias::DeleteTemplateAliasOutput {
            status: self.status.unwrap_or_default(),
            template_id: self.template_id,
            alias_name: self.alias_name,
            arn: self.arn,
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
