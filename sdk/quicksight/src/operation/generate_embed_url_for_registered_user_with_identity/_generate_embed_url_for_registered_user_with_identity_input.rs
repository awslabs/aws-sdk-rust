// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerateEmbedUrlForRegisteredUserWithIdentityInput {
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The validity of the session in minutes.</p>
    pub session_lifetime_in_minutes: ::std::option::Option<i64>,
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub experience_configuration: ::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GenerateEmbedUrlForRegisteredUserWithIdentityInput {
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn session_lifetime_in_minutes(&self) -> ::std::option::Option<i64> {
        self.session_lifetime_in_minutes
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn experience_configuration(&self) -> ::std::option::Option<&crate::types::RegisteredUserEmbeddingExperienceConfiguration> {
        self.experience_configuration.as_ref()
    }
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_domains.is_none()`.
    pub fn allowed_domains(&self) -> &[::std::string::String] {
        self.allowed_domains.as_deref().unwrap_or_default()
    }
}
impl GenerateEmbedUrlForRegisteredUserWithIdentityInput {
    /// Creates a new builder-style object to manufacture [`GenerateEmbedUrlForRegisteredUserWithIdentityInput`](crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityInput).
    pub fn builder(
    ) -> crate::operation::generate_embed_url_for_registered_user_with_identity::builders::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder
    {
        crate::operation::generate_embed_url_for_registered_user_with_identity::builders::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder::default()
    }
}

/// A builder for [`GenerateEmbedUrlForRegisteredUserWithIdentityInput`](crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_lifetime_in_minutes: ::std::option::Option<i64>,
    pub(crate) experience_configuration: ::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    pub(crate) allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder {
    /// <p>The ID of the Amazon Web Services registered user.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.session_lifetime_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.session_lifetime_in_minutes = input;
        self
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn get_session_lifetime_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.session_lifetime_in_minutes
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    /// This field is required.
    pub fn experience_configuration(mut self, input: crate::types::RegisteredUserEmbeddingExperienceConfiguration) -> Self {
        self.experience_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn set_experience_configuration(
        mut self,
        input: ::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    ) -> Self {
        self.experience_configuration = input;
        self
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn get_experience_configuration(&self) -> &::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration> {
        &self.experience_configuration
    }
    /// Appends an item to `allowed_domains`.
    ///
    /// To override the contents of this collection use [`set_allowed_domains`](Self::set_allowed_domains).
    ///
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn allowed_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_domains.unwrap_or_default();
        v.push(input.into());
        self.allowed_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn set_allowed_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_domains = input;
        self
    }
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn get_allowed_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_domains
    }
    /// Consumes the builder and constructs a [`GenerateEmbedUrlForRegisteredUserWithIdentityInput`](crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityInput {
                aws_account_id: self.aws_account_id,
                session_lifetime_in_minutes: self.session_lifetime_in_minutes,
                experience_configuration: self.experience_configuration,
                allowed_domains: self.allowed_domains,
            },
        )
    }
}
