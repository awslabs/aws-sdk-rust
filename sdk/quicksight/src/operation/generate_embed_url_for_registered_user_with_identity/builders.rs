// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::generate_embed_url_for_registered_user_with_identity::_generate_embed_url_for_registered_user_with_identity_output::GenerateEmbedUrlForRegisteredUserWithIdentityOutputBuilder;

pub use crate::operation::generate_embed_url_for_registered_user_with_identity::_generate_embed_url_for_registered_user_with_identity_input::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder;

impl crate::operation::generate_embed_url_for_registered_user_with_identity::builders::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.generate_embed_url_for_registered_user_with_identity();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GenerateEmbedUrlForRegisteredUserWithIdentity`.
///
/// <p>Generates an embed URL that you can use to embed an Amazon Quick Sight experience in your website. This action can be used for any type of user that is registered in an Amazon Quick Sight account that uses IAM Identity Center for authentication. This API requires <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/trustedidentitypropagation-overview.html#types-identity-enhanced-iam-role-sessions">identity-enhanced IAM Role sessions</a> for the authenticated user that the API call is being made for.</p>
/// <p>This API uses <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/trustedidentitypropagation.html">trusted identity propagation</a> to ensure that an end user is authenticated and receives the embed URL that is specific to that user. The IAM Identity Center application that the user has logged into needs to have <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/trustedidentitypropagation-using-customermanagedapps-specify-trusted-apps.html">trusted Identity Propagation enabled for Amazon Quick Sight</a> with the scope value set to <code>quicksight:read</code>. Before you use this action, make sure that you have configured the relevant Amazon Quick Sight resource and permissions.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GenerateEmbedUrlForRegisteredUserWithIdentityFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::generate_embed_url_for_registered_user_with_identity::builders::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityOutput,
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityError,
    > for GenerateEmbedUrlForRegisteredUserWithIdentityFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityOutput,
            crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GenerateEmbedUrlForRegisteredUserWithIdentityFluentBuilder {
    /// Creates a new `GenerateEmbedUrlForRegisteredUserWithIdentityFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GenerateEmbedUrlForRegisteredUserWithIdentity as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::generate_embed_url_for_registered_user_with_identity::builders::GenerateEmbedUrlForRegisteredUserWithIdentityInputBuilder
    {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentity::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentity::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityOutput,
        crate::operation::generate_embed_url_for_registered_user_with_identity::GenerateEmbedUrlForRegisteredUserWithIdentityError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID of the Amazon Web Services registered user.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.inner = self.inner.session_lifetime_in_minutes(input);
        self
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_session_lifetime_in_minutes(input);
        self
    }
    /// <p>The validity of the session in minutes.</p>
    pub fn get_session_lifetime_in_minutes(&self) -> &::std::option::Option<i64> {
        self.inner.get_session_lifetime_in_minutes()
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn experience_configuration(mut self, input: crate::types::RegisteredUserEmbeddingExperienceConfiguration) -> Self {
        self.inner = self.inner.experience_configuration(input);
        self
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn set_experience_configuration(
        mut self,
        input: ::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_experience_configuration(input);
        self
    }
    /// <p>The type of experience you want to embed. For registered users, you can embed QuickSight dashboards or the Amazon Quick Sight console.</p><note>
    /// <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p>
    /// </note>
    pub fn get_experience_configuration(&self) -> &::std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration> {
        self.inner.get_experience_configuration()
    }
    ///
    /// Appends an item to `AllowedDomains`.
    ///
    /// To override the contents of this collection use [`set_allowed_domains`](Self::set_allowed_domains).
    ///
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn allowed_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.allowed_domains(input.into());
        self
    }
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn set_allowed_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_allowed_domains(input);
        self
    }
    /// <p>A list of domains to be allowed to generate the embed URL.</p>
    pub fn get_allowed_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_allowed_domains()
    }
}
