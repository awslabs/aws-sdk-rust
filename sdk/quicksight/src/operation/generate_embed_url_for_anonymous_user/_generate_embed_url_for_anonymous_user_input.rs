// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GenerateEmbedUrlForAnonymousUserInput {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub session_lifetime_in_minutes: ::std::option::Option<i64>,
    /// <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
    /// <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
    pub session_tags: ::std::option::Option<::std::vec::Vec<crate::types::SessionTag>>,
    /// <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
    pub authorized_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The configuration of the experience that you are embedding.</p>
    pub experience_configuration: ::std::option::Option<crate::types::AnonymousUserEmbeddingExperienceConfiguration>,
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GenerateEmbedUrlForAnonymousUserInput {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn session_lifetime_in_minutes(&self) -> ::std::option::Option<i64> {
        self.session_lifetime_in_minutes
    }
    /// <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
    /// <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.session_tags.is_none()`.
    pub fn session_tags(&self) -> &[crate::types::SessionTag] {
        self.session_tags.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.authorized_resource_arns.is_none()`.
    pub fn authorized_resource_arns(&self) -> &[::std::string::String] {
        self.authorized_resource_arns.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of the experience that you are embedding.</p>
    pub fn experience_configuration(&self) -> ::std::option::Option<&crate::types::AnonymousUserEmbeddingExperienceConfiguration> {
        self.experience_configuration.as_ref()
    }
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_domains.is_none()`.
    pub fn allowed_domains(&self) -> &[::std::string::String] {
        self.allowed_domains.as_deref().unwrap_or_default()
    }
}
impl GenerateEmbedUrlForAnonymousUserInput {
    /// Creates a new builder-style object to manufacture [`GenerateEmbedUrlForAnonymousUserInput`](crate::operation::generate_embed_url_for_anonymous_user::GenerateEmbedUrlForAnonymousUserInput).
    pub fn builder() -> crate::operation::generate_embed_url_for_anonymous_user::builders::GenerateEmbedUrlForAnonymousUserInputBuilder {
        crate::operation::generate_embed_url_for_anonymous_user::builders::GenerateEmbedUrlForAnonymousUserInputBuilder::default()
    }
}

/// A builder for [`GenerateEmbedUrlForAnonymousUserInput`](crate::operation::generate_embed_url_for_anonymous_user::GenerateEmbedUrlForAnonymousUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GenerateEmbedUrlForAnonymousUserInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_lifetime_in_minutes: ::std::option::Option<i64>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) session_tags: ::std::option::Option<::std::vec::Vec<crate::types::SessionTag>>,
    pub(crate) authorized_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) experience_configuration: ::std::option::Option<crate::types::AnonymousUserEmbeddingExperienceConfiguration>,
    pub(crate) allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GenerateEmbedUrlForAnonymousUserInputBuilder {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.session_lifetime_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.session_lifetime_in_minutes = input;
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn get_session_lifetime_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.session_lifetime_in_minutes
    }
    /// <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
    /// This field is required.
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// Appends an item to `session_tags`.
    ///
    /// To override the contents of this collection use [`set_session_tags`](Self::set_session_tags).
    ///
    /// <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
    /// <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn session_tags(mut self, input: crate::types::SessionTag) -> Self {
        let mut v = self.session_tags.unwrap_or_default();
        v.push(input);
        self.session_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
    /// <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn set_session_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SessionTag>>) -> Self {
        self.session_tags = input;
        self
    }
    /// <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p>
    /// <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
    pub fn get_session_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SessionTag>> {
        &self.session_tags
    }
    /// Appends an item to `authorized_resource_arns`.
    ///
    /// To override the contents of this collection use [`set_authorized_resource_arns`](Self::set_authorized_resource_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
    pub fn authorized_resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorized_resource_arns.unwrap_or_default();
        v.push(input.into());
        self.authorized_resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
    pub fn set_authorized_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorized_resource_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.</p>
    pub fn get_authorized_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorized_resource_arns
    }
    /// <p>The configuration of the experience that you are embedding.</p>
    /// This field is required.
    pub fn experience_configuration(mut self, input: crate::types::AnonymousUserEmbeddingExperienceConfiguration) -> Self {
        self.experience_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the experience that you are embedding.</p>
    pub fn set_experience_configuration(mut self, input: ::std::option::Option<crate::types::AnonymousUserEmbeddingExperienceConfiguration>) -> Self {
        self.experience_configuration = input;
        self
    }
    /// <p>The configuration of the experience that you are embedding.</p>
    pub fn get_experience_configuration(&self) -> &::std::option::Option<crate::types::AnonymousUserEmbeddingExperienceConfiguration> {
        &self.experience_configuration
    }
    /// Appends an item to `allowed_domains`.
    ///
    /// To override the contents of this collection use [`set_allowed_domains`](Self::set_allowed_domains).
    ///
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn allowed_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_domains.unwrap_or_default();
        v.push(input.into());
        self.allowed_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn set_allowed_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_domains = input;
        self
    }
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn get_allowed_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_domains
    }
    /// Consumes the builder and constructs a [`GenerateEmbedUrlForAnonymousUserInput`](crate::operation::generate_embed_url_for_anonymous_user::GenerateEmbedUrlForAnonymousUserInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_embed_url_for_anonymous_user::GenerateEmbedUrlForAnonymousUserInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::generate_embed_url_for_anonymous_user::GenerateEmbedUrlForAnonymousUserInput {
                aws_account_id: self.aws_account_id,
                session_lifetime_in_minutes: self.session_lifetime_in_minutes,
                namespace: self.namespace,
                session_tags: self.session_tags,
                authorized_resource_arns: self.authorized_resource_arns,
                experience_configuration: self.experience_configuration,
                allowed_domains: self.allowed_domains,
            },
        )
    }
}
