// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_session_embed_url::_get_session_embed_url_output::GetSessionEmbedUrlOutputBuilder;

pub use crate::operation::get_session_embed_url::_get_session_embed_url_input::GetSessionEmbedUrlInputBuilder;

impl crate::operation::get_session_embed_url::builders::GetSessionEmbedUrlInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_session_embed_url::GetSessionEmbedUrlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_session_embed_url::GetSessionEmbedUrlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_session_embed_url();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetSessionEmbedUrl`.
///
/// <p>Generates a session URL and authorization code that you can use to embed the Amazon Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where you want to provide an authoring portal that allows users to create data sources, datasets, analyses, and dashboards. The users who access an embedded Amazon QuickSight console need belong to the author or admin security cohort. If you want to restrict permissions to some of these features, add a custom permissions profile to the user with the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> API operation. Use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a> </code> API operation to add a new user with a custom permission profile attached. For more information, see the following sections in the <i>Amazon QuickSight User Guide</i>:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedding Analytics</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSessionEmbedUrlFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_session_embed_url::builders::GetSessionEmbedUrlInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_session_embed_url::GetSessionEmbedUrlOutput,
        crate::operation::get_session_embed_url::GetSessionEmbedUrlError,
    > for GetSessionEmbedUrlFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_session_embed_url::GetSessionEmbedUrlOutput,
            crate::operation::get_session_embed_url::GetSessionEmbedUrlError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetSessionEmbedUrlFluentBuilder {
    /// Creates a new `GetSessionEmbedUrl`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetSessionEmbedUrl as a reference.
    pub fn as_input(&self) -> &crate::operation::get_session_embed_url::builders::GetSessionEmbedUrlInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_session_embed_url::GetSessionEmbedUrlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_session_embed_url::GetSessionEmbedUrlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_session_embed_url::GetSessionEmbedUrl::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_session_embed_url::GetSessionEmbedUrl::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_session_embed_url::GetSessionEmbedUrlOutput,
        crate::operation::get_session_embed_url::GetSessionEmbedUrlError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li>
    /// <p><code>/start</code></p></li>
    /// <li>
    /// <p><code>/start/analyses</code></p></li>
    /// <li>
    /// <p><code>/start/dashboards</code></p></li>
    /// <li>
    /// <p><code>/start/favorites</code></p></li>
    /// <li>
    /// <p><code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p></li>
    /// <li>
    /// <p><code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p></li>
    /// </ul>
    pub fn entry_point(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entry_point(input.into());
        self
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li>
    /// <p><code>/start</code></p></li>
    /// <li>
    /// <p><code>/start/analyses</code></p></li>
    /// <li>
    /// <p><code>/start/dashboards</code></p></li>
    /// <li>
    /// <p><code>/start/favorites</code></p></li>
    /// <li>
    /// <p><code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p></li>
    /// <li>
    /// <p><code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p></li>
    /// </ul>
    pub fn set_entry_point(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entry_point(input);
        self
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li>
    /// <p><code>/start</code></p></li>
    /// <li>
    /// <p><code>/start/analyses</code></p></li>
    /// <li>
    /// <p><code>/start/dashboards</code></p></li>
    /// <li>
    /// <p><code>/start/favorites</code></p></li>
    /// <li>
    /// <p><code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p></li>
    /// <li>
    /// <p><code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p></li>
    /// </ul>
    pub fn get_entry_point(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entry_point()
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.inner = self.inner.session_lifetime_in_minutes(input);
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_session_lifetime_in_minutes(input);
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn get_session_lifetime_in_minutes(&self) -> &::std::option::Option<i64> {
        self.inner.get_session_lifetime_in_minutes()
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li>
    /// <p>Active Directory (AD) users or group members</p></li>
    /// <li>
    /// <p>Invited nonfederated users</p></li>
    /// <li>
    /// <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p></li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_arn(input.into());
        self
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li>
    /// <p>Active Directory (AD) users or group members</p></li>
    /// <li>
    /// <p>Invited nonfederated users</p></li>
    /// <li>
    /// <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p></li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn set_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_arn(input);
        self
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li>
    /// <p>Active Directory (AD) users or group members</p></li>
    /// <li>
    /// <p>Invited nonfederated users</p></li>
    /// <li>
    /// <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p></li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn get_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_arn()
    }
}
