// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSessionEmbedUrlInput {
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p> </li>
    /// <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub entry_point: std::option::Option<std::string::String>,
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    #[doc(hidden)]
    pub session_lifetime_in_minutes: std::option::Option<i64>,
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li> <p>Active Directory (AD) users or group members</p> </li>
    /// <li> <p>Invited nonfederated users</p> </li>
    /// <li> <p>Identity and Access Management (IAM) users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
}
impl GetSessionEmbedUrlInput {
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p> </li>
    /// <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p> </li>
    /// </ul>
    pub fn entry_point(&self) -> std::option::Option<&str> {
        self.entry_point.as_deref()
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn session_lifetime_in_minutes(&self) -> std::option::Option<i64> {
        self.session_lifetime_in_minutes
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li> <p>Active Directory (AD) users or group members</p> </li>
    /// <li> <p>Invited nonfederated users</p> </li>
    /// <li> <p>Identity and Access Management (IAM) users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
}
impl GetSessionEmbedUrlInput {
    /// Creates a new builder-style object to manufacture [`GetSessionEmbedUrlInput`](crate::operation::get_session_embed_url::GetSessionEmbedUrlInput).
    pub fn builder(
    ) -> crate::operation::get_session_embed_url::builders::GetSessionEmbedUrlInputBuilder {
        crate::operation::get_session_embed_url::builders::GetSessionEmbedUrlInputBuilder::default()
    }
}

/// A builder for [`GetSessionEmbedUrlInput`](crate::operation::get_session_embed_url::GetSessionEmbedUrlInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSessionEmbedUrlInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) entry_point: std::option::Option<std::string::String>,
    pub(crate) session_lifetime_in_minutes: std::option::Option<i64>,
    pub(crate) user_arn: std::option::Option<std::string::String>,
}
impl GetSessionEmbedUrlInputBuilder {
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p> </li>
    /// <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p> </li>
    /// </ul>
    pub fn entry_point(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry_point = Some(input.into());
        self
    }
    /// <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p>
    /// <ul>
    /// <li> <p> <code>/start</code> </p> </li>
    /// <li> <p> <code>/start/analyses</code> </p> </li>
    /// <li> <p> <code>/start/dashboards</code> </p> </li>
    /// <li> <p> <code>/start/favorites</code> </p> </li>
    /// <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p> </li>
    /// <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p> </li>
    /// </ul>
    pub fn set_entry_point(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry_point = input;
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.session_lifetime_in_minutes = Some(input);
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be 15-600 minutes.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: std::option::Option<i64>) -> Self {
        self.session_lifetime_in_minutes = input;
        self
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li> <p>Active Directory (AD) users or group members</p> </li>
    /// <li> <p>Invited nonfederated users</p> </li>
    /// <li> <p>Identity and Access Management (IAM) users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p>
    /// <ol>
    /// <li> <p>Active Directory (AD) users or group members</p> </li>
    /// <li> <p>Invited nonfederated users</p> </li>
    /// <li> <p>Identity and Access Management (IAM) users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li>
    /// </ol>
    /// <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSessionEmbedUrlInput`](crate::operation::get_session_embed_url::GetSessionEmbedUrlInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_session_embed_url::GetSessionEmbedUrlInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_session_embed_url::GetSessionEmbedUrlInput {
                aws_account_id: self.aws_account_id,
                entry_point: self.entry_point,
                session_lifetime_in_minutes: self.session_lifetime_in_minutes,
                user_arn: self.user_arn,
            },
        )
    }
}
