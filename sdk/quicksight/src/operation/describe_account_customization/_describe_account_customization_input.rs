// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAccountCustomizationInput {
    /// <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. </p>
    pub resolved: ::std::option::Option<bool>,
}
impl DescribeAccountCustomizationInput {
    /// <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. </p>
    pub fn resolved(&self) -> ::std::option::Option<bool> {
        self.resolved
    }
}
impl DescribeAccountCustomizationInput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountCustomizationInput`](crate::operation::describe_account_customization::DescribeAccountCustomizationInput).
    pub fn builder() -> crate::operation::describe_account_customization::builders::DescribeAccountCustomizationInputBuilder {
        crate::operation::describe_account_customization::builders::DescribeAccountCustomizationInputBuilder::default()
    }
}

/// A builder for [`DescribeAccountCustomizationInput`](crate::operation::describe_account_customization::DescribeAccountCustomizationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAccountCustomizationInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) resolved: ::std::option::Option<bool>,
}
impl DescribeAccountCustomizationInputBuilder {
    /// <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. </p>
    pub fn resolved(mut self, input: bool) -> Self {
        self.resolved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. </p>
    pub fn set_resolved(mut self, input: ::std::option::Option<bool>) -> Self {
        self.resolved = input;
        self
    }
    /// <p>The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. </p>
    pub fn get_resolved(&self) -> &::std::option::Option<bool> {
        &self.resolved
    }
    /// Consumes the builder and constructs a [`DescribeAccountCustomizationInput`](crate::operation::describe_account_customization::DescribeAccountCustomizationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_account_customization::DescribeAccountCustomizationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_account_customization::DescribeAccountCustomizationInput {
            aws_account_id: self.aws_account_id,
            namespace: self.namespace,
            resolved: self.resolved,
        })
    }
}
