// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GenerateEmbedUrlForRegisteredUserInput {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    #[doc(hidden)]
    pub session_lifetime_in_minutes: std::option::Option<i64>,
    /// <p>The Amazon Resource Name for the registered user.</p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
    /// <p>The experience you are embedding. For registered users, you can embed Amazon QuickSight dashboards, Amazon QuickSight visuals, the Amazon QuickSight Q search bar, or the entire Amazon QuickSight console.</p>
    #[doc(hidden)]
    pub experience_configuration:
        std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    #[doc(hidden)]
    pub allowed_domains: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GenerateEmbedUrlForRegisteredUserInput {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn session_lifetime_in_minutes(&self) -> std::option::Option<i64> {
        self.session_lifetime_in_minutes
    }
    /// <p>The Amazon Resource Name for the registered user.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
    /// <p>The experience you are embedding. For registered users, you can embed Amazon QuickSight dashboards, Amazon QuickSight visuals, the Amazon QuickSight Q search bar, or the entire Amazon QuickSight console.</p>
    pub fn experience_configuration(
        &self,
    ) -> std::option::Option<&crate::types::RegisteredUserEmbeddingExperienceConfiguration> {
        self.experience_configuration.as_ref()
    }
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn allowed_domains(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_domains.as_deref()
    }
}
impl GenerateEmbedUrlForRegisteredUserInput {
    /// Creates a new builder-style object to manufacture [`GenerateEmbedUrlForRegisteredUserInput`](crate::operation::generate_embed_url_for_registered_user::GenerateEmbedUrlForRegisteredUserInput).
    pub fn builder() -> crate::operation::generate_embed_url_for_registered_user::builders::GenerateEmbedUrlForRegisteredUserInputBuilder{
        crate::operation::generate_embed_url_for_registered_user::builders::GenerateEmbedUrlForRegisteredUserInputBuilder::default()
    }
}

/// A builder for [`GenerateEmbedUrlForRegisteredUserInput`](crate::operation::generate_embed_url_for_registered_user::GenerateEmbedUrlForRegisteredUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GenerateEmbedUrlForRegisteredUserInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) session_lifetime_in_minutes: std::option::Option<i64>,
    pub(crate) user_arn: std::option::Option<std::string::String>,
    pub(crate) experience_configuration:
        std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    pub(crate) allowed_domains: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GenerateEmbedUrlForRegisteredUserInputBuilder {
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account that contains the dashboard that you're embedding.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn session_lifetime_in_minutes(mut self, input: i64) -> Self {
        self.session_lifetime_in_minutes = Some(input);
        self
    }
    /// <p>How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.</p>
    pub fn set_session_lifetime_in_minutes(mut self, input: std::option::Option<i64>) -> Self {
        self.session_lifetime_in_minutes = input;
        self
    }
    /// <p>The Amazon Resource Name for the registered user.</p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name for the registered user.</p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// <p>The experience you are embedding. For registered users, you can embed Amazon QuickSight dashboards, Amazon QuickSight visuals, the Amazon QuickSight Q search bar, or the entire Amazon QuickSight console.</p>
    pub fn experience_configuration(
        mut self,
        input: crate::types::RegisteredUserEmbeddingExperienceConfiguration,
    ) -> Self {
        self.experience_configuration = Some(input);
        self
    }
    /// <p>The experience you are embedding. For registered users, you can embed Amazon QuickSight dashboards, Amazon QuickSight visuals, the Amazon QuickSight Q search bar, or the entire Amazon QuickSight console.</p>
    pub fn set_experience_configuration(
        mut self,
        input: std::option::Option<crate::types::RegisteredUserEmbeddingExperienceConfiguration>,
    ) -> Self {
        self.experience_configuration = input;
        self
    }
    /// Appends an item to `allowed_domains`.
    ///
    /// To override the contents of this collection use [`set_allowed_domains`](Self::set_allowed_domains).
    ///
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn allowed_domains(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_domains.unwrap_or_default();
        v.push(input.into());
        self.allowed_domains = Some(v);
        self
    }
    /// <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p>
    /// <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>
    pub fn set_allowed_domains(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_domains = input;
        self
    }
    /// Consumes the builder and constructs a [`GenerateEmbedUrlForRegisteredUserInput`](crate::operation::generate_embed_url_for_registered_user::GenerateEmbedUrlForRegisteredUserInput).
    pub fn build(self) -> Result<crate::operation::generate_embed_url_for_registered_user::GenerateEmbedUrlForRegisteredUserInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::generate_embed_url_for_registered_user::GenerateEmbedUrlForRegisteredUserInput {
                aws_account_id: self.aws_account_id
                ,
                session_lifetime_in_minutes: self.session_lifetime_in_minutes
                ,
                user_arn: self.user_arn
                ,
                experience_configuration: self.experience_configuration
                ,
                allowed_domains: self.allowed_domains
                ,
            }
        )
    }
}
