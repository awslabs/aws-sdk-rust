// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteThemeInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>An ID for the theme that you want to delete.</p>
    pub theme_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the theme that you want to delete. </p>
    /// <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
    pub version_number: ::std::option::Option<i64>,
}
impl DeleteThemeInput {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>An ID for the theme that you want to delete.</p>
    pub fn theme_id(&self) -> ::std::option::Option<&str> {
        self.theme_id.as_deref()
    }
    /// <p>The version of the theme that you want to delete. </p>
    /// <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
    pub fn version_number(&self) -> ::std::option::Option<i64> {
        self.version_number
    }
}
impl DeleteThemeInput {
    /// Creates a new builder-style object to manufacture [`DeleteThemeInput`](crate::operation::delete_theme::DeleteThemeInput).
    pub fn builder() -> crate::operation::delete_theme::builders::DeleteThemeInputBuilder {
        crate::operation::delete_theme::builders::DeleteThemeInputBuilder::default()
    }
}

/// A builder for [`DeleteThemeInput`](crate::operation::delete_theme::DeleteThemeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteThemeInputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) theme_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_number: ::std::option::Option<i64>,
}
impl DeleteThemeInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the theme that you're deleting.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>An ID for the theme that you want to delete.</p>
    /// This field is required.
    pub fn theme_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.theme_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ID for the theme that you want to delete.</p>
    pub fn set_theme_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.theme_id = input;
        self
    }
    /// <p>An ID for the theme that you want to delete.</p>
    pub fn get_theme_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.theme_id
    }
    /// <p>The version of the theme that you want to delete. </p>
    /// <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the theme that you want to delete. </p>
    /// <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version of the theme that you want to delete. </p>
    /// <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// Consumes the builder and constructs a [`DeleteThemeInput`](crate::operation::delete_theme::DeleteThemeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_theme::DeleteThemeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_theme::DeleteThemeInput {
            aws_account_id: self.aws_account_id,
            theme_id: self.theme_id,
            version_number: self.version_number,
        })
    }
}
