// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_iam_policy_assignment::_update_iam_policy_assignment_output::UpdateIamPolicyAssignmentOutputBuilder;

pub use crate::operation::update_iam_policy_assignment::_update_iam_policy_assignment_input::UpdateIamPolicyAssignmentInputBuilder;

/// Fluent builder constructing a request to `UpdateIAMPolicyAssignment`.
///
/// <p>Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request. This overwrites all of the users included in <code>Identities</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIAMPolicyAssignmentFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_iam_policy_assignment::builders::UpdateIamPolicyAssignmentInputBuilder
            }
impl UpdateIAMPolicyAssignmentFluentBuilder {
    /// Creates a new `UpdateIAMPolicyAssignment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_iam_policy_assignment::UpdateIAMPolicyAssignment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_iam_policy_assignment::UpdateIAMPolicyAssignmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_iam_policy_assignment::UpdateIAMPolicyAssignmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    pub fn assignment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.assignment_name(input.into());
        self
    }
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    pub fn set_assignment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_assignment_name(input);
        self
    }
    /// <p>The namespace of the assignment.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.namespace(input.into());
        self
    }
    /// <p>The namespace of the assignment.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_namespace(input);
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn assignment_status(mut self, input: crate::types::AssignmentStatus) -> Self {
        self.inner = self.inner.assignment_status(input);
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn set_assignment_status(
        mut self,
        input: std::option::Option<crate::types::AssignmentStatus>,
    ) -> Self {
        self.inner = self.inner.set_assignment_status(input);
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_arn(input.into());
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy_arn(input);
        self
    }
    /// Adds a key-value pair to `Identities`.
    ///
    /// To override the contents of this collection use [`set_identities`](Self::set_identities).
    ///
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn identities(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.identities(k.into(), v);
        self
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn set_identities(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.inner = self.inner.set_identities(input);
        self
    }
}
