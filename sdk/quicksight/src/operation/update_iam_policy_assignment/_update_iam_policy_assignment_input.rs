// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateIamPolicyAssignmentInput {
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    #[doc(hidden)]
    pub assignment_name: std::option::Option<std::string::String>,
    /// <p>The namespace of the assignment.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub assignment_status: std::option::Option<crate::types::AssignmentStatus>,
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    #[doc(hidden)]
    pub policy_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    #[doc(hidden)]
    pub identities: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl UpdateIamPolicyAssignmentInput {
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    pub fn assignment_name(&self) -> std::option::Option<&str> {
        self.assignment_name.as_deref()
    }
    /// <p>The namespace of the assignment.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn assignment_status(&self) -> std::option::Option<&crate::types::AssignmentStatus> {
        self.assignment_status.as_ref()
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn policy_arn(&self) -> std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn identities(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.identities.as_ref()
    }
}
impl UpdateIamPolicyAssignmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateIamPolicyAssignmentInput`](crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentInput).
    pub fn builder() -> crate::operation::update_iam_policy_assignment::builders::UpdateIamPolicyAssignmentInputBuilder{
        crate::operation::update_iam_policy_assignment::builders::UpdateIamPolicyAssignmentInputBuilder::default()
    }
}

/// A builder for [`UpdateIamPolicyAssignmentInput`](crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateIamPolicyAssignmentInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) assignment_name: std::option::Option<std::string::String>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) assignment_status: std::option::Option<crate::types::AssignmentStatus>,
    pub(crate) policy_arn: std::option::Option<std::string::String>,
    pub(crate) identities: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl UpdateIamPolicyAssignmentInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the IAM policy assignment. </p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    pub fn assignment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.assignment_name = Some(input.into());
        self
    }
    /// <p>The name of the assignment, also called a rule. This name must be unique within an Amazon Web Services account.</p>
    pub fn set_assignment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assignment_name = input;
        self
    }
    /// <p>The namespace of the assignment.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the assignment.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn assignment_status(mut self, input: crate::types::AssignmentStatus) -> Self {
        self.assignment_status = Some(input);
        self
    }
    /// <p>The status of the assignment. Possible values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li>
    /// <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li>
    /// <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li>
    /// </ul>
    pub fn set_assignment_status(
        mut self,
        input: std::option::Option<crate::types::AssignmentStatus>,
    ) -> Self {
        self.assignment_status = input;
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.</p>
    pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// Adds a key-value pair to `identities`.
    ///
    /// To override the contents of this collection use [`set_identities`](Self::set_identities).
    ///
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn identities(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.identities.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.identities = Some(hash_map);
        self
    }
    /// <p>The Amazon QuickSight users, groups, or both that you want to assign the policy to.</p>
    pub fn set_identities(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.identities = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateIamPolicyAssignmentInput`](crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_iam_policy_assignment::UpdateIamPolicyAssignmentInput {
                aws_account_id: self.aws_account_id,
                assignment_name: self.assignment_name,
                namespace: self.namespace,
                assignment_status: self.assignment_status,
                policy_arn: self.policy_arn,
                identities: self.identities,
            },
        )
    }
}
