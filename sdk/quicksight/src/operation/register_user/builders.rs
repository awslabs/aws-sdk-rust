// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_user::_register_user_output::RegisterUserOutputBuilder;

pub use crate::operation::register_user::_register_user_input::RegisterUserInputBuilder;

impl crate::operation::register_user::builders::RegisterUserInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::register_user::RegisterUserOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_user::RegisterUserError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.register_user();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RegisterUser`.
///
/// <p>Creates an Amazon QuickSight user whose identity is associated with the Identity and Access Management (IAM) identity or role specified in the request. When you register a new user from the Amazon QuickSight API, Amazon QuickSight generates a registration URL. The user accesses this registration URL to create their account. Amazon QuickSight doesn't send a registration email to users who are registered from the Amazon QuickSight API. If you want new users to receive a registration email, then add those users in the Amazon QuickSight console. For more information on registering a new user in the Amazon QuickSight console, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/managing-users.html#inviting-users"> Inviting users to access Amazon QuickSight</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterUserFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_user::builders::RegisterUserInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::register_user::RegisterUserOutput,
        crate::operation::register_user::RegisterUserError,
    > for RegisterUserFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::register_user::RegisterUserOutput,
            crate::operation::register_user::RegisterUserError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RegisterUserFluentBuilder {
    /// Creates a new `RegisterUser`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RegisterUser as a reference.
    pub fn as_input(&self) -> &crate::operation::register_user::builders::RegisterUserInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_user::RegisterUserOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_user::RegisterUserError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::register_user::RegisterUser::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::register_user::RegisterUser::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::register_user::RegisterUserOutput,
        crate::operation::register_user::RegisterUserError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IAM</code>: A user whose identity maps to an existing IAM user or role.</p></li>
    /// <li>
    /// <p><code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight.</p></li>
    /// </ul>
    pub fn identity_type(mut self, input: crate::types::IdentityType) -> Self {
        self.inner = self.inner.identity_type(input);
        self
    }
    /// <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IAM</code>: A user whose identity maps to an existing IAM user or role.</p></li>
    /// <li>
    /// <p><code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight.</p></li>
    /// </ul>
    pub fn set_identity_type(mut self, input: ::std::option::Option<crate::types::IdentityType>) -> Self {
        self.inner = self.inner.set_identity_type(input);
        self
    }
    /// <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IAM</code>: A user whose identity maps to an existing IAM user or role.</p></li>
    /// <li>
    /// <p><code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight.</p></li>
    /// </ul>
    pub fn get_identity_type(&self) -> &::std::option::Option<crate::types::IdentityType> {
        self.inner.get_identity_type()
    }
    /// <p>The email address of the user that you want to register.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.email(input.into());
        self
    }
    /// <p>The email address of the user that you want to register.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_email(input);
        self
    }
    /// <p>The email address of the user that you want to register.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_email()
    }
    /// <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>READER</code>: A user who has read-only access to dashboards.</p></li>
    /// <li>
    /// <p><code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p></li>
    /// <li>
    /// <p><code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_READER</code>: This role isn't currently available for use.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p></li>
    /// </ul>
    pub fn user_role(mut self, input: crate::types::UserRole) -> Self {
        self.inner = self.inner.user_role(input);
        self
    }
    /// <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>READER</code>: A user who has read-only access to dashboards.</p></li>
    /// <li>
    /// <p><code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p></li>
    /// <li>
    /// <p><code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_READER</code>: This role isn't currently available for use.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p></li>
    /// </ul>
    pub fn set_user_role(mut self, input: ::std::option::Option<crate::types::UserRole>) -> Self {
        self.inner = self.inner.set_user_role(input);
        self
    }
    /// <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>READER</code>: A user who has read-only access to dashboards.</p></li>
    /// <li>
    /// <p><code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p></li>
    /// <li>
    /// <p><code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_READER</code>: This role isn't currently available for use.</p></li>
    /// <li>
    /// <p><code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p></li>
    /// </ul>
    pub fn get_user_role(&self) -> &::std::option::Option<crate::types::UserRole> {
        self.inner.get_user_role()
    }
    /// <p>The ARN of the IAM user or role that you are registering with Amazon QuickSight.</p>
    pub fn iam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.iam_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM user or role that you are registering with Amazon QuickSight.</p>
    pub fn set_iam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_iam_arn(input);
        self
    }
    /// <p>The ARN of the IAM user or role that you are registering with Amazon QuickSight.</p>
    pub fn get_iam_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_iam_arn()
    }
    /// <p>You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i></p>
    pub fn session_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_name(input.into());
        self
    }
    /// <p>You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i></p>
    pub fn set_session_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_name(input);
        self
    }
    /// <p>You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i></p>
    pub fn get_session_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_name()
    }
    /// <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_aws_account_id()
    }
    /// <p>The namespace. Currently, you should set this to <code>default</code>.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.namespace(input.into());
        self
    }
    /// <p>The namespace. Currently, you should set this to <code>default</code>.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_namespace(input);
        self
    }
    /// <p>The namespace. Currently, you should set this to <code>default</code>.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_namespace()
    }
    /// <p>The Amazon QuickSight user name that you want to create for the user you are registering.</p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_name(input.into());
        self
    }
    /// <p>The Amazon QuickSight user name that you want to create for the user you are registering.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_name(input);
        self
    }
    /// <p>The Amazon QuickSight user name that you want to create for the user you are registering.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_name()
    }
    /// <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p>
    /// <ul>
    /// <li>
    /// <p>Create and update data sources</p></li>
    /// <li>
    /// <p>Create and update datasets</p></li>
    /// <li>
    /// <p>Create and update email reports</p></li>
    /// <li>
    /// <p>Subscribe to email reports</p></li>
    /// </ul>
    /// <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p>
    /// <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user.</p>
    /// <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p>
    /// <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
    pub fn custom_permissions_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_permissions_name(input.into());
        self
    }
    /// <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p>
    /// <ul>
    /// <li>
    /// <p>Create and update data sources</p></li>
    /// <li>
    /// <p>Create and update datasets</p></li>
    /// <li>
    /// <p>Create and update email reports</p></li>
    /// <li>
    /// <p>Subscribe to email reports</p></li>
    /// </ul>
    /// <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p>
    /// <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user.</p>
    /// <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p>
    /// <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
    pub fn set_custom_permissions_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_permissions_name(input);
        self
    }
    /// <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p>
    /// <ul>
    /// <li>
    /// <p>Create and update data sources</p></li>
    /// <li>
    /// <p>Create and update datasets</p></li>
    /// <li>
    /// <p>Create and update email reports</p></li>
    /// <li>
    /// <p>Subscribe to email reports</p></li>
    /// </ul>
    /// <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p>
    /// <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user.</p>
    /// <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p>
    /// <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
    pub fn get_custom_permissions_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_permissions_name()
    }
    /// <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p></li>
    /// <li>
    /// <p><code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p></li>
    /// </ul>
    pub fn external_login_federation_provider_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.external_login_federation_provider_type(input.into());
        self
    }
    /// <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p></li>
    /// <li>
    /// <p><code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p></li>
    /// </ul>
    pub fn set_external_login_federation_provider_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_external_login_federation_provider_type(input);
        self
    }
    /// <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p></li>
    /// <li>
    /// <p><code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p></li>
    /// </ul>
    pub fn get_external_login_federation_provider_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_external_login_federation_provider_type()
    }
    /// <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
    pub fn custom_federation_provider_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_federation_provider_url(input.into());
        self
    }
    /// <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
    pub fn set_custom_federation_provider_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_federation_provider_url(input);
        self
    }
    /// <p>The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.</p>
    pub fn get_custom_federation_provider_url(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_federation_provider_url()
    }
    /// <p>The identity ID for a user in the external login provider.</p>
    pub fn external_login_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.external_login_id(input.into());
        self
    }
    /// <p>The identity ID for a user in the external login provider.</p>
    pub fn set_external_login_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_external_login_id(input);
        self
    }
    /// <p>The identity ID for a user in the external login provider.</p>
    pub fn get_external_login_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_external_login_id()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the user.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags to associate with the user.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to associate with the user.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
