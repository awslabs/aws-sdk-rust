// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterUserOutput {
    /// <p>The user's user name.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::types::User>,
    /// <p>The URL the user visits to complete registration and provide a password. This is returned only for users with an identity type of <code>QUICKSIGHT</code>.</p>
    #[doc(hidden)]
    pub user_invitation_url: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    _request_id: Option<String>,
}
impl RegisterUserOutput {
    /// <p>The user's user name.</p>
    pub fn user(&self) -> std::option::Option<&crate::types::User> {
        self.user.as_ref()
    }
    /// <p>The URL the user visits to complete registration and provide a password. This is returned only for users with an identity type of <code>QUICKSIGHT</code>.</p>
    pub fn user_invitation_url(&self) -> std::option::Option<&str> {
        self.user_invitation_url.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl aws_http::request_id::RequestId for RegisterUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterUserOutput {
    /// Creates a new builder-style object to manufacture [`RegisterUserOutput`](crate::operation::register_user::RegisterUserOutput).
    pub fn builder() -> crate::operation::register_user::builders::RegisterUserOutputBuilder {
        crate::operation::register_user::builders::RegisterUserOutputBuilder::default()
    }
}

/// A builder for [`RegisterUserOutput`](crate::operation::register_user::RegisterUserOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterUserOutputBuilder {
    pub(crate) user: std::option::Option<crate::types::User>,
    pub(crate) user_invitation_url: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl RegisterUserOutputBuilder {
    /// <p>The user's user name.</p>
    pub fn user(mut self, input: crate::types::User) -> Self {
        self.user = Some(input);
        self
    }
    /// <p>The user's user name.</p>
    pub fn set_user(mut self, input: std::option::Option<crate::types::User>) -> Self {
        self.user = input;
        self
    }
    /// <p>The URL the user visits to complete registration and provide a password. This is returned only for users with an identity type of <code>QUICKSIGHT</code>.</p>
    pub fn user_invitation_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_invitation_url = Some(input.into());
        self
    }
    /// <p>The URL the user visits to complete registration and provide a password. This is returned only for users with an identity type of <code>QUICKSIGHT</code>.</p>
    pub fn set_user_invitation_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_invitation_url = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterUserOutput`](crate::operation::register_user::RegisterUserOutput).
    pub fn build(self) -> crate::operation::register_user::RegisterUserOutput {
        crate::operation::register_user::RegisterUserOutput {
            user: self.user,
            user_invitation_url: self.user_invitation_url,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
