// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output returned from the <code>GetDashboardEmbedUrl</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDashboardEmbedUrlOutput {
    /// <p>A single-use URL that you can put into your server-side webpage to embed your dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. </p>
    #[doc(hidden)]
    pub embed_url: std::option::Option<std::string::String>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDashboardEmbedUrlOutput {
    /// <p>A single-use URL that you can put into your server-side webpage to embed your dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. </p>
    pub fn embed_url(&self) -> std::option::Option<&str> {
        self.embed_url.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl std::fmt::Debug for GetDashboardEmbedUrlOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDashboardEmbedUrlOutput");
        formatter.field("embed_url", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("request_id", &self.request_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetDashboardEmbedUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDashboardEmbedUrlOutput {
    /// Creates a new builder-style object to manufacture [`GetDashboardEmbedUrlOutput`](crate::operation::get_dashboard_embed_url::GetDashboardEmbedUrlOutput).
    pub fn builder(
    ) -> crate::operation::get_dashboard_embed_url::builders::GetDashboardEmbedUrlOutputBuilder
    {
        crate::operation::get_dashboard_embed_url::builders::GetDashboardEmbedUrlOutputBuilder::default()
    }
}

/// A builder for [`GetDashboardEmbedUrlOutput`](crate::operation::get_dashboard_embed_url::GetDashboardEmbedUrlOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetDashboardEmbedUrlOutputBuilder {
    pub(crate) embed_url: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<i32>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDashboardEmbedUrlOutputBuilder {
    /// <p>A single-use URL that you can put into your server-side webpage to embed your dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. </p>
    pub fn embed_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.embed_url = Some(input.into());
        self
    }
    /// <p>A single-use URL that you can put into your server-side webpage to embed your dashboard. This URL is valid for 5 minutes. The API operation provides the URL with an <code>auth_code</code> value that enables one (and only one) sign-on to a user session that is valid for 10 hours. </p>
    pub fn set_embed_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.embed_url = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDashboardEmbedUrlOutput`](crate::operation::get_dashboard_embed_url::GetDashboardEmbedUrlOutput).
    pub fn build(self) -> crate::operation::get_dashboard_embed_url::GetDashboardEmbedUrlOutput {
        crate::operation::get_dashboard_embed_url::GetDashboardEmbedUrlOutput {
            embed_url: self.embed_url,
            status: self.status.unwrap_or_default(),
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetDashboardEmbedUrlOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDashboardEmbedUrlOutputBuilder");
        formatter.field("embed_url", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("request_id", &self.request_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
