// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDashboardPermissionsOutput {
    /// <p>The ID for the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_arn: std::option::Option<std::string::String>,
    /// <p>A structure that contains the permissions for the dashboard.</p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>A structure that contains the configuration of a shareable link that grants access to the dashboard. Your users can use the link to view and interact with the dashboard, if the dashboard has been shared with them. For more information about sharing dashboards, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sharing-a-dashboard.html">Sharing Dashboards</a>.</p>
    #[doc(hidden)]
    pub link_sharing_configuration: std::option::Option<crate::types::LinkSharingConfiguration>,
    _request_id: Option<String>,
}
impl DescribeDashboardPermissionsOutput {
    /// <p>The ID for the dashboard.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(&self) -> std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>A structure that contains the permissions for the dashboard.</p>
    pub fn permissions(&self) -> std::option::Option<&[crate::types::ResourcePermission]> {
        self.permissions.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>A structure that contains the configuration of a shareable link that grants access to the dashboard. Your users can use the link to view and interact with the dashboard, if the dashboard has been shared with them. For more information about sharing dashboards, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sharing-a-dashboard.html">Sharing Dashboards</a>.</p>
    pub fn link_sharing_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LinkSharingConfiguration> {
        self.link_sharing_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDashboardPermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDashboardPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardPermissionsOutput`](crate::operation::describe_dashboard_permissions::DescribeDashboardPermissionsOutput).
    pub fn builder() -> crate::operation::describe_dashboard_permissions::builders::DescribeDashboardPermissionsOutputBuilder{
        crate::operation::describe_dashboard_permissions::builders::DescribeDashboardPermissionsOutputBuilder::default()
    }
}

/// A builder for [`DescribeDashboardPermissionsOutput`](crate::operation::describe_dashboard_permissions::DescribeDashboardPermissionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDashboardPermissionsOutputBuilder {
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) dashboard_arn: std::option::Option<std::string::String>,
    pub(crate) permissions: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
    pub(crate) status: std::option::Option<i32>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) link_sharing_configuration:
        std::option::Option<crate::types::LinkSharingConfiguration>,
    _request_id: Option<String>,
}
impl DescribeDashboardPermissionsOutputBuilder {
    /// <p>The ID for the dashboard.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID for the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn set_dashboard_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>A structure that contains the permissions for the dashboard.</p>
    pub fn permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = Some(v);
        self
    }
    /// <p>A structure that contains the permissions for the dashboard.</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
    ) -> Self {
        self.permissions = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>A structure that contains the configuration of a shareable link that grants access to the dashboard. Your users can use the link to view and interact with the dashboard, if the dashboard has been shared with them. For more information about sharing dashboards, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sharing-a-dashboard.html">Sharing Dashboards</a>.</p>
    pub fn link_sharing_configuration(
        mut self,
        input: crate::types::LinkSharingConfiguration,
    ) -> Self {
        self.link_sharing_configuration = Some(input);
        self
    }
    /// <p>A structure that contains the configuration of a shareable link that grants access to the dashboard. Your users can use the link to view and interact with the dashboard, if the dashboard has been shared with them. For more information about sharing dashboards, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sharing-a-dashboard.html">Sharing Dashboards</a>.</p>
    pub fn set_link_sharing_configuration(
        mut self,
        input: std::option::Option<crate::types::LinkSharingConfiguration>,
    ) -> Self {
        self.link_sharing_configuration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDashboardPermissionsOutput`](crate::operation::describe_dashboard_permissions::DescribeDashboardPermissionsOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_dashboard_permissions::DescribeDashboardPermissionsOutput {
        crate::operation::describe_dashboard_permissions::DescribeDashboardPermissionsOutput {
            dashboard_id: self.dashboard_id,
            dashboard_arn: self.dashboard_arn,
            permissions: self.permissions,
            status: self.status.unwrap_or_default(),
            request_id: self.request_id,
            link_sharing_configuration: self.link_sharing_configuration,
            _request_id: self._request_id,
        }
    }
}
