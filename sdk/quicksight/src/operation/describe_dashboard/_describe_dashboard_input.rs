// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDashboardInput {
    /// <p>The ID of the Amazon Web Services account that contains the dashboard that you're describing.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The ID for the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_id: std::option::Option<std::string::String>,
    /// <p>The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. </p>
    #[doc(hidden)]
    pub version_number: std::option::Option<i64>,
    /// <p>The alias name.</p>
    #[doc(hidden)]
    pub alias_name: std::option::Option<std::string::String>,
}
impl DescribeDashboardInput {
    /// <p>The ID of the Amazon Web Services account that contains the dashboard that you're describing.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The ID for the dashboard.</p>
    pub fn dashboard_id(&self) -> std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. </p>
    pub fn version_number(&self) -> std::option::Option<i64> {
        self.version_number
    }
    /// <p>The alias name.</p>
    pub fn alias_name(&self) -> std::option::Option<&str> {
        self.alias_name.as_deref()
    }
}
impl DescribeDashboardInput {
    /// Creates a new builder-style object to manufacture [`DescribeDashboardInput`](crate::operation::describe_dashboard::DescribeDashboardInput).
    pub fn builder() -> crate::operation::describe_dashboard::builders::DescribeDashboardInputBuilder
    {
        crate::operation::describe_dashboard::builders::DescribeDashboardInputBuilder::default()
    }
}

/// A builder for [`DescribeDashboardInput`](crate::operation::describe_dashboard::DescribeDashboardInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDashboardInputBuilder {
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) dashboard_id: std::option::Option<std::string::String>,
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) alias_name: std::option::Option<std::string::String>,
}
impl DescribeDashboardInputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the dashboard that you're describing.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the dashboard that you're describing.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID for the dashboard.</p>
    pub fn dashboard_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_id = Some(input.into());
        self
    }
    /// <p>The ID for the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. </p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. </p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The alias name.</p>
    pub fn alias_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias_name = Some(input.into());
        self
    }
    /// <p>The alias name.</p>
    pub fn set_alias_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDashboardInput`](crate::operation::describe_dashboard::DescribeDashboardInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_dashboard::DescribeDashboardInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_dashboard::DescribeDashboardInput {
                aws_account_id: self.aws_account_id,
                dashboard_id: self.dashboard_id,
                version_number: self.version_number,
                alias_name: self.alias_name,
            },
        )
    }
}
