// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListIamPolicyAssignmentsForUserOutput {
    /// <p>The active assignments for this user.</p>
    #[doc(hidden)]
    pub active_assignments:
        std::option::Option<std::vec::Vec<crate::types::ActiveIamPolicyAssignment>>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    _request_id: Option<String>,
}
impl ListIamPolicyAssignmentsForUserOutput {
    /// <p>The active assignments for this user.</p>
    pub fn active_assignments(
        &self,
    ) -> std::option::Option<&[crate::types::ActiveIamPolicyAssignment]> {
        self.active_assignments.as_deref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl aws_http::request_id::RequestId for ListIamPolicyAssignmentsForUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListIamPolicyAssignmentsForUserOutput {
    /// Creates a new builder-style object to manufacture [`ListIamPolicyAssignmentsForUserOutput`](crate::operation::list_iam_policy_assignments_for_user::ListIamPolicyAssignmentsForUserOutput).
    pub fn builder() -> crate::operation::list_iam_policy_assignments_for_user::builders::ListIamPolicyAssignmentsForUserOutputBuilder{
        crate::operation::list_iam_policy_assignments_for_user::builders::ListIamPolicyAssignmentsForUserOutputBuilder::default()
    }
}

/// A builder for [`ListIamPolicyAssignmentsForUserOutput`](crate::operation::list_iam_policy_assignments_for_user::ListIamPolicyAssignmentsForUserOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListIamPolicyAssignmentsForUserOutputBuilder {
    pub(crate) active_assignments:
        std::option::Option<std::vec::Vec<crate::types::ActiveIamPolicyAssignment>>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListIamPolicyAssignmentsForUserOutputBuilder {
    /// Appends an item to `active_assignments`.
    ///
    /// To override the contents of this collection use [`set_active_assignments`](Self::set_active_assignments).
    ///
    /// <p>The active assignments for this user.</p>
    pub fn active_assignments(mut self, input: crate::types::ActiveIamPolicyAssignment) -> Self {
        let mut v = self.active_assignments.unwrap_or_default();
        v.push(input);
        self.active_assignments = Some(v);
        self
    }
    /// <p>The active assignments for this user.</p>
    pub fn set_active_assignments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ActiveIamPolicyAssignment>>,
    ) -> Self {
        self.active_assignments = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListIamPolicyAssignmentsForUserOutput`](crate::operation::list_iam_policy_assignments_for_user::ListIamPolicyAssignmentsForUserOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_iam_policy_assignments_for_user::ListIamPolicyAssignmentsForUserOutput
    {
        crate::operation::list_iam_policy_assignments_for_user::ListIamPolicyAssignmentsForUserOutput {
            active_assignments: self.active_assignments
            ,
            request_id: self.request_id
            ,
            next_token: self.next_token
            ,
            status: self.status
                .unwrap_or_default()
            ,
            _request_id: self._request_id,
        }
    }
}
