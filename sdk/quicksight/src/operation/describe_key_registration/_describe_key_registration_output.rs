// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeKeyRegistrationOutput {
    /// <p>The ID of the Amazon Web Services account that contains the customer managed key registration specified in the request.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>RegisteredCustomerManagedKey</code> objects in a Quick Sight account.</p>
    pub key_registration: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredCustomerManagedKey>>,
    /// <p>A list of <code>QDataKey</code> objects in a Quick Sight account.</p>
    pub q_data_key: ::std::option::Option<crate::types::QDataKey>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    _request_id: Option<String>,
}
impl DescribeKeyRegistrationOutput {
    /// <p>The ID of the Amazon Web Services account that contains the customer managed key registration specified in the request.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>A list of <code>RegisteredCustomerManagedKey</code> objects in a Quick Sight account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.key_registration.is_none()`.
    pub fn key_registration(&self) -> &[crate::types::RegisteredCustomerManagedKey] {
        self.key_registration.as_deref().unwrap_or_default()
    }
    /// <p>A list of <code>QDataKey</code> objects in a Quick Sight account.</p>
    pub fn q_data_key(&self) -> ::std::option::Option<&crate::types::QDataKey> {
        self.q_data_key.as_ref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl ::aws_types::request_id::RequestId for DescribeKeyRegistrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeKeyRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeKeyRegistrationOutput`](crate::operation::describe_key_registration::DescribeKeyRegistrationOutput).
    pub fn builder() -> crate::operation::describe_key_registration::builders::DescribeKeyRegistrationOutputBuilder {
        crate::operation::describe_key_registration::builders::DescribeKeyRegistrationOutputBuilder::default()
    }
}

/// A builder for [`DescribeKeyRegistrationOutput`](crate::operation::describe_key_registration::DescribeKeyRegistrationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeKeyRegistrationOutputBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_registration: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredCustomerManagedKey>>,
    pub(crate) q_data_key: ::std::option::Option<crate::types::QDataKey>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeKeyRegistrationOutputBuilder {
    /// <p>The ID of the Amazon Web Services account that contains the customer managed key registration specified in the request.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the customer managed key registration specified in the request.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that contains the customer managed key registration specified in the request.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Appends an item to `key_registration`.
    ///
    /// To override the contents of this collection use [`set_key_registration`](Self::set_key_registration).
    ///
    /// <p>A list of <code>RegisteredCustomerManagedKey</code> objects in a Quick Sight account.</p>
    pub fn key_registration(mut self, input: crate::types::RegisteredCustomerManagedKey) -> Self {
        let mut v = self.key_registration.unwrap_or_default();
        v.push(input);
        self.key_registration = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>RegisteredCustomerManagedKey</code> objects in a Quick Sight account.</p>
    pub fn set_key_registration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegisteredCustomerManagedKey>>) -> Self {
        self.key_registration = input;
        self
    }
    /// <p>A list of <code>RegisteredCustomerManagedKey</code> objects in a Quick Sight account.</p>
    pub fn get_key_registration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegisteredCustomerManagedKey>> {
        &self.key_registration
    }
    /// <p>A list of <code>QDataKey</code> objects in a Quick Sight account.</p>
    pub fn q_data_key(mut self, input: crate::types::QDataKey) -> Self {
        self.q_data_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of <code>QDataKey</code> objects in a Quick Sight account.</p>
    pub fn set_q_data_key(mut self, input: ::std::option::Option<crate::types::QDataKey>) -> Self {
        self.q_data_key = input;
        self
    }
    /// <p>A list of <code>QDataKey</code> objects in a Quick Sight account.</p>
    pub fn get_q_data_key(&self) -> &::std::option::Option<crate::types::QDataKey> {
        &self.q_data_key
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeKeyRegistrationOutput`](crate::operation::describe_key_registration::DescribeKeyRegistrationOutput).
    pub fn build(self) -> crate::operation::describe_key_registration::DescribeKeyRegistrationOutput {
        crate::operation::describe_key_registration::DescribeKeyRegistrationOutput {
            aws_account_id: self.aws_account_id,
            key_registration: self.key_registration,
            q_data_key: self.q_data_key,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
