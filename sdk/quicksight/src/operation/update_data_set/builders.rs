// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_data_set::_update_data_set_output::UpdateDataSetOutputBuilder;

pub use crate::operation::update_data_set::_update_data_set_input::UpdateDataSetInputBuilder;

/// Fluent builder constructing a request to `UpdateDataSet`.
///
/// <p>Updates a dataset. This operation doesn't support datasets that include uploaded files as a source. Partial updates are not supported by this operation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDataSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_data_set::builders::UpdateDataSetInputBuilder,
}
impl UpdateDataSetFluentBuilder {
    /// Creates a new `UpdateDataSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_data_set::UpdateDataSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_data_set::UpdateDataSetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_data_set::UpdateDataSetOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_data_set::UpdateDataSetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_aws_account_id(input);
        self
    }
    /// <p>The ID for the dataset that you want to update. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_set_id(input.into());
        self
    }
    /// <p>The ID for the dataset that you want to update. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_data_set_id(input);
        self
    }
    /// <p>The display name for the dataset.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The display name for the dataset.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Adds a key-value pair to `PhysicalTableMap`.
    ///
    /// To override the contents of this collection use [`set_physical_table_map`](Self::set_physical_table_map).
    ///
    /// <p>Declares the physical tables that are available in the underlying data sources.</p>
    pub fn physical_table_map(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::PhysicalTable,
    ) -> Self {
        self.inner = self.inner.physical_table_map(k.into(), v);
        self
    }
    /// <p>Declares the physical tables that are available in the underlying data sources.</p>
    pub fn set_physical_table_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::PhysicalTable>,
        >,
    ) -> Self {
        self.inner = self.inner.set_physical_table_map(input);
        self
    }
    /// Adds a key-value pair to `LogicalTableMap`.
    ///
    /// To override the contents of this collection use [`set_logical_table_map`](Self::set_logical_table_map).
    ///
    /// <p>Configures the combination and transformation of the data from the physical tables.</p>
    pub fn logical_table_map(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::LogicalTable,
    ) -> Self {
        self.inner = self.inner.logical_table_map(k.into(), v);
        self
    }
    /// <p>Configures the combination and transformation of the data from the physical tables.</p>
    pub fn set_logical_table_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::LogicalTable>,
        >,
    ) -> Self {
        self.inner = self.inner.set_logical_table_map(input);
        self
    }
    /// <p>Indicates whether you want to import the data into SPICE.</p>
    pub fn import_mode(mut self, input: crate::types::DataSetImportMode) -> Self {
        self.inner = self.inner.import_mode(input);
        self
    }
    /// <p>Indicates whether you want to import the data into SPICE.</p>
    pub fn set_import_mode(
        mut self,
        input: std::option::Option<crate::types::DataSetImportMode>,
    ) -> Self {
        self.inner = self.inner.set_import_mode(input);
        self
    }
    /// Appends an item to `ColumnGroups`.
    ///
    /// To override the contents of this collection use [`set_column_groups`](Self::set_column_groups).
    ///
    /// <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
    pub fn column_groups(mut self, input: crate::types::ColumnGroup) -> Self {
        self.inner = self.inner.column_groups(input);
        self
    }
    /// <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
    pub fn set_column_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnGroup>>,
    ) -> Self {
        self.inner = self.inner.set_column_groups(input);
        self
    }
    /// Adds a key-value pair to `FieldFolders`.
    ///
    /// To override the contents of this collection use [`set_field_folders`](Self::set_field_folders).
    ///
    /// <p>The folder that contains fields and nested subfolders for your dataset.</p>
    pub fn field_folders(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::FieldFolder,
    ) -> Self {
        self.inner = self.inner.field_folders(k.into(), v);
        self
    }
    /// <p>The folder that contains fields and nested subfolders for your dataset.</p>
    pub fn set_field_folders(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::FieldFolder>,
        >,
    ) -> Self {
        self.inner = self.inner.set_field_folders(input);
        self
    }
    /// <p>The row-level security configuration for the data you want to create.</p>
    pub fn row_level_permission_data_set(
        mut self,
        input: crate::types::RowLevelPermissionDataSet,
    ) -> Self {
        self.inner = self.inner.row_level_permission_data_set(input);
        self
    }
    /// <p>The row-level security configuration for the data you want to create.</p>
    pub fn set_row_level_permission_data_set(
        mut self,
        input: std::option::Option<crate::types::RowLevelPermissionDataSet>,
    ) -> Self {
        self.inner = self.inner.set_row_level_permission_data_set(input);
        self
    }
    /// <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
    pub fn row_level_permission_tag_configuration(
        mut self,
        input: crate::types::RowLevelPermissionTagConfiguration,
    ) -> Self {
        self.inner = self.inner.row_level_permission_tag_configuration(input);
        self
    }
    /// <p>The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only.</p>
    pub fn set_row_level_permission_tag_configuration(
        mut self,
        input: std::option::Option<crate::types::RowLevelPermissionTagConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_row_level_permission_tag_configuration(input);
        self
    }
    /// Appends an item to `ColumnLevelPermissionRules`.
    ///
    /// To override the contents of this collection use [`set_column_level_permission_rules`](Self::set_column_level_permission_rules).
    ///
    /// <p>A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.</p>
    pub fn column_level_permission_rules(
        mut self,
        input: crate::types::ColumnLevelPermissionRule,
    ) -> Self {
        self.inner = self.inner.column_level_permission_rules(input);
        self
    }
    /// <p>A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.</p>
    pub fn set_column_level_permission_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnLevelPermissionRule>>,
    ) -> Self {
        self.inner = self.inner.set_column_level_permission_rules(input);
        self
    }
    /// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
    pub fn data_set_usage_configuration(
        mut self,
        input: crate::types::DataSetUsageConfiguration,
    ) -> Self {
        self.inner = self.inner.data_set_usage_configuration(input);
        self
    }
    /// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
    pub fn set_data_set_usage_configuration(
        mut self,
        input: std::option::Option<crate::types::DataSetUsageConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_data_set_usage_configuration(input);
        self
    }
}
