// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAnalysisOutput {
    /// <p>The ARN of the analysis that you're updating.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the analysis.</p>
    #[doc(hidden)]
    pub analysis_id: std::option::Option<std::string::String>,
    /// <p>The update status of the last update that was made to the analysis.</p>
    #[doc(hidden)]
    pub update_status: std::option::Option<crate::types::ResourceStatus>,
    /// <p>The HTTP status of the request.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateAnalysisOutput {
    /// <p>The ARN of the analysis that you're updating.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the analysis.</p>
    pub fn analysis_id(&self) -> std::option::Option<&str> {
        self.analysis_id.as_deref()
    }
    /// <p>The update status of the last update that was made to the analysis.</p>
    pub fn update_status(&self) -> std::option::Option<&crate::types::ResourceStatus> {
        self.update_status.as_ref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAnalysisOutput`](crate::operation::update_analysis::UpdateAnalysisOutput).
    pub fn builder() -> crate::operation::update_analysis::builders::UpdateAnalysisOutputBuilder {
        crate::operation::update_analysis::builders::UpdateAnalysisOutputBuilder::default()
    }
}

/// A builder for [`UpdateAnalysisOutput`](crate::operation::update_analysis::UpdateAnalysisOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAnalysisOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) analysis_id: std::option::Option<std::string::String>,
    pub(crate) update_status: std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status: std::option::Option<i32>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateAnalysisOutputBuilder {
    /// <p>The ARN of the analysis that you're updating.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the analysis that you're updating.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the analysis.</p>
    pub fn analysis_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.analysis_id = Some(input.into());
        self
    }
    /// <p>The ID of the analysis.</p>
    pub fn set_analysis_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.analysis_id = input;
        self
    }
    /// <p>The update status of the last update that was made to the analysis.</p>
    pub fn update_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.update_status = Some(input);
        self
    }
    /// <p>The update status of the last update that was made to the analysis.</p>
    pub fn set_update_status(
        mut self,
        input: std::option::Option<crate::types::ResourceStatus>,
    ) -> Self {
        self.update_status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAnalysisOutput`](crate::operation::update_analysis::UpdateAnalysisOutput).
    pub fn build(self) -> crate::operation::update_analysis::UpdateAnalysisOutput {
        crate::operation::update_analysis::UpdateAnalysisOutput {
            arn: self.arn,
            analysis_id: self.analysis_id,
            update_status: self.update_status,
            status: self.status.unwrap_or_default(),
            request_id: self.request_id,
            _request_id: self._request_id,
        }
    }
}
