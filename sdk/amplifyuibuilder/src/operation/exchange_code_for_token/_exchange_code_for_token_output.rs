// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExchangeCodeForTokenOutput {
    /// <p>The access token.</p>
    #[doc(hidden)]
    pub access_token: std::option::Option<std::string::String>,
    /// <p>The date and time when the new access token expires.</p>
    #[doc(hidden)]
    pub expires_in: std::option::Option<i32>,
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    #[doc(hidden)]
    pub refresh_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExchangeCodeForTokenOutput {
    /// <p>The access token.</p>
    pub fn access_token(&self) -> std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The date and time when the new access token expires.</p>
    pub fn expires_in(&self) -> std::option::Option<i32> {
        self.expires_in
    }
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    pub fn refresh_token(&self) -> std::option::Option<&str> {
        self.refresh_token.as_deref()
    }
}
impl std::fmt::Debug for ExchangeCodeForTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExchangeCodeForTokenOutput");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expires_in", &self.expires_in);
        formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ExchangeCodeForTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ExchangeCodeForTokenOutput {
    /// Creates a new builder-style object to manufacture [`ExchangeCodeForTokenOutput`](crate::operation::exchange_code_for_token::ExchangeCodeForTokenOutput).
    pub fn builder(
    ) -> crate::operation::exchange_code_for_token::builders::ExchangeCodeForTokenOutputBuilder
    {
        crate::operation::exchange_code_for_token::builders::ExchangeCodeForTokenOutputBuilder::default()
    }
}

/// A builder for [`ExchangeCodeForTokenOutput`](crate::operation::exchange_code_for_token::ExchangeCodeForTokenOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ExchangeCodeForTokenOutputBuilder {
    pub(crate) access_token: std::option::Option<std::string::String>,
    pub(crate) expires_in: std::option::Option<i32>,
    pub(crate) refresh_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExchangeCodeForTokenOutputBuilder {
    /// <p>The access token.</p>
    pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_token = Some(input.into());
        self
    }
    /// <p>The access token.</p>
    pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>The date and time when the new access token expires.</p>
    pub fn expires_in(mut self, input: i32) -> Self {
        self.expires_in = Some(input);
        self
    }
    /// <p>The date and time when the new access token expires.</p>
    pub fn set_expires_in(mut self, input: std::option::Option<i32>) -> Self {
        self.expires_in = input;
        self
    }
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    pub fn refresh_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.refresh_token = Some(input.into());
        self
    }
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    pub fn set_refresh_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.refresh_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ExchangeCodeForTokenOutput`](crate::operation::exchange_code_for_token::ExchangeCodeForTokenOutput).
    pub fn build(self) -> crate::operation::exchange_code_for_token::ExchangeCodeForTokenOutput {
        crate::operation::exchange_code_for_token::ExchangeCodeForTokenOutput {
            access_token: self.access_token,
            expires_in: self.expires_in,
            refresh_token: self.refresh_token,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for ExchangeCodeForTokenOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExchangeCodeForTokenOutputBuilder");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expires_in", &self.expires_in);
        formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
