// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFormInput {
    /// <p>The unique ID for the Amplify app.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for the form.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The unique client token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The request accepts the following data in JSON format.</p>
    pub updated_form: ::std::option::Option<crate::types::UpdateFormData>,
}
impl UpdateFormInput {
    /// <p>The unique ID for the Amplify app.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The unique ID for the form.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The unique client token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The request accepts the following data in JSON format.</p>
    pub fn updated_form(&self) -> ::std::option::Option<&crate::types::UpdateFormData> {
        self.updated_form.as_ref()
    }
}
impl UpdateFormInput {
    /// Creates a new builder-style object to manufacture [`UpdateFormInput`](crate::operation::update_form::UpdateFormInput).
    pub fn builder() -> crate::operation::update_form::builders::UpdateFormInputBuilder {
        crate::operation::update_form::builders::UpdateFormInputBuilder::default()
    }
}

/// A builder for [`UpdateFormInput`](crate::operation::update_form::UpdateFormInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFormInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) updated_form: ::std::option::Option<crate::types::UpdateFormData>,
}
impl UpdateFormInputBuilder {
    /// <p>The unique ID for the Amplify app.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the Amplify app.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique ID for the Amplify app.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    /// This field is required.
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The unique ID for the form.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the form.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID for the form.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique client token.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The request accepts the following data in JSON format.</p>
    /// This field is required.
    pub fn updated_form(mut self, input: crate::types::UpdateFormData) -> Self {
        self.updated_form = ::std::option::Option::Some(input);
        self
    }
    /// <p>The request accepts the following data in JSON format.</p>
    pub fn set_updated_form(mut self, input: ::std::option::Option<crate::types::UpdateFormData>) -> Self {
        self.updated_form = input;
        self
    }
    /// <p>The request accepts the following data in JSON format.</p>
    pub fn get_updated_form(&self) -> &::std::option::Option<crate::types::UpdateFormData> {
        &self.updated_form
    }
    /// Consumes the builder and constructs a [`UpdateFormInput`](crate::operation::update_form::UpdateFormInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_form::UpdateFormInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_form::UpdateFormInput {
            app_id: self.app_id,
            environment_name: self.environment_name,
            id: self.id,
            client_token: self.client_token,
            updated_form: self.updated_form,
        })
    }
}
