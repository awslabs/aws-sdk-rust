// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateThemeInput {
    /// <p>The unique ID of the Amplify app associated with the theme.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    #[doc(hidden)]
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The unique client token.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Represents the configuration of the theme to create.</p>
    #[doc(hidden)]
    pub theme_to_create: std::option::Option<crate::types::CreateThemeData>,
}
impl CreateThemeInput {
    /// <p>The unique ID of the Amplify app associated with the theme.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(&self) -> std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The unique client token.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Represents the configuration of the theme to create.</p>
    pub fn theme_to_create(&self) -> std::option::Option<&crate::types::CreateThemeData> {
        self.theme_to_create.as_ref()
    }
}
impl CreateThemeInput {
    /// Creates a new builder-style object to manufacture [`CreateThemeInput`](crate::operation::create_theme::CreateThemeInput).
    pub fn builder() -> crate::operation::create_theme::builders::CreateThemeInputBuilder {
        crate::operation::create_theme::builders::CreateThemeInputBuilder::default()
    }
}

/// A builder for [`CreateThemeInput`](crate::operation::create_theme::CreateThemeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateThemeInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) environment_name: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) theme_to_create: std::option::Option<crate::types::CreateThemeData>,
}
impl CreateThemeInputBuilder {
    /// <p>The unique ID of the Amplify app associated with the theme.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the Amplify app associated with the theme.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The unique client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The unique client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Represents the configuration of the theme to create.</p>
    pub fn theme_to_create(mut self, input: crate::types::CreateThemeData) -> Self {
        self.theme_to_create = Some(input);
        self
    }
    /// <p>Represents the configuration of the theme to create.</p>
    pub fn set_theme_to_create(
        mut self,
        input: std::option::Option<crate::types::CreateThemeData>,
    ) -> Self {
        self.theme_to_create = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateThemeInput`](crate::operation::create_theme::CreateThemeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_theme::CreateThemeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_theme::CreateThemeInput {
            app_id: self.app_id,
            environment_name: self.environment_name,
            client_token: self.client_token,
            theme_to_create: self.theme_to_create,
        })
    }
}
