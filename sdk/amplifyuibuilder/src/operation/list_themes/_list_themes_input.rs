// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListThemesInput {
    /// <p>The unique ID for the Amplify app.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    #[doc(hidden)]
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The token to request the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of theme results to return in the response.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl ListThemesInput {
    /// <p>The unique ID for the Amplify app.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(&self) -> std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of theme results to return in the response.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl ListThemesInput {
    /// Creates a new builder-style object to manufacture [`ListThemesInput`](crate::operation::list_themes::ListThemesInput).
    pub fn builder() -> crate::operation::list_themes::builders::ListThemesInputBuilder {
        crate::operation::list_themes::builders::ListThemesInputBuilder::default()
    }
}

/// A builder for [`ListThemesInput`](crate::operation::list_themes::ListThemesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListThemesInputBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) environment_name: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListThemesInputBuilder {
    /// <p>The unique ID for the Amplify app.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The unique ID for the Amplify app.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of theme results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of theme results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListThemesInput`](crate::operation::list_themes::ListThemesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_themes::ListThemesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_themes::ListThemesInput {
            app_id: self.app_id,
            environment_name: self.environment_name,
            next_token: self.next_token,
            max_results: self.max_results.unwrap_or_default(),
        })
    }
}
