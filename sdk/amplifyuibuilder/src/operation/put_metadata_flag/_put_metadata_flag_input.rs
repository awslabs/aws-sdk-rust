// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutMetadataFlagInput {
    /// <p>The unique ID for the Amplify app.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the feature associated with the metadata.</p>
    pub feature_name: ::std::option::Option<::std::string::String>,
    /// <p>The metadata information to store.</p>
    pub body: ::std::option::Option<crate::types::PutMetadataFlagBody>,
}
impl PutMetadataFlagInput {
    /// <p>The unique ID for the Amplify app.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The name of the feature associated with the metadata.</p>
    pub fn feature_name(&self) -> ::std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>The metadata information to store.</p>
    pub fn body(&self) -> ::std::option::Option<&crate::types::PutMetadataFlagBody> {
        self.body.as_ref()
    }
}
impl PutMetadataFlagInput {
    /// Creates a new builder-style object to manufacture [`PutMetadataFlagInput`](crate::operation::put_metadata_flag::PutMetadataFlagInput).
    pub fn builder() -> crate::operation::put_metadata_flag::builders::PutMetadataFlagInputBuilder {
        crate::operation::put_metadata_flag::builders::PutMetadataFlagInputBuilder::default()
    }
}

/// A builder for [`PutMetadataFlagInput`](crate::operation::put_metadata_flag::PutMetadataFlagInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutMetadataFlagInputBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) feature_name: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<crate::types::PutMetadataFlagBody>,
}
impl PutMetadataFlagInputBuilder {
    /// <p>The unique ID for the Amplify app.</p>
    /// This field is required.
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the Amplify app.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique ID for the Amplify app.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    /// This field is required.
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The name of the backend environment that is part of the Amplify app.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The name of the feature associated with the metadata.</p>
    /// This field is required.
    pub fn feature_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the feature associated with the metadata.</p>
    pub fn set_feature_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The name of the feature associated with the metadata.</p>
    pub fn get_feature_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_name
    }
    /// <p>The metadata information to store.</p>
    /// This field is required.
    pub fn body(mut self, input: crate::types::PutMetadataFlagBody) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata information to store.</p>
    pub fn set_body(mut self, input: ::std::option::Option<crate::types::PutMetadataFlagBody>) -> Self {
        self.body = input;
        self
    }
    /// <p>The metadata information to store.</p>
    pub fn get_body(&self) -> &::std::option::Option<crate::types::PutMetadataFlagBody> {
        &self.body
    }
    /// Consumes the builder and constructs a [`PutMetadataFlagInput`](crate::operation::put_metadata_flag::PutMetadataFlagInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_metadata_flag::PutMetadataFlagInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_metadata_flag::PutMetadataFlagInput {
            app_id: self.app_id,
            environment_name: self.environment_name,
            feature_name: self.feature_name,
            body: self.body,
        })
    }
}
