// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_codegen_generic_data_relationship_type(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CodegenGenericDataRelationshipType,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("type").string(input.r#type.as_str());
    }
    {
        object.key("relatedModelName").string(input.related_model_name.as_str());
    }
    if let Some(var_1) = &input.related_model_fields {
        let mut array_2 = object.key("relatedModelFields").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.can_unlink_associated_model {
        object.key("canUnlinkAssociatedModel").boolean(*var_4);
    }
    if let Some(var_5) = &input.related_join_field_name {
        object.key("relatedJoinFieldName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.related_join_table_name {
        object.key("relatedJoinTableName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.belongs_to_field_on_related_model {
        object.key("belongsToFieldOnRelatedModel").string(var_7.as_str());
    }
    if let Some(var_8) = &input.associated_fields {
        let mut array_9 = object.key("associatedFields").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.is_has_many_index {
        object.key("isHasManyIndex").boolean(*var_11);
    }
    Ok(())
}

pub(crate) fn de_codegen_generic_data_relationship_type<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CodegenGenericDataRelationshipType>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CodegenGenericDataRelationshipTypeBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::GenericDataRelationshipType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "relatedModelName" => {
                            builder = builder.set_related_model_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "relatedModelFields" => {
                            builder = builder.set_related_model_fields(
                                crate::protocol_serde::shape_related_model_fields_list::de_related_model_fields_list(tokens)?,
                            );
                        }
                        "canUnlinkAssociatedModel" => {
                            builder =
                                builder.set_can_unlink_associated_model(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "relatedJoinFieldName" => {
                            builder = builder.set_related_join_field_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "relatedJoinTableName" => {
                            builder = builder.set_related_join_table_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "belongsToFieldOnRelatedModel" => {
                            builder = builder.set_belongs_to_field_on_related_model(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "associatedFields" => {
                            builder = builder
                                .set_associated_fields(crate::protocol_serde::shape_associated_fields_list::de_associated_fields_list(tokens)?);
                        }
                        "isHasManyIndex" => {
                            builder = builder.set_is_has_many_index(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::codegen_generic_data_relationship_type_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
