// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_field_input_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FieldInputConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.r#type {
        object.key("type").string(var_1.as_str());
    }
    if let Some(var_2) = &input.required {
        object.key("required").boolean(*var_2);
    }
    if let Some(var_3) = &input.read_only {
        object.key("readOnly").boolean(*var_3);
    }
    if let Some(var_4) = &input.placeholder {
        object.key("placeholder").string(var_4.as_str());
    }
    if let Some(var_5) = &input.default_value {
        object.key("defaultValue").string(var_5.as_str());
    }
    if let Some(var_6) = &input.descriptive_text {
        object.key("descriptiveText").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_checked {
        object.key("defaultChecked").boolean(*var_7);
    }
    if let Some(var_8) = &input.default_country_code {
        object.key("defaultCountryCode").string(var_8.as_str());
    }
    if let Some(var_9) = &input.value_mappings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("valueMappings").start_object();
        crate::protocol_serde::shape_value_mappings::ser_value_mappings(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.name {
        object.key("name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.min_value {
        object.key("minValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.max_value {
        object.key("maxValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.step {
        object.key("step").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.value {
        object.key("value").string(var_15.as_str());
    }
    if let Some(var_16) = &input.is_array {
        object.key("isArray").boolean(*var_16);
    }
    Ok(())
}

pub(crate) fn de_field_input_config<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::FieldInputConfig>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FieldInputConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "required" => {
                                builder = builder.set_required(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "readOnly" => {
                                builder = builder.set_read_only(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "placeholder" => {
                                builder = builder.set_placeholder(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "defaultValue" => {
                                builder = builder.set_default_value(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "descriptiveText" => {
                                builder = builder.set_descriptive_text(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "defaultChecked" => {
                                builder = builder.set_default_checked(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "defaultCountryCode" => {
                                builder = builder.set_default_country_code(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "valueMappings" => {
                                builder = builder.set_value_mappings(
                                    crate::protocol_serde::shape_value_mappings::de_value_mappings(
                                        tokens,
                                    )?,
                                );
                            }
                            "name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "minValue" => {
                                builder = builder.set_min_value(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f32_lossy()),
                                );
                            }
                            "maxValue" => {
                                builder = builder.set_max_value(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f32_lossy()),
                                );
                            }
                            "step" => {
                                builder = builder.set_step(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f32_lossy()),
                                );
                            }
                            "value" => {
                                builder = builder.set_value(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "isArray" => {
                                builder = builder.set_is_array(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
