// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_form_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateFormData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.data_type {
        #[allow(unused_mut)]
        let mut object_2 = object.key("dataType").start_object();
        crate::protocol_serde::shape_form_data_type_config::ser_form_data_type_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    {
        object.key("formActionType").string(input.form_action_type.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_3 = object.key("fields").start_object();
        for (key_4, value_5) in &input.fields {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_field_config::ser_field_config(&mut object_6, value_5)?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.style {
        #[allow(unused_mut)]
        let mut object_8 = object.key("style").start_object();
        crate::protocol_serde::shape_form_style::ser_form_style(&mut object_8, var_7)?;
        object_8.finish();
    }
    {
        #[allow(unused_mut)]
        let mut object_9 = object.key("sectionalElements").start_object();
        for (key_10, value_11) in &input.sectional_elements {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                crate::protocol_serde::shape_sectional_element::ser_sectional_element(&mut object_12, value_11)?;
                object_12.finish();
            }
        }
        object_9.finish();
    }
    {
        object.key("schemaVersion").string(input.schema_version.as_str());
    }
    if let Some(var_13) = &input.cta {
        #[allow(unused_mut)]
        let mut object_14 = object.key("cta").start_object();
        crate::protocol_serde::shape_form_cta::ser_form_cta(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.label_decorator {
        object.key("labelDecorator").string(var_19.as_str());
    }
    Ok(())
}
