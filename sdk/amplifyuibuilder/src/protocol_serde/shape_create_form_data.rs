// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_form_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateFormData,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_type {
        #[allow(unused_mut)]
        let mut object_3 = object.key("dataType").start_object();
        crate::protocol_serde::shape_form_data_type_config::ser_form_data_type_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.form_action_type {
        object.key("formActionType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.fields {
        #[allow(unused_mut)]
        let mut object_6 = object.key("fields").start_object();
        for (key_7, value_8) in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_9 = object_6.key(key_7.as_str()).start_object();
                crate::protocol_serde::shape_field_config::ser_field_config(
                    &mut object_9,
                    value_8,
                )?;
                object_9.finish();
            }
        }
        object_6.finish();
    }
    if let Some(var_10) = &input.style {
        #[allow(unused_mut)]
        let mut object_11 = object.key("style").start_object();
        crate::protocol_serde::shape_form_style::ser_form_style(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.sectional_elements {
        #[allow(unused_mut)]
        let mut object_13 = object.key("sectionalElements").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_sectional_element::ser_sectional_element(
                    &mut object_16,
                    value_15,
                )?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.schema_version {
        object.key("schemaVersion").string(var_17.as_str());
    }
    if let Some(var_18) = &input.cta {
        #[allow(unused_mut)]
        let mut object_19 = object.key("cta").start_object();
        crate::protocol_serde::shape_form_cta::ser_form_cta(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.tags {
        #[allow(unused_mut)]
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    Ok(())
}
