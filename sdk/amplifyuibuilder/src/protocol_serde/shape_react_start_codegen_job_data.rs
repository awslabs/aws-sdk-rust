// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_react_start_codegen_job_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ReactStartCodegenJobData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.module {
        object.key("module").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target {
        object.key("target").string(var_2.as_str());
    }
    if let Some(var_3) = &input.script {
        object.key("script").string(var_3.as_str());
    }
    if input.render_type_declarations {
        object.key("renderTypeDeclarations").boolean(input.render_type_declarations);
    }
    if input.inline_source_map {
        object.key("inlineSourceMap").boolean(input.inline_source_map);
    }
    if let Some(var_4) = &input.api_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("apiConfiguration").start_object();
        crate::protocol_serde::shape_api_configuration::ser_api_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.dependencies {
        #[allow(unused_mut)]
        let mut object_7 = object.key("dependencies").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    Ok(())
}

pub(crate) fn de_react_start_codegen_job_data<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ReactStartCodegenJobData>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ReactStartCodegenJobDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "module" => {
                            builder = builder.set_module(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JsModule::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "target" => {
                            builder = builder.set_target(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JsTarget::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "script" => {
                            builder = builder.set_script(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JsScript::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "renderTypeDeclarations" => {
                            builder =
                                builder.set_render_type_declarations(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "inlineSourceMap" => {
                            builder = builder.set_inline_source_map(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "apiConfiguration" => {
                            builder = builder.set_api_configuration(crate::protocol_serde::shape_api_configuration::de_api_configuration(tokens)?);
                        }
                        "dependencies" => {
                            builder = builder.set_dependencies(
                                crate::protocol_serde::shape_react_codegen_dependencies::de_react_codegen_dependencies(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
