// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_component_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateComponentData,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_id {
        object.key("sourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.component_type {
        object.key("componentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.properties {
        #[allow(unused_mut)]
        let mut object_5 = object.key("properties").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                crate::protocol_serde::shape_component_property::ser_component_property(
                    &mut object_8,
                    value_7,
                )?;
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_9) = &input.children {
        let mut array_10 = object.key("children").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_component_child::ser_component_child(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.variants {
        let mut array_14 = object.key("variants").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_component_variant::ser_component_variant(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.overrides {
        #[allow(unused_mut)]
        let mut object_18 = object.key("overrides").start_object();
        for (key_19, value_20) in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_21 = object_18.key(key_19.as_str()).start_object();
                for (key_22, value_23) in value_20 {
                    {
                        object_21.key(key_22.as_str()).string(value_23.as_str());
                    }
                }
                object_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_24) = &input.binding_properties {
        #[allow(unused_mut)]
        let mut object_25 = object.key("bindingProperties").start_object();
        for (key_26, value_27) in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_28 = object_25.key(key_26.as_str()).start_object();
                crate::protocol_serde::shape_component_binding_properties_value::ser_component_binding_properties_value(&mut object_28, value_27)?;
                object_28.finish();
            }
        }
        object_25.finish();
    }
    if let Some(var_29) = &input.collection_properties {
        #[allow(unused_mut)]
        let mut object_30 = object.key("collectionProperties").start_object();
        for (key_31, value_32) in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_33 = object_30.key(key_31.as_str()).start_object();
                crate::protocol_serde::shape_component_data_configuration::ser_component_data_configuration(&mut object_33, value_32)?;
                object_33.finish();
            }
        }
        object_30.finish();
    }
    if let Some(var_34) = &input.tags {
        #[allow(unused_mut)]
        let mut object_35 = object.key("tags").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36.as_str()).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.events {
        #[allow(unused_mut)]
        let mut object_39 = object.key("events").start_object();
        for (key_40, value_41) in var_38 {
            {
                #[allow(unused_mut)]
                let mut object_42 = object_39.key(key_40.as_str()).start_object();
                crate::protocol_serde::shape_component_event::ser_component_event(
                    &mut object_42,
                    value_41,
                )?;
                object_42.finish();
            }
        }
        object_39.finish();
    }
    if let Some(var_43) = &input.schema_version {
        object.key("schemaVersion").string(var_43.as_str());
    }
    Ok(())
}
