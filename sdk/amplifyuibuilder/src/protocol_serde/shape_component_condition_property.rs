// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_component_condition_property(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ComponentConditionProperty,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.property {
        object.key("property").string(var_1.as_str());
    }
    if let Some(var_2) = &input.field {
        object.key("field").string(var_2.as_str());
    }
    if let Some(var_3) = &input.operator {
        object.key("operator").string(var_3.as_str());
    }
    if let Some(var_4) = &input.operand {
        object.key("operand").string(var_4.as_str());
    }
    if let Some(var_5) = &input.then {
        #[allow(unused_mut)]
        let mut object_6 = object.key("then").start_object();
        crate::protocol_serde::shape_component_property::ser_component_property(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.r#else {
        #[allow(unused_mut)]
        let mut object_8 = object.key("else").start_object();
        crate::protocol_serde::shape_component_property::ser_component_property(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.operand_type {
        object.key("operandType").string(var_9.as_str());
    }
    Ok(())
}

pub(crate) fn de_component_condition_property<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ComponentConditionProperty>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ComponentConditionPropertyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "property" => {
                            builder = builder.set_property(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "field" => {
                            builder = builder.set_field(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "operator" => {
                            builder = builder.set_operator(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "operand" => {
                            builder = builder.set_operand(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "then" => {
                            builder = builder.set_then(crate::protocol_serde::shape_component_property::de_component_property(tokens)?.map(Box::new));
                        }
                        "else" => {
                            builder = builder.set_else(crate::protocol_serde::shape_component_property::de_component_property(tokens)?.map(Box::new));
                        }
                        "operandType" => {
                            builder = builder.set_operand_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
