// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_component_child(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ComponentChild,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("componentType").string(input.component_type.as_str());
    }
    {
        object.key("name").string(input.name.as_str());
    }
    {
        #[allow(unused_mut)]
        let mut object_1 = object.key("properties").start_object();
        for (key_2, value_3) in &input.properties {
            {
                #[allow(unused_mut)]
                let mut object_4 = object_1.key(key_2.as_str()).start_object();
                crate::protocol_serde::shape_component_property::ser_component_property(&mut object_4, value_3)?;
                object_4.finish();
            }
        }
        object_1.finish();
    }
    if let Some(var_5) = &input.children {
        let mut array_6 = object.key("children").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_component_child::ser_component_child(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.events {
        #[allow(unused_mut)]
        let mut object_10 = object.key("events").start_object();
        for (key_11, value_12) in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_13 = object_10.key(key_11.as_str()).start_object();
                crate::protocol_serde::shape_component_event::ser_component_event(&mut object_13, value_12)?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.source_id {
        object.key("sourceId").string(var_14.as_str());
    }
    Ok(())
}

pub(crate) fn de_component_child<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ComponentChild>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ComponentChildBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "componentType" => {
                            builder = builder.set_component_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "properties" => {
                            builder = builder.set_properties(crate::protocol_serde::shape_component_properties::de_component_properties(tokens)?);
                        }
                        "children" => {
                            builder = builder.set_children(crate::protocol_serde::shape_component_child_list::de_component_child_list(tokens)?);
                        }
                        "events" => {
                            builder = builder.set_events(crate::protocol_serde::shape_component_events::de_component_events(tokens)?);
                        }
                        "sourceId" => {
                            builder = builder.set_source_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::component_child_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
