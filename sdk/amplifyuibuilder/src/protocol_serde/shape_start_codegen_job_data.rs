// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_codegen_job_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::StartCodegenJobData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.render_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("renderConfig").start_object();
        crate::protocol_serde::shape_codegen_job_render_config::ser_codegen_job_render_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.generic_data_schema {
        #[allow(unused_mut)]
        let mut object_4 = object.key("genericDataSchema").start_object();
        crate::protocol_serde::shape_codegen_job_generic_data_schema::ser_codegen_job_generic_data_schema(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.auto_generate_forms {
        object.key("autoGenerateForms").boolean(*var_5);
    }
    if let Some(var_6) = &input.features {
        #[allow(unused_mut)]
        let mut object_7 = object.key("features").start_object();
        crate::protocol_serde::shape_codegen_feature_flags::ser_codegen_feature_flags(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}
