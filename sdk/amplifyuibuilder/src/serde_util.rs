// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn exchange_code_for_token_output_correct_errors(
    mut builder: crate::operation::exchange_code_for_token::builders::ExchangeCodeForTokenOutputBuilder,
) -> crate::operation::exchange_code_for_token::builders::ExchangeCodeForTokenOutputBuilder {
    if builder.access_token.is_none() {
        builder.access_token = Some(Default::default())
    }
    if builder.expires_in.is_none() {
        builder.expires_in = Some(Default::default())
    }
    if builder.refresh_token.is_none() {
        builder.refresh_token = Some(Default::default())
    }
    builder
}

pub(crate) fn export_components_output_correct_errors(
    mut builder: crate::operation::export_components::builders::ExportComponentsOutputBuilder,
) -> crate::operation::export_components::builders::ExportComponentsOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn export_forms_output_correct_errors(
    mut builder: crate::operation::export_forms::builders::ExportFormsOutputBuilder,
) -> crate::operation::export_forms::builders::ExportFormsOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn export_themes_output_correct_errors(
    mut builder: crate::operation::export_themes::builders::ExportThemesOutputBuilder,
) -> crate::operation::export_themes::builders::ExportThemesOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn get_metadata_output_correct_errors(
    mut builder: crate::operation::get_metadata::builders::GetMetadataOutputBuilder,
) -> crate::operation::get_metadata::builders::GetMetadataOutputBuilder {
    if builder.features.is_none() {
        builder.features = Some(Default::default())
    }
    builder
}

pub(crate) fn list_codegen_jobs_output_correct_errors(
    mut builder: crate::operation::list_codegen_jobs::builders::ListCodegenJobsOutputBuilder,
) -> crate::operation::list_codegen_jobs::builders::ListCodegenJobsOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn list_components_output_correct_errors(
    mut builder: crate::operation::list_components::builders::ListComponentsOutputBuilder,
) -> crate::operation::list_components::builders::ListComponentsOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn list_forms_output_correct_errors(
    mut builder: crate::operation::list_forms::builders::ListFormsOutputBuilder,
) -> crate::operation::list_forms::builders::ListFormsOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn list_themes_output_correct_errors(
    mut builder: crate::operation::list_themes::builders::ListThemesOutputBuilder,
) -> crate::operation::list_themes::builders::ListThemesOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    builder
}

pub(crate) fn refresh_token_output_correct_errors(
    mut builder: crate::operation::refresh_token::builders::RefreshTokenOutputBuilder,
) -> crate::operation::refresh_token::builders::RefreshTokenOutputBuilder {
    if builder.access_token.is_none() {
        builder.access_token = Some(Default::default())
    }
    if builder.expires_in.is_none() {
        builder.expires_in = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_job_correct_errors(mut builder: crate::types::builders::CodegenJobBuilder) -> crate::types::builders::CodegenJobBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_job_summary_correct_errors(
    mut builder: crate::types::builders::CodegenJobSummaryBuilder,
) -> crate::types::builders::CodegenJobSummaryBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn component_correct_errors(mut builder: crate::types::builders::ComponentBuilder) -> crate::types::builders::ComponentBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.component_type.is_none() {
        builder.component_type = Some(Default::default())
    }
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    if builder.variants.is_none() {
        builder.variants = Some(Default::default())
    }
    if builder.overrides.is_none() {
        builder.overrides = Some(Default::default())
    }
    if builder.binding_properties.is_none() {
        builder.binding_properties = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn component_summary_correct_errors(
    mut builder: crate::types::builders::ComponentSummaryBuilder,
) -> crate::types::builders::ComponentSummaryBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.component_type.is_none() {
        builder.component_type = Some(Default::default())
    }
    builder
}

pub(crate) fn form_correct_errors(mut builder: crate::types::builders::FormBuilder) -> crate::types::builders::FormBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.form_action_type.is_none() {
        builder.form_action_type = "no value was set".parse::<crate::types::FormActionType>().ok()
    }
    if builder.style.is_none() {
        builder.style = {
            let builder = crate::types::builders::FormStyleBuilder::default();
            Some(builder.build())
        }
    }
    if builder.data_type.is_none() {
        builder.data_type = {
            let builder = crate::types::builders::FormDataTypeConfigBuilder::default();
            crate::serde_util::form_data_type_config_correct_errors(builder).build().ok()
        }
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    if builder.sectional_elements.is_none() {
        builder.sectional_elements = Some(Default::default())
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    builder
}

pub(crate) fn form_summary_correct_errors(mut builder: crate::types::builders::FormSummaryBuilder) -> crate::types::builders::FormSummaryBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = {
            let builder = crate::types::builders::FormDataTypeConfigBuilder::default();
            crate::serde_util::form_data_type_config_correct_errors(builder).build().ok()
        }
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.form_action_type.is_none() {
        builder.form_action_type = "no value was set".parse::<crate::types::FormActionType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn theme_correct_errors(mut builder: crate::types::builders::ThemeBuilder) -> crate::types::builders::ThemeBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn theme_summary_correct_errors(mut builder: crate::types::builders::ThemeSummaryBuilder) -> crate::types::builders::ThemeSummaryBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_job_generic_data_schema_correct_errors(
    mut builder: crate::types::builders::CodegenJobGenericDataSchemaBuilder,
) -> crate::types::builders::CodegenJobGenericDataSchemaBuilder {
    if builder.data_source_type.is_none() {
        builder.data_source_type = "no value was set".parse::<crate::types::CodegenJobGenericDataSourceType>().ok()
    }
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    if builder.enums.is_none() {
        builder.enums = Some(Default::default())
    }
    if builder.non_models.is_none() {
        builder.non_models = Some(Default::default())
    }
    builder
}

pub(crate) fn form_data_type_config_correct_errors(
    mut builder: crate::types::builders::FormDataTypeConfigBuilder,
) -> crate::types::builders::FormDataTypeConfigBuilder {
    if builder.data_source_type.is_none() {
        builder.data_source_type = "no value was set".parse::<crate::types::FormDataSourceType>().ok()
    }
    if builder.data_type_name.is_none() {
        builder.data_type_name = Some(Default::default())
    }
    builder
}

pub(crate) fn component_child_correct_errors(
    mut builder: crate::types::builders::ComponentChildBuilder,
) -> crate::types::builders::ComponentChildBuilder {
    if builder.component_type.is_none() {
        builder.component_type = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.properties.is_none() {
        builder.properties = Some(Default::default())
    }
    builder
}

pub(crate) fn component_data_configuration_correct_errors(
    mut builder: crate::types::builders::ComponentDataConfigurationBuilder,
) -> crate::types::builders::ComponentDataConfigurationBuilder {
    if builder.model.is_none() {
        builder.model = Some(Default::default())
    }
    builder
}

pub(crate) fn sectional_element_correct_errors(
    mut builder: crate::types::builders::SectionalElementBuilder,
) -> crate::types::builders::SectionalElementBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_generic_data_enum_correct_errors(
    mut builder: crate::types::builders::CodegenGenericDataEnumBuilder,
) -> crate::types::builders::CodegenGenericDataEnumBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_generic_data_model_correct_errors(
    mut builder: crate::types::builders::CodegenGenericDataModelBuilder,
) -> crate::types::builders::CodegenGenericDataModelBuilder {
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    if builder.primary_keys.is_none() {
        builder.primary_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_generic_data_non_model_correct_errors(
    mut builder: crate::types::builders::CodegenGenericDataNonModelBuilder,
) -> crate::types::builders::CodegenGenericDataNonModelBuilder {
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn component_property_binding_properties_correct_errors(
    mut builder: crate::types::builders::ComponentPropertyBindingPropertiesBuilder,
) -> crate::types::builders::ComponentPropertyBindingPropertiesBuilder {
    if builder.property.is_none() {
        builder.property = Some(Default::default())
    }
    builder
}

pub(crate) fn field_input_config_correct_errors(
    mut builder: crate::types::builders::FieldInputConfigBuilder,
) -> crate::types::builders::FieldInputConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn field_validation_configuration_correct_errors(
    mut builder: crate::types::builders::FieldValidationConfigurationBuilder,
) -> crate::types::builders::FieldValidationConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn file_uploader_field_config_correct_errors(
    mut builder: crate::types::builders::FileUploaderFieldConfigBuilder,
) -> crate::types::builders::FileUploaderFieldConfigBuilder {
    if builder.access_level.is_none() {
        builder.access_level = "no value was set".parse::<crate::types::StorageAccessLevel>().ok()
    }
    if builder.accepted_file_types.is_none() {
        builder.accepted_file_types = Some(Default::default())
    }
    builder
}

pub(crate) fn form_binding_element_correct_errors(
    mut builder: crate::types::builders::FormBindingElementBuilder,
) -> crate::types::builders::FormBindingElementBuilder {
    if builder.element.is_none() {
        builder.element = Some(Default::default())
    }
    if builder.property.is_none() {
        builder.property = Some(Default::default())
    }
    builder
}

pub(crate) fn graph_ql_render_config_correct_errors(
    mut builder: crate::types::builders::GraphQlRenderConfigBuilder,
) -> crate::types::builders::GraphQlRenderConfigBuilder {
    if builder.types_file_path.is_none() {
        builder.types_file_path = Some(Default::default())
    }
    if builder.queries_file_path.is_none() {
        builder.queries_file_path = Some(Default::default())
    }
    if builder.mutations_file_path.is_none() {
        builder.mutations_file_path = Some(Default::default())
    }
    if builder.subscriptions_file_path.is_none() {
        builder.subscriptions_file_path = Some(Default::default())
    }
    if builder.fragments_file_path.is_none() {
        builder.fragments_file_path = Some(Default::default())
    }
    builder
}

pub(crate) fn mutation_action_set_state_parameter_correct_errors(
    mut builder: crate::types::builders::MutationActionSetStateParameterBuilder,
) -> crate::types::builders::MutationActionSetStateParameterBuilder {
    if builder.component_name.is_none() {
        builder.component_name = Some(Default::default())
    }
    if builder.property.is_none() {
        builder.property = Some(Default::default())
    }
    if builder.set.is_none() {
        builder.set = {
            let builder = crate::types::builders::ComponentPropertyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sort_property_correct_errors(mut builder: crate::types::builders::SortPropertyBuilder) -> crate::types::builders::SortPropertyBuilder {
    if builder.field.is_none() {
        builder.field = Some(Default::default())
    }
    if builder.direction.is_none() {
        builder.direction = "no value was set".parse::<crate::types::SortDirection>().ok()
    }
    builder
}

pub(crate) fn value_mappings_correct_errors(
    mut builder: crate::types::builders::ValueMappingsBuilder,
) -> crate::types::builders::ValueMappingsBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_generic_data_field_correct_errors(
    mut builder: crate::types::builders::CodegenGenericDataFieldBuilder,
) -> crate::types::builders::CodegenGenericDataFieldBuilder {
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::CodegenGenericDataFieldDataType>().ok()
    }
    if builder.data_type_value.is_none() {
        builder.data_type_value = Some(Default::default())
    }
    if builder.required.is_none() {
        builder.required = Some(Default::default())
    }
    if builder.read_only.is_none() {
        builder.read_only = Some(Default::default())
    }
    if builder.is_array.is_none() {
        builder.is_array = Some(Default::default())
    }
    builder
}

pub(crate) fn codegen_generic_data_relationship_type_correct_errors(
    mut builder: crate::types::builders::CodegenGenericDataRelationshipTypeBuilder,
) -> crate::types::builders::CodegenGenericDataRelationshipTypeBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GenericDataRelationshipType>().ok()
    }
    if builder.related_model_name.is_none() {
        builder.related_model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn value_mapping_correct_errors(mut builder: crate::types::builders::ValueMappingBuilder) -> crate::types::builders::ValueMappingBuilder {
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::FormInputValuePropertyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn form_input_value_property_binding_properties_correct_errors(
    mut builder: crate::types::builders::FormInputValuePropertyBindingPropertiesBuilder,
) -> crate::types::builders::FormInputValuePropertyBindingPropertiesBuilder {
    if builder.property.is_none() {
        builder.property = Some(Default::default())
    }
    builder
}
