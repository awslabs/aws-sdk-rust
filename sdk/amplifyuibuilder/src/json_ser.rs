// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_model_create_component_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateComponentData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_id {
        object.key("sourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.component_type {
        object.key("componentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.properties {
        let mut object_5 = object.key("properties").start_object();
        for (key_6, value_7) in var_4 {
            {
                let mut object_8 = object_5.key(key_6).start_object();
                crate::json_ser::serialize_structure_crate_model_component_property(
                    &mut object_8,
                    value_7,
                )?;
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_9) = &input.children {
        let mut array_10 = object.key("children").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_child(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.variants {
        let mut array_14 = object.key("variants").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_variant(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.overrides {
        let mut object_18 = object.key("overrides").start_object();
        for (key_19, value_20) in var_17 {
            {
                let mut object_21 = object_18.key(key_19).start_object();
                for (key_22, value_23) in value_20 {
                    {
                        object_21.key(key_22).string(value_23.as_str());
                    }
                }
                object_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_24) = &input.binding_properties {
        let mut object_25 = object.key("bindingProperties").start_object();
        for (key_26, value_27) in var_24 {
            {
                let mut object_28 = object_25.key(key_26).start_object();
                crate::json_ser::serialize_structure_crate_model_component_binding_properties_value(&mut object_28, value_27)?;
                object_28.finish();
            }
        }
        object_25.finish();
    }
    if let Some(var_29) = &input.collection_properties {
        let mut object_30 = object.key("collectionProperties").start_object();
        for (key_31, value_32) in var_29 {
            {
                let mut object_33 = object_30.key(key_31).start_object();
                crate::json_ser::serialize_structure_crate_model_component_data_configuration(
                    &mut object_33,
                    value_32,
                )?;
                object_33.finish();
            }
        }
        object_30.finish();
    }
    if let Some(var_34) = &input.tags {
        let mut object_35 = object.key("tags").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.events {
        let mut object_39 = object.key("events").start_object();
        for (key_40, value_41) in var_38 {
            {
                let mut object_42 = object_39.key(key_40).start_object();
                crate::json_ser::serialize_structure_crate_model_component_event(
                    &mut object_42,
                    value_41,
                )?;
                object_42.finish();
            }
        }
        object_39.finish();
    }
    if let Some(var_43) = &input.schema_version {
        object.key("schemaVersion").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_theme_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateThemeData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.name {
        object.key("name").string(var_44.as_str());
    }
    if let Some(var_45) = &input.values {
        let mut array_46 = object.key("values").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_theme_values(
                    &mut object_48,
                    item_47,
                )?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.overrides {
        let mut array_50 = object.key("overrides").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_theme_values(
                    &mut object_52,
                    item_51,
                )?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.tags {
        let mut object_54 = object.key("tags").start_object();
        for (key_55, value_56) in var_53 {
            {
                object_54.key(key_55).string(value_56.as_str());
            }
        }
        object_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exchange_code_for_token_request_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExchangeCodeForTokenRequestBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.code {
        object.key("code").string(var_57.as_str());
    }
    if let Some(var_58) = &input.redirect_uri {
        object.key("redirectUri").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_refresh_token_request_body(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RefreshTokenRequestBody,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.token {
        object.key("token").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_component_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateComponentData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.id {
        object.key("id").string(var_60.as_str());
    }
    if let Some(var_61) = &input.name {
        object.key("name").string(var_61.as_str());
    }
    if let Some(var_62) = &input.source_id {
        object.key("sourceId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.component_type {
        object.key("componentType").string(var_63.as_str());
    }
    if let Some(var_64) = &input.properties {
        let mut object_65 = object.key("properties").start_object();
        for (key_66, value_67) in var_64 {
            {
                let mut object_68 = object_65.key(key_66).start_object();
                crate::json_ser::serialize_structure_crate_model_component_property(
                    &mut object_68,
                    value_67,
                )?;
                object_68.finish();
            }
        }
        object_65.finish();
    }
    if let Some(var_69) = &input.children {
        let mut array_70 = object.key("children").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_child(
                    &mut object_72,
                    item_71,
                )?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.variants {
        let mut array_74 = object.key("variants").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_variant(
                    &mut object_76,
                    item_75,
                )?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.overrides {
        let mut object_78 = object.key("overrides").start_object();
        for (key_79, value_80) in var_77 {
            {
                let mut object_81 = object_78.key(key_79).start_object();
                for (key_82, value_83) in value_80 {
                    {
                        object_81.key(key_82).string(value_83.as_str());
                    }
                }
                object_81.finish();
            }
        }
        object_78.finish();
    }
    if let Some(var_84) = &input.binding_properties {
        let mut object_85 = object.key("bindingProperties").start_object();
        for (key_86, value_87) in var_84 {
            {
                let mut object_88 = object_85.key(key_86).start_object();
                crate::json_ser::serialize_structure_crate_model_component_binding_properties_value(&mut object_88, value_87)?;
                object_88.finish();
            }
        }
        object_85.finish();
    }
    if let Some(var_89) = &input.collection_properties {
        let mut object_90 = object.key("collectionProperties").start_object();
        for (key_91, value_92) in var_89 {
            {
                let mut object_93 = object_90.key(key_91).start_object();
                crate::json_ser::serialize_structure_crate_model_component_data_configuration(
                    &mut object_93,
                    value_92,
                )?;
                object_93.finish();
            }
        }
        object_90.finish();
    }
    if let Some(var_94) = &input.events {
        let mut object_95 = object.key("events").start_object();
        for (key_96, value_97) in var_94 {
            {
                let mut object_98 = object_95.key(key_96).start_object();
                crate::json_ser::serialize_structure_crate_model_component_event(
                    &mut object_98,
                    value_97,
                )?;
                object_98.finish();
            }
        }
        object_95.finish();
    }
    if let Some(var_99) = &input.schema_version {
        object.key("schemaVersion").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_theme_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateThemeData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.id {
        object.key("id").string(var_100.as_str());
    }
    if let Some(var_101) = &input.name {
        object.key("name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.values {
        let mut array_103 = object.key("values").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_theme_values(
                    &mut object_105,
                    item_104,
                )?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.overrides {
        let mut array_107 = object.key("overrides").start_array();
        for item_108 in var_106 {
            {
                let mut object_109 = array_107.value().start_object();
                crate::json_ser::serialize_structure_crate_model_theme_values(
                    &mut object_109,
                    item_108,
                )?;
                object_109.finish();
            }
        }
        array_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.value {
        object.key("value").string(var_110.as_str());
    }
    if let Some(var_111) = &input.binding_properties {
        let mut object_112 = object.key("bindingProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property_binding_properties(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    if let Some(var_113) = &input.collection_binding_properties {
        let mut object_114 = object.key("collectionBindingProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property_binding_properties(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.default_value {
        object.key("defaultValue").string(var_115.as_str());
    }
    if let Some(var_116) = &input.model {
        object.key("model").string(var_116.as_str());
    }
    if let Some(var_117) = &input.bindings {
        let mut object_118 = object.key("bindings").start_object();
        for (key_119, value_120) in var_117 {
            {
                let mut object_121 = object_118.key(key_119).start_object();
                crate::json_ser::serialize_structure_crate_model_form_binding_element(
                    &mut object_121,
                    value_120,
                )?;
                object_121.finish();
            }
        }
        object_118.finish();
    }
    if let Some(var_122) = &input.event {
        object.key("event").string(var_122.as_str());
    }
    if let Some(var_123) = &input.user_attribute {
        object.key("userAttribute").string(var_123.as_str());
    }
    if let Some(var_124) = &input.concat {
        let mut array_125 = object.key("concat").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_property(
                    &mut object_127,
                    item_126,
                )?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if let Some(var_128) = &input.condition {
        let mut object_129 = object.key("condition").start_object();
        crate::json_ser::serialize_structure_crate_model_component_condition_property(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.configured {
        object.key("configured").boolean(*var_130);
    }
    if let Some(var_131) = &input.r#type {
        object.key("type").string(var_131.as_str());
    }
    if let Some(var_132) = &input.imported_value {
        object.key("importedValue").string(var_132.as_str());
    }
    if let Some(var_133) = &input.component_name {
        object.key("componentName").string(var_133.as_str());
    }
    if let Some(var_134) = &input.property {
        object.key("property").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_child(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentChild,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.component_type {
        object.key("componentType").string(var_135.as_str());
    }
    if let Some(var_136) = &input.name {
        object.key("name").string(var_136.as_str());
    }
    if let Some(var_137) = &input.properties {
        let mut object_138 = object.key("properties").start_object();
        for (key_139, value_140) in var_137 {
            {
                let mut object_141 = object_138.key(key_139).start_object();
                crate::json_ser::serialize_structure_crate_model_component_property(
                    &mut object_141,
                    value_140,
                )?;
                object_141.finish();
            }
        }
        object_138.finish();
    }
    if let Some(var_142) = &input.children {
        let mut array_143 = object.key("children").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_child(
                    &mut object_145,
                    item_144,
                )?;
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.events {
        let mut object_147 = object.key("events").start_object();
        for (key_148, value_149) in var_146 {
            {
                let mut object_150 = object_147.key(key_148).start_object();
                crate::json_ser::serialize_structure_crate_model_component_event(
                    &mut object_150,
                    value_149,
                )?;
                object_150.finish();
            }
        }
        object_147.finish();
    }
    if let Some(var_151) = &input.source_id {
        object.key("sourceId").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_variant(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentVariant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.variant_values {
        let mut object_153 = object.key("variantValues").start_object();
        for (key_154, value_155) in var_152 {
            {
                object_153.key(key_154).string(value_155.as_str());
            }
        }
        object_153.finish();
    }
    if let Some(var_156) = &input.overrides {
        let mut object_157 = object.key("overrides").start_object();
        for (key_158, value_159) in var_156 {
            {
                let mut object_160 = object_157.key(key_158).start_object();
                for (key_161, value_162) in value_159 {
                    {
                        object_160.key(key_161).string(value_162.as_str());
                    }
                }
                object_160.finish();
            }
        }
        object_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_binding_properties_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentBindingPropertiesValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.r#type {
        object.key("type").string(var_163.as_str());
    }
    if let Some(var_164) = &input.binding_properties {
        let mut object_165 = object.key("bindingProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_component_binding_properties_value_properties(&mut object_165, var_164)?;
        object_165.finish();
    }
    if let Some(var_166) = &input.default_value {
        object.key("defaultValue").string(var_166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_data_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentDataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.model {
        object.key("model").string(var_167.as_str());
    }
    if let Some(var_168) = &input.sort {
        let mut array_169 = object.key("sort").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_property(
                    &mut object_171,
                    item_170,
                )?;
                object_171.finish();
            }
        }
        array_169.finish();
    }
    if let Some(var_172) = &input.predicate {
        let mut object_173 = object.key("predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_173, var_172)?;
        object_173.finish();
    }
    if let Some(var_174) = &input.identifiers {
        let mut array_175 = object.key("identifiers").start_array();
        for item_176 in var_174 {
            {
                array_175.value().string(item_176.as_str());
            }
        }
        array_175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_event(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentEvent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.action {
        object.key("action").string(var_177.as_str());
    }
    if let Some(var_178) = &input.parameters {
        let mut object_179 = object.key("parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_action_parameters(
            &mut object_179,
            var_178,
        )?;
        object_179.finish();
    }
    if let Some(var_180) = &input.binding_event {
        object.key("bindingEvent").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_theme_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.key {
        object.key("key").string(var_181.as_str());
    }
    if let Some(var_182) = &input.value {
        let mut object_183 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_theme_value(&mut object_183, var_182)?;
        object_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_property_binding_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentPropertyBindingProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.property {
        object.key("property").string(var_184.as_str());
    }
    if let Some(var_185) = &input.field {
        object.key("field").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_form_binding_element(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FormBindingElement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.element {
        object.key("element").string(var_186.as_str());
    }
    if let Some(var_187) = &input.property {
        object.key("property").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_condition_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentConditionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.property {
        object.key("property").string(var_188.as_str());
    }
    if let Some(var_189) = &input.field {
        object.key("field").string(var_189.as_str());
    }
    if let Some(var_190) = &input.operator {
        object.key("operator").string(var_190.as_str());
    }
    if let Some(var_191) = &input.operand {
        object.key("operand").string(var_191.as_str());
    }
    if let Some(var_192) = &input.then {
        let mut object_193 = object.key("then").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_193,
            var_192,
        )?;
        object_193.finish();
    }
    if let Some(var_194) = &input.r#else {
        let mut object_195 = object.key("else").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_195,
            var_194,
        )?;
        object_195.finish();
    }
    if let Some(var_196) = &input.operand_type {
        object.key("operandType").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_binding_properties_value_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentBindingPropertiesValueProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.model {
        object.key("model").string(var_197.as_str());
    }
    if let Some(var_198) = &input.field {
        object.key("field").string(var_198.as_str());
    }
    if let Some(var_199) = &input.predicates {
        let mut array_200 = object.key("predicates").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_predicate(
                    &mut object_202,
                    item_201,
                )?;
                object_202.finish();
            }
        }
        array_200.finish();
    }
    if let Some(var_203) = &input.user_attribute {
        object.key("userAttribute").string(var_203.as_str());
    }
    if let Some(var_204) = &input.bucket {
        object.key("bucket").string(var_204.as_str());
    }
    if let Some(var_205) = &input.key {
        object.key("key").string(var_205.as_str());
    }
    if let Some(var_206) = &input.default_value {
        object.key("defaultValue").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.field {
        object.key("field").string(var_207.as_str());
    }
    if let Some(var_208) = &input.direction {
        object.key("direction").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.or {
        let mut array_210 = object.key("or").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_predicate(
                    &mut object_212,
                    item_211,
                )?;
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.and {
        let mut array_214 = object.key("and").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_predicate(
                    &mut object_216,
                    item_215,
                )?;
                object_216.finish();
            }
        }
        array_214.finish();
    }
    if let Some(var_217) = &input.field {
        object.key("field").string(var_217.as_str());
    }
    if let Some(var_218) = &input.operator {
        object.key("operator").string(var_218.as_str());
    }
    if let Some(var_219) = &input.operand {
        object.key("operand").string(var_219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.r#type {
        let mut object_221 = object.key("type").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_221,
            var_220,
        )?;
        object_221.finish();
    }
    if let Some(var_222) = &input.url {
        let mut object_223 = object.key("url").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_223,
            var_222,
        )?;
        object_223.finish();
    }
    if let Some(var_224) = &input.anchor {
        let mut object_225 = object.key("anchor").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_225,
            var_224,
        )?;
        object_225.finish();
    }
    if let Some(var_226) = &input.target {
        let mut object_227 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    if let Some(var_228) = &input.global {
        let mut object_229 = object.key("global").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    if let Some(var_230) = &input.model {
        object.key("model").string(var_230.as_str());
    }
    if let Some(var_231) = &input.id {
        let mut object_232 = object.key("id").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_232,
            var_231,
        )?;
        object_232.finish();
    }
    if let Some(var_233) = &input.fields {
        let mut object_234 = object.key("fields").start_object();
        for (key_235, value_236) in var_233 {
            {
                let mut object_237 = object_234.key(key_235).start_object();
                crate::json_ser::serialize_structure_crate_model_component_property(
                    &mut object_237,
                    value_236,
                )?;
                object_237.finish();
            }
        }
        object_234.finish();
    }
    if let Some(var_238) = &input.state {
        let mut object_239 = object.key("state").start_object();
        crate::json_ser::serialize_structure_crate_model_mutation_action_set_state_parameter(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_theme_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThemeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.value {
        object.key("value").string(var_240.as_str());
    }
    if let Some(var_241) = &input.children {
        let mut array_242 = object.key("children").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_theme_values(
                    &mut object_244,
                    item_243,
                )?;
                object_244.finish();
            }
        }
        array_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mutation_action_set_state_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MutationActionSetStateParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.component_name {
        object.key("componentName").string(var_245.as_str());
    }
    if let Some(var_246) = &input.property {
        object.key("property").string(var_246.as_str());
    }
    if let Some(var_247) = &input.set {
        let mut object_248 = object.key("set").start_object();
        crate::json_ser::serialize_structure_crate_model_component_property(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    Ok(())
}
