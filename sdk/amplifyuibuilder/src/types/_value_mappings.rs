// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data binding configuration for a value map.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValueMappings {
    /// <p>The value and display value pairs.</p>
    pub values: ::std::vec::Vec<crate::types::ValueMapping>,
    /// <p>The information to bind fields to data at runtime.</p>
    pub binding_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormInputBindingPropertiesValue>>,
}
impl ValueMappings {
    /// <p>The value and display value pairs.</p>
    pub fn values(&self) -> &[crate::types::ValueMapping] {
        use std::ops::Deref;
        self.values.deref()
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn binding_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::FormInputBindingPropertiesValue>> {
        self.binding_properties.as_ref()
    }
}
impl ValueMappings {
    /// Creates a new builder-style object to manufacture [`ValueMappings`](crate::types::ValueMappings).
    pub fn builder() -> crate::types::builders::ValueMappingsBuilder {
        crate::types::builders::ValueMappingsBuilder::default()
    }
}

/// A builder for [`ValueMappings`](crate::types::ValueMappings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValueMappingsBuilder {
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::ValueMapping>>,
    pub(crate) binding_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormInputBindingPropertiesValue>>,
}
impl ValueMappingsBuilder {
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value and display value pairs.</p>
    pub fn values(mut self, input: crate::types::ValueMapping) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value and display value pairs.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ValueMapping>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The value and display value pairs.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ValueMapping>> {
        &self.values
    }
    /// Adds a key-value pair to `binding_properties`.
    ///
    /// To override the contents of this collection use [`set_binding_properties`](Self::set_binding_properties).
    ///
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn binding_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::FormInputBindingPropertiesValue,
    ) -> Self {
        let mut hash_map = self.binding_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.binding_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn set_binding_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormInputBindingPropertiesValue>>,
    ) -> Self {
        self.binding_properties = input;
        self
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn get_binding_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormInputBindingPropertiesValue>> {
        &self.binding_properties
    }
    /// Consumes the builder and constructs a [`ValueMappings`](crate::types::ValueMappings).
    /// This method will fail if any of the following fields are not set:
    /// - [`values`](crate::types::builders::ValueMappingsBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::ValueMappings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValueMappings {
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building ValueMappings",
                )
            })?,
            binding_properties: self.binding_properties,
        })
    }
}
