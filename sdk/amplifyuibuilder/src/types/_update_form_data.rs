// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates and saves all of the information about a form, based on form ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFormData {
    /// <p>The name of the form.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of data source to use to create the form.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<crate::types::FormDataTypeConfig>,
    /// <p>Specifies whether to perform a create or update action on the form.</p>
    #[doc(hidden)]
    pub form_action_type: std::option::Option<crate::types::FormActionType>,
    /// <p>The configuration information for the form's fields.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FieldConfig>,
    >,
    /// <p>The configuration for the form's style.</p>
    #[doc(hidden)]
    pub style: std::option::Option<crate::types::FormStyle>,
    /// <p>The configuration information for the visual helper elements for the form. These elements are not associated with any data.</p>
    #[doc(hidden)]
    pub sectional_elements: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SectionalElement>,
    >,
    /// <p>The schema version of the form.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>The <code>FormCTA</code> object that stores the call to action configuration for the form.</p>
    #[doc(hidden)]
    pub cta: std::option::Option<crate::types::FormCta>,
}
impl UpdateFormData {
    /// <p>The name of the form.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of data source to use to create the form.</p>
    pub fn data_type(&self) -> std::option::Option<&crate::types::FormDataTypeConfig> {
        self.data_type.as_ref()
    }
    /// <p>Specifies whether to perform a create or update action on the form.</p>
    pub fn form_action_type(&self) -> std::option::Option<&crate::types::FormActionType> {
        self.form_action_type.as_ref()
    }
    /// <p>The configuration information for the form's fields.</p>
    pub fn fields(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::FieldConfig>,
    > {
        self.fields.as_ref()
    }
    /// <p>The configuration for the form's style.</p>
    pub fn style(&self) -> std::option::Option<&crate::types::FormStyle> {
        self.style.as_ref()
    }
    /// <p>The configuration information for the visual helper elements for the form. These elements are not associated with any data.</p>
    pub fn sectional_elements(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::SectionalElement>,
    > {
        self.sectional_elements.as_ref()
    }
    /// <p>The schema version of the form.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>The <code>FormCTA</code> object that stores the call to action configuration for the form.</p>
    pub fn cta(&self) -> std::option::Option<&crate::types::FormCta> {
        self.cta.as_ref()
    }
}
impl UpdateFormData {
    /// Creates a new builder-style object to manufacture [`UpdateFormData`](crate::types::UpdateFormData).
    pub fn builder() -> crate::types::builders::UpdateFormDataBuilder {
        crate::types::builders::UpdateFormDataBuilder::default()
    }
}

/// A builder for [`UpdateFormData`](crate::types::UpdateFormData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFormDataBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<crate::types::FormDataTypeConfig>,
    pub(crate) form_action_type: std::option::Option<crate::types::FormActionType>,
    pub(crate) fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FieldConfig>,
    >,
    pub(crate) style: std::option::Option<crate::types::FormStyle>,
    pub(crate) sectional_elements: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SectionalElement>,
    >,
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) cta: std::option::Option<crate::types::FormCta>,
}
impl UpdateFormDataBuilder {
    /// <p>The name of the form.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the form.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of data source to use to create the form.</p>
    pub fn data_type(mut self, input: crate::types::FormDataTypeConfig) -> Self {
        self.data_type = Some(input);
        self
    }
    /// <p>The type of data source to use to create the form.</p>
    pub fn set_data_type(
        mut self,
        input: std::option::Option<crate::types::FormDataTypeConfig>,
    ) -> Self {
        self.data_type = input;
        self
    }
    /// <p>Specifies whether to perform a create or update action on the form.</p>
    pub fn form_action_type(mut self, input: crate::types::FormActionType) -> Self {
        self.form_action_type = Some(input);
        self
    }
    /// <p>Specifies whether to perform a create or update action on the form.</p>
    pub fn set_form_action_type(
        mut self,
        input: std::option::Option<crate::types::FormActionType>,
    ) -> Self {
        self.form_action_type = input;
        self
    }
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The configuration information for the form's fields.</p>
    pub fn fields(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::FieldConfig,
    ) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = Some(hash_map);
        self
    }
    /// <p>The configuration information for the form's fields.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::FieldConfig>,
        >,
    ) -> Self {
        self.fields = input;
        self
    }
    /// <p>The configuration for the form's style.</p>
    pub fn style(mut self, input: crate::types::FormStyle) -> Self {
        self.style = Some(input);
        self
    }
    /// <p>The configuration for the form's style.</p>
    pub fn set_style(mut self, input: std::option::Option<crate::types::FormStyle>) -> Self {
        self.style = input;
        self
    }
    /// Adds a key-value pair to `sectional_elements`.
    ///
    /// To override the contents of this collection use [`set_sectional_elements`](Self::set_sectional_elements).
    ///
    /// <p>The configuration information for the visual helper elements for the form. These elements are not associated with any data.</p>
    pub fn sectional_elements(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::SectionalElement,
    ) -> Self {
        let mut hash_map = self.sectional_elements.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.sectional_elements = Some(hash_map);
        self
    }
    /// <p>The configuration information for the visual helper elements for the form. These elements are not associated with any data.</p>
    pub fn set_sectional_elements(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::SectionalElement>,
        >,
    ) -> Self {
        self.sectional_elements = input;
        self
    }
    /// <p>The schema version of the form.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The schema version of the form.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The <code>FormCTA</code> object that stores the call to action configuration for the form.</p>
    pub fn cta(mut self, input: crate::types::FormCta) -> Self {
        self.cta = Some(input);
        self
    }
    /// <p>The <code>FormCTA</code> object that stores the call to action configuration for the form.</p>
    pub fn set_cta(mut self, input: std::option::Option<crate::types::FormCta>) -> Self {
        self.cta = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFormData`](crate::types::UpdateFormData).
    pub fn build(self) -> crate::types::UpdateFormData {
        crate::types::UpdateFormData {
            name: self.name,
            data_type: self.data_type,
            form_action_type: self.form_action_type,
            fields: self.fields,
            style: self.style,
            sectional_elements: self.sectional_elements,
            schema_version: self.schema_version,
            cta: self.cta,
        }
    }
}
