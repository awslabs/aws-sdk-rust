// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of a component. This is a read-only data type that is returned by <code>ListComponents</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentSummary {
    /// <p>The unique ID of the Amplify app associated with the component.</p>
    #[doc(hidden)]
    pub app_id: std::option::Option<std::string::String>,
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    #[doc(hidden)]
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The unique ID of the component.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the component.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The component type.</p>
    #[doc(hidden)]
    pub component_type: std::option::Option<std::string::String>,
}
impl ComponentSummary {
    /// <p>The unique ID of the Amplify app associated with the component.</p>
    pub fn app_id(&self) -> std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(&self) -> std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The unique ID of the component.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the component.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The component type.</p>
    pub fn component_type(&self) -> std::option::Option<&str> {
        self.component_type.as_deref()
    }
}
impl ComponentSummary {
    /// Creates a new builder-style object to manufacture [`ComponentSummary`](crate::types::ComponentSummary).
    pub fn builder() -> crate::types::builders::ComponentSummaryBuilder {
        crate::types::builders::ComponentSummaryBuilder::default()
    }
}

/// A builder for [`ComponentSummary`](crate::types::ComponentSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentSummaryBuilder {
    pub(crate) app_id: std::option::Option<std::string::String>,
    pub(crate) environment_name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) component_type: std::option::Option<std::string::String>,
}
impl ComponentSummaryBuilder {
    /// <p>The unique ID of the Amplify app associated with the component.</p>
    pub fn app_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the Amplify app associated with the component.</p>
    pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_name = Some(input.into());
        self
    }
    /// <p>The name of the backend environment that is a part of the Amplify app.</p>
    pub fn set_environment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The unique ID of the component.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID of the component.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the component.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The component type.</p>
    pub fn component_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_type = Some(input.into());
        self
    }
    /// <p>The component type.</p>
    pub fn set_component_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentSummary`](crate::types::ComponentSummary).
    pub fn build(self) -> crate::types::ComponentSummary {
        crate::types::ComponentSummary {
            app_id: self.app_id,
            environment_name: self.environment_name,
            id: self.id,
            name: self.name,
            component_type: self.component_type,
        }
    }
}
