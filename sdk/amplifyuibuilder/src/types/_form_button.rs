// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for a button UI element that is a part of a form.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FormButton {
    /// <p>Specifies whether the button is visible on the form.</p>
    #[doc(hidden)]
    pub excluded: std::option::Option<bool>,
    /// <p>Describes the button's properties.</p>
    #[doc(hidden)]
    pub children: std::option::Option<std::string::String>,
    /// <p>The position of the button.</p>
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::FieldPosition>,
}
impl FormButton {
    /// <p>Specifies whether the button is visible on the form.</p>
    pub fn excluded(&self) -> std::option::Option<bool> {
        self.excluded
    }
    /// <p>Describes the button's properties.</p>
    pub fn children(&self) -> std::option::Option<&str> {
        self.children.as_deref()
    }
    /// <p>The position of the button.</p>
    pub fn position(&self) -> std::option::Option<&crate::types::FieldPosition> {
        self.position.as_ref()
    }
}
impl FormButton {
    /// Creates a new builder-style object to manufacture [`FormButton`](crate::types::FormButton).
    pub fn builder() -> crate::types::builders::FormButtonBuilder {
        crate::types::builders::FormButtonBuilder::default()
    }
}

/// A builder for [`FormButton`](crate::types::FormButton).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FormButtonBuilder {
    pub(crate) excluded: std::option::Option<bool>,
    pub(crate) children: std::option::Option<std::string::String>,
    pub(crate) position: std::option::Option<crate::types::FieldPosition>,
}
impl FormButtonBuilder {
    /// <p>Specifies whether the button is visible on the form.</p>
    pub fn excluded(mut self, input: bool) -> Self {
        self.excluded = Some(input);
        self
    }
    /// <p>Specifies whether the button is visible on the form.</p>
    pub fn set_excluded(mut self, input: std::option::Option<bool>) -> Self {
        self.excluded = input;
        self
    }
    /// <p>Describes the button's properties.</p>
    pub fn children(mut self, input: impl Into<std::string::String>) -> Self {
        self.children = Some(input.into());
        self
    }
    /// <p>Describes the button's properties.</p>
    pub fn set_children(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.children = input;
        self
    }
    /// <p>The position of the button.</p>
    pub fn position(mut self, input: crate::types::FieldPosition) -> Self {
        self.position = Some(input);
        self
    }
    /// <p>The position of the button.</p>
    pub fn set_position(mut self, input: std::option::Option<crate::types::FieldPosition>) -> Self {
        self.position = input;
        self
    }
    /// Consumes the builder and constructs a [`FormButton`](crate::types::FormButton).
    pub fn build(self) -> crate::types::FormButton {
        crate::types::FormButton {
            excluded: self.excluded,
            children: self.children,
            position: self.position,
        }
    }
}
