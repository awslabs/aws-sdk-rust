// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Saves the data binding information for a theme.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateThemeData {
    /// <p>The unique ID of the theme to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the theme to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub values: ::std::vec::Vec<crate::types::ThemeValues>,
    /// <p>Describes the properties that can be overriden to customize the theme.</p>
    pub overrides: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>,
}
impl UpdateThemeData {
    /// <p>The unique ID of the theme to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the theme to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn values(&self) -> &[crate::types::ThemeValues] {
        use std::ops::Deref;
        self.values.deref()
    }
    /// <p>Describes the properties that can be overriden to customize the theme.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.overrides.is_none()`.
    pub fn overrides(&self) -> &[crate::types::ThemeValues] {
        self.overrides.as_deref().unwrap_or_default()
    }
}
impl UpdateThemeData {
    /// Creates a new builder-style object to manufacture [`UpdateThemeData`](crate::types::UpdateThemeData).
    pub fn builder() -> crate::types::builders::UpdateThemeDataBuilder {
        crate::types::builders::UpdateThemeDataBuilder::default()
    }
}

/// A builder for [`UpdateThemeData`](crate::types::UpdateThemeData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateThemeDataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>,
    pub(crate) overrides: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>,
}
impl UpdateThemeDataBuilder {
    /// <p>The unique ID of the theme to update.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the theme to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the theme to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the theme to update.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the theme to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the theme to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn values(mut self, input: crate::types::ThemeValues) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>) -> Self {
        self.values = input;
        self
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>> {
        &self.values
    }
    /// Appends an item to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>Describes the properties that can be overriden to customize the theme.</p>
    pub fn overrides(mut self, input: crate::types::ThemeValues) -> Self {
        let mut v = self.overrides.unwrap_or_default();
        v.push(input);
        self.overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the properties that can be overriden to customize the theme.</p>
    pub fn set_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>) -> Self {
        self.overrides = input;
        self
    }
    /// <p>Describes the properties that can be overriden to customize the theme.</p>
    pub fn get_overrides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>> {
        &self.overrides
    }
    /// Consumes the builder and constructs a [`UpdateThemeData`](crate::types::UpdateThemeData).
    /// This method will fail if any of the following fields are not set:
    /// - [`values`](crate::types::builders::UpdateThemeDataBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateThemeData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateThemeData {
            id: self.id,
            name: self.name,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building UpdateThemeData",
                )
            })?,
            overrides: self.overrides,
        })
    }
}
