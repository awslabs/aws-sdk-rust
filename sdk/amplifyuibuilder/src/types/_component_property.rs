// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for all of a component's properties. Use <code>ComponentProperty</code> to specify the values to render or bind by default.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentProperty {
    /// <p>The value to assign to the component property.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The information to bind the component property to data at runtime.</p>
    #[doc(hidden)]
    pub binding_properties: std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    /// <p>The information to bind the component property to data at runtime. Use this for collection components.</p>
    #[doc(hidden)]
    pub collection_binding_properties:
        std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    /// <p>The default value to assign to the component property.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
    /// <p>The data model to use to assign a value to the component property.</p>
    #[doc(hidden)]
    pub model: std::option::Option<std::string::String>,
    /// <p>The information to bind the component property to form data.</p>
    #[doc(hidden)]
    pub bindings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FormBindingElement>,
    >,
    /// <p>An event that occurs in your app. Use this for workflow data binding.</p>
    #[doc(hidden)]
    pub event: std::option::Option<std::string::String>,
    /// <p>An authenticated user attribute to use to assign a value to the component property.</p>
    #[doc(hidden)]
    pub user_attribute: std::option::Option<std::string::String>,
    /// <p>A list of component properties to concatenate to create the value to assign to this component property.</p>
    #[doc(hidden)]
    pub concat: std::option::Option<std::vec::Vec<crate::types::ComponentProperty>>,
    /// <p>The conditional expression to use to assign a value to the component property.</p>
    #[doc(hidden)]
    pub condition: std::option::Option<crate::types::ComponentConditionProperty>,
    /// <p>Specifies whether the user configured the property in Amplify Studio after importing it.</p>
    #[doc(hidden)]
    pub configured: std::option::Option<bool>,
    /// <p>The component type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The default value assigned to the property when the component is imported into an app.</p>
    #[doc(hidden)]
    pub imported_value: std::option::Option<std::string::String>,
    /// <p>The name of the component that is affected by an event.</p>
    #[doc(hidden)]
    pub component_name: std::option::Option<std::string::String>,
    /// <p>The name of the component's property that is affected by an event.</p>
    #[doc(hidden)]
    pub property: std::option::Option<std::string::String>,
}
impl ComponentProperty {
    /// <p>The value to assign to the component property.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The information to bind the component property to data at runtime.</p>
    pub fn binding_properties(
        &self,
    ) -> std::option::Option<&crate::types::ComponentPropertyBindingProperties> {
        self.binding_properties.as_ref()
    }
    /// <p>The information to bind the component property to data at runtime. Use this for collection components.</p>
    pub fn collection_binding_properties(
        &self,
    ) -> std::option::Option<&crate::types::ComponentPropertyBindingProperties> {
        self.collection_binding_properties.as_ref()
    }
    /// <p>The default value to assign to the component property.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The data model to use to assign a value to the component property.</p>
    pub fn model(&self) -> std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The information to bind the component property to form data.</p>
    pub fn bindings(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::FormBindingElement>,
    > {
        self.bindings.as_ref()
    }
    /// <p>An event that occurs in your app. Use this for workflow data binding.</p>
    pub fn event(&self) -> std::option::Option<&str> {
        self.event.as_deref()
    }
    /// <p>An authenticated user attribute to use to assign a value to the component property.</p>
    pub fn user_attribute(&self) -> std::option::Option<&str> {
        self.user_attribute.as_deref()
    }
    /// <p>A list of component properties to concatenate to create the value to assign to this component property.</p>
    pub fn concat(&self) -> std::option::Option<&[crate::types::ComponentProperty]> {
        self.concat.as_deref()
    }
    /// <p>The conditional expression to use to assign a value to the component property.</p>
    pub fn condition(&self) -> std::option::Option<&crate::types::ComponentConditionProperty> {
        self.condition.as_ref()
    }
    /// <p>Specifies whether the user configured the property in Amplify Studio after importing it.</p>
    pub fn configured(&self) -> std::option::Option<bool> {
        self.configured
    }
    /// <p>The component type.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The default value assigned to the property when the component is imported into an app.</p>
    pub fn imported_value(&self) -> std::option::Option<&str> {
        self.imported_value.as_deref()
    }
    /// <p>The name of the component that is affected by an event.</p>
    pub fn component_name(&self) -> std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>The name of the component's property that is affected by an event.</p>
    pub fn property(&self) -> std::option::Option<&str> {
        self.property.as_deref()
    }
}
impl ComponentProperty {
    /// Creates a new builder-style object to manufacture [`ComponentProperty`](crate::types::ComponentProperty).
    pub fn builder() -> crate::types::builders::ComponentPropertyBuilder {
        crate::types::builders::ComponentPropertyBuilder::default()
    }
}

/// A builder for [`ComponentProperty`](crate::types::ComponentProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentPropertyBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) binding_properties:
        std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    pub(crate) collection_binding_properties:
        std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    pub(crate) default_value: std::option::Option<std::string::String>,
    pub(crate) model: std::option::Option<std::string::String>,
    pub(crate) bindings: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FormBindingElement>,
    >,
    pub(crate) event: std::option::Option<std::string::String>,
    pub(crate) user_attribute: std::option::Option<std::string::String>,
    pub(crate) concat: std::option::Option<std::vec::Vec<crate::types::ComponentProperty>>,
    pub(crate) condition: std::option::Option<crate::types::ComponentConditionProperty>,
    pub(crate) configured: std::option::Option<bool>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) imported_value: std::option::Option<std::string::String>,
    pub(crate) component_name: std::option::Option<std::string::String>,
    pub(crate) property: std::option::Option<std::string::String>,
}
impl ComponentPropertyBuilder {
    /// <p>The value to assign to the component property.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value to assign to the component property.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The information to bind the component property to data at runtime.</p>
    pub fn binding_properties(
        mut self,
        input: crate::types::ComponentPropertyBindingProperties,
    ) -> Self {
        self.binding_properties = Some(input);
        self
    }
    /// <p>The information to bind the component property to data at runtime.</p>
    pub fn set_binding_properties(
        mut self,
        input: std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    ) -> Self {
        self.binding_properties = input;
        self
    }
    /// <p>The information to bind the component property to data at runtime. Use this for collection components.</p>
    pub fn collection_binding_properties(
        mut self,
        input: crate::types::ComponentPropertyBindingProperties,
    ) -> Self {
        self.collection_binding_properties = Some(input);
        self
    }
    /// <p>The information to bind the component property to data at runtime. Use this for collection components.</p>
    pub fn set_collection_binding_properties(
        mut self,
        input: std::option::Option<crate::types::ComponentPropertyBindingProperties>,
    ) -> Self {
        self.collection_binding_properties = input;
        self
    }
    /// <p>The default value to assign to the component property.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value to assign to the component property.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The data model to use to assign a value to the component property.</p>
    pub fn model(mut self, input: impl Into<std::string::String>) -> Self {
        self.model = Some(input.into());
        self
    }
    /// <p>The data model to use to assign a value to the component property.</p>
    pub fn set_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// Adds a key-value pair to `bindings`.
    ///
    /// To override the contents of this collection use [`set_bindings`](Self::set_bindings).
    ///
    /// <p>The information to bind the component property to form data.</p>
    pub fn bindings(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::FormBindingElement,
    ) -> Self {
        let mut hash_map = self.bindings.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.bindings = Some(hash_map);
        self
    }
    /// <p>The information to bind the component property to form data.</p>
    pub fn set_bindings(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::FormBindingElement>,
        >,
    ) -> Self {
        self.bindings = input;
        self
    }
    /// <p>An event that occurs in your app. Use this for workflow data binding.</p>
    pub fn event(mut self, input: impl Into<std::string::String>) -> Self {
        self.event = Some(input.into());
        self
    }
    /// <p>An event that occurs in your app. Use this for workflow data binding.</p>
    pub fn set_event(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event = input;
        self
    }
    /// <p>An authenticated user attribute to use to assign a value to the component property.</p>
    pub fn user_attribute(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_attribute = Some(input.into());
        self
    }
    /// <p>An authenticated user attribute to use to assign a value to the component property.</p>
    pub fn set_user_attribute(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_attribute = input;
        self
    }
    /// Appends an item to `concat`.
    ///
    /// To override the contents of this collection use [`set_concat`](Self::set_concat).
    ///
    /// <p>A list of component properties to concatenate to create the value to assign to this component property.</p>
    pub fn concat(mut self, input: crate::types::ComponentProperty) -> Self {
        let mut v = self.concat.unwrap_or_default();
        v.push(input);
        self.concat = Some(v);
        self
    }
    /// <p>A list of component properties to concatenate to create the value to assign to this component property.</p>
    pub fn set_concat(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ComponentProperty>>,
    ) -> Self {
        self.concat = input;
        self
    }
    /// <p>The conditional expression to use to assign a value to the component property.</p>
    pub fn condition(mut self, input: crate::types::ComponentConditionProperty) -> Self {
        self.condition = Some(input);
        self
    }
    /// <p>The conditional expression to use to assign a value to the component property.</p>
    pub fn set_condition(
        mut self,
        input: std::option::Option<crate::types::ComponentConditionProperty>,
    ) -> Self {
        self.condition = input;
        self
    }
    /// <p>Specifies whether the user configured the property in Amplify Studio after importing it.</p>
    pub fn configured(mut self, input: bool) -> Self {
        self.configured = Some(input);
        self
    }
    /// <p>Specifies whether the user configured the property in Amplify Studio after importing it.</p>
    pub fn set_configured(mut self, input: std::option::Option<bool>) -> Self {
        self.configured = input;
        self
    }
    /// <p>The component type.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The component type.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The default value assigned to the property when the component is imported into an app.</p>
    pub fn imported_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.imported_value = Some(input.into());
        self
    }
    /// <p>The default value assigned to the property when the component is imported into an app.</p>
    pub fn set_imported_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.imported_value = input;
        self
    }
    /// <p>The name of the component that is affected by an event.</p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_name = Some(input.into());
        self
    }
    /// <p>The name of the component that is affected by an event.</p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component's property that is affected by an event.</p>
    pub fn property(mut self, input: impl Into<std::string::String>) -> Self {
        self.property = Some(input.into());
        self
    }
    /// <p>The name of the component's property that is affected by an event.</p>
    pub fn set_property(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentProperty`](crate::types::ComponentProperty).
    pub fn build(self) -> crate::types::ComponentProperty {
        crate::types::ComponentProperty {
            value: self.value,
            binding_properties: self.binding_properties,
            collection_binding_properties: self.collection_binding_properties,
            default_value: self.default_value,
            model: self.model,
            bindings: self.bindings,
            event: self.event,
            user_attribute: self.user_attribute,
            concat: self.concat,
            condition: self.condition,
            configured: self.configured,
            r#type: self.r#type,
            imported_value: self.imported_value,
            component_name: self.component_name,
            property: self.property,
        }
    }
}
