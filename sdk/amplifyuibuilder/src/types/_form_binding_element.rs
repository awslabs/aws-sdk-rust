// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how to bind a component property to form data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FormBindingElement {
    /// <p>The name of the component to retrieve a value from.</p>
    pub element: ::std::string::String,
    /// <p>The property to retrieve a value from.</p>
    pub property: ::std::string::String,
}
impl FormBindingElement {
    /// <p>The name of the component to retrieve a value from.</p>
    pub fn element(&self) -> &str {
        use std::ops::Deref;
        self.element.deref()
    }
    /// <p>The property to retrieve a value from.</p>
    pub fn property(&self) -> &str {
        use std::ops::Deref;
        self.property.deref()
    }
}
impl FormBindingElement {
    /// Creates a new builder-style object to manufacture [`FormBindingElement`](crate::types::FormBindingElement).
    pub fn builder() -> crate::types::builders::FormBindingElementBuilder {
        crate::types::builders::FormBindingElementBuilder::default()
    }
}

/// A builder for [`FormBindingElement`](crate::types::FormBindingElement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FormBindingElementBuilder {
    pub(crate) element: ::std::option::Option<::std::string::String>,
    pub(crate) property: ::std::option::Option<::std::string::String>,
}
impl FormBindingElementBuilder {
    /// <p>The name of the component to retrieve a value from.</p>
    /// This field is required.
    pub fn element(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.element = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component to retrieve a value from.</p>
    pub fn set_element(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.element = input;
        self
    }
    /// <p>The name of the component to retrieve a value from.</p>
    pub fn get_element(&self) -> &::std::option::Option<::std::string::String> {
        &self.element
    }
    /// <p>The property to retrieve a value from.</p>
    /// This field is required.
    pub fn property(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The property to retrieve a value from.</p>
    pub fn set_property(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property = input;
        self
    }
    /// <p>The property to retrieve a value from.</p>
    pub fn get_property(&self) -> &::std::option::Option<::std::string::String> {
        &self.property
    }
    /// Consumes the builder and constructs a [`FormBindingElement`](crate::types::FormBindingElement).
    /// This method will fail if any of the following fields are not set:
    /// - [`element`](crate::types::builders::FormBindingElementBuilder::element)
    /// - [`property`](crate::types::builders::FormBindingElementBuilder::property)
    pub fn build(self) -> ::std::result::Result<crate::types::FormBindingElement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FormBindingElement {
            element: self.element.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element",
                    "element was not specified but it is required when building FormBindingElement",
                )
            })?,
            property: self.property.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property",
                    "property was not specified but it is required when building FormBindingElement",
                )
            })?,
        })
    }
}
