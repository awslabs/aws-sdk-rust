// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the validation configuration for a field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FieldValidationConfiguration {
    /// <p>The validation to perform on an object type.<code></code> </p>
    pub r#type: ::std::string::String,
    /// <p>The validation to perform on a string value.</p>
    pub str_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The validation to perform on a number value.</p>
    pub num_values: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>The validation message to display.</p>
    pub validation_message: ::std::option::Option<::std::string::String>,
}
impl FieldValidationConfiguration {
    /// <p>The validation to perform on an object type.<code></code> </p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The validation to perform on a string value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.str_values.is_none()`.
    pub fn str_values(&self) -> &[::std::string::String] {
        self.str_values.as_deref().unwrap_or_default()
    }
    /// <p>The validation to perform on a number value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.num_values.is_none()`.
    pub fn num_values(&self) -> &[i32] {
        self.num_values.as_deref().unwrap_or_default()
    }
    /// <p>The validation message to display.</p>
    pub fn validation_message(&self) -> ::std::option::Option<&str> {
        self.validation_message.as_deref()
    }
}
impl FieldValidationConfiguration {
    /// Creates a new builder-style object to manufacture [`FieldValidationConfiguration`](crate::types::FieldValidationConfiguration).
    pub fn builder() -> crate::types::builders::FieldValidationConfigurationBuilder {
        crate::types::builders::FieldValidationConfigurationBuilder::default()
    }
}

/// A builder for [`FieldValidationConfiguration`](crate::types::FieldValidationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FieldValidationConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) str_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) num_values: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) validation_message: ::std::option::Option<::std::string::String>,
}
impl FieldValidationConfigurationBuilder {
    /// <p>The validation to perform on an object type.<code></code> </p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The validation to perform on an object type.<code></code> </p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The validation to perform on an object type.<code></code> </p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Appends an item to `str_values`.
    ///
    /// To override the contents of this collection use [`set_str_values`](Self::set_str_values).
    ///
    /// <p>The validation to perform on a string value.</p>
    pub fn str_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.str_values.unwrap_or_default();
        v.push(input.into());
        self.str_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The validation to perform on a string value.</p>
    pub fn set_str_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.str_values = input;
        self
    }
    /// <p>The validation to perform on a string value.</p>
    pub fn get_str_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.str_values
    }
    /// Appends an item to `num_values`.
    ///
    /// To override the contents of this collection use [`set_num_values`](Self::set_num_values).
    ///
    /// <p>The validation to perform on a number value.</p>
    pub fn num_values(mut self, input: i32) -> Self {
        let mut v = self.num_values.unwrap_or_default();
        v.push(input);
        self.num_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The validation to perform on a number value.</p>
    pub fn set_num_values(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.num_values = input;
        self
    }
    /// <p>The validation to perform on a number value.</p>
    pub fn get_num_values(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.num_values
    }
    /// <p>The validation message to display.</p>
    pub fn validation_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.validation_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The validation message to display.</p>
    pub fn set_validation_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.validation_message = input;
        self
    }
    /// <p>The validation message to display.</p>
    pub fn get_validation_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.validation_message
    }
    /// Consumes the builder and constructs a [`FieldValidationConfiguration`](crate::types::FieldValidationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FieldValidationConfigurationBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::FieldValidationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FieldValidationConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FieldValidationConfiguration",
                )
            })?,
            str_values: self.str_values,
            num_values: self.num_values,
            validation_message: self.validation_message,
        })
    }
}
