// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data binding configuration for a specific property using data stored in Amazon Web Services. For Amazon Web Services connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentBindingPropertiesValueProperties {
    /// <p>An Amplify DataStore model.</p>
    pub model: ::std::option::Option<::std::string::String>,
    /// <p>The field to bind the data to.</p>
    pub field: ::std::option::Option<::std::string::String>,
    /// <p>A list of predicates for binding a component's properties to data.</p>
    pub predicates: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    /// <p>An authenticated user attribute.</p>
    pub user_attribute: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon S3 bucket.</p>
    pub bucket: ::std::option::Option<::std::string::String>,
    /// <p>The storage key for an Amazon S3 bucket.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The default value to assign to the property.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p>The name of a component slot.</p>
    pub slot_name: ::std::option::Option<::std::string::String>,
}
impl ComponentBindingPropertiesValueProperties {
    /// <p>An Amplify DataStore model.</p>
    pub fn model(&self) -> ::std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The field to bind the data to.</p>
    pub fn field(&self) -> ::std::option::Option<&str> {
        self.field.as_deref()
    }
    /// <p>A list of predicates for binding a component's properties to data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.predicates.is_none()`.
    pub fn predicates(&self) -> &[crate::types::Predicate] {
        self.predicates.as_deref().unwrap_or_default()
    }
    /// <p>An authenticated user attribute.</p>
    pub fn user_attribute(&self) -> ::std::option::Option<&str> {
        self.user_attribute.as_deref()
    }
    /// <p>An Amazon S3 bucket.</p>
    pub fn bucket(&self) -> ::std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The storage key for an Amazon S3 bucket.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The default value to assign to the property.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The name of a component slot.</p>
    pub fn slot_name(&self) -> ::std::option::Option<&str> {
        self.slot_name.as_deref()
    }
}
impl ComponentBindingPropertiesValueProperties {
    /// Creates a new builder-style object to manufacture [`ComponentBindingPropertiesValueProperties`](crate::types::ComponentBindingPropertiesValueProperties).
    pub fn builder() -> crate::types::builders::ComponentBindingPropertiesValuePropertiesBuilder {
        crate::types::builders::ComponentBindingPropertiesValuePropertiesBuilder::default()
    }
}

/// A builder for [`ComponentBindingPropertiesValueProperties`](crate::types::ComponentBindingPropertiesValueProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComponentBindingPropertiesValuePropertiesBuilder {
    pub(crate) model: ::std::option::Option<::std::string::String>,
    pub(crate) field: ::std::option::Option<::std::string::String>,
    pub(crate) predicates: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    pub(crate) user_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) slot_name: ::std::option::Option<::std::string::String>,
}
impl ComponentBindingPropertiesValuePropertiesBuilder {
    /// <p>An Amplify DataStore model.</p>
    pub fn model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amplify DataStore model.</p>
    pub fn set_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>An Amplify DataStore model.</p>
    pub fn get_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.model
    }
    /// <p>The field to bind the data to.</p>
    pub fn field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field to bind the data to.</p>
    pub fn set_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The field to bind the data to.</p>
    pub fn get_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.field
    }
    /// Appends an item to `predicates`.
    ///
    /// To override the contents of this collection use [`set_predicates`](Self::set_predicates).
    ///
    /// <p>A list of predicates for binding a component's properties to data.</p>
    pub fn predicates(mut self, input: crate::types::Predicate) -> Self {
        let mut v = self.predicates.unwrap_or_default();
        v.push(input);
        self.predicates = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of predicates for binding a component's properties to data.</p>
    pub fn set_predicates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>) -> Self {
        self.predicates = input;
        self
    }
    /// <p>A list of predicates for binding a component's properties to data.</p>
    pub fn get_predicates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Predicate>> {
        &self.predicates
    }
    /// <p>An authenticated user attribute.</p>
    pub fn user_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An authenticated user attribute.</p>
    pub fn set_user_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_attribute = input;
        self
    }
    /// <p>An authenticated user attribute.</p>
    pub fn get_user_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_attribute
    }
    /// <p>An Amazon S3 bucket.</p>
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon S3 bucket.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>An Amazon S3 bucket.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>The storage key for an Amazon S3 bucket.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage key for an Amazon S3 bucket.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The storage key for an Amazon S3 bucket.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The default value to assign to the property.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value to assign to the property.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value to assign to the property.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// <p>The name of a component slot.</p>
    pub fn slot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a component slot.</p>
    pub fn set_slot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_name = input;
        self
    }
    /// <p>The name of a component slot.</p>
    pub fn get_slot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_name
    }
    /// Consumes the builder and constructs a [`ComponentBindingPropertiesValueProperties`](crate::types::ComponentBindingPropertiesValueProperties).
    pub fn build(self) -> crate::types::ComponentBindingPropertiesValueProperties {
        crate::types::ComponentBindingPropertiesValueProperties {
            model: self.model,
            field: self.field,
            predicates: self.predicates,
            user_attribute: self.user_attribute,
            bucket: self.bucket,
            key: self.key,
            default_value: self.default_value,
            slot_name: self.slot_name,
        }
    }
}
