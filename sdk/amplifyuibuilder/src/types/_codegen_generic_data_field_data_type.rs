// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CodegenGenericDataFieldDataType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let codegengenericdatafielddatatype = unimplemented!();
/// match codegengenericdatafielddatatype {
///     CodegenGenericDataFieldDataType::AwsDate => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsDateTime => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsEmail => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsIpAddress => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsJson => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsPhone => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsTime => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsTimestamp => { /* ... */ },
///     CodegenGenericDataFieldDataType::AwsUrl => { /* ... */ },
///     CodegenGenericDataFieldDataType::Boolean => { /* ... */ },
///     CodegenGenericDataFieldDataType::Enum => { /* ... */ },
///     CodegenGenericDataFieldDataType::Float => { /* ... */ },
///     CodegenGenericDataFieldDataType::Id => { /* ... */ },
///     CodegenGenericDataFieldDataType::Int => { /* ... */ },
///     CodegenGenericDataFieldDataType::Model => { /* ... */ },
///     CodegenGenericDataFieldDataType::NonModel => { /* ... */ },
///     CodegenGenericDataFieldDataType::String => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `codegengenericdatafielddatatype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CodegenGenericDataFieldDataType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CodegenGenericDataFieldDataType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CodegenGenericDataFieldDataType::NewFeature` is defined.
/// Specifically, when `codegengenericdatafielddatatype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CodegenGenericDataFieldDataType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum CodegenGenericDataFieldDataType {
    #[allow(missing_docs)] // documentation missing in model
    AwsDate,
    #[allow(missing_docs)] // documentation missing in model
    AwsDateTime,
    #[allow(missing_docs)] // documentation missing in model
    AwsEmail,
    #[allow(missing_docs)] // documentation missing in model
    AwsIpAddress,
    #[allow(missing_docs)] // documentation missing in model
    AwsJson,
    #[allow(missing_docs)] // documentation missing in model
    AwsPhone,
    #[allow(missing_docs)] // documentation missing in model
    AwsTime,
    #[allow(missing_docs)] // documentation missing in model
    AwsTimestamp,
    #[allow(missing_docs)] // documentation missing in model
    AwsUrl,
    #[allow(missing_docs)] // documentation missing in model
    Boolean,
    #[allow(missing_docs)] // documentation missing in model
    Enum,
    #[allow(missing_docs)] // documentation missing in model
    Float,
    #[allow(missing_docs)] // documentation missing in model
    Id,
    #[allow(missing_docs)] // documentation missing in model
    Int,
    #[allow(missing_docs)] // documentation missing in model
    Model,
    #[allow(missing_docs)] // documentation missing in model
    NonModel,
    #[allow(missing_docs)] // documentation missing in model
    String,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for CodegenGenericDataFieldDataType {
    fn from(s: &str) -> Self {
        match s {
            "AWSDate" => CodegenGenericDataFieldDataType::AwsDate,
            "AWSDateTime" => CodegenGenericDataFieldDataType::AwsDateTime,
            "AWSEmail" => CodegenGenericDataFieldDataType::AwsEmail,
            "AWSIPAddress" => CodegenGenericDataFieldDataType::AwsIpAddress,
            "AWSJSON" => CodegenGenericDataFieldDataType::AwsJson,
            "AWSPhone" => CodegenGenericDataFieldDataType::AwsPhone,
            "AWSTime" => CodegenGenericDataFieldDataType::AwsTime,
            "AWSTimestamp" => CodegenGenericDataFieldDataType::AwsTimestamp,
            "AWSURL" => CodegenGenericDataFieldDataType::AwsUrl,
            "Boolean" => CodegenGenericDataFieldDataType::Boolean,
            "Enum" => CodegenGenericDataFieldDataType::Enum,
            "Float" => CodegenGenericDataFieldDataType::Float,
            "ID" => CodegenGenericDataFieldDataType::Id,
            "Int" => CodegenGenericDataFieldDataType::Int,
            "Model" => CodegenGenericDataFieldDataType::Model,
            "NonModel" => CodegenGenericDataFieldDataType::NonModel,
            "String" => CodegenGenericDataFieldDataType::String,
            other => CodegenGenericDataFieldDataType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for CodegenGenericDataFieldDataType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(CodegenGenericDataFieldDataType::from(s))
    }
}
impl CodegenGenericDataFieldDataType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CodegenGenericDataFieldDataType::AwsDate => "AWSDate",
            CodegenGenericDataFieldDataType::AwsDateTime => "AWSDateTime",
            CodegenGenericDataFieldDataType::AwsEmail => "AWSEmail",
            CodegenGenericDataFieldDataType::AwsIpAddress => "AWSIPAddress",
            CodegenGenericDataFieldDataType::AwsJson => "AWSJSON",
            CodegenGenericDataFieldDataType::AwsPhone => "AWSPhone",
            CodegenGenericDataFieldDataType::AwsTime => "AWSTime",
            CodegenGenericDataFieldDataType::AwsTimestamp => "AWSTimestamp",
            CodegenGenericDataFieldDataType::AwsUrl => "AWSURL",
            CodegenGenericDataFieldDataType::Boolean => "Boolean",
            CodegenGenericDataFieldDataType::Enum => "Enum",
            CodegenGenericDataFieldDataType::Float => "Float",
            CodegenGenericDataFieldDataType::Id => "ID",
            CodegenGenericDataFieldDataType::Int => "Int",
            CodegenGenericDataFieldDataType::Model => "Model",
            CodegenGenericDataFieldDataType::NonModel => "NonModel",
            CodegenGenericDataFieldDataType::String => "String",
            CodegenGenericDataFieldDataType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWSDate",
            "AWSDateTime",
            "AWSEmail",
            "AWSIPAddress",
            "AWSJSON",
            "AWSPhone",
            "AWSTime",
            "AWSTimestamp",
            "AWSURL",
            "Boolean",
            "Enum",
            "Float",
            "ID",
            "Int",
            "Model",
            "NonModel",
            "String",
        ]
    }
}
impl ::std::convert::AsRef<str> for CodegenGenericDataFieldDataType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl CodegenGenericDataFieldDataType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for CodegenGenericDataFieldDataType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            CodegenGenericDataFieldDataType::AwsDate => write!(f, "AWSDate"),
            CodegenGenericDataFieldDataType::AwsDateTime => write!(f, "AWSDateTime"),
            CodegenGenericDataFieldDataType::AwsEmail => write!(f, "AWSEmail"),
            CodegenGenericDataFieldDataType::AwsIpAddress => write!(f, "AWSIPAddress"),
            CodegenGenericDataFieldDataType::AwsJson => write!(f, "AWSJSON"),
            CodegenGenericDataFieldDataType::AwsPhone => write!(f, "AWSPhone"),
            CodegenGenericDataFieldDataType::AwsTime => write!(f, "AWSTime"),
            CodegenGenericDataFieldDataType::AwsTimestamp => write!(f, "AWSTimestamp"),
            CodegenGenericDataFieldDataType::AwsUrl => write!(f, "AWSURL"),
            CodegenGenericDataFieldDataType::Boolean => write!(f, "Boolean"),
            CodegenGenericDataFieldDataType::Enum => write!(f, "Enum"),
            CodegenGenericDataFieldDataType::Float => write!(f, "Float"),
            CodegenGenericDataFieldDataType::Id => write!(f, "ID"),
            CodegenGenericDataFieldDataType::Int => write!(f, "Int"),
            CodegenGenericDataFieldDataType::Model => write!(f, "Model"),
            CodegenGenericDataFieldDataType::NonModel => write!(f, "NonModel"),
            CodegenGenericDataFieldDataType::String => write!(f, "String"),
            CodegenGenericDataFieldDataType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
