// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The code generation job resource configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartCodegenJobData {
    /// <p>The code generation configuration for the codegen job.</p>
    pub render_config: ::std::option::Option<crate::types::CodegenJobRenderConfig>,
    /// <p>The data schema to use for a code generation job.</p>
    pub generic_data_schema: ::std::option::Option<crate::types::CodegenJobGenericDataSchema>,
    /// <p>Specifies whether to autogenerate forms in the code generation job.</p>
    pub auto_generate_forms: ::std::option::Option<bool>,
    /// <p>The feature flags for a code generation job.</p>
    pub features: ::std::option::Option<crate::types::CodegenFeatureFlags>,
    /// <p>One or more key-value pairs to use when tagging the code generation job data.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartCodegenJobData {
    /// <p>The code generation configuration for the codegen job.</p>
    pub fn render_config(&self) -> ::std::option::Option<&crate::types::CodegenJobRenderConfig> {
        self.render_config.as_ref()
    }
    /// <p>The data schema to use for a code generation job.</p>
    pub fn generic_data_schema(&self) -> ::std::option::Option<&crate::types::CodegenJobGenericDataSchema> {
        self.generic_data_schema.as_ref()
    }
    /// <p>Specifies whether to autogenerate forms in the code generation job.</p>
    pub fn auto_generate_forms(&self) -> ::std::option::Option<bool> {
        self.auto_generate_forms
    }
    /// <p>The feature flags for a code generation job.</p>
    pub fn features(&self) -> ::std::option::Option<&crate::types::CodegenFeatureFlags> {
        self.features.as_ref()
    }
    /// <p>One or more key-value pairs to use when tagging the code generation job data.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl StartCodegenJobData {
    /// Creates a new builder-style object to manufacture [`StartCodegenJobData`](crate::types::StartCodegenJobData).
    pub fn builder() -> crate::types::builders::StartCodegenJobDataBuilder {
        crate::types::builders::StartCodegenJobDataBuilder::default()
    }
}

/// A builder for [`StartCodegenJobData`](crate::types::StartCodegenJobData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartCodegenJobDataBuilder {
    pub(crate) render_config: ::std::option::Option<crate::types::CodegenJobRenderConfig>,
    pub(crate) generic_data_schema: ::std::option::Option<crate::types::CodegenJobGenericDataSchema>,
    pub(crate) auto_generate_forms: ::std::option::Option<bool>,
    pub(crate) features: ::std::option::Option<crate::types::CodegenFeatureFlags>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartCodegenJobDataBuilder {
    /// <p>The code generation configuration for the codegen job.</p>
    /// This field is required.
    pub fn render_config(mut self, input: crate::types::CodegenJobRenderConfig) -> Self {
        self.render_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The code generation configuration for the codegen job.</p>
    pub fn set_render_config(mut self, input: ::std::option::Option<crate::types::CodegenJobRenderConfig>) -> Self {
        self.render_config = input;
        self
    }
    /// <p>The code generation configuration for the codegen job.</p>
    pub fn get_render_config(&self) -> &::std::option::Option<crate::types::CodegenJobRenderConfig> {
        &self.render_config
    }
    /// <p>The data schema to use for a code generation job.</p>
    pub fn generic_data_schema(mut self, input: crate::types::CodegenJobGenericDataSchema) -> Self {
        self.generic_data_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data schema to use for a code generation job.</p>
    pub fn set_generic_data_schema(mut self, input: ::std::option::Option<crate::types::CodegenJobGenericDataSchema>) -> Self {
        self.generic_data_schema = input;
        self
    }
    /// <p>The data schema to use for a code generation job.</p>
    pub fn get_generic_data_schema(&self) -> &::std::option::Option<crate::types::CodegenJobGenericDataSchema> {
        &self.generic_data_schema
    }
    /// <p>Specifies whether to autogenerate forms in the code generation job.</p>
    pub fn auto_generate_forms(mut self, input: bool) -> Self {
        self.auto_generate_forms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to autogenerate forms in the code generation job.</p>
    pub fn set_auto_generate_forms(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_generate_forms = input;
        self
    }
    /// <p>Specifies whether to autogenerate forms in the code generation job.</p>
    pub fn get_auto_generate_forms(&self) -> &::std::option::Option<bool> {
        &self.auto_generate_forms
    }
    /// <p>The feature flags for a code generation job.</p>
    pub fn features(mut self, input: crate::types::CodegenFeatureFlags) -> Self {
        self.features = ::std::option::Option::Some(input);
        self
    }
    /// <p>The feature flags for a code generation job.</p>
    pub fn set_features(mut self, input: ::std::option::Option<crate::types::CodegenFeatureFlags>) -> Self {
        self.features = input;
        self
    }
    /// <p>The feature flags for a code generation job.</p>
    pub fn get_features(&self) -> &::std::option::Option<crate::types::CodegenFeatureFlags> {
        &self.features
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more key-value pairs to use when tagging the code generation job data.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>One or more key-value pairs to use when tagging the code generation job data.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>One or more key-value pairs to use when tagging the code generation job data.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartCodegenJobData`](crate::types::StartCodegenJobData).
    pub fn build(self) -> crate::types::StartCodegenJobData {
        crate::types::StartCodegenJobData {
            render_config: self.render_config,
            generic_data_schema: self.generic_data_schema,
            auto_generate_forms: self.auto_generate_forms,
            features: self.features,
            tags: self.tags,
        }
    }
}
