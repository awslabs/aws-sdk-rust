// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates and saves all of the information about a component, based on component ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateComponentData {
    /// <p>The unique ID of the component to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the component to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the component in its original source system, such as Figma.</p>
    pub source_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the component. This can be an Amplify custom UI component or another custom component.</p>
    pub component_type: ::std::option::Option<::std::string::String>,
    /// <p>Describes the component's properties.</p>
    pub properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentProperty>>,
    /// <p>The components that are instances of the main component.</p>
    pub children: ::std::option::Option<::std::vec::Vec<crate::types::ComponentChild>>,
    /// <p>A list of the unique variants of the main component being updated.</p>
    pub variants: ::std::option::Option<::std::vec::Vec<crate::types::ComponentVariant>>,
    /// <p>Describes the properties that can be overriden to customize the component.</p>
    pub overrides: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    >,
    /// <p>The data binding information for the component's properties.</p>
    pub binding_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentBindingPropertiesValue>>,
    /// <p>The configuration for binding a component's properties to a data model. Use this for a collection component.</p>
    pub collection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentDataConfiguration>>,
    /// <p>The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.</p>
    pub events: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentEvent>>,
    /// <p>The schema version of the component when it was imported.</p>
    pub schema_version: ::std::option::Option<::std::string::String>,
}
impl UpdateComponentData {
    /// <p>The unique ID of the component to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the component to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique ID of the component in its original source system, such as Figma.</p>
    pub fn source_id(&self) -> ::std::option::Option<&str> {
        self.source_id.as_deref()
    }
    /// <p>The type of the component. This can be an Amplify custom UI component or another custom component.</p>
    pub fn component_type(&self) -> ::std::option::Option<&str> {
        self.component_type.as_deref()
    }
    /// <p>Describes the component's properties.</p>
    pub fn properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentProperty>> {
        self.properties.as_ref()
    }
    /// <p>The components that are instances of the main component.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.children.is_none()`.
    pub fn children(&self) -> &[crate::types::ComponentChild] {
        self.children.as_deref().unwrap_or_default()
    }
    /// <p>A list of the unique variants of the main component being updated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.variants.is_none()`.
    pub fn variants(&self) -> &[crate::types::ComponentVariant] {
        self.variants.as_deref().unwrap_or_default()
    }
    /// <p>Describes the properties that can be overriden to customize the component.</p>
    pub fn overrides(
        &self,
    ) -> ::std::option::Option<
        &::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    > {
        self.overrides.as_ref()
    }
    /// <p>The data binding information for the component's properties.</p>
    pub fn binding_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentBindingPropertiesValue>> {
        self.binding_properties.as_ref()
    }
    /// <p>The configuration for binding a component's properties to a data model. Use this for a collection component.</p>
    pub fn collection_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentDataConfiguration>> {
        self.collection_properties.as_ref()
    }
    /// <p>The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.</p>
    pub fn events(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComponentEvent>> {
        self.events.as_ref()
    }
    /// <p>The schema version of the component when it was imported.</p>
    pub fn schema_version(&self) -> ::std::option::Option<&str> {
        self.schema_version.as_deref()
    }
}
impl UpdateComponentData {
    /// Creates a new builder-style object to manufacture [`UpdateComponentData`](crate::types::UpdateComponentData).
    pub fn builder() -> crate::types::builders::UpdateComponentDataBuilder {
        crate::types::builders::UpdateComponentDataBuilder::default()
    }
}

/// A builder for [`UpdateComponentData`](crate::types::UpdateComponentData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateComponentDataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_type: ::std::option::Option<::std::string::String>,
    pub(crate) properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentProperty>>,
    pub(crate) children: ::std::option::Option<::std::vec::Vec<crate::types::ComponentChild>>,
    pub(crate) variants: ::std::option::Option<::std::vec::Vec<crate::types::ComponentVariant>>,
    pub(crate) overrides: ::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    >,
    pub(crate) binding_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentBindingPropertiesValue>>,
    pub(crate) collection_properties:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentDataConfiguration>>,
    pub(crate) events: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentEvent>>,
    pub(crate) schema_version: ::std::option::Option<::std::string::String>,
}
impl UpdateComponentDataBuilder {
    /// <p>The unique ID of the component to update.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the component to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the component to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the component to update.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the component to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique ID of the component in its original source system, such as Figma.</p>
    pub fn source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the component in its original source system, such as Figma.</p>
    pub fn set_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_id = input;
        self
    }
    /// <p>The unique ID of the component in its original source system, such as Figma.</p>
    pub fn get_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_id
    }
    /// <p>The type of the component. This can be an Amplify custom UI component or another custom component.</p>
    pub fn component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the component. This can be an Amplify custom UI component or another custom component.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>The type of the component. This can be an Amplify custom UI component or another custom component.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type
    }
    /// Adds a key-value pair to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>Describes the component's properties.</p>
    pub fn properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentProperty) -> Self {
        let mut hash_map = self.properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Describes the component's properties.</p>
    pub fn set_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentProperty>>,
    ) -> Self {
        self.properties = input;
        self
    }
    /// <p>Describes the component's properties.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentProperty>> {
        &self.properties
    }
    /// Appends an item to `children`.
    ///
    /// To override the contents of this collection use [`set_children`](Self::set_children).
    ///
    /// <p>The components that are instances of the main component.</p>
    pub fn children(mut self, input: crate::types::ComponentChild) -> Self {
        let mut v = self.children.unwrap_or_default();
        v.push(input);
        self.children = ::std::option::Option::Some(v);
        self
    }
    /// <p>The components that are instances of the main component.</p>
    pub fn set_children(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComponentChild>>) -> Self {
        self.children = input;
        self
    }
    /// <p>The components that are instances of the main component.</p>
    pub fn get_children(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComponentChild>> {
        &self.children
    }
    /// Appends an item to `variants`.
    ///
    /// To override the contents of this collection use [`set_variants`](Self::set_variants).
    ///
    /// <p>A list of the unique variants of the main component being updated.</p>
    pub fn variants(mut self, input: crate::types::ComponentVariant) -> Self {
        let mut v = self.variants.unwrap_or_default();
        v.push(input);
        self.variants = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the unique variants of the main component being updated.</p>
    pub fn set_variants(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComponentVariant>>) -> Self {
        self.variants = input;
        self
    }
    /// <p>A list of the unique variants of the main component being updated.</p>
    pub fn get_variants(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComponentVariant>> {
        &self.variants
    }
    /// Adds a key-value pair to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>Describes the properties that can be overriden to customize the component.</p>
    pub fn overrides(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ) -> Self {
        let mut hash_map = self.overrides.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.overrides = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Describes the properties that can be overriden to customize the component.</p>
    pub fn set_overrides(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
        >,
    ) -> Self {
        self.overrides = input;
        self
    }
    /// <p>Describes the properties that can be overriden to customize the component.</p>
    pub fn get_overrides(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    > {
        &self.overrides
    }
    /// Adds a key-value pair to `binding_properties`.
    ///
    /// To override the contents of this collection use [`set_binding_properties`](Self::set_binding_properties).
    ///
    /// <p>The data binding information for the component's properties.</p>
    pub fn binding_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::ComponentBindingPropertiesValue,
    ) -> Self {
        let mut hash_map = self.binding_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.binding_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The data binding information for the component's properties.</p>
    pub fn set_binding_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentBindingPropertiesValue>>,
    ) -> Self {
        self.binding_properties = input;
        self
    }
    /// <p>The data binding information for the component's properties.</p>
    pub fn get_binding_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentBindingPropertiesValue>> {
        &self.binding_properties
    }
    /// Adds a key-value pair to `collection_properties`.
    ///
    /// To override the contents of this collection use [`set_collection_properties`](Self::set_collection_properties).
    ///
    /// <p>The configuration for binding a component's properties to a data model. Use this for a collection component.</p>
    pub fn collection_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentDataConfiguration) -> Self {
        let mut hash_map = self.collection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.collection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The configuration for binding a component's properties to a data model. Use this for a collection component.</p>
    pub fn set_collection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentDataConfiguration>>,
    ) -> Self {
        self.collection_properties = input;
        self
    }
    /// <p>The configuration for binding a component's properties to a data model. Use this for a collection component.</p>
    pub fn get_collection_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentDataConfiguration>> {
        &self.collection_properties
    }
    /// Adds a key-value pair to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.</p>
    pub fn events(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ComponentEvent) -> Self {
        let mut hash_map = self.events.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.events = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.</p>
    pub fn set_events(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentEvent>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// <p>The event configuration for the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComponentEvent>> {
        &self.events
    }
    /// <p>The schema version of the component when it was imported.</p>
    pub fn schema_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema version of the component when it was imported.</p>
    pub fn set_schema_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The schema version of the component when it was imported.</p>
    pub fn get_schema_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_version
    }
    /// Consumes the builder and constructs a [`UpdateComponentData`](crate::types::UpdateComponentData).
    pub fn build(self) -> crate::types::UpdateComponentData {
        crate::types::UpdateComponentData {
            id: self.id,
            name: self.name,
            source_id: self.source_id,
            component_type: self.component_type,
            properties: self.properties,
            children: self.children,
            variants: self.variants,
            overrides: self.overrides,
            binding_properties: self.binding_properties,
            collection_properties: self.collection_properties,
            events: self.events,
            schema_version: self.schema_version,
        }
    }
}
