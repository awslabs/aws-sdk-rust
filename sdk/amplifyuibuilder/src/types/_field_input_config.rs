// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for the default input values to display for a field.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldInputConfig {
    /// <p>The input type for the field. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>Specifies a field that requires input.</p>
    #[doc(hidden)]
    pub required: std::option::Option<bool>,
    /// <p>Specifies a read only field.</p>
    #[doc(hidden)]
    pub read_only: std::option::Option<bool>,
    /// <p>The text to display as a placeholder for the field.</p>
    #[doc(hidden)]
    pub placeholder: std::option::Option<std::string::String>,
    /// <p>The default value for the field.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
    /// <p>The text to display to describe the field.</p>
    #[doc(hidden)]
    pub descriptive_text: std::option::Option<std::string::String>,
    /// <p>Specifies whether a field has a default value.</p>
    #[doc(hidden)]
    pub default_checked: std::option::Option<bool>,
    /// <p>The default country code for a phone number.</p>
    #[doc(hidden)]
    pub default_country_code: std::option::Option<std::string::String>,
    /// <p>The information to use to customize the input fields with data at runtime.</p>
    #[doc(hidden)]
    pub value_mappings: std::option::Option<crate::types::ValueMappings>,
    /// <p>The name of the field.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The minimum value to display for the field.</p>
    #[doc(hidden)]
    pub min_value: std::option::Option<f32>,
    /// <p>The maximum value to display for the field.</p>
    #[doc(hidden)]
    pub max_value: std::option::Option<f32>,
    /// <p>The stepping increment for a numeric value in a field.</p>
    #[doc(hidden)]
    pub step: std::option::Option<f32>,
    /// <p>The value for the field.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Specifies whether to render the field as an array. This property is ignored if the <code>dataSourceType</code> for the form is a Data Store.</p>
    #[doc(hidden)]
    pub is_array: std::option::Option<bool>,
}
impl FieldInputConfig {
    /// <p>The input type for the field. </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Specifies a field that requires input.</p>
    pub fn required(&self) -> std::option::Option<bool> {
        self.required
    }
    /// <p>Specifies a read only field.</p>
    pub fn read_only(&self) -> std::option::Option<bool> {
        self.read_only
    }
    /// <p>The text to display as a placeholder for the field.</p>
    pub fn placeholder(&self) -> std::option::Option<&str> {
        self.placeholder.as_deref()
    }
    /// <p>The default value for the field.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The text to display to describe the field.</p>
    pub fn descriptive_text(&self) -> std::option::Option<&str> {
        self.descriptive_text.as_deref()
    }
    /// <p>Specifies whether a field has a default value.</p>
    pub fn default_checked(&self) -> std::option::Option<bool> {
        self.default_checked
    }
    /// <p>The default country code for a phone number.</p>
    pub fn default_country_code(&self) -> std::option::Option<&str> {
        self.default_country_code.as_deref()
    }
    /// <p>The information to use to customize the input fields with data at runtime.</p>
    pub fn value_mappings(&self) -> std::option::Option<&crate::types::ValueMappings> {
        self.value_mappings.as_ref()
    }
    /// <p>The name of the field.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The minimum value to display for the field.</p>
    pub fn min_value(&self) -> std::option::Option<f32> {
        self.min_value
    }
    /// <p>The maximum value to display for the field.</p>
    pub fn max_value(&self) -> std::option::Option<f32> {
        self.max_value
    }
    /// <p>The stepping increment for a numeric value in a field.</p>
    pub fn step(&self) -> std::option::Option<f32> {
        self.step
    }
    /// <p>The value for the field.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Specifies whether to render the field as an array. This property is ignored if the <code>dataSourceType</code> for the form is a Data Store.</p>
    pub fn is_array(&self) -> std::option::Option<bool> {
        self.is_array
    }
}
impl FieldInputConfig {
    /// Creates a new builder-style object to manufacture [`FieldInputConfig`](crate::types::FieldInputConfig).
    pub fn builder() -> crate::types::builders::FieldInputConfigBuilder {
        crate::types::builders::FieldInputConfigBuilder::default()
    }
}

/// A builder for [`FieldInputConfig`](crate::types::FieldInputConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldInputConfigBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) required: std::option::Option<bool>,
    pub(crate) read_only: std::option::Option<bool>,
    pub(crate) placeholder: std::option::Option<std::string::String>,
    pub(crate) default_value: std::option::Option<std::string::String>,
    pub(crate) descriptive_text: std::option::Option<std::string::String>,
    pub(crate) default_checked: std::option::Option<bool>,
    pub(crate) default_country_code: std::option::Option<std::string::String>,
    pub(crate) value_mappings: std::option::Option<crate::types::ValueMappings>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) min_value: std::option::Option<f32>,
    pub(crate) max_value: std::option::Option<f32>,
    pub(crate) step: std::option::Option<f32>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) is_array: std::option::Option<bool>,
}
impl FieldInputConfigBuilder {
    /// <p>The input type for the field. </p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The input type for the field. </p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies a field that requires input.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = Some(input);
        self
    }
    /// <p>Specifies a field that requires input.</p>
    pub fn set_required(mut self, input: std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Specifies a read only field.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = Some(input);
        self
    }
    /// <p>Specifies a read only field.</p>
    pub fn set_read_only(mut self, input: std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// <p>The text to display as a placeholder for the field.</p>
    pub fn placeholder(mut self, input: impl Into<std::string::String>) -> Self {
        self.placeholder = Some(input.into());
        self
    }
    /// <p>The text to display as a placeholder for the field.</p>
    pub fn set_placeholder(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.placeholder = input;
        self
    }
    /// <p>The default value for the field.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value for the field.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The text to display to describe the field.</p>
    pub fn descriptive_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.descriptive_text = Some(input.into());
        self
    }
    /// <p>The text to display to describe the field.</p>
    pub fn set_descriptive_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.descriptive_text = input;
        self
    }
    /// <p>Specifies whether a field has a default value.</p>
    pub fn default_checked(mut self, input: bool) -> Self {
        self.default_checked = Some(input);
        self
    }
    /// <p>Specifies whether a field has a default value.</p>
    pub fn set_default_checked(mut self, input: std::option::Option<bool>) -> Self {
        self.default_checked = input;
        self
    }
    /// <p>The default country code for a phone number.</p>
    pub fn default_country_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_country_code = Some(input.into());
        self
    }
    /// <p>The default country code for a phone number.</p>
    pub fn set_default_country_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_country_code = input;
        self
    }
    /// <p>The information to use to customize the input fields with data at runtime.</p>
    pub fn value_mappings(mut self, input: crate::types::ValueMappings) -> Self {
        self.value_mappings = Some(input);
        self
    }
    /// <p>The information to use to customize the input fields with data at runtime.</p>
    pub fn set_value_mappings(
        mut self,
        input: std::option::Option<crate::types::ValueMappings>,
    ) -> Self {
        self.value_mappings = input;
        self
    }
    /// <p>The name of the field.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the field.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The minimum value to display for the field.</p>
    pub fn min_value(mut self, input: f32) -> Self {
        self.min_value = Some(input);
        self
    }
    /// <p>The minimum value to display for the field.</p>
    pub fn set_min_value(mut self, input: std::option::Option<f32>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The maximum value to display for the field.</p>
    pub fn max_value(mut self, input: f32) -> Self {
        self.max_value = Some(input);
        self
    }
    /// <p>The maximum value to display for the field.</p>
    pub fn set_max_value(mut self, input: std::option::Option<f32>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The stepping increment for a numeric value in a field.</p>
    pub fn step(mut self, input: f32) -> Self {
        self.step = Some(input);
        self
    }
    /// <p>The stepping increment for a numeric value in a field.</p>
    pub fn set_step(mut self, input: std::option::Option<f32>) -> Self {
        self.step = input;
        self
    }
    /// <p>The value for the field.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value for the field.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specifies whether to render the field as an array. This property is ignored if the <code>dataSourceType</code> for the form is a Data Store.</p>
    pub fn is_array(mut self, input: bool) -> Self {
        self.is_array = Some(input);
        self
    }
    /// <p>Specifies whether to render the field as an array. This property is ignored if the <code>dataSourceType</code> for the form is a Data Store.</p>
    pub fn set_is_array(mut self, input: std::option::Option<bool>) -> Self {
        self.is_array = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldInputConfig`](crate::types::FieldInputConfig).
    pub fn build(self) -> crate::types::FieldInputConfig {
        crate::types::FieldInputConfig {
            r#type: self.r#type,
            required: self.required,
            read_only: self.read_only,
            placeholder: self.placeholder,
            default_value: self.default_value,
            descriptive_text: self.descriptive_text,
            default_checked: self.default_checked,
            default_country_code: self.default_country_code,
            value_mappings: self.value_mappings,
            name: self.name,
            min_value: self.min_value,
            max_value: self.max_value,
            step: self.step,
            value: self.value,
            is_array: self.is_array,
        }
    }
}
