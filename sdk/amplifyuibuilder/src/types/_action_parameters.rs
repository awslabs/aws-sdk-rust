// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the event action configuration for an element of a <code>Component</code> or <code>ComponentChild</code>. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. <code>ActionParameters</code> defines the action that is performed when an event occurs on the component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionParameters {
    /// <p>The type of navigation action. Valid values are <code>url</code> and <code>anchor</code>. This value is required for a navigation action.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ComponentProperty>,
    /// <p>The URL to the location to open. Specify this value for a navigation action.</p>
    #[doc(hidden)]
    pub url: std::option::Option<crate::types::ComponentProperty>,
    /// <p>The HTML anchor link to the location to open. Specify this value for a navigation action.</p>
    #[doc(hidden)]
    pub anchor: std::option::Option<crate::types::ComponentProperty>,
    /// <p>The element within the same component to modify when the action occurs.</p>
    #[doc(hidden)]
    pub target: std::option::Option<crate::types::ComponentProperty>,
    /// <p>Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.</p>
    #[doc(hidden)]
    pub global: std::option::Option<crate::types::ComponentProperty>,
    /// <p>The name of the data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    #[doc(hidden)]
    pub model: std::option::Option<std::string::String>,
    /// <p>The unique ID of the component that the <code>ActionParameters</code> apply to.</p>
    #[doc(hidden)]
    pub id: std::option::Option<crate::types::ComponentProperty>,
    /// <p>A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ComponentProperty>,
    >,
    /// <p>A key-value pair that specifies the state property name and its initial value.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::MutationActionSetStateParameter>,
}
impl ActionParameters {
    /// <p>The type of navigation action. Valid values are <code>url</code> and <code>anchor</code>. This value is required for a navigation action.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.r#type.as_ref()
    }
    /// <p>The URL to the location to open. Specify this value for a navigation action.</p>
    pub fn url(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.url.as_ref()
    }
    /// <p>The HTML anchor link to the location to open. Specify this value for a navigation action.</p>
    pub fn anchor(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.anchor.as_ref()
    }
    /// <p>The element within the same component to modify when the action occurs.</p>
    pub fn target(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.target.as_ref()
    }
    /// <p>Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.</p>
    pub fn global(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.global.as_ref()
    }
    /// <p>The name of the data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn model(&self) -> std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The unique ID of the component that the <code>ActionParameters</code> apply to.</p>
    pub fn id(&self) -> std::option::Option<&crate::types::ComponentProperty> {
        self.id.as_ref()
    }
    /// <p>A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn fields(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ComponentProperty>,
    > {
        self.fields.as_ref()
    }
    /// <p>A key-value pair that specifies the state property name and its initial value.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::MutationActionSetStateParameter> {
        self.state.as_ref()
    }
}
impl ActionParameters {
    /// Creates a new builder-style object to manufacture [`ActionParameters`](crate::types::ActionParameters).
    pub fn builder() -> crate::types::builders::ActionParametersBuilder {
        crate::types::builders::ActionParametersBuilder::default()
    }
}

/// A builder for [`ActionParameters`](crate::types::ActionParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionParametersBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) url: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) anchor: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) target: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) global: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) model: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<crate::types::ComponentProperty>,
    pub(crate) fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ComponentProperty>,
    >,
    pub(crate) state: std::option::Option<crate::types::MutationActionSetStateParameter>,
}
impl ActionParametersBuilder {
    /// <p>The type of navigation action. Valid values are <code>url</code> and <code>anchor</code>. This value is required for a navigation action.</p>
    pub fn r#type(mut self, input: crate::types::ComponentProperty) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of navigation action. Valid values are <code>url</code> and <code>anchor</code>. This value is required for a navigation action.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ComponentProperty>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The URL to the location to open. Specify this value for a navigation action.</p>
    pub fn url(mut self, input: crate::types::ComponentProperty) -> Self {
        self.url = Some(input);
        self
    }
    /// <p>The URL to the location to open. Specify this value for a navigation action.</p>
    pub fn set_url(mut self, input: std::option::Option<crate::types::ComponentProperty>) -> Self {
        self.url = input;
        self
    }
    /// <p>The HTML anchor link to the location to open. Specify this value for a navigation action.</p>
    pub fn anchor(mut self, input: crate::types::ComponentProperty) -> Self {
        self.anchor = Some(input);
        self
    }
    /// <p>The HTML anchor link to the location to open. Specify this value for a navigation action.</p>
    pub fn set_anchor(
        mut self,
        input: std::option::Option<crate::types::ComponentProperty>,
    ) -> Self {
        self.anchor = input;
        self
    }
    /// <p>The element within the same component to modify when the action occurs.</p>
    pub fn target(mut self, input: crate::types::ComponentProperty) -> Self {
        self.target = Some(input);
        self
    }
    /// <p>The element within the same component to modify when the action occurs.</p>
    pub fn set_target(
        mut self,
        input: std::option::Option<crate::types::ComponentProperty>,
    ) -> Self {
        self.target = input;
        self
    }
    /// <p>Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.</p>
    pub fn global(mut self, input: crate::types::ComponentProperty) -> Self {
        self.global = Some(input);
        self
    }
    /// <p>Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.</p>
    pub fn set_global(
        mut self,
        input: std::option::Option<crate::types::ComponentProperty>,
    ) -> Self {
        self.global = input;
        self
    }
    /// <p>The name of the data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn model(mut self, input: impl Into<std::string::String>) -> Self {
        self.model = Some(input.into());
        self
    }
    /// <p>The name of the data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn set_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>The unique ID of the component that the <code>ActionParameters</code> apply to.</p>
    pub fn id(mut self, input: crate::types::ComponentProperty) -> Self {
        self.id = Some(input);
        self
    }
    /// <p>The unique ID of the component that the <code>ActionParameters</code> apply to.</p>
    pub fn set_id(mut self, input: std::option::Option<crate::types::ComponentProperty>) -> Self {
        self.id = input;
        self
    }
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn fields(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ComponentProperty,
    ) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = Some(hash_map);
        self
    }
    /// <p>A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ComponentProperty>,
        >,
    ) -> Self {
        self.fields = input;
        self
    }
    /// <p>A key-value pair that specifies the state property name and its initial value.</p>
    pub fn state(mut self, input: crate::types::MutationActionSetStateParameter) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>A key-value pair that specifies the state property name and its initial value.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::MutationActionSetStateParameter>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionParameters`](crate::types::ActionParameters).
    pub fn build(self) -> crate::types::ActionParameters {
        crate::types::ActionParameters {
            r#type: self.r#type,
            url: self.url,
            anchor: self.anchor,
            target: self.target,
            global: self.global,
            model: self.model,
            id: self.id,
            fields: self.fields,
            state: self.state,
        }
    }
}
