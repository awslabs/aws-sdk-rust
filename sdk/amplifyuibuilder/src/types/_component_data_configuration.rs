// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for binding a component's properties to data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentDataConfiguration {
    /// <p>The name of the data model to use to bind data to a component.</p>
    #[doc(hidden)]
    pub model: std::option::Option<std::string::String>,
    /// <p>Describes how to sort the component's properties.</p>
    #[doc(hidden)]
    pub sort: std::option::Option<std::vec::Vec<crate::types::SortProperty>>,
    /// <p>Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.</p>
    #[doc(hidden)]
    pub predicate: std::option::Option<crate::types::Predicate>,
    /// <p>A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.</p>
    #[doc(hidden)]
    pub identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ComponentDataConfiguration {
    /// <p>The name of the data model to use to bind data to a component.</p>
    pub fn model(&self) -> std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>Describes how to sort the component's properties.</p>
    pub fn sort(&self) -> std::option::Option<&[crate::types::SortProperty]> {
        self.sort.as_deref()
    }
    /// <p>Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.</p>
    pub fn predicate(&self) -> std::option::Option<&crate::types::Predicate> {
        self.predicate.as_ref()
    }
    /// <p>A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.</p>
    pub fn identifiers(&self) -> std::option::Option<&[std::string::String]> {
        self.identifiers.as_deref()
    }
}
impl ComponentDataConfiguration {
    /// Creates a new builder-style object to manufacture [`ComponentDataConfiguration`](crate::types::ComponentDataConfiguration).
    pub fn builder() -> crate::types::builders::ComponentDataConfigurationBuilder {
        crate::types::builders::ComponentDataConfigurationBuilder::default()
    }
}

/// A builder for [`ComponentDataConfiguration`](crate::types::ComponentDataConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentDataConfigurationBuilder {
    pub(crate) model: std::option::Option<std::string::String>,
    pub(crate) sort: std::option::Option<std::vec::Vec<crate::types::SortProperty>>,
    pub(crate) predicate: std::option::Option<crate::types::Predicate>,
    pub(crate) identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ComponentDataConfigurationBuilder {
    /// <p>The name of the data model to use to bind data to a component.</p>
    pub fn model(mut self, input: impl Into<std::string::String>) -> Self {
        self.model = Some(input.into());
        self
    }
    /// <p>The name of the data model to use to bind data to a component.</p>
    pub fn set_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// Appends an item to `sort`.
    ///
    /// To override the contents of this collection use [`set_sort`](Self::set_sort).
    ///
    /// <p>Describes how to sort the component's properties.</p>
    pub fn sort(mut self, input: crate::types::SortProperty) -> Self {
        let mut v = self.sort.unwrap_or_default();
        v.push(input);
        self.sort = Some(v);
        self
    }
    /// <p>Describes how to sort the component's properties.</p>
    pub fn set_sort(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SortProperty>>,
    ) -> Self {
        self.sort = input;
        self
    }
    /// <p>Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.</p>
    pub fn predicate(mut self, input: crate::types::Predicate) -> Self {
        self.predicate = Some(input);
        self
    }
    /// <p>Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.</p>
    pub fn set_predicate(mut self, input: std::option::Option<crate::types::Predicate>) -> Self {
        self.predicate = input;
        self
    }
    /// Appends an item to `identifiers`.
    ///
    /// To override the contents of this collection use [`set_identifiers`](Self::set_identifiers).
    ///
    /// <p>A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.</p>
    pub fn identifiers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.identifiers.unwrap_or_default();
        v.push(input.into());
        self.identifiers = Some(v);
        self
    }
    /// <p>A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.</p>
    pub fn set_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.identifiers = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentDataConfiguration`](crate::types::ComponentDataConfiguration).
    pub fn build(self) -> crate::types::ComponentDataConfiguration {
        crate::types::ComponentDataConfiguration {
            model: self.model,
            sort: self.sort,
            predicate: self.predicate,
            identifiers: self.identifiers,
        }
    }
}
