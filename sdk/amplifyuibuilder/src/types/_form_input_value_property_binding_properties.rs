// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FormInputValuePropertyBindingProperties {
    /// <p>The form property to bind to the data field.</p>
    pub property: ::std::string::String,
    /// <p>The data field to bind the property to.</p>
    pub field: ::std::option::Option<::std::string::String>,
}
impl FormInputValuePropertyBindingProperties {
    /// <p>The form property to bind to the data field.</p>
    pub fn property(&self) -> &str {
        use std::ops::Deref;
        self.property.deref()
    }
    /// <p>The data field to bind the property to.</p>
    pub fn field(&self) -> ::std::option::Option<&str> {
        self.field.as_deref()
    }
}
impl FormInputValuePropertyBindingProperties {
    /// Creates a new builder-style object to manufacture [`FormInputValuePropertyBindingProperties`](crate::types::FormInputValuePropertyBindingProperties).
    pub fn builder() -> crate::types::builders::FormInputValuePropertyBindingPropertiesBuilder {
        crate::types::builders::FormInputValuePropertyBindingPropertiesBuilder::default()
    }
}

/// A builder for [`FormInputValuePropertyBindingProperties`](crate::types::FormInputValuePropertyBindingProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FormInputValuePropertyBindingPropertiesBuilder {
    pub(crate) property: ::std::option::Option<::std::string::String>,
    pub(crate) field: ::std::option::Option<::std::string::String>,
}
impl FormInputValuePropertyBindingPropertiesBuilder {
    /// <p>The form property to bind to the data field.</p>
    /// This field is required.
    pub fn property(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The form property to bind to the data field.</p>
    pub fn set_property(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property = input;
        self
    }
    /// <p>The form property to bind to the data field.</p>
    pub fn get_property(&self) -> &::std::option::Option<::std::string::String> {
        &self.property
    }
    /// <p>The data field to bind the property to.</p>
    pub fn field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data field to bind the property to.</p>
    pub fn set_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The data field to bind the property to.</p>
    pub fn get_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.field
    }
    /// Consumes the builder and constructs a [`FormInputValuePropertyBindingProperties`](crate::types::FormInputValuePropertyBindingProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`property`](crate::types::builders::FormInputValuePropertyBindingPropertiesBuilder::property)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::FormInputValuePropertyBindingProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FormInputValuePropertyBindingProperties {
            property: self.property.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property",
                    "property was not specified but it is required when building FormInputValuePropertyBindingProperties",
                )
            })?,
            field: self.field,
        })
    }
}
