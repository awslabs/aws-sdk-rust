// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a theme's properties.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThemeValue {
    /// <p>The value of a theme property.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    #[doc(hidden)]
    pub children: std::option::Option<std::vec::Vec<crate::types::ThemeValues>>,
}
impl ThemeValue {
    /// <p>The value of a theme property.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn children(&self) -> std::option::Option<&[crate::types::ThemeValues]> {
        self.children.as_deref()
    }
}
impl ThemeValue {
    /// Creates a new builder-style object to manufacture [`ThemeValue`](crate::types::ThemeValue).
    pub fn builder() -> crate::types::builders::ThemeValueBuilder {
        crate::types::builders::ThemeValueBuilder::default()
    }
}

/// A builder for [`ThemeValue`](crate::types::ThemeValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThemeValueBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) children: std::option::Option<std::vec::Vec<crate::types::ThemeValues>>,
}
impl ThemeValueBuilder {
    /// <p>The value of a theme property.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of a theme property.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Appends an item to `children`.
    ///
    /// To override the contents of this collection use [`set_children`](Self::set_children).
    ///
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn children(mut self, input: crate::types::ThemeValues) -> Self {
        let mut v = self.children.unwrap_or_default();
        v.push(input);
        self.children = Some(v);
        self
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn set_children(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ThemeValues>>,
    ) -> Self {
        self.children = input;
        self
    }
    /// Consumes the builder and constructs a [`ThemeValue`](crate::types::ThemeValue).
    pub fn build(self) -> crate::types::ThemeValue {
        crate::types::ThemeValue {
            value: self.value,
            children: self.children,
        }
    }
}
