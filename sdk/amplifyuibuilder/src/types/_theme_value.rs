// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a theme's properties.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThemeValue {
    /// <p>The value of a theme property.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub children: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>,
}
impl ThemeValue {
    /// <p>The value of a theme property.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.children.is_none()`.
    pub fn children(&self) -> &[crate::types::ThemeValues] {
        self.children.as_deref().unwrap_or_default()
    }
}
impl ThemeValue {
    /// Creates a new builder-style object to manufacture [`ThemeValue`](crate::types::ThemeValue).
    pub fn builder() -> crate::types::builders::ThemeValueBuilder {
        crate::types::builders::ThemeValueBuilder::default()
    }
}

/// A builder for [`ThemeValue`](crate::types::ThemeValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ThemeValueBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) children: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>,
}
impl ThemeValueBuilder {
    /// <p>The value of a theme property.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of a theme property.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a theme property.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Appends an item to `children`.
    ///
    /// To override the contents of this collection use [`set_children`](Self::set_children).
    ///
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn children(mut self, input: crate::types::ThemeValues) -> Self {
        let mut v = self.children.unwrap_or_default();
        v.push(input);
        self.children = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn set_children(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>>) -> Self {
        self.children = input;
        self
    }
    /// <p>A list of key-value pairs that define the theme's properties.</p>
    pub fn get_children(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeValues>> {
        &self.children
    }
    /// Consumes the builder and constructs a [`ThemeValue`](crate::types::ThemeValue).
    pub fn build(self) -> crate::types::ThemeValue {
        crate::types::ThemeValue {
            value: self.value,
            children: self.children,
        }
    }
}
