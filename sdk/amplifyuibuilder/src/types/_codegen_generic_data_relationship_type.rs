// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the relationship between generic data models.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodegenGenericDataRelationshipType {
    /// <p>The data relationship type.</p>
    pub r#type: crate::types::GenericDataRelationshipType,
    /// <p>The name of the related model in the data relationship.</p>
    pub related_model_name: ::std::string::String,
    /// <p>The related model fields in the data relationship.</p>
    pub related_model_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether the relationship can unlink the associated model.</p>
    pub can_unlink_associated_model: ::std::option::Option<bool>,
    /// <p>The name of the related join field in the data relationship.</p>
    pub related_join_field_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the related join table in the data relationship.</p>
    pub related_join_table_name: ::std::option::Option<::std::string::String>,
    /// <p>The value of the <code>belongsTo</code> field on the related data model. </p>
    pub belongs_to_field_on_related_model: ::std::option::Option<::std::string::String>,
    /// <p>The associated fields of the data relationship.</p>
    pub associated_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship.</p>
    pub is_has_many_index: ::std::option::Option<bool>,
}
impl CodegenGenericDataRelationshipType {
    /// <p>The data relationship type.</p>
    pub fn r#type(&self) -> &crate::types::GenericDataRelationshipType {
        &self.r#type
    }
    /// <p>The name of the related model in the data relationship.</p>
    pub fn related_model_name(&self) -> &str {
        use std::ops::Deref;
        self.related_model_name.deref()
    }
    /// <p>The related model fields in the data relationship.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_model_fields.is_none()`.
    pub fn related_model_fields(&self) -> &[::std::string::String] {
        self.related_model_fields.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the relationship can unlink the associated model.</p>
    pub fn can_unlink_associated_model(&self) -> ::std::option::Option<bool> {
        self.can_unlink_associated_model
    }
    /// <p>The name of the related join field in the data relationship.</p>
    pub fn related_join_field_name(&self) -> ::std::option::Option<&str> {
        self.related_join_field_name.as_deref()
    }
    /// <p>The name of the related join table in the data relationship.</p>
    pub fn related_join_table_name(&self) -> ::std::option::Option<&str> {
        self.related_join_table_name.as_deref()
    }
    /// <p>The value of the <code>belongsTo</code> field on the related data model. </p>
    pub fn belongs_to_field_on_related_model(&self) -> ::std::option::Option<&str> {
        self.belongs_to_field_on_related_model.as_deref()
    }
    /// <p>The associated fields of the data relationship.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_fields.is_none()`.
    pub fn associated_fields(&self) -> &[::std::string::String] {
        self.associated_fields.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship.</p>
    pub fn is_has_many_index(&self) -> ::std::option::Option<bool> {
        self.is_has_many_index
    }
}
impl CodegenGenericDataRelationshipType {
    /// Creates a new builder-style object to manufacture [`CodegenGenericDataRelationshipType`](crate::types::CodegenGenericDataRelationshipType).
    pub fn builder() -> crate::types::builders::CodegenGenericDataRelationshipTypeBuilder {
        crate::types::builders::CodegenGenericDataRelationshipTypeBuilder::default()
    }
}

/// A builder for [`CodegenGenericDataRelationshipType`](crate::types::CodegenGenericDataRelationshipType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodegenGenericDataRelationshipTypeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GenericDataRelationshipType>,
    pub(crate) related_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) related_model_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) can_unlink_associated_model: ::std::option::Option<bool>,
    pub(crate) related_join_field_name: ::std::option::Option<::std::string::String>,
    pub(crate) related_join_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) belongs_to_field_on_related_model: ::std::option::Option<::std::string::String>,
    pub(crate) associated_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) is_has_many_index: ::std::option::Option<bool>,
}
impl CodegenGenericDataRelationshipTypeBuilder {
    /// <p>The data relationship type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::GenericDataRelationshipType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data relationship type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GenericDataRelationshipType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data relationship type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GenericDataRelationshipType> {
        &self.r#type
    }
    /// <p>The name of the related model in the data relationship.</p>
    /// This field is required.
    pub fn related_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the related model in the data relationship.</p>
    pub fn set_related_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_model_name = input;
        self
    }
    /// <p>The name of the related model in the data relationship.</p>
    pub fn get_related_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_model_name
    }
    /// Appends an item to `related_model_fields`.
    ///
    /// To override the contents of this collection use [`set_related_model_fields`](Self::set_related_model_fields).
    ///
    /// <p>The related model fields in the data relationship.</p>
    pub fn related_model_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.related_model_fields.unwrap_or_default();
        v.push(input.into());
        self.related_model_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The related model fields in the data relationship.</p>
    pub fn set_related_model_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.related_model_fields = input;
        self
    }
    /// <p>The related model fields in the data relationship.</p>
    pub fn get_related_model_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.related_model_fields
    }
    /// <p>Specifies whether the relationship can unlink the associated model.</p>
    pub fn can_unlink_associated_model(mut self, input: bool) -> Self {
        self.can_unlink_associated_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the relationship can unlink the associated model.</p>
    pub fn set_can_unlink_associated_model(mut self, input: ::std::option::Option<bool>) -> Self {
        self.can_unlink_associated_model = input;
        self
    }
    /// <p>Specifies whether the relationship can unlink the associated model.</p>
    pub fn get_can_unlink_associated_model(&self) -> &::std::option::Option<bool> {
        &self.can_unlink_associated_model
    }
    /// <p>The name of the related join field in the data relationship.</p>
    pub fn related_join_field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_join_field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the related join field in the data relationship.</p>
    pub fn set_related_join_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_join_field_name = input;
        self
    }
    /// <p>The name of the related join field in the data relationship.</p>
    pub fn get_related_join_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_join_field_name
    }
    /// <p>The name of the related join table in the data relationship.</p>
    pub fn related_join_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_join_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the related join table in the data relationship.</p>
    pub fn set_related_join_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_join_table_name = input;
        self
    }
    /// <p>The name of the related join table in the data relationship.</p>
    pub fn get_related_join_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_join_table_name
    }
    /// <p>The value of the <code>belongsTo</code> field on the related data model. </p>
    pub fn belongs_to_field_on_related_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.belongs_to_field_on_related_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the <code>belongsTo</code> field on the related data model. </p>
    pub fn set_belongs_to_field_on_related_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.belongs_to_field_on_related_model = input;
        self
    }
    /// <p>The value of the <code>belongsTo</code> field on the related data model. </p>
    pub fn get_belongs_to_field_on_related_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.belongs_to_field_on_related_model
    }
    /// Appends an item to `associated_fields`.
    ///
    /// To override the contents of this collection use [`set_associated_fields`](Self::set_associated_fields).
    ///
    /// <p>The associated fields of the data relationship.</p>
    pub fn associated_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.associated_fields.unwrap_or_default();
        v.push(input.into());
        self.associated_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associated fields of the data relationship.</p>
    pub fn set_associated_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.associated_fields = input;
        self
    }
    /// <p>The associated fields of the data relationship.</p>
    pub fn get_associated_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.associated_fields
    }
    /// <p>Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship.</p>
    pub fn is_has_many_index(mut self, input: bool) -> Self {
        self.is_has_many_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship.</p>
    pub fn set_is_has_many_index(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_has_many_index = input;
        self
    }
    /// <p>Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship.</p>
    pub fn get_is_has_many_index(&self) -> &::std::option::Option<bool> {
        &self.is_has_many_index
    }
    /// Consumes the builder and constructs a [`CodegenGenericDataRelationshipType`](crate::types::CodegenGenericDataRelationshipType).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::CodegenGenericDataRelationshipTypeBuilder::r#type)
    /// - [`related_model_name`](crate::types::builders::CodegenGenericDataRelationshipTypeBuilder::related_model_name)
    pub fn build(self) -> ::std::result::Result<crate::types::CodegenGenericDataRelationshipType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodegenGenericDataRelationshipType {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CodegenGenericDataRelationshipType",
                )
            })?,
            related_model_name: self.related_model_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "related_model_name",
                    "related_model_name was not specified but it is required when building CodegenGenericDataRelationshipType",
                )
            })?,
            related_model_fields: self.related_model_fields,
            can_unlink_associated_model: self.can_unlink_associated_model,
            related_join_field_name: self.related_join_field_name,
            related_join_table_name: self.related_join_table_name,
            belongs_to_field_on_related_model: self.belongs_to_field_on_related_model,
            associated_fields: self.associated_fields,
            is_has_many_index: self.is_has_many_index,
        })
    }
}
