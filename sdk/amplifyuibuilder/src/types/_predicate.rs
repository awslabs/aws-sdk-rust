// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores information for generating Amplify DataStore queries. Use a <code>Predicate</code> to retrieve a subset of the data in a collection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Predicate {
    /// <p>A list of predicates to combine logically.</p>
    pub or: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    /// <p>A list of predicates to combine logically.</p>
    pub and: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    /// <p>The field to query.</p>
    pub field: ::std::option::Option<::std::string::String>,
    /// <p>The operator to use to perform the evaluation.</p>
    pub operator: ::std::option::Option<::std::string::String>,
    /// <p>The value to use when performing the evaluation.</p>
    pub operand: ::std::option::Option<::std::string::String>,
    /// <p>The type of value to use when performing the evaluation.</p>
    pub operand_type: ::std::option::Option<::std::string::String>,
}
impl Predicate {
    /// <p>A list of predicates to combine logically.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or.is_none()`.
    pub fn or(&self) -> &[crate::types::Predicate] {
        self.or.as_deref().unwrap_or_default()
    }
    /// <p>A list of predicates to combine logically.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and.is_none()`.
    pub fn and(&self) -> &[crate::types::Predicate] {
        self.and.as_deref().unwrap_or_default()
    }
    /// <p>The field to query.</p>
    pub fn field(&self) -> ::std::option::Option<&str> {
        self.field.as_deref()
    }
    /// <p>The operator to use to perform the evaluation.</p>
    pub fn operator(&self) -> ::std::option::Option<&str> {
        self.operator.as_deref()
    }
    /// <p>The value to use when performing the evaluation.</p>
    pub fn operand(&self) -> ::std::option::Option<&str> {
        self.operand.as_deref()
    }
    /// <p>The type of value to use when performing the evaluation.</p>
    pub fn operand_type(&self) -> ::std::option::Option<&str> {
        self.operand_type.as_deref()
    }
}
impl Predicate {
    /// Creates a new builder-style object to manufacture [`Predicate`](crate::types::Predicate).
    pub fn builder() -> crate::types::builders::PredicateBuilder {
        crate::types::builders::PredicateBuilder::default()
    }
}

/// A builder for [`Predicate`](crate::types::Predicate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredicateBuilder {
    pub(crate) or: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    pub(crate) and: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>,
    pub(crate) field: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<::std::string::String>,
    pub(crate) operand: ::std::option::Option<::std::string::String>,
    pub(crate) operand_type: ::std::option::Option<::std::string::String>,
}
impl PredicateBuilder {
    /// Appends an item to `or`.
    ///
    /// To override the contents of this collection use [`set_or`](Self::set_or).
    ///
    /// <p>A list of predicates to combine logically.</p>
    pub fn or(mut self, input: crate::types::Predicate) -> Self {
        let mut v = self.or.unwrap_or_default();
        v.push(input);
        self.or = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of predicates to combine logically.</p>
    pub fn set_or(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>) -> Self {
        self.or = input;
        self
    }
    /// <p>A list of predicates to combine logically.</p>
    pub fn get_or(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Predicate>> {
        &self.or
    }
    /// Appends an item to `and`.
    ///
    /// To override the contents of this collection use [`set_and`](Self::set_and).
    ///
    /// <p>A list of predicates to combine logically.</p>
    pub fn and(mut self, input: crate::types::Predicate) -> Self {
        let mut v = self.and.unwrap_or_default();
        v.push(input);
        self.and = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of predicates to combine logically.</p>
    pub fn set_and(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Predicate>>) -> Self {
        self.and = input;
        self
    }
    /// <p>A list of predicates to combine logically.</p>
    pub fn get_and(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Predicate>> {
        &self.and
    }
    /// <p>The field to query.</p>
    pub fn field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field to query.</p>
    pub fn set_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The field to query.</p>
    pub fn get_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.field
    }
    /// <p>The operator to use to perform the evaluation.</p>
    pub fn operator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operator to use to perform the evaluation.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operator to use to perform the evaluation.</p>
    pub fn get_operator(&self) -> &::std::option::Option<::std::string::String> {
        &self.operator
    }
    /// <p>The value to use when performing the evaluation.</p>
    pub fn operand(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operand = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to use when performing the evaluation.</p>
    pub fn set_operand(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operand = input;
        self
    }
    /// <p>The value to use when performing the evaluation.</p>
    pub fn get_operand(&self) -> &::std::option::Option<::std::string::String> {
        &self.operand
    }
    /// <p>The type of value to use when performing the evaluation.</p>
    pub fn operand_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operand_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of value to use when performing the evaluation.</p>
    pub fn set_operand_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operand_type = input;
        self
    }
    /// <p>The type of value to use when performing the evaluation.</p>
    pub fn get_operand_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.operand_type
    }
    /// Consumes the builder and constructs a [`Predicate`](crate::types::Predicate).
    pub fn build(self) -> crate::types::Predicate {
        crate::types::Predicate {
            or: self.or,
            and: self.and,
            field: self.field,
            operator: self.operator,
            operand: self.operand,
            operand_type: self.operand_type,
        }
    }
}
