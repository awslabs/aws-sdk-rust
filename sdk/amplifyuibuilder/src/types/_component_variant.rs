// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the style configuration of a unique variation of a main component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentVariant {
    /// <p>The combination of variants that comprise this variant. You can't specify <code>tags</code> as a valid property for <code>variantValues</code>.</p>
    #[doc(hidden)]
    pub variant_values:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify <code>tags</code> as a valid property for <code>overrides</code>.</p>
    #[doc(hidden)]
    pub overrides: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    >,
}
impl ComponentVariant {
    /// <p>The combination of variants that comprise this variant. You can't specify <code>tags</code> as a valid property for <code>variantValues</code>.</p>
    pub fn variant_values(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.variant_values.as_ref()
    }
    /// <p>The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify <code>tags</code> as a valid property for <code>overrides</code>.</p>
    pub fn overrides(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    > {
        self.overrides.as_ref()
    }
}
impl ComponentVariant {
    /// Creates a new builder-style object to manufacture [`ComponentVariant`](crate::types::ComponentVariant).
    pub fn builder() -> crate::types::builders::ComponentVariantBuilder {
        crate::types::builders::ComponentVariantBuilder::default()
    }
}

/// A builder for [`ComponentVariant`](crate::types::ComponentVariant).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentVariantBuilder {
    pub(crate) variant_values:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) overrides: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    >,
}
impl ComponentVariantBuilder {
    /// Adds a key-value pair to `variant_values`.
    ///
    /// To override the contents of this collection use [`set_variant_values`](Self::set_variant_values).
    ///
    /// <p>The combination of variants that comprise this variant. You can't specify <code>tags</code> as a valid property for <code>variantValues</code>.</p>
    pub fn variant_values(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.variant_values.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.variant_values = Some(hash_map);
        self
    }
    /// <p>The combination of variants that comprise this variant. You can't specify <code>tags</code> as a valid property for <code>variantValues</code>.</p>
    pub fn set_variant_values(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.variant_values = input;
        self
    }
    /// Adds a key-value pair to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify <code>tags</code> as a valid property for <code>overrides</code>.</p>
    pub fn overrides(
        mut self,
        k: impl Into<std::string::String>,
        v: std::collections::HashMap<std::string::String, std::string::String>,
    ) -> Self {
        let mut hash_map = self.overrides.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.overrides = Some(hash_map);
        self
    }
    /// <p>The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify <code>tags</code> as a valid property for <code>overrides</code>.</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        >,
    ) -> Self {
        self.overrides = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentVariant`](crate::types::ComponentVariant).
    pub fn build(self) -> crate::types::ComponentVariant {
        crate::types::ComponentVariant {
            variant_values: self.variant_values,
            overrides: self.overrides,
        }
    }
}
