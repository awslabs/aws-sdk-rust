// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores the configuration information for a visual helper element for a form. A sectional element can be a header, a text block, or a divider. These elements are static and not associated with any data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SectionalElement {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    #[doc(hidden)]
    pub position: std::option::Option<crate::types::FieldPosition>,
    /// <p>The text for a <code>Text</code> sectional element.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    #[doc(hidden)]
    pub level: std::option::Option<i32>,
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    #[doc(hidden)]
    pub orientation: std::option::Option<std::string::String>,
}
impl SectionalElement {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn position(&self) -> std::option::Option<&crate::types::FieldPosition> {
        self.position.as_ref()
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn level(&self) -> std::option::Option<i32> {
        self.level
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn orientation(&self) -> std::option::Option<&str> {
        self.orientation.as_deref()
    }
}
impl SectionalElement {
    /// Creates a new builder-style object to manufacture [`SectionalElement`](crate::types::SectionalElement).
    pub fn builder() -> crate::types::builders::SectionalElementBuilder {
        crate::types::builders::SectionalElementBuilder::default()
    }
}

/// A builder for [`SectionalElement`](crate::types::SectionalElement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SectionalElementBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) position: std::option::Option<crate::types::FieldPosition>,
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) level: std::option::Option<i32>,
    pub(crate) orientation: std::option::Option<std::string::String>,
}
impl SectionalElementBuilder {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn position(mut self, input: crate::types::FieldPosition) -> Self {
        self.position = Some(input);
        self
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn set_position(mut self, input: std::option::Option<crate::types::FieldPosition>) -> Self {
        self.position = input;
        self
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn level(mut self, input: i32) -> Self {
        self.level = Some(input);
        self
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn set_level(mut self, input: std::option::Option<i32>) -> Self {
        self.level = input;
        self
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn orientation(mut self, input: impl Into<std::string::String>) -> Self {
        self.orientation = Some(input.into());
        self
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn set_orientation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.orientation = input;
        self
    }
    /// Consumes the builder and constructs a [`SectionalElement`](crate::types::SectionalElement).
    pub fn build(self) -> crate::types::SectionalElement {
        crate::types::SectionalElement {
            r#type: self.r#type,
            position: self.position,
            text: self.text,
            level: self.level,
            orientation: self.orientation,
        }
    }
}
