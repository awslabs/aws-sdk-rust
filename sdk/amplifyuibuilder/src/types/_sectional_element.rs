// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores the configuration information for a visual helper element for a form. A sectional element can be a header, a text block, or a divider. These elements are static and not associated with any data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SectionalElement {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub r#type: ::std::string::String,
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub position: ::std::option::Option<crate::types::FieldPosition>,
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub level: ::std::option::Option<i32>,
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub orientation: ::std::option::Option<::std::string::String>,
    /// <p>Excludes a sectional element that was generated by default for a specified data model.</p>
    pub excluded: ::std::option::Option<bool>,
}
impl SectionalElement {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn position(&self) -> ::std::option::Option<&crate::types::FieldPosition> {
        self.position.as_ref()
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn level(&self) -> ::std::option::Option<i32> {
        self.level
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn orientation(&self) -> ::std::option::Option<&str> {
        self.orientation.as_deref()
    }
    /// <p>Excludes a sectional element that was generated by default for a specified data model.</p>
    pub fn excluded(&self) -> ::std::option::Option<bool> {
        self.excluded
    }
}
impl SectionalElement {
    /// Creates a new builder-style object to manufacture [`SectionalElement`](crate::types::SectionalElement).
    pub fn builder() -> crate::types::builders::SectionalElementBuilder {
        crate::types::builders::SectionalElementBuilder::default()
    }
}

/// A builder for [`SectionalElement`](crate::types::SectionalElement).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SectionalElementBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) position: ::std::option::Option<crate::types::FieldPosition>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) level: ::std::option::Option<i32>,
    pub(crate) orientation: ::std::option::Option<::std::string::String>,
    pub(crate) excluded: ::std::option::Option<bool>,
}
impl SectionalElementBuilder {
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of sectional element. Valid values are <code>Heading</code>, <code>Text</code>, and <code>Divider</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn position(mut self, input: crate::types::FieldPosition) -> Self {
        self.position = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn set_position(mut self, input: ::std::option::Option<crate::types::FieldPosition>) -> Self {
        self.position = input;
        self
    }
    /// <p>Specifies the position of the text in a field for a <code>Text</code> sectional element.</p>
    pub fn get_position(&self) -> &::std::option::Option<crate::types::FieldPosition> {
        &self.position
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text for a <code>Text</code> sectional element.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn level(mut self, input: i32) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn set_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.level = input;
        self
    }
    /// <p>Specifies the size of the font for a <code>Heading</code> sectional element. Valid values are <code>1 | 2 | 3 | 4 | 5 | 6</code>.</p>
    pub fn get_level(&self) -> &::std::option::Option<i32> {
        &self.level
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn orientation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.orientation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn set_orientation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.orientation = input;
        self
    }
    /// <p>Specifies the orientation for a <code>Divider</code> sectional element. Valid values are <code>horizontal</code> or <code>vertical</code>.</p>
    pub fn get_orientation(&self) -> &::std::option::Option<::std::string::String> {
        &self.orientation
    }
    /// <p>Excludes a sectional element that was generated by default for a specified data model.</p>
    pub fn excluded(mut self, input: bool) -> Self {
        self.excluded = ::std::option::Option::Some(input);
        self
    }
    /// <p>Excludes a sectional element that was generated by default for a specified data model.</p>
    pub fn set_excluded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.excluded = input;
        self
    }
    /// <p>Excludes a sectional element that was generated by default for a specified data model.</p>
    pub fn get_excluded(&self) -> &::std::option::Option<bool> {
        &self.excluded
    }
    /// Consumes the builder and constructs a [`SectionalElement`](crate::types::SectionalElement).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SectionalElementBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::SectionalElement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SectionalElement {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SectionalElement",
                )
            })?,
            position: self.position,
            text: self.text,
            level: self.level,
            orientation: self.orientation,
            excluded: self.excluded,
        })
    }
}
