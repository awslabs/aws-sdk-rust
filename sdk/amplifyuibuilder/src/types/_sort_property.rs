// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how to sort the data that you bind to a component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SortProperty {
    /// <p>The field to perform the sort on.</p>
    pub field: ::std::string::String,
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub direction: crate::types::SortDirection,
}
impl SortProperty {
    /// <p>The field to perform the sort on.</p>
    pub fn field(&self) -> &str {
        use std::ops::Deref;
        self.field.deref()
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn direction(&self) -> &crate::types::SortDirection {
        &self.direction
    }
}
impl SortProperty {
    /// Creates a new builder-style object to manufacture [`SortProperty`](crate::types::SortProperty).
    pub fn builder() -> crate::types::builders::SortPropertyBuilder {
        crate::types::builders::SortPropertyBuilder::default()
    }
}

/// A builder for [`SortProperty`](crate::types::SortProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SortPropertyBuilder {
    pub(crate) field: ::std::option::Option<::std::string::String>,
    pub(crate) direction: ::std::option::Option<crate::types::SortDirection>,
}
impl SortPropertyBuilder {
    /// <p>The field to perform the sort on.</p>
    /// This field is required.
    pub fn field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field to perform the sort on.</p>
    pub fn set_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The field to perform the sort on.</p>
    pub fn get_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.field
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    /// This field is required.
    pub fn direction(mut self, input: crate::types::SortDirection) -> Self {
        self.direction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<crate::types::SortDirection>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn get_direction(&self) -> &::std::option::Option<crate::types::SortDirection> {
        &self.direction
    }
    /// Consumes the builder and constructs a [`SortProperty`](crate::types::SortProperty).
    /// This method will fail if any of the following fields are not set:
    /// - [`field`](crate::types::builders::SortPropertyBuilder::field)
    /// - [`direction`](crate::types::builders::SortPropertyBuilder::direction)
    pub fn build(self) -> ::std::result::Result<crate::types::SortProperty, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SortProperty {
            field: self.field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field",
                    "field was not specified but it is required when building SortProperty",
                )
            })?,
            direction: self.direction.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "direction",
                    "direction was not specified but it is required when building SortProperty",
                )
            })?,
        })
    }
}
