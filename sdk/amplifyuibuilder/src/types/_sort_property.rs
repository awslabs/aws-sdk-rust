// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how to sort the data that you bind to a component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SortProperty {
    /// <p>The field to perform the sort on.</p>
    #[doc(hidden)]
    pub field: std::option::Option<std::string::String>,
    /// <p>The direction of the sort, either ascending or descending.</p>
    #[doc(hidden)]
    pub direction: std::option::Option<crate::types::SortDirection>,
}
impl SortProperty {
    /// <p>The field to perform the sort on.</p>
    pub fn field(&self) -> std::option::Option<&str> {
        self.field.as_deref()
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn direction(&self) -> std::option::Option<&crate::types::SortDirection> {
        self.direction.as_ref()
    }
}
impl SortProperty {
    /// Creates a new builder-style object to manufacture [`SortProperty`](crate::types::SortProperty).
    pub fn builder() -> crate::types::builders::SortPropertyBuilder {
        crate::types::builders::SortPropertyBuilder::default()
    }
}

/// A builder for [`SortProperty`](crate::types::SortProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SortPropertyBuilder {
    pub(crate) field: std::option::Option<std::string::String>,
    pub(crate) direction: std::option::Option<crate::types::SortDirection>,
}
impl SortPropertyBuilder {
    /// <p>The field to perform the sort on.</p>
    pub fn field(mut self, input: impl Into<std::string::String>) -> Self {
        self.field = Some(input.into());
        self
    }
    /// <p>The field to perform the sort on.</p>
    pub fn set_field(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field = input;
        self
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn direction(mut self, input: crate::types::SortDirection) -> Self {
        self.direction = Some(input);
        self
    }
    /// <p>The direction of the sort, either ascending or descending.</p>
    pub fn set_direction(
        mut self,
        input: std::option::Option<crate::types::SortDirection>,
    ) -> Self {
        self.direction = input;
        self
    }
    /// Consumes the builder and constructs a [`SortProperty`](crate::types::SortProperty).
    pub fn build(self) -> crate::types::SortProperty {
        crate::types::SortProperty {
            field: self.field,
            direction: self.direction,
        }
    }
}
