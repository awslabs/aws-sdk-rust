// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Associates a complex object with a display value. Use <code>ValueMapping</code> to store how to represent complex objects when they are displayed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValueMapping {
    /// <p>The value to display for the complex object.</p>
    #[doc(hidden)]
    pub display_value: std::option::Option<crate::types::FormInputValueProperty>,
    /// <p>The complex object.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::FormInputValueProperty>,
}
impl ValueMapping {
    /// <p>The value to display for the complex object.</p>
    pub fn display_value(&self) -> std::option::Option<&crate::types::FormInputValueProperty> {
        self.display_value.as_ref()
    }
    /// <p>The complex object.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::FormInputValueProperty> {
        self.value.as_ref()
    }
}
impl ValueMapping {
    /// Creates a new builder-style object to manufacture [`ValueMapping`](crate::types::ValueMapping).
    pub fn builder() -> crate::types::builders::ValueMappingBuilder {
        crate::types::builders::ValueMappingBuilder::default()
    }
}

/// A builder for [`ValueMapping`](crate::types::ValueMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ValueMappingBuilder {
    pub(crate) display_value: std::option::Option<crate::types::FormInputValueProperty>,
    pub(crate) value: std::option::Option<crate::types::FormInputValueProperty>,
}
impl ValueMappingBuilder {
    /// <p>The value to display for the complex object.</p>
    pub fn display_value(mut self, input: crate::types::FormInputValueProperty) -> Self {
        self.display_value = Some(input);
        self
    }
    /// <p>The value to display for the complex object.</p>
    pub fn set_display_value(
        mut self,
        input: std::option::Option<crate::types::FormInputValueProperty>,
    ) -> Self {
        self.display_value = input;
        self
    }
    /// <p>The complex object.</p>
    pub fn value(mut self, input: crate::types::FormInputValueProperty) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The complex object.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::FormInputValueProperty>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ValueMapping`](crate::types::ValueMapping).
    pub fn build(self) -> crate::types::ValueMapping {
        crate::types::ValueMapping {
            display_value: self.display_value,
            value: self.value,
        }
    }
}
