// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a request to exchange an access code for a token.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ExchangeCodeForTokenRequestBody {
    /// <p>The access code to send in the request.</p>
    pub code: ::std::string::String,
    /// <p>The location of the application that will receive the access code.</p>
    pub redirect_uri: ::std::string::String,
    /// <p>The ID of the client to request the token from.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
}
impl ExchangeCodeForTokenRequestBody {
    /// <p>The access code to send in the request.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>The location of the application that will receive the access code.</p>
    pub fn redirect_uri(&self) -> &str {
        use std::ops::Deref;
        self.redirect_uri.deref()
    }
    /// <p>The ID of the client to request the token from.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
}
impl ::std::fmt::Debug for ExchangeCodeForTokenRequestBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExchangeCodeForTokenRequestBody");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ExchangeCodeForTokenRequestBody {
    /// Creates a new builder-style object to manufacture [`ExchangeCodeForTokenRequestBody`](crate::types::ExchangeCodeForTokenRequestBody).
    pub fn builder() -> crate::types::builders::ExchangeCodeForTokenRequestBodyBuilder {
        crate::types::builders::ExchangeCodeForTokenRequestBodyBuilder::default()
    }
}

/// A builder for [`ExchangeCodeForTokenRequestBody`](crate::types::ExchangeCodeForTokenRequestBody).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ExchangeCodeForTokenRequestBodyBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_uri: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
}
impl ExchangeCodeForTokenRequestBodyBuilder {
    /// <p>The access code to send in the request.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access code to send in the request.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The access code to send in the request.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>The location of the application that will receive the access code.</p>
    /// This field is required.
    pub fn redirect_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location of the application that will receive the access code.</p>
    pub fn set_redirect_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// <p>The location of the application that will receive the access code.</p>
    pub fn get_redirect_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_uri
    }
    /// <p>The ID of the client to request the token from.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the client to request the token from.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The ID of the client to request the token from.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// Consumes the builder and constructs a [`ExchangeCodeForTokenRequestBody`](crate::types::ExchangeCodeForTokenRequestBody).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::ExchangeCodeForTokenRequestBodyBuilder::code)
    /// - [`redirect_uri`](crate::types::builders::ExchangeCodeForTokenRequestBodyBuilder::redirect_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::ExchangeCodeForTokenRequestBody, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExchangeCodeForTokenRequestBody {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building ExchangeCodeForTokenRequestBody",
                )
            })?,
            redirect_uri: self.redirect_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "redirect_uri",
                    "redirect_uri was not specified but it is required when building ExchangeCodeForTokenRequestBody",
                )
            })?,
            client_id: self.client_id,
        })
    }
}
impl ::std::fmt::Debug for ExchangeCodeForTokenRequestBodyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExchangeCodeForTokenRequestBodyBuilder");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
