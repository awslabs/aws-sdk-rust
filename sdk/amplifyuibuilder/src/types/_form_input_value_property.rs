// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration for an input field on a form. Use <code>FormInputValueProperty</code> to specify the values to render or bind by default.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FormInputValueProperty {
    /// <p>The value to assign to the input field.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The information to bind fields to data at runtime.</p>
    pub binding_properties: ::std::option::Option<crate::types::FormInputValuePropertyBindingProperties>,
    /// <p>A list of form properties to concatenate to create the value to assign to this field property.</p>
    pub concat: ::std::option::Option<::std::vec::Vec<crate::types::FormInputValueProperty>>,
}
impl FormInputValueProperty {
    /// <p>The value to assign to the input field.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn binding_properties(&self) -> ::std::option::Option<&crate::types::FormInputValuePropertyBindingProperties> {
        self.binding_properties.as_ref()
    }
    /// <p>A list of form properties to concatenate to create the value to assign to this field property.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.concat.is_none()`.
    pub fn concat(&self) -> &[crate::types::FormInputValueProperty] {
        self.concat.as_deref().unwrap_or_default()
    }
}
impl FormInputValueProperty {
    /// Creates a new builder-style object to manufacture [`FormInputValueProperty`](crate::types::FormInputValueProperty).
    pub fn builder() -> crate::types::builders::FormInputValuePropertyBuilder {
        crate::types::builders::FormInputValuePropertyBuilder::default()
    }
}

/// A builder for [`FormInputValueProperty`](crate::types::FormInputValueProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FormInputValuePropertyBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) binding_properties: ::std::option::Option<crate::types::FormInputValuePropertyBindingProperties>,
    pub(crate) concat: ::std::option::Option<::std::vec::Vec<crate::types::FormInputValueProperty>>,
}
impl FormInputValuePropertyBuilder {
    /// <p>The value to assign to the input field.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value to assign to the input field.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value to assign to the input field.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn binding_properties(mut self, input: crate::types::FormInputValuePropertyBindingProperties) -> Self {
        self.binding_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn set_binding_properties(mut self, input: ::std::option::Option<crate::types::FormInputValuePropertyBindingProperties>) -> Self {
        self.binding_properties = input;
        self
    }
    /// <p>The information to bind fields to data at runtime.</p>
    pub fn get_binding_properties(&self) -> &::std::option::Option<crate::types::FormInputValuePropertyBindingProperties> {
        &self.binding_properties
    }
    /// Appends an item to `concat`.
    ///
    /// To override the contents of this collection use [`set_concat`](Self::set_concat).
    ///
    /// <p>A list of form properties to concatenate to create the value to assign to this field property.</p>
    pub fn concat(mut self, input: crate::types::FormInputValueProperty) -> Self {
        let mut v = self.concat.unwrap_or_default();
        v.push(input);
        self.concat = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of form properties to concatenate to create the value to assign to this field property.</p>
    pub fn set_concat(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormInputValueProperty>>) -> Self {
        self.concat = input;
        self
    }
    /// <p>A list of form properties to concatenate to create the value to assign to this field property.</p>
    pub fn get_concat(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormInputValueProperty>> {
        &self.concat
    }
    /// Consumes the builder and constructs a [`FormInputValueProperty`](crate::types::FormInputValueProperty).
    pub fn build(self) -> crate::types::FormInputValueProperty {
        crate::types::FormInputValueProperty {
            value: self.value,
            binding_properties: self.binding_properties,
            concat: self.concat,
        }
    }
}
