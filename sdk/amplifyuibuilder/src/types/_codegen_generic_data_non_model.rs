// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a non-model in a generic data schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodegenGenericDataNonModel {
    /// <p>The fields in a generic data schema non model.</p>
    pub fields: ::std::collections::HashMap<::std::string::String, crate::types::CodegenGenericDataField>,
}
impl CodegenGenericDataNonModel {
    /// <p>The fields in a generic data schema non model.</p>
    pub fn fields(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::CodegenGenericDataField> {
        &self.fields
    }
}
impl CodegenGenericDataNonModel {
    /// Creates a new builder-style object to manufacture [`CodegenGenericDataNonModel`](crate::types::CodegenGenericDataNonModel).
    pub fn builder() -> crate::types::builders::CodegenGenericDataNonModelBuilder {
        crate::types::builders::CodegenGenericDataNonModelBuilder::default()
    }
}

/// A builder for [`CodegenGenericDataNonModel`](crate::types::CodegenGenericDataNonModel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodegenGenericDataNonModelBuilder {
    pub(crate) fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CodegenGenericDataField>>,
}
impl CodegenGenericDataNonModelBuilder {
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The fields in a generic data schema non model.</p>
    pub fn fields(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CodegenGenericDataField) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The fields in a generic data schema non model.</p>
    pub fn set_fields(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CodegenGenericDataField>>,
    ) -> Self {
        self.fields = input;
        self
    }
    /// <p>The fields in a generic data schema non model.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CodegenGenericDataField>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`CodegenGenericDataNonModel`](crate::types::CodegenGenericDataNonModel).
    /// This method will fail if any of the following fields are not set:
    /// - [`fields`](crate::types::builders::CodegenGenericDataNonModelBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::CodegenGenericDataNonModel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodegenGenericDataNonModel {
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building CodegenGenericDataNonModel",
                )
            })?,
        })
    }
}
