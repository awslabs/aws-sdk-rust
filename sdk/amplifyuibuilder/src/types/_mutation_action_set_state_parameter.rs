// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the state configuration when an action modifies a property of another element within the same component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MutationActionSetStateParameter {
    /// <p>The name of the component that is being modified.</p>
    pub component_name: ::std::string::String,
    /// <p>The name of the component property to apply the state configuration to.</p>
    pub property: ::std::string::String,
    /// <p>The state configuration to assign to the property.</p>
    pub set: ::std::option::Option<crate::types::ComponentProperty>,
}
impl MutationActionSetStateParameter {
    /// <p>The name of the component that is being modified.</p>
    pub fn component_name(&self) -> &str {
        use std::ops::Deref;
        self.component_name.deref()
    }
    /// <p>The name of the component property to apply the state configuration to.</p>
    pub fn property(&self) -> &str {
        use std::ops::Deref;
        self.property.deref()
    }
    /// <p>The state configuration to assign to the property.</p>
    pub fn set(&self) -> ::std::option::Option<&crate::types::ComponentProperty> {
        self.set.as_ref()
    }
}
impl MutationActionSetStateParameter {
    /// Creates a new builder-style object to manufacture [`MutationActionSetStateParameter`](crate::types::MutationActionSetStateParameter).
    pub fn builder() -> crate::types::builders::MutationActionSetStateParameterBuilder {
        crate::types::builders::MutationActionSetStateParameterBuilder::default()
    }
}

/// A builder for [`MutationActionSetStateParameter`](crate::types::MutationActionSetStateParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MutationActionSetStateParameterBuilder {
    pub(crate) component_name: ::std::option::Option<::std::string::String>,
    pub(crate) property: ::std::option::Option<::std::string::String>,
    pub(crate) set: ::std::option::Option<crate::types::ComponentProperty>,
}
impl MutationActionSetStateParameterBuilder {
    /// <p>The name of the component that is being modified.</p>
    /// This field is required.
    pub fn component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component that is being modified.</p>
    pub fn set_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component that is being modified.</p>
    pub fn get_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_name
    }
    /// <p>The name of the component property to apply the state configuration to.</p>
    /// This field is required.
    pub fn property(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component property to apply the state configuration to.</p>
    pub fn set_property(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property = input;
        self
    }
    /// <p>The name of the component property to apply the state configuration to.</p>
    pub fn get_property(&self) -> &::std::option::Option<::std::string::String> {
        &self.property
    }
    /// <p>The state configuration to assign to the property.</p>
    /// This field is required.
    pub fn set(mut self, input: crate::types::ComponentProperty) -> Self {
        self.set = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state configuration to assign to the property.</p>
    pub fn set_set(mut self, input: ::std::option::Option<crate::types::ComponentProperty>) -> Self {
        self.set = input;
        self
    }
    /// <p>The state configuration to assign to the property.</p>
    pub fn get_set(&self) -> &::std::option::Option<crate::types::ComponentProperty> {
        &self.set
    }
    /// Consumes the builder and constructs a [`MutationActionSetStateParameter`](crate::types::MutationActionSetStateParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_name`](crate::types::builders::MutationActionSetStateParameterBuilder::component_name)
    /// - [`property`](crate::types::builders::MutationActionSetStateParameterBuilder::property)
    pub fn build(self) -> ::std::result::Result<crate::types::MutationActionSetStateParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MutationActionSetStateParameter {
            component_name: self.component_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_name",
                    "component_name was not specified but it is required when building MutationActionSetStateParameter",
                )
            })?,
            property: self.property.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property",
                    "property was not specified but it is required when building MutationActionSetStateParameter",
                )
            })?,
            set: self.set,
        })
    }
}
