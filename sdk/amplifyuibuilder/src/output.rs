// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportThemesOutput {
    /// <p>Represents the configuration of the exported themes.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::Theme>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportThemesOutput {
    /// <p>Represents the configuration of the exported themes.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::Theme]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportThemesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportThemesOutput`](crate::output::ExportThemesOutput).
pub mod export_themes_output {

    /// A builder for [`ExportThemesOutput`](crate::output::ExportThemesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::Theme>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>Represents the configuration of the exported themes.</p>
        pub fn entities(mut self, input: crate::model::Theme) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>Represents the configuration of the exported themes.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Theme>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportThemesOutput`](crate::output::ExportThemesOutput).
        pub fn build(self) -> crate::output::ExportThemesOutput {
            crate::output::ExportThemesOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportThemesOutput {
    /// Creates a new builder-style object to manufacture [`ExportThemesOutput`](crate::output::ExportThemesOutput).
    pub fn builder() -> crate::output::export_themes_output::Builder {
        crate::output::export_themes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListThemesOutput {
    /// <p>The list of themes for the Amplify app.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::ThemeSummary>>,
    /// <p>The pagination token that's returned if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListThemesOutput {
    /// <p>The list of themes for the Amplify app.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::ThemeSummary]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's returned if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListThemesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListThemesOutput`](crate::output::ListThemesOutput).
pub mod list_themes_output {

    /// A builder for [`ListThemesOutput`](crate::output::ListThemesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::ThemeSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>The list of themes for the Amplify app.</p>
        pub fn entities(mut self, input: crate::model::ThemeSummary) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>The list of themes for the Amplify app.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ThemeSummary>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's returned if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's returned if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListThemesOutput`](crate::output::ListThemesOutput).
        pub fn build(self) -> crate::output::ListThemesOutput {
            crate::output::ListThemesOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListThemesOutput {
    /// Creates a new builder-style object to manufacture [`ListThemesOutput`](crate::output::ListThemesOutput).
    pub fn builder() -> crate::output::list_themes_output::Builder {
        crate::output::list_themes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateThemeOutput {
    /// <p>Describes the configuration of the new theme.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Theme>,
    _request_id: Option<String>,
}
impl CreateThemeOutput {
    /// <p>Describes the configuration of the new theme.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Theme> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateThemeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateThemeOutput`](crate::output::CreateThemeOutput).
pub mod create_theme_output {

    /// A builder for [`CreateThemeOutput`](crate::output::CreateThemeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Theme>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the new theme.</p>
        pub fn entity(mut self, input: crate::model::Theme) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the new theme.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Theme>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateThemeOutput`](crate::output::CreateThemeOutput).
        pub fn build(self) -> crate::output::CreateThemeOutput {
            crate::output::CreateThemeOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateThemeOutput {
    /// Creates a new builder-style object to manufacture [`CreateThemeOutput`](crate::output::CreateThemeOutput).
    pub fn builder() -> crate::output::create_theme_output::Builder {
        crate::output::create_theme_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteThemeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteThemeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteThemeOutput`](crate::output::DeleteThemeOutput).
pub mod delete_theme_output {

    /// A builder for [`DeleteThemeOutput`](crate::output::DeleteThemeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteThemeOutput`](crate::output::DeleteThemeOutput).
        pub fn build(self) -> crate::output::DeleteThemeOutput {
            crate::output::DeleteThemeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteThemeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteThemeOutput`](crate::output::DeleteThemeOutput).
    pub fn builder() -> crate::output::delete_theme_output::Builder {
        crate::output::delete_theme_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateThemeOutput {
    /// <p>Describes the configuration of the updated theme.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Theme>,
    _request_id: Option<String>,
}
impl UpdateThemeOutput {
    /// <p>Describes the configuration of the updated theme.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Theme> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateThemeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateThemeOutput`](crate::output::UpdateThemeOutput).
pub mod update_theme_output {

    /// A builder for [`UpdateThemeOutput`](crate::output::UpdateThemeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Theme>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the updated theme.</p>
        pub fn entity(mut self, input: crate::model::Theme) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the updated theme.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Theme>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateThemeOutput`](crate::output::UpdateThemeOutput).
        pub fn build(self) -> crate::output::UpdateThemeOutput {
            crate::output::UpdateThemeOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateThemeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateThemeOutput`](crate::output::UpdateThemeOutput).
    pub fn builder() -> crate::output::update_theme_output::Builder {
        crate::output::update_theme_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetThemeOutput {
    /// <p>Represents the configuration settings for the theme.</p>
    #[doc(hidden)]
    pub theme: std::option::Option<crate::model::Theme>,
    _request_id: Option<String>,
}
impl GetThemeOutput {
    /// <p>Represents the configuration settings for the theme.</p>
    pub fn theme(&self) -> std::option::Option<&crate::model::Theme> {
        self.theme.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetThemeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetThemeOutput`](crate::output::GetThemeOutput).
pub mod get_theme_output {

    /// A builder for [`GetThemeOutput`](crate::output::GetThemeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) theme: std::option::Option<crate::model::Theme>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Represents the configuration settings for the theme.</p>
        pub fn theme(mut self, input: crate::model::Theme) -> Self {
            self.theme = Some(input);
            self
        }
        /// <p>Represents the configuration settings for the theme.</p>
        pub fn set_theme(mut self, input: std::option::Option<crate::model::Theme>) -> Self {
            self.theme = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetThemeOutput`](crate::output::GetThemeOutput).
        pub fn build(self) -> crate::output::GetThemeOutput {
            crate::output::GetThemeOutput {
                theme: self.theme,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetThemeOutput {
    /// Creates a new builder-style object to manufacture [`GetThemeOutput`](crate::output::GetThemeOutput).
    pub fn builder() -> crate::output::get_theme_output::Builder {
        crate::output::get_theme_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportFormsOutput {
    /// <p>Represents the configuration of the exported forms.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::Form>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportFormsOutput {
    /// <p>Represents the configuration of the exported forms.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::Form]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportFormsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportFormsOutput`](crate::output::ExportFormsOutput).
pub mod export_forms_output {

    /// A builder for [`ExportFormsOutput`](crate::output::ExportFormsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::Form>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>Represents the configuration of the exported forms.</p>
        pub fn entities(mut self, input: crate::model::Form) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>Represents the configuration of the exported forms.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Form>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportFormsOutput`](crate::output::ExportFormsOutput).
        pub fn build(self) -> crate::output::ExportFormsOutput {
            crate::output::ExportFormsOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportFormsOutput {
    /// Creates a new builder-style object to manufacture [`ExportFormsOutput`](crate::output::ExportFormsOutput).
    pub fn builder() -> crate::output::export_forms_output::Builder {
        crate::output::export_forms_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFormsOutput {
    /// <p>The list of forms for the Amplify app.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::FormSummary>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFormsOutput {
    /// <p>The list of forms for the Amplify app.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::FormSummary]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFormsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFormsOutput`](crate::output::ListFormsOutput).
pub mod list_forms_output {

    /// A builder for [`ListFormsOutput`](crate::output::ListFormsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::FormSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>The list of forms for the Amplify app.</p>
        pub fn entities(mut self, input: crate::model::FormSummary) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>The list of forms for the Amplify app.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FormSummary>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFormsOutput`](crate::output::ListFormsOutput).
        pub fn build(self) -> crate::output::ListFormsOutput {
            crate::output::ListFormsOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFormsOutput {
    /// Creates a new builder-style object to manufacture [`ListFormsOutput`](crate::output::ListFormsOutput).
    pub fn builder() -> crate::output::list_forms_output::Builder {
        crate::output::list_forms_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFormOutput {
    /// <p>Describes the configuration of the new form.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Form>,
    _request_id: Option<String>,
}
impl CreateFormOutput {
    /// <p>Describes the configuration of the new form.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Form> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateFormOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFormOutput`](crate::output::CreateFormOutput).
pub mod create_form_output {

    /// A builder for [`CreateFormOutput`](crate::output::CreateFormOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Form>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the new form.</p>
        pub fn entity(mut self, input: crate::model::Form) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the new form.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Form>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFormOutput`](crate::output::CreateFormOutput).
        pub fn build(self) -> crate::output::CreateFormOutput {
            crate::output::CreateFormOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFormOutput {
    /// Creates a new builder-style object to manufacture [`CreateFormOutput`](crate::output::CreateFormOutput).
    pub fn builder() -> crate::output::create_form_output::Builder {
        crate::output::create_form_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFormOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteFormOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFormOutput`](crate::output::DeleteFormOutput).
pub mod delete_form_output {

    /// A builder for [`DeleteFormOutput`](crate::output::DeleteFormOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFormOutput`](crate::output::DeleteFormOutput).
        pub fn build(self) -> crate::output::DeleteFormOutput {
            crate::output::DeleteFormOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFormOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFormOutput`](crate::output::DeleteFormOutput).
    pub fn builder() -> crate::output::delete_form_output::Builder {
        crate::output::delete_form_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFormOutput {
    /// <p>Describes the configuration of the updated form.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Form>,
    _request_id: Option<String>,
}
impl UpdateFormOutput {
    /// <p>Describes the configuration of the updated form.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Form> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateFormOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateFormOutput`](crate::output::UpdateFormOutput).
pub mod update_form_output {

    /// A builder for [`UpdateFormOutput`](crate::output::UpdateFormOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Form>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the updated form.</p>
        pub fn entity(mut self, input: crate::model::Form) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the updated form.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Form>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateFormOutput`](crate::output::UpdateFormOutput).
        pub fn build(self) -> crate::output::UpdateFormOutput {
            crate::output::UpdateFormOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateFormOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFormOutput`](crate::output::UpdateFormOutput).
    pub fn builder() -> crate::output::update_form_output::Builder {
        crate::output::update_form_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFormOutput {
    /// <p>Represents the configuration settings for the form.</p>
    #[doc(hidden)]
    pub form: std::option::Option<crate::model::Form>,
    _request_id: Option<String>,
}
impl GetFormOutput {
    /// <p>Represents the configuration settings for the form.</p>
    pub fn form(&self) -> std::option::Option<&crate::model::Form> {
        self.form.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFormOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFormOutput`](crate::output::GetFormOutput).
pub mod get_form_output {

    /// A builder for [`GetFormOutput`](crate::output::GetFormOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) form: std::option::Option<crate::model::Form>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Represents the configuration settings for the form.</p>
        pub fn form(mut self, input: crate::model::Form) -> Self {
            self.form = Some(input);
            self
        }
        /// <p>Represents the configuration settings for the form.</p>
        pub fn set_form(mut self, input: std::option::Option<crate::model::Form>) -> Self {
            self.form = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFormOutput`](crate::output::GetFormOutput).
        pub fn build(self) -> crate::output::GetFormOutput {
            crate::output::GetFormOutput {
                form: self.form,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFormOutput {
    /// Creates a new builder-style object to manufacture [`GetFormOutput`](crate::output::GetFormOutput).
    pub fn builder() -> crate::output::get_form_output::Builder {
        crate::output::get_form_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportComponentsOutput {
    /// <p>Represents the configuration of the exported components.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::Component>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportComponentsOutput {
    /// <p>Represents the configuration of the exported components.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::Component]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportComponentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportComponentsOutput`](crate::output::ExportComponentsOutput).
pub mod export_components_output {

    /// A builder for [`ExportComponentsOutput`](crate::output::ExportComponentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::Component>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>Represents the configuration of the exported components.</p>
        pub fn entities(mut self, input: crate::model::Component) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>Represents the configuration of the exported components.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Component>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportComponentsOutput`](crate::output::ExportComponentsOutput).
        pub fn build(self) -> crate::output::ExportComponentsOutput {
            crate::output::ExportComponentsOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportComponentsOutput {
    /// Creates a new builder-style object to manufacture [`ExportComponentsOutput`](crate::output::ExportComponentsOutput).
    pub fn builder() -> crate::output::export_components_output::Builder {
        crate::output::export_components_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListComponentsOutput {
    /// <p>The list of components for the Amplify app.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::model::ComponentSummary>>,
    /// <p>The pagination token that's included if more results are available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListComponentsOutput {
    /// <p>The list of components for the Amplify app.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::model::ComponentSummary]> {
        self.entities.as_deref()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListComponentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListComponentsOutput`](crate::output::ListComponentsOutput).
pub mod list_components_output {

    /// A builder for [`ListComponentsOutput`](crate::output::ListComponentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entities: std::option::Option<std::vec::Vec<crate::model::ComponentSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entities`.
        ///
        /// To override the contents of this collection use [`set_entities`](Self::set_entities).
        ///
        /// <p>The list of components for the Amplify app.</p>
        pub fn entities(mut self, input: crate::model::ComponentSummary) -> Self {
            let mut v = self.entities.unwrap_or_default();
            v.push(input);
            self.entities = Some(v);
            self
        }
        /// <p>The list of components for the Amplify app.</p>
        pub fn set_entities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ComponentSummary>>,
        ) -> Self {
            self.entities = input;
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's included if more results are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListComponentsOutput`](crate::output::ListComponentsOutput).
        pub fn build(self) -> crate::output::ListComponentsOutput {
            crate::output::ListComponentsOutput {
                entities: self.entities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListComponentsOutput {
    /// Creates a new builder-style object to manufacture [`ListComponentsOutput`](crate::output::ListComponentsOutput).
    pub fn builder() -> crate::output::list_components_output::Builder {
        crate::output::list_components_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateComponentOutput {
    /// <p>Describes the configuration of the new component.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Component>,
    _request_id: Option<String>,
}
impl CreateComponentOutput {
    /// <p>Describes the configuration of the new component.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Component> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateComponentOutput`](crate::output::CreateComponentOutput).
pub mod create_component_output {

    /// A builder for [`CreateComponentOutput`](crate::output::CreateComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Component>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the new component.</p>
        pub fn entity(mut self, input: crate::model::Component) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the new component.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Component>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateComponentOutput`](crate::output::CreateComponentOutput).
        pub fn build(self) -> crate::output::CreateComponentOutput {
            crate::output::CreateComponentOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateComponentOutput {
    /// Creates a new builder-style object to manufacture [`CreateComponentOutput`](crate::output::CreateComponentOutput).
    pub fn builder() -> crate::output::create_component_output::Builder {
        crate::output::create_component_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteComponentOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteComponentOutput`](crate::output::DeleteComponentOutput).
pub mod delete_component_output {

    /// A builder for [`DeleteComponentOutput`](crate::output::DeleteComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteComponentOutput`](crate::output::DeleteComponentOutput).
        pub fn build(self) -> crate::output::DeleteComponentOutput {
            crate::output::DeleteComponentOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteComponentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteComponentOutput`](crate::output::DeleteComponentOutput).
    pub fn builder() -> crate::output::delete_component_output::Builder {
        crate::output::delete_component_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateComponentOutput {
    /// <p>Describes the configuration of the updated component.</p>
    #[doc(hidden)]
    pub entity: std::option::Option<crate::model::Component>,
    _request_id: Option<String>,
}
impl UpdateComponentOutput {
    /// <p>Describes the configuration of the updated component.</p>
    pub fn entity(&self) -> std::option::Option<&crate::model::Component> {
        self.entity.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateComponentOutput`](crate::output::UpdateComponentOutput).
pub mod update_component_output {

    /// A builder for [`UpdateComponentOutput`](crate::output::UpdateComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity: std::option::Option<crate::model::Component>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the configuration of the updated component.</p>
        pub fn entity(mut self, input: crate::model::Component) -> Self {
            self.entity = Some(input);
            self
        }
        /// <p>Describes the configuration of the updated component.</p>
        pub fn set_entity(mut self, input: std::option::Option<crate::model::Component>) -> Self {
            self.entity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateComponentOutput`](crate::output::UpdateComponentOutput).
        pub fn build(self) -> crate::output::UpdateComponentOutput {
            crate::output::UpdateComponentOutput {
                entity: self.entity,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateComponentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateComponentOutput`](crate::output::UpdateComponentOutput).
    pub fn builder() -> crate::output::update_component_output::Builder {
        crate::output::update_component_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetComponentOutput {
    /// <p>Represents the configuration settings for the component.</p>
    #[doc(hidden)]
    pub component: std::option::Option<crate::model::Component>,
    _request_id: Option<String>,
}
impl GetComponentOutput {
    /// <p>Represents the configuration settings for the component.</p>
    pub fn component(&self) -> std::option::Option<&crate::model::Component> {
        self.component.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetComponentOutput`](crate::output::GetComponentOutput).
pub mod get_component_output {

    /// A builder for [`GetComponentOutput`](crate::output::GetComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) component: std::option::Option<crate::model::Component>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Represents the configuration settings for the component.</p>
        pub fn component(mut self, input: crate::model::Component) -> Self {
            self.component = Some(input);
            self
        }
        /// <p>Represents the configuration settings for the component.</p>
        pub fn set_component(
            mut self,
            input: std::option::Option<crate::model::Component>,
        ) -> Self {
            self.component = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetComponentOutput`](crate::output::GetComponentOutput).
        pub fn build(self) -> crate::output::GetComponentOutput {
            crate::output::GetComponentOutput {
                component: self.component,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetComponentOutput {
    /// Creates a new builder-style object to manufacture [`GetComponentOutput`](crate::output::GetComponentOutput).
    pub fn builder() -> crate::output::get_component_output::Builder {
        crate::output::get_component_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RefreshTokenOutput {
    /// <p>The access token.</p>
    #[doc(hidden)]
    pub access_token: std::option::Option<std::string::String>,
    /// <p>The date and time when the new access token expires.</p>
    #[doc(hidden)]
    pub expires_in: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl RefreshTokenOutput {
    /// <p>The access token.</p>
    pub fn access_token(&self) -> std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The date and time when the new access token expires.</p>
    pub fn expires_in(&self) -> std::option::Option<i32> {
        self.expires_in
    }
}
impl std::fmt::Debug for RefreshTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RefreshTokenOutput");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expires_in", &self.expires_in);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for RefreshTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RefreshTokenOutput`](crate::output::RefreshTokenOutput).
pub mod refresh_token_output {

    /// A builder for [`RefreshTokenOutput`](crate::output::RefreshTokenOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) access_token: std::option::Option<std::string::String>,
        pub(crate) expires_in: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.access_token = Some(input.into());
            self
        }
        /// <p>The access token.</p>
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.access_token = input;
            self
        }
        /// <p>The date and time when the new access token expires.</p>
        pub fn expires_in(mut self, input: i32) -> Self {
            self.expires_in = Some(input);
            self
        }
        /// <p>The date and time when the new access token expires.</p>
        pub fn set_expires_in(mut self, input: std::option::Option<i32>) -> Self {
            self.expires_in = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RefreshTokenOutput`](crate::output::RefreshTokenOutput).
        pub fn build(self) -> crate::output::RefreshTokenOutput {
            crate::output::RefreshTokenOutput {
                access_token: self.access_token,
                expires_in: self.expires_in,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("access_token", &"*** Sensitive Data Redacted ***");
            formatter.field("expires_in", &self.expires_in);
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}
impl RefreshTokenOutput {
    /// Creates a new builder-style object to manufacture [`RefreshTokenOutput`](crate::output::RefreshTokenOutput).
    pub fn builder() -> crate::output::refresh_token_output::Builder {
        crate::output::refresh_token_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutMetadataFlagOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutMetadataFlagOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutMetadataFlagOutput`](crate::output::PutMetadataFlagOutput).
pub mod put_metadata_flag_output {

    /// A builder for [`PutMetadataFlagOutput`](crate::output::PutMetadataFlagOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutMetadataFlagOutput`](crate::output::PutMetadataFlagOutput).
        pub fn build(self) -> crate::output::PutMetadataFlagOutput {
            crate::output::PutMetadataFlagOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutMetadataFlagOutput {
    /// Creates a new builder-style object to manufacture [`PutMetadataFlagOutput`](crate::output::PutMetadataFlagOutput).
    pub fn builder() -> crate::output::put_metadata_flag_output::Builder {
        crate::output::put_metadata_flag_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMetadataOutput {
    /// <p>Represents the configuration settings for the features metadata.</p>
    #[doc(hidden)]
    pub features:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetMetadataOutput {
    /// <p>Represents the configuration settings for the features metadata.</p>
    pub fn features(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.features.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMetadataOutput`](crate::output::GetMetadataOutput).
pub mod get_metadata_output {

    /// A builder for [`GetMetadataOutput`](crate::output::GetMetadataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) features: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `features`.
        ///
        /// To override the contents of this collection use [`set_features`](Self::set_features).
        ///
        /// <p>Represents the configuration settings for the features metadata.</p>
        pub fn features(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.features.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.features = Some(hash_map);
            self
        }
        /// <p>Represents the configuration settings for the features metadata.</p>
        pub fn set_features(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.features = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMetadataOutput`](crate::output::GetMetadataOutput).
        pub fn build(self) -> crate::output::GetMetadataOutput {
            crate::output::GetMetadataOutput {
                features: self.features,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetMetadataOutput`](crate::output::GetMetadataOutput).
    pub fn builder() -> crate::output::get_metadata_output::Builder {
        crate::output::get_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExchangeCodeForTokenOutput {
    /// <p>The access token.</p>
    #[doc(hidden)]
    pub access_token: std::option::Option<std::string::String>,
    /// <p>The date and time when the new access token expires.</p>
    #[doc(hidden)]
    pub expires_in: std::option::Option<i32>,
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    #[doc(hidden)]
    pub refresh_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExchangeCodeForTokenOutput {
    /// <p>The access token.</p>
    pub fn access_token(&self) -> std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The date and time when the new access token expires.</p>
    pub fn expires_in(&self) -> std::option::Option<i32> {
        self.expires_in
    }
    /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
    pub fn refresh_token(&self) -> std::option::Option<&str> {
        self.refresh_token.as_deref()
    }
}
impl std::fmt::Debug for ExchangeCodeForTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExchangeCodeForTokenOutput");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("expires_in", &self.expires_in);
        formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ExchangeCodeForTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExchangeCodeForTokenOutput`](crate::output::ExchangeCodeForTokenOutput).
pub mod exchange_code_for_token_output {

    /// A builder for [`ExchangeCodeForTokenOutput`](crate::output::ExchangeCodeForTokenOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) access_token: std::option::Option<std::string::String>,
        pub(crate) expires_in: std::option::Option<i32>,
        pub(crate) refresh_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.access_token = Some(input.into());
            self
        }
        /// <p>The access token.</p>
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.access_token = input;
            self
        }
        /// <p>The date and time when the new access token expires.</p>
        pub fn expires_in(mut self, input: i32) -> Self {
            self.expires_in = Some(input);
            self
        }
        /// <p>The date and time when the new access token expires.</p>
        pub fn set_expires_in(mut self, input: std::option::Option<i32>) -> Self {
            self.expires_in = input;
            self
        }
        /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
        pub fn refresh_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.refresh_token = Some(input.into());
            self
        }
        /// <p>The token to use to refresh a previously issued access token that might have expired.</p>
        pub fn set_refresh_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.refresh_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExchangeCodeForTokenOutput`](crate::output::ExchangeCodeForTokenOutput).
        pub fn build(self) -> crate::output::ExchangeCodeForTokenOutput {
            crate::output::ExchangeCodeForTokenOutput {
                access_token: self.access_token,
                expires_in: self.expires_in,
                refresh_token: self.refresh_token,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("access_token", &"*** Sensitive Data Redacted ***");
            formatter.field("expires_in", &self.expires_in);
            formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}
impl ExchangeCodeForTokenOutput {
    /// Creates a new builder-style object to manufacture [`ExchangeCodeForTokenOutput`](crate::output::ExchangeCodeForTokenOutput).
    pub fn builder() -> crate::output::exchange_code_for_token_output::Builder {
        crate::output::exchange_code_for_token_output::Builder::default()
    }
}
