// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_export_components_output_next_token(
    input: &crate::operation::export_components::ExportComponentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_export_forms_output_next_token(
    input: &crate::operation::export_forms::ExportFormsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_export_themes_output_next_token(
    input: &crate::operation::export_themes::ExportThemesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_components_output_next_token(
    input: &crate::operation::list_components::ListComponentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_forms_output_next_token(
    input: &crate::operation::list_forms::ListFormsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_themes_output_next_token(
    input: &crate::operation::list_themes::ListThemesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_export_components_output_entities(
    input: crate::operation::export_components::ExportComponentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Component>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_export_forms_output_entities(
    input: crate::operation::export_forms::ExportFormsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Form>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_export_themes_output_entities(
    input: crate::operation::export_themes::ExportThemesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Theme>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_components_output_entities(
    input: crate::operation::list_components::ListComponentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComponentSummary>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_forms_output_entities(
    input: crate::operation::list_forms::ListFormsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FormSummary>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_themes_output_entities(
    input: crate::operation::list_themes::ListThemesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThemeSummary>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
