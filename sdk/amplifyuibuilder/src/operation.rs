// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateComponent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_component`](crate::client::Client::create_component).
///
/// `ParseStrictResponse` impl for `CreateComponent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateComponent {
    _private: (),
}
impl CreateComponent {
    /// Creates a new builder-style object to manufacture [`CreateComponentInput`](crate::input::CreateComponentInput).
    pub fn builder() -> crate::input::create_component_input::Builder {
        crate::input::create_component_input::Builder::default()
    }
    /// Creates a new `CreateComponent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateComponent {
    type Output = std::result::Result<
        crate::output::CreateComponentOutput,
        crate::error::CreateComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_component_error(response)
        } else {
            crate::operation_deser::parse_create_component_response(response)
        }
    }
}

/// Operation shape for `CreateForm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_form`](crate::client::Client::create_form).
///
/// `ParseStrictResponse` impl for `CreateForm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateForm {
    _private: (),
}
impl CreateForm {
    /// Creates a new builder-style object to manufacture [`CreateFormInput`](crate::input::CreateFormInput).
    pub fn builder() -> crate::input::create_form_input::Builder {
        crate::input::create_form_input::Builder::default()
    }
    /// Creates a new `CreateForm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateForm {
    type Output =
        std::result::Result<crate::output::CreateFormOutput, crate::error::CreateFormError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_form_error(response)
        } else {
            crate::operation_deser::parse_create_form_response(response)
        }
    }
}

/// Operation shape for `CreateTheme`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_theme`](crate::client::Client::create_theme).
///
/// `ParseStrictResponse` impl for `CreateTheme`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateTheme {
    _private: (),
}
impl CreateTheme {
    /// Creates a new builder-style object to manufacture [`CreateThemeInput`](crate::input::CreateThemeInput).
    pub fn builder() -> crate::input::create_theme_input::Builder {
        crate::input::create_theme_input::Builder::default()
    }
    /// Creates a new `CreateTheme` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateTheme {
    type Output =
        std::result::Result<crate::output::CreateThemeOutput, crate::error::CreateThemeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_theme_error(response)
        } else {
            crate::operation_deser::parse_create_theme_response(response)
        }
    }
}

/// Operation shape for `DeleteComponent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_component`](crate::client::Client::delete_component).
///
/// `ParseStrictResponse` impl for `DeleteComponent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteComponent {
    _private: (),
}
impl DeleteComponent {
    /// Creates a new builder-style object to manufacture [`DeleteComponentInput`](crate::input::DeleteComponentInput).
    pub fn builder() -> crate::input::delete_component_input::Builder {
        crate::input::delete_component_input::Builder::default()
    }
    /// Creates a new `DeleteComponent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteComponent {
    type Output = std::result::Result<
        crate::output::DeleteComponentOutput,
        crate::error::DeleteComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_component_error(response)
        } else {
            crate::operation_deser::parse_delete_component_response(response)
        }
    }
}

/// Operation shape for `DeleteForm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_form`](crate::client::Client::delete_form).
///
/// `ParseStrictResponse` impl for `DeleteForm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteForm {
    _private: (),
}
impl DeleteForm {
    /// Creates a new builder-style object to manufacture [`DeleteFormInput`](crate::input::DeleteFormInput).
    pub fn builder() -> crate::input::delete_form_input::Builder {
        crate::input::delete_form_input::Builder::default()
    }
    /// Creates a new `DeleteForm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteForm {
    type Output =
        std::result::Result<crate::output::DeleteFormOutput, crate::error::DeleteFormError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_form_error(response)
        } else {
            crate::operation_deser::parse_delete_form_response(response)
        }
    }
}

/// Operation shape for `DeleteTheme`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_theme`](crate::client::Client::delete_theme).
///
/// `ParseStrictResponse` impl for `DeleteTheme`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteTheme {
    _private: (),
}
impl DeleteTheme {
    /// Creates a new builder-style object to manufacture [`DeleteThemeInput`](crate::input::DeleteThemeInput).
    pub fn builder() -> crate::input::delete_theme_input::Builder {
        crate::input::delete_theme_input::Builder::default()
    }
    /// Creates a new `DeleteTheme` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteTheme {
    type Output =
        std::result::Result<crate::output::DeleteThemeOutput, crate::error::DeleteThemeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_theme_error(response)
        } else {
            crate::operation_deser::parse_delete_theme_response(response)
        }
    }
}

/// Operation shape for `ExchangeCodeForToken`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`exchange_code_for_token`](crate::client::Client::exchange_code_for_token).
///
/// `ParseStrictResponse` impl for `ExchangeCodeForToken`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExchangeCodeForToken {
    _private: (),
}
impl ExchangeCodeForToken {
    /// Creates a new builder-style object to manufacture [`ExchangeCodeForTokenInput`](crate::input::ExchangeCodeForTokenInput).
    pub fn builder() -> crate::input::exchange_code_for_token_input::Builder {
        crate::input::exchange_code_for_token_input::Builder::default()
    }
    /// Creates a new `ExchangeCodeForToken` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExchangeCodeForToken {
    type Output = std::result::Result<
        crate::output::ExchangeCodeForTokenOutput,
        crate::error::ExchangeCodeForTokenError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_exchange_code_for_token_error(response)
        } else {
            crate::operation_deser::parse_exchange_code_for_token_response(response)
        }
    }
}

/// Operation shape for `ExportComponents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_components`](crate::client::Client::export_components).
///
/// `ParseStrictResponse` impl for `ExportComponents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportComponents {
    _private: (),
}
impl ExportComponents {
    /// Creates a new builder-style object to manufacture [`ExportComponentsInput`](crate::input::ExportComponentsInput).
    pub fn builder() -> crate::input::export_components_input::Builder {
        crate::input::export_components_input::Builder::default()
    }
    /// Creates a new `ExportComponents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportComponents {
    type Output = std::result::Result<
        crate::output::ExportComponentsOutput,
        crate::error::ExportComponentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_components_error(response)
        } else {
            crate::operation_deser::parse_export_components_response(response)
        }
    }
}

/// Operation shape for `ExportForms`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_forms`](crate::client::Client::export_forms).
///
/// `ParseStrictResponse` impl for `ExportForms`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportForms {
    _private: (),
}
impl ExportForms {
    /// Creates a new builder-style object to manufacture [`ExportFormsInput`](crate::input::ExportFormsInput).
    pub fn builder() -> crate::input::export_forms_input::Builder {
        crate::input::export_forms_input::Builder::default()
    }
    /// Creates a new `ExportForms` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportForms {
    type Output =
        std::result::Result<crate::output::ExportFormsOutput, crate::error::ExportFormsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_forms_error(response)
        } else {
            crate::operation_deser::parse_export_forms_response(response)
        }
    }
}

/// Operation shape for `ExportThemes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_themes`](crate::client::Client::export_themes).
///
/// `ParseStrictResponse` impl for `ExportThemes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportThemes {
    _private: (),
}
impl ExportThemes {
    /// Creates a new builder-style object to manufacture [`ExportThemesInput`](crate::input::ExportThemesInput).
    pub fn builder() -> crate::input::export_themes_input::Builder {
        crate::input::export_themes_input::Builder::default()
    }
    /// Creates a new `ExportThemes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportThemes {
    type Output =
        std::result::Result<crate::output::ExportThemesOutput, crate::error::ExportThemesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_themes_error(response)
        } else {
            crate::operation_deser::parse_export_themes_response(response)
        }
    }
}

/// Operation shape for `GetComponent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_component`](crate::client::Client::get_component).
///
/// `ParseStrictResponse` impl for `GetComponent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetComponent {
    _private: (),
}
impl GetComponent {
    /// Creates a new builder-style object to manufacture [`GetComponentInput`](crate::input::GetComponentInput).
    pub fn builder() -> crate::input::get_component_input::Builder {
        crate::input::get_component_input::Builder::default()
    }
    /// Creates a new `GetComponent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetComponent {
    type Output =
        std::result::Result<crate::output::GetComponentOutput, crate::error::GetComponentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_component_error(response)
        } else {
            crate::operation_deser::parse_get_component_response(response)
        }
    }
}

/// Operation shape for `GetForm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_form`](crate::client::Client::get_form).
///
/// `ParseStrictResponse` impl for `GetForm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetForm {
    _private: (),
}
impl GetForm {
    /// Creates a new builder-style object to manufacture [`GetFormInput`](crate::input::GetFormInput).
    pub fn builder() -> crate::input::get_form_input::Builder {
        crate::input::get_form_input::Builder::default()
    }
    /// Creates a new `GetForm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetForm {
    type Output = std::result::Result<crate::output::GetFormOutput, crate::error::GetFormError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_form_error(response)
        } else {
            crate::operation_deser::parse_get_form_response(response)
        }
    }
}

/// Operation shape for `GetMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_metadata`](crate::client::Client::get_metadata).
///
/// `ParseStrictResponse` impl for `GetMetadata`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMetadata {
    _private: (),
}
impl GetMetadata {
    /// Creates a new builder-style object to manufacture [`GetMetadataInput`](crate::input::GetMetadataInput).
    pub fn builder() -> crate::input::get_metadata_input::Builder {
        crate::input::get_metadata_input::Builder::default()
    }
    /// Creates a new `GetMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMetadata {
    type Output =
        std::result::Result<crate::output::GetMetadataOutput, crate::error::GetMetadataError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_metadata_error(response)
        } else {
            crate::operation_deser::parse_get_metadata_response(response)
        }
    }
}

/// Operation shape for `GetTheme`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_theme`](crate::client::Client::get_theme).
///
/// `ParseStrictResponse` impl for `GetTheme`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTheme {
    _private: (),
}
impl GetTheme {
    /// Creates a new builder-style object to manufacture [`GetThemeInput`](crate::input::GetThemeInput).
    pub fn builder() -> crate::input::get_theme_input::Builder {
        crate::input::get_theme_input::Builder::default()
    }
    /// Creates a new `GetTheme` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetTheme {
    type Output = std::result::Result<crate::output::GetThemeOutput, crate::error::GetThemeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_theme_error(response)
        } else {
            crate::operation_deser::parse_get_theme_response(response)
        }
    }
}

/// Operation shape for `ListComponents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_components`](crate::client::Client::list_components).
///
/// `ParseStrictResponse` impl for `ListComponents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListComponents {
    _private: (),
}
impl ListComponents {
    /// Creates a new builder-style object to manufacture [`ListComponentsInput`](crate::input::ListComponentsInput).
    pub fn builder() -> crate::input::list_components_input::Builder {
        crate::input::list_components_input::Builder::default()
    }
    /// Creates a new `ListComponents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListComponents {
    type Output =
        std::result::Result<crate::output::ListComponentsOutput, crate::error::ListComponentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_components_error(response)
        } else {
            crate::operation_deser::parse_list_components_response(response)
        }
    }
}

/// Operation shape for `ListForms`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_forms`](crate::client::Client::list_forms).
///
/// `ParseStrictResponse` impl for `ListForms`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListForms {
    _private: (),
}
impl ListForms {
    /// Creates a new builder-style object to manufacture [`ListFormsInput`](crate::input::ListFormsInput).
    pub fn builder() -> crate::input::list_forms_input::Builder {
        crate::input::list_forms_input::Builder::default()
    }
    /// Creates a new `ListForms` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListForms {
    type Output = std::result::Result<crate::output::ListFormsOutput, crate::error::ListFormsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_forms_error(response)
        } else {
            crate::operation_deser::parse_list_forms_response(response)
        }
    }
}

/// Operation shape for `ListThemes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_themes`](crate::client::Client::list_themes).
///
/// `ParseStrictResponse` impl for `ListThemes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListThemes {
    _private: (),
}
impl ListThemes {
    /// Creates a new builder-style object to manufacture [`ListThemesInput`](crate::input::ListThemesInput).
    pub fn builder() -> crate::input::list_themes_input::Builder {
        crate::input::list_themes_input::Builder::default()
    }
    /// Creates a new `ListThemes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListThemes {
    type Output =
        std::result::Result<crate::output::ListThemesOutput, crate::error::ListThemesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_themes_error(response)
        } else {
            crate::operation_deser::parse_list_themes_response(response)
        }
    }
}

/// Operation shape for `PutMetadataFlag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_metadata_flag`](crate::client::Client::put_metadata_flag).
///
/// `ParseStrictResponse` impl for `PutMetadataFlag`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutMetadataFlag {
    _private: (),
}
impl PutMetadataFlag {
    /// Creates a new builder-style object to manufacture [`PutMetadataFlagInput`](crate::input::PutMetadataFlagInput).
    pub fn builder() -> crate::input::put_metadata_flag_input::Builder {
        crate::input::put_metadata_flag_input::Builder::default()
    }
    /// Creates a new `PutMetadataFlag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutMetadataFlag {
    type Output = std::result::Result<
        crate::output::PutMetadataFlagOutput,
        crate::error::PutMetadataFlagError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_metadata_flag_error(response)
        } else {
            crate::operation_deser::parse_put_metadata_flag_response(response)
        }
    }
}

/// Operation shape for `RefreshToken`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`refresh_token`](crate::client::Client::refresh_token).
///
/// `ParseStrictResponse` impl for `RefreshToken`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RefreshToken {
    _private: (),
}
impl RefreshToken {
    /// Creates a new builder-style object to manufacture [`RefreshTokenInput`](crate::input::RefreshTokenInput).
    pub fn builder() -> crate::input::refresh_token_input::Builder {
        crate::input::refresh_token_input::Builder::default()
    }
    /// Creates a new `RefreshToken` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RefreshToken {
    type Output =
        std::result::Result<crate::output::RefreshTokenOutput, crate::error::RefreshTokenError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_refresh_token_error(response)
        } else {
            crate::operation_deser::parse_refresh_token_response(response)
        }
    }
}

/// Operation shape for `UpdateComponent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_component`](crate::client::Client::update_component).
///
/// `ParseStrictResponse` impl for `UpdateComponent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateComponent {
    _private: (),
}
impl UpdateComponent {
    /// Creates a new builder-style object to manufacture [`UpdateComponentInput`](crate::input::UpdateComponentInput).
    pub fn builder() -> crate::input::update_component_input::Builder {
        crate::input::update_component_input::Builder::default()
    }
    /// Creates a new `UpdateComponent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateComponent {
    type Output = std::result::Result<
        crate::output::UpdateComponentOutput,
        crate::error::UpdateComponentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_component_error(response)
        } else {
            crate::operation_deser::parse_update_component_response(response)
        }
    }
}

/// Operation shape for `UpdateForm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_form`](crate::client::Client::update_form).
///
/// `ParseStrictResponse` impl for `UpdateForm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateForm {
    _private: (),
}
impl UpdateForm {
    /// Creates a new builder-style object to manufacture [`UpdateFormInput`](crate::input::UpdateFormInput).
    pub fn builder() -> crate::input::update_form_input::Builder {
        crate::input::update_form_input::Builder::default()
    }
    /// Creates a new `UpdateForm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateForm {
    type Output =
        std::result::Result<crate::output::UpdateFormOutput, crate::error::UpdateFormError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_form_error(response)
        } else {
            crate::operation_deser::parse_update_form_response(response)
        }
    }
}

/// Operation shape for `UpdateTheme`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_theme`](crate::client::Client::update_theme).
///
/// `ParseStrictResponse` impl for `UpdateTheme`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTheme {
    _private: (),
}
impl UpdateTheme {
    /// Creates a new builder-style object to manufacture [`UpdateThemeInput`](crate::input::UpdateThemeInput).
    pub fn builder() -> crate::input::update_theme_input::Builder {
        crate::input::update_theme_input::Builder::default()
    }
    /// Creates a new `UpdateTheme` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTheme {
    type Output =
        std::result::Result<crate::output::UpdateThemeOutput, crate::error::UpdateThemeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_theme_error(response)
        } else {
            crate::operation_deser::parse_update_theme_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
