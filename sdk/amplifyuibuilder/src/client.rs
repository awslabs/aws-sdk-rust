// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Amplify UI Builder
///
/// Client for invoking operations on AWS Amplify UI Builder. Each operation on AWS Amplify UI Builder is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_amplifyuibuilder::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_amplifyuibuilder::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_amplifyuibuilder::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateComponent`](crate::client::fluent_builders::CreateComponent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::CreateComponent::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::CreateComponent::set_app_id): <p>The unique ID of the Amplify app to associate with the component.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::CreateComponent::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::CreateComponent::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateComponent::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateComponent::set_client_token): <p>The unique client token.</p>
    ///   - [`component_to_create(CreateComponentData)`](crate::client::fluent_builders::CreateComponent::component_to_create) / [`set_component_to_create(Option<CreateComponentData>)`](crate::client::fluent_builders::CreateComponent::set_component_to_create): <p>Represents the configuration of the component to create.</p>
    /// - On success, responds with [`CreateComponentOutput`](crate::output::CreateComponentOutput) with field(s):
    ///   - [`entity(Option<Component>)`](crate::output::CreateComponentOutput::entity): <p>Describes the configuration of the new component.</p>
    /// - On failure, responds with [`SdkError<CreateComponentError>`](crate::error::CreateComponentError)
    pub fn create_component(&self) -> crate::client::fluent_builders::CreateComponent {
        crate::client::fluent_builders::CreateComponent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateForm`](crate::client::fluent_builders::CreateForm) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::CreateForm::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::CreateForm::set_app_id): <p>The unique ID of the Amplify app to associate with the form.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::CreateForm::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::CreateForm::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateForm::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateForm::set_client_token): <p>The unique client token.</p>
    ///   - [`form_to_create(CreateFormData)`](crate::client::fluent_builders::CreateForm::form_to_create) / [`set_form_to_create(Option<CreateFormData>)`](crate::client::fluent_builders::CreateForm::set_form_to_create): <p>Represents the configuration of the form to create.</p>
    /// - On success, responds with [`CreateFormOutput`](crate::output::CreateFormOutput) with field(s):
    ///   - [`entity(Option<Form>)`](crate::output::CreateFormOutput::entity): <p>Describes the configuration of the new form.</p>
    /// - On failure, responds with [`SdkError<CreateFormError>`](crate::error::CreateFormError)
    pub fn create_form(&self) -> crate::client::fluent_builders::CreateForm {
        crate::client::fluent_builders::CreateForm::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTheme`](crate::client::fluent_builders::CreateTheme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_app_id): <p>The unique ID of the Amplify app associated with the theme.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateTheme::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateTheme::set_client_token): <p>The unique client token.</p>
    ///   - [`theme_to_create(CreateThemeData)`](crate::client::fluent_builders::CreateTheme::theme_to_create) / [`set_theme_to_create(Option<CreateThemeData>)`](crate::client::fluent_builders::CreateTheme::set_theme_to_create): <p>Represents the configuration of the theme to create.</p>
    /// - On success, responds with [`CreateThemeOutput`](crate::output::CreateThemeOutput) with field(s):
    ///   - [`entity(Option<Theme>)`](crate::output::CreateThemeOutput::entity): <p>Describes the configuration of the new theme.</p>
    /// - On failure, responds with [`SdkError<CreateThemeError>`](crate::error::CreateThemeError)
    pub fn create_theme(&self) -> crate::client::fluent_builders::CreateTheme {
        crate::client::fluent_builders::CreateTheme::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteComponent`](crate::client::fluent_builders::DeleteComponent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteComponent::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteComponent::set_app_id): <p>The unique ID of the Amplify app associated with the component to delete.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::DeleteComponent::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::DeleteComponent::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteComponent::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteComponent::set_id): <p>The unique ID of the component to delete.</p>
    /// - On success, responds with [`DeleteComponentOutput`](crate::output::DeleteComponentOutput)

    /// - On failure, responds with [`SdkError<DeleteComponentError>`](crate::error::DeleteComponentError)
    pub fn delete_component(&self) -> crate::client::fluent_builders::DeleteComponent {
        crate::client::fluent_builders::DeleteComponent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteForm`](crate::client::fluent_builders::DeleteForm) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteForm::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteForm::set_app_id): <p>The unique ID of the Amplify app associated with the form to delete.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::DeleteForm::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::DeleteForm::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteForm::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteForm::set_id): <p>The unique ID of the form to delete.</p>
    /// - On success, responds with [`DeleteFormOutput`](crate::output::DeleteFormOutput)

    /// - On failure, responds with [`SdkError<DeleteFormError>`](crate::error::DeleteFormError)
    pub fn delete_form(&self) -> crate::client::fluent_builders::DeleteForm {
        crate::client::fluent_builders::DeleteForm::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTheme`](crate::client::fluent_builders::DeleteTheme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteTheme::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteTheme::set_app_id): <p>The unique ID of the Amplify app associated with the theme to delete.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::DeleteTheme::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::DeleteTheme::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteTheme::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteTheme::set_id): <p>The unique ID of the theme to delete.</p>
    /// - On success, responds with [`DeleteThemeOutput`](crate::output::DeleteThemeOutput)

    /// - On failure, responds with [`SdkError<DeleteThemeError>`](crate::error::DeleteThemeError)
    pub fn delete_theme(&self) -> crate::client::fluent_builders::DeleteTheme {
        crate::client::fluent_builders::DeleteTheme::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExchangeCodeForToken`](crate::client::fluent_builders::ExchangeCodeForToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`provider(TokenProviders)`](crate::client::fluent_builders::ExchangeCodeForToken::provider) / [`set_provider(Option<TokenProviders>)`](crate::client::fluent_builders::ExchangeCodeForToken::set_provider): <p>The third-party provider for the token. The only valid value is <code>figma</code>.</p>
    ///   - [`request(ExchangeCodeForTokenRequestBody)`](crate::client::fluent_builders::ExchangeCodeForToken::request) / [`set_request(Option<ExchangeCodeForTokenRequestBody>)`](crate::client::fluent_builders::ExchangeCodeForToken::set_request): <p>Describes the configuration of the request.</p>
    /// - On success, responds with [`ExchangeCodeForTokenOutput`](crate::output::ExchangeCodeForTokenOutput) with field(s):
    ///   - [`access_token(Option<String>)`](crate::output::ExchangeCodeForTokenOutput::access_token): <p>The access token.</p>
    ///   - [`expires_in(Option<i32>)`](crate::output::ExchangeCodeForTokenOutput::expires_in): <p>The date and time when the new access token expires.</p>
    ///   - [`refresh_token(Option<String>)`](crate::output::ExchangeCodeForTokenOutput::refresh_token): <p>The token to use to refresh a previously issued access token that might have expired.</p>
    /// - On failure, responds with [`SdkError<ExchangeCodeForTokenError>`](crate::error::ExchangeCodeForTokenError)
    pub fn exchange_code_for_token(&self) -> crate::client::fluent_builders::ExchangeCodeForToken {
        crate::client::fluent_builders::ExchangeCodeForToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportComponents`](crate::client::fluent_builders::ExportComponents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ExportComponents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ExportComponents::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ExportComponents::set_app_id): <p>The unique ID of the Amplify app to export components to.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ExportComponents::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ExportComponents::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ExportComponents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ExportComponents::set_next_token): <p>The token to request the next page of results.</p>
    /// - On success, responds with [`ExportComponentsOutput`](crate::output::ExportComponentsOutput) with field(s):
    ///   - [`entities(Option<Vec<Component>>)`](crate::output::ExportComponentsOutput::entities): <p>Represents the configuration of the exported components.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ExportComponentsOutput::next_token): <p>The pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ExportComponentsError>`](crate::error::ExportComponentsError)
    pub fn export_components(&self) -> crate::client::fluent_builders::ExportComponents {
        crate::client::fluent_builders::ExportComponents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportForms`](crate::client::fluent_builders::ExportForms) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ExportForms::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ExportForms::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ExportForms::set_app_id): <p>The unique ID of the Amplify app to export forms to.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ExportForms::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ExportForms::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ExportForms::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ExportForms::set_next_token): <p>The token to request the next page of results.</p>
    /// - On success, responds with [`ExportFormsOutput`](crate::output::ExportFormsOutput) with field(s):
    ///   - [`entities(Option<Vec<Form>>)`](crate::output::ExportFormsOutput::entities): <p>Represents the configuration of the exported forms.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ExportFormsOutput::next_token): <p>The pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ExportFormsError>`](crate::error::ExportFormsError)
    pub fn export_forms(&self) -> crate::client::fluent_builders::ExportForms {
        crate::client::fluent_builders::ExportForms::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportThemes`](crate::client::fluent_builders::ExportThemes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ExportThemes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ExportThemes::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ExportThemes::set_app_id): <p>The unique ID of the Amplify app to export the themes to.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ExportThemes::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ExportThemes::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ExportThemes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ExportThemes::set_next_token): <p>The token to request the next page of results.</p>
    /// - On success, responds with [`ExportThemesOutput`](crate::output::ExportThemesOutput) with field(s):
    ///   - [`entities(Option<Vec<Theme>>)`](crate::output::ExportThemesOutput::entities): <p>Represents the configuration of the exported themes.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ExportThemesOutput::next_token): <p>The pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ExportThemesError>`](crate::error::ExportThemesError)
    pub fn export_themes(&self) -> crate::client::fluent_builders::ExportThemes {
        crate::client::fluent_builders::ExportThemes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetComponent`](crate::client::fluent_builders::GetComponent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetComponent::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetComponent::set_app_id): <p>The unique ID of the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::GetComponent::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::GetComponent::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetComponent::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetComponent::set_id): <p>The unique ID of the component.</p>
    /// - On success, responds with [`GetComponentOutput`](crate::output::GetComponentOutput) with field(s):
    ///   - [`component(Option<Component>)`](crate::output::GetComponentOutput::component): <p>Represents the configuration settings for the component.</p>
    /// - On failure, responds with [`SdkError<GetComponentError>`](crate::error::GetComponentError)
    pub fn get_component(&self) -> crate::client::fluent_builders::GetComponent {
        crate::client::fluent_builders::GetComponent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetForm`](crate::client::fluent_builders::GetForm) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetForm::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetForm::set_app_id): <p>The unique ID of the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::GetForm::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::GetForm::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetForm::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetForm::set_id): <p>The unique ID of the form.</p>
    /// - On success, responds with [`GetFormOutput`](crate::output::GetFormOutput) with field(s):
    ///   - [`form(Option<Form>)`](crate::output::GetFormOutput::form): <p>Represents the configuration settings for the form.</p>
    /// - On failure, responds with [`SdkError<GetFormError>`](crate::error::GetFormError)
    pub fn get_form(&self) -> crate::client::fluent_builders::GetForm {
        crate::client::fluent_builders::GetForm::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMetadata`](crate::client::fluent_builders::GetMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetMetadata::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetMetadata::set_app_id): <p>The unique ID of the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::GetMetadata::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::GetMetadata::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    /// - On success, responds with [`GetMetadataOutput`](crate::output::GetMetadataOutput) with field(s):
    ///   - [`features(Option<HashMap<String, String>>)`](crate::output::GetMetadataOutput::features): <p>Represents the configuration settings for the features metadata.</p>
    /// - On failure, responds with [`SdkError<GetMetadataError>`](crate::error::GetMetadataError)
    pub fn get_metadata(&self) -> crate::client::fluent_builders::GetMetadata {
        crate::client::fluent_builders::GetMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTheme`](crate::client::fluent_builders::GetTheme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetTheme::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetTheme::set_app_id): <p>The unique ID of the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::GetTheme::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::GetTheme::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetTheme::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetTheme::set_id): <p>The unique ID for the theme.</p>
    /// - On success, responds with [`GetThemeOutput`](crate::output::GetThemeOutput) with field(s):
    ///   - [`theme(Option<Theme>)`](crate::output::GetThemeOutput::theme): <p>Represents the configuration settings for the theme.</p>
    /// - On failure, responds with [`SdkError<GetThemeError>`](crate::error::GetThemeError)
    pub fn get_theme(&self) -> crate::client::fluent_builders::GetTheme {
        crate::client::fluent_builders::GetTheme::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListComponents`](crate::client::fluent_builders::ListComponents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListComponents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ListComponents::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ListComponents::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ListComponents::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ListComponents::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListComponents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListComponents::set_next_token): <p>The token to request the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListComponents::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListComponents::set_max_results): <p>The maximum number of components to retrieve.</p>
    /// - On success, responds with [`ListComponentsOutput`](crate::output::ListComponentsOutput) with field(s):
    ///   - [`entities(Option<Vec<ComponentSummary>>)`](crate::output::ListComponentsOutput::entities): <p>The list of components for the Amplify app.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListComponentsOutput::next_token): <p>The pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListComponentsError>`](crate::error::ListComponentsError)
    pub fn list_components(&self) -> crate::client::fluent_builders::ListComponents {
        crate::client::fluent_builders::ListComponents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListForms`](crate::client::fluent_builders::ListForms) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListForms::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ListForms::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ListForms::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ListForms::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ListForms::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListForms::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListForms::set_next_token): <p>The token to request the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListForms::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListForms::set_max_results): <p>The maximum number of forms to retrieve.</p>
    /// - On success, responds with [`ListFormsOutput`](crate::output::ListFormsOutput) with field(s):
    ///   - [`entities(Option<Vec<FormSummary>>)`](crate::output::ListFormsOutput::entities): <p>The list of forms for the Amplify app.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFormsOutput::next_token): <p>The pagination token that's included if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListFormsError>`](crate::error::ListFormsError)
    pub fn list_forms(&self) -> crate::client::fluent_builders::ListForms {
        crate::client::fluent_builders::ListForms::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListThemes`](crate::client::fluent_builders::ListThemes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListThemes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::ListThemes::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::ListThemes::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::ListThemes::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::ListThemes::set_environment_name): <p>The name of the backend environment that is a part of the Amplify app.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListThemes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListThemes::set_next_token): <p>The token to request the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListThemes::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListThemes::set_max_results): <p>The maximum number of theme results to return in the response.</p>
    /// - On success, responds with [`ListThemesOutput`](crate::output::ListThemesOutput) with field(s):
    ///   - [`entities(Option<Vec<ThemeSummary>>)`](crate::output::ListThemesOutput::entities): <p>The list of themes for the Amplify app.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListThemesOutput::next_token): <p>The pagination token that's returned if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListThemesError>`](crate::error::ListThemesError)
    pub fn list_themes(&self) -> crate::client::fluent_builders::ListThemes {
        crate::client::fluent_builders::ListThemes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutMetadataFlag`](crate::client::fluent_builders::PutMetadataFlag) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::PutMetadataFlag::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::PutMetadataFlag::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::PutMetadataFlag::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::PutMetadataFlag::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`feature_name(impl Into<String>)`](crate::client::fluent_builders::PutMetadataFlag::feature_name) / [`set_feature_name(Option<String>)`](crate::client::fluent_builders::PutMetadataFlag::set_feature_name): <p>The name of the feature associated with the metadata.</p>
    ///   - [`body(PutMetadataFlagBody)`](crate::client::fluent_builders::PutMetadataFlag::body) / [`set_body(Option<PutMetadataFlagBody>)`](crate::client::fluent_builders::PutMetadataFlag::set_body): <p>The metadata information to store.</p>
    /// - On success, responds with [`PutMetadataFlagOutput`](crate::output::PutMetadataFlagOutput)

    /// - On failure, responds with [`SdkError<PutMetadataFlagError>`](crate::error::PutMetadataFlagError)
    pub fn put_metadata_flag(&self) -> crate::client::fluent_builders::PutMetadataFlag {
        crate::client::fluent_builders::PutMetadataFlag::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RefreshToken`](crate::client::fluent_builders::RefreshToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`provider(TokenProviders)`](crate::client::fluent_builders::RefreshToken::provider) / [`set_provider(Option<TokenProviders>)`](crate::client::fluent_builders::RefreshToken::set_provider): <p>The third-party provider for the token. The only valid value is <code>figma</code>.</p>
    ///   - [`refresh_token_body(RefreshTokenRequestBody)`](crate::client::fluent_builders::RefreshToken::refresh_token_body) / [`set_refresh_token_body(Option<RefreshTokenRequestBody>)`](crate::client::fluent_builders::RefreshToken::set_refresh_token_body): <p>Information about the refresh token request.</p>
    /// - On success, responds with [`RefreshTokenOutput`](crate::output::RefreshTokenOutput) with field(s):
    ///   - [`access_token(Option<String>)`](crate::output::RefreshTokenOutput::access_token): <p>The access token.</p>
    ///   - [`expires_in(Option<i32>)`](crate::output::RefreshTokenOutput::expires_in): <p>The date and time when the new access token expires.</p>
    /// - On failure, responds with [`SdkError<RefreshTokenError>`](crate::error::RefreshTokenError)
    pub fn refresh_token(&self) -> crate::client::fluent_builders::RefreshToken {
        crate::client::fluent_builders::RefreshToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateComponent`](crate::client::fluent_builders::UpdateComponent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::UpdateComponent::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::UpdateComponent::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::UpdateComponent::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::UpdateComponent::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateComponent::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateComponent::set_id): <p>The unique ID for the component.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateComponent::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateComponent::set_client_token): <p>The unique client token.</p>
    ///   - [`updated_component(UpdateComponentData)`](crate::client::fluent_builders::UpdateComponent::updated_component) / [`set_updated_component(Option<UpdateComponentData>)`](crate::client::fluent_builders::UpdateComponent::set_updated_component): <p>The configuration of the updated component.</p>
    /// - On success, responds with [`UpdateComponentOutput`](crate::output::UpdateComponentOutput) with field(s):
    ///   - [`entity(Option<Component>)`](crate::output::UpdateComponentOutput::entity): <p>Describes the configuration of the updated component.</p>
    /// - On failure, responds with [`SdkError<UpdateComponentError>`](crate::error::UpdateComponentError)
    pub fn update_component(&self) -> crate::client::fluent_builders::UpdateComponent {
        crate::client::fluent_builders::UpdateComponent::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateForm`](crate::client::fluent_builders::UpdateForm) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::UpdateForm::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::UpdateForm::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::UpdateForm::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::UpdateForm::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateForm::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateForm::set_id): <p>The unique ID for the form.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateForm::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateForm::set_client_token): <p>The unique client token.</p>
    ///   - [`updated_form(UpdateFormData)`](crate::client::fluent_builders::UpdateForm::updated_form) / [`set_updated_form(Option<UpdateFormData>)`](crate::client::fluent_builders::UpdateForm::set_updated_form): <p>The request accepts the following data in JSON format.</p>
    /// - On success, responds with [`UpdateFormOutput`](crate::output::UpdateFormOutput) with field(s):
    ///   - [`entity(Option<Form>)`](crate::output::UpdateFormOutput::entity): <p>Describes the configuration of the updated form.</p>
    /// - On failure, responds with [`SdkError<UpdateFormError>`](crate::error::UpdateFormError)
    pub fn update_form(&self) -> crate::client::fluent_builders::UpdateForm {
        crate::client::fluent_builders::UpdateForm::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTheme`](crate::client::fluent_builders::UpdateTheme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTheme::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::UpdateTheme::set_app_id): <p>The unique ID for the Amplify app.</p>
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::UpdateTheme::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::UpdateTheme::set_environment_name): <p>The name of the backend environment that is part of the Amplify app.</p>
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::UpdateTheme::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::UpdateTheme::set_id): <p>The unique ID for the theme.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateTheme::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateTheme::set_client_token): <p>The unique client token.</p>
    ///   - [`updated_theme(UpdateThemeData)`](crate::client::fluent_builders::UpdateTheme::updated_theme) / [`set_updated_theme(Option<UpdateThemeData>)`](crate::client::fluent_builders::UpdateTheme::set_updated_theme): <p>The configuration of the updated theme.</p>
    /// - On success, responds with [`UpdateThemeOutput`](crate::output::UpdateThemeOutput) with field(s):
    ///   - [`entity(Option<Theme>)`](crate::output::UpdateThemeOutput::entity): <p>Describes the configuration of the updated theme.</p>
    /// - On failure, responds with [`SdkError<UpdateThemeError>`](crate::error::UpdateThemeError)
    pub fn update_theme(&self) -> crate::client::fluent_builders::UpdateTheme {
        crate::client::fluent_builders::UpdateTheme::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
