// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a query to retrieve training metrics from SageMaker.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricQueryResult {
    /// <p>The status of the metric query.</p>
    pub status: ::std::option::Option<crate::types::MetricQueryResultStatus>,
    /// <p>A message describing the status of the metric query.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The values for the x-axis of the metrics.</p>
    pub x_axis_values: ::std::option::Option<::std::vec::Vec<i64>>,
    /// <p>The metric values retrieved by the query.</p>
    pub metric_values: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl MetricQueryResult {
    /// <p>The status of the metric query.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MetricQueryResultStatus> {
        self.status.as_ref()
    }
    /// <p>A message describing the status of the metric query.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The values for the x-axis of the metrics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.x_axis_values.is_none()`.
    pub fn x_axis_values(&self) -> &[i64] {
        self.x_axis_values.as_deref().unwrap_or_default()
    }
    /// <p>The metric values retrieved by the query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_values.is_none()`.
    pub fn metric_values(&self) -> &[f64] {
        self.metric_values.as_deref().unwrap_or_default()
    }
}
impl MetricQueryResult {
    /// Creates a new builder-style object to manufacture [`MetricQueryResult`](crate::types::MetricQueryResult).
    pub fn builder() -> crate::types::builders::MetricQueryResultBuilder {
        crate::types::builders::MetricQueryResultBuilder::default()
    }
}

/// A builder for [`MetricQueryResult`](crate::types::MetricQueryResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricQueryResultBuilder {
    pub(crate) status: ::std::option::Option<crate::types::MetricQueryResultStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) x_axis_values: ::std::option::Option<::std::vec::Vec<i64>>,
    pub(crate) metric_values: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl MetricQueryResultBuilder {
    /// <p>The status of the metric query.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MetricQueryResultStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the metric query.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MetricQueryResultStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the metric query.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MetricQueryResultStatus> {
        &self.status
    }
    /// <p>A message describing the status of the metric query.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the status of the metric query.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message describing the status of the metric query.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Appends an item to `x_axis_values`.
    ///
    /// To override the contents of this collection use [`set_x_axis_values`](Self::set_x_axis_values).
    ///
    /// <p>The values for the x-axis of the metrics.</p>
    pub fn x_axis_values(mut self, input: i64) -> Self {
        let mut v = self.x_axis_values.unwrap_or_default();
        v.push(input);
        self.x_axis_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values for the x-axis of the metrics.</p>
    pub fn set_x_axis_values(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.x_axis_values = input;
        self
    }
    /// <p>The values for the x-axis of the metrics.</p>
    pub fn get_x_axis_values(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.x_axis_values
    }
    /// Appends an item to `metric_values`.
    ///
    /// To override the contents of this collection use [`set_metric_values`](Self::set_metric_values).
    ///
    /// <p>The metric values retrieved by the query.</p>
    pub fn metric_values(mut self, input: f64) -> Self {
        let mut v = self.metric_values.unwrap_or_default();
        v.push(input);
        self.metric_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metric values retrieved by the query.</p>
    pub fn set_metric_values(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.metric_values = input;
        self
    }
    /// <p>The metric values retrieved by the query.</p>
    pub fn get_metric_values(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.metric_values
    }
    /// Consumes the builder and constructs a [`MetricQueryResult`](crate::types::MetricQueryResult).
    pub fn build(self) -> crate::types::MetricQueryResult {
        crate::types::MetricQueryResult {
            status: self.status,
            message: self.message,
            x_axis_values: self.x_axis_values,
            metric_values: self.metric_values,
        }
    }
}
