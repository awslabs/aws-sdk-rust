// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An error that occured when putting the metric data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPutMetricsError {
    /// <p>The error code of an error that occured when attempting to put metrics.</p>
    /// <ul>
    /// <li> <p> <code>METRIC_LIMIT_EXCEEDED</code>: The maximum amount of metrics per resource is exceeded.</p> </li>
    /// <li> <p> <code>INTERNAL_ERROR</code>: An internal error occured.</p> </li>
    /// <li> <p> <code>VALIDATION_ERROR</code>: The metric data failed validation.</p> </li>
    /// <li> <p> <code>CONFLICT_ERROR</code>: Multiple requests attempted to modify the same data simultaneously.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::PutMetricsErrorCode>,
    /// <p>An index that corresponds to the metric in the request.</p>
    #[doc(hidden)]
    pub metric_index: i32,
}
impl BatchPutMetricsError {
    /// <p>The error code of an error that occured when attempting to put metrics.</p>
    /// <ul>
    /// <li> <p> <code>METRIC_LIMIT_EXCEEDED</code>: The maximum amount of metrics per resource is exceeded.</p> </li>
    /// <li> <p> <code>INTERNAL_ERROR</code>: An internal error occured.</p> </li>
    /// <li> <p> <code>VALIDATION_ERROR</code>: The metric data failed validation.</p> </li>
    /// <li> <p> <code>CONFLICT_ERROR</code>: Multiple requests attempted to modify the same data simultaneously.</p> </li>
    /// </ul>
    pub fn code(&self) -> std::option::Option<&crate::types::PutMetricsErrorCode> {
        self.code.as_ref()
    }
    /// <p>An index that corresponds to the metric in the request.</p>
    pub fn metric_index(&self) -> i32 {
        self.metric_index
    }
}
impl BatchPutMetricsError {
    /// Creates a new builder-style object to manufacture [`BatchPutMetricsError`](crate::types::BatchPutMetricsError).
    pub fn builder() -> crate::types::builders::BatchPutMetricsErrorBuilder {
        crate::types::builders::BatchPutMetricsErrorBuilder::default()
    }
}

/// A builder for [`BatchPutMetricsError`](crate::types::BatchPutMetricsError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchPutMetricsErrorBuilder {
    pub(crate) code: std::option::Option<crate::types::PutMetricsErrorCode>,
    pub(crate) metric_index: std::option::Option<i32>,
}
impl BatchPutMetricsErrorBuilder {
    /// <p>The error code of an error that occured when attempting to put metrics.</p>
    /// <ul>
    /// <li> <p> <code>METRIC_LIMIT_EXCEEDED</code>: The maximum amount of metrics per resource is exceeded.</p> </li>
    /// <li> <p> <code>INTERNAL_ERROR</code>: An internal error occured.</p> </li>
    /// <li> <p> <code>VALIDATION_ERROR</code>: The metric data failed validation.</p> </li>
    /// <li> <p> <code>CONFLICT_ERROR</code>: Multiple requests attempted to modify the same data simultaneously.</p> </li>
    /// </ul>
    pub fn code(mut self, input: crate::types::PutMetricsErrorCode) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The error code of an error that occured when attempting to put metrics.</p>
    /// <ul>
    /// <li> <p> <code>METRIC_LIMIT_EXCEEDED</code>: The maximum amount of metrics per resource is exceeded.</p> </li>
    /// <li> <p> <code>INTERNAL_ERROR</code>: An internal error occured.</p> </li>
    /// <li> <p> <code>VALIDATION_ERROR</code>: The metric data failed validation.</p> </li>
    /// <li> <p> <code>CONFLICT_ERROR</code>: Multiple requests attempted to modify the same data simultaneously.</p> </li>
    /// </ul>
    pub fn set_code(
        mut self,
        input: std::option::Option<crate::types::PutMetricsErrorCode>,
    ) -> Self {
        self.code = input;
        self
    }
    /// <p>An index that corresponds to the metric in the request.</p>
    pub fn metric_index(mut self, input: i32) -> Self {
        self.metric_index = Some(input);
        self
    }
    /// <p>An index that corresponds to the metric in the request.</p>
    pub fn set_metric_index(mut self, input: std::option::Option<i32>) -> Self {
        self.metric_index = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchPutMetricsError`](crate::types::BatchPutMetricsError).
    pub fn build(self) -> crate::types::BatchPutMetricsError {
        crate::types::BatchPutMetricsError {
            code: self.code,
            metric_index: self.metric_index.unwrap_or_default(),
        }
    }
}
