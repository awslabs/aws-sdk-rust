// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The raw metric data to associate with the resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RawMetricData {
    /// <p>The name of the metric.</p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>The time that the metric was recorded.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metric step (epoch). </p>
    pub step: ::std::option::Option<i32>,
    /// <p>The metric value.</p>
    pub value: ::std::option::Option<f64>,
}
impl RawMetricData {
    /// <p>The name of the metric.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The time that the metric was recorded.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The metric step (epoch). </p>
    pub fn step(&self) -> ::std::option::Option<i32> {
        self.step
    }
    /// <p>The metric value.</p>
    pub fn value(&self) -> ::std::option::Option<f64> {
        self.value
    }
}
impl RawMetricData {
    /// Creates a new builder-style object to manufacture [`RawMetricData`](crate::types::RawMetricData).
    pub fn builder() -> crate::types::builders::RawMetricDataBuilder {
        crate::types::builders::RawMetricDataBuilder::default()
    }
}

/// A builder for [`RawMetricData`](crate::types::RawMetricData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RawMetricDataBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) step: ::std::option::Option<i32>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl RawMetricDataBuilder {
    /// <p>The name of the metric.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the metric.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The time that the metric was recorded.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the metric was recorded.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The time that the metric was recorded.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The metric step (epoch). </p>
    pub fn step(mut self, input: i32) -> Self {
        self.step = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric step (epoch). </p>
    pub fn set_step(mut self, input: ::std::option::Option<i32>) -> Self {
        self.step = input;
        self
    }
    /// <p>The metric step (epoch). </p>
    pub fn get_step(&self) -> &::std::option::Option<i32> {
        &self.step
    }
    /// <p>The metric value.</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The metric value.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`RawMetricData`](crate::types::RawMetricData).
    pub fn build(self) -> crate::types::RawMetricData {
        crate::types::RawMetricData {
            metric_name: self.metric_name,
            timestamp: self.timestamp,
            step: self.step,
            value: self.value,
        }
    }
}
