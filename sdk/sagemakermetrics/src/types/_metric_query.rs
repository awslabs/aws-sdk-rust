// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a query to retrieve training metrics from SageMaker.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricQuery {
    /// <p>The name of the metric to retrieve.</p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the SageMaker resource to retrieve metrics for.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The metrics stat type of metrics to retrieve.</p>
    pub metric_stat: ::std::option::Option<crate::types::MetricStatistic>,
    /// <p>The time period of metrics to retrieve.</p>
    pub period: ::std::option::Option<crate::types::Period>,
    /// <p>The x-axis type of metrics to retrieve.</p>
    pub x_axis_type: ::std::option::Option<crate::types::XAxisType>,
    /// <p>The start time of metrics to retrieve.</p>
    pub start: ::std::option::Option<i64>,
    /// <p>The end time of metrics to retrieve.</p>
    pub end: ::std::option::Option<i64>,
}
impl MetricQuery {
    /// <p>The name of the metric to retrieve.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The ARN of the SageMaker resource to retrieve metrics for.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The metrics stat type of metrics to retrieve.</p>
    pub fn metric_stat(&self) -> ::std::option::Option<&crate::types::MetricStatistic> {
        self.metric_stat.as_ref()
    }
    /// <p>The time period of metrics to retrieve.</p>
    pub fn period(&self) -> ::std::option::Option<&crate::types::Period> {
        self.period.as_ref()
    }
    /// <p>The x-axis type of metrics to retrieve.</p>
    pub fn x_axis_type(&self) -> ::std::option::Option<&crate::types::XAxisType> {
        self.x_axis_type.as_ref()
    }
    /// <p>The start time of metrics to retrieve.</p>
    pub fn start(&self) -> ::std::option::Option<i64> {
        self.start
    }
    /// <p>The end time of metrics to retrieve.</p>
    pub fn end(&self) -> ::std::option::Option<i64> {
        self.end
    }
}
impl MetricQuery {
    /// Creates a new builder-style object to manufacture [`MetricQuery`](crate::types::MetricQuery).
    pub fn builder() -> crate::types::builders::MetricQueryBuilder {
        crate::types::builders::MetricQueryBuilder::default()
    }
}

/// A builder for [`MetricQuery`](crate::types::MetricQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricQueryBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) metric_stat: ::std::option::Option<crate::types::MetricStatistic>,
    pub(crate) period: ::std::option::Option<crate::types::Period>,
    pub(crate) x_axis_type: ::std::option::Option<crate::types::XAxisType>,
    pub(crate) start: ::std::option::Option<i64>,
    pub(crate) end: ::std::option::Option<i64>,
}
impl MetricQueryBuilder {
    /// <p>The name of the metric to retrieve.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric to retrieve.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the metric to retrieve.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The ARN of the SageMaker resource to retrieve metrics for.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SageMaker resource to retrieve metrics for.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the SageMaker resource to retrieve metrics for.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The metrics stat type of metrics to retrieve.</p>
    /// This field is required.
    pub fn metric_stat(mut self, input: crate::types::MetricStatistic) -> Self {
        self.metric_stat = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metrics stat type of metrics to retrieve.</p>
    pub fn set_metric_stat(mut self, input: ::std::option::Option<crate::types::MetricStatistic>) -> Self {
        self.metric_stat = input;
        self
    }
    /// <p>The metrics stat type of metrics to retrieve.</p>
    pub fn get_metric_stat(&self) -> &::std::option::Option<crate::types::MetricStatistic> {
        &self.metric_stat
    }
    /// <p>The time period of metrics to retrieve.</p>
    /// This field is required.
    pub fn period(mut self, input: crate::types::Period) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period of metrics to retrieve.</p>
    pub fn set_period(mut self, input: ::std::option::Option<crate::types::Period>) -> Self {
        self.period = input;
        self
    }
    /// <p>The time period of metrics to retrieve.</p>
    pub fn get_period(&self) -> &::std::option::Option<crate::types::Period> {
        &self.period
    }
    /// <p>The x-axis type of metrics to retrieve.</p>
    /// This field is required.
    pub fn x_axis_type(mut self, input: crate::types::XAxisType) -> Self {
        self.x_axis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The x-axis type of metrics to retrieve.</p>
    pub fn set_x_axis_type(mut self, input: ::std::option::Option<crate::types::XAxisType>) -> Self {
        self.x_axis_type = input;
        self
    }
    /// <p>The x-axis type of metrics to retrieve.</p>
    pub fn get_x_axis_type(&self) -> &::std::option::Option<crate::types::XAxisType> {
        &self.x_axis_type
    }
    /// <p>The start time of metrics to retrieve.</p>
    pub fn start(mut self, input: i64) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of metrics to retrieve.</p>
    pub fn set_start(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start = input;
        self
    }
    /// <p>The start time of metrics to retrieve.</p>
    pub fn get_start(&self) -> &::std::option::Option<i64> {
        &self.start
    }
    /// <p>The end time of metrics to retrieve.</p>
    pub fn end(mut self, input: i64) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of metrics to retrieve.</p>
    pub fn set_end(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end = input;
        self
    }
    /// <p>The end time of metrics to retrieve.</p>
    pub fn get_end(&self) -> &::std::option::Option<i64> {
        &self.end
    }
    /// Consumes the builder and constructs a [`MetricQuery`](crate::types::MetricQuery).
    pub fn build(self) -> crate::types::MetricQuery {
        crate::types::MetricQuery {
            metric_name: self.metric_name,
            resource_arn: self.resource_arn,
            metric_stat: self.metric_stat,
            period: self.period,
            x_axis_type: self.x_axis_type,
            start: self.start,
            end: self.end,
        }
    }
}
