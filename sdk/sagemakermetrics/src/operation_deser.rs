// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_put_metrics_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchPutMetricsOutput, crate::error::BatchPutMetricsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::BatchPutMetricsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::error::BatchPutMetricsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_put_metrics_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BatchPutMetricsOutput, crate::error::BatchPutMetricsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_put_metrics_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_batch_put_metrics(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::BatchPutMetricsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
