// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetMetricsOutput {
    /// <p>The results of a query to retrieve training metrics from SageMaker.</p>
    pub metric_query_results: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryResult>>,
    _request_id: Option<String>,
}
impl BatchGetMetricsOutput {
    /// <p>The results of a query to retrieve training metrics from SageMaker.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_query_results.is_none()`.
    pub fn metric_query_results(&self) -> &[crate::types::MetricQueryResult] {
        self.metric_query_results.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetMetricsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetMetricsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetMetricsOutput`](crate::operation::batch_get_metrics::BatchGetMetricsOutput).
    pub fn builder() -> crate::operation::batch_get_metrics::builders::BatchGetMetricsOutputBuilder {
        crate::operation::batch_get_metrics::builders::BatchGetMetricsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetMetricsOutput`](crate::operation::batch_get_metrics::BatchGetMetricsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetMetricsOutputBuilder {
    pub(crate) metric_query_results: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryResult>>,
    _request_id: Option<String>,
}
impl BatchGetMetricsOutputBuilder {
    /// Appends an item to `metric_query_results`.
    ///
    /// To override the contents of this collection use [`set_metric_query_results`](Self::set_metric_query_results).
    ///
    /// <p>The results of a query to retrieve training metrics from SageMaker.</p>
    pub fn metric_query_results(mut self, input: crate::types::MetricQueryResult) -> Self {
        let mut v = self.metric_query_results.unwrap_or_default();
        v.push(input);
        self.metric_query_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>The results of a query to retrieve training metrics from SageMaker.</p>
    pub fn set_metric_query_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricQueryResult>>) -> Self {
        self.metric_query_results = input;
        self
    }
    /// <p>The results of a query to retrieve training metrics from SageMaker.</p>
    pub fn get_metric_query_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricQueryResult>> {
        &self.metric_query_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetMetricsOutput`](crate::operation::batch_get_metrics::BatchGetMetricsOutput).
    pub fn build(self) -> crate::operation::batch_get_metrics::BatchGetMetricsOutput {
        crate::operation::batch_get_metrics::BatchGetMetricsOutput {
            metric_query_results: self.metric_query_results,
            _request_id: self._request_id,
        }
    }
}
