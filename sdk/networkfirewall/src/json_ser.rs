// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.firewall_arn {
        object.key("FirewallArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.firewall_name {
        object.key("FirewallName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_subnets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSubnetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.update_token {
        object.key("UpdateToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.firewall_arn {
        object.key("FirewallArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.firewall_name {
        object.key("FirewallName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.subnet_mappings {
        let mut array_9 = object.key("SubnetMappings").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFirewallInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.firewall_name {
        object.key("FirewallName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.vpc_id {
        object.key("VpcId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.subnet_mappings {
        let mut array_16 = object.key("SubnetMappings").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if input.delete_protection {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    if input.subnet_change_protection {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    if input.firewall_policy_change_protection {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    if let Some(var_19) = &input.description {
        object.key("Description").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_24.as_str());
    }
    if let Some(var_25) = &input.firewall_policy {
        let mut object_26 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27.as_str());
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_32.as_str());
    }
    if let Some(var_33) = &input.rule_group {
        let mut object_34 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.rules {
        object.key("Rules").string(var_35.as_str());
    }
    if let Some(var_36) = &input.r#type {
        object.key("Type").string(var_36.as_str());
    }
    if let Some(var_37) = &input.description {
        object.key("Description").string(var_37.as_str());
    }
    if let Some(var_38) = &input.capacity {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.firewall_name {
        object.key("FirewallName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.firewall_arn {
        object.key("FirewallArn").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.resource_arn {
        object.key("ResourceArn").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_48.as_str());
    }
    if let Some(var_49) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_49.as_str());
    }
    if let Some(var_50) = &input.r#type {
        object.key("Type").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFirewallInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.firewall_name {
        object.key("FirewallName").string(var_51.as_str());
    }
    if let Some(var_52) = &input.firewall_arn {
        object.key("FirewallArn").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_53.as_str());
    }
    if let Some(var_54) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.firewall_arn {
        object.key("FirewallArn").string(var_55.as_str());
    }
    if let Some(var_56) = &input.firewall_name {
        object.key("FirewallName").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.resource_arn {
        object.key("ResourceArn").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_58.as_str());
    }
    if let Some(var_59) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_59.as_str());
    }
    if let Some(var_60) = &input.r#type {
        object.key("Type").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuleGroupMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_62.as_str());
    }
    if let Some(var_63) = &input.r#type {
        object.key("Type").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_subnets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateSubnetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.update_token {
        object.key("UpdateToken").string(var_64.as_str());
    }
    if let Some(var_65) = &input.firewall_arn {
        object.key("FirewallArn").string(var_65.as_str());
    }
    if let Some(var_66) = &input.firewall_name {
        object.key("FirewallName").string(var_66.as_str());
    }
    if let Some(var_67) = &input.subnet_ids {
        let mut array_68 = object.key("SubnetIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewall_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFirewallPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70.as_str());
    }
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewalls_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFirewallsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72.as_str());
    }
    if let Some(var_73) = &input.vpc_ids {
        let mut array_74 = object.key("VpcIds").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.next_token {
        object.key("NextToken").string(var_77.as_str());
    }
    if let Some(var_78) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_78).into()),
        );
    }
    if let Some(var_79) = &input.scope {
        object.key("Scope").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80.as_str());
    }
    if let Some(var_81) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_81).into()),
        );
    }
    if let Some(var_82) = &input.resource_arn {
        object.key("ResourceArn").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.resource_arn {
        object.key("ResourceArn").string(var_83.as_str());
    }
    if let Some(var_84) = &input.policy {
        object.key("Policy").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.resource_arn {
        object.key("ResourceArn").string(var_85.as_str());
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.resource_arn {
        object.key("ResourceArn").string(var_90.as_str());
    }
    if let Some(var_91) = &input.tag_keys {
        let mut array_92 = object.key("TagKeys").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_delete_protection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallDeleteProtectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.update_token {
        object.key("UpdateToken").string(var_94.as_str());
    }
    if let Some(var_95) = &input.firewall_arn {
        object.key("FirewallArn").string(var_95.as_str());
    }
    if let Some(var_96) = &input.firewall_name {
        object.key("FirewallName").string(var_96.as_str());
    }
    {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_description_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallDescriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.update_token {
        object.key("UpdateToken").string(var_97.as_str());
    }
    if let Some(var_98) = &input.firewall_arn {
        object.key("FirewallArn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.firewall_name {
        object.key("FirewallName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.description {
        object.key("Description").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.update_token {
        object.key("UpdateToken").string(var_101.as_str());
    }
    if let Some(var_102) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_102.as_str());
    }
    if let Some(var_103) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.firewall_policy {
        let mut object_105 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.description {
        object.key("Description").string(var_106.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_change_protection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallPolicyChangeProtectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.update_token {
        object.key("UpdateToken").string(var_107.as_str());
    }
    if let Some(var_108) = &input.firewall_arn {
        object.key("FirewallArn").string(var_108.as_str());
    }
    if let Some(var_109) = &input.firewall_name {
        object.key("FirewallName").string(var_109.as_str());
    }
    {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_logging_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLoggingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.firewall_arn {
        object.key("FirewallArn").string(var_110.as_str());
    }
    if let Some(var_111) = &input.firewall_name {
        object.key("FirewallName").string(var_111.as_str());
    }
    if let Some(var_112) = &input.logging_configuration {
        let mut object_113 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.update_token {
        object.key("UpdateToken").string(var_114.as_str());
    }
    if let Some(var_115) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_115.as_str());
    }
    if let Some(var_116) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_116.as_str());
    }
    if let Some(var_117) = &input.rule_group {
        let mut object_118 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_118, var_117)?;
        object_118.finish();
    }
    if let Some(var_119) = &input.rules {
        object.key("Rules").string(var_119.as_str());
    }
    if let Some(var_120) = &input.r#type {
        object.key("Type").string(var_120.as_str());
    }
    if let Some(var_121) = &input.description {
        object.key("Description").string(var_121.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_subnet_change_protection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSubnetChangeProtectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.update_token {
        object.key("UpdateToken").string(var_122.as_str());
    }
    if let Some(var_123) = &input.firewall_arn {
        object.key("FirewallArn").string(var_123.as_str());
    }
    if let Some(var_124) = &input.firewall_name {
        object.key("FirewallName").string(var_124.as_str());
    }
    {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subnet_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubnetMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.subnet_id {
        object.key("SubnetId").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.key {
        object.key("Key").string(var_126.as_str());
    }
    if let Some(var_127) = &input.value {
        object.key("Value").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.stateless_rule_group_references {
        let mut array_129 = object.key("StatelessRuleGroupReferences").start_array();
        for item_130 in var_128 {
            {
                let mut object_131 = array_129.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule_group_reference(
                    &mut object_131,
                    item_130,
                )?;
                object_131.finish();
            }
        }
        array_129.finish();
    }
    if let Some(var_132) = &input.stateless_default_actions {
        let mut array_133 = object.key("StatelessDefaultActions").start_array();
        for item_134 in var_132 {
            {
                array_133.value().string(item_134.as_str());
            }
        }
        array_133.finish();
    }
    if let Some(var_135) = &input.stateless_fragment_default_actions {
        let mut array_136 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_137 in var_135 {
            {
                array_136.value().string(item_137.as_str());
            }
        }
        array_136.finish();
    }
    if let Some(var_138) = &input.stateless_custom_actions {
        let mut array_139 = object.key("StatelessCustomActions").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(
                    &mut object_141,
                    item_140,
                )?;
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.stateful_rule_group_references {
        let mut array_143 = object.key("StatefulRuleGroupReferences").start_array();
        for item_144 in var_142 {
            {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule_group_reference(
                    &mut object_145,
                    item_144,
                )?;
                object_145.finish();
            }
        }
        array_143.finish();
    }
    if let Some(var_146) = &input.stateful_default_actions {
        let mut array_147 = object.key("StatefulDefaultActions").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.stateful_engine_options {
        let mut object_150 = object.key("StatefulEngineOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_engine_options(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.rule_variables {
        let mut object_152 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_variables(&mut object_152, var_151)?;
        object_152.finish();
    }
    if let Some(var_153) = &input.rules_source {
        let mut object_154 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source(&mut object_154, var_153)?;
        object_154.finish();
    }
    if let Some(var_155) = &input.stateful_rule_options {
        let mut object_156 = object.key("StatefulRuleOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_options(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.log_destination_configs {
        let mut array_158 = object.key("LogDestinationConfigs").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_log_destination_config(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule_group_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRuleGroupReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.resource_arn {
        object.key("ResourceArn").string(var_161.as_str());
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.action_name {
        object.key("ActionName").string(var_162.as_str());
    }
    if let Some(var_163) = &input.action_definition {
        let mut object_164 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_definition(
            &mut object_164,
            var_163,
        )?;
        object_164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRuleGroupReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.resource_arn {
        object.key("ResourceArn").string(var_165.as_str());
    }
    if let Some(var_166) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.r#override {
        let mut object_168 = object.key("Override").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_group_override(
            &mut object_168,
            var_167,
        )?;
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_engine_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulEngineOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.rule_order {
        object.key("RuleOrder").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_variables(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleVariables,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.ip_sets {
        let mut object_171 = object.key("IPSets").start_object();
        for (key_172, value_173) in var_170 {
            {
                let mut object_174 = object_171.key(key_172).start_object();
                crate::json_ser::serialize_structure_crate_model_ip_set(
                    &mut object_174,
                    value_173,
                )?;
                object_174.finish();
            }
        }
        object_171.finish();
    }
    if let Some(var_175) = &input.port_sets {
        let mut object_176 = object.key("PortSets").start_object();
        for (key_177, value_178) in var_175 {
            {
                let mut object_179 = object_176.key(key_177).start_object();
                crate::json_ser::serialize_structure_crate_model_port_set(
                    &mut object_179,
                    value_178,
                )?;
                object_179.finish();
            }
        }
        object_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RulesSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.rules_string {
        object.key("RulesString").string(var_180.as_str());
    }
    if let Some(var_181) = &input.rules_source_list {
        let mut object_182 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source_list(
            &mut object_182,
            var_181,
        )?;
        object_182.finish();
    }
    if let Some(var_183) = &input.stateful_rules {
        let mut array_184 = object.key("StatefulRules").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule(
                    &mut object_186,
                    item_185,
                )?;
                object_186.finish();
            }
        }
        array_184.finish();
    }
    if let Some(var_187) = &input.stateless_rules_and_custom_actions {
        let mut object_188 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_rules_and_custom_actions(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRuleOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.rule_order {
        object.key("RuleOrder").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_destination_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogDestinationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.log_type {
        object.key("LogType").string(var_190.as_str());
    }
    if let Some(var_191) = &input.log_destination_type {
        object.key("LogDestinationType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.log_destination {
        let mut object_193 = object.key("LogDestination").start_object();
        for (key_194, value_195) in var_192 {
            {
                object_193.key(key_194).string(value_195.as_str());
            }
        }
        object_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.publish_metric_action {
        let mut object_197 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_publish_metric_action(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRuleGroupOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.action {
        object.key("Action").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.definition {
        let mut array_200 = object.key("Definition").start_array();
        for item_201 in var_199 {
            {
                array_200.value().string(item_201.as_str());
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_set(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortSet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.definition {
        let mut array_203 = object.key("Definition").start_array();
        for item_204 in var_202 {
            {
                array_203.value().string(item_204.as_str());
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RulesSourceList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.targets {
        let mut array_206 = object.key("Targets").start_array();
        for item_207 in var_205 {
            {
                array_206.value().string(item_207.as_str());
            }
        }
        array_206.finish();
    }
    if let Some(var_208) = &input.target_types {
        let mut array_209 = object.key("TargetTypes").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210.as_str());
            }
        }
        array_209.finish();
    }
    if let Some(var_211) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.action {
        object.key("Action").string(var_212.as_str());
    }
    if let Some(var_213) = &input.header {
        let mut object_214 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_header(&mut object_214, var_213)?;
        object_214.finish();
    }
    if let Some(var_215) = &input.rule_options {
        let mut array_216 = object.key("RuleOptions").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_option(
                    &mut object_218,
                    item_217,
                )?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rules_and_custom_actions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRulesAndCustomActions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.stateless_rules {
        let mut array_220 = object.key("StatelessRules").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule(
                    &mut object_222,
                    item_221,
                )?;
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.custom_actions {
        let mut array_224 = object.key("CustomActions").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(
                    &mut object_226,
                    item_225,
                )?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_publish_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublishMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.dimensions {
        let mut array_228 = object.key("Dimensions").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dimension(
                    &mut object_230,
                    item_229,
                )?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Header,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.protocol {
        object.key("Protocol").string(var_231.as_str());
    }
    if let Some(var_232) = &input.source {
        object.key("Source").string(var_232.as_str());
    }
    if let Some(var_233) = &input.source_port {
        object.key("SourcePort").string(var_233.as_str());
    }
    if let Some(var_234) = &input.direction {
        object.key("Direction").string(var_234.as_str());
    }
    if let Some(var_235) = &input.destination {
        object.key("Destination").string(var_235.as_str());
    }
    if let Some(var_236) = &input.destination_port {
        object.key("DestinationPort").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.keyword {
        object.key("Keyword").string(var_237.as_str());
    }
    if let Some(var_238) = &input.settings {
        let mut array_239 = object.key("Settings").start_array();
        for item_240 in var_238 {
            {
                array_239.value().string(item_240.as_str());
            }
        }
        array_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.rule_definition {
        let mut object_242 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_definition(&mut object_242, var_241)?;
        object_242.finish();
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Dimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.value {
        object.key("Value").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.match_attributes {
        let mut object_245 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_match_attributes(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    if let Some(var_246) = &input.actions {
        let mut array_247 = object.key("Actions").start_array();
        for item_248 in var_246 {
            {
                array_247.value().string(item_248.as_str());
            }
        }
        array_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_match_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.sources {
        let mut array_250 = object.key("Sources").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(
                    &mut object_252,
                    item_251,
                )?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.destinations {
        let mut array_254 = object.key("Destinations").start_array();
        for item_255 in var_253 {
            {
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(
                    &mut object_256,
                    item_255,
                )?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.source_ports {
        let mut array_258 = object.key("SourcePorts").start_array();
        for item_259 in var_257 {
            {
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_260,
                    item_259,
                )?;
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.destination_ports {
        let mut array_262 = object.key("DestinationPorts").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_264,
                    item_263,
                )?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.protocols {
        let mut array_266 = object.key("Protocols").start_array();
        for item_267 in var_265 {
            {
                array_266.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_267).into()),
                );
            }
        }
        array_266.finish();
    }
    if let Some(var_268) = &input.tcp_flags {
        let mut array_269 = object.key("TCPFlags").start_array();
        for item_270 in var_268 {
            {
                let mut object_271 = array_269.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tcp_flag_field(
                    &mut object_271,
                    item_270,
                )?;
                object_271.finish();
            }
        }
        array_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.address_definition {
        object.key("AddressDefinition").string(var_272.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_flag_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TcpFlagField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.flags {
        let mut array_274 = object.key("Flags").start_array();
        for item_275 in var_273 {
            {
                array_274.value().string(item_275.as_str());
            }
        }
        array_274.finish();
    }
    if let Some(var_276) = &input.masks {
        let mut array_277 = object.key("Masks").start_array();
        for item_278 in var_276 {
            {
                array_277.value().string(item_278.as_str());
            }
        }
        array_277.finish();
    }
    Ok(())
}
