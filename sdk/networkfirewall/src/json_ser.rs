// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_firewall_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFirewallPolicyInput,
) {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1);
    }
    if let Some(var_2) = &input.firewall_arn {
        object.key("FirewallArn").string(var_2);
    }
    if let Some(var_3) = &input.firewall_name {
        object.key("FirewallName").string(var_3);
    }
    if let Some(var_4) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_4);
    }
}

pub fn serialize_structure_associate_subnets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSubnetsInput,
) {
    if let Some(var_5) = &input.update_token {
        object.key("UpdateToken").string(var_5);
    }
    if let Some(var_6) = &input.firewall_arn {
        object.key("FirewallArn").string(var_6);
    }
    if let Some(var_7) = &input.firewall_name {
        object.key("FirewallName").string(var_7);
    }
    if let Some(var_8) = &input.subnet_mappings {
        let mut array_9 = object.key("SubnetMappings").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_subnet_mapping(&mut object_11, item_10);
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_create_firewall_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFirewallInput,
) {
    if let Some(var_12) = &input.firewall_name {
        object.key("FirewallName").string(var_12);
    }
    if let Some(var_13) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_13);
    }
    if let Some(var_14) = &input.vpc_id {
        object.key("VpcId").string(var_14);
    }
    if let Some(var_15) = &input.subnet_mappings {
        let mut array_16 = object.key("SubnetMappings").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_subnet_mapping(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if input.delete_protection {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    if input.subnet_change_protection {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    if input.firewall_policy_change_protection {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    if let Some(var_19) = &input.description {
        object.key("Description").string(var_19);
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_23, item_22);
                object_23.finish();
            }
        }
        array_21.finish();
    }
}

pub fn serialize_structure_create_firewall_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFirewallPolicyInput,
) {
    if let Some(var_24) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_24);
    }
    if let Some(var_25) = &input.firewall_policy {
        let mut object_26 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_firewall_policy(&mut object_26, var_25);
        object_26.finish();
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_31, item_30);
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_create_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRuleGroupInput,
) {
    if let Some(var_32) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_32);
    }
    if let Some(var_33) = &input.rule_group {
        let mut object_34 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_rule_group(&mut object_34, var_33);
        object_34.finish();
    }
    if let Some(var_35) = &input.rules {
        object.key("Rules").string(var_35);
    }
    if let Some(var_36) = &input.r#type {
        object.key("Type").string(var_36.as_str());
    }
    if let Some(var_37) = &input.description {
        object.key("Description").string(var_37);
    }
    if let Some(var_38) = &input.capacity {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    if let Some(var_39) = &input.tags {
        let mut array_40 = object.key("Tags").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_42, item_41);
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_delete_firewall_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallInput,
) {
    if let Some(var_43) = &input.firewall_name {
        object.key("FirewallName").string(var_43);
    }
    if let Some(var_44) = &input.firewall_arn {
        object.key("FirewallArn").string(var_44);
    }
}

pub fn serialize_structure_delete_firewall_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFirewallPolicyInput,
) {
    if let Some(var_45) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_45);
    }
    if let Some(var_46) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_46);
    }
}

pub fn serialize_structure_delete_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) {
    if let Some(var_47) = &input.resource_arn {
        object.key("ResourceArn").string(var_47);
    }
}

pub fn serialize_structure_delete_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRuleGroupInput,
) {
    if let Some(var_48) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_48);
    }
    if let Some(var_49) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_49);
    }
    if let Some(var_50) = &input.r#type {
        object.key("Type").string(var_50.as_str());
    }
}

pub fn serialize_structure_describe_firewall_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFirewallInput,
) {
    if let Some(var_51) = &input.firewall_name {
        object.key("FirewallName").string(var_51);
    }
    if let Some(var_52) = &input.firewall_arn {
        object.key("FirewallArn").string(var_52);
    }
}

pub fn serialize_structure_describe_firewall_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFirewallPolicyInput,
) {
    if let Some(var_53) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_53);
    }
    if let Some(var_54) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_54);
    }
}

pub fn serialize_structure_describe_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLoggingConfigurationInput,
) {
    if let Some(var_55) = &input.firewall_arn {
        object.key("FirewallArn").string(var_55);
    }
    if let Some(var_56) = &input.firewall_name {
        object.key("FirewallName").string(var_56);
    }
}

pub fn serialize_structure_describe_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourcePolicyInput,
) {
    if let Some(var_57) = &input.resource_arn {
        object.key("ResourceArn").string(var_57);
    }
}

pub fn serialize_structure_describe_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRuleGroupInput,
) {
    if let Some(var_58) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_58);
    }
    if let Some(var_59) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_59);
    }
    if let Some(var_60) = &input.r#type {
        object.key("Type").string(var_60.as_str());
    }
}

pub fn serialize_structure_disassociate_subnets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateSubnetsInput,
) {
    if let Some(var_61) = &input.update_token {
        object.key("UpdateToken").string(var_61);
    }
    if let Some(var_62) = &input.firewall_arn {
        object.key("FirewallArn").string(var_62);
    }
    if let Some(var_63) = &input.firewall_name {
        object.key("FirewallName").string(var_63);
    }
    if let Some(var_64) = &input.subnet_ids {
        let mut array_65 = object.key("SubnetIds").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66);
            }
        }
        array_65.finish();
    }
}

pub fn serialize_structure_list_firewall_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFirewallPoliciesInput,
) {
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67);
    }
    if let Some(var_68) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_68).into()),
        );
    }
}

pub fn serialize_structure_list_firewalls_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFirewallsInput,
) {
    if let Some(var_69) = &input.next_token {
        object.key("NextToken").string(var_69);
    }
    if let Some(var_70) = &input.vpc_ids {
        let mut array_71 = object.key("VpcIds").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72);
            }
        }
        array_71.finish();
    }
    if let Some(var_73) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_73).into()),
        );
    }
}

pub fn serialize_structure_list_rule_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRuleGroupsInput,
) {
    if let Some(var_74) = &input.next_token {
        object.key("NextToken").string(var_74);
    }
    if let Some(var_75) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_75).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76);
    }
    if let Some(var_77) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.resource_arn {
        object.key("ResourceArn").string(var_78);
    }
}

pub fn serialize_structure_put_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) {
    if let Some(var_79) = &input.resource_arn {
        object.key("ResourceArn").string(var_79);
    }
    if let Some(var_80) = &input.policy {
        object.key("Policy").string(var_80);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_81) = &input.resource_arn {
        object.key("ResourceArn").string(var_81);
    }
    if let Some(var_82) = &input.tags {
        let mut array_83 = object.key("Tags").start_array();
        for item_84 in var_82 {
            {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_85, item_84);
                object_85.finish();
            }
        }
        array_83.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_86) = &input.resource_arn {
        object.key("ResourceArn").string(var_86);
    }
    if let Some(var_87) = &input.tag_keys {
        let mut array_88 = object.key("TagKeys").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89);
            }
        }
        array_88.finish();
    }
}

pub fn serialize_structure_update_firewall_delete_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallDeleteProtectionInput,
) {
    if let Some(var_90) = &input.update_token {
        object.key("UpdateToken").string(var_90);
    }
    if let Some(var_91) = &input.firewall_arn {
        object.key("FirewallArn").string(var_91);
    }
    if let Some(var_92) = &input.firewall_name {
        object.key("FirewallName").string(var_92);
    }
    {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
}

pub fn serialize_structure_update_firewall_description_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallDescriptionInput,
) {
    if let Some(var_93) = &input.update_token {
        object.key("UpdateToken").string(var_93);
    }
    if let Some(var_94) = &input.firewall_arn {
        object.key("FirewallArn").string(var_94);
    }
    if let Some(var_95) = &input.firewall_name {
        object.key("FirewallName").string(var_95);
    }
    if let Some(var_96) = &input.description {
        object.key("Description").string(var_96);
    }
}

pub fn serialize_structure_update_firewall_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallPolicyInput,
) {
    if let Some(var_97) = &input.update_token {
        object.key("UpdateToken").string(var_97);
    }
    if let Some(var_98) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_98);
    }
    if let Some(var_99) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_99);
    }
    if let Some(var_100) = &input.firewall_policy {
        let mut object_101 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_firewall_policy(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.description {
        object.key("Description").string(var_102);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_update_firewall_policy_change_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFirewallPolicyChangeProtectionInput,
) {
    if let Some(var_103) = &input.update_token {
        object.key("UpdateToken").string(var_103);
    }
    if let Some(var_104) = &input.firewall_arn {
        object.key("FirewallArn").string(var_104);
    }
    if let Some(var_105) = &input.firewall_name {
        object.key("FirewallName").string(var_105);
    }
    {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
}

pub fn serialize_structure_update_logging_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLoggingConfigurationInput,
) {
    if let Some(var_106) = &input.firewall_arn {
        object.key("FirewallArn").string(var_106);
    }
    if let Some(var_107) = &input.firewall_name {
        object.key("FirewallName").string(var_107);
    }
    if let Some(var_108) = &input.logging_configuration {
        let mut object_109 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_logging_configuration(&mut object_109, var_108);
        object_109.finish();
    }
}

pub fn serialize_structure_update_rule_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRuleGroupInput,
) {
    if let Some(var_110) = &input.update_token {
        object.key("UpdateToken").string(var_110);
    }
    if let Some(var_111) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_111);
    }
    if let Some(var_112) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_112);
    }
    if let Some(var_113) = &input.rule_group {
        let mut object_114 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_rule_group(&mut object_114, var_113);
        object_114.finish();
    }
    if let Some(var_115) = &input.rules {
        object.key("Rules").string(var_115);
    }
    if let Some(var_116) = &input.r#type {
        object.key("Type").string(var_116.as_str());
    }
    if let Some(var_117) = &input.description {
        object.key("Description").string(var_117);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_update_subnet_change_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSubnetChangeProtectionInput,
) {
    if let Some(var_118) = &input.update_token {
        object.key("UpdateToken").string(var_118);
    }
    if let Some(var_119) = &input.firewall_arn {
        object.key("FirewallArn").string(var_119);
    }
    if let Some(var_120) = &input.firewall_name {
        object.key("FirewallName").string(var_120);
    }
    {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
}

pub fn serialize_structure_subnet_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SubnetMapping,
) {
    if let Some(var_121) = &input.subnet_id {
        object.key("SubnetId").string(var_121);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_122) = &input.key {
        object.key("Key").string(var_122);
    }
    if let Some(var_123) = &input.value {
        object.key("Value").string(var_123);
    }
}

pub fn serialize_structure_firewall_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicy,
) {
    if let Some(var_124) = &input.stateless_rule_group_references {
        let mut array_125 = object.key("StatelessRuleGroupReferences").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_stateless_rule_group_reference(
                    &mut object_127,
                    item_126,
                );
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if let Some(var_128) = &input.stateless_default_actions {
        let mut array_129 = object.key("StatelessDefaultActions").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130);
            }
        }
        array_129.finish();
    }
    if let Some(var_131) = &input.stateless_fragment_default_actions {
        let mut array_132 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_133 in var_131 {
            {
                array_132.value().string(item_133);
            }
        }
        array_132.finish();
    }
    if let Some(var_134) = &input.stateless_custom_actions {
        let mut array_135 = object.key("StatelessCustomActions").start_array();
        for item_136 in var_134 {
            {
                let mut object_137 = array_135.value().start_object();
                crate::json_ser::serialize_structure_custom_action(&mut object_137, item_136);
                object_137.finish();
            }
        }
        array_135.finish();
    }
    if let Some(var_138) = &input.stateful_rule_group_references {
        let mut array_139 = object.key("StatefulRuleGroupReferences").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_stateful_rule_group_reference(
                    &mut object_141,
                    item_140,
                );
                object_141.finish();
            }
        }
        array_139.finish();
    }
}

pub fn serialize_structure_rule_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroup,
) {
    if let Some(var_142) = &input.rule_variables {
        let mut object_143 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_rule_variables(&mut object_143, var_142);
        object_143.finish();
    }
    if let Some(var_144) = &input.rules_source {
        let mut object_145 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_rules_source(&mut object_145, var_144);
        object_145.finish();
    }
}

pub fn serialize_structure_logging_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfiguration,
) {
    if let Some(var_146) = &input.log_destination_configs {
        let mut array_147 = object.key("LogDestinationConfigs").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_log_destination_config(
                    &mut object_149,
                    item_148,
                );
                object_149.finish();
            }
        }
        array_147.finish();
    }
}

pub fn serialize_structure_stateless_rule_group_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRuleGroupReference,
) {
    if let Some(var_150) = &input.resource_arn {
        object.key("ResourceArn").string(var_150);
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
}

pub fn serialize_structure_custom_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomAction,
) {
    if let Some(var_151) = &input.action_name {
        object.key("ActionName").string(var_151);
    }
    if let Some(var_152) = &input.action_definition {
        let mut object_153 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_action_definition(&mut object_153, var_152);
        object_153.finish();
    }
}

pub fn serialize_structure_stateful_rule_group_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRuleGroupReference,
) {
    if let Some(var_154) = &input.resource_arn {
        object.key("ResourceArn").string(var_154);
    }
}

pub fn serialize_structure_rule_variables(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleVariables,
) {
    if let Some(var_155) = &input.ip_sets {
        let mut object_156 = object.key("IPSets").start_object();
        for (key_157, value_158) in var_155 {
            {
                let mut object_159 = object_156.key(key_157).start_object();
                crate::json_ser::serialize_structure_ip_set(&mut object_159, value_158);
                object_159.finish();
            }
        }
        object_156.finish();
    }
    if let Some(var_160) = &input.port_sets {
        let mut object_161 = object.key("PortSets").start_object();
        for (key_162, value_163) in var_160 {
            {
                let mut object_164 = object_161.key(key_162).start_object();
                crate::json_ser::serialize_structure_port_set(&mut object_164, value_163);
                object_164.finish();
            }
        }
        object_161.finish();
    }
}

pub fn serialize_structure_rules_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RulesSource,
) {
    if let Some(var_165) = &input.rules_string {
        object.key("RulesString").string(var_165);
    }
    if let Some(var_166) = &input.rules_source_list {
        let mut object_167 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_rules_source_list(&mut object_167, var_166);
        object_167.finish();
    }
    if let Some(var_168) = &input.stateful_rules {
        let mut array_169 = object.key("StatefulRules").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_stateful_rule(&mut object_171, item_170);
                object_171.finish();
            }
        }
        array_169.finish();
    }
    if let Some(var_172) = &input.stateless_rules_and_custom_actions {
        let mut object_173 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_stateless_rules_and_custom_actions(
            &mut object_173,
            var_172,
        );
        object_173.finish();
    }
}

pub fn serialize_structure_log_destination_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogDestinationConfig,
) {
    if let Some(var_174) = &input.log_type {
        object.key("LogType").string(var_174.as_str());
    }
    if let Some(var_175) = &input.log_destination_type {
        object.key("LogDestinationType").string(var_175.as_str());
    }
    if let Some(var_176) = &input.log_destination {
        let mut object_177 = object.key("LogDestination").start_object();
        for (key_178, value_179) in var_176 {
            {
                object_177.key(key_178).string(value_179);
            }
        }
        object_177.finish();
    }
}

pub fn serialize_structure_action_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionDefinition,
) {
    if let Some(var_180) = &input.publish_metric_action {
        let mut object_181 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_publish_metric_action(&mut object_181, var_180);
        object_181.finish();
    }
}

pub fn serialize_structure_ip_set(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpSet,
) {
    if let Some(var_182) = &input.definition {
        let mut array_183 = object.key("Definition").start_array();
        for item_184 in var_182 {
            {
                array_183.value().string(item_184);
            }
        }
        array_183.finish();
    }
}

pub fn serialize_structure_port_set(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortSet,
) {
    if let Some(var_185) = &input.definition {
        let mut array_186 = object.key("Definition").start_array();
        for item_187 in var_185 {
            {
                array_186.value().string(item_187);
            }
        }
        array_186.finish();
    }
}

pub fn serialize_structure_rules_source_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RulesSourceList,
) {
    if let Some(var_188) = &input.targets {
        let mut array_189 = object.key("Targets").start_array();
        for item_190 in var_188 {
            {
                array_189.value().string(item_190);
            }
        }
        array_189.finish();
    }
    if let Some(var_191) = &input.target_types {
        let mut array_192 = object.key("TargetTypes").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193.as_str());
            }
        }
        array_192.finish();
    }
    if let Some(var_194) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_194.as_str());
    }
}

pub fn serialize_structure_stateful_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatefulRule,
) {
    if let Some(var_195) = &input.action {
        object.key("Action").string(var_195.as_str());
    }
    if let Some(var_196) = &input.header {
        let mut object_197 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_header(&mut object_197, var_196);
        object_197.finish();
    }
    if let Some(var_198) = &input.rule_options {
        let mut array_199 = object.key("RuleOptions").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_rule_option(&mut object_201, item_200);
                object_201.finish();
            }
        }
        array_199.finish();
    }
}

pub fn serialize_structure_stateless_rules_and_custom_actions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRulesAndCustomActions,
) {
    if let Some(var_202) = &input.stateless_rules {
        let mut array_203 = object.key("StatelessRules").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_stateless_rule(&mut object_205, item_204);
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.custom_actions {
        let mut array_207 = object.key("CustomActions").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_custom_action(&mut object_209, item_208);
                object_209.finish();
            }
        }
        array_207.finish();
    }
}

pub fn serialize_structure_publish_metric_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublishMetricAction,
) {
    if let Some(var_210) = &input.dimensions {
        let mut array_211 = object.key("Dimensions").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_dimension(&mut object_213, item_212);
                object_213.finish();
            }
        }
        array_211.finish();
    }
}

pub fn serialize_structure_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Header,
) {
    if let Some(var_214) = &input.protocol {
        object.key("Protocol").string(var_214.as_str());
    }
    if let Some(var_215) = &input.source {
        object.key("Source").string(var_215);
    }
    if let Some(var_216) = &input.source_port {
        object.key("SourcePort").string(var_216);
    }
    if let Some(var_217) = &input.direction {
        object.key("Direction").string(var_217.as_str());
    }
    if let Some(var_218) = &input.destination {
        object.key("Destination").string(var_218);
    }
    if let Some(var_219) = &input.destination_port {
        object.key("DestinationPort").string(var_219);
    }
}

pub fn serialize_structure_rule_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleOption,
) {
    if let Some(var_220) = &input.keyword {
        object.key("Keyword").string(var_220);
    }
    if let Some(var_221) = &input.settings {
        let mut array_222 = object.key("Settings").start_array();
        for item_223 in var_221 {
            {
                array_222.value().string(item_223);
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_stateless_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessRule,
) {
    if let Some(var_224) = &input.rule_definition {
        let mut object_225 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_rule_definition(&mut object_225, var_224);
        object_225.finish();
    }
    {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
}

pub fn serialize_structure_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Dimension,
) {
    if let Some(var_226) = &input.value {
        object.key("Value").string(var_226);
    }
}

pub fn serialize_structure_rule_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleDefinition,
) {
    if let Some(var_227) = &input.match_attributes {
        let mut object_228 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_match_attributes(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.actions {
        let mut array_230 = object.key("Actions").start_array();
        for item_231 in var_229 {
            {
                array_230.value().string(item_231);
            }
        }
        array_230.finish();
    }
}

pub fn serialize_structure_match_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchAttributes,
) {
    if let Some(var_232) = &input.sources {
        let mut array_233 = object.key("Sources").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_address(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.destinations {
        let mut array_237 = object.key("Destinations").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_address(&mut object_239, item_238);
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.source_ports {
        let mut array_241 = object.key("SourcePorts").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_243, item_242);
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.destination_ports {
        let mut array_245 = object.key("DestinationPorts").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_247, item_246);
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.protocols {
        let mut array_249 = object.key("Protocols").start_array();
        for item_250 in var_248 {
            {
                array_249.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_250).into()),
                );
            }
        }
        array_249.finish();
    }
    if let Some(var_251) = &input.tcp_flags {
        let mut array_252 = object.key("TCPFlags").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_tcp_flag_field(&mut object_254, item_253);
                object_254.finish();
            }
        }
        array_252.finish();
    }
}

pub fn serialize_structure_address(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) {
    if let Some(var_255) = &input.address_definition {
        object.key("AddressDefinition").string(var_255);
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
}

pub fn serialize_structure_tcp_flag_field(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TcpFlagField,
) {
    if let Some(var_256) = &input.flags {
        let mut array_257 = object.key("Flags").start_array();
        for item_258 in var_256 {
            {
                array_257.value().string(item_258.as_str());
            }
        }
        array_257.finish();
    }
    if let Some(var_259) = &input.masks {
        let mut array_260 = object.key("Masks").start_array();
        for item_261 in var_259 {
            {
                array_260.value().string(item_261.as_str());
            }
        }
        array_260.finish();
    }
}
