// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_rule_group_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_rule_group::UpdateRuleGroupInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rule_group {
        #[allow(unused_mut)]
        let mut object_5 = object.key("RuleGroup").start_object();
        crate::protocol_serde::shape_rule_group::ser_rule_group(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.rules {
        object.key("Rules").string(var_6.as_str());
    }
    if let Some(var_7) = &input.r#type {
        object.key("Type").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("Description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.dry_run {
        object.key("DryRun").boolean(*var_9);
    }
    if let Some(var_10) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.source_metadata {
        #[allow(unused_mut)]
        let mut object_13 = object.key("SourceMetadata").start_object();
        crate::protocol_serde::shape_source_metadata::ser_source_metadata(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
