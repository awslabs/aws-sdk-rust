// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_rule_group_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_rule_group::CreateRuleGroupInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rule_group {
        #[allow(unused_mut)]
        let mut object_3 = object.key("RuleGroup").start_object();
        crate::protocol_serde::shape_rule_group::ser_rule_group(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.rules {
        object.key("Rules").string(var_4.as_str());
    }
    if let Some(var_5) = &input.r#type {
        object.key("Type").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("Description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.capacity {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.dry_run {
        object.key("DryRun").boolean(*var_12);
    }
    if let Some(var_13) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.source_metadata {
        #[allow(unused_mut)]
        let mut object_16 = object.key("SourceMetadata").start_object();
        crate::protocol_serde::shape_source_metadata::ser_source_metadata(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
