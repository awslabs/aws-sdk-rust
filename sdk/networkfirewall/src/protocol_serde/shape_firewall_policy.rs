// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_firewall_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FirewallPolicy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.stateless_rule_group_references {
        let mut array_2 = object.key("StatelessRuleGroupReferences").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_stateless_rule_group_reference::ser_stateless_rule_group_reference(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.stateless_default_actions {
        let mut array_6 = object.key("StatelessDefaultActions").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.stateless_fragment_default_actions {
        let mut array_9 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.stateless_custom_actions {
        let mut array_12 = object.key("StatelessCustomActions").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_custom_action::ser_custom_action(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.stateful_rule_group_references {
        let mut array_16 = object.key("StatefulRuleGroupReferences").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_stateful_rule_group_reference::ser_stateful_rule_group_reference(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.stateful_default_actions {
        let mut array_20 = object.key("StatefulDefaultActions").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.stateful_engine_options {
        #[allow(unused_mut)]
        let mut object_23 = object.key("StatefulEngineOptions").start_object();
        crate::protocol_serde::shape_stateful_engine_options::ser_stateful_engine_options(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    Ok(())
}

pub(crate) fn de_firewall_policy<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::FirewallPolicy>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FirewallPolicyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "StatelessRuleGroupReferences" => {
                                builder = builder.set_stateless_rule_group_references(
                                    crate::protocol_serde::shape_stateless_rule_group_references::de_stateless_rule_group_references(tokens)?
                                );
                            }
                            "StatelessDefaultActions" => {
                                builder = builder.set_stateless_default_actions(
                                    crate::protocol_serde::shape_stateless_actions::de_stateless_actions(tokens)?
                                );
                            }
                            "StatelessFragmentDefaultActions" => {
                                builder = builder.set_stateless_fragment_default_actions(
                                    crate::protocol_serde::shape_stateless_actions::de_stateless_actions(tokens)?
                                );
                            }
                            "StatelessCustomActions" => {
                                builder = builder.set_stateless_custom_actions(
                                    crate::protocol_serde::shape_custom_actions::de_custom_actions(
                                        tokens,
                                    )?,
                                );
                            }
                            "StatefulRuleGroupReferences" => {
                                builder = builder.set_stateful_rule_group_references(
                                    crate::protocol_serde::shape_stateful_rule_group_references::de_stateful_rule_group_references(tokens)?
                                );
                            }
                            "StatefulDefaultActions" => {
                                builder = builder.set_stateful_default_actions(
                                    crate::protocol_serde::shape_stateful_actions::de_stateful_actions(tokens)?
                                );
                            }
                            "StatefulEngineOptions" => {
                                builder = builder.set_stateful_engine_options(
                                    crate::protocol_serde::shape_stateful_engine_options::de_stateful_engine_options(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
