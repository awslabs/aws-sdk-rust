// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_firewall_policy(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FirewallPolicy,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stateless_rule_group_references {
        let mut array_2 = object.key("StatelessRuleGroupReferences").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_stateless_rule_group_reference::ser_stateless_rule_group_reference(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    {
        let mut array_5 = object.key("StatelessDefaultActions").start_array();
        for item_6 in &input.stateless_default_actions {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    {
        let mut array_7 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_8 in &input.stateless_fragment_default_actions {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.stateless_custom_actions {
        let mut array_10 = object.key("StatelessCustomActions").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_custom_action::ser_custom_action(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.stateful_rule_group_references {
        let mut array_14 = object.key("StatefulRuleGroupReferences").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_stateful_rule_group_reference::ser_stateful_rule_group_reference(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.stateful_default_actions {
        let mut array_18 = object.key("StatefulDefaultActions").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.stateful_engine_options {
        #[allow(unused_mut)]
        let mut object_21 = object.key("StatefulEngineOptions").start_object();
        crate::protocol_serde::shape_stateful_engine_options::ser_stateful_engine_options(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.tls_inspection_configuration_arn {
        object.key("TLSInspectionConfigurationArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.policy_variables {
        #[allow(unused_mut)]
        let mut object_24 = object.key("PolicyVariables").start_object();
        crate::protocol_serde::shape_policy_variables::ser_policy_variables(&mut object_24, var_23)?;
        object_24.finish();
    }
    Ok(())
}

pub(crate) fn de_firewall_policy<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::FirewallPolicy>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FirewallPolicyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StatelessRuleGroupReferences" => {
                            builder = builder.set_stateless_rule_group_references(
                                crate::protocol_serde::shape_stateless_rule_group_references::de_stateless_rule_group_references(tokens)?,
                            );
                        }
                        "StatelessDefaultActions" => {
                            builder =
                                builder.set_stateless_default_actions(crate::protocol_serde::shape_stateless_actions::de_stateless_actions(tokens)?);
                        }
                        "StatelessFragmentDefaultActions" => {
                            builder = builder.set_stateless_fragment_default_actions(
                                crate::protocol_serde::shape_stateless_actions::de_stateless_actions(tokens)?,
                            );
                        }
                        "StatelessCustomActions" => {
                            builder = builder.set_stateless_custom_actions(crate::protocol_serde::shape_custom_actions::de_custom_actions(tokens)?);
                        }
                        "StatefulRuleGroupReferences" => {
                            builder = builder.set_stateful_rule_group_references(
                                crate::protocol_serde::shape_stateful_rule_group_references::de_stateful_rule_group_references(tokens)?,
                            );
                        }
                        "StatefulDefaultActions" => {
                            builder =
                                builder.set_stateful_default_actions(crate::protocol_serde::shape_stateful_actions::de_stateful_actions(tokens)?);
                        }
                        "StatefulEngineOptions" => {
                            builder = builder.set_stateful_engine_options(
                                crate::protocol_serde::shape_stateful_engine_options::de_stateful_engine_options(tokens)?,
                            );
                        }
                        "TLSInspectionConfigurationArn" => {
                            builder = builder.set_tls_inspection_configuration_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PolicyVariables" => {
                            builder = builder.set_policy_variables(crate::protocol_serde::shape_policy_variables::de_policy_variables(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::firewall_policy_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
