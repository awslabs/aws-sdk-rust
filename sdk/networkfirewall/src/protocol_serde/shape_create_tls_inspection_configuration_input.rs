// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_tls_inspection_configuration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_tls_inspection_configuration::CreateTlsInspectionConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.tls_inspection_configuration_name {
        object.key("TLSInspectionConfigurationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.tls_inspection_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("TLSInspectionConfiguration").start_object();
        crate::protocol_serde::shape_tls_inspection_configuration::ser_tls_inspection_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
