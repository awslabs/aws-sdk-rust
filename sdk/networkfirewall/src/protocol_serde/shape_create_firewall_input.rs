// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_firewall_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_firewall::CreateFirewallInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.firewall_name {
        object.key("FirewallName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vpc_id {
        object.key("VpcId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.subnet_mappings {
        let mut array_5 = object.key("SubnetMappings").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_subnet_mapping::ser_subnet_mapping(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.delete_protection {
        object.key("DeleteProtection").boolean(*var_8);
    }
    if let Some(var_9) = &input.subnet_change_protection {
        object.key("SubnetChangeProtection").boolean(*var_9);
    }
    if let Some(var_10) = &input.firewall_policy_change_protection {
        object.key("FirewallPolicyChangeProtection").boolean(*var_10);
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
