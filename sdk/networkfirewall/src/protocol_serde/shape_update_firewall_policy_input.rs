// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_firewall_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_firewall_policy::UpdateFirewallPolicyInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.firewall_policy {
        #[allow(unused_mut)]
        let mut object_5 = object.key("FirewallPolicy").start_object();
        crate::protocol_serde::shape_firewall_policy::ser_firewall_policy(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("Description").string(var_6.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_7) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    Ok(())
}
