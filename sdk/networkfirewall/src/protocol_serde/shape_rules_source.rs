// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rules_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RulesSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.rules_string {
        object.key("RulesString").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rules_source_list {
        #[allow(unused_mut)]
        let mut object_3 = object.key("RulesSourceList").start_object();
        crate::protocol_serde::shape_rules_source_list::ser_rules_source_list(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.stateful_rules {
        let mut array_5 = object.key("StatefulRules").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_stateful_rule::ser_stateful_rule(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.stateless_rules_and_custom_actions {
        #[allow(unused_mut)]
        let mut object_9 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::protocol_serde::shape_stateless_rules_and_custom_actions::ser_stateless_rules_and_custom_actions(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_rules_source<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::RulesSource>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RulesSourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "RulesString" => {
                                builder = builder.set_rules_string(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RulesSourceList" => {
                                builder = builder.set_rules_source_list(
                                    crate::protocol_serde::shape_rules_source_list::de_rules_source_list(tokens)?
                                );
                            }
                            "StatefulRules" => {
                                builder = builder.set_stateful_rules(
                                    crate::protocol_serde::shape_stateful_rules::de_stateful_rules(
                                        tokens,
                                    )?,
                                );
                            }
                            "StatelessRulesAndCustomActions" => {
                                builder = builder.set_stateless_rules_and_custom_actions(
                                    crate::protocol_serde::shape_stateless_rules_and_custom_actions::de_stateless_rules_and_custom_actions(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
