// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_match_attributes(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MatchAttributes,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.sources {
        let mut array_2 = object.key("Sources").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_address::ser_address(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.destinations {
        let mut array_6 = object.key("Destinations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_address::ser_address(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.source_ports {
        let mut array_10 = object.key("SourcePorts").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_port_range::ser_port_range(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.destination_ports {
        let mut array_14 = object.key("DestinationPorts").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_port_range::ser_port_range(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.protocols {
        let mut array_18 = object.key("Protocols").start_array();
        for item_19 in var_17 {
            {
                array_18.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_19).into()),
                );
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.tcp_flags {
        let mut array_21 = object.key("TCPFlags").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_tcp_flag_field::ser_tcp_flag_field(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub(crate) fn de_match_attributes<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MatchAttributes>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MatchAttributesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Sources" => {
                            builder = builder.set_sources(crate::protocol_serde::shape_addresses::de_addresses(tokens)?);
                        }
                        "Destinations" => {
                            builder = builder.set_destinations(crate::protocol_serde::shape_addresses::de_addresses(tokens)?);
                        }
                        "SourcePorts" => {
                            builder = builder.set_source_ports(crate::protocol_serde::shape_port_ranges::de_port_ranges(tokens)?);
                        }
                        "DestinationPorts" => {
                            builder = builder.set_destination_ports(crate::protocol_serde::shape_port_ranges::de_port_ranges(tokens)?);
                        }
                        "Protocols" => {
                            builder = builder.set_protocols(crate::protocol_serde::shape_protocol_numbers::de_protocol_numbers(tokens)?);
                        }
                        "TCPFlags" => {
                            builder = builder.set_tcp_flags(crate::protocol_serde::shape_tcp_flags::de_tcp_flags(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
