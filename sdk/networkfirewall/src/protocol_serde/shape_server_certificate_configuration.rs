// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_server_certificate_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ServerCertificateConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.server_certificates {
        let mut array_2 = object.key("ServerCertificates").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_server_certificate::ser_server_certificate(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.scopes {
        let mut array_6 = object.key("Scopes").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_server_certificate_scope::ser_server_certificate_scope(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.certificate_authority_arn {
        object.key("CertificateAuthorityArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.check_certificate_revocation_status {
        #[allow(unused_mut)]
        let mut object_11 = object.key("CheckCertificateRevocationStatus").start_object();
        crate::protocol_serde::shape_check_certificate_revocation_status_actions::ser_check_certificate_revocation_status_actions(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_server_certificate_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ServerCertificateConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ServerCertificateConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ServerCertificates" => {
                            builder =
                                builder.set_server_certificates(crate::protocol_serde::shape_server_certificates::de_server_certificates(tokens)?);
                        }
                        "Scopes" => {
                            builder = builder.set_scopes(crate::protocol_serde::shape_server_certificate_scopes::de_server_certificate_scopes(
                                tokens,
                            )?);
                        }
                        "CertificateAuthorityArn" => {
                            builder = builder.set_certificate_authority_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CheckCertificateRevocationStatus" => {
                            builder = builder.set_check_certificate_revocation_status(
                                    crate::protocol_serde::shape_check_certificate_revocation_status_actions::de_check_certificate_revocation_status_actions(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
