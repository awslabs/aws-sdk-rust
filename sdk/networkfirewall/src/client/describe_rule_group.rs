// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeRuleGroup`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_group_name(impl Into<String>)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::rule_group_name) / [`set_rule_group_name(Option<String>)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::set_rule_group_name): <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>  <p>You must specify the ARN or the name, and you can specify both. </p>
    ///   - [`rule_group_arn(impl Into<String>)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::rule_group_arn) / [`set_rule_group_arn(Option<String>)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::set_rule_group_arn): <p>The Amazon Resource Name (ARN) of the rule group.</p>  <p>You must specify the ARN or the name, and you can specify both. </p>
    ///   - [`r#type(RuleGroupType)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::type) / [`set_type(Option<RuleGroupType>)`](crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::set_type): <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p> <note>   <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>  </note>
    /// - On success, responds with [`DescribeRuleGroupOutput`](crate::operation::describe_rule_group::DescribeRuleGroupOutput) with field(s):
    ///   - [`update_token(Option<String>)`](crate::operation::describe_rule_group::DescribeRuleGroupOutput::update_token): <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. </p>  <p>To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
    ///   - [`rule_group(Option<RuleGroup>)`](crate::operation::describe_rule_group::DescribeRuleGroupOutput::rule_group): <p>The object that defines the rules in a rule group. This, along with <code>RuleGroupResponse</code>, define the rule group. You can retrieve all objects for a rule group by calling <code>DescribeRuleGroup</code>. </p>  <p>Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. </p>  <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>
    ///   - [`rule_group_response(Option<RuleGroupResponse>)`](crate::operation::describe_rule_group::DescribeRuleGroupOutput::rule_group_response): <p>The high-level properties of a rule group. This, along with the <code>RuleGroup</code>, define the rule group. You can retrieve all objects for a rule group by calling <code>DescribeRuleGroup</code>. </p>
    /// - On failure, responds with [`SdkError<DescribeRuleGroupError>`](crate::operation::describe_rule_group::DescribeRuleGroupError)
    pub fn describe_rule_group(
        &self,
    ) -> crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder {
        crate::operation::describe_rule_group::builders::DescribeRuleGroupFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
