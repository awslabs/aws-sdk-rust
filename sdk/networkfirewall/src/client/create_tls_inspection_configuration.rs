// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTLSInspectionConfiguration`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tls_inspection_configuration_name(impl Into<String>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::tls_inspection_configuration_name) / [`set_tls_inspection_configuration_name(Option<String>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::set_tls_inspection_configuration_name):<br>required: **true**<br><p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p><br>
    ///   - [`tls_inspection_configuration(TlsInspectionConfiguration)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::tls_inspection_configuration) / [`set_tls_inspection_configuration(Option<TlsInspectionConfiguration>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::set_tls_inspection_configuration):<br>required: **true**<br><p>The object that defines a TLS inspection configuration. This, along with <code>TLSInspectionConfigurationResponse</code>, define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code>. </p>  <p>Network Firewall uses a TLS inspection configuration to decrypt traffic. Network Firewall re-encrypts the traffic before sending it to its destination.</p>  <p>To use a TLS inspection configuration, you add it to a new Network Firewall firewall policy, then you apply the firewall policy to a firewall. Network Firewall acts as a proxy service to decrypt and inspect the traffic traveling through your firewalls. You can reference a TLS inspection configuration from more than one firewall policy, and you can use a firewall policy in more than one firewall. For more information about using TLS inspection configurations, see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html">Inspecting SSL/TLS traffic with TLS inspection configurations</a> in the <i>Network Firewall Developer Guide</i>.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::set_description):<br>required: **false**<br><p>A description of the TLS inspection configuration. </p><br>
    ///   - [`tags(Tag)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::set_tags):<br>required: **false**<br><p>The key:value pairs to associate with the resource.</p><br>
    ///   - [`encryption_configuration(EncryptionConfiguration)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::encryption_configuration) / [`set_encryption_configuration(Option<EncryptionConfiguration>)`](crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::set_encryption_configuration):<br>required: **false**<br><p>A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html">Encryption at rest with Amazon Web Services Key Managment Service</a> in the <i>Network Firewall Developer Guide</i>.</p><br>
    /// - On success, responds with [`CreateTlsInspectionConfigurationOutput`](crate::operation::create_tls_inspection_configuration::CreateTlsInspectionConfigurationOutput) with field(s):
    ///   - [`update_token(String)`](crate::operation::create_tls_inspection_configuration::CreateTlsInspectionConfigurationOutput::update_token): <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the TLS inspection configuration. The token marks the state of the TLS inspection configuration resource at the time of the request. </p>  <p>To make changes to the TLS inspection configuration, you provide the token in your request. Network Firewall uses the token to ensure that the TLS inspection configuration hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the TLS inspection configuration again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
    ///   - [`tls_inspection_configuration_response(Option<TlsInspectionConfigurationResponse>)`](crate::operation::create_tls_inspection_configuration::CreateTlsInspectionConfigurationOutput::tls_inspection_configuration_response): <p>The high-level properties of a TLS inspection configuration. This, along with the <code>TLSInspectionConfiguration</code>, define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code>. </p>
    /// - On failure, responds with [`SdkError<CreateTLSInspectionConfigurationError>`](crate::operation::create_tls_inspection_configuration::CreateTLSInspectionConfigurationError)
    pub fn create_tls_inspection_configuration(
        &self,
    ) -> crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder {
        crate::operation::create_tls_inspection_configuration::builders::CreateTLSInspectionConfigurationFluentBuilder::new(self.handle.clone())
    }
}
