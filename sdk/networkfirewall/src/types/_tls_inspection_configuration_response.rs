// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The high-level properties of a TLS inspection configuration. This, along with the <code>TLSInspectionConfiguration</code>, define the TLS inspection configuration. You can retrieve all objects for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TlsInspectionConfigurationResponse {
    /// <p>The Amazon Resource Name (ARN) of the TLS inspection configuration.</p>
    pub tls_inspection_configuration_arn: ::std::string::String,
    /// <p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p>
    pub tls_inspection_configuration_name: ::std::string::String,
    /// <p>A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.</p>
    pub tls_inspection_configuration_id: ::std::string::String,
    /// <p>Detailed information about the current status of a <code>TLSInspectionConfiguration</code>. You can retrieve this for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code> and providing the TLS inspection configuration name and ARN.</p>
    pub tls_inspection_configuration_status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>A description of the TLS inspection configuration. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The key:value pairs to associate with the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The last time that the TLS inspection configuration was changed.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of firewall policies that use this TLS inspection configuration.</p>
    pub number_of_associations: ::std::option::Option<i32>,
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// <p>A list of the certificates associated with the TLS inspection configuration.</p>
    pub certificates: ::std::option::Option<::std::vec::Vec<crate::types::TlsCertificateData>>,
    /// <p>Contains metadata about an Certificate Manager certificate.</p>
    pub certificate_authority: ::std::option::Option<crate::types::TlsCertificateData>,
}
impl TlsInspectionConfigurationResponse {
    /// <p>The Amazon Resource Name (ARN) of the TLS inspection configuration.</p>
    pub fn tls_inspection_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.tls_inspection_configuration_arn.deref()
    }
    /// <p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p>
    pub fn tls_inspection_configuration_name(&self) -> &str {
        use std::ops::Deref;
        self.tls_inspection_configuration_name.deref()
    }
    /// <p>A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.</p>
    pub fn tls_inspection_configuration_id(&self) -> &str {
        use std::ops::Deref;
        self.tls_inspection_configuration_id.deref()
    }
    /// <p>Detailed information about the current status of a <code>TLSInspectionConfiguration</code>. You can retrieve this for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code> and providing the TLS inspection configuration name and ARN.</p>
    pub fn tls_inspection_configuration_status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.tls_inspection_configuration_status.as_ref()
    }
    /// <p>A description of the TLS inspection configuration. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The last time that the TLS inspection configuration was changed.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The number of firewall policies that use this TLS inspection configuration.</p>
    pub fn number_of_associations(&self) -> ::std::option::Option<i32> {
        self.number_of_associations
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>A list of the certificates associated with the TLS inspection configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.certificates.is_none()`.
    pub fn certificates(&self) -> &[crate::types::TlsCertificateData] {
        self.certificates.as_deref().unwrap_or_default()
    }
    /// <p>Contains metadata about an Certificate Manager certificate.</p>
    pub fn certificate_authority(&self) -> ::std::option::Option<&crate::types::TlsCertificateData> {
        self.certificate_authority.as_ref()
    }
}
impl TlsInspectionConfigurationResponse {
    /// Creates a new builder-style object to manufacture [`TlsInspectionConfigurationResponse`](crate::types::TlsInspectionConfigurationResponse).
    pub fn builder() -> crate::types::builders::TlsInspectionConfigurationResponseBuilder {
        crate::types::builders::TlsInspectionConfigurationResponseBuilder::default()
    }
}

/// A builder for [`TlsInspectionConfigurationResponse`](crate::types::TlsInspectionConfigurationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TlsInspectionConfigurationResponseBuilder {
    pub(crate) tls_inspection_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tls_inspection_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) tls_inspection_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) tls_inspection_configuration_status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) number_of_associations: ::std::option::Option<i32>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) certificates: ::std::option::Option<::std::vec::Vec<crate::types::TlsCertificateData>>,
    pub(crate) certificate_authority: ::std::option::Option<crate::types::TlsCertificateData>,
}
impl TlsInspectionConfigurationResponseBuilder {
    /// <p>The Amazon Resource Name (ARN) of the TLS inspection configuration.</p>
    /// This field is required.
    pub fn tls_inspection_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tls_inspection_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the TLS inspection configuration.</p>
    pub fn set_tls_inspection_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tls_inspection_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the TLS inspection configuration.</p>
    pub fn get_tls_inspection_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tls_inspection_configuration_arn
    }
    /// <p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p>
    /// This field is required.
    pub fn tls_inspection_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tls_inspection_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p>
    pub fn set_tls_inspection_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tls_inspection_configuration_name = input;
        self
    }
    /// <p>The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.</p>
    pub fn get_tls_inspection_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tls_inspection_configuration_name
    }
    /// <p>A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.</p>
    /// This field is required.
    pub fn tls_inspection_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tls_inspection_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.</p>
    pub fn set_tls_inspection_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tls_inspection_configuration_id = input;
        self
    }
    /// <p>A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.</p>
    pub fn get_tls_inspection_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tls_inspection_configuration_id
    }
    /// <p>Detailed information about the current status of a <code>TLSInspectionConfiguration</code>. You can retrieve this for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code> and providing the TLS inspection configuration name and ARN.</p>
    pub fn tls_inspection_configuration_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.tls_inspection_configuration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detailed information about the current status of a <code>TLSInspectionConfiguration</code>. You can retrieve this for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code> and providing the TLS inspection configuration name and ARN.</p>
    pub fn set_tls_inspection_configuration_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.tls_inspection_configuration_status = input;
        self
    }
    /// <p>Detailed information about the current status of a <code>TLSInspectionConfiguration</code>. You can retrieve this for a TLS inspection configuration by calling <code>DescribeTLSInspectionConfiguration</code> and providing the TLS inspection configuration name and ARN.</p>
    pub fn get_tls_inspection_configuration_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.tls_inspection_configuration_status
    }
    /// <p>A description of the TLS inspection configuration. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the TLS inspection configuration. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the TLS inspection configuration. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The last time that the TLS inspection configuration was changed.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the TLS inspection configuration was changed.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time that the TLS inspection configuration was changed.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The number of firewall policies that use this TLS inspection configuration.</p>
    pub fn number_of_associations(mut self, input: i32) -> Self {
        self.number_of_associations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of firewall policies that use this TLS inspection configuration.</p>
    pub fn set_number_of_associations(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_associations = input;
        self
    }
    /// <p>The number of firewall policies that use this TLS inspection configuration.</p>
    pub fn get_number_of_associations(&self) -> &::std::option::Option<i32> {
        &self.number_of_associations
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your TLS inspection configuration.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Appends an item to `certificates`.
    ///
    /// To override the contents of this collection use [`set_certificates`](Self::set_certificates).
    ///
    /// <p>A list of the certificates associated with the TLS inspection configuration.</p>
    pub fn certificates(mut self, input: crate::types::TlsCertificateData) -> Self {
        let mut v = self.certificates.unwrap_or_default();
        v.push(input);
        self.certificates = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the certificates associated with the TLS inspection configuration.</p>
    pub fn set_certificates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TlsCertificateData>>) -> Self {
        self.certificates = input;
        self
    }
    /// <p>A list of the certificates associated with the TLS inspection configuration.</p>
    pub fn get_certificates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TlsCertificateData>> {
        &self.certificates
    }
    /// <p>Contains metadata about an Certificate Manager certificate.</p>
    pub fn certificate_authority(mut self, input: crate::types::TlsCertificateData) -> Self {
        self.certificate_authority = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains metadata about an Certificate Manager certificate.</p>
    pub fn set_certificate_authority(mut self, input: ::std::option::Option<crate::types::TlsCertificateData>) -> Self {
        self.certificate_authority = input;
        self
    }
    /// <p>Contains metadata about an Certificate Manager certificate.</p>
    pub fn get_certificate_authority(&self) -> &::std::option::Option<crate::types::TlsCertificateData> {
        &self.certificate_authority
    }
    /// Consumes the builder and constructs a [`TlsInspectionConfigurationResponse`](crate::types::TlsInspectionConfigurationResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`tls_inspection_configuration_arn`](crate::types::builders::TlsInspectionConfigurationResponseBuilder::tls_inspection_configuration_arn)
    /// - [`tls_inspection_configuration_name`](crate::types::builders::TlsInspectionConfigurationResponseBuilder::tls_inspection_configuration_name)
    /// - [`tls_inspection_configuration_id`](crate::types::builders::TlsInspectionConfigurationResponseBuilder::tls_inspection_configuration_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TlsInspectionConfigurationResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TlsInspectionConfigurationResponse {
            tls_inspection_configuration_arn: self.tls_inspection_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tls_inspection_configuration_arn",
                    "tls_inspection_configuration_arn was not specified but it is required when building TlsInspectionConfigurationResponse",
                )
            })?,
            tls_inspection_configuration_name: self.tls_inspection_configuration_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tls_inspection_configuration_name",
                    "tls_inspection_configuration_name was not specified but it is required when building TlsInspectionConfigurationResponse",
                )
            })?,
            tls_inspection_configuration_id: self.tls_inspection_configuration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tls_inspection_configuration_id",
                    "tls_inspection_configuration_id was not specified but it is required when building TlsInspectionConfigurationResponse",
                )
            })?,
            tls_inspection_configuration_status: self.tls_inspection_configuration_status,
            description: self.description,
            tags: self.tags,
            last_modified_time: self.last_modified_time,
            number_of_associations: self.number_of_associations,
            encryption_configuration: self.encryption_configuration,
            certificates: self.certificates,
            certificate_authority: self.certificate_authority,
        })
    }
}
