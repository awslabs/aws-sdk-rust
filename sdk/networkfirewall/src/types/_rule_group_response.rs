// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The high-level properties of a rule group. This, along with the <code>RuleGroup</code>, define the rule group. You can retrieve all objects for a rule group by calling <code>DescribeRuleGroup</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleGroupResponse {
    /// <p>The Amazon Resource Name (ARN) of the rule group.</p> <note>
    /// <p>If this response is for a create request that had <code>DryRun</code> set to <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid resource.</p>
    /// </note>
    pub rule_group_arn: ::std::string::String,
    /// <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
    pub rule_group_name: ::std::string::String,
    /// <p>The unique identifier for the rule group. </p>
    pub rule_group_id: ::std::string::String,
    /// <p>A description of the rule group. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p>
    pub r#type: ::std::option::Option<crate::types::RuleGroupType>,
    /// <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
    /// <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling <code>CreateRuleGroup</code> with <code>DryRun</code> set to <code>TRUE</code>. </p>
    pub capacity: ::std::option::Option<i32>,
    /// <p>Detailed information about the current status of a rule group. </p>
    pub rule_group_status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>The key:value pairs to associate with the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The number of capacity units currently consumed by the rule group rules. </p>
    pub consumed_capacity: ::std::option::Option<i32>,
    /// <p>The number of firewall policies that use this rule group.</p>
    pub number_of_associations: ::std::option::Option<i32>,
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
    pub source_metadata: ::std::option::Option<crate::types::SourceMetadata>,
    /// <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
    pub sns_topic: ::std::option::Option<::std::string::String>,
    /// <p>The last time that the rule group was changed.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleGroupResponse {
    /// <p>The Amazon Resource Name (ARN) of the rule group.</p> <note>
    /// <p>If this response is for a create request that had <code>DryRun</code> set to <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid resource.</p>
    /// </note>
    pub fn rule_group_arn(&self) -> &str {
        use std::ops::Deref;
        self.rule_group_arn.deref()
    }
    /// <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
    pub fn rule_group_name(&self) -> &str {
        use std::ops::Deref;
        self.rule_group_name.deref()
    }
    /// <p>The unique identifier for the rule group. </p>
    pub fn rule_group_id(&self) -> &str {
        use std::ops::Deref;
        self.rule_group_id.deref()
    }
    /// <p>A description of the rule group. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RuleGroupType> {
        self.r#type.as_ref()
    }
    /// <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
    /// <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling <code>CreateRuleGroup</code> with <code>DryRun</code> set to <code>TRUE</code>. </p>
    pub fn capacity(&self) -> ::std::option::Option<i32> {
        self.capacity
    }
    /// <p>Detailed information about the current status of a rule group. </p>
    pub fn rule_group_status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.rule_group_status.as_ref()
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The number of capacity units currently consumed by the rule group rules. </p>
    pub fn consumed_capacity(&self) -> ::std::option::Option<i32> {
        self.consumed_capacity
    }
    /// <p>The number of firewall policies that use this rule group.</p>
    pub fn number_of_associations(&self) -> ::std::option::Option<i32> {
        self.number_of_associations
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
    pub fn source_metadata(&self) -> ::std::option::Option<&crate::types::SourceMetadata> {
        self.source_metadata.as_ref()
    }
    /// <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
    pub fn sns_topic(&self) -> ::std::option::Option<&str> {
        self.sns_topic.as_deref()
    }
    /// <p>The last time that the rule group was changed.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl RuleGroupResponse {
    /// Creates a new builder-style object to manufacture [`RuleGroupResponse`](crate::types::RuleGroupResponse).
    pub fn builder() -> crate::types::builders::RuleGroupResponseBuilder {
        crate::types::builders::RuleGroupResponseBuilder::default()
    }
}

/// A builder for [`RuleGroupResponse`](crate::types::RuleGroupResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleGroupResponseBuilder {
    pub(crate) rule_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rule_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RuleGroupType>,
    pub(crate) capacity: ::std::option::Option<i32>,
    pub(crate) rule_group_status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) consumed_capacity: ::std::option::Option<i32>,
    pub(crate) number_of_associations: ::std::option::Option<i32>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) source_metadata: ::std::option::Option<crate::types::SourceMetadata>,
    pub(crate) sns_topic: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleGroupResponseBuilder {
    /// <p>The Amazon Resource Name (ARN) of the rule group.</p> <note>
    /// <p>If this response is for a create request that had <code>DryRun</code> set to <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid resource.</p>
    /// </note>
    /// This field is required.
    pub fn rule_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule group.</p> <note>
    /// <p>If this response is for a create request that had <code>DryRun</code> set to <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid resource.</p>
    /// </note>
    pub fn set_rule_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule group.</p> <note>
    /// <p>If this response is for a create request that had <code>DryRun</code> set to <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid resource.</p>
    /// </note>
    pub fn get_rule_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_group_arn
    }
    /// <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
    /// This field is required.
    pub fn rule_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
    pub fn set_rule_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_group_name = input;
        self
    }
    /// <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
    pub fn get_rule_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_group_name
    }
    /// <p>The unique identifier for the rule group. </p>
    /// This field is required.
    pub fn rule_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the rule group. </p>
    pub fn set_rule_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_group_id = input;
        self
    }
    /// <p>The unique identifier for the rule group. </p>
    pub fn get_rule_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_group_id
    }
    /// <p>A description of the rule group. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the rule group. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the rule group. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p>
    pub fn r#type(mut self, input: crate::types::RuleGroupType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RuleGroupType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RuleGroupType> {
        &self.r#type
    }
    /// <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
    /// <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling <code>CreateRuleGroup</code> with <code>DryRun</code> set to <code>TRUE</code>. </p>
    pub fn capacity(mut self, input: i32) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
    /// <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling <code>CreateRuleGroup</code> with <code>DryRun</code> set to <code>TRUE</code>. </p>
    pub fn set_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation. When you update a rule group, you are limited to this capacity. When you reference a rule group from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
    /// <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling <code>CreateRuleGroup</code> with <code>DryRun</code> set to <code>TRUE</code>. </p>
    pub fn get_capacity(&self) -> &::std::option::Option<i32> {
        &self.capacity
    }
    /// <p>Detailed information about the current status of a rule group. </p>
    pub fn rule_group_status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.rule_group_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detailed information about the current status of a rule group. </p>
    pub fn set_rule_group_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.rule_group_status = input;
        self
    }
    /// <p>Detailed information about the current status of a rule group. </p>
    pub fn get_rule_group_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.rule_group_status
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The number of capacity units currently consumed by the rule group rules. </p>
    pub fn consumed_capacity(mut self, input: i32) -> Self {
        self.consumed_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of capacity units currently consumed by the rule group rules. </p>
    pub fn set_consumed_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.consumed_capacity = input;
        self
    }
    /// <p>The number of capacity units currently consumed by the rule group rules. </p>
    pub fn get_consumed_capacity(&self) -> &::std::option::Option<i32> {
        &self.consumed_capacity
    }
    /// <p>The number of firewall policies that use this rule group.</p>
    pub fn number_of_associations(mut self, input: i32) -> Self {
        self.number_of_associations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of firewall policies that use this rule group.</p>
    pub fn set_number_of_associations(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_associations = input;
        self
    }
    /// <p>The number of firewall policies that use this rule group.</p>
    pub fn get_number_of_associations(&self) -> &::std::option::Option<i32> {
        &self.number_of_associations
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
    pub fn source_metadata(mut self, input: crate::types::SourceMetadata) -> Self {
        self.source_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
    pub fn set_source_metadata(mut self, input: ::std::option::Option<crate::types::SourceMetadata>) -> Self {
        self.source_metadata = input;
        self
    }
    /// <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
    pub fn get_source_metadata(&self) -> &::std::option::Option<crate::types::SourceMetadata> {
        &self.source_metadata
    }
    /// <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
    pub fn sns_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sns_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
    pub fn set_sns_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sns_topic = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
    pub fn get_sns_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.sns_topic
    }
    /// <p>The last time that the rule group was changed.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the rule group was changed.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time that the rule group was changed.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`RuleGroupResponse`](crate::types::RuleGroupResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_group_arn`](crate::types::builders::RuleGroupResponseBuilder::rule_group_arn)
    /// - [`rule_group_name`](crate::types::builders::RuleGroupResponseBuilder::rule_group_name)
    /// - [`rule_group_id`](crate::types::builders::RuleGroupResponseBuilder::rule_group_id)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleGroupResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleGroupResponse {
            rule_group_arn: self.rule_group_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_group_arn",
                    "rule_group_arn was not specified but it is required when building RuleGroupResponse",
                )
            })?,
            rule_group_name: self.rule_group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_group_name",
                    "rule_group_name was not specified but it is required when building RuleGroupResponse",
                )
            })?,
            rule_group_id: self.rule_group_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_group_id",
                    "rule_group_id was not specified but it is required when building RuleGroupResponse",
                )
            })?,
            description: self.description,
            r#type: self.r#type,
            capacity: self.capacity,
            rule_group_status: self.rule_group_status,
            tags: self.tags,
            consumed_capacity: self.consumed_capacity,
            number_of_associations: self.number_of_associations,
            encryption_configuration: self.encryption_configuration,
            source_metadata: self.source_metadata,
            sns_topic: self.sns_topic,
            last_modified_time: self.last_modified_time,
        })
    }
}
