// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single Suricata rules specification, for use in a stateful rule group. Use this option to specify a simple Suricata rule with protocol, source and destination, ports, direction, and rule options. For information about the Suricata <code>Rules</code> format, see <a href="https://suricata.readthedocs.io/rules/intro.html#">Rules Format</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatefulRule {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. </p>
    /// <p>The actions for a stateful rule are defined as follows: </p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Permits the packets to go to the intended destination.</p> </li>
    /// <li> <p> <b>DROP</b> - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> </li>
    /// <li> <p> <b>ALERT</b> - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> <p>You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with <code>ALERT</code> action, verify in the logs that the rule is filtering as you want, then change the action to <code>DROP</code>.</p> </li>
    /// <li> <p> <b>REJECT</b> - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a <code>RST</code> bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>.</p> <p> <code>REJECT</code> isn't currently available for use with IMAP and FTP protocols.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::StatefulAction>,
    /// <p>The stateful inspection criteria for this rule, used to inspect traffic flows. </p>
    #[doc(hidden)]
    pub header: std::option::Option<crate::types::Header>,
    /// <p>Additional options for the rule. These are the Suricata <code>RuleOptions</code> settings.</p>
    #[doc(hidden)]
    pub rule_options: std::option::Option<std::vec::Vec<crate::types::RuleOption>>,
}
impl StatefulRule {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. </p>
    /// <p>The actions for a stateful rule are defined as follows: </p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Permits the packets to go to the intended destination.</p> </li>
    /// <li> <p> <b>DROP</b> - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> </li>
    /// <li> <p> <b>ALERT</b> - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> <p>You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with <code>ALERT</code> action, verify in the logs that the rule is filtering as you want, then change the action to <code>DROP</code>.</p> </li>
    /// <li> <p> <b>REJECT</b> - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a <code>RST</code> bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>.</p> <p> <code>REJECT</code> isn't currently available for use with IMAP and FTP protocols.</p> </li>
    /// </ul>
    pub fn action(&self) -> std::option::Option<&crate::types::StatefulAction> {
        self.action.as_ref()
    }
    /// <p>The stateful inspection criteria for this rule, used to inspect traffic flows. </p>
    pub fn header(&self) -> std::option::Option<&crate::types::Header> {
        self.header.as_ref()
    }
    /// <p>Additional options for the rule. These are the Suricata <code>RuleOptions</code> settings.</p>
    pub fn rule_options(&self) -> std::option::Option<&[crate::types::RuleOption]> {
        self.rule_options.as_deref()
    }
}
impl StatefulRule {
    /// Creates a new builder-style object to manufacture [`StatefulRule`](crate::types::StatefulRule).
    pub fn builder() -> crate::types::builders::StatefulRuleBuilder {
        crate::types::builders::StatefulRuleBuilder::default()
    }
}

/// A builder for [`StatefulRule`](crate::types::StatefulRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatefulRuleBuilder {
    pub(crate) action: std::option::Option<crate::types::StatefulAction>,
    pub(crate) header: std::option::Option<crate::types::Header>,
    pub(crate) rule_options: std::option::Option<std::vec::Vec<crate::types::RuleOption>>,
}
impl StatefulRuleBuilder {
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. </p>
    /// <p>The actions for a stateful rule are defined as follows: </p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Permits the packets to go to the intended destination.</p> </li>
    /// <li> <p> <b>DROP</b> - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> </li>
    /// <li> <p> <b>ALERT</b> - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> <p>You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with <code>ALERT</code> action, verify in the logs that the rule is filtering as you want, then change the action to <code>DROP</code>.</p> </li>
    /// <li> <p> <b>REJECT</b> - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a <code>RST</code> bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>.</p> <p> <code>REJECT</code> isn't currently available for use with IMAP and FTP protocols.</p> </li>
    /// </ul>
    pub fn action(mut self, input: crate::types::StatefulAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. </p>
    /// <p>The actions for a stateful rule are defined as follows: </p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Permits the packets to go to the intended destination.</p> </li>
    /// <li> <p> <b>DROP</b> - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> </li>
    /// <li> <p> <b>ALERT</b> - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>. </p> <p>You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with <code>ALERT</code> action, verify in the logs that the rule is filtering as you want, then change the action to <code>DROP</code>.</p> </li>
    /// <li> <p> <b>REJECT</b> - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a <code>RST</code> bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the <code>Firewall</code> <code>LoggingConfiguration</code>.</p> <p> <code>REJECT</code> isn't currently available for use with IMAP and FTP protocols.</p> </li>
    /// </ul>
    pub fn set_action(mut self, input: std::option::Option<crate::types::StatefulAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The stateful inspection criteria for this rule, used to inspect traffic flows. </p>
    pub fn header(mut self, input: crate::types::Header) -> Self {
        self.header = Some(input);
        self
    }
    /// <p>The stateful inspection criteria for this rule, used to inspect traffic flows. </p>
    pub fn set_header(mut self, input: std::option::Option<crate::types::Header>) -> Self {
        self.header = input;
        self
    }
    /// Appends an item to `rule_options`.
    ///
    /// To override the contents of this collection use [`set_rule_options`](Self::set_rule_options).
    ///
    /// <p>Additional options for the rule. These are the Suricata <code>RuleOptions</code> settings.</p>
    pub fn rule_options(mut self, input: crate::types::RuleOption) -> Self {
        let mut v = self.rule_options.unwrap_or_default();
        v.push(input);
        self.rule_options = Some(v);
        self
    }
    /// <p>Additional options for the rule. These are the Suricata <code>RuleOptions</code> settings.</p>
    pub fn set_rule_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RuleOption>>,
    ) -> Self {
        self.rule_options = input;
        self
    }
    /// Consumes the builder and constructs a [`StatefulRule`](crate::types::StatefulRule).
    pub fn build(self) -> crate::types::StatefulRule {
        crate::types::StatefulRule {
            action: self.action,
            header: self.header,
            rule_options: self.rule_options,
        }
    }
}
