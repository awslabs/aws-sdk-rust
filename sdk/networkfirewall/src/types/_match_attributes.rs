// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MatchAttributes {
    /// <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. </p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::Address>>,
    /// <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. </p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::types::Address>>,
    /// <p>The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    #[doc(hidden)]
    pub source_ports: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    /// <p>The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    #[doc(hidden)]
    pub destination_ports: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    /// <p>The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol. </p>
    #[doc(hidden)]
    pub protocols: std::option::Option<std::vec::Vec<i32>>,
    /// <p>The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).</p>
    #[doc(hidden)]
    pub tcp_flags: std::option::Option<std::vec::Vec<crate::types::TcpFlagField>>,
}
impl MatchAttributes {
    /// <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. </p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::Address]> {
        self.sources.as_deref()
    }
    /// <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. </p>
    pub fn destinations(&self) -> std::option::Option<&[crate::types::Address]> {
        self.destinations.as_deref()
    }
    /// <p>The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn source_ports(&self) -> std::option::Option<&[crate::types::PortRange]> {
        self.source_ports.as_deref()
    }
    /// <p>The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn destination_ports(&self) -> std::option::Option<&[crate::types::PortRange]> {
        self.destination_ports.as_deref()
    }
    /// <p>The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol. </p>
    pub fn protocols(&self) -> std::option::Option<&[i32]> {
        self.protocols.as_deref()
    }
    /// <p>The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).</p>
    pub fn tcp_flags(&self) -> std::option::Option<&[crate::types::TcpFlagField]> {
        self.tcp_flags.as_deref()
    }
}
impl MatchAttributes {
    /// Creates a new builder-style object to manufacture [`MatchAttributes`](crate::types::MatchAttributes).
    pub fn builder() -> crate::types::builders::MatchAttributesBuilder {
        crate::types::builders::MatchAttributesBuilder::default()
    }
}

/// A builder for [`MatchAttributes`](crate::types::MatchAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MatchAttributesBuilder {
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::Address>>,
    pub(crate) destinations: std::option::Option<std::vec::Vec<crate::types::Address>>,
    pub(crate) source_ports: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    pub(crate) destination_ports: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    pub(crate) protocols: std::option::Option<std::vec::Vec<i32>>,
    pub(crate) tcp_flags: std::option::Option<std::vec::Vec<crate::types::TcpFlagField>>,
}
impl MatchAttributesBuilder {
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. </p>
    pub fn sources(mut self, input: crate::types::Address) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. </p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Address>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. </p>
    pub fn destinations(mut self, input: crate::types::Address) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = Some(v);
        self
    }
    /// <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. </p>
    pub fn set_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Address>>,
    ) -> Self {
        self.destinations = input;
        self
    }
    /// Appends an item to `source_ports`.
    ///
    /// To override the contents of this collection use [`set_source_ports`](Self::set_source_ports).
    ///
    /// <p>The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn source_ports(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.source_ports.unwrap_or_default();
        v.push(input);
        self.source_ports = Some(v);
        self
    }
    /// <p>The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn set_source_ports(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    ) -> Self {
        self.source_ports = input;
        self
    }
    /// Appends an item to `destination_ports`.
    ///
    /// To override the contents of this collection use [`set_destination_ports`](Self::set_destination_ports).
    ///
    /// <p>The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn destination_ports(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.destination_ports.unwrap_or_default();
        v.push(input);
        self.destination_ports = Some(v);
        self
    }
    /// <p>The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
    /// <p>You can specify individual ports, for example <code>1994</code> and you can specify port ranges, for example <code>1990:1994</code>. </p>
    pub fn set_destination_ports(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    ) -> Self {
        self.destination_ports = input;
        self
    }
    /// Appends an item to `protocols`.
    ///
    /// To override the contents of this collection use [`set_protocols`](Self::set_protocols).
    ///
    /// <p>The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol. </p>
    pub fn protocols(mut self, input: i32) -> Self {
        let mut v = self.protocols.unwrap_or_default();
        v.push(input);
        self.protocols = Some(v);
        self
    }
    /// <p>The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol. </p>
    pub fn set_protocols(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
        self.protocols = input;
        self
    }
    /// Appends an item to `tcp_flags`.
    ///
    /// To override the contents of this collection use [`set_tcp_flags`](Self::set_tcp_flags).
    ///
    /// <p>The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).</p>
    pub fn tcp_flags(mut self, input: crate::types::TcpFlagField) -> Self {
        let mut v = self.tcp_flags.unwrap_or_default();
        v.push(input);
        self.tcp_flags = Some(v);
        self
    }
    /// <p>The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).</p>
    pub fn set_tcp_flags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TcpFlagField>>,
    ) -> Self {
        self.tcp_flags = input;
        self
    }
    /// Consumes the builder and constructs a [`MatchAttributes`](crate::types::MatchAttributes).
    pub fn build(self) -> crate::types::MatchAttributes {
        crate::types::MatchAttributes {
            sources: self.sources,
            destinations: self.destinations,
            source_ports: self.source_ports,
            destination_ports: self.destination_ports,
            protocols: self.protocols,
            tcp_flags: self.tcp_flags,
        }
    }
}
