// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifier for a single stateful rule group, used in a firewall policy to refer to a rule group. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatefulRuleGroupReference {
    /// <p>The Amazon Resource Name (ARN) of the stateful rule group.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single <code>FirewallPolicy</code>. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p>Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.</p>
    /// <p>You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    #[doc(hidden)]
    pub r#override: std::option::Option<crate::types::StatefulRuleGroupOverride>,
}
impl StatefulRuleGroupReference {
    /// <p>The Amazon Resource Name (ARN) of the stateful rule group.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single <code>FirewallPolicy</code>. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p>Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.</p>
    /// <p>You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn r#override(&self) -> std::option::Option<&crate::types::StatefulRuleGroupOverride> {
        self.r#override.as_ref()
    }
}
impl StatefulRuleGroupReference {
    /// Creates a new builder-style object to manufacture [`StatefulRuleGroupReference`](crate::types::StatefulRuleGroupReference).
    pub fn builder() -> crate::types::builders::StatefulRuleGroupReferenceBuilder {
        crate::types::builders::StatefulRuleGroupReferenceBuilder::default()
    }
}

/// A builder for [`StatefulRuleGroupReference`](crate::types::StatefulRuleGroupReference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatefulRuleGroupReferenceBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) r#override: std::option::Option<crate::types::StatefulRuleGroupOverride>,
}
impl StatefulRuleGroupReferenceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the stateful rule group.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stateful rule group.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single <code>FirewallPolicy</code>. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p>Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.</p>
    /// <p>You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single <code>FirewallPolicy</code>. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p>Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.</p>
    /// <p>You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn r#override(mut self, input: crate::types::StatefulRuleGroupOverride) -> Self {
        self.r#override = Some(input);
        self
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn set_override(
        mut self,
        input: std::option::Option<crate::types::StatefulRuleGroupOverride>,
    ) -> Self {
        self.r#override = input;
        self
    }
    /// Consumes the builder and constructs a [`StatefulRuleGroupReference`](crate::types::StatefulRuleGroupReference).
    pub fn build(self) -> crate::types::StatefulRuleGroupReference {
        crate::types::StatefulRuleGroupReference {
            resource_arn: self.resource_arn,
            priority: self.priority,
            r#override: self.r#override,
        }
    }
}
