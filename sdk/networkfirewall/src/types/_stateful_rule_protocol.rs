// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `StatefulRuleProtocol`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let statefulruleprotocol = unimplemented!();
/// match statefulruleprotocol {
///     StatefulRuleProtocol::Dcerpc => { /* ... */ },
///     StatefulRuleProtocol::Dhcp => { /* ... */ },
///     StatefulRuleProtocol::Dns => { /* ... */ },
///     StatefulRuleProtocol::Ftp => { /* ... */ },
///     StatefulRuleProtocol::Http => { /* ... */ },
///     StatefulRuleProtocol::Http2 => { /* ... */ },
///     StatefulRuleProtocol::Icmp => { /* ... */ },
///     StatefulRuleProtocol::Ikev2 => { /* ... */ },
///     StatefulRuleProtocol::Imap => { /* ... */ },
///     StatefulRuleProtocol::Any => { /* ... */ },
///     StatefulRuleProtocol::Krb5 => { /* ... */ },
///     StatefulRuleProtocol::Msn => { /* ... */ },
///     StatefulRuleProtocol::Ntp => { /* ... */ },
///     StatefulRuleProtocol::Quic => { /* ... */ },
///     StatefulRuleProtocol::Smb => { /* ... */ },
///     StatefulRuleProtocol::Smtp => { /* ... */ },
///     StatefulRuleProtocol::Ssh => { /* ... */ },
///     StatefulRuleProtocol::Tcp => { /* ... */ },
///     StatefulRuleProtocol::Tftp => { /* ... */ },
///     StatefulRuleProtocol::Tls => { /* ... */ },
///     StatefulRuleProtocol::Udp => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `statefulruleprotocol` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `StatefulRuleProtocol::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `StatefulRuleProtocol::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `StatefulRuleProtocol::NewFeature` is defined.
/// Specifically, when `statefulruleprotocol` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `StatefulRuleProtocol::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum StatefulRuleProtocol {
    #[allow(missing_docs)] // documentation missing in model
    Dcerpc,
    #[allow(missing_docs)] // documentation missing in model
    Dhcp,
    #[allow(missing_docs)] // documentation missing in model
    Dns,
    #[allow(missing_docs)] // documentation missing in model
    Ftp,
    #[allow(missing_docs)] // documentation missing in model
    Http,
    #[allow(missing_docs)] // documentation missing in model
    Http2,
    #[allow(missing_docs)] // documentation missing in model
    Icmp,
    #[allow(missing_docs)] // documentation missing in model
    Ikev2,
    #[allow(missing_docs)] // documentation missing in model
    Imap,
    #[allow(missing_docs)] // documentation missing in model
    Any,
    #[allow(missing_docs)] // documentation missing in model
    Krb5,
    #[allow(missing_docs)] // documentation missing in model
    Msn,
    #[allow(missing_docs)] // documentation missing in model
    Ntp,
    #[allow(missing_docs)] // documentation missing in model
    Quic,
    #[allow(missing_docs)] // documentation missing in model
    Smb,
    #[allow(missing_docs)] // documentation missing in model
    Smtp,
    #[allow(missing_docs)] // documentation missing in model
    Ssh,
    #[allow(missing_docs)] // documentation missing in model
    Tcp,
    #[allow(missing_docs)] // documentation missing in model
    Tftp,
    #[allow(missing_docs)] // documentation missing in model
    Tls,
    #[allow(missing_docs)] // documentation missing in model
    Udp,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for StatefulRuleProtocol {
    fn from(s: &str) -> Self {
        match s {
            "DCERPC" => StatefulRuleProtocol::Dcerpc,
            "DHCP" => StatefulRuleProtocol::Dhcp,
            "DNS" => StatefulRuleProtocol::Dns,
            "FTP" => StatefulRuleProtocol::Ftp,
            "HTTP" => StatefulRuleProtocol::Http,
            "HTTP2" => StatefulRuleProtocol::Http2,
            "ICMP" => StatefulRuleProtocol::Icmp,
            "IKEV2" => StatefulRuleProtocol::Ikev2,
            "IMAP" => StatefulRuleProtocol::Imap,
            "IP" => StatefulRuleProtocol::Any,
            "KRB5" => StatefulRuleProtocol::Krb5,
            "MSN" => StatefulRuleProtocol::Msn,
            "NTP" => StatefulRuleProtocol::Ntp,
            "QUIC" => StatefulRuleProtocol::Quic,
            "SMB" => StatefulRuleProtocol::Smb,
            "SMTP" => StatefulRuleProtocol::Smtp,
            "SSH" => StatefulRuleProtocol::Ssh,
            "TCP" => StatefulRuleProtocol::Tcp,
            "TFTP" => StatefulRuleProtocol::Tftp,
            "TLS" => StatefulRuleProtocol::Tls,
            "UDP" => StatefulRuleProtocol::Udp,
            other => StatefulRuleProtocol::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for StatefulRuleProtocol {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(StatefulRuleProtocol::from(s))
    }
}
impl StatefulRuleProtocol {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            StatefulRuleProtocol::Dcerpc => "DCERPC",
            StatefulRuleProtocol::Dhcp => "DHCP",
            StatefulRuleProtocol::Dns => "DNS",
            StatefulRuleProtocol::Ftp => "FTP",
            StatefulRuleProtocol::Http => "HTTP",
            StatefulRuleProtocol::Http2 => "HTTP2",
            StatefulRuleProtocol::Icmp => "ICMP",
            StatefulRuleProtocol::Ikev2 => "IKEV2",
            StatefulRuleProtocol::Imap => "IMAP",
            StatefulRuleProtocol::Any => "IP",
            StatefulRuleProtocol::Krb5 => "KRB5",
            StatefulRuleProtocol::Msn => "MSN",
            StatefulRuleProtocol::Ntp => "NTP",
            StatefulRuleProtocol::Quic => "QUIC",
            StatefulRuleProtocol::Smb => "SMB",
            StatefulRuleProtocol::Smtp => "SMTP",
            StatefulRuleProtocol::Ssh => "SSH",
            StatefulRuleProtocol::Tcp => "TCP",
            StatefulRuleProtocol::Tftp => "TFTP",
            StatefulRuleProtocol::Tls => "TLS",
            StatefulRuleProtocol::Udp => "UDP",
            StatefulRuleProtocol::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "DCERPC", "DHCP", "DNS", "FTP", "HTTP", "HTTP2", "ICMP", "IKEV2", "IMAP", "IP", "KRB5", "MSN", "NTP", "QUIC", "SMB", "SMTP", "SSH",
            "TCP", "TFTP", "TLS", "UDP",
        ]
    }
}
impl ::std::convert::AsRef<str> for StatefulRuleProtocol {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl StatefulRuleProtocol {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for StatefulRuleProtocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            StatefulRuleProtocol::Dcerpc => write!(f, "DCERPC"),
            StatefulRuleProtocol::Dhcp => write!(f, "DHCP"),
            StatefulRuleProtocol::Dns => write!(f, "DNS"),
            StatefulRuleProtocol::Ftp => write!(f, "FTP"),
            StatefulRuleProtocol::Http => write!(f, "HTTP"),
            StatefulRuleProtocol::Http2 => write!(f, "HTTP2"),
            StatefulRuleProtocol::Icmp => write!(f, "ICMP"),
            StatefulRuleProtocol::Ikev2 => write!(f, "IKEV2"),
            StatefulRuleProtocol::Imap => write!(f, "IMAP"),
            StatefulRuleProtocol::Any => write!(f, "IP"),
            StatefulRuleProtocol::Krb5 => write!(f, "KRB5"),
            StatefulRuleProtocol::Msn => write!(f, "MSN"),
            StatefulRuleProtocol::Ntp => write!(f, "NTP"),
            StatefulRuleProtocol::Quic => write!(f, "QUIC"),
            StatefulRuleProtocol::Smb => write!(f, "SMB"),
            StatefulRuleProtocol::Smtp => write!(f, "SMTP"),
            StatefulRuleProtocol::Ssh => write!(f, "SSH"),
            StatefulRuleProtocol::Tcp => write!(f, "TCP"),
            StatefulRuleProtocol::Tftp => write!(f, "TFTP"),
            StatefulRuleProtocol::Tls => write!(f, "TLS"),
            StatefulRuleProtocol::Udp => write!(f, "UDP"),
            StatefulRuleProtocol::Unknown(value) => write!(f, "{value}"),
        }
    }
}
