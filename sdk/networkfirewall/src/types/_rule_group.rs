// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object that defines the rules in a rule group. This, along with <code>RuleGroupResponse</code>, define the rule group. You can retrieve all objects for a rule group by calling <code>DescribeRuleGroup</code>. </p>
/// <p>Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. </p>
/// <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuleGroup {
    /// <p>Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups. </p>
    #[doc(hidden)]
    pub rule_variables: std::option::Option<crate::types::RuleVariables>,
    /// <p>The list of a rule group's reference sets.</p>
    #[doc(hidden)]
    pub reference_sets: std::option::Option<crate::types::ReferenceSets>,
    /// <p>The stateful rules or stateless rules for the rule group. </p>
    #[doc(hidden)]
    pub rules_source: std::option::Option<crate::types::RulesSource>,
    /// <p>Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.</p>
    #[doc(hidden)]
    pub stateful_rule_options: std::option::Option<crate::types::StatefulRuleOptions>,
}
impl RuleGroup {
    /// <p>Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups. </p>
    pub fn rule_variables(&self) -> std::option::Option<&crate::types::RuleVariables> {
        self.rule_variables.as_ref()
    }
    /// <p>The list of a rule group's reference sets.</p>
    pub fn reference_sets(&self) -> std::option::Option<&crate::types::ReferenceSets> {
        self.reference_sets.as_ref()
    }
    /// <p>The stateful rules or stateless rules for the rule group. </p>
    pub fn rules_source(&self) -> std::option::Option<&crate::types::RulesSource> {
        self.rules_source.as_ref()
    }
    /// <p>Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.</p>
    pub fn stateful_rule_options(&self) -> std::option::Option<&crate::types::StatefulRuleOptions> {
        self.stateful_rule_options.as_ref()
    }
}
impl RuleGroup {
    /// Creates a new builder-style object to manufacture [`RuleGroup`](crate::types::RuleGroup).
    pub fn builder() -> crate::types::builders::RuleGroupBuilder {
        crate::types::builders::RuleGroupBuilder::default()
    }
}

/// A builder for [`RuleGroup`](crate::types::RuleGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuleGroupBuilder {
    pub(crate) rule_variables: std::option::Option<crate::types::RuleVariables>,
    pub(crate) reference_sets: std::option::Option<crate::types::ReferenceSets>,
    pub(crate) rules_source: std::option::Option<crate::types::RulesSource>,
    pub(crate) stateful_rule_options: std::option::Option<crate::types::StatefulRuleOptions>,
}
impl RuleGroupBuilder {
    /// <p>Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups. </p>
    pub fn rule_variables(mut self, input: crate::types::RuleVariables) -> Self {
        self.rule_variables = Some(input);
        self
    }
    /// <p>Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups. </p>
    pub fn set_rule_variables(
        mut self,
        input: std::option::Option<crate::types::RuleVariables>,
    ) -> Self {
        self.rule_variables = input;
        self
    }
    /// <p>The list of a rule group's reference sets.</p>
    pub fn reference_sets(mut self, input: crate::types::ReferenceSets) -> Self {
        self.reference_sets = Some(input);
        self
    }
    /// <p>The list of a rule group's reference sets.</p>
    pub fn set_reference_sets(
        mut self,
        input: std::option::Option<crate::types::ReferenceSets>,
    ) -> Self {
        self.reference_sets = input;
        self
    }
    /// <p>The stateful rules or stateless rules for the rule group. </p>
    pub fn rules_source(mut self, input: crate::types::RulesSource) -> Self {
        self.rules_source = Some(input);
        self
    }
    /// <p>The stateful rules or stateless rules for the rule group. </p>
    pub fn set_rules_source(
        mut self,
        input: std::option::Option<crate::types::RulesSource>,
    ) -> Self {
        self.rules_source = input;
        self
    }
    /// <p>Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.</p>
    pub fn stateful_rule_options(mut self, input: crate::types::StatefulRuleOptions) -> Self {
        self.stateful_rule_options = Some(input);
        self
    }
    /// <p>Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings.</p>
    pub fn set_stateful_rule_options(
        mut self,
        input: std::option::Option<crate::types::StatefulRuleOptions>,
    ) -> Self {
        self.stateful_rule_options = input;
        self
    }
    /// Consumes the builder and constructs a [`RuleGroup`](crate::types::RuleGroup).
    pub fn build(self) -> crate::types::RuleGroup {
        crate::types::RuleGroup {
            rule_variables: self.rule_variables,
            reference_sets: self.reference_sets,
            rules_source: self.rules_source,
            stateful_rule_options: self.stateful_rule_options,
        }
    }
}
