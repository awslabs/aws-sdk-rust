// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the actions to take on the SSL/TLS connection if the certificate presented by the server in the connection has a revoked or unknown status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CheckCertificateRevocationStatusActions {
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic.</p> </li>
    /// </ul>
    pub revoked_status_action: ::std::option::Option<crate::types::RevocationCheckAction>,
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic. </p> </li>
    /// </ul>
    pub unknown_status_action: ::std::option::Option<crate::types::RevocationCheckAction>,
}
impl CheckCertificateRevocationStatusActions {
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic.</p> </li>
    /// </ul>
    pub fn revoked_status_action(&self) -> ::std::option::Option<&crate::types::RevocationCheckAction> {
        self.revoked_status_action.as_ref()
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic. </p> </li>
    /// </ul>
    pub fn unknown_status_action(&self) -> ::std::option::Option<&crate::types::RevocationCheckAction> {
        self.unknown_status_action.as_ref()
    }
}
impl CheckCertificateRevocationStatusActions {
    /// Creates a new builder-style object to manufacture [`CheckCertificateRevocationStatusActions`](crate::types::CheckCertificateRevocationStatusActions).
    pub fn builder() -> crate::types::builders::CheckCertificateRevocationStatusActionsBuilder {
        crate::types::builders::CheckCertificateRevocationStatusActionsBuilder::default()
    }
}

/// A builder for [`CheckCertificateRevocationStatusActions`](crate::types::CheckCertificateRevocationStatusActions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CheckCertificateRevocationStatusActionsBuilder {
    pub(crate) revoked_status_action: ::std::option::Option<crate::types::RevocationCheckAction>,
    pub(crate) unknown_status_action: ::std::option::Option<crate::types::RevocationCheckAction>,
}
impl CheckCertificateRevocationStatusActionsBuilder {
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic.</p> </li>
    /// </ul>
    pub fn revoked_status_action(mut self, input: crate::types::RevocationCheckAction) -> Self {
        self.revoked_status_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic.</p> </li>
    /// </ul>
    pub fn set_revoked_status_action(mut self, input: ::std::option::Option<crate::types::RevocationCheckAction>) -> Self {
        self.revoked_status_action = input;
        self
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic.</p> </li>
    /// </ul>
    pub fn get_revoked_status_action(&self) -> &::std::option::Option<crate::types::RevocationCheckAction> {
        &self.revoked_status_action
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic. </p> </li>
    /// </ul>
    pub fn unknown_status_action(mut self, input: crate::types::RevocationCheckAction) -> Self {
        self.unknown_status_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic. </p> </li>
    /// </ul>
    pub fn set_unknown_status_action(mut self, input: ::std::option::Option<crate::types::RevocationCheckAction>) -> Self {
        self.unknown_status_action = input;
        self
    }
    /// <p>Configures how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate.</p>
    /// <ul>
    /// <li> <p> <b>PASS</b> - Allow the connection to continue, and pass subsequent packets to the stateful engine for inspection.</p> </li>
    /// <li> <p> <b>DROP</b> - Network Firewall fails closed and drops all subsequent traffic.</p> </li>
    /// <li> <p> <b>REJECT</b> - Network Firewall sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall then fails closed and drops all subsequent traffic. <code>REJECT</code> is available only for TCP traffic. </p> </li>
    /// </ul>
    pub fn get_unknown_status_action(&self) -> &::std::option::Option<crate::types::RevocationCheckAction> {
        &self.unknown_status_action
    }
    /// Consumes the builder and constructs a [`CheckCertificateRevocationStatusActions`](crate::types::CheckCertificateRevocationStatusActions).
    pub fn build(self) -> crate::types::CheckCertificateRevocationStatusActions {
        crate::types::CheckCertificateRevocationStatusActions {
            revoked_status_action: self.revoked_status_action,
            unknown_status_action: self.unknown_status_action,
        }
    }
}
