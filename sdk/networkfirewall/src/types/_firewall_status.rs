// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about the current status of a <code>Firewall</code>. You can retrieve this for a firewall by calling <code>DescribeFirewall</code> and providing the firewall name and ARN.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FirewallStatus {
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>. </p>
    pub status: crate::types::FirewallStatusValue,
    /// <p>The configuration sync state for the firewall. This summarizes the sync states reported in the <code>Config</code> settings for all of the Availability Zones where you have configured the firewall. </p>
    /// <p>When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. </p>
    /// <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates firewall readiness.</p>
    pub configuration_sync_state_summary: crate::types::ConfigurationSyncState,
    /// <p>The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone and configuration object. </p>
    pub sync_states: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SyncState>>,
    /// <p>Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.</p>
    pub capacity_usage_summary: ::std::option::Option<crate::types::CapacityUsageSummary>,
}
impl FirewallStatus {
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>. </p>
    pub fn status(&self) -> &crate::types::FirewallStatusValue {
        &self.status
    }
    /// <p>The configuration sync state for the firewall. This summarizes the sync states reported in the <code>Config</code> settings for all of the Availability Zones where you have configured the firewall. </p>
    /// <p>When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. </p>
    /// <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates firewall readiness.</p>
    pub fn configuration_sync_state_summary(&self) -> &crate::types::ConfigurationSyncState {
        &self.configuration_sync_state_summary
    }
    /// <p>The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone and configuration object. </p>
    pub fn sync_states(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SyncState>> {
        self.sync_states.as_ref()
    }
    /// <p>Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.</p>
    pub fn capacity_usage_summary(&self) -> ::std::option::Option<&crate::types::CapacityUsageSummary> {
        self.capacity_usage_summary.as_ref()
    }
}
impl FirewallStatus {
    /// Creates a new builder-style object to manufacture [`FirewallStatus`](crate::types::FirewallStatus).
    pub fn builder() -> crate::types::builders::FirewallStatusBuilder {
        crate::types::builders::FirewallStatusBuilder::default()
    }
}

/// A builder for [`FirewallStatus`](crate::types::FirewallStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FirewallStatusBuilder {
    pub(crate) status: ::std::option::Option<crate::types::FirewallStatusValue>,
    pub(crate) configuration_sync_state_summary: ::std::option::Option<crate::types::ConfigurationSyncState>,
    pub(crate) sync_states: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SyncState>>,
    pub(crate) capacity_usage_summary: ::std::option::Option<crate::types::CapacityUsageSummary>,
}
impl FirewallStatusBuilder {
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::FirewallStatusValue) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FirewallStatusValue>) -> Self {
        self.status = input;
        self
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you've configured it. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FirewallStatusValue> {
        &self.status
    }
    /// <p>The configuration sync state for the firewall. This summarizes the sync states reported in the <code>Config</code> settings for all of the Availability Zones where you have configured the firewall. </p>
    /// <p>When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. </p>
    /// <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates firewall readiness.</p>
    /// This field is required.
    pub fn configuration_sync_state_summary(mut self, input: crate::types::ConfigurationSyncState) -> Self {
        self.configuration_sync_state_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration sync state for the firewall. This summarizes the sync states reported in the <code>Config</code> settings for all of the Availability Zones where you have configured the firewall. </p>
    /// <p>When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. </p>
    /// <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates firewall readiness.</p>
    pub fn set_configuration_sync_state_summary(mut self, input: ::std::option::Option<crate::types::ConfigurationSyncState>) -> Self {
        self.configuration_sync_state_summary = input;
        self
    }
    /// <p>The configuration sync state for the firewall. This summarizes the sync states reported in the <code>Config</code> settings for all of the Availability Zones where you have configured the firewall. </p>
    /// <p>When you create a firewall or update its configuration, for example by adding a rule group to its firewall policy, Network Firewall distributes the configuration changes to all zones where the firewall is in use. This summary indicates whether the configuration changes have been applied everywhere. </p>
    /// <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates firewall readiness.</p>
    pub fn get_configuration_sync_state_summary(&self) -> &::std::option::Option<crate::types::ConfigurationSyncState> {
        &self.configuration_sync_state_summary
    }
    /// Adds a key-value pair to `sync_states`.
    ///
    /// To override the contents of this collection use [`set_sync_states`](Self::set_sync_states).
    ///
    /// <p>The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone and configuration object. </p>
    pub fn sync_states(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SyncState) -> Self {
        let mut hash_map = self.sync_states.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.sync_states = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone and configuration object. </p>
    pub fn set_sync_states(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SyncState>>,
    ) -> Self {
        self.sync_states = input;
        self
    }
    /// <p>The subnets that you've configured for use by the Network Firewall firewall. This contains one array element per Availability Zone where you've configured a subnet. These objects provide details of the information that is summarized in the <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone and configuration object. </p>
    pub fn get_sync_states(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SyncState>> {
        &self.sync_states
    }
    /// <p>Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.</p>
    pub fn capacity_usage_summary(mut self, input: crate::types::CapacityUsageSummary) -> Self {
        self.capacity_usage_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.</p>
    pub fn set_capacity_usage_summary(mut self, input: ::std::option::Option<crate::types::CapacityUsageSummary>) -> Self {
        self.capacity_usage_summary = input;
        self
    }
    /// <p>Describes the capacity usage of the resources contained in a firewall's reference sets. Network Firewall calclulates the capacity usage by taking an aggregated count of all of the resources used by all of the reference sets in a firewall.</p>
    pub fn get_capacity_usage_summary(&self) -> &::std::option::Option<crate::types::CapacityUsageSummary> {
        &self.capacity_usage_summary
    }
    /// Consumes the builder and constructs a [`FirewallStatus`](crate::types::FirewallStatus).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::FirewallStatusBuilder::status)
    /// - [`configuration_sync_state_summary`](crate::types::builders::FirewallStatusBuilder::configuration_sync_state_summary)
    pub fn build(self) -> ::std::result::Result<crate::types::FirewallStatus, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FirewallStatus {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building FirewallStatus",
                )
            })?,
            configuration_sync_state_summary: self.configuration_sync_state_summary.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configuration_sync_state_summary",
                    "configuration_sync_state_summary was not specified but it is required when building FirewallStatus",
                )
            })?,
            sync_states: self.sync_states,
            capacity_usage_summary: self.capacity_usage_summary,
        })
    }
}
