// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single port range specification. This is used for source and destination port ranges in the stateless rule <code>MatchAttributes</code>, <code>SourcePorts</code>, and <code>DestinationPorts</code> settings. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortRange {
    /// <p>The lower limit of the port range. This must be less than or equal to the <code>ToPort</code> specification. </p>
    #[doc(hidden)]
    pub from_port: i32,
    /// <p>The upper limit of the port range. This must be greater than or equal to the <code>FromPort</code> specification. </p>
    #[doc(hidden)]
    pub to_port: i32,
}
impl PortRange {
    /// <p>The lower limit of the port range. This must be less than or equal to the <code>ToPort</code> specification. </p>
    pub fn from_port(&self) -> i32 {
        self.from_port
    }
    /// <p>The upper limit of the port range. This must be greater than or equal to the <code>FromPort</code> specification. </p>
    pub fn to_port(&self) -> i32 {
        self.to_port
    }
}
impl PortRange {
    /// Creates a new builder-style object to manufacture [`PortRange`](crate::types::PortRange).
    pub fn builder() -> crate::types::builders::PortRangeBuilder {
        crate::types::builders::PortRangeBuilder::default()
    }
}

/// A builder for [`PortRange`](crate::types::PortRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortRangeBuilder {
    pub(crate) from_port: std::option::Option<i32>,
    pub(crate) to_port: std::option::Option<i32>,
}
impl PortRangeBuilder {
    /// <p>The lower limit of the port range. This must be less than or equal to the <code>ToPort</code> specification. </p>
    pub fn from_port(mut self, input: i32) -> Self {
        self.from_port = Some(input);
        self
    }
    /// <p>The lower limit of the port range. This must be less than or equal to the <code>ToPort</code> specification. </p>
    pub fn set_from_port(mut self, input: std::option::Option<i32>) -> Self {
        self.from_port = input;
        self
    }
    /// <p>The upper limit of the port range. This must be greater than or equal to the <code>FromPort</code> specification. </p>
    pub fn to_port(mut self, input: i32) -> Self {
        self.to_port = Some(input);
        self
    }
    /// <p>The upper limit of the port range. This must be greater than or equal to the <code>FromPort</code> specification. </p>
    pub fn set_to_port(mut self, input: std::option::Option<i32>) -> Self {
        self.to_port = input;
        self
    }
    /// Consumes the builder and constructs a [`PortRange`](crate::types::PortRange).
    pub fn build(self) -> crate::types::PortRange {
        crate::types::PortRange {
            from_port: self.from_port.unwrap_or_default(),
            to_port: self.to_port.unwrap_or_default(),
        }
    }
}
