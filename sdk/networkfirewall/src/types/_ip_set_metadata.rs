// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>General information about the IP set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpSetMetadata {
    /// <p>Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call <code>AvailableCIDRCount</code>.</p>
    #[doc(hidden)]
    pub resolved_cidr_count: std::option::Option<i32>,
}
impl IpSetMetadata {
    /// <p>Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call <code>AvailableCIDRCount</code>.</p>
    pub fn resolved_cidr_count(&self) -> std::option::Option<i32> {
        self.resolved_cidr_count
    }
}
impl IpSetMetadata {
    /// Creates a new builder-style object to manufacture [`IpSetMetadata`](crate::types::IpSetMetadata).
    pub fn builder() -> crate::types::builders::IpSetMetadataBuilder {
        crate::types::builders::IpSetMetadataBuilder::default()
    }
}

/// A builder for [`IpSetMetadata`](crate::types::IpSetMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpSetMetadataBuilder {
    pub(crate) resolved_cidr_count: std::option::Option<i32>,
}
impl IpSetMetadataBuilder {
    /// <p>Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call <code>AvailableCIDRCount</code>.</p>
    pub fn resolved_cidr_count(mut self, input: i32) -> Self {
        self.resolved_cidr_count = Some(input);
        self
    }
    /// <p>Describes the total number of CIDR blocks currently in use by the IP set references in a firewall. To determine how many CIDR blocks are available for you to use in a firewall, you can call <code>AvailableCIDRCount</code>.</p>
    pub fn set_resolved_cidr_count(mut self, input: std::option::Option<i32>) -> Self {
        self.resolved_cidr_count = input;
        self
    }
    /// Consumes the builder and constructs a [`IpSetMetadata`](crate::types::IpSetMetadata).
    pub fn build(self) -> crate::types::IpSetMetadata {
        crate::types::IpSetMetadata {
            resolved_cidr_count: self.resolved_cidr_count,
        }
    }
}
