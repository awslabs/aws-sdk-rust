// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFirewallOutput {
    /// <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
    /// <p>The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding <code>FirewallStatus</code>. You can retrieve both objects by calling <code>DescribeFirewall</code>.</p>
    #[doc(hidden)]
    pub firewall: std::option::Option<crate::types::Firewall>,
    /// <p>Detailed information about the current status of a <code>Firewall</code>. You can retrieve this for a firewall by calling <code>DescribeFirewall</code> and providing the firewall name and ARN.</p>
    #[doc(hidden)]
    pub firewall_status: std::option::Option<crate::types::FirewallStatus>,
    _request_id: Option<String>,
}
impl DeleteFirewallOutput {
    /// <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
    /// <p>The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding <code>FirewallStatus</code>. You can retrieve both objects by calling <code>DescribeFirewall</code>.</p>
    pub fn firewall(&self) -> std::option::Option<&crate::types::Firewall> {
        self.firewall.as_ref()
    }
    /// <p>Detailed information about the current status of a <code>Firewall</code>. You can retrieve this for a firewall by calling <code>DescribeFirewall</code> and providing the firewall name and ARN.</p>
    pub fn firewall_status(&self) -> std::option::Option<&crate::types::FirewallStatus> {
        self.firewall_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteFirewallOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteFirewallOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFirewallOutput`](crate::operation::delete_firewall::DeleteFirewallOutput).
    pub fn builder() -> crate::operation::delete_firewall::builders::DeleteFirewallOutputBuilder {
        crate::operation::delete_firewall::builders::DeleteFirewallOutputBuilder::default()
    }
}

/// A builder for [`DeleteFirewallOutput`](crate::operation::delete_firewall::DeleteFirewallOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteFirewallOutputBuilder {
    pub(crate) firewall: std::option::Option<crate::types::Firewall>,
    pub(crate) firewall_status: std::option::Option<crate::types::FirewallStatus>,
    _request_id: Option<String>,
}
impl DeleteFirewallOutputBuilder {
    /// <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
    /// <p>The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding <code>FirewallStatus</code>. You can retrieve both objects by calling <code>DescribeFirewall</code>.</p>
    pub fn firewall(mut self, input: crate::types::Firewall) -> Self {
        self.firewall = Some(input);
        self
    }
    /// <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
    /// <p>The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding <code>FirewallStatus</code>. You can retrieve both objects by calling <code>DescribeFirewall</code>.</p>
    pub fn set_firewall(mut self, input: std::option::Option<crate::types::Firewall>) -> Self {
        self.firewall = input;
        self
    }
    /// <p>Detailed information about the current status of a <code>Firewall</code>. You can retrieve this for a firewall by calling <code>DescribeFirewall</code> and providing the firewall name and ARN.</p>
    pub fn firewall_status(mut self, input: crate::types::FirewallStatus) -> Self {
        self.firewall_status = Some(input);
        self
    }
    /// <p>Detailed information about the current status of a <code>Firewall</code>. You can retrieve this for a firewall by calling <code>DescribeFirewall</code> and providing the firewall name and ARN.</p>
    pub fn set_firewall_status(
        mut self,
        input: std::option::Option<crate::types::FirewallStatus>,
    ) -> Self {
        self.firewall_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteFirewallOutput`](crate::operation::delete_firewall::DeleteFirewallOutput).
    pub fn build(self) -> crate::operation::delete_firewall::DeleteFirewallOutput {
        crate::operation::delete_firewall::DeleteFirewallOutput {
            firewall: self.firewall,
            firewall_status: self.firewall_status,
            _request_id: self._request_id,
        }
    }
}
