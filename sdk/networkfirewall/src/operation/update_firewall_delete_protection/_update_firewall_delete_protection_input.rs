// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFirewallDeleteProtectionInput {
    /// <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
    /// <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
    /// <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
    #[doc(hidden)]
    pub update_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    #[doc(hidden)]
    pub firewall_arn: std::option::Option<std::string::String>,
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    #[doc(hidden)]
    pub firewall_name: std::option::Option<std::string::String>,
    /// <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
    #[doc(hidden)]
    pub delete_protection: bool,
}
impl UpdateFirewallDeleteProtectionInput {
    /// <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
    /// <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
    /// <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
    pub fn update_token(&self) -> std::option::Option<&str> {
        self.update_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn firewall_arn(&self) -> std::option::Option<&str> {
        self.firewall_arn.as_deref()
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn firewall_name(&self) -> std::option::Option<&str> {
        self.firewall_name.as_deref()
    }
    /// <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
    pub fn delete_protection(&self) -> bool {
        self.delete_protection
    }
}
impl UpdateFirewallDeleteProtectionInput {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallDeleteProtectionInput`](crate::operation::update_firewall_delete_protection::UpdateFirewallDeleteProtectionInput).
    pub fn builder() -> crate::operation::update_firewall_delete_protection::builders::UpdateFirewallDeleteProtectionInputBuilder{
        crate::operation::update_firewall_delete_protection::builders::UpdateFirewallDeleteProtectionInputBuilder::default()
    }
}

/// A builder for [`UpdateFirewallDeleteProtectionInput`](crate::operation::update_firewall_delete_protection::UpdateFirewallDeleteProtectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFirewallDeleteProtectionInputBuilder {
    pub(crate) update_token: std::option::Option<std::string::String>,
    pub(crate) firewall_arn: std::option::Option<std::string::String>,
    pub(crate) firewall_name: std::option::Option<std::string::String>,
    pub(crate) delete_protection: std::option::Option<bool>,
}
impl UpdateFirewallDeleteProtectionInputBuilder {
    /// <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
    /// <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
    /// <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
    pub fn update_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.update_token = Some(input.into());
        self
    }
    /// <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
    /// <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
    /// <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
    pub fn set_update_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.update_token = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn firewall_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.firewall_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn set_firewall_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn firewall_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.firewall_name = Some(input.into());
        self
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    /// <p>You must specify the ARN or the name, and you can specify both. </p>
    pub fn set_firewall_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.firewall_name = input;
        self
    }
    /// <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
    pub fn delete_protection(mut self, input: bool) -> Self {
        self.delete_protection = Some(input);
        self
    }
    /// <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates that the firewall is protected against deletion. Use this setting to protect against accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
    pub fn set_delete_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.delete_protection = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFirewallDeleteProtectionInput`](crate::operation::update_firewall_delete_protection::UpdateFirewallDeleteProtectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_firewall_delete_protection::UpdateFirewallDeleteProtectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_firewall_delete_protection::UpdateFirewallDeleteProtectionInput {
                update_token: self.update_token
                ,
                firewall_arn: self.firewall_arn
                ,
                firewall_name: self.firewall_name
                ,
                delete_protection: self.delete_protection
                    .unwrap_or_default()
                ,
            }
        )
    }
}
