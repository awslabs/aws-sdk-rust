// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLoggingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    #[doc(hidden)]
    pub firewall_arn: std::option::Option<std::string::String>,
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    #[doc(hidden)]
    pub firewall_name: std::option::Option<std::string::String>,
    /// <p>Defines how Network Firewall performs logging for a <code>Firewall</code>. </p>
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::types::LoggingConfiguration>,
    _request_id: Option<String>,
}
impl UpdateLoggingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(&self) -> std::option::Option<&str> {
        self.firewall_arn.as_deref()
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    pub fn firewall_name(&self) -> std::option::Option<&str> {
        self.firewall_name.as_deref()
    }
    /// <p>Defines how Network Firewall performs logging for a <code>Firewall</code>. </p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLoggingConfigurationOutput`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput).
    pub fn builder() -> crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder{
        crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationOutputBuilder::default()
    }
}

/// A builder for [`UpdateLoggingConfigurationOutput`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLoggingConfigurationOutputBuilder {
    pub(crate) firewall_arn: std::option::Option<std::string::String>,
    pub(crate) firewall_name: std::option::Option<std::string::String>,
    pub(crate) logging_configuration: std::option::Option<crate::types::LoggingConfiguration>,
    _request_id: Option<String>,
}
impl UpdateLoggingConfigurationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.firewall_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn set_firewall_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    pub fn firewall_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.firewall_name = Some(input.into());
        self
    }
    /// <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
    pub fn set_firewall_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.firewall_name = input;
        self
    }
    /// <p>Defines how Network Firewall performs logging for a <code>Firewall</code>. </p>
    pub fn logging_configuration(mut self, input: crate::types::LoggingConfiguration) -> Self {
        self.logging_configuration = Some(input);
        self
    }
    /// <p>Defines how Network Firewall performs logging for a <code>Firewall</code>. </p>
    pub fn set_logging_configuration(
        mut self,
        input: std::option::Option<crate::types::LoggingConfiguration>,
    ) -> Self {
        self.logging_configuration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLoggingConfigurationOutput`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput {
        crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput {
            firewall_arn: self.firewall_arn,
            firewall_name: self.firewall_name,
            logging_configuration: self.logging_configuration,
            _request_id: self._request_id,
        }
    }
}
