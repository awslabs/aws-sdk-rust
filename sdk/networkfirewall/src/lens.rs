// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_firewall_policies_output_next_token(
    input: &crate::operation::list_firewall_policies::ListFirewallPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewalls_output_next_token(
    input: &crate::operation::list_firewalls::ListFirewallsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_rule_groups_output_next_token(
    input: &crate::operation::list_rule_groups::ListRuleGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_firewall_policies_output_firewall_policies(
    input: crate::operation::list_firewall_policies::ListFirewallPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FirewallPolicyMetadata>> {
    let input = match input.firewall_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_firewalls_output_firewalls(
    input: crate::operation::list_firewalls::ListFirewallsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FirewallMetadata>> {
    let input = match input.firewalls {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_rule_groups_output_rule_groups(
    input: crate::operation::list_rule_groups::ListRuleGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RuleGroupMetadata>> {
    let input = match input.rule_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
