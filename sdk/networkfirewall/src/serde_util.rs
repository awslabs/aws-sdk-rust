// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_firewall_policy_output_correct_errors(
    mut builder: crate::operation::create_firewall_policy::builders::CreateFirewallPolicyOutputBuilder,
) -> crate::operation::create_firewall_policy::builders::CreateFirewallPolicyOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.firewall_policy_response.is_none() {
        builder.firewall_policy_response = {
            let builder = crate::types::builders::FirewallPolicyResponseBuilder::default();
            crate::serde_util::firewall_policy_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_rule_group_output_correct_errors(
    mut builder: crate::operation::create_rule_group::builders::CreateRuleGroupOutputBuilder,
) -> crate::operation::create_rule_group::builders::CreateRuleGroupOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.rule_group_response.is_none() {
        builder.rule_group_response = {
            let builder = crate::types::builders::RuleGroupResponseBuilder::default();
            crate::serde_util::rule_group_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_tls_inspection_configuration_output_correct_errors(
    mut builder: crate::operation::create_tls_inspection_configuration::builders::CreateTlsInspectionConfigurationOutputBuilder,
) -> crate::operation::create_tls_inspection_configuration::builders::CreateTlsInspectionConfigurationOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.tls_inspection_configuration_response.is_none() {
        builder.tls_inspection_configuration_response = {
            let builder = crate::types::builders::TlsInspectionConfigurationResponseBuilder::default();
            crate::serde_util::tls_inspection_configuration_response_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn delete_firewall_policy_output_correct_errors(
    mut builder: crate::operation::delete_firewall_policy::builders::DeleteFirewallPolicyOutputBuilder,
) -> crate::operation::delete_firewall_policy::builders::DeleteFirewallPolicyOutputBuilder {
    if builder.firewall_policy_response.is_none() {
        builder.firewall_policy_response = {
            let builder = crate::types::builders::FirewallPolicyResponseBuilder::default();
            crate::serde_util::firewall_policy_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_rule_group_output_correct_errors(
    mut builder: crate::operation::delete_rule_group::builders::DeleteRuleGroupOutputBuilder,
) -> crate::operation::delete_rule_group::builders::DeleteRuleGroupOutputBuilder {
    if builder.rule_group_response.is_none() {
        builder.rule_group_response = {
            let builder = crate::types::builders::RuleGroupResponseBuilder::default();
            crate::serde_util::rule_group_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_tls_inspection_configuration_output_correct_errors(
    mut builder: crate::operation::delete_tls_inspection_configuration::builders::DeleteTlsInspectionConfigurationOutputBuilder,
) -> crate::operation::delete_tls_inspection_configuration::builders::DeleteTlsInspectionConfigurationOutputBuilder {
    if builder.tls_inspection_configuration_response.is_none() {
        builder.tls_inspection_configuration_response = {
            let builder = crate::types::builders::TlsInspectionConfigurationResponseBuilder::default();
            crate::serde_util::tls_inspection_configuration_response_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn describe_firewall_policy_output_correct_errors(
    mut builder: crate::operation::describe_firewall_policy::builders::DescribeFirewallPolicyOutputBuilder,
) -> crate::operation::describe_firewall_policy::builders::DescribeFirewallPolicyOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.firewall_policy_response.is_none() {
        builder.firewall_policy_response = {
            let builder = crate::types::builders::FirewallPolicyResponseBuilder::default();
            crate::serde_util::firewall_policy_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_rule_group_output_correct_errors(
    mut builder: crate::operation::describe_rule_group::builders::DescribeRuleGroupOutputBuilder,
) -> crate::operation::describe_rule_group::builders::DescribeRuleGroupOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.rule_group_response.is_none() {
        builder.rule_group_response = {
            let builder = crate::types::builders::RuleGroupResponseBuilder::default();
            crate::serde_util::rule_group_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_rule_group_metadata_output_correct_errors(
    mut builder: crate::operation::describe_rule_group_metadata::builders::DescribeRuleGroupMetadataOutputBuilder,
) -> crate::operation::describe_rule_group_metadata::builders::DescribeRuleGroupMetadataOutputBuilder {
    if builder.rule_group_arn.is_none() {
        builder.rule_group_arn = Some(Default::default())
    }
    if builder.rule_group_name.is_none() {
        builder.rule_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_tls_inspection_configuration_output_correct_errors(
    mut builder: crate::operation::describe_tls_inspection_configuration::builders::DescribeTlsInspectionConfigurationOutputBuilder,
) -> crate::operation::describe_tls_inspection_configuration::builders::DescribeTlsInspectionConfigurationOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.tls_inspection_configuration_response.is_none() {
        builder.tls_inspection_configuration_response = {
            let builder = crate::types::builders::TlsInspectionConfigurationResponseBuilder::default();
            crate::serde_util::tls_inspection_configuration_response_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn update_firewall_policy_output_correct_errors(
    mut builder: crate::operation::update_firewall_policy::builders::UpdateFirewallPolicyOutputBuilder,
) -> crate::operation::update_firewall_policy::builders::UpdateFirewallPolicyOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.firewall_policy_response.is_none() {
        builder.firewall_policy_response = {
            let builder = crate::types::builders::FirewallPolicyResponseBuilder::default();
            crate::serde_util::firewall_policy_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_rule_group_output_correct_errors(
    mut builder: crate::operation::update_rule_group::builders::UpdateRuleGroupOutputBuilder,
) -> crate::operation::update_rule_group::builders::UpdateRuleGroupOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.rule_group_response.is_none() {
        builder.rule_group_response = {
            let builder = crate::types::builders::RuleGroupResponseBuilder::default();
            crate::serde_util::rule_group_response_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_tls_inspection_configuration_output_correct_errors(
    mut builder: crate::operation::update_tls_inspection_configuration::builders::UpdateTlsInspectionConfigurationOutputBuilder,
) -> crate::operation::update_tls_inspection_configuration::builders::UpdateTlsInspectionConfigurationOutputBuilder {
    if builder.update_token.is_none() {
        builder.update_token = Some(Default::default())
    }
    if builder.tls_inspection_configuration_response.is_none() {
        builder.tls_inspection_configuration_response = {
            let builder = crate::types::builders::TlsInspectionConfigurationResponseBuilder::default();
            crate::serde_util::tls_inspection_configuration_response_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn firewall_policy_response_correct_errors(
    mut builder: crate::types::builders::FirewallPolicyResponseBuilder,
) -> crate::types::builders::FirewallPolicyResponseBuilder {
    if builder.firewall_policy_name.is_none() {
        builder.firewall_policy_name = Some(Default::default())
    }
    if builder.firewall_policy_arn.is_none() {
        builder.firewall_policy_arn = Some(Default::default())
    }
    if builder.firewall_policy_id.is_none() {
        builder.firewall_policy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_response_correct_errors(
    mut builder: crate::types::builders::RuleGroupResponseBuilder,
) -> crate::types::builders::RuleGroupResponseBuilder {
    if builder.rule_group_arn.is_none() {
        builder.rule_group_arn = Some(Default::default())
    }
    if builder.rule_group_name.is_none() {
        builder.rule_group_name = Some(Default::default())
    }
    if builder.rule_group_id.is_none() {
        builder.rule_group_id = Some(Default::default())
    }
    builder
}

pub(crate) fn tls_inspection_configuration_response_correct_errors(
    mut builder: crate::types::builders::TlsInspectionConfigurationResponseBuilder,
) -> crate::types::builders::TlsInspectionConfigurationResponseBuilder {
    if builder.tls_inspection_configuration_arn.is_none() {
        builder.tls_inspection_configuration_arn = Some(Default::default())
    }
    if builder.tls_inspection_configuration_name.is_none() {
        builder.tls_inspection_configuration_name = Some(Default::default())
    }
    if builder.tls_inspection_configuration_id.is_none() {
        builder.tls_inspection_configuration_id = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigurationBuilder,
) -> crate::types::builders::EncryptionConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    builder
}

pub(crate) fn firewall_correct_errors(mut builder: crate::types::builders::FirewallBuilder) -> crate::types::builders::FirewallBuilder {
    if builder.firewall_policy_arn.is_none() {
        builder.firewall_policy_arn = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_mappings.is_none() {
        builder.subnet_mappings = Some(Default::default())
    }
    if builder.firewall_id.is_none() {
        builder.firewall_id = Some(Default::default())
    }
    builder
}

pub(crate) fn firewall_policy_correct_errors(
    mut builder: crate::types::builders::FirewallPolicyBuilder,
) -> crate::types::builders::FirewallPolicyBuilder {
    if builder.stateless_default_actions.is_none() {
        builder.stateless_default_actions = Some(Default::default())
    }
    if builder.stateless_fragment_default_actions.is_none() {
        builder.stateless_fragment_default_actions = Some(Default::default())
    }
    builder
}

pub(crate) fn firewall_status_correct_errors(
    mut builder: crate::types::builders::FirewallStatusBuilder,
) -> crate::types::builders::FirewallStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FirewallStatusValue>().ok()
    }
    if builder.configuration_sync_state_summary.is_none() {
        builder.configuration_sync_state_summary = "no value was set".parse::<crate::types::ConfigurationSyncState>().ok()
    }
    builder
}

pub(crate) fn logging_configuration_correct_errors(
    mut builder: crate::types::builders::LoggingConfigurationBuilder,
) -> crate::types::builders::LoggingConfigurationBuilder {
    if builder.log_destination_configs.is_none() {
        builder.log_destination_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_group_correct_errors(mut builder: crate::types::builders::RuleGroupBuilder) -> crate::types::builders::RuleGroupBuilder {
    if builder.rules_source.is_none() {
        builder.rules_source = {
            let builder = crate::types::builders::RulesSourceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn subnet_mapping_correct_errors(
    mut builder: crate::types::builders::SubnetMappingBuilder,
) -> crate::types::builders::SubnetMappingBuilder {
    if builder.subnet_id.is_none() {
        builder.subnet_id = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_action_correct_errors(mut builder: crate::types::builders::CustomActionBuilder) -> crate::types::builders::CustomActionBuilder {
    if builder.action_name.is_none() {
        builder.action_name = Some(Default::default())
    }
    if builder.action_definition.is_none() {
        builder.action_definition = {
            let builder = crate::types::builders::ActionDefinitionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn log_destination_config_correct_errors(
    mut builder: crate::types::builders::LogDestinationConfigBuilder,
) -> crate::types::builders::LogDestinationConfigBuilder {
    if builder.log_type.is_none() {
        builder.log_type = "no value was set".parse::<crate::types::LogType>().ok()
    }
    if builder.log_destination_type.is_none() {
        builder.log_destination_type = "no value was set".parse::<crate::types::LogDestinationType>().ok()
    }
    if builder.log_destination.is_none() {
        builder.log_destination = Some(Default::default())
    }
    builder
}

pub(crate) fn rules_source_list_correct_errors(
    mut builder: crate::types::builders::RulesSourceListBuilder,
) -> crate::types::builders::RulesSourceListBuilder {
    if builder.targets.is_none() {
        builder.targets = Some(Default::default())
    }
    if builder.target_types.is_none() {
        builder.target_types = Some(Default::default())
    }
    if builder.generated_rules_type.is_none() {
        builder.generated_rules_type = "no value was set".parse::<crate::types::GeneratedRulesType>().ok()
    }
    builder
}

pub(crate) fn stateful_rule_group_reference_correct_errors(
    mut builder: crate::types::builders::StatefulRuleGroupReferenceBuilder,
) -> crate::types::builders::StatefulRuleGroupReferenceBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn stateless_rule_group_reference_correct_errors(
    mut builder: crate::types::builders::StatelessRuleGroupReferenceBuilder,
) -> crate::types::builders::StatelessRuleGroupReferenceBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    builder
}

pub(crate) fn stateless_rules_and_custom_actions_correct_errors(
    mut builder: crate::types::builders::StatelessRulesAndCustomActionsBuilder,
) -> crate::types::builders::StatelessRulesAndCustomActionsBuilder {
    if builder.stateless_rules.is_none() {
        builder.stateless_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn ip_set_correct_errors(mut builder: crate::types::builders::IpSetBuilder) -> crate::types::builders::IpSetBuilder {
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    builder
}

pub(crate) fn stateful_rule_correct_errors(mut builder: crate::types::builders::StatefulRuleBuilder) -> crate::types::builders::StatefulRuleBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::StatefulAction>().ok()
    }
    if builder.header.is_none() {
        builder.header = {
            let builder = crate::types::builders::HeaderBuilder::default();
            crate::serde_util::header_correct_errors(builder).build().ok()
        }
    }
    if builder.rule_options.is_none() {
        builder.rule_options = Some(Default::default())
    }
    builder
}

pub(crate) fn header_correct_errors(mut builder: crate::types::builders::HeaderBuilder) -> crate::types::builders::HeaderBuilder {
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::StatefulRuleProtocol>().ok()
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.source_port.is_none() {
        builder.source_port = Some(Default::default())
    }
    if builder.direction.is_none() {
        builder.direction = "no value was set".parse::<crate::types::StatefulRuleDirection>().ok()
    }
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    if builder.destination_port.is_none() {
        builder.destination_port = Some(Default::default())
    }
    builder
}

pub(crate) fn publish_metric_action_correct_errors(
    mut builder: crate::types::builders::PublishMetricActionBuilder,
) -> crate::types::builders::PublishMetricActionBuilder {
    if builder.dimensions.is_none() {
        builder.dimensions = Some(Default::default())
    }
    builder
}

pub(crate) fn stateless_rule_correct_errors(
    mut builder: crate::types::builders::StatelessRuleBuilder,
) -> crate::types::builders::StatelessRuleBuilder {
    if builder.rule_definition.is_none() {
        builder.rule_definition = {
            let builder = crate::types::builders::RuleDefinitionBuilder::default();
            crate::serde_util::rule_definition_correct_errors(builder).build().ok()
        }
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_definition_correct_errors(
    mut builder: crate::types::builders::RuleDefinitionBuilder,
) -> crate::types::builders::RuleDefinitionBuilder {
    if builder.match_attributes.is_none() {
        builder.match_attributes = {
            let builder = crate::types::builders::MatchAttributesBuilder::default();
            Some(builder.build())
        }
    }
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_option_correct_errors(mut builder: crate::types::builders::RuleOptionBuilder) -> crate::types::builders::RuleOptionBuilder {
    if builder.keyword.is_none() {
        builder.keyword = Some(Default::default())
    }
    builder
}

pub(crate) fn address_correct_errors(mut builder: crate::types::builders::AddressBuilder) -> crate::types::builders::AddressBuilder {
    if builder.address_definition.is_none() {
        builder.address_definition = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_correct_errors(mut builder: crate::types::builders::DimensionBuilder) -> crate::types::builders::DimensionBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn port_range_correct_errors(mut builder: crate::types::builders::PortRangeBuilder) -> crate::types::builders::PortRangeBuilder {
    if builder.from_port.is_none() {
        builder.from_port = Some(Default::default())
    }
    if builder.to_port.is_none() {
        builder.to_port = Some(Default::default())
    }
    builder
}

pub(crate) fn tcp_flag_field_correct_errors(mut builder: crate::types::builders::TcpFlagFieldBuilder) -> crate::types::builders::TcpFlagFieldBuilder {
    if builder.flags.is_none() {
        builder.flags = Some(Default::default())
    }
    builder
}
