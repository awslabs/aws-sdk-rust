// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates a <a>FirewallPolicy</a> to a <a>Firewall</a>. </p>
/// <p>A firewall policy defines how to monitor and manage your VPC network traffic, using a
/// collection of inspection rule groups and other settings. Each firewall requires one
/// firewall policy association, and you can use the same firewall policy for multiple
/// firewalls. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateFirewallPolicy {
    _private: (),
}
impl AssociateFirewallPolicy {
    /// Creates a new builder-style object to manufacture [`AssociateFirewallPolicyInput`](crate::input::AssociateFirewallPolicyInput)
    pub fn builder() -> crate::input::associate_firewall_policy_input::Builder {
        crate::input::associate_firewall_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateFirewallPolicy {
    type Output = std::result::Result<
        crate::output::AssociateFirewallPolicyOutput,
        crate::error::AssociateFirewallPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_firewall_policy_error(response)
        } else {
            crate::operation_deser::parse_associate_firewall_policy_response(response)
        }
    }
}

/// <p>Associates the specified subnets in the Amazon VPC to the firewall. You can specify one
/// subnet for each of the Availability Zones that the VPC spans. </p>
/// <p>This request creates an AWS Network Firewall firewall endpoint in each of the subnets. To
/// enable the firewall's protections, you must also modify the VPC's route tables for each
/// subnet's Availability Zone, to redirect the traffic that's coming into and going out of the
/// zone through the firewall endpoint. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateSubnets {
    _private: (),
}
impl AssociateSubnets {
    /// Creates a new builder-style object to manufacture [`AssociateSubnetsInput`](crate::input::AssociateSubnetsInput)
    pub fn builder() -> crate::input::associate_subnets_input::Builder {
        crate::input::associate_subnets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateSubnets {
    type Output = std::result::Result<
        crate::output::AssociateSubnetsOutput,
        crate::error::AssociateSubnetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_subnets_error(response)
        } else {
            crate::operation_deser::parse_associate_subnets_response(response)
        }
    }
}

/// <p>Creates an AWS Network Firewall <a>Firewall</a> and accompanying <a>FirewallStatus</a> for a VPC. </p>
/// <p>The firewall defines the configuration settings for an AWS Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall AWS resource. </p>
/// <p>After you create a firewall, you can provide additional settings, like the logging configuration. </p>
/// <p>To update the settings for a firewall, you use the operations that apply to the settings
/// themselves, for example <a>UpdateLoggingConfiguration</a>, <a>AssociateSubnets</a>, and <a>UpdateFirewallDeleteProtection</a>. </p>
/// <p>To manage a firewall's tags, use the standard AWS resource tagging operations, <a>ListTagsForResource</a>, <a>TagResource</a>, and <a>UntagResource</a>.</p>
/// <p>To retrieve information about firewalls, use <a>ListFirewalls</a> and <a>DescribeFirewall</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFirewall {
    _private: (),
}
impl CreateFirewall {
    /// Creates a new builder-style object to manufacture [`CreateFirewallInput`](crate::input::CreateFirewallInput)
    pub fn builder() -> crate::input::create_firewall_input::Builder {
        crate::input::create_firewall_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFirewall {
    type Output =
        std::result::Result<crate::output::CreateFirewallOutput, crate::error::CreateFirewallError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_firewall_error(response)
        } else {
            crate::operation_deser::parse_create_firewall_response(response)
        }
    }
}

/// <p>Creates the firewall policy for the firewall according to the specifications. </p>
/// <p>An AWS Network Firewall firewall policy defines the behavior of a firewall, in a collection of
/// stateless and stateful rule groups and other settings. You can use one firewall policy for
/// multiple firewalls. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFirewallPolicy {
    _private: (),
}
impl CreateFirewallPolicy {
    /// Creates a new builder-style object to manufacture [`CreateFirewallPolicyInput`](crate::input::CreateFirewallPolicyInput)
    pub fn builder() -> crate::input::create_firewall_policy_input::Builder {
        crate::input::create_firewall_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFirewallPolicy {
    type Output = std::result::Result<
        crate::output::CreateFirewallPolicyOutput,
        crate::error::CreateFirewallPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_firewall_policy_error(response)
        } else {
            crate::operation_deser::parse_create_firewall_policy_response(response)
        }
    }
}

/// <p>Creates the specified stateless or stateful rule group, which includes the rules for
/// network traffic inspection, a capacity setting, and tags. </p>
/// <p>You provide your rule group specification in your request using either
/// <code>RuleGroup</code> or <code>Rules</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRuleGroup {
    _private: (),
}
impl CreateRuleGroup {
    /// Creates a new builder-style object to manufacture [`CreateRuleGroupInput`](crate::input::CreateRuleGroupInput)
    pub fn builder() -> crate::input::create_rule_group_input::Builder {
        crate::input::create_rule_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRuleGroup {
    type Output = std::result::Result<
        crate::output::CreateRuleGroupOutput,
        crate::error::CreateRuleGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_rule_group_error(response)
        } else {
            crate::operation_deser::parse_create_rule_group_response(response)
        }
    }
}

/// <p>Deletes the specified <a>Firewall</a> and its <a>FirewallStatus</a>. This operation requires the firewall's <code>DeleteProtection</code> flag to be
/// <code>FALSE</code>. You can't revert this operation. </p>
/// <p>You can check whether a firewall is
/// in use by reviewing the route tables for the Availability Zones where you have
/// firewall subnet mappings. Retrieve the subnet mappings by calling <a>DescribeFirewall</a>.
/// You define and update the route tables through Amazon VPC. As needed, update the route tables for the
/// zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints,
/// you can remove the firewall safely.</p>
/// <p>To delete a firewall, remove the delete protection if you need to using <a>UpdateFirewallDeleteProtection</a>,
/// then delete the firewall by calling <a>DeleteFirewall</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFirewall {
    _private: (),
}
impl DeleteFirewall {
    /// Creates a new builder-style object to manufacture [`DeleteFirewallInput`](crate::input::DeleteFirewallInput)
    pub fn builder() -> crate::input::delete_firewall_input::Builder {
        crate::input::delete_firewall_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFirewall {
    type Output =
        std::result::Result<crate::output::DeleteFirewallOutput, crate::error::DeleteFirewallError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_firewall_error(response)
        } else {
            crate::operation_deser::parse_delete_firewall_response(response)
        }
    }
}

/// <p>Deletes the specified <a>FirewallPolicy</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFirewallPolicy {
    _private: (),
}
impl DeleteFirewallPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteFirewallPolicyInput`](crate::input::DeleteFirewallPolicyInput)
    pub fn builder() -> crate::input::delete_firewall_policy_input::Builder {
        crate::input::delete_firewall_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFirewallPolicy {
    type Output = std::result::Result<
        crate::output::DeleteFirewallPolicyOutput,
        crate::error::DeleteFirewallPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_firewall_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_firewall_policy_response(response)
        }
    }
}

/// <p>Deletes a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteResourcePolicy {
    _private: (),
}
impl DeleteResourcePolicy {
    /// Creates a new builder-style object to manufacture [`DeleteResourcePolicyInput`](crate::input::DeleteResourcePolicyInput)
    pub fn builder() -> crate::input::delete_resource_policy_input::Builder {
        crate::input::delete_resource_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteResourcePolicy {
    type Output = std::result::Result<
        crate::output::DeleteResourcePolicyOutput,
        crate::error::DeleteResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_resource_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_resource_policy_response(response)
        }
    }
}

/// <p>Deletes the specified <a>RuleGroup</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRuleGroup {
    _private: (),
}
impl DeleteRuleGroup {
    /// Creates a new builder-style object to manufacture [`DeleteRuleGroupInput`](crate::input::DeleteRuleGroupInput)
    pub fn builder() -> crate::input::delete_rule_group_input::Builder {
        crate::input::delete_rule_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRuleGroup {
    type Output = std::result::Result<
        crate::output::DeleteRuleGroupOutput,
        crate::error::DeleteRuleGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_rule_group_error(response)
        } else {
            crate::operation_deser::parse_delete_rule_group_response(response)
        }
    }
}

/// <p>Returns the data objects for the specified firewall. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFirewall {
    _private: (),
}
impl DescribeFirewall {
    /// Creates a new builder-style object to manufacture [`DescribeFirewallInput`](crate::input::DescribeFirewallInput)
    pub fn builder() -> crate::input::describe_firewall_input::Builder {
        crate::input::describe_firewall_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFirewall {
    type Output = std::result::Result<
        crate::output::DescribeFirewallOutput,
        crate::error::DescribeFirewallError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_firewall_error(response)
        } else {
            crate::operation_deser::parse_describe_firewall_response(response)
        }
    }
}

/// <p>Returns the data objects for the specified firewall policy. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFirewallPolicy {
    _private: (),
}
impl DescribeFirewallPolicy {
    /// Creates a new builder-style object to manufacture [`DescribeFirewallPolicyInput`](crate::input::DescribeFirewallPolicyInput)
    pub fn builder() -> crate::input::describe_firewall_policy_input::Builder {
        crate::input::describe_firewall_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFirewallPolicy {
    type Output = std::result::Result<
        crate::output::DescribeFirewallPolicyOutput,
        crate::error::DescribeFirewallPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_firewall_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_firewall_policy_response(response)
        }
    }
}

/// <p>Returns the logging configuration for the specified firewall. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLoggingConfiguration {
    _private: (),
}
impl DescribeLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeLoggingConfigurationInput`](crate::input::DescribeLoggingConfigurationInput)
    pub fn builder() -> crate::input::describe_logging_configuration_input::Builder {
        crate::input::describe_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeLoggingConfigurationOutput,
        crate::error::DescribeLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_logging_configuration_response(response)
        }
    }
}

/// <p>Retrieves a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeResourcePolicy {
    _private: (),
}
impl DescribeResourcePolicy {
    /// Creates a new builder-style object to manufacture [`DescribeResourcePolicyInput`](crate::input::DescribeResourcePolicyInput)
    pub fn builder() -> crate::input::describe_resource_policy_input::Builder {
        crate::input::describe_resource_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeResourcePolicy {
    type Output = std::result::Result<
        crate::output::DescribeResourcePolicyOutput,
        crate::error::DescribeResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_resource_policy_error(response)
        } else {
            crate::operation_deser::parse_describe_resource_policy_response(response)
        }
    }
}

/// <p>Returns the data objects for the specified rule group. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRuleGroup {
    _private: (),
}
impl DescribeRuleGroup {
    /// Creates a new builder-style object to manufacture [`DescribeRuleGroupInput`](crate::input::DescribeRuleGroupInput)
    pub fn builder() -> crate::input::describe_rule_group_input::Builder {
        crate::input::describe_rule_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRuleGroup {
    type Output = std::result::Result<
        crate::output::DescribeRuleGroupOutput,
        crate::error::DescribeRuleGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_rule_group_error(response)
        } else {
            crate::operation_deser::parse_describe_rule_group_response(response)
        }
    }
}

/// <p>Removes the specified subnet associations from the firewall. This removes the
/// firewall endpoints from the subnets and removes any network filtering protections that the endpoints
/// were providing.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateSubnets {
    _private: (),
}
impl DisassociateSubnets {
    /// Creates a new builder-style object to manufacture [`DisassociateSubnetsInput`](crate::input::DisassociateSubnetsInput)
    pub fn builder() -> crate::input::disassociate_subnets_input::Builder {
        crate::input::disassociate_subnets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateSubnets {
    type Output = std::result::Result<
        crate::output::DisassociateSubnetsOutput,
        crate::error::DisassociateSubnetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_subnets_error(response)
        } else {
            crate::operation_deser::parse_disassociate_subnets_response(response)
        }
    }
}

/// <p>Retrieves the metadata for the firewall policies that you have defined. Depending on
/// your setting for max results and the number of firewall policies, a single call might not
/// return the full list. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFirewallPolicies {
    _private: (),
}
impl ListFirewallPolicies {
    /// Creates a new builder-style object to manufacture [`ListFirewallPoliciesInput`](crate::input::ListFirewallPoliciesInput)
    pub fn builder() -> crate::input::list_firewall_policies_input::Builder {
        crate::input::list_firewall_policies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFirewallPolicies {
    type Output = std::result::Result<
        crate::output::ListFirewallPoliciesOutput,
        crate::error::ListFirewallPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_firewall_policies_error(response)
        } else {
            crate::operation_deser::parse_list_firewall_policies_response(response)
        }
    }
}

/// <p>Retrieves the metadata for the firewalls that you have defined. If you provide VPC
/// identifiers in your request, this returns only the firewalls for those VPCs.</p>
/// <p>Depending on your setting for max results and the number of firewalls, a single call
/// might not return the full list. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFirewalls {
    _private: (),
}
impl ListFirewalls {
    /// Creates a new builder-style object to manufacture [`ListFirewallsInput`](crate::input::ListFirewallsInput)
    pub fn builder() -> crate::input::list_firewalls_input::Builder {
        crate::input::list_firewalls_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListFirewalls {
    type Output =
        std::result::Result<crate::output::ListFirewallsOutput, crate::error::ListFirewallsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_firewalls_error(response)
        } else {
            crate::operation_deser::parse_list_firewalls_response(response)
        }
    }
}

/// <p>Retrieves the metadata for the rule groups that you have defined. Depending on your
/// setting for max results and the number of rule groups, a single call might not return the
/// full list. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRuleGroups {
    _private: (),
}
impl ListRuleGroups {
    /// Creates a new builder-style object to manufacture [`ListRuleGroupsInput`](crate::input::ListRuleGroupsInput)
    pub fn builder() -> crate::input::list_rule_groups_input::Builder {
        crate::input::list_rule_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRuleGroups {
    type Output =
        std::result::Result<crate::output::ListRuleGroupsOutput, crate::error::ListRuleGroupsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_rule_groups_error(response)
        } else {
            crate::operation_deser::parse_list_rule_groups_response(response)
        }
    }
}

/// <p>Retrieves the tags associated with the specified resource. Tags are key:value pairs that
/// you can use to categorize and manage your resources, for purposes like billing. For
/// example, you might set the tag key to "customer" and the value to the customer name or ID.
/// You can specify one or more tags to add to each AWS resource, up to 50 tags for a
/// resource.</p>
/// <p>You can tag the AWS resources that you manage through AWS Network Firewall: firewalls, firewall
/// policies, and rule groups. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Creates or updates an AWS Identity and Access Management policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the AWS Resource Access Manager (RAM) service
/// to manage resource sharing for Network Firewall. </p>
/// <p>Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform. </p>
/// <p>When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy. </p>
/// <ul>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html">GetResourceShareInvitations</a> - Returns the Amazon Resource Names (ARNs) of the resource share invitations.  </p>
/// </li>
/// <li>
/// <p>
/// <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html">AcceptResourceShareInvitation</a> - Accepts the share invitation for a specified resource share. </p>
/// </li>
/// </ul>
/// <p>For additional information about resource sharing using RAM, see <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html">AWS Resource Access Manager User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutResourcePolicy {
    _private: (),
}
impl PutResourcePolicy {
    /// Creates a new builder-style object to manufacture [`PutResourcePolicyInput`](crate::input::PutResourcePolicyInput)
    pub fn builder() -> crate::input::put_resource_policy_input::Builder {
        crate::input::put_resource_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutResourcePolicy {
    type Output = std::result::Result<
        crate::output::PutResourcePolicyOutput,
        crate::error::PutResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_resource_policy_error(response)
        } else {
            crate::operation_deser::parse_put_resource_policy_response(response)
        }
    }
}

/// <p>Adds the specified tags to the specified resource. Tags are key:value pairs that you can
/// use to categorize and manage your resources, for purposes like billing. For example, you
/// might set the tag key to "customer" and the value to the customer name or ID. You can
/// specify one or more tags to add to each AWS resource, up to 50 tags for a resource.</p>
/// <p>You can tag the AWS resources that you manage through AWS Network Firewall: firewalls, firewall
/// policies, and rule groups. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes the tags with the specified keys from the specified resource. Tags are key:value
/// pairs that you can use to categorize and manage your resources, for purposes like billing.
/// For example, you might set the tag key to "customer" and the value to the customer name or
/// ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a
/// resource.</p>
/// <p>You can manage tags for the AWS resources that you manage through AWS Network Firewall:
/// firewalls, firewall policies, and rule groups. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Modifies the flag, <code>DeleteProtection</code>, which indicates whether it is possible
/// to delete the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected
/// against deletion. This setting helps protect against accidentally deleting a firewall
/// that's in use. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFirewallDeleteProtection {
    _private: (),
}
impl UpdateFirewallDeleteProtection {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallDeleteProtectionInput`](crate::input::UpdateFirewallDeleteProtectionInput)
    pub fn builder() -> crate::input::update_firewall_delete_protection_input::Builder {
        crate::input::update_firewall_delete_protection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFirewallDeleteProtection {
    type Output = std::result::Result<
        crate::output::UpdateFirewallDeleteProtectionOutput,
        crate::error::UpdateFirewallDeleteProtectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_firewall_delete_protection_error(response)
        } else {
            crate::operation_deser::parse_update_firewall_delete_protection_response(response)
        }
    }
}

/// <p>Modifies the description for the specified firewall. Use the description to help you
/// identify the firewall when you're working with it. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFirewallDescription {
    _private: (),
}
impl UpdateFirewallDescription {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallDescriptionInput`](crate::input::UpdateFirewallDescriptionInput)
    pub fn builder() -> crate::input::update_firewall_description_input::Builder {
        crate::input::update_firewall_description_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFirewallDescription {
    type Output = std::result::Result<
        crate::output::UpdateFirewallDescriptionOutput,
        crate::error::UpdateFirewallDescriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_firewall_description_error(response)
        } else {
            crate::operation_deser::parse_update_firewall_description_response(response)
        }
    }
}

/// <p>Updates the properties of the specified firewall policy.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFirewallPolicy {
    _private: (),
}
impl UpdateFirewallPolicy {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallPolicyInput`](crate::input::UpdateFirewallPolicyInput)
    pub fn builder() -> crate::input::update_firewall_policy_input::Builder {
        crate::input::update_firewall_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFirewallPolicy {
    type Output = std::result::Result<
        crate::output::UpdateFirewallPolicyOutput,
        crate::error::UpdateFirewallPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_firewall_policy_error(response)
        } else {
            crate::operation_deser::parse_update_firewall_policy_response(response)
        }
    }
}

/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFirewallPolicyChangeProtection {
    _private: (),
}
impl UpdateFirewallPolicyChangeProtection {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallPolicyChangeProtectionInput`](crate::input::UpdateFirewallPolicyChangeProtectionInput)
    pub fn builder() -> crate::input::update_firewall_policy_change_protection_input::Builder {
        crate::input::update_firewall_policy_change_protection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateFirewallPolicyChangeProtection {
    type Output = std::result::Result<
        crate::output::UpdateFirewallPolicyChangeProtectionOutput,
        crate::error::UpdateFirewallPolicyChangeProtectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_firewall_policy_change_protection_error(response)
        } else {
            crate::operation_deser::parse_update_firewall_policy_change_protection_response(
                response,
            )
        }
    }
}

/// <p>Sets the logging configuration for the specified firewall. </p>
/// <p>To change the logging configuration, retrieve the <a>LoggingConfiguration</a> by calling <a>DescribeLoggingConfiguration</a>, then change it and provide
/// the modified object to this update call. You must change the logging configuration one
/// <a>LogDestinationConfig</a> at a time inside the retrieved <a>LoggingConfiguration</a> object. </p>
/// <p>You can perform only one of the following actions in any call to
/// <code>UpdateLoggingConfiguration</code>: </p>
/// <ul>
/// <li>
/// <p>Create a new log destination object by adding a single
/// <code>LogDestinationConfig</code> array element to
/// <code>LogDestinationConfigs</code>.</p>
/// </li>
/// <li>
/// <p>Delete a log destination object by removing a single
/// <code>LogDestinationConfig</code> array element from
/// <code>LogDestinationConfigs</code>.</p>
/// </li>
/// <li>
/// <p>Change the <code>LogDestination</code> setting in a single
/// <code>LogDestinationConfig</code> array element.</p>
/// </li>
/// </ul>
/// <p>You can't change the <code>LogDestinationType</code> or <code>LogType</code> in a
/// <code>LogDestinationConfig</code>. To change these settings, delete the existing
/// <code>LogDestinationConfig</code> object and create a new one, using two separate calls
/// to this update operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLoggingConfiguration {
    _private: (),
}
impl UpdateLoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateLoggingConfigurationInput`](crate::input::UpdateLoggingConfigurationInput)
    pub fn builder() -> crate::input::update_logging_configuration_input::Builder {
        crate::input::update_logging_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateLoggingConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateLoggingConfigurationOutput,
        crate::error::UpdateLoggingConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_logging_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_logging_configuration_response(response)
        }
    }
}

/// <p>Updates the rule settings for the specified rule group. You use a rule group by
/// reference in one or more firewall policies. When you modify a rule group, you modify all
/// firewall policies that use the rule group. </p>
/// <p>To update a rule group, first call <a>DescribeRuleGroup</a> to retrieve the
/// current <a>RuleGroup</a> object, update the object as needed, and then provide
/// the updated object to this call. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRuleGroup {
    _private: (),
}
impl UpdateRuleGroup {
    /// Creates a new builder-style object to manufacture [`UpdateRuleGroupInput`](crate::input::UpdateRuleGroupInput)
    pub fn builder() -> crate::input::update_rule_group_input::Builder {
        crate::input::update_rule_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRuleGroup {
    type Output = std::result::Result<
        crate::output::UpdateRuleGroupOutput,
        crate::error::UpdateRuleGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_rule_group_error(response)
        } else {
            crate::operation_deser::parse_update_rule_group_response(response)
        }
    }
}

/// <p></p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSubnetChangeProtection {
    _private: (),
}
impl UpdateSubnetChangeProtection {
    /// Creates a new builder-style object to manufacture [`UpdateSubnetChangeProtectionInput`](crate::input::UpdateSubnetChangeProtectionInput)
    pub fn builder() -> crate::input::update_subnet_change_protection_input::Builder {
        crate::input::update_subnet_change_protection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSubnetChangeProtection {
    type Output = std::result::Result<
        crate::output::UpdateSubnetChangeProtectionOutput,
        crate::error::UpdateSubnetChangeProtectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_subnet_change_protection_error(response)
        } else {
            crate::operation_deser::parse_update_subnet_change_protection_response(response)
        }
    }
}
