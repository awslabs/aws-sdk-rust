// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_domain_output_correct_errors(
    mut builder: crate::operation::create_domain::builders::CreateDomainOutputBuilder,
) -> crate::operation::create_domain::builders::CreateDomainOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.default_expiration_days.is_none() {
        builder.default_expiration_days = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_event_stream_output_correct_errors(
    mut builder: crate::operation::create_event_stream::builders::CreateEventStreamOutputBuilder,
) -> crate::operation::create_event_stream::builders::CreateEventStreamOutputBuilder {
    if builder.event_stream_arn.is_none() {
        builder.event_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_integration_workflow_output_correct_errors(
    mut builder: crate::operation::create_integration_workflow::builders::CreateIntegrationWorkflowOutputBuilder,
) -> crate::operation::create_integration_workflow::builders::CreateIntegrationWorkflowOutputBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_profile_output_correct_errors(
    mut builder: crate::operation::create_profile::builders::CreateProfileOutputBuilder,
) -> crate::operation::create_profile::builders::CreateProfileOutputBuilder {
    if builder.profile_id.is_none() {
        builder.profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_domain_output_correct_errors(
    mut builder: crate::operation::delete_domain::builders::DeleteDomainOutputBuilder,
) -> crate::operation::delete_domain::builders::DeleteDomainOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_integration_output_correct_errors(
    mut builder: crate::operation::delete_integration::builders::DeleteIntegrationOutputBuilder,
) -> crate::operation::delete_integration::builders::DeleteIntegrationOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_profile_object_type_output_correct_errors(
    mut builder: crate::operation::delete_profile_object_type::builders::DeleteProfileObjectTypeOutputBuilder,
) -> crate::operation::delete_profile_object_type::builders::DeleteProfileObjectTypeOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_auto_merging_preview_output_correct_errors(
    mut builder: crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewOutputBuilder,
) -> crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_domain_output_correct_errors(
    mut builder: crate::operation::get_domain::builders::GetDomainOutputBuilder,
) -> crate::operation::get_domain::builders::GetDomainOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_event_stream_output_correct_errors(
    mut builder: crate::operation::get_event_stream::builders::GetEventStreamOutputBuilder,
) -> crate::operation::get_event_stream::builders::GetEventStreamOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.event_stream_arn.is_none() {
        builder.event_stream_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::EventStreamState>().ok()
    }
    if builder.destination_details.is_none() {
        builder.destination_details = {
            let builder = crate::types::builders::EventStreamDestinationDetailsBuilder::default();
            crate::serde_util::event_stream_destination_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_integration_output_correct_errors(
    mut builder: crate::operation::get_integration::builders::GetIntegrationOutputBuilder,
) -> crate::operation::get_integration::builders::GetIntegrationOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_profile_object_type_output_correct_errors(
    mut builder: crate::operation::get_profile_object_type::builders::GetProfileObjectTypeOutputBuilder,
) -> crate::operation::get_profile_object_type::builders::GetProfileObjectTypeOutputBuilder {
    if builder.object_type_name.is_none() {
        builder.object_type_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn put_integration_output_correct_errors(
    mut builder: crate::operation::put_integration::builders::PutIntegrationOutputBuilder,
) -> crate::operation::put_integration::builders::PutIntegrationOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn put_profile_object_type_output_correct_errors(
    mut builder: crate::operation::put_profile_object_type::builders::PutProfileObjectTypeOutputBuilder,
) -> crate::operation::put_profile_object_type::builders::PutProfileObjectTypeOutputBuilder {
    if builder.object_type_name.is_none() {
        builder.object_type_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn update_domain_output_correct_errors(
    mut builder: crate::operation::update_domain::builders::UpdateDomainOutputBuilder,
) -> crate::operation::update_domain::builders::UpdateDomainOutputBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_profile_output_correct_errors(
    mut builder: crate::operation::update_profile::builders::UpdateProfileOutputBuilder,
) -> crate::operation::update_profile::builders::UpdateProfileOutputBuilder {
    if builder.profile_id.is_none() {
        builder.profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn event_stream_destination_details_correct_errors(
    mut builder: crate::types::builders::EventStreamDestinationDetailsBuilder,
) -> crate::types::builders::EventStreamDestinationDetailsBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EventStreamDestinationStatus>().ok()
    }
    builder
}

pub(crate) fn attribute_details_correct_errors(
    mut builder: crate::types::builders::AttributeDetailsBuilder,
) -> crate::types::builders::AttributeDetailsBuilder {
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_merging_correct_errors(mut builder: crate::types::builders::AutoMergingBuilder) -> crate::types::builders::AutoMergingBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn appflow_integration_workflow_attributes_correct_errors(
    mut builder: crate::types::builders::AppflowIntegrationWorkflowAttributesBuilder,
) -> crate::types::builders::AppflowIntegrationWorkflowAttributesBuilder {
    if builder.source_connector_type.is_none() {
        builder.source_connector_type = "no value was set".parse::<crate::types::SourceConnectorType>().ok()
    }
    if builder.connector_profile_name.is_none() {
        builder.connector_profile_name = Some(Default::default())
    }
    builder
}

pub(crate) fn appflow_integration_workflow_metrics_correct_errors(
    mut builder: crate::types::builders::AppflowIntegrationWorkflowMetricsBuilder,
) -> crate::types::builders::AppflowIntegrationWorkflowMetricsBuilder {
    if builder.records_processed.is_none() {
        builder.records_processed = Some(Default::default())
    }
    if builder.steps_completed.is_none() {
        builder.steps_completed = Some(Default::default())
    }
    if builder.total_steps.is_none() {
        builder.total_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_types_selector_correct_errors(
    mut builder: crate::types::builders::AttributeTypesSelectorBuilder,
) -> crate::types::builders::AttributeTypesSelectorBuilder {
    if builder.attribute_matching_model.is_none() {
        builder.attribute_matching_model = "no value was set".parse::<crate::types::AttributeMatchingModel>().ok()
    }
    builder
}

pub(crate) fn conflict_resolution_correct_errors(
    mut builder: crate::types::builders::ConflictResolutionBuilder,
) -> crate::types::builders::ConflictResolutionBuilder {
    if builder.conflict_resolving_model.is_none() {
        builder.conflict_resolving_model = "no value was set".parse::<crate::types::ConflictResolvingModel>().ok()
    }
    builder
}

pub(crate) fn consolidation_correct_errors(
    mut builder: crate::types::builders::ConsolidationBuilder,
) -> crate::types::builders::ConsolidationBuilder {
    if builder.matching_attributes_list.is_none() {
        builder.matching_attributes_list = Some(Default::default())
    }
    builder
}

pub(crate) fn event_stream_summary_correct_errors(
    mut builder: crate::types::builders::EventStreamSummaryBuilder,
) -> crate::types::builders::EventStreamSummaryBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.event_stream_name.is_none() {
        builder.event_stream_name = Some(Default::default())
    }
    if builder.event_stream_arn.is_none() {
        builder.event_stream_arn = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::EventStreamState>().ok()
    }
    builder
}

pub(crate) fn job_schedule_correct_errors(mut builder: crate::types::builders::JobScheduleBuilder) -> crate::types::builders::JobScheduleBuilder {
    if builder.day_of_the_week.is_none() {
        builder.day_of_the_week = "no value was set".parse::<crate::types::JobScheduleDayOfTheWeek>().ok()
    }
    if builder.time.is_none() {
        builder.time = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domain_item_correct_errors(
    mut builder: crate::types::builders::ListDomainItemBuilder,
) -> crate::types::builders::ListDomainItemBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_integration_item_correct_errors(
    mut builder: crate::types::builders::ListIntegrationItemBuilder,
) -> crate::types::builders::ListIntegrationItemBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_profile_object_type_item_correct_errors(
    mut builder: crate::types::builders::ListProfileObjectTypeItemBuilder,
) -> crate::types::builders::ListProfileObjectTypeItemBuilder {
    if builder.object_type_name.is_none() {
        builder.object_type_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workflows_item_correct_errors(
    mut builder: crate::types::builders::ListWorkflowsItemBuilder,
) -> crate::types::builders::ListWorkflowsItemBuilder {
    if builder.workflow_type.is_none() {
        builder.workflow_type = "no value was set".parse::<crate::types::WorkflowType>().ok()
    }
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.status_description.is_none() {
        builder.status_description = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn range_correct_errors(mut builder: crate::types::builders::RangeBuilder) -> crate::types::builders::RangeBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::Unit>().ok()
    }
    builder
}

pub(crate) fn threshold_correct_errors(mut builder: crate::types::builders::ThresholdBuilder) -> crate::types::builders::ThresholdBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::Operator>().ok()
    }
    builder
}

pub(crate) fn appflow_integration_workflow_step_correct_errors(
    mut builder: crate::types::builders::AppflowIntegrationWorkflowStepBuilder,
) -> crate::types::builders::AppflowIntegrationWorkflowStepBuilder {
    if builder.flow_name.is_none() {
        builder.flow_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    if builder.execution_message.is_none() {
        builder.execution_message = Some(Default::default())
    }
    if builder.records_processed.is_none() {
        builder.records_processed = Some(Default::default())
    }
    if builder.batch_records_start_time.is_none() {
        builder.batch_records_start_time = Some(Default::default())
    }
    if builder.batch_records_end_time.is_none() {
        builder.batch_records_end_time = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn attribute_item_correct_errors(
    mut builder: crate::types::builders::AttributeItemBuilder,
) -> crate::types::builders::AttributeItemBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_summary_correct_errors(
    mut builder: crate::types::builders::DestinationSummaryBuilder,
) -> crate::types::builders::DestinationSummaryBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EventStreamDestinationStatus>().ok()
    }
    builder
}

pub(crate) fn matching_rule_correct_errors(mut builder: crate::types::builders::MatchingRuleBuilder) -> crate::types::builders::MatchingRuleBuilder {
    if builder.rule.is_none() {
        builder.rule = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_exporting_config_correct_errors(
    mut builder: crate::types::builders::S3ExportingConfigBuilder,
) -> crate::types::builders::S3ExportingConfigBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    builder
}
