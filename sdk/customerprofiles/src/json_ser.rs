// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_profile_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddProfileKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.key_name {
        object.key("KeyName").string(var_1);
    }
    if let Some(var_2) = &input.profile_id {
        object.key("ProfileId").string(var_2);
    }
    if let Some(var_3) = &input.values {
        let mut array_4 = object.key("Values").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_6);
    }
    if let Some(var_7) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_7);
    }
    if let Some(var_8) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.matching {
        let mut object_10 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_crate_model_matching_request(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.account_number {
        object.key("AccountNumber").string(var_15);
    }
    if let Some(var_16) = &input.additional_information {
        object.key("AdditionalInformation").string(var_16);
    }
    if let Some(var_17) = &input.address {
        let mut object_18 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.attributes {
        let mut object_20 = object.key("Attributes").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22);
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.billing_address {
        let mut object_24 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.birth_date {
        object.key("BirthDate").string(var_25);
    }
    if let Some(var_26) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_26);
    }
    if let Some(var_27) = &input.business_name {
        object.key("BusinessName").string(var_27);
    }
    if let Some(var_28) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_28);
    }
    if let Some(var_29) = &input.email_address {
        object.key("EmailAddress").string(var_29);
    }
    if let Some(var_30) = &input.first_name {
        object.key("FirstName").string(var_30);
    }
    if let Some(var_31) = &input.gender {
        object.key("Gender").string(var_31.as_str());
    }
    if let Some(var_32) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_32);
    }
    if let Some(var_33) = &input.last_name {
        object.key("LastName").string(var_33);
    }
    if let Some(var_34) = &input.mailing_address {
        let mut object_35 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.middle_name {
        object.key("MiddleName").string(var_36);
    }
    if let Some(var_37) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_37);
    }
    if let Some(var_38) = &input.party_type {
        object.key("PartyType").string(var_38.as_str());
    }
    if let Some(var_39) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_39);
    }
    if let Some(var_40) = &input.phone_number {
        object.key("PhoneNumber").string(var_40);
    }
    if let Some(var_41) = &input.shipping_address {
        let mut object_42 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_address(&mut object_42, var_41)?;
        object_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.uri {
        object.key("Uri").string(var_43);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.profile_id {
        object.key("ProfileId").string(var_44);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.key_name {
        object.key("KeyName").string(var_45);
    }
    if let Some(var_46) = &input.profile_id {
        object.key("ProfileId").string(var_46);
    }
    if let Some(var_47) = &input.values {
        let mut array_48 = object.key("Values").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49);
            }
        }
        array_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_object_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileObjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_50);
    }
    if let Some(var_51) = &input.profile_id {
        object.key("ProfileId").string(var_51);
    }
    if let Some(var_52) = &input.profile_object_unique_key {
        object.key("ProfileObjectUniqueKey").string(var_52);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_auto_merging_preview_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoMergingPreviewInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.conflict_resolution {
        let mut object_54 = object.key("ConflictResolution").start_object();
        crate::json_ser::serialize_structure_crate_model_conflict_resolution(
            &mut object_54,
            var_53,
        )?;
        object_54.finish();
    }
    if let Some(var_55) = &input.consolidation {
        let mut object_56 = object.key("Consolidation").start_object();
        crate::json_ser::serialize_structure_crate_model_consolidation(&mut object_56, var_55)?;
        object_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.uri {
        object.key("Uri").string(var_57);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_account_integrations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountIntegrationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.uri {
        object.key("Uri").string(var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_profile_objects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProfileObjectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.object_filter {
        let mut object_60 = object.key("ObjectFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_object_filter(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_61);
    }
    if let Some(var_62) = &input.profile_id {
        object.key("ProfileId").string(var_62);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_merge_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MergeProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.field_source_profile_ids {
        let mut object_64 = object.key("FieldSourceProfileIds").start_object();
        crate::json_ser::serialize_structure_crate_model_field_source_profile_ids(
            &mut object_64,
            var_63,
        )?;
        object_64.finish();
    }
    if let Some(var_65) = &input.main_profile_id {
        object.key("MainProfileId").string(var_65);
    }
    if let Some(var_66) = &input.profile_ids_to_be_merged {
        let mut array_67 = object.key("ProfileIdsToBeMerged").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68);
            }
        }
        array_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutIntegrationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.flow_definition {
        let mut object_70 = object.key("FlowDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition(&mut object_70, var_69)?;
        object_70.finish();
    }
    if let Some(var_71) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_71);
    }
    if let Some(var_72) = &input.object_type_names {
        let mut object_73 = object.key("ObjectTypeNames").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75);
            }
        }
        object_73.finish();
    }
    if let Some(var_76) = &input.tags {
        let mut object_77 = object.key("Tags").start_object();
        for (key_78, value_79) in var_76 {
            {
                object_77.key(key_78).string(value_79);
            }
        }
        object_77.finish();
    }
    if let Some(var_80) = &input.uri {
        object.key("Uri").string(var_80);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_profile_object_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.object {
        object.key("Object").string(var_81);
    }
    if let Some(var_82) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_profile_object_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_profile_creation {
        object
            .key("AllowProfileCreation")
            .boolean(input.allow_profile_creation);
    }
    if let Some(var_83) = &input.description {
        object.key("Description").string(var_83);
    }
    if let Some(var_84) = &input.encryption_key {
        object.key("EncryptionKey").string(var_84);
    }
    if let Some(var_85) = &input.expiration_days {
        object.key("ExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_85).into()),
        );
    }
    if let Some(var_86) = &input.fields {
        let mut object_87 = object.key("Fields").start_object();
        for (key_88, value_89) in var_86 {
            {
                let mut object_90 = object_87.key(key_88).start_object();
                crate::json_ser::serialize_structure_crate_model_object_type_field(
                    &mut object_90,
                    value_89,
                )?;
                object_90.finish();
            }
        }
        object_87.finish();
    }
    if let Some(var_91) = &input.keys {
        let mut object_92 = object.key("Keys").start_object();
        for (key_93, value_94) in var_91 {
            {
                let mut array_95 = object_92.key(key_93).start_array();
                for item_96 in value_94 {
                    {
                        let mut object_97 = array_95.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_object_type_key(
                            &mut object_97,
                            item_96,
                        )?;
                        object_97.finish();
                    }
                }
                array_95.finish();
            }
        }
        object_92.finish();
    }
    if let Some(var_98) = &input.source_last_updated_timestamp_format {
        object
            .key("SourceLastUpdatedTimestampFormat")
            .string(var_98);
    }
    if let Some(var_99) = &input.tags {
        let mut object_100 = object.key("Tags").start_object();
        for (key_101, value_102) in var_99 {
            {
                object_100.key(key_101).string(value_102);
            }
        }
        object_100.finish();
    }
    if let Some(var_103) = &input.template_id {
        object.key("TemplateId").string(var_103);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.key_name {
        object.key("KeyName").string(var_104);
    }
    if let Some(var_105) = &input.values {
        let mut array_106 = object.key("Values").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107);
            }
        }
        array_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.tags {
        let mut object_109 = object.key("tags").start_object();
        for (key_110, value_111) in var_108 {
            {
                object_109.key(key_110).string(value_111);
            }
        }
        object_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_112);
    }
    if let Some(var_113) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_113);
    }
    if let Some(var_114) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    if let Some(var_115) = &input.matching {
        let mut object_116 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_crate_model_matching_request(
            &mut object_116,
            var_115,
        )?;
        object_116.finish();
    }
    if let Some(var_117) = &input.tags {
        let mut object_118 = object.key("Tags").start_object();
        for (key_119, value_120) in var_117 {
            {
                object_118.key(key_119).string(value_120);
            }
        }
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.account_number {
        object.key("AccountNumber").string(var_121);
    }
    if let Some(var_122) = &input.additional_information {
        object.key("AdditionalInformation").string(var_122);
    }
    if let Some(var_123) = &input.address {
        let mut object_124 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_124, var_123)?;
        object_124.finish();
    }
    if let Some(var_125) = &input.attributes {
        let mut object_126 = object.key("Attributes").start_object();
        for (key_127, value_128) in var_125 {
            {
                object_126.key(key_127).string(value_128);
            }
        }
        object_126.finish();
    }
    if let Some(var_129) = &input.billing_address {
        let mut object_130 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_130, var_129)?;
        object_130.finish();
    }
    if let Some(var_131) = &input.birth_date {
        object.key("BirthDate").string(var_131);
    }
    if let Some(var_132) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_132);
    }
    if let Some(var_133) = &input.business_name {
        object.key("BusinessName").string(var_133);
    }
    if let Some(var_134) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_134);
    }
    if let Some(var_135) = &input.email_address {
        object.key("EmailAddress").string(var_135);
    }
    if let Some(var_136) = &input.first_name {
        object.key("FirstName").string(var_136);
    }
    if let Some(var_137) = &input.gender {
        object.key("Gender").string(var_137.as_str());
    }
    if let Some(var_138) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_138);
    }
    if let Some(var_139) = &input.last_name {
        object.key("LastName").string(var_139);
    }
    if let Some(var_140) = &input.mailing_address {
        let mut object_141 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_141, var_140)?;
        object_141.finish();
    }
    if let Some(var_142) = &input.middle_name {
        object.key("MiddleName").string(var_142);
    }
    if let Some(var_143) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_143);
    }
    if let Some(var_144) = &input.party_type {
        object.key("PartyType").string(var_144.as_str());
    }
    if let Some(var_145) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_145);
    }
    if let Some(var_146) = &input.phone_number {
        object.key("PhoneNumber").string(var_146);
    }
    if let Some(var_147) = &input.profile_id {
        object.key("ProfileId").string(var_147);
    }
    if let Some(var_148) = &input.shipping_address {
        let mut object_149 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_update_address(&mut object_149, var_148)?;
        object_149.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_matching_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.enabled {
        object.key("Enabled").boolean(*var_150);
    }
    if let Some(var_151) = &input.job_schedule {
        let mut object_152 = object.key("JobSchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_job_schedule(&mut object_152, var_151)?;
        object_152.finish();
    }
    if let Some(var_153) = &input.auto_merging {
        let mut object_154 = object.key("AutoMerging").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_merging(&mut object_154, var_153)?;
        object_154.finish();
    }
    if let Some(var_155) = &input.exporting_config {
        let mut object_156 = object.key("ExportingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_exporting_config(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.address1 {
        object.key("Address1").string(var_157);
    }
    if let Some(var_158) = &input.address2 {
        object.key("Address2").string(var_158);
    }
    if let Some(var_159) = &input.address3 {
        object.key("Address3").string(var_159);
    }
    if let Some(var_160) = &input.address4 {
        object.key("Address4").string(var_160);
    }
    if let Some(var_161) = &input.city {
        object.key("City").string(var_161);
    }
    if let Some(var_162) = &input.county {
        object.key("County").string(var_162);
    }
    if let Some(var_163) = &input.state {
        object.key("State").string(var_163);
    }
    if let Some(var_164) = &input.province {
        object.key("Province").string(var_164);
    }
    if let Some(var_165) = &input.country {
        object.key("Country").string(var_165);
    }
    if let Some(var_166) = &input.postal_code {
        object.key("PostalCode").string(var_166);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conflict_resolution(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConflictResolution,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.conflict_resolving_model {
        object
            .key("ConflictResolvingModel")
            .string(var_167.as_str());
    }
    if let Some(var_168) = &input.source_name {
        object.key("SourceName").string(var_168);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_consolidation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Consolidation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.matching_attributes_list {
        let mut array_170 = object.key("MatchingAttributesList").start_array();
        for item_171 in var_169 {
            {
                let mut array_172 = array_170.value().start_array();
                for item_173 in item_171 {
                    {
                        array_172.value().string(item_173);
                    }
                }
                array_172.finish();
            }
        }
        array_170.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.key_name {
        object.key("KeyName").string(var_174);
    }
    if let Some(var_175) = &input.values {
        let mut array_176 = object.key("Values").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field_source_profile_ids(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldSourceProfileIds,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.account_number {
        object.key("AccountNumber").string(var_178);
    }
    if let Some(var_179) = &input.additional_information {
        object.key("AdditionalInformation").string(var_179);
    }
    if let Some(var_180) = &input.party_type {
        object.key("PartyType").string(var_180);
    }
    if let Some(var_181) = &input.business_name {
        object.key("BusinessName").string(var_181);
    }
    if let Some(var_182) = &input.first_name {
        object.key("FirstName").string(var_182);
    }
    if let Some(var_183) = &input.middle_name {
        object.key("MiddleName").string(var_183);
    }
    if let Some(var_184) = &input.last_name {
        object.key("LastName").string(var_184);
    }
    if let Some(var_185) = &input.birth_date {
        object.key("BirthDate").string(var_185);
    }
    if let Some(var_186) = &input.gender {
        object.key("Gender").string(var_186);
    }
    if let Some(var_187) = &input.phone_number {
        object.key("PhoneNumber").string(var_187);
    }
    if let Some(var_188) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_188);
    }
    if let Some(var_189) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_189);
    }
    if let Some(var_190) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_190);
    }
    if let Some(var_191) = &input.email_address {
        object.key("EmailAddress").string(var_191);
    }
    if let Some(var_192) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_192);
    }
    if let Some(var_193) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_193);
    }
    if let Some(var_194) = &input.address {
        object.key("Address").string(var_194);
    }
    if let Some(var_195) = &input.shipping_address {
        object.key("ShippingAddress").string(var_195);
    }
    if let Some(var_196) = &input.mailing_address {
        object.key("MailingAddress").string(var_196);
    }
    if let Some(var_197) = &input.billing_address {
        object.key("BillingAddress").string(var_197);
    }
    if let Some(var_198) = &input.attributes {
        let mut object_199 = object.key("Attributes").start_object();
        for (key_200, value_201) in var_198 {
            {
                object_199.key(key_200).string(value_201);
            }
        }
        object_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202);
    }
    if let Some(var_203) = &input.flow_name {
        object.key("FlowName").string(var_203);
    }
    if let Some(var_204) = &input.kms_arn {
        object.key("KmsArn").string(var_204);
    }
    if let Some(var_205) = &input.source_flow_config {
        let mut object_206 = object.key("SourceFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_flow_config(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    if let Some(var_207) = &input.tasks {
        let mut array_208 = object.key("Tasks").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task(&mut object_210, item_209)?;
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.trigger_config {
        let mut object_212 = object.key("TriggerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_config(&mut object_212, var_211)?;
        object_212.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_type_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.source {
        object.key("Source").string(var_213);
    }
    if let Some(var_214) = &input.target {
        object.key("Target").string(var_214);
    }
    if let Some(var_215) = &input.content_type {
        object.key("ContentType").string(var_215.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_object_type_key(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeKey,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.standard_identifiers {
        let mut array_217 = object.key("StandardIdentifiers").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218.as_str());
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.field_names {
        let mut array_220 = object.key("FieldNames").start_array();
        for item_221 in var_219 {
            {
                array_220.value().string(item_221);
            }
        }
        array_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAddress,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.address1 {
        object.key("Address1").string(var_222);
    }
    if let Some(var_223) = &input.address2 {
        object.key("Address2").string(var_223);
    }
    if let Some(var_224) = &input.address3 {
        object.key("Address3").string(var_224);
    }
    if let Some(var_225) = &input.address4 {
        object.key("Address4").string(var_225);
    }
    if let Some(var_226) = &input.city {
        object.key("City").string(var_226);
    }
    if let Some(var_227) = &input.county {
        object.key("County").string(var_227);
    }
    if let Some(var_228) = &input.state {
        object.key("State").string(var_228);
    }
    if let Some(var_229) = &input.province {
        object.key("Province").string(var_229);
    }
    if let Some(var_230) = &input.country {
        object.key("Country").string(var_230);
    }
    if let Some(var_231) = &input.postal_code {
        object.key("PostalCode").string(var_231);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobSchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.day_of_the_week {
        object.key("DayOfTheWeek").string(var_232.as_str());
    }
    if let Some(var_233) = &input.time {
        object.key("Time").string(var_233);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_merging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMerging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.enabled {
        object.key("Enabled").boolean(*var_234);
    }
    if let Some(var_235) = &input.consolidation {
        let mut object_236 = object.key("Consolidation").start_object();
        crate::json_ser::serialize_structure_crate_model_consolidation(&mut object_236, var_235)?;
        object_236.finish();
    }
    if let Some(var_237) = &input.conflict_resolution {
        let mut object_238 = object.key("ConflictResolution").start_object();
        crate::json_ser::serialize_structure_crate_model_conflict_resolution(
            &mut object_238,
            var_237,
        )?;
        object_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exporting_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.s3_exporting {
        let mut object_240 = object.key("S3Exporting").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_exporting_config(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.connector_profile_name {
        object.key("ConnectorProfileName").string(var_241);
    }
    if let Some(var_242) = &input.connector_type {
        object.key("ConnectorType").string(var_242.as_str());
    }
    if let Some(var_243) = &input.incremental_pull_config {
        let mut object_244 = object.key("IncrementalPullConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_incremental_pull_config(
            &mut object_244,
            var_243,
        )?;
        object_244.finish();
    }
    if let Some(var_245) = &input.source_connector_properties {
        let mut object_246 = object.key("SourceConnectorProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_source_connector_properties(
            &mut object_246,
            var_245,
        )?;
        object_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Task,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.connector_operator {
        let mut object_248 = object.key("ConnectorOperator").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_operator(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    if let Some(var_249) = &input.destination_field {
        object.key("DestinationField").string(var_249);
    }
    if let Some(var_250) = &input.source_fields {
        let mut array_251 = object.key("SourceFields").start_array();
        for item_252 in var_250 {
            {
                array_251.value().string(item_252);
            }
        }
        array_251.finish();
    }
    if let Some(var_253) = &input.task_properties {
        let mut object_254 = object.key("TaskProperties").start_object();
        for (key_255, value_256) in var_253 {
            {
                object_254.key(key_255.as_str()).string(value_256);
            }
        }
        object_254.finish();
    }
    if let Some(var_257) = &input.task_type {
        object.key("TaskType").string(var_257.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.trigger_type {
        object.key("TriggerType").string(var_258.as_str());
    }
    if let Some(var_259) = &input.trigger_properties {
        let mut object_260 = object.key("TriggerProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_properties(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_exporting_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ExportingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_261);
    }
    if let Some(var_262) = &input.s3_key_name {
        object.key("S3KeyName").string(var_262);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_incremental_pull_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IncrementalPullConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.datetime_type_field_name {
        object.key("DatetimeTypeFieldName").string(var_263);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_connector_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConnectorProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.marketo {
        let mut object_265 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_crate_model_marketo_source_properties(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    if let Some(var_266) = &input.s3 {
        let mut object_267 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_properties(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    if let Some(var_268) = &input.salesforce {
        let mut object_269 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_source_properties(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    if let Some(var_270) = &input.service_now {
        let mut object_271 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_source_properties(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    if let Some(var_272) = &input.zendesk {
        let mut object_273 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_crate_model_zendesk_source_properties(
            &mut object_273,
            var_272,
        )?;
        object_273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_operator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorOperator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.marketo {
        object.key("Marketo").string(var_274.as_str());
    }
    if let Some(var_275) = &input.s3 {
        object.key("S3").string(var_275.as_str());
    }
    if let Some(var_276) = &input.salesforce {
        object.key("Salesforce").string(var_276.as_str());
    }
    if let Some(var_277) = &input.service_now {
        object.key("ServiceNow").string(var_277.as_str());
    }
    if let Some(var_278) = &input.zendesk {
        object.key("Zendesk").string(var_278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.scheduled {
        let mut object_280 = object.key("Scheduled").start_object();
        crate::json_ser::serialize_structure_crate_model_scheduled_trigger_properties(
            &mut object_280,
            var_279,
        )?;
        object_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_marketo_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.object {
        object.key("Object").string(var_281);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.bucket_name {
        object.key("BucketName").string(var_282);
    }
    if let Some(var_283) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_283);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.object {
        object.key("Object").string(var_284);
    }
    if input.enable_dynamic_field_update {
        object
            .key("EnableDynamicFieldUpdate")
            .boolean(input.enable_dynamic_field_update);
    }
    if input.include_deleted_records {
        object
            .key("IncludeDeletedRecords")
            .boolean(input.include_deleted_records);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.object {
        object.key("Object").string(var_285);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zendesk_source_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskSourceProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.object {
        object.key("Object").string(var_286);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scheduled_trigger_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduledTriggerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_287);
    }
    if let Some(var_288) = &input.data_pull_mode {
        object.key("DataPullMode").string(var_288.as_str());
    }
    if let Some(var_289) = &input.schedule_start_time {
        object
            .key("ScheduleStartTime")
            .date_time(var_289, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_290) = &input.schedule_end_time {
        object
            .key("ScheduleEndTime")
            .date_time(var_290, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_291) = &input.timezone {
        object.key("Timezone").string(var_291);
    }
    if let Some(var_292) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_292).into()),
        );
    }
    if let Some(var_293) = &input.first_execution_from {
        object
            .key("FirstExecutionFrom")
            .date_time(var_293, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
