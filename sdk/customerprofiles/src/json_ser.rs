// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_profile_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddProfileKeyInput,
) {
    if let Some(var_1) = &input.key_name {
        object.key("KeyName").string(var_1);
    }
    if let Some(var_2) = &input.profile_id {
        object.key("ProfileId").string(var_2);
    }
    if let Some(var_3) = &input.values {
        let mut array_4 = object.key("Values").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5);
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_6) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_6);
    }
    if let Some(var_7) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_7);
    }
    if let Some(var_8) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.matching {
        let mut object_10 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_matching_request(&mut object_10, var_9);
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
}

pub fn serialize_structure_create_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileInput,
) {
    if let Some(var_15) = &input.account_number {
        object.key("AccountNumber").string(var_15);
    }
    if let Some(var_16) = &input.additional_information {
        object.key("AdditionalInformation").string(var_16);
    }
    if let Some(var_17) = &input.address {
        let mut object_18 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_address(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.attributes {
        let mut object_20 = object.key("Attributes").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22);
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.billing_address {
        let mut object_24 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_address(&mut object_24, var_23);
        object_24.finish();
    }
    if let Some(var_25) = &input.birth_date {
        object.key("BirthDate").string(var_25);
    }
    if let Some(var_26) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_26);
    }
    if let Some(var_27) = &input.business_name {
        object.key("BusinessName").string(var_27);
    }
    if let Some(var_28) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_28);
    }
    if let Some(var_29) = &input.email_address {
        object.key("EmailAddress").string(var_29);
    }
    if let Some(var_30) = &input.first_name {
        object.key("FirstName").string(var_30);
    }
    if let Some(var_31) = &input.gender {
        object.key("Gender").string(var_31.as_str());
    }
    if let Some(var_32) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_32);
    }
    if let Some(var_33) = &input.last_name {
        object.key("LastName").string(var_33);
    }
    if let Some(var_34) = &input.mailing_address {
        let mut object_35 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_address(&mut object_35, var_34);
        object_35.finish();
    }
    if let Some(var_36) = &input.middle_name {
        object.key("MiddleName").string(var_36);
    }
    if let Some(var_37) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_37);
    }
    if let Some(var_38) = &input.party_type {
        object.key("PartyType").string(var_38.as_str());
    }
    if let Some(var_39) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_39);
    }
    if let Some(var_40) = &input.phone_number {
        object.key("PhoneNumber").string(var_40);
    }
    if let Some(var_41) = &input.shipping_address {
        let mut object_42 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_address(&mut object_42, var_41);
        object_42.finish();
    }
}

pub fn serialize_structure_delete_integration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIntegrationInput,
) {
    if let Some(var_43) = &input.uri {
        object.key("Uri").string(var_43);
    }
}

pub fn serialize_structure_delete_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileInput,
) {
    if let Some(var_44) = &input.profile_id {
        object.key("ProfileId").string(var_44);
    }
}

pub fn serialize_structure_delete_profile_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileKeyInput,
) {
    if let Some(var_45) = &input.key_name {
        object.key("KeyName").string(var_45);
    }
    if let Some(var_46) = &input.profile_id {
        object.key("ProfileId").string(var_46);
    }
    if let Some(var_47) = &input.values {
        let mut array_48 = object.key("Values").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49);
            }
        }
        array_48.finish();
    }
}

pub fn serialize_structure_delete_profile_object_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileObjectInput,
) {
    if let Some(var_50) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_50);
    }
    if let Some(var_51) = &input.profile_id {
        object.key("ProfileId").string(var_51);
    }
    if let Some(var_52) = &input.profile_object_unique_key {
        object.key("ProfileObjectUniqueKey").string(var_52);
    }
}

pub fn serialize_structure_get_integration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetIntegrationInput,
) {
    if let Some(var_53) = &input.uri {
        object.key("Uri").string(var_53);
    }
}

pub fn serialize_structure_list_account_integrations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccountIntegrationsInput,
) {
    if let Some(var_54) = &input.uri {
        object.key("Uri").string(var_54);
    }
}

pub fn serialize_structure_list_profile_objects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProfileObjectsInput,
) {
    if let Some(var_55) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_55);
    }
    if let Some(var_56) = &input.profile_id {
        object.key("ProfileId").string(var_56);
    }
}

pub fn serialize_structure_merge_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MergeProfilesInput,
) {
    if let Some(var_57) = &input.field_source_profile_ids {
        let mut object_58 = object.key("FieldSourceProfileIds").start_object();
        crate::json_ser::serialize_structure_field_source_profile_ids(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.main_profile_id {
        object.key("MainProfileId").string(var_59);
    }
    if let Some(var_60) = &input.profile_ids_to_be_merged {
        let mut array_61 = object.key("ProfileIdsToBeMerged").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
}

pub fn serialize_structure_put_integration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutIntegrationInput,
) {
    if let Some(var_63) = &input.flow_definition {
        let mut object_64 = object.key("FlowDefinition").start_object();
        crate::json_ser::serialize_structure_flow_definition(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_65);
    }
    if let Some(var_66) = &input.tags {
        let mut object_67 = object.key("Tags").start_object();
        for (key_68, value_69) in var_66 {
            {
                object_67.key(key_68).string(value_69);
            }
        }
        object_67.finish();
    }
    if let Some(var_70) = &input.uri {
        object.key("Uri").string(var_70);
    }
}

pub fn serialize_structure_put_profile_object_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectInput,
) {
    if let Some(var_71) = &input.object {
        object.key("Object").string(var_71);
    }
    if let Some(var_72) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_72);
    }
}

pub fn serialize_structure_put_profile_object_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutProfileObjectTypeInput,
) {
    if input.allow_profile_creation {
        object
            .key("AllowProfileCreation")
            .boolean(input.allow_profile_creation);
    }
    if let Some(var_73) = &input.description {
        object.key("Description").string(var_73);
    }
    if let Some(var_74) = &input.encryption_key {
        object.key("EncryptionKey").string(var_74);
    }
    if let Some(var_75) = &input.expiration_days {
        object.key("ExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.fields {
        let mut object_77 = object.key("Fields").start_object();
        for (key_78, value_79) in var_76 {
            {
                let mut object_80 = object_77.key(key_78).start_object();
                crate::json_ser::serialize_structure_object_type_field(&mut object_80, value_79);
                object_80.finish();
            }
        }
        object_77.finish();
    }
    if let Some(var_81) = &input.keys {
        let mut object_82 = object.key("Keys").start_object();
        for (key_83, value_84) in var_81 {
            {
                let mut array_85 = object_82.key(key_83).start_array();
                for item_86 in value_84 {
                    {
                        let mut object_87 = array_85.value().start_object();
                        crate::json_ser::serialize_structure_object_type_key(
                            &mut object_87,
                            item_86,
                        );
                        object_87.finish();
                    }
                }
                array_85.finish();
            }
        }
        object_82.finish();
    }
    if let Some(var_88) = &input.tags {
        let mut object_89 = object.key("Tags").start_object();
        for (key_90, value_91) in var_88 {
            {
                object_89.key(key_90).string(value_91);
            }
        }
        object_89.finish();
    }
    if let Some(var_92) = &input.template_id {
        object.key("TemplateId").string(var_92);
    }
}

pub fn serialize_structure_search_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProfilesInput,
) {
    if let Some(var_93) = &input.key_name {
        object.key("KeyName").string(var_93);
    }
    if let Some(var_94) = &input.values {
        let mut array_95 = object.key("Values").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96);
            }
        }
        array_95.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100);
            }
        }
        object_98.finish();
    }
}

pub fn serialize_structure_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_101) = &input.dead_letter_queue_url {
        object.key("DeadLetterQueueUrl").string(var_101);
    }
    if let Some(var_102) = &input.default_encryption_key {
        object.key("DefaultEncryptionKey").string(var_102);
    }
    if let Some(var_103) = &input.default_expiration_days {
        object.key("DefaultExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_103).into()),
        );
    }
    if let Some(var_104) = &input.matching {
        let mut object_105 = object.key("Matching").start_object();
        crate::json_ser::serialize_structure_matching_request(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.tags {
        let mut object_107 = object.key("Tags").start_object();
        for (key_108, value_109) in var_106 {
            {
                object_107.key(key_108).string(value_109);
            }
        }
        object_107.finish();
    }
}

pub fn serialize_structure_update_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileInput,
) {
    if let Some(var_110) = &input.account_number {
        object.key("AccountNumber").string(var_110);
    }
    if let Some(var_111) = &input.additional_information {
        object.key("AdditionalInformation").string(var_111);
    }
    if let Some(var_112) = &input.address {
        let mut object_113 = object.key("Address").start_object();
        crate::json_ser::serialize_structure_update_address(&mut object_113, var_112);
        object_113.finish();
    }
    if let Some(var_114) = &input.attributes {
        let mut object_115 = object.key("Attributes").start_object();
        for (key_116, value_117) in var_114 {
            {
                object_115.key(key_116).string(value_117);
            }
        }
        object_115.finish();
    }
    if let Some(var_118) = &input.billing_address {
        let mut object_119 = object.key("BillingAddress").start_object();
        crate::json_ser::serialize_structure_update_address(&mut object_119, var_118);
        object_119.finish();
    }
    if let Some(var_120) = &input.birth_date {
        object.key("BirthDate").string(var_120);
    }
    if let Some(var_121) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_121);
    }
    if let Some(var_122) = &input.business_name {
        object.key("BusinessName").string(var_122);
    }
    if let Some(var_123) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_123);
    }
    if let Some(var_124) = &input.email_address {
        object.key("EmailAddress").string(var_124);
    }
    if let Some(var_125) = &input.first_name {
        object.key("FirstName").string(var_125);
    }
    if let Some(var_126) = &input.gender {
        object.key("Gender").string(var_126.as_str());
    }
    if let Some(var_127) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_127);
    }
    if let Some(var_128) = &input.last_name {
        object.key("LastName").string(var_128);
    }
    if let Some(var_129) = &input.mailing_address {
        let mut object_130 = object.key("MailingAddress").start_object();
        crate::json_ser::serialize_structure_update_address(&mut object_130, var_129);
        object_130.finish();
    }
    if let Some(var_131) = &input.middle_name {
        object.key("MiddleName").string(var_131);
    }
    if let Some(var_132) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_132);
    }
    if let Some(var_133) = &input.party_type {
        object.key("PartyType").string(var_133.as_str());
    }
    if let Some(var_134) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_134);
    }
    if let Some(var_135) = &input.phone_number {
        object.key("PhoneNumber").string(var_135);
    }
    if let Some(var_136) = &input.profile_id {
        object.key("ProfileId").string(var_136);
    }
    if let Some(var_137) = &input.shipping_address {
        let mut object_138 = object.key("ShippingAddress").start_object();
        crate::json_ser::serialize_structure_update_address(&mut object_138, var_137);
        object_138.finish();
    }
}

pub fn serialize_structure_matching_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MatchingRequest,
) {
    if let Some(var_139) = &input.enabled {
        object.key("Enabled").boolean(*var_139);
    }
}

pub fn serialize_structure_address(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Address,
) {
    if let Some(var_140) = &input.address1 {
        object.key("Address1").string(var_140);
    }
    if let Some(var_141) = &input.address2 {
        object.key("Address2").string(var_141);
    }
    if let Some(var_142) = &input.address3 {
        object.key("Address3").string(var_142);
    }
    if let Some(var_143) = &input.address4 {
        object.key("Address4").string(var_143);
    }
    if let Some(var_144) = &input.city {
        object.key("City").string(var_144);
    }
    if let Some(var_145) = &input.county {
        object.key("County").string(var_145);
    }
    if let Some(var_146) = &input.state {
        object.key("State").string(var_146);
    }
    if let Some(var_147) = &input.province {
        object.key("Province").string(var_147);
    }
    if let Some(var_148) = &input.country {
        object.key("Country").string(var_148);
    }
    if let Some(var_149) = &input.postal_code {
        object.key("PostalCode").string(var_149);
    }
}

pub fn serialize_structure_field_source_profile_ids(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FieldSourceProfileIds,
) {
    if let Some(var_150) = &input.account_number {
        object.key("AccountNumber").string(var_150);
    }
    if let Some(var_151) = &input.additional_information {
        object.key("AdditionalInformation").string(var_151);
    }
    if let Some(var_152) = &input.party_type {
        object.key("PartyType").string(var_152);
    }
    if let Some(var_153) = &input.business_name {
        object.key("BusinessName").string(var_153);
    }
    if let Some(var_154) = &input.first_name {
        object.key("FirstName").string(var_154);
    }
    if let Some(var_155) = &input.middle_name {
        object.key("MiddleName").string(var_155);
    }
    if let Some(var_156) = &input.last_name {
        object.key("LastName").string(var_156);
    }
    if let Some(var_157) = &input.birth_date {
        object.key("BirthDate").string(var_157);
    }
    if let Some(var_158) = &input.gender {
        object.key("Gender").string(var_158);
    }
    if let Some(var_159) = &input.phone_number {
        object.key("PhoneNumber").string(var_159);
    }
    if let Some(var_160) = &input.mobile_phone_number {
        object.key("MobilePhoneNumber").string(var_160);
    }
    if let Some(var_161) = &input.home_phone_number {
        object.key("HomePhoneNumber").string(var_161);
    }
    if let Some(var_162) = &input.business_phone_number {
        object.key("BusinessPhoneNumber").string(var_162);
    }
    if let Some(var_163) = &input.email_address {
        object.key("EmailAddress").string(var_163);
    }
    if let Some(var_164) = &input.personal_email_address {
        object.key("PersonalEmailAddress").string(var_164);
    }
    if let Some(var_165) = &input.business_email_address {
        object.key("BusinessEmailAddress").string(var_165);
    }
    if let Some(var_166) = &input.address {
        object.key("Address").string(var_166);
    }
    if let Some(var_167) = &input.shipping_address {
        object.key("ShippingAddress").string(var_167);
    }
    if let Some(var_168) = &input.mailing_address {
        object.key("MailingAddress").string(var_168);
    }
    if let Some(var_169) = &input.billing_address {
        object.key("BillingAddress").string(var_169);
    }
    if let Some(var_170) = &input.attributes {
        let mut object_171 = object.key("Attributes").start_object();
        for (key_172, value_173) in var_170 {
            {
                object_171.key(key_172).string(value_173);
            }
        }
        object_171.finish();
    }
}

pub fn serialize_structure_flow_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinition,
) {
    if let Some(var_174) = &input.description {
        object.key("Description").string(var_174);
    }
    if let Some(var_175) = &input.flow_name {
        object.key("FlowName").string(var_175);
    }
    if let Some(var_176) = &input.kms_arn {
        object.key("KmsArn").string(var_176);
    }
    if let Some(var_177) = &input.source_flow_config {
        let mut object_178 = object.key("SourceFlowConfig").start_object();
        crate::json_ser::serialize_structure_source_flow_config(&mut object_178, var_177);
        object_178.finish();
    }
    if let Some(var_179) = &input.tasks {
        let mut array_180 = object.key("Tasks").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_task(&mut object_182, item_181);
                object_182.finish();
            }
        }
        array_180.finish();
    }
    if let Some(var_183) = &input.trigger_config {
        let mut object_184 = object.key("TriggerConfig").start_object();
        crate::json_ser::serialize_structure_trigger_config(&mut object_184, var_183);
        object_184.finish();
    }
}

pub fn serialize_structure_object_type_field(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeField,
) {
    if let Some(var_185) = &input.source {
        object.key("Source").string(var_185);
    }
    if let Some(var_186) = &input.target {
        object.key("Target").string(var_186);
    }
    if let Some(var_187) = &input.content_type {
        object.key("ContentType").string(var_187.as_str());
    }
}

pub fn serialize_structure_object_type_key(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObjectTypeKey,
) {
    if let Some(var_188) = &input.standard_identifiers {
        let mut array_189 = object.key("StandardIdentifiers").start_array();
        for item_190 in var_188 {
            {
                array_189.value().string(item_190.as_str());
            }
        }
        array_189.finish();
    }
    if let Some(var_191) = &input.field_names {
        let mut array_192 = object.key("FieldNames").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193);
            }
        }
        array_192.finish();
    }
}

pub fn serialize_structure_update_address(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAddress,
) {
    if let Some(var_194) = &input.address1 {
        object.key("Address1").string(var_194);
    }
    if let Some(var_195) = &input.address2 {
        object.key("Address2").string(var_195);
    }
    if let Some(var_196) = &input.address3 {
        object.key("Address3").string(var_196);
    }
    if let Some(var_197) = &input.address4 {
        object.key("Address4").string(var_197);
    }
    if let Some(var_198) = &input.city {
        object.key("City").string(var_198);
    }
    if let Some(var_199) = &input.county {
        object.key("County").string(var_199);
    }
    if let Some(var_200) = &input.state {
        object.key("State").string(var_200);
    }
    if let Some(var_201) = &input.province {
        object.key("Province").string(var_201);
    }
    if let Some(var_202) = &input.country {
        object.key("Country").string(var_202);
    }
    if let Some(var_203) = &input.postal_code {
        object.key("PostalCode").string(var_203);
    }
}

pub fn serialize_structure_source_flow_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceFlowConfig,
) {
    if let Some(var_204) = &input.connector_profile_name {
        object.key("ConnectorProfileName").string(var_204);
    }
    if let Some(var_205) = &input.connector_type {
        object.key("ConnectorType").string(var_205.as_str());
    }
    if let Some(var_206) = &input.incremental_pull_config {
        let mut object_207 = object.key("IncrementalPullConfig").start_object();
        crate::json_ser::serialize_structure_incremental_pull_config(&mut object_207, var_206);
        object_207.finish();
    }
    if let Some(var_208) = &input.source_connector_properties {
        let mut object_209 = object.key("SourceConnectorProperties").start_object();
        crate::json_ser::serialize_structure_source_connector_properties(&mut object_209, var_208);
        object_209.finish();
    }
}

pub fn serialize_structure_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Task,
) {
    if let Some(var_210) = &input.connector_operator {
        let mut object_211 = object.key("ConnectorOperator").start_object();
        crate::json_ser::serialize_structure_connector_operator(&mut object_211, var_210);
        object_211.finish();
    }
    if let Some(var_212) = &input.destination_field {
        object.key("DestinationField").string(var_212);
    }
    if let Some(var_213) = &input.source_fields {
        let mut array_214 = object.key("SourceFields").start_array();
        for item_215 in var_213 {
            {
                array_214.value().string(item_215);
            }
        }
        array_214.finish();
    }
    if let Some(var_216) = &input.task_properties {
        let mut object_217 = object.key("TaskProperties").start_object();
        for (key_218, value_219) in var_216 {
            {
                object_217.key(key_218.as_str()).string(value_219);
            }
        }
        object_217.finish();
    }
    if let Some(var_220) = &input.task_type {
        object.key("TaskType").string(var_220.as_str());
    }
}

pub fn serialize_structure_trigger_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerConfig,
) {
    if let Some(var_221) = &input.trigger_type {
        object.key("TriggerType").string(var_221.as_str());
    }
    if let Some(var_222) = &input.trigger_properties {
        let mut object_223 = object.key("TriggerProperties").start_object();
        crate::json_ser::serialize_structure_trigger_properties(&mut object_223, var_222);
        object_223.finish();
    }
}

pub fn serialize_structure_incremental_pull_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IncrementalPullConfig,
) {
    if let Some(var_224) = &input.datetime_type_field_name {
        object.key("DatetimeTypeFieldName").string(var_224);
    }
}

pub fn serialize_structure_source_connector_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConnectorProperties,
) {
    if let Some(var_225) = &input.marketo {
        let mut object_226 = object.key("Marketo").start_object();
        crate::json_ser::serialize_structure_marketo_source_properties(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.s3 {
        let mut object_228 = object.key("S3").start_object();
        crate::json_ser::serialize_structure_s3_source_properties(&mut object_228, var_227);
        object_228.finish();
    }
    if let Some(var_229) = &input.salesforce {
        let mut object_230 = object.key("Salesforce").start_object();
        crate::json_ser::serialize_structure_salesforce_source_properties(&mut object_230, var_229);
        object_230.finish();
    }
    if let Some(var_231) = &input.service_now {
        let mut object_232 = object.key("ServiceNow").start_object();
        crate::json_ser::serialize_structure_service_now_source_properties(
            &mut object_232,
            var_231,
        );
        object_232.finish();
    }
    if let Some(var_233) = &input.zendesk {
        let mut object_234 = object.key("Zendesk").start_object();
        crate::json_ser::serialize_structure_zendesk_source_properties(&mut object_234, var_233);
        object_234.finish();
    }
}

pub fn serialize_structure_connector_operator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectorOperator,
) {
    if let Some(var_235) = &input.marketo {
        object.key("Marketo").string(var_235.as_str());
    }
    if let Some(var_236) = &input.s3 {
        object.key("S3").string(var_236.as_str());
    }
    if let Some(var_237) = &input.salesforce {
        object.key("Salesforce").string(var_237.as_str());
    }
    if let Some(var_238) = &input.service_now {
        object.key("ServiceNow").string(var_238.as_str());
    }
    if let Some(var_239) = &input.zendesk {
        object.key("Zendesk").string(var_239.as_str());
    }
}

pub fn serialize_structure_trigger_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerProperties,
) {
    if let Some(var_240) = &input.scheduled {
        let mut object_241 = object.key("Scheduled").start_object();
        crate::json_ser::serialize_structure_scheduled_trigger_properties(&mut object_241, var_240);
        object_241.finish();
    }
}

pub fn serialize_structure_marketo_source_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MarketoSourceProperties,
) {
    if let Some(var_242) = &input.object {
        object.key("Object").string(var_242);
    }
}

pub fn serialize_structure_s3_source_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceProperties,
) {
    if let Some(var_243) = &input.bucket_name {
        object.key("BucketName").string(var_243);
    }
    if let Some(var_244) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_244);
    }
}

pub fn serialize_structure_salesforce_source_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceSourceProperties,
) {
    if let Some(var_245) = &input.object {
        object.key("Object").string(var_245);
    }
    if input.enable_dynamic_field_update {
        object
            .key("EnableDynamicFieldUpdate")
            .boolean(input.enable_dynamic_field_update);
    }
    if input.include_deleted_records {
        object
            .key("IncludeDeletedRecords")
            .boolean(input.include_deleted_records);
    }
}

pub fn serialize_structure_service_now_source_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowSourceProperties,
) {
    if let Some(var_246) = &input.object {
        object.key("Object").string(var_246);
    }
}

pub fn serialize_structure_zendesk_source_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZendeskSourceProperties,
) {
    if let Some(var_247) = &input.object {
        object.key("Object").string(var_247);
    }
}

pub fn serialize_structure_scheduled_trigger_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduledTriggerProperties,
) {
    if let Some(var_248) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_248);
    }
    if let Some(var_249) = &input.data_pull_mode {
        object.key("DataPullMode").string(var_249.as_str());
    }
    if let Some(var_250) = &input.schedule_start_time {
        object
            .key("ScheduleStartTime")
            .instant(var_250, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_251) = &input.schedule_end_time {
        object
            .key("ScheduleEndTime")
            .instant(var_251, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_252) = &input.timezone {
        object.key("Timezone").string(var_252);
    }
    if let Some(var_253) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    if let Some(var_254) = &input.first_execution_from {
        object
            .key("FirstExecutionFrom")
            .instant(var_254, smithy_types::instant::Format::EpochSeconds);
    }
}
