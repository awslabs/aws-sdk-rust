// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The standard profile of a customer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Profile {
    /// <p>The unique identifier of a customer profile.</p>
    #[doc(hidden)]
    pub profile_id: std::option::Option<std::string::String>,
    /// <p>A unique account number that you have given to the customer.</p>
    #[doc(hidden)]
    pub account_number: std::option::Option<std::string::String>,
    /// <p>Any additional information relevant to the customer’s profile.</p>
    #[doc(hidden)]
    pub additional_information: std::option::Option<std::string::String>,
    /// <p>The type of profile used to describe the customer.</p>
    #[doc(hidden)]
    pub party_type: std::option::Option<crate::types::PartyType>,
    /// <p>The name of the customer’s business.</p>
    #[doc(hidden)]
    pub business_name: std::option::Option<std::string::String>,
    /// <p>The customer’s first name.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p>The customer’s middle name.</p>
    #[doc(hidden)]
    pub middle_name: std::option::Option<std::string::String>,
    /// <p>The customer’s last name.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>The customer’s birth date. </p>
    #[doc(hidden)]
    pub birth_date: std::option::Option<std::string::String>,
    /// <p>The gender with which the customer identifies. </p>
    #[doc(hidden)]
    pub gender: std::option::Option<crate::types::Gender>,
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>The customer’s mobile phone number.</p>
    #[doc(hidden)]
    pub mobile_phone_number: std::option::Option<std::string::String>,
    /// <p>The customer’s home phone number.</p>
    #[doc(hidden)]
    pub home_phone_number: std::option::Option<std::string::String>,
    /// <p>The customer’s home phone number.</p>
    #[doc(hidden)]
    pub business_phone_number: std::option::Option<std::string::String>,
    /// <p>The customer’s email address, which has not been specified as a personal or business address. </p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p>The customer’s personal email address.</p>
    #[doc(hidden)]
    pub personal_email_address: std::option::Option<std::string::String>,
    /// <p>The customer’s business email address.</p>
    #[doc(hidden)]
    pub business_email_address: std::option::Option<std::string::String>,
    /// <p>A generic address associated with the customer that is not mailing, shipping, or billing.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::types::Address>,
    /// <p>The customer’s shipping address.</p>
    #[doc(hidden)]
    pub shipping_address: std::option::Option<crate::types::Address>,
    /// <p>The customer’s mailing address.</p>
    #[doc(hidden)]
    pub mailing_address: std::option::Option<crate::types::Address>,
    /// <p>The customer’s billing address.</p>
    #[doc(hidden)]
    pub billing_address: std::option::Option<crate::types::Address>,
    /// <p>A key value pair of attributes of a customer profile.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of items used to find a profile returned in a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> response. An item is a key-value(s) pair that matches an attribute in the profile.</p>
    /// <p>If the optional <code>AdditionalSearchKeys</code> parameter was included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request, the <code>FoundByItems</code> list should be interpreted based on the <code>LogicalOperator</code> used in the request:</p>
    /// <ul>
    /// <li> <p> <code>AND</code> - The profile included in the response matched all of the search keys specified in the request. The <code>FoundByItems</code> will include all of the key-value(s) pairs that were specified in the request (as this is a requirement of <code>AND</code> search logic).</p> </li>
    /// <li> <p> <code>OR</code> - The profile included in the response matched at least one of the search keys specified in the request. The <code>FoundByItems</code> will include each of the key-value(s) pairs that the profile was found by.</p> </li>
    /// </ul>
    /// <p>The <code>OR</code> relationship is the default behavior if the <code>LogicalOperator</code> parameter is not included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request.</p>
    #[doc(hidden)]
    pub found_by_items: std::option::Option<std::vec::Vec<crate::types::FoundByKeyValue>>,
}
impl Profile {
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(&self) -> std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn account_number(&self) -> std::option::Option<&str> {
        self.account_number.as_deref()
    }
    /// <p>Any additional information relevant to the customer’s profile.</p>
    pub fn additional_information(&self) -> std::option::Option<&str> {
        self.additional_information.as_deref()
    }
    /// <p>The type of profile used to describe the customer.</p>
    pub fn party_type(&self) -> std::option::Option<&crate::types::PartyType> {
        self.party_type.as_ref()
    }
    /// <p>The name of the customer’s business.</p>
    pub fn business_name(&self) -> std::option::Option<&str> {
        self.business_name.as_deref()
    }
    /// <p>The customer’s first name.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The customer’s middle name.</p>
    pub fn middle_name(&self) -> std::option::Option<&str> {
        self.middle_name.as_deref()
    }
    /// <p>The customer’s last name.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>The customer’s birth date. </p>
    pub fn birth_date(&self) -> std::option::Option<&str> {
        self.birth_date.as_deref()
    }
    /// <p>The gender with which the customer identifies. </p>
    pub fn gender(&self) -> std::option::Option<&crate::types::Gender> {
        self.gender.as_ref()
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The customer’s mobile phone number.</p>
    pub fn mobile_phone_number(&self) -> std::option::Option<&str> {
        self.mobile_phone_number.as_deref()
    }
    /// <p>The customer’s home phone number.</p>
    pub fn home_phone_number(&self) -> std::option::Option<&str> {
        self.home_phone_number.as_deref()
    }
    /// <p>The customer’s home phone number.</p>
    pub fn business_phone_number(&self) -> std::option::Option<&str> {
        self.business_phone_number.as_deref()
    }
    /// <p>The customer’s email address, which has not been specified as a personal or business address. </p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The customer’s personal email address.</p>
    pub fn personal_email_address(&self) -> std::option::Option<&str> {
        self.personal_email_address.as_deref()
    }
    /// <p>The customer’s business email address.</p>
    pub fn business_email_address(&self) -> std::option::Option<&str> {
        self.business_email_address.as_deref()
    }
    /// <p>A generic address associated with the customer that is not mailing, shipping, or billing.</p>
    pub fn address(&self) -> std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>The customer’s shipping address.</p>
    pub fn shipping_address(&self) -> std::option::Option<&crate::types::Address> {
        self.shipping_address.as_ref()
    }
    /// <p>The customer’s mailing address.</p>
    pub fn mailing_address(&self) -> std::option::Option<&crate::types::Address> {
        self.mailing_address.as_ref()
    }
    /// <p>The customer’s billing address.</p>
    pub fn billing_address(&self) -> std::option::Option<&crate::types::Address> {
        self.billing_address.as_ref()
    }
    /// <p>A key value pair of attributes of a customer profile.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
    /// <p>A list of items used to find a profile returned in a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> response. An item is a key-value(s) pair that matches an attribute in the profile.</p>
    /// <p>If the optional <code>AdditionalSearchKeys</code> parameter was included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request, the <code>FoundByItems</code> list should be interpreted based on the <code>LogicalOperator</code> used in the request:</p>
    /// <ul>
    /// <li> <p> <code>AND</code> - The profile included in the response matched all of the search keys specified in the request. The <code>FoundByItems</code> will include all of the key-value(s) pairs that were specified in the request (as this is a requirement of <code>AND</code> search logic).</p> </li>
    /// <li> <p> <code>OR</code> - The profile included in the response matched at least one of the search keys specified in the request. The <code>FoundByItems</code> will include each of the key-value(s) pairs that the profile was found by.</p> </li>
    /// </ul>
    /// <p>The <code>OR</code> relationship is the default behavior if the <code>LogicalOperator</code> parameter is not included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request.</p>
    pub fn found_by_items(&self) -> std::option::Option<&[crate::types::FoundByKeyValue]> {
        self.found_by_items.as_deref()
    }
}
impl Profile {
    /// Creates a new builder-style object to manufacture [`Profile`](crate::types::Profile).
    pub fn builder() -> crate::types::builders::ProfileBuilder {
        crate::types::builders::ProfileBuilder::default()
    }
}

/// A builder for [`Profile`](crate::types::Profile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProfileBuilder {
    pub(crate) profile_id: std::option::Option<std::string::String>,
    pub(crate) account_number: std::option::Option<std::string::String>,
    pub(crate) additional_information: std::option::Option<std::string::String>,
    pub(crate) party_type: std::option::Option<crate::types::PartyType>,
    pub(crate) business_name: std::option::Option<std::string::String>,
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) middle_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) birth_date: std::option::Option<std::string::String>,
    pub(crate) gender: std::option::Option<crate::types::Gender>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) mobile_phone_number: std::option::Option<std::string::String>,
    pub(crate) home_phone_number: std::option::Option<std::string::String>,
    pub(crate) business_phone_number: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) personal_email_address: std::option::Option<std::string::String>,
    pub(crate) business_email_address: std::option::Option<std::string::String>,
    pub(crate) address: std::option::Option<crate::types::Address>,
    pub(crate) shipping_address: std::option::Option<crate::types::Address>,
    pub(crate) mailing_address: std::option::Option<crate::types::Address>,
    pub(crate) billing_address: std::option::Option<crate::types::Address>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) found_by_items: std::option::Option<std::vec::Vec<crate::types::FoundByKeyValue>>,
}
impl ProfileBuilder {
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn account_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_number = Some(input.into());
        self
    }
    /// <p>A unique account number that you have given to the customer.</p>
    pub fn set_account_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_number = input;
        self
    }
    /// <p>Any additional information relevant to the customer’s profile.</p>
    pub fn additional_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_information = Some(input.into());
        self
    }
    /// <p>Any additional information relevant to the customer’s profile.</p>
    pub fn set_additional_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_information = input;
        self
    }
    /// <p>The type of profile used to describe the customer.</p>
    pub fn party_type(mut self, input: crate::types::PartyType) -> Self {
        self.party_type = Some(input);
        self
    }
    /// <p>The type of profile used to describe the customer.</p>
    pub fn set_party_type(mut self, input: std::option::Option<crate::types::PartyType>) -> Self {
        self.party_type = input;
        self
    }
    /// <p>The name of the customer’s business.</p>
    pub fn business_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_name = Some(input.into());
        self
    }
    /// <p>The name of the customer’s business.</p>
    pub fn set_business_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.business_name = input;
        self
    }
    /// <p>The customer’s first name.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>The customer’s first name.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The customer’s middle name.</p>
    pub fn middle_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.middle_name = Some(input.into());
        self
    }
    /// <p>The customer’s middle name.</p>
    pub fn set_middle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.middle_name = input;
        self
    }
    /// <p>The customer’s last name.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p>The customer’s last name.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The customer’s birth date. </p>
    pub fn birth_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.birth_date = Some(input.into());
        self
    }
    /// <p>The customer’s birth date. </p>
    pub fn set_birth_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.birth_date = input;
        self
    }
    /// <p>The gender with which the customer identifies. </p>
    pub fn gender(mut self, input: crate::types::Gender) -> Self {
        self.gender = Some(input);
        self
    }
    /// <p>The gender with which the customer identifies. </p>
    pub fn set_gender(mut self, input: std::option::Option<crate::types::Gender>) -> Self {
        self.gender = input;
        self
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The customer's phone number, which has not been specified as a mobile, home, or business number.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The customer’s mobile phone number.</p>
    pub fn mobile_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.mobile_phone_number = Some(input.into());
        self
    }
    /// <p>The customer’s mobile phone number.</p>
    pub fn set_mobile_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.mobile_phone_number = input;
        self
    }
    /// <p>The customer’s home phone number.</p>
    pub fn home_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_phone_number = Some(input.into());
        self
    }
    /// <p>The customer’s home phone number.</p>
    pub fn set_home_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.home_phone_number = input;
        self
    }
    /// <p>The customer’s home phone number.</p>
    pub fn business_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_phone_number = Some(input.into());
        self
    }
    /// <p>The customer’s home phone number.</p>
    pub fn set_business_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.business_phone_number = input;
        self
    }
    /// <p>The customer’s email address, which has not been specified as a personal or business address. </p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The customer’s email address, which has not been specified as a personal or business address. </p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The customer’s personal email address.</p>
    pub fn personal_email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.personal_email_address = Some(input.into());
        self
    }
    /// <p>The customer’s personal email address.</p>
    pub fn set_personal_email_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.personal_email_address = input;
        self
    }
    /// <p>The customer’s business email address.</p>
    pub fn business_email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_email_address = Some(input.into());
        self
    }
    /// <p>The customer’s business email address.</p>
    pub fn set_business_email_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.business_email_address = input;
        self
    }
    /// <p>A generic address associated with the customer that is not mailing, shipping, or billing.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = Some(input);
        self
    }
    /// <p>A generic address associated with the customer that is not mailing, shipping, or billing.</p>
    pub fn set_address(mut self, input: std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The customer’s shipping address.</p>
    pub fn shipping_address(mut self, input: crate::types::Address) -> Self {
        self.shipping_address = Some(input);
        self
    }
    /// <p>The customer’s shipping address.</p>
    pub fn set_shipping_address(
        mut self,
        input: std::option::Option<crate::types::Address>,
    ) -> Self {
        self.shipping_address = input;
        self
    }
    /// <p>The customer’s mailing address.</p>
    pub fn mailing_address(mut self, input: crate::types::Address) -> Self {
        self.mailing_address = Some(input);
        self
    }
    /// <p>The customer’s mailing address.</p>
    pub fn set_mailing_address(
        mut self,
        input: std::option::Option<crate::types::Address>,
    ) -> Self {
        self.mailing_address = input;
        self
    }
    /// <p>The customer’s billing address.</p>
    pub fn billing_address(mut self, input: crate::types::Address) -> Self {
        self.billing_address = Some(input);
        self
    }
    /// <p>The customer’s billing address.</p>
    pub fn set_billing_address(
        mut self,
        input: std::option::Option<crate::types::Address>,
    ) -> Self {
        self.billing_address = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A key value pair of attributes of a customer profile.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>A key value pair of attributes of a customer profile.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Appends an item to `found_by_items`.
    ///
    /// To override the contents of this collection use [`set_found_by_items`](Self::set_found_by_items).
    ///
    /// <p>A list of items used to find a profile returned in a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> response. An item is a key-value(s) pair that matches an attribute in the profile.</p>
    /// <p>If the optional <code>AdditionalSearchKeys</code> parameter was included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request, the <code>FoundByItems</code> list should be interpreted based on the <code>LogicalOperator</code> used in the request:</p>
    /// <ul>
    /// <li> <p> <code>AND</code> - The profile included in the response matched all of the search keys specified in the request. The <code>FoundByItems</code> will include all of the key-value(s) pairs that were specified in the request (as this is a requirement of <code>AND</code> search logic).</p> </li>
    /// <li> <p> <code>OR</code> - The profile included in the response matched at least one of the search keys specified in the request. The <code>FoundByItems</code> will include each of the key-value(s) pairs that the profile was found by.</p> </li>
    /// </ul>
    /// <p>The <code>OR</code> relationship is the default behavior if the <code>LogicalOperator</code> parameter is not included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request.</p>
    pub fn found_by_items(mut self, input: crate::types::FoundByKeyValue) -> Self {
        let mut v = self.found_by_items.unwrap_or_default();
        v.push(input);
        self.found_by_items = Some(v);
        self
    }
    /// <p>A list of items used to find a profile returned in a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> response. An item is a key-value(s) pair that matches an attribute in the profile.</p>
    /// <p>If the optional <code>AdditionalSearchKeys</code> parameter was included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request, the <code>FoundByItems</code> list should be interpreted based on the <code>LogicalOperator</code> used in the request:</p>
    /// <ul>
    /// <li> <p> <code>AND</code> - The profile included in the response matched all of the search keys specified in the request. The <code>FoundByItems</code> will include all of the key-value(s) pairs that were specified in the request (as this is a requirement of <code>AND</code> search logic).</p> </li>
    /// <li> <p> <code>OR</code> - The profile included in the response matched at least one of the search keys specified in the request. The <code>FoundByItems</code> will include each of the key-value(s) pairs that the profile was found by.</p> </li>
    /// </ul>
    /// <p>The <code>OR</code> relationship is the default behavior if the <code>LogicalOperator</code> parameter is not included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request.</p>
    pub fn set_found_by_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FoundByKeyValue>>,
    ) -> Self {
        self.found_by_items = input;
        self
    }
    /// Consumes the builder and constructs a [`Profile`](crate::types::Profile).
    pub fn build(self) -> crate::types::Profile {
        crate::types::Profile {
            profile_id: self.profile_id,
            account_number: self.account_number,
            additional_information: self.additional_information,
            party_type: self.party_type,
            business_name: self.business_name,
            first_name: self.first_name,
            middle_name: self.middle_name,
            last_name: self.last_name,
            birth_date: self.birth_date,
            gender: self.gender,
            phone_number: self.phone_number,
            mobile_phone_number: self.mobile_phone_number,
            home_phone_number: self.home_phone_number,
            business_phone_number: self.business_phone_number,
            email_address: self.email_address,
            personal_email_address: self.personal_email_address,
            business_email_address: self.business_email_address,
            address: self.address,
            shipping_address: self.shipping_address,
            mailing_address: self.mailing_address,
            billing_address: self.billing_address,
            attributes: self.attributes,
            found_by_items: self.found_by_items,
        }
    }
}
