// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `StandardIdentifier`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let standardidentifier = unimplemented!();
/// match standardidentifier {
///     StandardIdentifier::AirBooking => { /* ... */ },
///     StandardIdentifier::AirPreference => { /* ... */ },
///     StandardIdentifier::AirSegment => { /* ... */ },
///     StandardIdentifier::Asset => { /* ... */ },
///     StandardIdentifier::Case => { /* ... */ },
///     StandardIdentifier::CommunicationRecord => { /* ... */ },
///     StandardIdentifier::HotelPreference => { /* ... */ },
///     StandardIdentifier::HotelReservation => { /* ... */ },
///     StandardIdentifier::HotelStayRevenue => { /* ... */ },
///     StandardIdentifier::LookupOnly => { /* ... */ },
///     StandardIdentifier::Loyalty => { /* ... */ },
///     StandardIdentifier::LoyaltyPromotion => { /* ... */ },
///     StandardIdentifier::LoyaltyTransaction => { /* ... */ },
///     StandardIdentifier::NewOnly => { /* ... */ },
///     StandardIdentifier::Order => { /* ... */ },
///     StandardIdentifier::Profile => { /* ... */ },
///     StandardIdentifier::Secondary => { /* ... */ },
///     StandardIdentifier::Unique => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `standardidentifier` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `StandardIdentifier::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `StandardIdentifier::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `StandardIdentifier::NewFeature` is defined.
/// Specifically, when `standardidentifier` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `StandardIdentifier::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum StandardIdentifier {
    #[allow(missing_docs)] // documentation missing in model
    AirBooking,
    #[allow(missing_docs)] // documentation missing in model
    AirPreference,
    #[allow(missing_docs)] // documentation missing in model
    AirSegment,
    #[allow(missing_docs)] // documentation missing in model
    Asset,
    #[allow(missing_docs)] // documentation missing in model
    Case,
    #[allow(missing_docs)] // documentation missing in model
    CommunicationRecord,
    #[allow(missing_docs)] // documentation missing in model
    HotelPreference,
    #[allow(missing_docs)] // documentation missing in model
    HotelReservation,
    #[allow(missing_docs)] // documentation missing in model
    HotelStayRevenue,
    #[allow(missing_docs)] // documentation missing in model
    LookupOnly,
    #[allow(missing_docs)] // documentation missing in model
    Loyalty,
    #[allow(missing_docs)] // documentation missing in model
    LoyaltyPromotion,
    #[allow(missing_docs)] // documentation missing in model
    LoyaltyTransaction,
    #[allow(missing_docs)] // documentation missing in model
    NewOnly,
    #[allow(missing_docs)] // documentation missing in model
    Order,
    #[allow(missing_docs)] // documentation missing in model
    Profile,
    #[allow(missing_docs)] // documentation missing in model
    Secondary,
    #[allow(missing_docs)] // documentation missing in model
    Unique,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for StandardIdentifier {
    fn from(s: &str) -> Self {
        match s {
            "AIR_BOOKING" => StandardIdentifier::AirBooking,
            "AIR_PREFERENCE" => StandardIdentifier::AirPreference,
            "AIR_SEGMENT" => StandardIdentifier::AirSegment,
            "ASSET" => StandardIdentifier::Asset,
            "CASE" => StandardIdentifier::Case,
            "COMMUNICATION_RECORD" => StandardIdentifier::CommunicationRecord,
            "HOTEL_PREFERENCE" => StandardIdentifier::HotelPreference,
            "HOTEL_RESERVATION" => StandardIdentifier::HotelReservation,
            "HOTEL_STAY_REVENUE" => StandardIdentifier::HotelStayRevenue,
            "LOOKUP_ONLY" => StandardIdentifier::LookupOnly,
            "LOYALTY" => StandardIdentifier::Loyalty,
            "LOYALTY_PROMOTION" => StandardIdentifier::LoyaltyPromotion,
            "LOYALTY_TRANSACTION" => StandardIdentifier::LoyaltyTransaction,
            "NEW_ONLY" => StandardIdentifier::NewOnly,
            "ORDER" => StandardIdentifier::Order,
            "PROFILE" => StandardIdentifier::Profile,
            "SECONDARY" => StandardIdentifier::Secondary,
            "UNIQUE" => StandardIdentifier::Unique,
            other => StandardIdentifier::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for StandardIdentifier {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(StandardIdentifier::from(s))
    }
}
impl StandardIdentifier {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            StandardIdentifier::AirBooking => "AIR_BOOKING",
            StandardIdentifier::AirPreference => "AIR_PREFERENCE",
            StandardIdentifier::AirSegment => "AIR_SEGMENT",
            StandardIdentifier::Asset => "ASSET",
            StandardIdentifier::Case => "CASE",
            StandardIdentifier::CommunicationRecord => "COMMUNICATION_RECORD",
            StandardIdentifier::HotelPreference => "HOTEL_PREFERENCE",
            StandardIdentifier::HotelReservation => "HOTEL_RESERVATION",
            StandardIdentifier::HotelStayRevenue => "HOTEL_STAY_REVENUE",
            StandardIdentifier::LookupOnly => "LOOKUP_ONLY",
            StandardIdentifier::Loyalty => "LOYALTY",
            StandardIdentifier::LoyaltyPromotion => "LOYALTY_PROMOTION",
            StandardIdentifier::LoyaltyTransaction => "LOYALTY_TRANSACTION",
            StandardIdentifier::NewOnly => "NEW_ONLY",
            StandardIdentifier::Order => "ORDER",
            StandardIdentifier::Profile => "PROFILE",
            StandardIdentifier::Secondary => "SECONDARY",
            StandardIdentifier::Unique => "UNIQUE",
            StandardIdentifier::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AIR_BOOKING",
            "AIR_PREFERENCE",
            "AIR_SEGMENT",
            "ASSET",
            "CASE",
            "COMMUNICATION_RECORD",
            "HOTEL_PREFERENCE",
            "HOTEL_RESERVATION",
            "HOTEL_STAY_REVENUE",
            "LOOKUP_ONLY",
            "LOYALTY",
            "LOYALTY_PROMOTION",
            "LOYALTY_TRANSACTION",
            "NEW_ONLY",
            "ORDER",
            "PROFILE",
            "SECONDARY",
            "UNIQUE",
        ]
    }
}
impl ::std::convert::AsRef<str> for StandardIdentifier {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl StandardIdentifier {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for StandardIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            StandardIdentifier::AirBooking => write!(f, "AIR_BOOKING"),
            StandardIdentifier::AirPreference => write!(f, "AIR_PREFERENCE"),
            StandardIdentifier::AirSegment => write!(f, "AIR_SEGMENT"),
            StandardIdentifier::Asset => write!(f, "ASSET"),
            StandardIdentifier::Case => write!(f, "CASE"),
            StandardIdentifier::CommunicationRecord => write!(f, "COMMUNICATION_RECORD"),
            StandardIdentifier::HotelPreference => write!(f, "HOTEL_PREFERENCE"),
            StandardIdentifier::HotelReservation => write!(f, "HOTEL_RESERVATION"),
            StandardIdentifier::HotelStayRevenue => write!(f, "HOTEL_STAY_REVENUE"),
            StandardIdentifier::LookupOnly => write!(f, "LOOKUP_ONLY"),
            StandardIdentifier::Loyalty => write!(f, "LOYALTY"),
            StandardIdentifier::LoyaltyPromotion => write!(f, "LOYALTY_PROMOTION"),
            StandardIdentifier::LoyaltyTransaction => write!(f, "LOYALTY_TRANSACTION"),
            StandardIdentifier::NewOnly => write!(f, "NEW_ONLY"),
            StandardIdentifier::Order => write!(f, "ORDER"),
            StandardIdentifier::Profile => write!(f, "PROFILE"),
            StandardIdentifier::Secondary => write!(f, "SECONDARY"),
            StandardIdentifier::Unique => write!(f, "UNIQUE"),
            StandardIdentifier::Unknown(value) => write!(f, "{value}"),
        }
    }
}
