// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A class for modeling different type of tasks. Task implementation varies based on the TaskType.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Task {
    /// <p>The operation to be performed on the provided source fields.</p>
    #[doc(hidden)]
    pub connector_operator: std::option::Option<crate::types::ConnectorOperator>,
    /// <p>A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.</p>
    #[doc(hidden)]
    pub destination_field: std::option::Option<std::string::String>,
    /// <p>The source fields to which a particular task is applied.</p>
    #[doc(hidden)]
    pub source_fields: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A map used to store task-related information. The service looks for particular information based on the TaskType.</p>
    #[doc(hidden)]
    pub task_properties: std::option::Option<
        std::collections::HashMap<crate::types::OperatorPropertiesKeys, std::string::String>,
    >,
    /// <p>Specifies the particular task implementation that Amazon AppFlow performs.</p>
    #[doc(hidden)]
    pub task_type: std::option::Option<crate::types::TaskType>,
}
impl Task {
    /// <p>The operation to be performed on the provided source fields.</p>
    pub fn connector_operator(&self) -> std::option::Option<&crate::types::ConnectorOperator> {
        self.connector_operator.as_ref()
    }
    /// <p>A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.</p>
    pub fn destination_field(&self) -> std::option::Option<&str> {
        self.destination_field.as_deref()
    }
    /// <p>The source fields to which a particular task is applied.</p>
    pub fn source_fields(&self) -> std::option::Option<&[std::string::String]> {
        self.source_fields.as_deref()
    }
    /// <p>A map used to store task-related information. The service looks for particular information based on the TaskType.</p>
    pub fn task_properties(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::OperatorPropertiesKeys, std::string::String>,
    > {
        self.task_properties.as_ref()
    }
    /// <p>Specifies the particular task implementation that Amazon AppFlow performs.</p>
    pub fn task_type(&self) -> std::option::Option<&crate::types::TaskType> {
        self.task_type.as_ref()
    }
}
impl Task {
    /// Creates a new builder-style object to manufacture [`Task`](crate::types::Task).
    pub fn builder() -> crate::types::builders::TaskBuilder {
        crate::types::builders::TaskBuilder::default()
    }
}

/// A builder for [`Task`](crate::types::Task).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskBuilder {
    pub(crate) connector_operator: std::option::Option<crate::types::ConnectorOperator>,
    pub(crate) destination_field: std::option::Option<std::string::String>,
    pub(crate) source_fields: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) task_properties: std::option::Option<
        std::collections::HashMap<crate::types::OperatorPropertiesKeys, std::string::String>,
    >,
    pub(crate) task_type: std::option::Option<crate::types::TaskType>,
}
impl TaskBuilder {
    /// <p>The operation to be performed on the provided source fields.</p>
    pub fn connector_operator(mut self, input: crate::types::ConnectorOperator) -> Self {
        self.connector_operator = Some(input);
        self
    }
    /// <p>The operation to be performed on the provided source fields.</p>
    pub fn set_connector_operator(
        mut self,
        input: std::option::Option<crate::types::ConnectorOperator>,
    ) -> Self {
        self.connector_operator = input;
        self
    }
    /// <p>A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.</p>
    pub fn destination_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_field = Some(input.into());
        self
    }
    /// <p>A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.</p>
    pub fn set_destination_field(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_field = input;
        self
    }
    /// Appends an item to `source_fields`.
    ///
    /// To override the contents of this collection use [`set_source_fields`](Self::set_source_fields).
    ///
    /// <p>The source fields to which a particular task is applied.</p>
    pub fn source_fields(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_fields.unwrap_or_default();
        v.push(input.into());
        self.source_fields = Some(v);
        self
    }
    /// <p>The source fields to which a particular task is applied.</p>
    pub fn set_source_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_fields = input;
        self
    }
    /// Adds a key-value pair to `task_properties`.
    ///
    /// To override the contents of this collection use [`set_task_properties`](Self::set_task_properties).
    ///
    /// <p>A map used to store task-related information. The service looks for particular information based on the TaskType.</p>
    pub fn task_properties(
        mut self,
        k: crate::types::OperatorPropertiesKeys,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.task_properties.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.task_properties = Some(hash_map);
        self
    }
    /// <p>A map used to store task-related information. The service looks for particular information based on the TaskType.</p>
    pub fn set_task_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::OperatorPropertiesKeys, std::string::String>,
        >,
    ) -> Self {
        self.task_properties = input;
        self
    }
    /// <p>Specifies the particular task implementation that Amazon AppFlow performs.</p>
    pub fn task_type(mut self, input: crate::types::TaskType) -> Self {
        self.task_type = Some(input);
        self
    }
    /// <p>Specifies the particular task implementation that Amazon AppFlow performs.</p>
    pub fn set_task_type(mut self, input: std::option::Option<crate::types::TaskType>) -> Self {
        self.task_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Task`](crate::types::Task).
    pub fn build(self) -> crate::types::Task {
        crate::types::Task {
            connector_operator: self.connector_operator,
            destination_field: self.destination_field,
            source_fields: self.source_fields,
            task_properties: self.task_properties,
            task_type: self.task_type,
        }
    }
}
