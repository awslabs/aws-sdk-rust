// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Workflow specific execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppflowIntegrationWorkflowMetrics {
    /// <p>Number of records processed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    #[doc(hidden)]
    pub records_processed: i64,
    /// <p>Total steps completed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    #[doc(hidden)]
    pub steps_completed: i64,
    /// <p>Total steps in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    #[doc(hidden)]
    pub total_steps: i64,
}
impl AppflowIntegrationWorkflowMetrics {
    /// <p>Number of records processed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn records_processed(&self) -> i64 {
        self.records_processed
    }
    /// <p>Total steps completed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn steps_completed(&self) -> i64 {
        self.steps_completed
    }
    /// <p>Total steps in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn total_steps(&self) -> i64 {
        self.total_steps
    }
}
impl AppflowIntegrationWorkflowMetrics {
    /// Creates a new builder-style object to manufacture [`AppflowIntegrationWorkflowMetrics`](crate::types::AppflowIntegrationWorkflowMetrics).
    pub fn builder() -> crate::types::builders::AppflowIntegrationWorkflowMetricsBuilder {
        crate::types::builders::AppflowIntegrationWorkflowMetricsBuilder::default()
    }
}

/// A builder for [`AppflowIntegrationWorkflowMetrics`](crate::types::AppflowIntegrationWorkflowMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppflowIntegrationWorkflowMetricsBuilder {
    pub(crate) records_processed: std::option::Option<i64>,
    pub(crate) steps_completed: std::option::Option<i64>,
    pub(crate) total_steps: std::option::Option<i64>,
}
impl AppflowIntegrationWorkflowMetricsBuilder {
    /// <p>Number of records processed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn records_processed(mut self, input: i64) -> Self {
        self.records_processed = Some(input);
        self
    }
    /// <p>Number of records processed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn set_records_processed(mut self, input: std::option::Option<i64>) -> Self {
        self.records_processed = input;
        self
    }
    /// <p>Total steps completed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn steps_completed(mut self, input: i64) -> Self {
        self.steps_completed = Some(input);
        self
    }
    /// <p>Total steps completed in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn set_steps_completed(mut self, input: std::option::Option<i64>) -> Self {
        self.steps_completed = input;
        self
    }
    /// <p>Total steps in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn total_steps(mut self, input: i64) -> Self {
        self.total_steps = Some(input);
        self
    }
    /// <p>Total steps in <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn set_total_steps(mut self, input: std::option::Option<i64>) -> Self {
        self.total_steps = input;
        self
    }
    /// Consumes the builder and constructs a [`AppflowIntegrationWorkflowMetrics`](crate::types::AppflowIntegrationWorkflowMetrics).
    pub fn build(self) -> crate::types::AppflowIntegrationWorkflowMetrics {
        crate::types::AppflowIntegrationWorkflowMetrics {
            records_processed: self.records_processed.unwrap_or_default(),
            steps_completed: self.steps_completed.unwrap_or_default(),
            total_steps: self.total_steps.unwrap_or_default(),
        }
    }
}
