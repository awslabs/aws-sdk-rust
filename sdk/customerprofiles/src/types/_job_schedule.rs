// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The day and time when do you want to start the Identity Resolution Job every week.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobSchedule {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub day_of_the_week: crate::types::JobScheduleDayOfTheWeek,
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub time: ::std::string::String,
}
impl JobSchedule {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn day_of_the_week(&self) -> &crate::types::JobScheduleDayOfTheWeek {
        &self.day_of_the_week
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn time(&self) -> &str {
        use std::ops::Deref;
        self.time.deref()
    }
}
impl JobSchedule {
    /// Creates a new builder-style object to manufacture [`JobSchedule`](crate::types::JobSchedule).
    pub fn builder() -> crate::types::builders::JobScheduleBuilder {
        crate::types::builders::JobScheduleBuilder::default()
    }
}

/// A builder for [`JobSchedule`](crate::types::JobSchedule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobScheduleBuilder {
    pub(crate) day_of_the_week: ::std::option::Option<crate::types::JobScheduleDayOfTheWeek>,
    pub(crate) time: ::std::option::Option<::std::string::String>,
}
impl JobScheduleBuilder {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    /// This field is required.
    pub fn day_of_the_week(mut self, input: crate::types::JobScheduleDayOfTheWeek) -> Self {
        self.day_of_the_week = ::std::option::Option::Some(input);
        self
    }
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn set_day_of_the_week(mut self, input: ::std::option::Option<crate::types::JobScheduleDayOfTheWeek>) -> Self {
        self.day_of_the_week = input;
        self
    }
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn get_day_of_the_week(&self) -> &::std::option::Option<crate::types::JobScheduleDayOfTheWeek> {
        &self.day_of_the_week
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    /// This field is required.
    pub fn time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn set_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time = input;
        self
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn get_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.time
    }
    /// Consumes the builder and constructs a [`JobSchedule`](crate::types::JobSchedule).
    /// This method will fail if any of the following fields are not set:
    /// - [`day_of_the_week`](crate::types::builders::JobScheduleBuilder::day_of_the_week)
    /// - [`time`](crate::types::builders::JobScheduleBuilder::time)
    pub fn build(self) -> ::std::result::Result<crate::types::JobSchedule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobSchedule {
            day_of_the_week: self.day_of_the_week.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "day_of_the_week",
                    "day_of_the_week was not specified but it is required when building JobSchedule",
                )
            })?,
            time: self.time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time",
                    "time was not specified but it is required when building JobSchedule",
                )
            })?,
        })
    }
}
