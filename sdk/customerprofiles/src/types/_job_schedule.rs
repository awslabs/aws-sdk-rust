// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The day and time when do you want to start the Identity Resolution Job every week.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobSchedule {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    #[doc(hidden)]
    pub day_of_the_week: std::option::Option<crate::types::JobScheduleDayOfTheWeek>,
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    #[doc(hidden)]
    pub time: std::option::Option<std::string::String>,
}
impl JobSchedule {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn day_of_the_week(&self) -> std::option::Option<&crate::types::JobScheduleDayOfTheWeek> {
        self.day_of_the_week.as_ref()
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn time(&self) -> std::option::Option<&str> {
        self.time.as_deref()
    }
}
impl JobSchedule {
    /// Creates a new builder-style object to manufacture [`JobSchedule`](crate::types::JobSchedule).
    pub fn builder() -> crate::types::builders::JobScheduleBuilder {
        crate::types::builders::JobScheduleBuilder::default()
    }
}

/// A builder for [`JobSchedule`](crate::types::JobSchedule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobScheduleBuilder {
    pub(crate) day_of_the_week: std::option::Option<crate::types::JobScheduleDayOfTheWeek>,
    pub(crate) time: std::option::Option<std::string::String>,
}
impl JobScheduleBuilder {
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn day_of_the_week(mut self, input: crate::types::JobScheduleDayOfTheWeek) -> Self {
        self.day_of_the_week = Some(input);
        self
    }
    /// <p>The day when the Identity Resolution Job should run every week.</p>
    pub fn set_day_of_the_week(
        mut self,
        input: std::option::Option<crate::types::JobScheduleDayOfTheWeek>,
    ) -> Self {
        self.day_of_the_week = input;
        self
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn time(mut self, input: impl Into<std::string::String>) -> Self {
        self.time = Some(input.into());
        self
    }
    /// <p>The time when the Identity Resolution Job should run every week.</p>
    pub fn set_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time = input;
        self
    }
    /// Consumes the builder and constructs a [`JobSchedule`](crate::types::JobSchedule).
    pub fn build(self) -> crate::types::JobSchedule {
        crate::types::JobSchedule {
            day_of_the_week: self.day_of_the_week,
            time: self.time,
        }
    }
}
