// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Identity Resolution Job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IdentityResolutionJob {
    /// <p>The unique name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the Identity Resolution Job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The status of the Identity Resolution Job.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li>
    /// <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li>
    /// <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li>
    /// <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: There's a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li>
    /// <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::IdentityResolutionJobStatus>,
    /// <p>The timestamp of when the job was started or will be started.</p>
    #[doc(hidden)]
    pub job_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the job was completed.</p>
    #[doc(hidden)]
    pub job_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Statistics about an Identity Resolution Job.</p>
    #[doc(hidden)]
    pub job_stats: std::option::Option<crate::types::JobStats>,
    /// <p>The S3 location where the Identity Resolution Job writes result files.</p>
    #[doc(hidden)]
    pub exporting_location: std::option::Option<crate::types::ExportingLocation>,
    /// <p>The error messages that are generated when the Identity Resolution Job runs.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl IdentityResolutionJob {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The unique identifier of the Identity Resolution Job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The status of the Identity Resolution Job.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li>
    /// <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li>
    /// <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li>
    /// <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: There's a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li>
    /// <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::IdentityResolutionJobStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp of when the job was started or will be started.</p>
    pub fn job_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.job_start_time.as_ref()
    }
    /// <p>The timestamp of when the job was completed.</p>
    pub fn job_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.job_end_time.as_ref()
    }
    /// <p>Statistics about an Identity Resolution Job.</p>
    pub fn job_stats(&self) -> std::option::Option<&crate::types::JobStats> {
        self.job_stats.as_ref()
    }
    /// <p>The S3 location where the Identity Resolution Job writes result files.</p>
    pub fn exporting_location(&self) -> std::option::Option<&crate::types::ExportingLocation> {
        self.exporting_location.as_ref()
    }
    /// <p>The error messages that are generated when the Identity Resolution Job runs.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl IdentityResolutionJob {
    /// Creates a new builder-style object to manufacture [`IdentityResolutionJob`](crate::types::IdentityResolutionJob).
    pub fn builder() -> crate::types::builders::IdentityResolutionJobBuilder {
        crate::types::builders::IdentityResolutionJobBuilder::default()
    }
}

/// A builder for [`IdentityResolutionJob`](crate::types::IdentityResolutionJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IdentityResolutionJobBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::IdentityResolutionJobStatus>,
    pub(crate) job_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) job_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) job_stats: std::option::Option<crate::types::JobStats>,
    pub(crate) exporting_location: std::option::Option<crate::types::ExportingLocation>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl IdentityResolutionJobBuilder {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique identifier of the Identity Resolution Job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Identity Resolution Job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The status of the Identity Resolution Job.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li>
    /// <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li>
    /// <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li>
    /// <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: There's a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li>
    /// <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::IdentityResolutionJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the Identity Resolution Job.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li>
    /// <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li>
    /// <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li>
    /// <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li>
    /// <li> <p> <code>PARTIAL_SUCCESS</code>: There's a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li>
    /// <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::IdentityResolutionJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The timestamp of when the job was started or will be started.</p>
    pub fn job_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.job_start_time = Some(input);
        self
    }
    /// <p>The timestamp of when the job was started or will be started.</p>
    pub fn set_job_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.job_start_time = input;
        self
    }
    /// <p>The timestamp of when the job was completed.</p>
    pub fn job_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.job_end_time = Some(input);
        self
    }
    /// <p>The timestamp of when the job was completed.</p>
    pub fn set_job_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.job_end_time = input;
        self
    }
    /// <p>Statistics about an Identity Resolution Job.</p>
    pub fn job_stats(mut self, input: crate::types::JobStats) -> Self {
        self.job_stats = Some(input);
        self
    }
    /// <p>Statistics about an Identity Resolution Job.</p>
    pub fn set_job_stats(mut self, input: std::option::Option<crate::types::JobStats>) -> Self {
        self.job_stats = input;
        self
    }
    /// <p>The S3 location where the Identity Resolution Job writes result files.</p>
    pub fn exporting_location(mut self, input: crate::types::ExportingLocation) -> Self {
        self.exporting_location = Some(input);
        self
    }
    /// <p>The S3 location where the Identity Resolution Job writes result files.</p>
    pub fn set_exporting_location(
        mut self,
        input: std::option::Option<crate::types::ExportingLocation>,
    ) -> Self {
        self.exporting_location = input;
        self
    }
    /// <p>The error messages that are generated when the Identity Resolution Job runs.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The error messages that are generated when the Identity Resolution Job runs.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`IdentityResolutionJob`](crate::types::IdentityResolutionJob).
    pub fn build(self) -> crate::types::IdentityResolutionJob {
        crate::types::IdentityResolutionJob {
            domain_name: self.domain_name,
            job_id: self.job_id,
            status: self.status,
            job_start_time: self.job_start_time,
            job_end_time: self.job_end_time,
            job_stats: self.job_stats,
            exporting_location: self.exporting_location,
            message: self.message,
        }
    }
}
