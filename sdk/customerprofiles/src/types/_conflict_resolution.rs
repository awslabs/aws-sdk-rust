// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConflictResolution {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub conflict_resolving_model: crate::types::ConflictResolvingModel,
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub source_name: ::std::option::Option<::std::string::String>,
}
impl ConflictResolution {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn conflict_resolving_model(&self) -> &crate::types::ConflictResolvingModel {
        &self.conflict_resolving_model
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn source_name(&self) -> ::std::option::Option<&str> {
        self.source_name.as_deref()
    }
}
impl ConflictResolution {
    /// Creates a new builder-style object to manufacture [`ConflictResolution`](crate::types::ConflictResolution).
    pub fn builder() -> crate::types::builders::ConflictResolutionBuilder {
        crate::types::builders::ConflictResolutionBuilder::default()
    }
}

/// A builder for [`ConflictResolution`](crate::types::ConflictResolution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConflictResolutionBuilder {
    pub(crate) conflict_resolving_model: ::std::option::Option<crate::types::ConflictResolvingModel>,
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
}
impl ConflictResolutionBuilder {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn conflict_resolving_model(mut self, input: crate::types::ConflictResolvingModel) -> Self {
        self.conflict_resolving_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn set_conflict_resolving_model(mut self, input: ::std::option::Option<crate::types::ConflictResolvingModel>) -> Self {
        self.conflict_resolving_model = input;
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn get_conflict_resolving_model(&self) -> &::std::option::Option<crate::types::ConflictResolvingModel> {
        &self.conflict_resolving_model
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// Consumes the builder and constructs a [`ConflictResolution`](crate::types::ConflictResolution).
    /// This method will fail if any of the following fields are not set:
    /// - [`conflict_resolving_model`](crate::types::builders::ConflictResolutionBuilder::conflict_resolving_model)
    pub fn build(self) -> ::std::result::Result<crate::types::ConflictResolution, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConflictResolution {
            conflict_resolving_model: self.conflict_resolving_model.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conflict_resolving_model",
                    "conflict_resolving_model was not specified but it is required when building ConflictResolution",
                )
            })?,
            source_name: self.source_name,
        })
    }
}
