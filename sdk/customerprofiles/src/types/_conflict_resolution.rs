// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConflictResolution {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub conflict_resolving_model: std::option::Option<crate::types::ConflictResolvingModel>,
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    #[doc(hidden)]
    pub source_name: std::option::Option<std::string::String>,
}
impl ConflictResolution {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn conflict_resolving_model(
        &self,
    ) -> std::option::Option<&crate::types::ConflictResolvingModel> {
        self.conflict_resolving_model.as_ref()
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn source_name(&self) -> std::option::Option<&str> {
        self.source_name.as_deref()
    }
}
impl ConflictResolution {
    /// Creates a new builder-style object to manufacture [`ConflictResolution`](crate::types::ConflictResolution).
    pub fn builder() -> crate::types::builders::ConflictResolutionBuilder {
        crate::types::builders::ConflictResolutionBuilder::default()
    }
}

/// A builder for [`ConflictResolution`](crate::types::ConflictResolution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConflictResolutionBuilder {
    pub(crate) conflict_resolving_model: std::option::Option<crate::types::ConflictResolvingModel>,
    pub(crate) source_name: std::option::Option<std::string::String>,
}
impl ConflictResolutionBuilder {
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn conflict_resolving_model(mut self, input: crate::types::ConflictResolvingModel) -> Self {
        self.conflict_resolving_model = Some(input);
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// <ul>
    /// <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li>
    /// <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li>
    /// </ul>
    pub fn set_conflict_resolving_model(
        mut self,
        input: std::option::Option<crate::types::ConflictResolvingModel>,
    ) -> Self {
        self.conflict_resolving_model = input;
        self
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_name = Some(input.into());
        self
    }
    /// <p>The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.</p>
    pub fn set_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ConflictResolution`](crate::types::ConflictResolution).
    pub fn build(self) -> crate::types::ConflictResolution {
        crate::types::ConflictResolution {
            conflict_resolving_model: self.conflict_resolving_model,
            source_name: self.source_name,
        }
    }
}
