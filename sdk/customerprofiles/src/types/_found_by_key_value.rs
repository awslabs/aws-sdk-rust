// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A data type pair that consists of a <code>KeyName</code> and <code>Values</code> list that were used to find a profile returned in response to a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FoundByKeyValue {
    /// <p>A searchable identifier of a customer profile.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of key values.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FoundByKeyValue {
    /// <p>A searchable identifier of a customer profile.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>A list of key values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl FoundByKeyValue {
    /// Creates a new builder-style object to manufacture [`FoundByKeyValue`](crate::types::FoundByKeyValue).
    pub fn builder() -> crate::types::builders::FoundByKeyValueBuilder {
        crate::types::builders::FoundByKeyValueBuilder::default()
    }
}

/// A builder for [`FoundByKeyValue`](crate::types::FoundByKeyValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FoundByKeyValueBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FoundByKeyValueBuilder {
    /// <p>A searchable identifier of a customer profile.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A searchable identifier of a customer profile.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>A searchable identifier of a customer profile.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A list of key values.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key values.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>A list of key values.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`FoundByKeyValue`](crate::types::FoundByKeyValue).
    pub fn build(self) -> crate::types::FoundByKeyValue {
        crate::types::FoundByKeyValue {
            key_name: self.key_name,
            values: self.values,
        }
    }
}
