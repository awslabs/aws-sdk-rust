// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Generic object containing workflow execution metrics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowMetrics {
    /// <p>Workflow execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.</p>
    #[doc(hidden)]
    pub appflow_integration: std::option::Option<crate::types::AppflowIntegrationWorkflowMetrics>,
}
impl WorkflowMetrics {
    /// <p>Workflow execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn appflow_integration(
        &self,
    ) -> std::option::Option<&crate::types::AppflowIntegrationWorkflowMetrics> {
        self.appflow_integration.as_ref()
    }
}
impl WorkflowMetrics {
    /// Creates a new builder-style object to manufacture [`WorkflowMetrics`](crate::types::WorkflowMetrics).
    pub fn builder() -> crate::types::builders::WorkflowMetricsBuilder {
        crate::types::builders::WorkflowMetricsBuilder::default()
    }
}

/// A builder for [`WorkflowMetrics`](crate::types::WorkflowMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowMetricsBuilder {
    pub(crate) appflow_integration:
        std::option::Option<crate::types::AppflowIntegrationWorkflowMetrics>,
}
impl WorkflowMetricsBuilder {
    /// <p>Workflow execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn appflow_integration(
        mut self,
        input: crate::types::AppflowIntegrationWorkflowMetrics,
    ) -> Self {
        self.appflow_integration = Some(input);
        self
    }
    /// <p>Workflow execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.</p>
    pub fn set_appflow_integration(
        mut self,
        input: std::option::Option<crate::types::AppflowIntegrationWorkflowMetrics>,
    ) -> Self {
        self.appflow_integration = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowMetrics`](crate::types::WorkflowMetrics).
    pub fn build(self) -> crate::types::WorkflowMetrics {
        crate::types::WorkflowMetrics {
            appflow_integration: self.appflow_integration,
        }
    }
}
