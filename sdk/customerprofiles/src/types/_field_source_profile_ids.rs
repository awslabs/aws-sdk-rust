// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A duplicate customer profile that is to be merged into a main profile. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldSourceProfileIds {
    /// <p>A unique identifier for the account number field to be merged. </p>
    #[doc(hidden)]
    pub account_number: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the additional information field to be merged.</p>
    #[doc(hidden)]
    pub additional_information: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the party type field to be merged.</p>
    #[doc(hidden)]
    pub party_type: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the business name field to be merged.</p>
    #[doc(hidden)]
    pub business_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the first name field to be merged.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the middle name field to be merged.</p>
    #[doc(hidden)]
    pub middle_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the last name field to be merged.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the birthdate field to be merged.</p>
    #[doc(hidden)]
    pub birth_date: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the gender field to be merged.</p>
    #[doc(hidden)]
    pub gender: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the phone number field to be merged.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the mobile phone number field to be merged.</p>
    #[doc(hidden)]
    pub mobile_phone_number: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the home phone number field to be merged.</p>
    #[doc(hidden)]
    pub home_phone_number: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the business phone number field to be merged.</p>
    #[doc(hidden)]
    pub business_phone_number: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the email address field to be merged.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the personal email address field to be merged.</p>
    #[doc(hidden)]
    pub personal_email_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the party type field to be merged.</p>
    #[doc(hidden)]
    pub business_email_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the party type field to be merged.</p>
    #[doc(hidden)]
    pub address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the shipping address field to be merged.</p>
    #[doc(hidden)]
    pub shipping_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the mailing address field to be merged.</p>
    #[doc(hidden)]
    pub mailing_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the billing type field to be merged.</p>
    #[doc(hidden)]
    pub billing_address: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the attributes field to be merged.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FieldSourceProfileIds {
    /// <p>A unique identifier for the account number field to be merged. </p>
    pub fn account_number(&self) -> std::option::Option<&str> {
        self.account_number.as_deref()
    }
    /// <p>A unique identifier for the additional information field to be merged.</p>
    pub fn additional_information(&self) -> std::option::Option<&str> {
        self.additional_information.as_deref()
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn party_type(&self) -> std::option::Option<&str> {
        self.party_type.as_deref()
    }
    /// <p>A unique identifier for the business name field to be merged.</p>
    pub fn business_name(&self) -> std::option::Option<&str> {
        self.business_name.as_deref()
    }
    /// <p>A unique identifier for the first name field to be merged.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>A unique identifier for the middle name field to be merged.</p>
    pub fn middle_name(&self) -> std::option::Option<&str> {
        self.middle_name.as_deref()
    }
    /// <p>A unique identifier for the last name field to be merged.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>A unique identifier for the birthdate field to be merged.</p>
    pub fn birth_date(&self) -> std::option::Option<&str> {
        self.birth_date.as_deref()
    }
    /// <p>A unique identifier for the gender field to be merged.</p>
    pub fn gender(&self) -> std::option::Option<&str> {
        self.gender.as_deref()
    }
    /// <p>A unique identifier for the phone number field to be merged.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>A unique identifier for the mobile phone number field to be merged.</p>
    pub fn mobile_phone_number(&self) -> std::option::Option<&str> {
        self.mobile_phone_number.as_deref()
    }
    /// <p>A unique identifier for the home phone number field to be merged.</p>
    pub fn home_phone_number(&self) -> std::option::Option<&str> {
        self.home_phone_number.as_deref()
    }
    /// <p>A unique identifier for the business phone number field to be merged.</p>
    pub fn business_phone_number(&self) -> std::option::Option<&str> {
        self.business_phone_number.as_deref()
    }
    /// <p>A unique identifier for the email address field to be merged.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>A unique identifier for the personal email address field to be merged.</p>
    pub fn personal_email_address(&self) -> std::option::Option<&str> {
        self.personal_email_address.as_deref()
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn business_email_address(&self) -> std::option::Option<&str> {
        self.business_email_address.as_deref()
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn address(&self) -> std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>A unique identifier for the shipping address field to be merged.</p>
    pub fn shipping_address(&self) -> std::option::Option<&str> {
        self.shipping_address.as_deref()
    }
    /// <p>A unique identifier for the mailing address field to be merged.</p>
    pub fn mailing_address(&self) -> std::option::Option<&str> {
        self.mailing_address.as_deref()
    }
    /// <p>A unique identifier for the billing type field to be merged.</p>
    pub fn billing_address(&self) -> std::option::Option<&str> {
        self.billing_address.as_deref()
    }
    /// <p>A unique identifier for the attributes field to be merged.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl FieldSourceProfileIds {
    /// Creates a new builder-style object to manufacture [`FieldSourceProfileIds`](crate::types::FieldSourceProfileIds).
    pub fn builder() -> crate::types::builders::FieldSourceProfileIdsBuilder {
        crate::types::builders::FieldSourceProfileIdsBuilder::default()
    }
}

/// A builder for [`FieldSourceProfileIds`](crate::types::FieldSourceProfileIds).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldSourceProfileIdsBuilder {
    pub(crate) account_number: std::option::Option<std::string::String>,
    pub(crate) additional_information: std::option::Option<std::string::String>,
    pub(crate) party_type: std::option::Option<std::string::String>,
    pub(crate) business_name: std::option::Option<std::string::String>,
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) middle_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) birth_date: std::option::Option<std::string::String>,
    pub(crate) gender: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) mobile_phone_number: std::option::Option<std::string::String>,
    pub(crate) home_phone_number: std::option::Option<std::string::String>,
    pub(crate) business_phone_number: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) personal_email_address: std::option::Option<std::string::String>,
    pub(crate) business_email_address: std::option::Option<std::string::String>,
    pub(crate) address: std::option::Option<std::string::String>,
    pub(crate) shipping_address: std::option::Option<std::string::String>,
    pub(crate) mailing_address: std::option::Option<std::string::String>,
    pub(crate) billing_address: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FieldSourceProfileIdsBuilder {
    /// <p>A unique identifier for the account number field to be merged. </p>
    pub fn account_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_number = Some(input.into());
        self
    }
    /// <p>A unique identifier for the account number field to be merged. </p>
    pub fn set_account_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_number = input;
        self
    }
    /// <p>A unique identifier for the additional information field to be merged.</p>
    pub fn additional_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_information = Some(input.into());
        self
    }
    /// <p>A unique identifier for the additional information field to be merged.</p>
    pub fn set_additional_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_information = input;
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn party_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.party_type = Some(input.into());
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn set_party_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.party_type = input;
        self
    }
    /// <p>A unique identifier for the business name field to be merged.</p>
    pub fn business_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_name = Some(input.into());
        self
    }
    /// <p>A unique identifier for the business name field to be merged.</p>
    pub fn set_business_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.business_name = input;
        self
    }
    /// <p>A unique identifier for the first name field to be merged.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>A unique identifier for the first name field to be merged.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>A unique identifier for the middle name field to be merged.</p>
    pub fn middle_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.middle_name = Some(input.into());
        self
    }
    /// <p>A unique identifier for the middle name field to be merged.</p>
    pub fn set_middle_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.middle_name = input;
        self
    }
    /// <p>A unique identifier for the last name field to be merged.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p>A unique identifier for the last name field to be merged.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>A unique identifier for the birthdate field to be merged.</p>
    pub fn birth_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.birth_date = Some(input.into());
        self
    }
    /// <p>A unique identifier for the birthdate field to be merged.</p>
    pub fn set_birth_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.birth_date = input;
        self
    }
    /// <p>A unique identifier for the gender field to be merged.</p>
    pub fn gender(mut self, input: impl Into<std::string::String>) -> Self {
        self.gender = Some(input.into());
        self
    }
    /// <p>A unique identifier for the gender field to be merged.</p>
    pub fn set_gender(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gender = input;
        self
    }
    /// <p>A unique identifier for the phone number field to be merged.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>A unique identifier for the phone number field to be merged.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>A unique identifier for the mobile phone number field to be merged.</p>
    pub fn mobile_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.mobile_phone_number = Some(input.into());
        self
    }
    /// <p>A unique identifier for the mobile phone number field to be merged.</p>
    pub fn set_mobile_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.mobile_phone_number = input;
        self
    }
    /// <p>A unique identifier for the home phone number field to be merged.</p>
    pub fn home_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_phone_number = Some(input.into());
        self
    }
    /// <p>A unique identifier for the home phone number field to be merged.</p>
    pub fn set_home_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.home_phone_number = input;
        self
    }
    /// <p>A unique identifier for the business phone number field to be merged.</p>
    pub fn business_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_phone_number = Some(input.into());
        self
    }
    /// <p>A unique identifier for the business phone number field to be merged.</p>
    pub fn set_business_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.business_phone_number = input;
        self
    }
    /// <p>A unique identifier for the email address field to be merged.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the email address field to be merged.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>A unique identifier for the personal email address field to be merged.</p>
    pub fn personal_email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.personal_email_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the personal email address field to be merged.</p>
    pub fn set_personal_email_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.personal_email_address = input;
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn business_email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.business_email_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn set_business_email_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.business_email_address = input;
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the party type field to be merged.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>A unique identifier for the shipping address field to be merged.</p>
    pub fn shipping_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.shipping_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the shipping address field to be merged.</p>
    pub fn set_shipping_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.shipping_address = input;
        self
    }
    /// <p>A unique identifier for the mailing address field to be merged.</p>
    pub fn mailing_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.mailing_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the mailing address field to be merged.</p>
    pub fn set_mailing_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mailing_address = input;
        self
    }
    /// <p>A unique identifier for the billing type field to be merged.</p>
    pub fn billing_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.billing_address = Some(input.into());
        self
    }
    /// <p>A unique identifier for the billing type field to be merged.</p>
    pub fn set_billing_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.billing_address = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A unique identifier for the attributes field to be merged.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>A unique identifier for the attributes field to be merged.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldSourceProfileIds`](crate::types::FieldSourceProfileIds).
    pub fn build(self) -> crate::types::FieldSourceProfileIds {
        crate::types::FieldSourceProfileIds {
            account_number: self.account_number,
            additional_information: self.additional_information,
            party_type: self.party_type,
            business_name: self.business_name,
            first_name: self.first_name,
            middle_name: self.middle_name,
            last_name: self.last_name,
            birth_date: self.birth_date,
            gender: self.gender,
            phone_number: self.phone_number,
            mobile_phone_number: self.mobile_phone_number,
            home_phone_number: self.home_phone_number,
            business_phone_number: self.business_phone_number,
            email_address: self.email_address,
            personal_email_address: self.personal_email_address,
            business_email_address: self.business_email_address,
            address: self.address,
            shipping_address: self.shipping_address,
            mailing_address: self.mailing_address,
            billing_address: self.billing_address,
            attributes: self.attributes,
        }
    }
}
