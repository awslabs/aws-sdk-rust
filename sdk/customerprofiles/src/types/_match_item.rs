// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Match group object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchItem {
    /// <p>The unique identifiers for this group of profiles that match.</p>
    pub match_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of identifiers for profiles that match.</p>
    pub profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.</p>
    pub confidence_score: ::std::option::Option<f64>,
}
impl MatchItem {
    /// <p>The unique identifiers for this group of profiles that match.</p>
    pub fn match_id(&self) -> ::std::option::Option<&str> {
        self.match_id.as_deref()
    }
    /// <p>A list of identifiers for profiles that match.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.profile_ids.is_none()`.
    pub fn profile_ids(&self) -> &[::std::string::String] {
        self.profile_ids.as_deref().unwrap_or_default()
    }
    /// <p>A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.</p>
    pub fn confidence_score(&self) -> ::std::option::Option<f64> {
        self.confidence_score
    }
}
impl MatchItem {
    /// Creates a new builder-style object to manufacture [`MatchItem`](crate::types::MatchItem).
    pub fn builder() -> crate::types::builders::MatchItemBuilder {
        crate::types::builders::MatchItemBuilder::default()
    }
}

/// A builder for [`MatchItem`](crate::types::MatchItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MatchItemBuilder {
    pub(crate) match_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) confidence_score: ::std::option::Option<f64>,
}
impl MatchItemBuilder {
    /// <p>The unique identifiers for this group of profiles that match.</p>
    pub fn match_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.match_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifiers for this group of profiles that match.</p>
    pub fn set_match_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.match_id = input;
        self
    }
    /// <p>The unique identifiers for this group of profiles that match.</p>
    pub fn get_match_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.match_id
    }
    /// Appends an item to `profile_ids`.
    ///
    /// To override the contents of this collection use [`set_profile_ids`](Self::set_profile_ids).
    ///
    /// <p>A list of identifiers for profiles that match.</p>
    pub fn profile_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.profile_ids.unwrap_or_default();
        v.push(input.into());
        self.profile_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of identifiers for profiles that match.</p>
    pub fn set_profile_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.profile_ids = input;
        self
    }
    /// <p>A list of identifiers for profiles that match.</p>
    pub fn get_profile_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.profile_ids
    }
    /// <p>A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.</p>
    pub fn confidence_score(mut self, input: f64) -> Self {
        self.confidence_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.</p>
    pub fn set_confidence_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence_score = input;
        self
    }
    /// <p>A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.</p>
    pub fn get_confidence_score(&self) -> &::std::option::Option<f64> {
        &self.confidence_score
    }
    /// Consumes the builder and constructs a [`MatchItem`](crate::types::MatchItem).
    pub fn build(self) -> crate::types::MatchItem {
        crate::types::MatchItem {
            match_id: self.match_id,
            profile_ids: self.profile_ids,
            confidence_score: self.confidence_score,
        }
    }
}
