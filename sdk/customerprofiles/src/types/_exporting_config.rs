// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note>
/// <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportingConfig {
    /// <p>The S3 location where Identity Resolution Jobs write result files.</p>
    #[doc(hidden)]
    pub s3_exporting: std::option::Option<crate::types::S3ExportingConfig>,
}
impl ExportingConfig {
    /// <p>The S3 location where Identity Resolution Jobs write result files.</p>
    pub fn s3_exporting(&self) -> std::option::Option<&crate::types::S3ExportingConfig> {
        self.s3_exporting.as_ref()
    }
}
impl ExportingConfig {
    /// Creates a new builder-style object to manufacture [`ExportingConfig`](crate::types::ExportingConfig).
    pub fn builder() -> crate::types::builders::ExportingConfigBuilder {
        crate::types::builders::ExportingConfigBuilder::default()
    }
}

/// A builder for [`ExportingConfig`](crate::types::ExportingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportingConfigBuilder {
    pub(crate) s3_exporting: std::option::Option<crate::types::S3ExportingConfig>,
}
impl ExportingConfigBuilder {
    /// <p>The S3 location where Identity Resolution Jobs write result files.</p>
    pub fn s3_exporting(mut self, input: crate::types::S3ExportingConfig) -> Self {
        self.s3_exporting = Some(input);
        self
    }
    /// <p>The S3 location where Identity Resolution Jobs write result files.</p>
    pub fn set_s3_exporting(
        mut self,
        input: std::option::Option<crate::types::S3ExportingConfig>,
    ) -> Self {
        self.s3_exporting = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportingConfig`](crate::types::ExportingConfig).
    pub fn build(self) -> crate::types::ExportingConfig {
        crate::types::ExportingConfig {
            s3_exporting: self.s3_exporting,
        }
    }
}
