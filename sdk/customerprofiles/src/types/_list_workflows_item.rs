// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A workflow in list of workflows.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkflowsItem {
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub workflow_type: crate::types::WorkflowType,
    /// <p>Unique identifier for the workflow.</p>
    pub workflow_id: ::std::string::String,
    /// <p>Status of workflow execution.</p>
    pub status: crate::types::Status,
    /// <p>Description for workflow execution status.</p>
    pub status_description: ::std::string::String,
    /// <p>Creation timestamp for workflow.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>Last updated timestamp for workflow.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
}
impl ListWorkflowsItem {
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn workflow_type(&self) -> &crate::types::WorkflowType {
        &self.workflow_type
    }
    /// <p>Unique identifier for the workflow.</p>
    pub fn workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.workflow_id.deref()
    }
    /// <p>Status of workflow execution.</p>
    pub fn status(&self) -> &crate::types::Status {
        &self.status
    }
    /// <p>Description for workflow execution status.</p>
    pub fn status_description(&self) -> &str {
        use std::ops::Deref;
        self.status_description.deref()
    }
    /// <p>Creation timestamp for workflow.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>Last updated timestamp for workflow.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
}
impl ListWorkflowsItem {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsItem`](crate::types::ListWorkflowsItem).
    pub fn builder() -> crate::types::builders::ListWorkflowsItemBuilder {
        crate::types::builders::ListWorkflowsItemBuilder::default()
    }
}

/// A builder for [`ListWorkflowsItem`](crate::types::ListWorkflowsItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkflowsItemBuilder {
    pub(crate) workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) status_description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListWorkflowsItemBuilder {
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    /// This field is required.
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn set_workflow_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn get_workflow_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.workflow_type
    }
    /// <p>Unique identifier for the workflow.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the workflow.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>Unique identifier for the workflow.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>Status of workflow execution.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>Description for workflow execution status.</p>
    /// This field is required.
    pub fn status_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description for workflow execution status.</p>
    pub fn set_status_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_description = input;
        self
    }
    /// <p>Description for workflow execution status.</p>
    pub fn get_status_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_description
    }
    /// <p>Creation timestamp for workflow.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation timestamp for workflow.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Creation timestamp for workflow.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Last updated timestamp for workflow.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Last updated timestamp for workflow.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>Last updated timestamp for workflow.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`ListWorkflowsItem`](crate::types::ListWorkflowsItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`workflow_type`](crate::types::builders::ListWorkflowsItemBuilder::workflow_type)
    /// - [`workflow_id`](crate::types::builders::ListWorkflowsItemBuilder::workflow_id)
    /// - [`status`](crate::types::builders::ListWorkflowsItemBuilder::status)
    /// - [`status_description`](crate::types::builders::ListWorkflowsItemBuilder::status_description)
    /// - [`created_at`](crate::types::builders::ListWorkflowsItemBuilder::created_at)
    /// - [`last_updated_at`](crate::types::builders::ListWorkflowsItemBuilder::last_updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::ListWorkflowsItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListWorkflowsItem {
            workflow_type: self.workflow_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflow_type",
                    "workflow_type was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
            workflow_id: self.workflow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflow_id",
                    "workflow_id was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
            status_description: self.status_description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_description",
                    "status_description was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building ListWorkflowsItem",
                )
            })?,
        })
    }
}
