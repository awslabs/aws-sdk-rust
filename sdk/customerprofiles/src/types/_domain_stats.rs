// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Usage-specific statistics about the domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainStats {
    /// <p>The total number of profiles currently in the domain.</p>
    #[doc(hidden)]
    pub profile_count: i64,
    /// <p>The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.</p>
    #[doc(hidden)]
    pub metering_profile_count: i64,
    /// <p>The total number of objects in domain.</p>
    #[doc(hidden)]
    pub object_count: i64,
    /// <p>The total size, in bytes, of all objects in the domain.</p>
    #[doc(hidden)]
    pub total_size: i64,
}
impl DomainStats {
    /// <p>The total number of profiles currently in the domain.</p>
    pub fn profile_count(&self) -> i64 {
        self.profile_count
    }
    /// <p>The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.</p>
    pub fn metering_profile_count(&self) -> i64 {
        self.metering_profile_count
    }
    /// <p>The total number of objects in domain.</p>
    pub fn object_count(&self) -> i64 {
        self.object_count
    }
    /// <p>The total size, in bytes, of all objects in the domain.</p>
    pub fn total_size(&self) -> i64 {
        self.total_size
    }
}
impl DomainStats {
    /// Creates a new builder-style object to manufacture [`DomainStats`](crate::types::DomainStats).
    pub fn builder() -> crate::types::builders::DomainStatsBuilder {
        crate::types::builders::DomainStatsBuilder::default()
    }
}

/// A builder for [`DomainStats`](crate::types::DomainStats).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainStatsBuilder {
    pub(crate) profile_count: std::option::Option<i64>,
    pub(crate) metering_profile_count: std::option::Option<i64>,
    pub(crate) object_count: std::option::Option<i64>,
    pub(crate) total_size: std::option::Option<i64>,
}
impl DomainStatsBuilder {
    /// <p>The total number of profiles currently in the domain.</p>
    pub fn profile_count(mut self, input: i64) -> Self {
        self.profile_count = Some(input);
        self
    }
    /// <p>The total number of profiles currently in the domain.</p>
    pub fn set_profile_count(mut self, input: std::option::Option<i64>) -> Self {
        self.profile_count = input;
        self
    }
    /// <p>The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.</p>
    pub fn metering_profile_count(mut self, input: i64) -> Self {
        self.metering_profile_count = Some(input);
        self
    }
    /// <p>The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.</p>
    pub fn set_metering_profile_count(mut self, input: std::option::Option<i64>) -> Self {
        self.metering_profile_count = input;
        self
    }
    /// <p>The total number of objects in domain.</p>
    pub fn object_count(mut self, input: i64) -> Self {
        self.object_count = Some(input);
        self
    }
    /// <p>The total number of objects in domain.</p>
    pub fn set_object_count(mut self, input: std::option::Option<i64>) -> Self {
        self.object_count = input;
        self
    }
    /// <p>The total size, in bytes, of all objects in the domain.</p>
    pub fn total_size(mut self, input: i64) -> Self {
        self.total_size = Some(input);
        self
    }
    /// <p>The total size, in bytes, of all objects in the domain.</p>
    pub fn set_total_size(mut self, input: std::option::Option<i64>) -> Self {
        self.total_size = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainStats`](crate::types::DomainStats).
    pub fn build(self) -> crate::types::DomainStats {
        crate::types::DomainStats {
            profile_count: self.profile_count.unwrap_or_default(),
            metering_profile_count: self.metering_profile_count.unwrap_or_default(),
            object_count: self.object_count.unwrap_or_default(),
            total_size: self.total_size.unwrap_or_default(),
        }
    }
}
