// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetProfileObjectTypeTemplateOutput {
    /// <p>A unique identifier for the object template.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The name of the source of the object template.</p>
    #[doc(hidden)]
    pub source_name: std::option::Option<std::string::String>,
    /// <p>The source of the object template.</p>
    #[doc(hidden)]
    pub source_object: std::option::Option<std::string::String>,
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    #[doc(hidden)]
    pub allow_profile_creation: bool,
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.</p>
    #[doc(hidden)]
    pub source_last_updated_timestamp_format: std::option::Option<std::string::String>,
    /// <p>A map of the name and ObjectType field.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    >,
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    #[doc(hidden)]
    pub keys: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    >,
    _request_id: Option<String>,
}
impl GetProfileObjectTypeTemplateOutput {
    /// <p>A unique identifier for the object template.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The name of the source of the object template.</p>
    pub fn source_name(&self) -> std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p>The source of the object template.</p>
    pub fn source_object(&self) -> std::option::Option<&str> {
        self.source_object.as_deref()
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn allow_profile_creation(&self) -> bool {
        self.allow_profile_creation
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.</p>
    pub fn source_last_updated_timestamp_format(&self) -> std::option::Option<&str> {
        self.source_last_updated_timestamp_format.as_deref()
    }
    /// <p>A map of the name and ObjectType field.</p>
    pub fn fields(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    > {
        self.fields.as_ref()
    }
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn keys(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    > {
        self.keys.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetProfileObjectTypeTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProfileObjectTypeTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetProfileObjectTypeTemplateOutput`](crate::operation::get_profile_object_type_template::GetProfileObjectTypeTemplateOutput).
    pub fn builder() -> crate::operation::get_profile_object_type_template::builders::GetProfileObjectTypeTemplateOutputBuilder{
        crate::operation::get_profile_object_type_template::builders::GetProfileObjectTypeTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetProfileObjectTypeTemplateOutput`](crate::operation::get_profile_object_type_template::GetProfileObjectTypeTemplateOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetProfileObjectTypeTemplateOutputBuilder {
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) source_name: std::option::Option<std::string::String>,
    pub(crate) source_object: std::option::Option<std::string::String>,
    pub(crate) allow_profile_creation: std::option::Option<bool>,
    pub(crate) source_last_updated_timestamp_format: std::option::Option<std::string::String>,
    pub(crate) fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    >,
    pub(crate) keys: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    >,
    _request_id: Option<String>,
}
impl GetProfileObjectTypeTemplateOutputBuilder {
    /// <p>A unique identifier for the object template.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the object template.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The name of the source of the object template.</p>
    pub fn source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_name = Some(input.into());
        self
    }
    /// <p>The name of the source of the object template.</p>
    pub fn set_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>The source of the object template.</p>
    pub fn source_object(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_object = Some(input.into());
        self
    }
    /// <p>The source of the object template.</p>
    pub fn set_source_object(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_object = input;
        self
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn allow_profile_creation(mut self, input: bool) -> Self {
        self.allow_profile_creation = Some(input);
        self
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn set_allow_profile_creation(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_profile_creation = input;
        self
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.</p>
    pub fn source_last_updated_timestamp_format(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.source_last_updated_timestamp_format = Some(input.into());
        self
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.</p>
    pub fn set_source_last_updated_timestamp_format(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_last_updated_timestamp_format = input;
        self
    }
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A map of the name and ObjectType field.</p>
    pub fn fields(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ObjectTypeField,
    ) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = Some(hash_map);
        self
    }
    /// <p>A map of the name and ObjectType field.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
        >,
    ) -> Self {
        self.fields = input;
        self
    }
    /// Adds a key-value pair to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn keys(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::ObjectTypeKey>,
    ) -> Self {
        let mut hash_map = self.keys.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.keys = Some(hash_map);
        self
    }
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn set_keys(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::types::ObjectTypeKey>,
            >,
        >,
    ) -> Self {
        self.keys = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProfileObjectTypeTemplateOutput`](crate::operation::get_profile_object_type_template::GetProfileObjectTypeTemplateOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_profile_object_type_template::GetProfileObjectTypeTemplateOutput
    {
        crate::operation::get_profile_object_type_template::GetProfileObjectTypeTemplateOutput {
            template_id: self.template_id,
            source_name: self.source_name,
            source_object: self.source_object,
            allow_profile_creation: self.allow_profile_creation.unwrap_or_default(),
            source_last_updated_timestamp_format: self.source_last_updated_timestamp_format,
            fields: self.fields,
            keys: self.keys,
            _request_id: self._request_id,
        }
    }
}
