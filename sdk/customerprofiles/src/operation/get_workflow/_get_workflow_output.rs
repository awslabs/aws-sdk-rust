// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkflowOutput {
    /// <p>Unique identifier for the workflow.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    #[doc(hidden)]
    pub workflow_type: std::option::Option<crate::types::WorkflowType>,
    /// <p>Status of workflow execution.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>Workflow error messages during execution (if any).</p>
    #[doc(hidden)]
    pub error_description: std::option::Option<std::string::String>,
    /// <p>The timestamp that represents when workflow execution started.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp that represents when workflow execution last updated.</p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Attributes provided for workflow execution.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<crate::types::WorkflowAttributes>,
    /// <p>Workflow specific execution metrics.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<crate::types::WorkflowMetrics>,
    _request_id: Option<String>,
}
impl GetWorkflowOutput {
    /// <p>Unique identifier for the workflow.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn workflow_type(&self) -> std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>Status of workflow execution.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>Workflow error messages during execution (if any).</p>
    pub fn error_description(&self) -> std::option::Option<&str> {
        self.error_description.as_deref()
    }
    /// <p>The timestamp that represents when workflow execution started.</p>
    pub fn start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_date.as_ref()
    }
    /// <p>The timestamp that represents when workflow execution last updated.</p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>Attributes provided for workflow execution.</p>
    pub fn attributes(&self) -> std::option::Option<&crate::types::WorkflowAttributes> {
        self.attributes.as_ref()
    }
    /// <p>Workflow specific execution metrics.</p>
    pub fn metrics(&self) -> std::option::Option<&crate::types::WorkflowMetrics> {
        self.metrics.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
    pub fn builder() -> crate::operation::get_workflow::builders::GetWorkflowOutputBuilder {
        crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::default()
    }
}

/// A builder for [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetWorkflowOutputBuilder {
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) workflow_type: std::option::Option<crate::types::WorkflowType>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) error_description: std::option::Option<std::string::String>,
    pub(crate) start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) attributes: std::option::Option<crate::types::WorkflowAttributes>,
    pub(crate) metrics: std::option::Option<crate::types::WorkflowMetrics>,
    _request_id: Option<String>,
}
impl GetWorkflowOutputBuilder {
    /// <p>Unique identifier for the workflow.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for the workflow.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = Some(input);
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn set_workflow_type(
        mut self,
        input: std::option::Option<crate::types::WorkflowType>,
    ) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Workflow error messages during execution (if any).</p>
    pub fn error_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_description = Some(input.into());
        self
    }
    /// <p>Workflow error messages during execution (if any).</p>
    pub fn set_error_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.error_description = input;
        self
    }
    /// <p>The timestamp that represents when workflow execution started.</p>
    pub fn start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_date = Some(input);
        self
    }
    /// <p>The timestamp that represents when workflow execution started.</p>
    pub fn set_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The timestamp that represents when workflow execution last updated.</p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>The timestamp that represents when workflow execution last updated.</p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>Attributes provided for workflow execution.</p>
    pub fn attributes(mut self, input: crate::types::WorkflowAttributes) -> Self {
        self.attributes = Some(input);
        self
    }
    /// <p>Attributes provided for workflow execution.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<crate::types::WorkflowAttributes>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Workflow specific execution metrics.</p>
    pub fn metrics(mut self, input: crate::types::WorkflowMetrics) -> Self {
        self.metrics = Some(input);
        self
    }
    /// <p>Workflow specific execution metrics.</p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<crate::types::WorkflowMetrics>,
    ) -> Self {
        self.metrics = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
    pub fn build(self) -> crate::operation::get_workflow::GetWorkflowOutput {
        crate::operation::get_workflow::GetWorkflowOutput {
            workflow_id: self.workflow_id,
            workflow_type: self.workflow_type,
            status: self.status,
            error_description: self.error_description,
            start_date: self.start_date,
            last_updated_at: self.last_updated_at,
            attributes: self.attributes,
            metrics: self.metrics,
            _request_id: self._request_id,
        }
    }
}
