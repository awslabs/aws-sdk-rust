// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListCalculatedAttributeDefinitionsOutput {
    /// <p>The list of calculated attribute definitions.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::ListCalculatedAttributeDefinitionItem>>,
    /// <p>The pagination token from the previous call to ListCalculatedAttributeDefinitions.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListCalculatedAttributeDefinitionsOutput {
    /// <p>The list of calculated attribute definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::ListCalculatedAttributeDefinitionItem] {
        self.items.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token from the previous call to ListCalculatedAttributeDefinitions.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListCalculatedAttributeDefinitionsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCalculatedAttributeDefinitionsOutput");
        formatter.field("items", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for ListCalculatedAttributeDefinitionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCalculatedAttributeDefinitionsOutput {
    /// Creates a new builder-style object to manufacture [`ListCalculatedAttributeDefinitionsOutput`](crate::operation::list_calculated_attribute_definitions::ListCalculatedAttributeDefinitionsOutput).
    pub fn builder() -> crate::operation::list_calculated_attribute_definitions::builders::ListCalculatedAttributeDefinitionsOutputBuilder {
        crate::operation::list_calculated_attribute_definitions::builders::ListCalculatedAttributeDefinitionsOutputBuilder::default()
    }
}

/// A builder for [`ListCalculatedAttributeDefinitionsOutput`](crate::operation::list_calculated_attribute_definitions::ListCalculatedAttributeDefinitionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ListCalculatedAttributeDefinitionsOutputBuilder {
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::ListCalculatedAttributeDefinitionItem>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListCalculatedAttributeDefinitionsOutputBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The list of calculated attribute definitions.</p>
    pub fn items(mut self, input: crate::types::ListCalculatedAttributeDefinitionItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of calculated attribute definitions.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListCalculatedAttributeDefinitionItem>>) -> Self {
        self.items = input;
        self
    }
    /// <p>The list of calculated attribute definitions.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListCalculatedAttributeDefinitionItem>> {
        &self.items
    }
    /// <p>The pagination token from the previous call to ListCalculatedAttributeDefinitions.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from the previous call to ListCalculatedAttributeDefinitions.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from the previous call to ListCalculatedAttributeDefinitions.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListCalculatedAttributeDefinitionsOutput`](crate::operation::list_calculated_attribute_definitions::ListCalculatedAttributeDefinitionsOutput).
    pub fn build(self) -> crate::operation::list_calculated_attribute_definitions::ListCalculatedAttributeDefinitionsOutput {
        crate::operation::list_calculated_attribute_definitions::ListCalculatedAttributeDefinitionsOutput {
            items: self.items,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for ListCalculatedAttributeDefinitionsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCalculatedAttributeDefinitionsOutputBuilder");
        formatter.field("items", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
