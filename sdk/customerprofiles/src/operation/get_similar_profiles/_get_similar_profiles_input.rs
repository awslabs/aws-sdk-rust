// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSimilarProfilesInput {
    /// <p>The pagination token from the previous <code>GetSimilarProfiles</code> API call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of objects returned per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>Specify the type of matching to get similar profiles for.</p>
    pub match_type: ::std::option::Option<crate::types::MatchType>,
    /// <p>The string indicating the search key to be used.</p>
    pub search_key: ::std::option::Option<::std::string::String>,
    /// <p>The string based on <code>SearchKey</code> to be searched for similar profiles.</p>
    pub search_value: ::std::option::Option<::std::string::String>,
}
impl GetSimilarProfilesInput {
    /// <p>The pagination token from the previous <code>GetSimilarProfiles</code> API call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Specify the type of matching to get similar profiles for.</p>
    pub fn match_type(&self) -> ::std::option::Option<&crate::types::MatchType> {
        self.match_type.as_ref()
    }
    /// <p>The string indicating the search key to be used.</p>
    pub fn search_key(&self) -> ::std::option::Option<&str> {
        self.search_key.as_deref()
    }
    /// <p>The string based on <code>SearchKey</code> to be searched for similar profiles.</p>
    pub fn search_value(&self) -> ::std::option::Option<&str> {
        self.search_value.as_deref()
    }
}
impl GetSimilarProfilesInput {
    /// Creates a new builder-style object to manufacture [`GetSimilarProfilesInput`](crate::operation::get_similar_profiles::GetSimilarProfilesInput).
    pub fn builder() -> crate::operation::get_similar_profiles::builders::GetSimilarProfilesInputBuilder {
        crate::operation::get_similar_profiles::builders::GetSimilarProfilesInputBuilder::default()
    }
}

/// A builder for [`GetSimilarProfilesInput`](crate::operation::get_similar_profiles::GetSimilarProfilesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSimilarProfilesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) match_type: ::std::option::Option<crate::types::MatchType>,
    pub(crate) search_key: ::std::option::Option<::std::string::String>,
    pub(crate) search_value: ::std::option::Option<::std::string::String>,
}
impl GetSimilarProfilesInputBuilder {
    /// <p>The pagination token from the previous <code>GetSimilarProfiles</code> API call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from the previous <code>GetSimilarProfiles</code> API call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from the previous <code>GetSimilarProfiles</code> API call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>Specify the type of matching to get similar profiles for.</p>
    /// This field is required.
    pub fn match_type(mut self, input: crate::types::MatchType) -> Self {
        self.match_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the type of matching to get similar profiles for.</p>
    pub fn set_match_type(mut self, input: ::std::option::Option<crate::types::MatchType>) -> Self {
        self.match_type = input;
        self
    }
    /// <p>Specify the type of matching to get similar profiles for.</p>
    pub fn get_match_type(&self) -> &::std::option::Option<crate::types::MatchType> {
        &self.match_type
    }
    /// <p>The string indicating the search key to be used.</p>
    /// This field is required.
    pub fn search_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string indicating the search key to be used.</p>
    pub fn set_search_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_key = input;
        self
    }
    /// <p>The string indicating the search key to be used.</p>
    pub fn get_search_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_key
    }
    /// <p>The string based on <code>SearchKey</code> to be searched for similar profiles.</p>
    /// This field is required.
    pub fn search_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string based on <code>SearchKey</code> to be searched for similar profiles.</p>
    pub fn set_search_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_value = input;
        self
    }
    /// <p>The string based on <code>SearchKey</code> to be searched for similar profiles.</p>
    pub fn get_search_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_value
    }
    /// Consumes the builder and constructs a [`GetSimilarProfilesInput`](crate::operation::get_similar_profiles::GetSimilarProfilesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_similar_profiles::GetSimilarProfilesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_similar_profiles::GetSimilarProfilesInput {
            next_token: self.next_token,
            max_results: self.max_results,
            domain_name: self.domain_name,
            match_type: self.match_type,
            search_key: self.search_key,
            search_value: self.search_value,
        })
    }
}
