// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkflowsInput {
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>Status of workflow execution.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>Retrieve workflows started after timestamp.</p>
    pub query_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Retrieve workflows ended after timestamp.</p>
    pub query_end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListWorkflowsInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn workflow_type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>Status of workflow execution.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>Retrieve workflows started after timestamp.</p>
    pub fn query_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.query_start_date.as_ref()
    }
    /// <p>Retrieve workflows ended after timestamp.</p>
    pub fn query_end_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.query_end_date.as_ref()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListWorkflowsInput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowsInput`](crate::operation::list_workflows::ListWorkflowsInput).
    pub fn builder() -> crate::operation::list_workflows::builders::ListWorkflowsInputBuilder {
        crate::operation::list_workflows::builders::ListWorkflowsInputBuilder::default()
    }
}

/// A builder for [`ListWorkflowsInput`](crate::operation::list_workflows::ListWorkflowsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkflowsInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) query_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) query_end_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListWorkflowsInputBuilder {
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn set_workflow_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The type of workflow. The only supported value is APPFLOW_INTEGRATION.</p>
    pub fn get_workflow_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.workflow_type
    }
    /// <p>Status of workflow execution.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of workflow execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>Retrieve workflows started after timestamp.</p>
    pub fn query_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.query_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Retrieve workflows started after timestamp.</p>
    pub fn set_query_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.query_start_date = input;
        self
    }
    /// <p>Retrieve workflows started after timestamp.</p>
    pub fn get_query_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.query_start_date
    }
    /// <p>Retrieve workflows ended after timestamp.</p>
    pub fn query_end_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.query_end_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Retrieve workflows ended after timestamp.</p>
    pub fn set_query_end_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.query_end_date = input;
        self
    }
    /// <p>Retrieve workflows ended after timestamp.</p>
    pub fn get_query_end_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.query_end_date
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListWorkflowsInput`](crate::operation::list_workflows::ListWorkflowsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_workflows::ListWorkflowsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_workflows::ListWorkflowsInput {
            domain_name: self.domain_name,
            workflow_type: self.workflow_type,
            status: self.status,
            query_start_date: self.query_start_date,
            query_end_date: self.query_end_date,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
