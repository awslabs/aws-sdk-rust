// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MergeProfilesInput {
    /// <p>The unique name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the profile to be taken.</p>
    #[doc(hidden)]
    pub main_profile_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the profile to be merged into MainProfileId.</p>
    #[doc(hidden)]
    pub profile_ids_to_be_merged: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1. </p>
    #[doc(hidden)]
    pub field_source_profile_ids: std::option::Option<crate::types::FieldSourceProfileIds>,
}
impl MergeProfilesInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn main_profile_id(&self) -> std::option::Option<&str> {
        self.main_profile_id.as_deref()
    }
    /// <p>The identifier of the profile to be merged into MainProfileId.</p>
    pub fn profile_ids_to_be_merged(&self) -> std::option::Option<&[std::string::String]> {
        self.profile_ids_to_be_merged.as_deref()
    }
    /// <p>The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1. </p>
    pub fn field_source_profile_ids(
        &self,
    ) -> std::option::Option<&crate::types::FieldSourceProfileIds> {
        self.field_source_profile_ids.as_ref()
    }
}
impl MergeProfilesInput {
    /// Creates a new builder-style object to manufacture [`MergeProfilesInput`](crate::operation::merge_profiles::MergeProfilesInput).
    pub fn builder() -> crate::operation::merge_profiles::builders::MergeProfilesInputBuilder {
        crate::operation::merge_profiles::builders::MergeProfilesInputBuilder::default()
    }
}

/// A builder for [`MergeProfilesInput`](crate::operation::merge_profiles::MergeProfilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MergeProfilesInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) main_profile_id: std::option::Option<std::string::String>,
    pub(crate) profile_ids_to_be_merged: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) field_source_profile_ids: std::option::Option<crate::types::FieldSourceProfileIds>,
}
impl MergeProfilesInputBuilder {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn main_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.main_profile_id = Some(input.into());
        self
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn set_main_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.main_profile_id = input;
        self
    }
    /// Appends an item to `profile_ids_to_be_merged`.
    ///
    /// To override the contents of this collection use [`set_profile_ids_to_be_merged`](Self::set_profile_ids_to_be_merged).
    ///
    /// <p>The identifier of the profile to be merged into MainProfileId.</p>
    pub fn profile_ids_to_be_merged(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.profile_ids_to_be_merged.unwrap_or_default();
        v.push(input.into());
        self.profile_ids_to_be_merged = Some(v);
        self
    }
    /// <p>The identifier of the profile to be merged into MainProfileId.</p>
    pub fn set_profile_ids_to_be_merged(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.profile_ids_to_be_merged = input;
        self
    }
    /// <p>The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1. </p>
    pub fn field_source_profile_ids(mut self, input: crate::types::FieldSourceProfileIds) -> Self {
        self.field_source_profile_ids = Some(input);
        self
    }
    /// <p>The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1. </p>
    pub fn set_field_source_profile_ids(
        mut self,
        input: std::option::Option<crate::types::FieldSourceProfileIds>,
    ) -> Self {
        self.field_source_profile_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`MergeProfilesInput`](crate::operation::merge_profiles::MergeProfilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::merge_profiles::MergeProfilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::merge_profiles::MergeProfilesInput {
            domain_name: self.domain_name,
            main_profile_id: self.main_profile_id,
            profile_ids_to_be_merged: self.profile_ids_to_be_merged,
            field_source_profile_ids: self.field_source_profile_ids,
        })
    }
}
