// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_profile_object_type::_delete_profile_object_type_output::DeleteProfileObjectTypeOutputBuilder;

pub use crate::operation::delete_profile_object_type::_delete_profile_object_type_input::DeleteProfileObjectTypeInputBuilder;

/// Fluent builder constructing a request to `DeleteProfileObjectType`.
///
/// <p>Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProfileObjectTypeFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::delete_profile_object_type::builders::DeleteProfileObjectTypeInputBuilder,
}
impl DeleteProfileObjectTypeFluentBuilder {
    /// Creates a new `DeleteProfileObjectType`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_profile_object_type::DeleteProfileObjectType,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_profile_object_type::DeleteProfileObjectTypeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_profile_object_type::DeleteProfileObjectTypeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_profile_object_type::DeleteProfileObjectTypeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn object_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_type_name(input.into());
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn set_object_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_type_name(input);
        self
    }
}
