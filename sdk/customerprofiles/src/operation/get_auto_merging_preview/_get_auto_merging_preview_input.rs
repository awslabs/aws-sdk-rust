// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAutoMergingPreviewInput {
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub consolidation: ::std::option::Option<crate::types::Consolidation>,
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub conflict_resolution: ::std::option::Option<crate::types::ConflictResolution>,
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub min_allowed_confidence_score_for_merging: ::std::option::Option<f64>,
}
impl GetAutoMergingPreviewInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn consolidation(&self) -> ::std::option::Option<&crate::types::Consolidation> {
        self.consolidation.as_ref()
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn conflict_resolution(&self) -> ::std::option::Option<&crate::types::ConflictResolution> {
        self.conflict_resolution.as_ref()
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn min_allowed_confidence_score_for_merging(&self) -> ::std::option::Option<f64> {
        self.min_allowed_confidence_score_for_merging
    }
}
impl GetAutoMergingPreviewInput {
    /// Creates a new builder-style object to manufacture [`GetAutoMergingPreviewInput`](crate::operation::get_auto_merging_preview::GetAutoMergingPreviewInput).
    pub fn builder() -> crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewInputBuilder {
        crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewInputBuilder::default()
    }
}

/// A builder for [`GetAutoMergingPreviewInput`](crate::operation::get_auto_merging_preview::GetAutoMergingPreviewInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAutoMergingPreviewInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) consolidation: ::std::option::Option<crate::types::Consolidation>,
    pub(crate) conflict_resolution: ::std::option::Option<crate::types::ConflictResolution>,
    pub(crate) min_allowed_confidence_score_for_merging: ::std::option::Option<f64>,
}
impl GetAutoMergingPreviewInputBuilder {
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    /// This field is required.
    pub fn consolidation(mut self, input: crate::types::Consolidation) -> Self {
        self.consolidation = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn set_consolidation(mut self, input: ::std::option::Option<crate::types::Consolidation>) -> Self {
        self.consolidation = input;
        self
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn get_consolidation(&self) -> &::std::option::Option<crate::types::Consolidation> {
        &self.consolidation
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    /// This field is required.
    pub fn conflict_resolution(mut self, input: crate::types::ConflictResolution) -> Self {
        self.conflict_resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn set_conflict_resolution(mut self, input: ::std::option::Option<crate::types::ConflictResolution>) -> Self {
        self.conflict_resolution = input;
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn get_conflict_resolution(&self) -> &::std::option::Option<crate::types::ConflictResolution> {
        &self.conflict_resolution
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn min_allowed_confidence_score_for_merging(mut self, input: f64) -> Self {
        self.min_allowed_confidence_score_for_merging = ::std::option::Option::Some(input);
        self
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn set_min_allowed_confidence_score_for_merging(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_allowed_confidence_score_for_merging = input;
        self
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn get_min_allowed_confidence_score_for_merging(&self) -> &::std::option::Option<f64> {
        &self.min_allowed_confidence_score_for_merging
    }
    /// Consumes the builder and constructs a [`GetAutoMergingPreviewInput`](crate::operation::get_auto_merging_preview::GetAutoMergingPreviewInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_auto_merging_preview::GetAutoMergingPreviewInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_auto_merging_preview::GetAutoMergingPreviewInput {
            domain_name: self.domain_name,
            consolidation: self.consolidation,
            conflict_resolution: self.conflict_resolution,
            min_allowed_confidence_score_for_merging: self.min_allowed_confidence_score_for_merging,
        })
    }
}
