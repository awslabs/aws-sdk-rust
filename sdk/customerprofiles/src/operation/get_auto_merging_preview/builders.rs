// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_auto_merging_preview::_get_auto_merging_preview_output::GetAutoMergingPreviewOutputBuilder;

pub use crate::operation::get_auto_merging_preview::_get_auto_merging_preview_input::GetAutoMergingPreviewInputBuilder;

impl GetAutoMergingPreviewInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_auto_merging_preview::GetAutoMergingPreviewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_auto_merging_preview();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetAutoMergingPreview`.
///
/// <p>Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list. </p>
/// <p>You can't view which profiles are matched and would be merged.</p> <important>
/// <p>We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include <b>at least</b> two matching attributes. If your matching list includes too few attributes (such as only <code>FirstName</code> or only <code>LastName</code>), there may be a large number of matches. This increases the chances of erroneous merges.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetAutoMergingPreviewFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewOutput,
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewError,
    > for GetAutoMergingPreviewFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_auto_merging_preview::GetAutoMergingPreviewOutput,
            crate::operation::get_auto_merging_preview::GetAutoMergingPreviewError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetAutoMergingPreviewFluentBuilder {
    /// Creates a new `GetAutoMergingPreview`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetAutoMergingPreview as a reference.
    pub fn as_input(&self) -> &crate::operation::get_auto_merging_preview::builders::GetAutoMergingPreviewInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_auto_merging_preview::GetAutoMergingPreviewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_auto_merging_preview::GetAutoMergingPreview::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_auto_merging_preview::GetAutoMergingPreview::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewOutput,
        crate::operation::get_auto_merging_preview::GetAutoMergingPreviewError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn consolidation(mut self, input: crate::types::Consolidation) -> Self {
        self.inner = self.inner.consolidation(input);
        self
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn set_consolidation(mut self, input: ::std::option::Option<crate::types::Consolidation>) -> Self {
        self.inner = self.inner.set_consolidation(input);
        self
    }
    /// <p>A list of matching attributes that represent matching criteria.</p>
    pub fn get_consolidation(&self) -> &::std::option::Option<crate::types::Consolidation> {
        self.inner.get_consolidation()
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn conflict_resolution(mut self, input: crate::types::ConflictResolution) -> Self {
        self.inner = self.inner.conflict_resolution(input);
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn set_conflict_resolution(mut self, input: ::std::option::Option<crate::types::ConflictResolution>) -> Self {
        self.inner = self.inner.set_conflict_resolution(input);
        self
    }
    /// <p>How the auto-merging process should resolve conflicts between different profiles.</p>
    pub fn get_conflict_resolution(&self) -> &::std::option::Option<crate::types::ConflictResolution> {
        self.inner.get_conflict_resolution()
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn min_allowed_confidence_score_for_merging(mut self, input: f64) -> Self {
        self.inner = self.inner.min_allowed_confidence_score_for_merging(input);
        self
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn set_min_allowed_confidence_score_for_merging(mut self, input: ::std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_min_allowed_confidence_score_for_merging(input);
        self
    }
    /// <p>Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.</p>
    pub fn get_min_allowed_confidence_score_for_merging(&self) -> &::std::option::Option<f64> {
        self.inner.get_min_allowed_confidence_score_for_merging()
    }
}
