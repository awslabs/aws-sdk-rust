// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccountIntegrationsInput {
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of objects returned per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub include_hidden: ::std::option::Option<bool>,
}
impl ListAccountIntegrationsInput {
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn include_hidden(&self) -> ::std::option::Option<bool> {
        self.include_hidden
    }
}
impl ListAccountIntegrationsInput {
    /// Creates a new builder-style object to manufacture [`ListAccountIntegrationsInput`](crate::operation::list_account_integrations::ListAccountIntegrationsInput).
    pub fn builder() -> crate::operation::list_account_integrations::builders::ListAccountIntegrationsInputBuilder {
        crate::operation::list_account_integrations::builders::ListAccountIntegrationsInputBuilder::default()
    }
}

/// A builder for [`ListAccountIntegrationsInput`](crate::operation::list_account_integrations::ListAccountIntegrationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAccountIntegrationsInputBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) include_hidden: ::std::option::Option<bool>,
}
impl ListAccountIntegrationsInputBuilder {
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    /// This field is required.
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn include_hidden(mut self, input: bool) -> Self {
        self.include_hidden = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn set_include_hidden(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_hidden = input;
        self
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn get_include_hidden(&self) -> &::std::option::Option<bool> {
        &self.include_hidden
    }
    /// Consumes the builder and constructs a [`ListAccountIntegrationsInput`](crate::operation::list_account_integrations::ListAccountIntegrationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_account_integrations::ListAccountIntegrationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_account_integrations::ListAccountIntegrationsInput {
            uri: self.uri,
            next_token: self.next_token,
            max_results: self.max_results,
            include_hidden: self.include_hidden,
        })
    }
}
