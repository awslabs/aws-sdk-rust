// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_account_integrations::_list_account_integrations_output::ListAccountIntegrationsOutputBuilder;

pub use crate::operation::list_account_integrations::_list_account_integrations_input::ListAccountIntegrationsInputBuilder;

/// Fluent builder constructing a request to `ListAccountIntegrations`.
///
/// <p>Lists all of the integrations associated to a specific URI in the AWS account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountIntegrationsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::list_account_integrations::builders::ListAccountIntegrationsInputBuilder,
}
impl ListAccountIntegrationsFluentBuilder {
    /// Creates a new `ListAccountIntegrations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_account_integrations::ListAccountIntegrations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_account_integrations::ListAccountIntegrationsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_account_integrations::ListAccountIntegrationsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_account_integrations::ListAccountIntegrationsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub fn uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.uri(input.into());
        self
    }
    /// <p>The URI of the S3 bucket or any other type of data source.</p>
    pub fn set_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_uri(input);
        self
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token from the previous ListAccountIntegrations API call.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of objects returned per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn include_hidden(mut self, input: bool) -> Self {
        self.inner = self.inner.include_hidden(input);
        self
    }
    /// <p>Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</p>
    pub fn set_include_hidden(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_hidden(input);
        self
    }
}
