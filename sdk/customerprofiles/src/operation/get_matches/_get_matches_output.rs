// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMatchesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp this version of Match Result generated.</p>
    pub match_generation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of potential matches found.</p>
    pub potential_matches: ::std::option::Option<i32>,
    /// <p>The list of matched profiles for this instance.</p>
    pub matches: ::std::option::Option<::std::vec::Vec<crate::types::MatchItem>>,
    _request_id: Option<String>,
}
impl GetMatchesOutput {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The timestamp this version of Match Result generated.</p>
    pub fn match_generation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.match_generation_date.as_ref()
    }
    /// <p>The number of potential matches found.</p>
    pub fn potential_matches(&self) -> ::std::option::Option<i32> {
        self.potential_matches
    }
    /// <p>The list of matched profiles for this instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.matches.is_none()`.
    pub fn matches(&self) -> &[crate::types::MatchItem] {
        self.matches.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetMatchesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMatchesOutput {
    /// Creates a new builder-style object to manufacture [`GetMatchesOutput`](crate::operation::get_matches::GetMatchesOutput).
    pub fn builder() -> crate::operation::get_matches::builders::GetMatchesOutputBuilder {
        crate::operation::get_matches::builders::GetMatchesOutputBuilder::default()
    }
}

/// A builder for [`GetMatchesOutput`](crate::operation::get_matches::GetMatchesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMatchesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) match_generation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) potential_matches: ::std::option::Option<i32>,
    pub(crate) matches: ::std::option::Option<::std::vec::Vec<crate::types::MatchItem>>,
    _request_id: Option<String>,
}
impl GetMatchesOutputBuilder {
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The timestamp this version of Match Result generated.</p>
    pub fn match_generation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.match_generation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp this version of Match Result generated.</p>
    pub fn set_match_generation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.match_generation_date = input;
        self
    }
    /// <p>The timestamp this version of Match Result generated.</p>
    pub fn get_match_generation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.match_generation_date
    }
    /// <p>The number of potential matches found.</p>
    pub fn potential_matches(mut self, input: i32) -> Self {
        self.potential_matches = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of potential matches found.</p>
    pub fn set_potential_matches(mut self, input: ::std::option::Option<i32>) -> Self {
        self.potential_matches = input;
        self
    }
    /// <p>The number of potential matches found.</p>
    pub fn get_potential_matches(&self) -> &::std::option::Option<i32> {
        &self.potential_matches
    }
    /// Appends an item to `matches`.
    ///
    /// To override the contents of this collection use [`set_matches`](Self::set_matches).
    ///
    /// <p>The list of matched profiles for this instance.</p>
    pub fn matches(mut self, input: crate::types::MatchItem) -> Self {
        let mut v = self.matches.unwrap_or_default();
        v.push(input);
        self.matches = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of matched profiles for this instance.</p>
    pub fn set_matches(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchItem>>) -> Self {
        self.matches = input;
        self
    }
    /// <p>The list of matched profiles for this instance.</p>
    pub fn get_matches(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchItem>> {
        &self.matches
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMatchesOutput`](crate::operation::get_matches::GetMatchesOutput).
    pub fn build(self) -> crate::operation::get_matches::GetMatchesOutput {
        crate::operation::get_matches::GetMatchesOutput {
            next_token: self.next_token,
            match_generation_date: self.match_generation_date,
            potential_matches: self.potential_matches,
            matches: self.matches,
            _request_id: self._request_id,
        }
    }
}
