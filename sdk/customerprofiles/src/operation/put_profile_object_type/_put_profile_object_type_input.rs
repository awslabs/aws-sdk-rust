// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutProfileObjectTypeInput {
    /// <p>The unique name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The name of the profile object type.</p>
    #[doc(hidden)]
    pub object_type_name: std::option::Option<std::string::String>,
    /// <p>Description of the profile object type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The number of days until the data in the object expires.</p>
    #[doc(hidden)]
    pub expiration_days: std::option::Option<i32>,
    /// <p>The customer-provided key to encrypt the profile object that will be created in this profile object type.</p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    #[doc(hidden)]
    pub allow_profile_creation: bool,
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. </p>
    #[doc(hidden)]
    pub source_last_updated_timestamp_format: std::option::Option<std::string::String>,
    /// <p>A map of the name and ObjectType field.</p>
    #[doc(hidden)]
    pub fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    >,
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    #[doc(hidden)]
    pub keys: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    >,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PutProfileObjectTypeInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name of the profile object type.</p>
    pub fn object_type_name(&self) -> std::option::Option<&str> {
        self.object_type_name.as_deref()
    }
    /// <p>Description of the profile object type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The number of days until the data in the object expires.</p>
    pub fn expiration_days(&self) -> std::option::Option<i32> {
        self.expiration_days
    }
    /// <p>The customer-provided key to encrypt the profile object that will be created in this profile object type.</p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn allow_profile_creation(&self) -> bool {
        self.allow_profile_creation
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. </p>
    pub fn source_last_updated_timestamp_format(&self) -> std::option::Option<&str> {
        self.source_last_updated_timestamp_format.as_deref()
    }
    /// <p>A map of the name and ObjectType field.</p>
    pub fn fields(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    > {
        self.fields.as_ref()
    }
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn keys(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    > {
        self.keys.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl PutProfileObjectTypeInput {
    /// Creates a new builder-style object to manufacture [`PutProfileObjectTypeInput`](crate::operation::put_profile_object_type::PutProfileObjectTypeInput).
    pub fn builder(
    ) -> crate::operation::put_profile_object_type::builders::PutProfileObjectTypeInputBuilder {
        crate::operation::put_profile_object_type::builders::PutProfileObjectTypeInputBuilder::default()
    }
}

/// A builder for [`PutProfileObjectTypeInput`](crate::operation::put_profile_object_type::PutProfileObjectTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutProfileObjectTypeInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) object_type_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) expiration_days: std::option::Option<i32>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) allow_profile_creation: std::option::Option<bool>,
    pub(crate) source_last_updated_timestamp_format: std::option::Option<std::string::String>,
    pub(crate) fields: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
    >,
    pub(crate) keys: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::types::ObjectTypeKey>>,
    >,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PutProfileObjectTypeInputBuilder {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn object_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_type_name = Some(input.into());
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn set_object_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_type_name = input;
        self
    }
    /// <p>Description of the profile object type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description of the profile object type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The number of days until the data in the object expires.</p>
    pub fn expiration_days(mut self, input: i32) -> Self {
        self.expiration_days = Some(input);
        self
    }
    /// <p>The number of days until the data in the object expires.</p>
    pub fn set_expiration_days(mut self, input: std::option::Option<i32>) -> Self {
        self.expiration_days = input;
        self
    }
    /// <p>The customer-provided key to encrypt the profile object that will be created in this profile object type.</p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>The customer-provided key to encrypt the profile object that will be created in this profile object type.</p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn allow_profile_creation(mut self, input: bool) -> Self {
        self.allow_profile_creation = Some(input);
        self
    }
    /// <p>Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.</p>
    pub fn set_allow_profile_creation(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_profile_creation = input;
        self
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. </p>
    pub fn source_last_updated_timestamp_format(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.source_last_updated_timestamp_format = Some(input.into());
        self
    }
    /// <p>The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. </p>
    pub fn set_source_last_updated_timestamp_format(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_last_updated_timestamp_format = input;
        self
    }
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A map of the name and ObjectType field.</p>
    pub fn fields(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ObjectTypeField,
    ) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = Some(hash_map);
        self
    }
    /// <p>A map of the name and ObjectType field.</p>
    pub fn set_fields(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ObjectTypeField>,
        >,
    ) -> Self {
        self.fields = input;
        self
    }
    /// Adds a key-value pair to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn keys(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::ObjectTypeKey>,
    ) -> Self {
        let mut hash_map = self.keys.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.keys = Some(hash_map);
        self
    }
    /// <p>A list of unique keys that can be used to map data to the profile.</p>
    pub fn set_keys(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::types::ObjectTypeKey>,
            >,
        >,
    ) -> Self {
        self.keys = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`PutProfileObjectTypeInput`](crate::operation::put_profile_object_type::PutProfileObjectTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_profile_object_type::PutProfileObjectTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_profile_object_type::PutProfileObjectTypeInput {
                domain_name: self.domain_name,
                object_type_name: self.object_type_name,
                description: self.description,
                template_id: self.template_id,
                expiration_days: self.expiration_days,
                encryption_key: self.encryption_key,
                allow_profile_creation: self.allow_profile_creation.unwrap_or_default(),
                source_last_updated_timestamp_format: self.source_last_updated_timestamp_format,
                fields: self.fields,
                keys: self.keys,
                tags: self.tags,
            },
        )
    }
}
