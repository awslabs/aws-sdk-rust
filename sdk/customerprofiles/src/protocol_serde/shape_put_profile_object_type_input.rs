// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_profile_object_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_profile_object_type::PutProfileObjectTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.allow_profile_creation {
        object
            .key("AllowProfileCreation")
            .boolean(input.allow_profile_creation);
    }
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.encryption_key {
        object.key("EncryptionKey").string(var_2.as_str());
    }
    if let Some(var_3) = &input.expiration_days {
        object.key("ExpirationDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.fields {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Fields").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                crate::protocol_serde::shape_object_type_field::ser_object_type_field(
                    &mut object_8,
                    value_7,
                )?;
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_9) = &input.keys {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Keys").start_object();
        for (key_11, value_12) in var_9 {
            {
                let mut array_13 = object_10.key(key_11.as_str()).start_array();
                for item_14 in value_12 {
                    {
                        #[allow(unused_mut)]
                        let mut object_15 = array_13.value().start_object();
                        crate::protocol_serde::shape_object_type_key::ser_object_type_key(
                            &mut object_15,
                            item_14,
                        )?;
                        object_15.finish();
                    }
                }
                array_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_16) = &input.source_last_updated_timestamp_format {
        object
            .key("SourceLastUpdatedTimestampFormat")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.tags {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.template_id {
        object.key("TemplateId").string(var_21.as_str());
    }
    Ok(())
}
