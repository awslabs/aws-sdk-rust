// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_scheduled_trigger_properties(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ScheduledTriggerProperties,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ScheduleExpression").string(input.schedule_expression.as_str());
    }
    if let Some(var_1) = &input.data_pull_mode {
        object.key("DataPullMode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.schedule_start_time {
        object
            .key("ScheduleStartTime")
            .date_time(var_2, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_3) = &input.schedule_end_time {
        object
            .key("ScheduleEndTime")
            .date_time(var_3, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.timezone {
        object.key("Timezone").string(var_4.as_str());
    }
    if let Some(var_5) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.first_execution_from {
        object
            .key("FirstExecutionFrom")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
