// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_flow_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FlowDefinition,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.flow_name {
        object.key("FlowName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_arn {
        object.key("KmsArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tasks {
        let mut array_7 = object.key("Tasks").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("TriggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
