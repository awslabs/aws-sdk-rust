// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_flow_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FlowDefinition,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    {
        object.key("FlowName").string(input.flow_name.as_str());
    }
    {
        object.key("KmsArn").string(input.kms_arn.as_str());
    }
    if let Some(var_2) = &input.source_flow_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SourceFlowConfig").start_object();
        crate::protocol_serde::shape_source_flow_config::ser_source_flow_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    {
        let mut array_4 = object.key("Tasks").start_array();
        for item_5 in &input.tasks {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_task::ser_task(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.trigger_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TriggerConfig").start_object();
        crate::protocol_serde::shape_trigger_config::ser_trigger_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
