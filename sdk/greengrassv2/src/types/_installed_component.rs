// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a component on a Greengrass core device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstalledComponent {
    /// <p>The name of the component.</p>
    #[doc(hidden)]
    pub component_name: std::option::Option<std::string::String>,
    /// <p>The version of the component.</p>
    #[doc(hidden)]
    pub component_version: std::option::Option<std::string::String>,
    /// <p>The lifecycle state of the component.</p>
    #[doc(hidden)]
    pub lifecycle_state: std::option::Option<crate::types::InstalledComponentLifecycleState>,
    /// <p>A detailed response about the lifecycle state of the component that explains the reason why a component has an error or is broken.</p>
    #[doc(hidden)]
    pub lifecycle_state_details: std::option::Option<std::string::String>,
    /// <p>Whether or not the component is a root component.</p>
    #[doc(hidden)]
    pub is_root: bool,
    /// <p>The status of how current the data is.</p>
    /// <p>This response is based off of component state changes. The status reflects component disruptions and deployments. If a component only sees a configuration update during a deployment, it might not undergo a state change and this status would not be updated.</p>
    #[doc(hidden)]
    pub last_status_change_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the Greengrass core device sent a message containing a certain component to the Amazon Web Services Cloud.</p>
    /// <p>A component does not need to see a state change for this field to update.</p>
    #[doc(hidden)]
    pub last_reported_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The most recent deployment source that brought the component to the Greengrass core device. For a thing group deployment or thing deployment, the source will be the The ID of the deployment. and for local deployments it will be <code>LOCAL</code>.</p>
    #[doc(hidden)]
    pub last_installation_source: std::option::Option<std::string::String>,
    /// <p>The status codes that indicate the reason for failure whenever the <code>lifecycleState</code> has an error or is in a broken state.</p> <note>
    /// <p>Greengrass nucleus v2.8.0 or later is required to get an accurate <code>lifecycleStatusCodes</code> response. This response can be inaccurate in earlier Greengrass nucleus versions.</p>
    /// </note>
    #[doc(hidden)]
    pub lifecycle_status_codes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstalledComponent {
    /// <p>The name of the component.</p>
    pub fn component_name(&self) -> std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>The version of the component.</p>
    pub fn component_version(&self) -> std::option::Option<&str> {
        self.component_version.as_deref()
    }
    /// <p>The lifecycle state of the component.</p>
    pub fn lifecycle_state(
        &self,
    ) -> std::option::Option<&crate::types::InstalledComponentLifecycleState> {
        self.lifecycle_state.as_ref()
    }
    /// <p>A detailed response about the lifecycle state of the component that explains the reason why a component has an error or is broken.</p>
    pub fn lifecycle_state_details(&self) -> std::option::Option<&str> {
        self.lifecycle_state_details.as_deref()
    }
    /// <p>Whether or not the component is a root component.</p>
    pub fn is_root(&self) -> bool {
        self.is_root
    }
    /// <p>The status of how current the data is.</p>
    /// <p>This response is based off of component state changes. The status reflects component disruptions and deployments. If a component only sees a configuration update during a deployment, it might not undergo a state change and this status would not be updated.</p>
    pub fn last_status_change_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_status_change_timestamp.as_ref()
    }
    /// <p>The last time the Greengrass core device sent a message containing a certain component to the Amazon Web Services Cloud.</p>
    /// <p>A component does not need to see a state change for this field to update.</p>
    pub fn last_reported_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_reported_timestamp.as_ref()
    }
    /// <p>The most recent deployment source that brought the component to the Greengrass core device. For a thing group deployment or thing deployment, the source will be the The ID of the deployment. and for local deployments it will be <code>LOCAL</code>.</p>
    pub fn last_installation_source(&self) -> std::option::Option<&str> {
        self.last_installation_source.as_deref()
    }
    /// <p>The status codes that indicate the reason for failure whenever the <code>lifecycleState</code> has an error or is in a broken state.</p> <note>
    /// <p>Greengrass nucleus v2.8.0 or later is required to get an accurate <code>lifecycleStatusCodes</code> response. This response can be inaccurate in earlier Greengrass nucleus versions.</p>
    /// </note>
    pub fn lifecycle_status_codes(&self) -> std::option::Option<&[std::string::String]> {
        self.lifecycle_status_codes.as_deref()
    }
}
impl InstalledComponent {
    /// Creates a new builder-style object to manufacture [`InstalledComponent`](crate::types::InstalledComponent).
    pub fn builder() -> crate::types::builders::InstalledComponentBuilder {
        crate::types::builders::InstalledComponentBuilder::default()
    }
}

/// A builder for [`InstalledComponent`](crate::types::InstalledComponent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstalledComponentBuilder {
    pub(crate) component_name: std::option::Option<std::string::String>,
    pub(crate) component_version: std::option::Option<std::string::String>,
    pub(crate) lifecycle_state: std::option::Option<crate::types::InstalledComponentLifecycleState>,
    pub(crate) lifecycle_state_details: std::option::Option<std::string::String>,
    pub(crate) is_root: std::option::Option<bool>,
    pub(crate) last_status_change_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_reported_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_installation_source: std::option::Option<std::string::String>,
    pub(crate) lifecycle_status_codes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstalledComponentBuilder {
    /// <p>The name of the component.</p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_name = Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The version of the component.</p>
    pub fn component_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_version = Some(input.into());
        self
    }
    /// <p>The version of the component.</p>
    pub fn set_component_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_version = input;
        self
    }
    /// <p>The lifecycle state of the component.</p>
    pub fn lifecycle_state(
        mut self,
        input: crate::types::InstalledComponentLifecycleState,
    ) -> Self {
        self.lifecycle_state = Some(input);
        self
    }
    /// <p>The lifecycle state of the component.</p>
    pub fn set_lifecycle_state(
        mut self,
        input: std::option::Option<crate::types::InstalledComponentLifecycleState>,
    ) -> Self {
        self.lifecycle_state = input;
        self
    }
    /// <p>A detailed response about the lifecycle state of the component that explains the reason why a component has an error or is broken.</p>
    pub fn lifecycle_state_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_state_details = Some(input.into());
        self
    }
    /// <p>A detailed response about the lifecycle state of the component that explains the reason why a component has an error or is broken.</p>
    pub fn set_lifecycle_state_details(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_state_details = input;
        self
    }
    /// <p>Whether or not the component is a root component.</p>
    pub fn is_root(mut self, input: bool) -> Self {
        self.is_root = Some(input);
        self
    }
    /// <p>Whether or not the component is a root component.</p>
    pub fn set_is_root(mut self, input: std::option::Option<bool>) -> Self {
        self.is_root = input;
        self
    }
    /// <p>The status of how current the data is.</p>
    /// <p>This response is based off of component state changes. The status reflects component disruptions and deployments. If a component only sees a configuration update during a deployment, it might not undergo a state change and this status would not be updated.</p>
    pub fn last_status_change_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_status_change_timestamp = Some(input);
        self
    }
    /// <p>The status of how current the data is.</p>
    /// <p>This response is based off of component state changes. The status reflects component disruptions and deployments. If a component only sees a configuration update during a deployment, it might not undergo a state change and this status would not be updated.</p>
    pub fn set_last_status_change_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_status_change_timestamp = input;
        self
    }
    /// <p>The last time the Greengrass core device sent a message containing a certain component to the Amazon Web Services Cloud.</p>
    /// <p>A component does not need to see a state change for this field to update.</p>
    pub fn last_reported_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_reported_timestamp = Some(input);
        self
    }
    /// <p>The last time the Greengrass core device sent a message containing a certain component to the Amazon Web Services Cloud.</p>
    /// <p>A component does not need to see a state change for this field to update.</p>
    pub fn set_last_reported_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_reported_timestamp = input;
        self
    }
    /// <p>The most recent deployment source that brought the component to the Greengrass core device. For a thing group deployment or thing deployment, the source will be the The ID of the deployment. and for local deployments it will be <code>LOCAL</code>.</p>
    pub fn last_installation_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_installation_source = Some(input.into());
        self
    }
    /// <p>The most recent deployment source that brought the component to the Greengrass core device. For a thing group deployment or thing deployment, the source will be the The ID of the deployment. and for local deployments it will be <code>LOCAL</code>.</p>
    pub fn set_last_installation_source(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_installation_source = input;
        self
    }
    /// Appends an item to `lifecycle_status_codes`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_status_codes`](Self::set_lifecycle_status_codes).
    ///
    /// <p>The status codes that indicate the reason for failure whenever the <code>lifecycleState</code> has an error or is in a broken state.</p> <note>
    /// <p>Greengrass nucleus v2.8.0 or later is required to get an accurate <code>lifecycleStatusCodes</code> response. This response can be inaccurate in earlier Greengrass nucleus versions.</p>
    /// </note>
    pub fn lifecycle_status_codes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.lifecycle_status_codes.unwrap_or_default();
        v.push(input.into());
        self.lifecycle_status_codes = Some(v);
        self
    }
    /// <p>The status codes that indicate the reason for failure whenever the <code>lifecycleState</code> has an error or is in a broken state.</p> <note>
    /// <p>Greengrass nucleus v2.8.0 or later is required to get an accurate <code>lifecycleStatusCodes</code> response. This response can be inaccurate in earlier Greengrass nucleus versions.</p>
    /// </note>
    pub fn set_lifecycle_status_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.lifecycle_status_codes = input;
        self
    }
    /// Consumes the builder and constructs a [`InstalledComponent`](crate::types::InstalledComponent).
    pub fn build(self) -> crate::types::InstalledComponent {
        crate::types::InstalledComponent {
            component_name: self.component_name,
            component_version: self.component_version,
            lifecycle_state: self.lifecycle_state,
            lifecycle_state_details: self.lifecycle_state_details,
            is_root: self.is_root.unwrap_or_default(),
            last_status_change_timestamp: self.last_status_change_timestamp,
            last_reported_timestamp: self.last_reported_timestamp,
            last_installation_source: self.last_installation_source,
            lifecycle_status_codes: self.lifecycle_status_codes,
        }
    }
}
