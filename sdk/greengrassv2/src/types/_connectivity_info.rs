// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an endpoint and port where client devices can connect to an MQTT broker on a Greengrass core device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectivityInfo {
    /// <p>An ID for the connectivity information.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The IP address or DNS address where client devices can connect to an MQTT broker on the Greengrass core device.</p>
    #[doc(hidden)]
    pub host_address: std::option::Option<std::string::String>,
    /// <p>The port where the MQTT broker operates on the core device. This port is typically 8883, which is the default port for the MQTT broker component that runs on core devices.</p>
    #[doc(hidden)]
    pub port_number: i32,
    /// <p>Additional metadata to provide to client devices that connect to this core device.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
}
impl ConnectivityInfo {
    /// <p>An ID for the connectivity information.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The IP address or DNS address where client devices can connect to an MQTT broker on the Greengrass core device.</p>
    pub fn host_address(&self) -> std::option::Option<&str> {
        self.host_address.as_deref()
    }
    /// <p>The port where the MQTT broker operates on the core device. This port is typically 8883, which is the default port for the MQTT broker component that runs on core devices.</p>
    pub fn port_number(&self) -> i32 {
        self.port_number
    }
    /// <p>Additional metadata to provide to client devices that connect to this core device.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
}
impl ConnectivityInfo {
    /// Creates a new builder-style object to manufacture [`ConnectivityInfo`](crate::types::ConnectivityInfo).
    pub fn builder() -> crate::types::builders::ConnectivityInfoBuilder {
        crate::types::builders::ConnectivityInfoBuilder::default()
    }
}

/// A builder for [`ConnectivityInfo`](crate::types::ConnectivityInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectivityInfoBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) host_address: std::option::Option<std::string::String>,
    pub(crate) port_number: std::option::Option<i32>,
    pub(crate) metadata: std::option::Option<std::string::String>,
}
impl ConnectivityInfoBuilder {
    /// <p>An ID for the connectivity information.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>An ID for the connectivity information.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The IP address or DNS address where client devices can connect to an MQTT broker on the Greengrass core device.</p>
    pub fn host_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.host_address = Some(input.into());
        self
    }
    /// <p>The IP address or DNS address where client devices can connect to an MQTT broker on the Greengrass core device.</p>
    pub fn set_host_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.host_address = input;
        self
    }
    /// <p>The port where the MQTT broker operates on the core device. This port is typically 8883, which is the default port for the MQTT broker component that runs on core devices.</p>
    pub fn port_number(mut self, input: i32) -> Self {
        self.port_number = Some(input);
        self
    }
    /// <p>The port where the MQTT broker operates on the core device. This port is typically 8883, which is the default port for the MQTT broker component that runs on core devices.</p>
    pub fn set_port_number(mut self, input: std::option::Option<i32>) -> Self {
        self.port_number = input;
        self
    }
    /// <p>Additional metadata to provide to client devices that connect to this core device.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>Additional metadata to provide to client devices that connect to this core device.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectivityInfo`](crate::types::ConnectivityInfo).
    pub fn build(self) -> crate::types::ConnectivityInfo {
        crate::types::ConnectivityInfo {
            id: self.id,
            host_address: self.host_address,
            port_number: self.port_number.unwrap_or_default(),
            metadata: self.metadata,
        }
    }
}
