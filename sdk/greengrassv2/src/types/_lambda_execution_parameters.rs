// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains parameters for a Lambda function that runs on IoT Greengrass.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaExecutionParameters {
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
    pub event_sources: ::std::option::Option<::std::vec::Vec<crate::types::LambdaEventSource>>,
    /// <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.</p>
    pub max_queue_size: ::std::option::Option<i32>,
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same time.</p>
    pub max_instances_count: ::std::option::Option<i32>,
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.</p>
    pub max_idle_time_in_seconds: ::std::option::Option<i32>,
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work item.</p>
    pub timeout_in_seconds: ::std::option::Option<i32>,
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.</p>
    pub status_timeout_in_seconds: ::std::option::Option<i32>,
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    /// <ul>
    /// <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li>
    /// <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li>
    /// </ul>
    /// <p>Default: <code>true</code> </p>
    pub pinned: ::std::option::Option<bool>,
    /// <p>The encoding type that the Lambda function supports.</p>
    /// <p>Default: <code>json</code> </p>
    pub input_payload_encoding_type: ::std::option::Option<crate::types::LambdaInputPayloadEncodingType>,
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    pub exec_args: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    pub environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    pub linux_process_params: ::std::option::Option<crate::types::LambdaLinuxProcessParams>,
}
impl LambdaExecutionParameters {
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_sources.is_none()`.
    pub fn event_sources(&self) -> &[crate::types::LambdaEventSource] {
        self.event_sources.as_deref().unwrap_or_default()
    }
    /// <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.</p>
    pub fn max_queue_size(&self) -> ::std::option::Option<i32> {
        self.max_queue_size
    }
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same time.</p>
    pub fn max_instances_count(&self) -> ::std::option::Option<i32> {
        self.max_instances_count
    }
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.</p>
    pub fn max_idle_time_in_seconds(&self) -> ::std::option::Option<i32> {
        self.max_idle_time_in_seconds
    }
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work item.</p>
    pub fn timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.timeout_in_seconds
    }
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.</p>
    pub fn status_timeout_in_seconds(&self) -> ::std::option::Option<i32> {
        self.status_timeout_in_seconds
    }
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    /// <ul>
    /// <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li>
    /// <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li>
    /// </ul>
    /// <p>Default: <code>true</code> </p>
    pub fn pinned(&self) -> ::std::option::Option<bool> {
        self.pinned
    }
    /// <p>The encoding type that the Lambda function supports.</p>
    /// <p>Default: <code>json</code> </p>
    pub fn input_payload_encoding_type(&self) -> ::std::option::Option<&crate::types::LambdaInputPayloadEncodingType> {
        self.input_payload_encoding_type.as_ref()
    }
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exec_args.is_none()`.
    pub fn exec_args(&self) -> &[::std::string::String] {
        self.exec_args.as_deref().unwrap_or_default()
    }
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    pub fn environment_variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.environment_variables.as_ref()
    }
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    pub fn linux_process_params(&self) -> ::std::option::Option<&crate::types::LambdaLinuxProcessParams> {
        self.linux_process_params.as_ref()
    }
}
impl LambdaExecutionParameters {
    /// Creates a new builder-style object to manufacture [`LambdaExecutionParameters`](crate::types::LambdaExecutionParameters).
    pub fn builder() -> crate::types::builders::LambdaExecutionParametersBuilder {
        crate::types::builders::LambdaExecutionParametersBuilder::default()
    }
}

/// A builder for [`LambdaExecutionParameters`](crate::types::LambdaExecutionParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LambdaExecutionParametersBuilder {
    pub(crate) event_sources: ::std::option::Option<::std::vec::Vec<crate::types::LambdaEventSource>>,
    pub(crate) max_queue_size: ::std::option::Option<i32>,
    pub(crate) max_instances_count: ::std::option::Option<i32>,
    pub(crate) max_idle_time_in_seconds: ::std::option::Option<i32>,
    pub(crate) timeout_in_seconds: ::std::option::Option<i32>,
    pub(crate) status_timeout_in_seconds: ::std::option::Option<i32>,
    pub(crate) pinned: ::std::option::Option<bool>,
    pub(crate) input_payload_encoding_type: ::std::option::Option<crate::types::LambdaInputPayloadEncodingType>,
    pub(crate) exec_args: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) linux_process_params: ::std::option::Option<crate::types::LambdaLinuxProcessParams>,
}
impl LambdaExecutionParametersBuilder {
    /// Appends an item to `event_sources`.
    ///
    /// To override the contents of this collection use [`set_event_sources`](Self::set_event_sources).
    ///
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
    pub fn event_sources(mut self, input: crate::types::LambdaEventSource) -> Self {
        let mut v = self.event_sources.unwrap_or_default();
        v.push(input);
        self.event_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
    pub fn set_event_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LambdaEventSource>>) -> Self {
        self.event_sources = input;
        self
    }
    /// <p>The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
    pub fn get_event_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LambdaEventSource>> {
        &self.event_sources
    }
    /// <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.</p>
    pub fn max_queue_size(mut self, input: i32) -> Self {
        self.max_queue_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.</p>
    pub fn set_max_queue_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_queue_size = input;
        self
    }
    /// <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.</p>
    pub fn get_max_queue_size(&self) -> &::std::option::Option<i32> {
        &self.max_queue_size
    }
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same time.</p>
    pub fn max_instances_count(mut self, input: i32) -> Self {
        self.max_instances_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same time.</p>
    pub fn set_max_instances_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_instances_count = input;
        self
    }
    /// <p>The maximum number of instances that a non-pinned Lambda function can run at the same time.</p>
    pub fn get_max_instances_count(&self) -> &::std::option::Option<i32> {
        &self.max_instances_count
    }
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.</p>
    pub fn max_idle_time_in_seconds(mut self, input: i32) -> Self {
        self.max_idle_time_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.</p>
    pub fn set_max_idle_time_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_idle_time_in_seconds = input;
        self
    }
    /// <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.</p>
    pub fn get_max_idle_time_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.max_idle_time_in_seconds
    }
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work item.</p>
    pub fn timeout_in_seconds(mut self, input: i32) -> Self {
        self.timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work item.</p>
    pub fn set_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The maximum amount of time in seconds that the Lambda function can process a work item.</p>
    pub fn get_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.timeout_in_seconds
    }
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.</p>
    pub fn status_timeout_in_seconds(mut self, input: i32) -> Self {
        self.status_timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.</p>
    pub fn set_status_timeout_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_timeout_in_seconds = input;
        self
    }
    /// <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.</p>
    pub fn get_status_timeout_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.status_timeout_in_seconds
    }
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    /// <ul>
    /// <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li>
    /// <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li>
    /// </ul>
    /// <p>Default: <code>true</code> </p>
    pub fn pinned(mut self, input: bool) -> Self {
        self.pinned = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    /// <ul>
    /// <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li>
    /// <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li>
    /// </ul>
    /// <p>Default: <code>true</code> </p>
    pub fn set_pinned(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pinned = input;
        self
    }
    /// <p>Whether or not the Lambda function is pinned, or long-lived.</p>
    /// <ul>
    /// <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li>
    /// <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li>
    /// </ul>
    /// <p>Default: <code>true</code> </p>
    pub fn get_pinned(&self) -> &::std::option::Option<bool> {
        &self.pinned
    }
    /// <p>The encoding type that the Lambda function supports.</p>
    /// <p>Default: <code>json</code> </p>
    pub fn input_payload_encoding_type(mut self, input: crate::types::LambdaInputPayloadEncodingType) -> Self {
        self.input_payload_encoding_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encoding type that the Lambda function supports.</p>
    /// <p>Default: <code>json</code> </p>
    pub fn set_input_payload_encoding_type(mut self, input: ::std::option::Option<crate::types::LambdaInputPayloadEncodingType>) -> Self {
        self.input_payload_encoding_type = input;
        self
    }
    /// <p>The encoding type that the Lambda function supports.</p>
    /// <p>Default: <code>json</code> </p>
    pub fn get_input_payload_encoding_type(&self) -> &::std::option::Option<crate::types::LambdaInputPayloadEncodingType> {
        &self.input_payload_encoding_type
    }
    /// Appends an item to `exec_args`.
    ///
    /// To override the contents of this collection use [`set_exec_args`](Self::set_exec_args).
    ///
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    pub fn exec_args(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exec_args.unwrap_or_default();
        v.push(input.into());
        self.exec_args = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    pub fn set_exec_args(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exec_args = input;
        self
    }
    /// <p>The list of arguments to pass to the Lambda function when it runs.</p>
    pub fn get_exec_args(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exec_args
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    pub fn environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    pub fn set_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// <p>The map of environment variables that are available to the Lambda function when it runs.</p>
    pub fn get_environment_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.environment_variables
    }
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    pub fn linux_process_params(mut self, input: crate::types::LambdaLinuxProcessParams) -> Self {
        self.linux_process_params = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    pub fn set_linux_process_params(mut self, input: ::std::option::Option<crate::types::LambdaLinuxProcessParams>) -> Self {
        self.linux_process_params = input;
        self
    }
    /// <p>The parameters for the Linux process that contains the Lambda function.</p>
    pub fn get_linux_process_params(&self) -> &::std::option::Option<crate::types::LambdaLinuxProcessParams> {
        &self.linux_process_params
    }
    /// Consumes the builder and constructs a [`LambdaExecutionParameters`](crate::types::LambdaExecutionParameters).
    pub fn build(self) -> crate::types::LambdaExecutionParameters {
        crate::types::LambdaExecutionParameters {
            event_sources: self.event_sources,
            max_queue_size: self.max_queue_size,
            max_instances_count: self.max_instances_count,
            max_idle_time_in_seconds: self.max_idle_time_in_seconds,
            timeout_in_seconds: self.timeout_in_seconds,
            status_timeout_in_seconds: self.status_timeout_in_seconds,
            pinned: self.pinned,
            input_payload_encoding_type: self.input_payload_encoding_type,
            exec_args: self.exec_args,
            environment_variables: self.environment_variables,
            linux_process_params: self.linux_process_params,
        }
    }
}
