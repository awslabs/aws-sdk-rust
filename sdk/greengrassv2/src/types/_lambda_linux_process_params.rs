// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains parameters for a Linux process that contains an Lambda function.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaLinuxProcessParams {
    /// <p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p>
    /// <p>Default: <code>GreengrassContainer</code> </p>
    #[doc(hidden)]
    pub isolation_mode: std::option::Option<crate::types::LambdaIsolationMode>,
    /// <p>The parameters for the container in which the Lambda function runs.</p>
    #[doc(hidden)]
    pub container_params: std::option::Option<crate::types::LambdaContainerParams>,
}
impl LambdaLinuxProcessParams {
    /// <p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p>
    /// <p>Default: <code>GreengrassContainer</code> </p>
    pub fn isolation_mode(&self) -> std::option::Option<&crate::types::LambdaIsolationMode> {
        self.isolation_mode.as_ref()
    }
    /// <p>The parameters for the container in which the Lambda function runs.</p>
    pub fn container_params(&self) -> std::option::Option<&crate::types::LambdaContainerParams> {
        self.container_params.as_ref()
    }
}
impl LambdaLinuxProcessParams {
    /// Creates a new builder-style object to manufacture [`LambdaLinuxProcessParams`](crate::types::LambdaLinuxProcessParams).
    pub fn builder() -> crate::types::builders::LambdaLinuxProcessParamsBuilder {
        crate::types::builders::LambdaLinuxProcessParamsBuilder::default()
    }
}

/// A builder for [`LambdaLinuxProcessParams`](crate::types::LambdaLinuxProcessParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaLinuxProcessParamsBuilder {
    pub(crate) isolation_mode: std::option::Option<crate::types::LambdaIsolationMode>,
    pub(crate) container_params: std::option::Option<crate::types::LambdaContainerParams>,
}
impl LambdaLinuxProcessParamsBuilder {
    /// <p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p>
    /// <p>Default: <code>GreengrassContainer</code> </p>
    pub fn isolation_mode(mut self, input: crate::types::LambdaIsolationMode) -> Self {
        self.isolation_mode = Some(input);
        self
    }
    /// <p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p>
    /// <p>Default: <code>GreengrassContainer</code> </p>
    pub fn set_isolation_mode(
        mut self,
        input: std::option::Option<crate::types::LambdaIsolationMode>,
    ) -> Self {
        self.isolation_mode = input;
        self
    }
    /// <p>The parameters for the container in which the Lambda function runs.</p>
    pub fn container_params(mut self, input: crate::types::LambdaContainerParams) -> Self {
        self.container_params = Some(input);
        self
    }
    /// <p>The parameters for the container in which the Lambda function runs.</p>
    pub fn set_container_params(
        mut self,
        input: std::option::Option<crate::types::LambdaContainerParams>,
    ) -> Self {
        self.container_params = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaLinuxProcessParams`](crate::types::LambdaLinuxProcessParams).
    pub fn build(self) -> crate::types::LambdaLinuxProcessParams {
        crate::types::LambdaLinuxProcessParams {
            isolation_mode: self.isolation_mode,
            container_params: self.container_params,
        }
    }
}
