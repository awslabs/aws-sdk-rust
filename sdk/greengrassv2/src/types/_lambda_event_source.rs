// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaEventSource {
    /// <p>The topic to which to subscribe to receive event messages.</p>
    pub topic: ::std::string::String,
    /// <p>The type of event source. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// </ul>
    pub r#type: crate::types::LambdaEventSourceType,
}
impl LambdaEventSource {
    /// <p>The topic to which to subscribe to receive event messages.</p>
    pub fn topic(&self) -> &str {
        use std::ops::Deref;
        self.topic.deref()
    }
    /// <p>The type of event source. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::LambdaEventSourceType {
        &self.r#type
    }
}
impl LambdaEventSource {
    /// Creates a new builder-style object to manufacture [`LambdaEventSource`](crate::types::LambdaEventSource).
    pub fn builder() -> crate::types::builders::LambdaEventSourceBuilder {
        crate::types::builders::LambdaEventSourceBuilder::default()
    }
}

/// A builder for [`LambdaEventSource`](crate::types::LambdaEventSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LambdaEventSourceBuilder {
    pub(crate) topic: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::LambdaEventSourceType>,
}
impl LambdaEventSourceBuilder {
    /// <p>The topic to which to subscribe to receive event messages.</p>
    /// This field is required.
    pub fn topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The topic to which to subscribe to receive event messages.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The topic to which to subscribe to receive event messages.</p>
    pub fn get_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic
    }
    /// <p>The type of event source. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::LambdaEventSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of event source. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::LambdaEventSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of event source. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::LambdaEventSourceType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`LambdaEventSource`](crate::types::LambdaEventSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`topic`](crate::types::builders::LambdaEventSourceBuilder::topic)
    /// - [`r#type`](crate::types::builders::LambdaEventSourceBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::LambdaEventSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LambdaEventSource {
            topic: self.topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic",
                    "topic was not specified but it is required when building LambdaEventSource",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building LambdaEventSource",
                )
            })?,
        })
    }
}
