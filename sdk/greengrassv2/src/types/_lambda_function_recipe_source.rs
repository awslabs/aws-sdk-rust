// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an Lambda function to import to create a component.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaFunctionRecipeSource {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like <code>$LATEST</code>.</p>
    #[doc(hidden)]
    pub lambda_arn: std::option::Option<std::string::String>,
    /// <p>The name of the component.</p>
    /// <p>Defaults to the name of the Lambda function.</p>
    #[doc(hidden)]
    pub component_name: std::option::Option<std::string::String>,
    /// <p>The version of the component.</p>
    /// <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>
    #[doc(hidden)]
    pub component_version: std::option::Option<std::string::String>,
    /// <p>The platforms that the component version supports.</p>
    #[doc(hidden)]
    pub component_platforms: std::option::Option<std::vec::Vec<crate::types::ComponentPlatform>>,
    /// <p>The component versions on which this Lambda function component depends.</p>
    #[doc(hidden)]
    pub component_dependencies: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::ComponentDependencyRequirement,
        >,
    >,
    /// <p>The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.</p>
    #[doc(hidden)]
    pub component_lambda_parameters: std::option::Option<crate::types::LambdaExecutionParameters>,
}
impl LambdaFunctionRecipeSource {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like <code>$LATEST</code>.</p>
    pub fn lambda_arn(&self) -> std::option::Option<&str> {
        self.lambda_arn.as_deref()
    }
    /// <p>The name of the component.</p>
    /// <p>Defaults to the name of the Lambda function.</p>
    pub fn component_name(&self) -> std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>The version of the component.</p>
    /// <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>
    pub fn component_version(&self) -> std::option::Option<&str> {
        self.component_version.as_deref()
    }
    /// <p>The platforms that the component version supports.</p>
    pub fn component_platforms(&self) -> std::option::Option<&[crate::types::ComponentPlatform]> {
        self.component_platforms.as_deref()
    }
    /// <p>The component versions on which this Lambda function component depends.</p>
    pub fn component_dependencies(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::ComponentDependencyRequirement,
        >,
    > {
        self.component_dependencies.as_ref()
    }
    /// <p>The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.</p>
    pub fn component_lambda_parameters(
        &self,
    ) -> std::option::Option<&crate::types::LambdaExecutionParameters> {
        self.component_lambda_parameters.as_ref()
    }
}
impl LambdaFunctionRecipeSource {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionRecipeSource`](crate::types::LambdaFunctionRecipeSource).
    pub fn builder() -> crate::types::builders::LambdaFunctionRecipeSourceBuilder {
        crate::types::builders::LambdaFunctionRecipeSourceBuilder::default()
    }
}

/// A builder for [`LambdaFunctionRecipeSource`](crate::types::LambdaFunctionRecipeSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaFunctionRecipeSourceBuilder {
    pub(crate) lambda_arn: std::option::Option<std::string::String>,
    pub(crate) component_name: std::option::Option<std::string::String>,
    pub(crate) component_version: std::option::Option<std::string::String>,
    pub(crate) component_platforms:
        std::option::Option<std::vec::Vec<crate::types::ComponentPlatform>>,
    pub(crate) component_dependencies: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::ComponentDependencyRequirement,
        >,
    >,
    pub(crate) component_lambda_parameters:
        std::option::Option<crate::types::LambdaExecutionParameters>,
}
impl LambdaFunctionRecipeSourceBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like <code>$LATEST</code>.</p>
    pub fn lambda_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_arn = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like <code>$LATEST</code>.</p>
    pub fn set_lambda_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lambda_arn = input;
        self
    }
    /// <p>The name of the component.</p>
    /// <p>Defaults to the name of the Lambda function.</p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_name = Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    /// <p>Defaults to the name of the Lambda function.</p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The version of the component.</p>
    /// <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>
    pub fn component_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_version = Some(input.into());
        self
    }
    /// <p>The version of the component.</p>
    /// <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>
    pub fn set_component_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_version = input;
        self
    }
    /// Appends an item to `component_platforms`.
    ///
    /// To override the contents of this collection use [`set_component_platforms`](Self::set_component_platforms).
    ///
    /// <p>The platforms that the component version supports.</p>
    pub fn component_platforms(mut self, input: crate::types::ComponentPlatform) -> Self {
        let mut v = self.component_platforms.unwrap_or_default();
        v.push(input);
        self.component_platforms = Some(v);
        self
    }
    /// <p>The platforms that the component version supports.</p>
    pub fn set_component_platforms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ComponentPlatform>>,
    ) -> Self {
        self.component_platforms = input;
        self
    }
    /// Adds a key-value pair to `component_dependencies`.
    ///
    /// To override the contents of this collection use [`set_component_dependencies`](Self::set_component_dependencies).
    ///
    /// <p>The component versions on which this Lambda function component depends.</p>
    pub fn component_dependencies(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ComponentDependencyRequirement,
    ) -> Self {
        let mut hash_map = self.component_dependencies.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.component_dependencies = Some(hash_map);
        self
    }
    /// <p>The component versions on which this Lambda function component depends.</p>
    pub fn set_component_dependencies(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::ComponentDependencyRequirement,
            >,
        >,
    ) -> Self {
        self.component_dependencies = input;
        self
    }
    /// <p>The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.</p>
    pub fn component_lambda_parameters(
        mut self,
        input: crate::types::LambdaExecutionParameters,
    ) -> Self {
        self.component_lambda_parameters = Some(input);
        self
    }
    /// <p>The system and runtime parameters for the Lambda function as it runs on the Greengrass core device.</p>
    pub fn set_component_lambda_parameters(
        mut self,
        input: std::option::Option<crate::types::LambdaExecutionParameters>,
    ) -> Self {
        self.component_lambda_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaFunctionRecipeSource`](crate::types::LambdaFunctionRecipeSource).
    pub fn build(self) -> crate::types::LambdaFunctionRecipeSource {
        crate::types::LambdaFunctionRecipeSource {
            lambda_arn: self.lambda_arn,
            component_name: self.component_name,
            component_version: self.component_version,
            component_platforms: self.component_platforms,
            component_dependencies: self.component_dependencies,
            component_lambda_parameters: self.component_lambda_parameters,
        }
    }
}
