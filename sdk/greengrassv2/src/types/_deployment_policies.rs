// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about policies that define how a deployment updates components and handles failure.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeploymentPolicies {
    /// <p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p>
    /// <p>Default: <code>ROLLBACK</code> </p>
    #[doc(hidden)]
    pub failure_handling_policy: std::option::Option<crate::types::DeploymentFailureHandlingPolicy>,
    /// <p>The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.</p>
    #[doc(hidden)]
    pub component_update_policy: std::option::Option<crate::types::DeploymentComponentUpdatePolicy>,
    /// <p>The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.</p>
    #[doc(hidden)]
    pub configuration_validation_policy:
        std::option::Option<crate::types::DeploymentConfigurationValidationPolicy>,
}
impl DeploymentPolicies {
    /// <p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p>
    /// <p>Default: <code>ROLLBACK</code> </p>
    pub fn failure_handling_policy(
        &self,
    ) -> std::option::Option<&crate::types::DeploymentFailureHandlingPolicy> {
        self.failure_handling_policy.as_ref()
    }
    /// <p>The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.</p>
    pub fn component_update_policy(
        &self,
    ) -> std::option::Option<&crate::types::DeploymentComponentUpdatePolicy> {
        self.component_update_policy.as_ref()
    }
    /// <p>The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.</p>
    pub fn configuration_validation_policy(
        &self,
    ) -> std::option::Option<&crate::types::DeploymentConfigurationValidationPolicy> {
        self.configuration_validation_policy.as_ref()
    }
}
impl DeploymentPolicies {
    /// Creates a new builder-style object to manufacture [`DeploymentPolicies`](crate::types::DeploymentPolicies).
    pub fn builder() -> crate::types::builders::DeploymentPoliciesBuilder {
        crate::types::builders::DeploymentPoliciesBuilder::default()
    }
}

/// A builder for [`DeploymentPolicies`](crate::types::DeploymentPolicies).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeploymentPoliciesBuilder {
    pub(crate) failure_handling_policy:
        std::option::Option<crate::types::DeploymentFailureHandlingPolicy>,
    pub(crate) component_update_policy:
        std::option::Option<crate::types::DeploymentComponentUpdatePolicy>,
    pub(crate) configuration_validation_policy:
        std::option::Option<crate::types::DeploymentConfigurationValidationPolicy>,
}
impl DeploymentPoliciesBuilder {
    /// <p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p>
    /// <p>Default: <code>ROLLBACK</code> </p>
    pub fn failure_handling_policy(
        mut self,
        input: crate::types::DeploymentFailureHandlingPolicy,
    ) -> Self {
        self.failure_handling_policy = Some(input);
        self
    }
    /// <p>The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.</p>
    /// <p>Default: <code>ROLLBACK</code> </p>
    pub fn set_failure_handling_policy(
        mut self,
        input: std::option::Option<crate::types::DeploymentFailureHandlingPolicy>,
    ) -> Self {
        self.failure_handling_policy = input;
        self
    }
    /// <p>The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.</p>
    pub fn component_update_policy(
        mut self,
        input: crate::types::DeploymentComponentUpdatePolicy,
    ) -> Self {
        self.component_update_policy = Some(input);
        self
    }
    /// <p>The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.</p>
    pub fn set_component_update_policy(
        mut self,
        input: std::option::Option<crate::types::DeploymentComponentUpdatePolicy>,
    ) -> Self {
        self.component_update_policy = input;
        self
    }
    /// <p>The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.</p>
    pub fn configuration_validation_policy(
        mut self,
        input: crate::types::DeploymentConfigurationValidationPolicy,
    ) -> Self {
        self.configuration_validation_policy = Some(input);
        self
    }
    /// <p>The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.</p>
    pub fn set_configuration_validation_policy(
        mut self,
        input: std::option::Option<crate::types::DeploymentConfigurationValidationPolicy>,
    ) -> Self {
        self.configuration_validation_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`DeploymentPolicies`](crate::types::DeploymentPolicies).
    pub fn build(self) -> crate::types::DeploymentPolicies {
        crate::types::DeploymentPolicies {
            failure_handling_policy: self.failure_handling_policy,
            component_update_policy: self.component_update_policy,
            configuration_validation_policy: self.configuration_validation_policy,
        }
    }
}
