// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EffectiveDeployment {
    /// <p>The ID of the deployment.</p>
    pub deployment_id: ::std::string::String,
    /// <p>The name of the deployment.</p>
    pub deployment_name: ::std::string::String,
    /// <p>The ID of the IoT job that applies the deployment to target devices.</p>
    pub iot_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
    pub iot_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the deployment job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
    pub target_arn: ::std::string::String,
    /// <p>The status of the deployment job on the Greengrass core device.</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The deployment job is running.</p> </li>
    /// <li> <p> <code>QUEUED</code> – The deployment job is in the job queue and waiting to run.</p> </li>
    /// <li> <p> <code>FAILED</code> – The deployment failed. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – The deployment to an IoT thing was completed successfully.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – The deployment didn't complete in the allotted time. </p> </li>
    /// <li> <p> <code>CANCELED</code> – The deployment was canceled by the user.</p> </li>
    /// <li> <p> <code>REJECTED</code> – The deployment was rejected. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code> – The deployment to an IoT thing group was completed successfully.</p> </li>
    /// </ul>
    pub core_device_execution_status: crate::types::EffectiveDeploymentExecutionStatus,
    /// <p>The reason code for the update, if the job was updated.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
    pub creation_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The time at which the deployment job was last modified, expressed in ISO 8601 format.</p>
    pub modified_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The status details that explain why a deployment has an error. This response will be null if the deployment is in a success state.</p>
    pub status_details: ::std::option::Option<crate::types::EffectiveDeploymentStatusDetails>,
}
impl EffectiveDeployment {
    /// <p>The ID of the deployment.</p>
    pub fn deployment_id(&self) -> &str {
        use std::ops::Deref;
        self.deployment_id.deref()
    }
    /// <p>The name of the deployment.</p>
    pub fn deployment_name(&self) -> &str {
        use std::ops::Deref;
        self.deployment_name.deref()
    }
    /// <p>The ID of the IoT job that applies the deployment to target devices.</p>
    pub fn iot_job_id(&self) -> ::std::option::Option<&str> {
        self.iot_job_id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
    pub fn iot_job_arn(&self) -> ::std::option::Option<&str> {
        self.iot_job_arn.as_deref()
    }
    /// <p>The description of the deployment job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
    pub fn target_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_arn.deref()
    }
    /// <p>The status of the deployment job on the Greengrass core device.</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The deployment job is running.</p> </li>
    /// <li> <p> <code>QUEUED</code> – The deployment job is in the job queue and waiting to run.</p> </li>
    /// <li> <p> <code>FAILED</code> – The deployment failed. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – The deployment to an IoT thing was completed successfully.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – The deployment didn't complete in the allotted time. </p> </li>
    /// <li> <p> <code>CANCELED</code> – The deployment was canceled by the user.</p> </li>
    /// <li> <p> <code>REJECTED</code> – The deployment was rejected. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code> – The deployment to an IoT thing group was completed successfully.</p> </li>
    /// </ul>
    pub fn core_device_execution_status(&self) -> &crate::types::EffectiveDeploymentExecutionStatus {
        &self.core_device_execution_status
    }
    /// <p>The reason code for the update, if the job was updated.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
    pub fn creation_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_timestamp
    }
    /// <p>The time at which the deployment job was last modified, expressed in ISO 8601 format.</p>
    pub fn modified_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_timestamp
    }
    /// <p>The status details that explain why a deployment has an error. This response will be null if the deployment is in a success state.</p>
    pub fn status_details(&self) -> ::std::option::Option<&crate::types::EffectiveDeploymentStatusDetails> {
        self.status_details.as_ref()
    }
}
impl EffectiveDeployment {
    /// Creates a new builder-style object to manufacture [`EffectiveDeployment`](crate::types::EffectiveDeployment).
    pub fn builder() -> crate::types::builders::EffectiveDeploymentBuilder {
        crate::types::builders::EffectiveDeploymentBuilder::default()
    }
}

/// A builder for [`EffectiveDeployment`](crate::types::EffectiveDeployment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EffectiveDeploymentBuilder {
    pub(crate) deployment_id: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_name: ::std::option::Option<::std::string::String>,
    pub(crate) iot_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) iot_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) core_device_execution_status: ::std::option::Option<crate::types::EffectiveDeploymentExecutionStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_details: ::std::option::Option<crate::types::EffectiveDeploymentStatusDetails>,
}
impl EffectiveDeploymentBuilder {
    /// <p>The ID of the deployment.</p>
    /// This field is required.
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the deployment.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The ID of the deployment.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_id
    }
    /// <p>The name of the deployment.</p>
    /// This field is required.
    pub fn deployment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the deployment.</p>
    pub fn set_deployment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_name = input;
        self
    }
    /// <p>The name of the deployment.</p>
    pub fn get_deployment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_name
    }
    /// <p>The ID of the IoT job that applies the deployment to target devices.</p>
    pub fn iot_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iot_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IoT job that applies the deployment to target devices.</p>
    pub fn set_iot_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iot_job_id = input;
        self
    }
    /// <p>The ID of the IoT job that applies the deployment to target devices.</p>
    pub fn get_iot_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.iot_job_id
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
    pub fn iot_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iot_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
    pub fn set_iot_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iot_job_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
    pub fn get_iot_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iot_job_arn
    }
    /// <p>The description of the deployment job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the deployment job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the deployment job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The status of the deployment job on the Greengrass core device.</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The deployment job is running.</p> </li>
    /// <li> <p> <code>QUEUED</code> – The deployment job is in the job queue and waiting to run.</p> </li>
    /// <li> <p> <code>FAILED</code> – The deployment failed. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – The deployment to an IoT thing was completed successfully.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – The deployment didn't complete in the allotted time. </p> </li>
    /// <li> <p> <code>CANCELED</code> – The deployment was canceled by the user.</p> </li>
    /// <li> <p> <code>REJECTED</code> – The deployment was rejected. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code> – The deployment to an IoT thing group was completed successfully.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn core_device_execution_status(mut self, input: crate::types::EffectiveDeploymentExecutionStatus) -> Self {
        self.core_device_execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the deployment job on the Greengrass core device.</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The deployment job is running.</p> </li>
    /// <li> <p> <code>QUEUED</code> – The deployment job is in the job queue and waiting to run.</p> </li>
    /// <li> <p> <code>FAILED</code> – The deployment failed. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – The deployment to an IoT thing was completed successfully.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – The deployment didn't complete in the allotted time. </p> </li>
    /// <li> <p> <code>CANCELED</code> – The deployment was canceled by the user.</p> </li>
    /// <li> <p> <code>REJECTED</code> – The deployment was rejected. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code> – The deployment to an IoT thing group was completed successfully.</p> </li>
    /// </ul>
    pub fn set_core_device_execution_status(mut self, input: ::std::option::Option<crate::types::EffectiveDeploymentExecutionStatus>) -> Self {
        self.core_device_execution_status = input;
        self
    }
    /// <p>The status of the deployment job on the Greengrass core device.</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> – The deployment job is running.</p> </li>
    /// <li> <p> <code>QUEUED</code> – The deployment job is in the job queue and waiting to run.</p> </li>
    /// <li> <p> <code>FAILED</code> – The deployment failed. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>COMPLETED</code> – The deployment to an IoT thing was completed successfully.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – The deployment didn't complete in the allotted time. </p> </li>
    /// <li> <p> <code>CANCELED</code> – The deployment was canceled by the user.</p> </li>
    /// <li> <p> <code>REJECTED</code> – The deployment was rejected. For more information, see the <code>statusDetails</code> field.</p> </li>
    /// <li> <p> <code>SUCCEEDED</code> – The deployment to an IoT thing group was completed successfully.</p> </li>
    /// </ul>
    pub fn get_core_device_execution_status(&self) -> &::std::option::Option<crate::types::EffectiveDeploymentExecutionStatus> {
        &self.core_device_execution_status
    }
    /// <p>The reason code for the update, if the job was updated.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason code for the update, if the job was updated.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason code for the update, if the job was updated.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
    /// This field is required.
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// <p>The time at which the deployment job was last modified, expressed in ISO 8601 format.</p>
    /// This field is required.
    pub fn modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the deployment job was last modified, expressed in ISO 8601 format.</p>
    pub fn set_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The time at which the deployment job was last modified, expressed in ISO 8601 format.</p>
    pub fn get_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_timestamp
    }
    /// <p>The status details that explain why a deployment has an error. This response will be null if the deployment is in a success state.</p>
    pub fn status_details(mut self, input: crate::types::EffectiveDeploymentStatusDetails) -> Self {
        self.status_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status details that explain why a deployment has an error. This response will be null if the deployment is in a success state.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<crate::types::EffectiveDeploymentStatusDetails>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The status details that explain why a deployment has an error. This response will be null if the deployment is in a success state.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<crate::types::EffectiveDeploymentStatusDetails> {
        &self.status_details
    }
    /// Consumes the builder and constructs a [`EffectiveDeployment`](crate::types::EffectiveDeployment).
    /// This method will fail if any of the following fields are not set:
    /// - [`deployment_id`](crate::types::builders::EffectiveDeploymentBuilder::deployment_id)
    /// - [`deployment_name`](crate::types::builders::EffectiveDeploymentBuilder::deployment_name)
    /// - [`target_arn`](crate::types::builders::EffectiveDeploymentBuilder::target_arn)
    /// - [`core_device_execution_status`](crate::types::builders::EffectiveDeploymentBuilder::core_device_execution_status)
    /// - [`creation_timestamp`](crate::types::builders::EffectiveDeploymentBuilder::creation_timestamp)
    /// - [`modified_timestamp`](crate::types::builders::EffectiveDeploymentBuilder::modified_timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::EffectiveDeployment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EffectiveDeployment {
            deployment_id: self.deployment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deployment_id",
                    "deployment_id was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            deployment_name: self.deployment_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deployment_name",
                    "deployment_name was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            iot_job_id: self.iot_job_id,
            iot_job_arn: self.iot_job_arn,
            description: self.description,
            target_arn: self.target_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_arn",
                    "target_arn was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            core_device_execution_status: self.core_device_execution_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "core_device_execution_status",
                    "core_device_execution_status was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            reason: self.reason,
            creation_timestamp: self.creation_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_timestamp",
                    "creation_timestamp was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            modified_timestamp: self.modified_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_timestamp",
                    "modified_timestamp was not specified but it is required when building EffectiveDeployment",
                )
            })?,
            status_details: self.status_details,
        })
    }
}
