// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a component to deploy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComponentDeploymentSpecification {
    /// <p>The version of the component.</p>
    #[doc(hidden)]
    pub component_version: std::option::Option<std::string::String>,
    /// <p>The configuration updates to deploy for the component. You can define <i>reset</i> updates and <i>merge</i> updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device's component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    #[doc(hidden)]
    pub configuration_update: std::option::Option<crate::types::ComponentConfigurationUpdate>,
    /// <p>The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    #[doc(hidden)]
    pub run_with: std::option::Option<crate::types::ComponentRunWith>,
}
impl ComponentDeploymentSpecification {
    /// <p>The version of the component.</p>
    pub fn component_version(&self) -> std::option::Option<&str> {
        self.component_version.as_deref()
    }
    /// <p>The configuration updates to deploy for the component. You can define <i>reset</i> updates and <i>merge</i> updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device's component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn configuration_update(
        &self,
    ) -> std::option::Option<&crate::types::ComponentConfigurationUpdate> {
        self.configuration_update.as_ref()
    }
    /// <p>The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn run_with(&self) -> std::option::Option<&crate::types::ComponentRunWith> {
        self.run_with.as_ref()
    }
}
impl ComponentDeploymentSpecification {
    /// Creates a new builder-style object to manufacture [`ComponentDeploymentSpecification`](crate::types::ComponentDeploymentSpecification).
    pub fn builder() -> crate::types::builders::ComponentDeploymentSpecificationBuilder {
        crate::types::builders::ComponentDeploymentSpecificationBuilder::default()
    }
}

/// A builder for [`ComponentDeploymentSpecification`](crate::types::ComponentDeploymentSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComponentDeploymentSpecificationBuilder {
    pub(crate) component_version: std::option::Option<std::string::String>,
    pub(crate) configuration_update:
        std::option::Option<crate::types::ComponentConfigurationUpdate>,
    pub(crate) run_with: std::option::Option<crate::types::ComponentRunWith>,
}
impl ComponentDeploymentSpecificationBuilder {
    /// <p>The version of the component.</p>
    pub fn component_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_version = Some(input.into());
        self
    }
    /// <p>The version of the component.</p>
    pub fn set_component_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_version = input;
        self
    }
    /// <p>The configuration updates to deploy for the component. You can define <i>reset</i> updates and <i>merge</i> updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device's component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn configuration_update(
        mut self,
        input: crate::types::ComponentConfigurationUpdate,
    ) -> Self {
        self.configuration_update = Some(input);
        self
    }
    /// <p>The configuration updates to deploy for the component. You can define <i>reset</i> updates and <i>merge</i> updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device's component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn set_configuration_update(
        mut self,
        input: std::option::Option<crate::types::ComponentConfigurationUpdate>,
    ) -> Self {
        self.configuration_update = input;
        self
    }
    /// <p>The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn run_with(mut self, input: crate::types::ComponentRunWith) -> Self {
        self.run_with = Some(input);
        self
    }
    /// <p>The system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
    pub fn set_run_with(
        mut self,
        input: std::option::Option<crate::types::ComponentRunWith>,
    ) -> Self {
        self.run_with = input;
        self
    }
    /// Consumes the builder and constructs a [`ComponentDeploymentSpecification`](crate::types::ComponentDeploymentSpecification).
    pub fn build(self) -> crate::types::ComponentDeploymentSpecification {
        crate::types::ComponentDeploymentSpecification {
            component_version: self.component_version,
            configuration_update: self.configuration_update,
            run_with: self.run_with,
        }
    }
}
