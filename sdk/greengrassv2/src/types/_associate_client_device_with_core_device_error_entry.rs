// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an error that occurs from a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateClientDeviceWithCoreDeviceErrorEntry {
    /// <p>The name of the IoT thing whose associate request failed.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The error code for the request.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>A message that provides additional information about the error.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl AssociateClientDeviceWithCoreDeviceErrorEntry {
    /// <p>The name of the IoT thing whose associate request failed.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The error code for the request.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>A message that provides additional information about the error.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl AssociateClientDeviceWithCoreDeviceErrorEntry {
    /// Creates a new builder-style object to manufacture [`AssociateClientDeviceWithCoreDeviceErrorEntry`](crate::types::AssociateClientDeviceWithCoreDeviceErrorEntry).
    pub fn builder() -> crate::types::builders::AssociateClientDeviceWithCoreDeviceErrorEntryBuilder
    {
        crate::types::builders::AssociateClientDeviceWithCoreDeviceErrorEntryBuilder::default()
    }
}

/// A builder for [`AssociateClientDeviceWithCoreDeviceErrorEntry`](crate::types::AssociateClientDeviceWithCoreDeviceErrorEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateClientDeviceWithCoreDeviceErrorEntryBuilder {
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl AssociateClientDeviceWithCoreDeviceErrorEntryBuilder {
    /// <p>The name of the IoT thing whose associate request failed.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>The name of the IoT thing whose associate request failed.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The error code for the request.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The error code for the request.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>A message that provides additional information about the error.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>A message that provides additional information about the error.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateClientDeviceWithCoreDeviceErrorEntry`](crate::types::AssociateClientDeviceWithCoreDeviceErrorEntry).
    pub fn build(self) -> crate::types::AssociateClientDeviceWithCoreDeviceErrorEntry {
        crate::types::AssociateClientDeviceWithCoreDeviceErrorEntry {
            thing_name: self.thing_name,
            code: self.code,
            message: self.message,
        }
    }
}
