// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lambda_container_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LambdaContainerParams,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.memory_size_in_kb {
        object.key("memorySizeInKB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.mount_ro_sysfs {
        object.key("mountROSysfs").boolean(*var_2);
    }
    if let Some(var_3) = &input.volumes {
        let mut array_4 = object.key("volumes").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_lambda_volume_mount::ser_lambda_volume_mount(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.devices {
        let mut array_8 = object.key("devices").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_lambda_device_mount::ser_lambda_device_mount(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
