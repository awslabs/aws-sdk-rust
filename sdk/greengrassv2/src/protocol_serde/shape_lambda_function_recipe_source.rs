// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lambda_function_recipe_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LambdaFunctionRecipeSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.lambda_arn {
        object.key("lambdaArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.component_name {
        object.key("componentName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.component_version {
        object.key("componentVersion").string(var_3.as_str());
    }
    if let Some(var_4) = &input.component_platforms {
        let mut array_5 = object.key("componentPlatforms").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_component_platform::ser_component_platform(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.component_dependencies {
        #[allow(unused_mut)]
        let mut object_9 = object.key("componentDependencies").start_object();
        for (key_10, value_11) in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                crate::protocol_serde::shape_component_dependency_requirement::ser_component_dependency_requirement(&mut object_12, value_11)?;
                object_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_13) = &input.component_lambda_parameters {
        #[allow(unused_mut)]
        let mut object_14 = object.key("componentLambdaParameters").start_object();
        crate::protocol_serde::shape_lambda_execution_parameters::ser_lambda_execution_parameters(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}
