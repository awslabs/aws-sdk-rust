// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_associate_client_device_with_core_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateClientDeviceWithCoreDeviceInput,
) {
    if let Some(var_1) = &input.entries {
        let mut array_2 = object.key("entries").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_associate_client_device_with_core_device_entry(
                    &mut object_4,
                    item_3,
                );
                object_4.finish();
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_batch_disassociate_client_device_from_core_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateClientDeviceFromCoreDeviceInput,
) {
    if let Some(var_5) = &input.entries {
        let mut array_6 = object.key("entries").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_disassociate_client_device_from_core_device_entry(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_create_component_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComponentVersionInput,
) {
    if let Some(var_9) = &input.inline_recipe {
        object
            .key("inlineRecipe")
            .string_unchecked(&smithy_types::base64::encode(var_9));
    }
    if let Some(var_10) = &input.lambda_function {
        let mut object_11 = object.key("lambdaFunction").start_object();
        crate::json_ser::serialize_structure_lambda_function_recipe_source(&mut object_11, var_10);
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14).string(value_15);
            }
        }
        object_13.finish();
    }
}

pub fn serialize_structure_create_deployment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeploymentInput,
) {
    if let Some(var_16) = &input.components {
        let mut object_17 = object.key("components").start_object();
        for (key_18, value_19) in var_16 {
            {
                let mut object_20 = object_17.key(key_18).start_object();
                crate::json_ser::serialize_structure_component_deployment_specification(
                    &mut object_20,
                    value_19,
                );
                object_20.finish();
            }
        }
        object_17.finish();
    }
    if let Some(var_21) = &input.deployment_name {
        object.key("deploymentName").string(var_21);
    }
    if let Some(var_22) = &input.deployment_policies {
        let mut object_23 = object.key("deploymentPolicies").start_object();
        crate::json_ser::serialize_structure_deployment_policies(&mut object_23, var_22);
        object_23.finish();
    }
    if let Some(var_24) = &input.iot_job_configuration {
        let mut object_25 = object.key("iotJobConfiguration").start_object();
        crate::json_ser::serialize_structure_deployment_io_t_job_configuration(
            &mut object_25,
            var_24,
        );
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28).string(value_29);
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.target_arn {
        object.key("targetArn").string(var_30);
    }
}

pub fn serialize_structure_resolve_component_candidates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResolveComponentCandidatesInput,
) {
    if let Some(var_31) = &input.component_candidates {
        let mut array_32 = object.key("componentCandidates").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_component_candidate(&mut object_34, item_33);
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.platform {
        let mut object_36 = object.key("platform").start_object();
        crate::json_ser::serialize_structure_component_platform(&mut object_36, var_35);
        object_36.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_37) = &input.tags {
        let mut object_38 = object.key("tags").start_object();
        for (key_39, value_40) in var_37 {
            {
                object_38.key(key_39).string(value_40);
            }
        }
        object_38.finish();
    }
}

pub fn serialize_structure_associate_client_device_with_core_device_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociateClientDeviceWithCoreDeviceEntry,
) {
    if let Some(var_41) = &input.thing_name {
        object.key("thingName").string(var_41);
    }
}

pub fn serialize_structure_disassociate_client_device_from_core_device_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DisassociateClientDeviceFromCoreDeviceEntry,
) {
    if let Some(var_42) = &input.thing_name {
        object.key("thingName").string(var_42);
    }
}

pub fn serialize_structure_lambda_function_recipe_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaFunctionRecipeSource,
) {
    if let Some(var_43) = &input.lambda_arn {
        object.key("lambdaArn").string(var_43);
    }
    if let Some(var_44) = &input.component_name {
        object.key("componentName").string(var_44);
    }
    if let Some(var_45) = &input.component_version {
        object.key("componentVersion").string(var_45);
    }
    if let Some(var_46) = &input.component_platforms {
        let mut array_47 = object.key("componentPlatforms").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_component_platform(&mut object_49, item_48);
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.component_dependencies {
        let mut object_51 = object.key("componentDependencies").start_object();
        for (key_52, value_53) in var_50 {
            {
                let mut object_54 = object_51.key(key_52).start_object();
                crate::json_ser::serialize_structure_component_dependency_requirement(
                    &mut object_54,
                    value_53,
                );
                object_54.finish();
            }
        }
        object_51.finish();
    }
    if let Some(var_55) = &input.component_lambda_parameters {
        let mut object_56 = object.key("componentLambdaParameters").start_object();
        crate::json_ser::serialize_structure_lambda_execution_parameters(&mut object_56, var_55);
        object_56.finish();
    }
}

pub fn serialize_structure_component_deployment_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentDeploymentSpecification,
) {
    if let Some(var_57) = &input.component_version {
        object.key("componentVersion").string(var_57);
    }
    if let Some(var_58) = &input.configuration_update {
        let mut object_59 = object.key("configurationUpdate").start_object();
        crate::json_ser::serialize_structure_component_configuration_update(&mut object_59, var_58);
        object_59.finish();
    }
    if let Some(var_60) = &input.run_with {
        let mut object_61 = object.key("runWith").start_object();
        crate::json_ser::serialize_structure_component_run_with(&mut object_61, var_60);
        object_61.finish();
    }
}

pub fn serialize_structure_deployment_policies(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentPolicies,
) {
    if let Some(var_62) = &input.failure_handling_policy {
        object.key("failureHandlingPolicy").string(var_62.as_str());
    }
    if let Some(var_63) = &input.component_update_policy {
        let mut object_64 = object.key("componentUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_deployment_component_update_policy(
            &mut object_64,
            var_63,
        );
        object_64.finish();
    }
    if let Some(var_65) = &input.configuration_validation_policy {
        let mut object_66 = object.key("configurationValidationPolicy").start_object();
        crate::json_ser::serialize_structure_deployment_configuration_validation_policy(
            &mut object_66,
            var_65,
        );
        object_66.finish();
    }
}

pub fn serialize_structure_deployment_io_t_job_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentIoTJobConfiguration,
) {
    if let Some(var_67) = &input.job_executions_rollout_config {
        let mut object_68 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_io_t_job_executions_rollout_config(
            &mut object_68,
            var_67,
        );
        object_68.finish();
    }
    if let Some(var_69) = &input.abort_config {
        let mut object_70 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_io_t_job_abort_config(&mut object_70, var_69);
        object_70.finish();
    }
    if let Some(var_71) = &input.timeout_config {
        let mut object_72 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_io_t_job_timeout_config(&mut object_72, var_71);
        object_72.finish();
    }
}

pub fn serialize_structure_component_candidate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentCandidate,
) {
    if let Some(var_73) = &input.component_name {
        object.key("componentName").string(var_73);
    }
    if let Some(var_74) = &input.component_version {
        object.key("componentVersion").string(var_74);
    }
    if let Some(var_75) = &input.version_requirements {
        let mut object_76 = object.key("versionRequirements").start_object();
        for (key_77, value_78) in var_75 {
            {
                object_76.key(key_77).string(value_78);
            }
        }
        object_76.finish();
    }
}

pub fn serialize_structure_component_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentPlatform,
) {
    if let Some(var_79) = &input.name {
        object.key("name").string(var_79);
    }
    if let Some(var_80) = &input.attributes {
        let mut object_81 = object.key("attributes").start_object();
        for (key_82, value_83) in var_80 {
            {
                object_81.key(key_82).string(value_83);
            }
        }
        object_81.finish();
    }
}

pub fn serialize_structure_component_dependency_requirement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentDependencyRequirement,
) {
    if let Some(var_84) = &input.version_requirement {
        object.key("versionRequirement").string(var_84);
    }
    if let Some(var_85) = &input.dependency_type {
        object.key("dependencyType").string(var_85.as_str());
    }
}

pub fn serialize_structure_lambda_execution_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaExecutionParameters,
) {
    if let Some(var_86) = &input.event_sources {
        let mut array_87 = object.key("eventSources").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_lambda_event_source(&mut object_89, item_88);
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.max_queue_size {
        object.key("maxQueueSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    if let Some(var_91) = &input.max_instances_count {
        object.key("maxInstancesCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    if let Some(var_92) = &input.max_idle_time_in_seconds {
        object.key("maxIdleTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    if let Some(var_93) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_93).into()),
        );
    }
    if let Some(var_94) = &input.status_timeout_in_seconds {
        object.key("statusTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    if let Some(var_95) = &input.pinned {
        object.key("pinned").boolean(*var_95);
    }
    if let Some(var_96) = &input.input_payload_encoding_type {
        object
            .key("inputPayloadEncodingType")
            .string(var_96.as_str());
    }
    if let Some(var_97) = &input.exec_args {
        let mut array_98 = object.key("execArgs").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99);
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.environment_variables {
        let mut object_101 = object.key("environmentVariables").start_object();
        for (key_102, value_103) in var_100 {
            {
                object_101.key(key_102).string(value_103);
            }
        }
        object_101.finish();
    }
    if let Some(var_104) = &input.linux_process_params {
        let mut object_105 = object.key("linuxProcessParams").start_object();
        crate::json_ser::serialize_structure_lambda_linux_process_params(&mut object_105, var_104);
        object_105.finish();
    }
}

pub fn serialize_structure_component_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentConfigurationUpdate,
) {
    if let Some(var_106) = &input.merge {
        object.key("merge").string(var_106);
    }
    if let Some(var_107) = &input.reset {
        let mut array_108 = object.key("reset").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109);
            }
        }
        array_108.finish();
    }
}

pub fn serialize_structure_component_run_with(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentRunWith,
) {
    if let Some(var_110) = &input.posix_user {
        object.key("posixUser").string(var_110);
    }
}

pub fn serialize_structure_deployment_component_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentComponentUpdatePolicy,
) {
    if let Some(var_111) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    if let Some(var_112) = &input.action {
        object.key("action").string(var_112.as_str());
    }
}

pub fn serialize_structure_deployment_configuration_validation_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfigurationValidationPolicy,
) {
    if let Some(var_113) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
}

pub fn serialize_structure_io_t_job_executions_rollout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobExecutionsRolloutConfig,
) {
    if let Some(var_114) = &input.exponential_rate {
        let mut object_115 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_io_t_job_exponential_rollout_rate(
            &mut object_115,
            var_114,
        );
        object_115.finish();
    }
    if let Some(var_116) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_116).into()),
        );
    }
}

pub fn serialize_structure_io_t_job_abort_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobAbortConfig,
) {
    if let Some(var_117) = &input.criteria_list {
        let mut array_118 = object.key("criteriaList").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_io_t_job_abort_criteria(
                    &mut object_120,
                    item_119,
                );
                object_120.finish();
            }
        }
        array_118.finish();
    }
}

pub fn serialize_structure_io_t_job_timeout_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobTimeoutConfig,
) {
    if let Some(var_121) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
}

pub fn serialize_structure_lambda_event_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaEventSource,
) {
    if let Some(var_122) = &input.topic {
        object.key("topic").string(var_122);
    }
    if let Some(var_123) = &input.r#type {
        object.key("type").string(var_123.as_str());
    }
}

pub fn serialize_structure_lambda_linux_process_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaLinuxProcessParams,
) {
    if let Some(var_124) = &input.isolation_mode {
        object.key("isolationMode").string(var_124.as_str());
    }
    if let Some(var_125) = &input.container_params {
        let mut object_126 = object.key("containerParams").start_object();
        crate::json_ser::serialize_structure_lambda_container_params(&mut object_126, var_125);
        object_126.finish();
    }
}

pub fn serialize_structure_io_t_job_exponential_rollout_rate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobExponentialRolloutRate,
) {
    {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.base_rate_per_minute).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_127) = &input.rate_increase_criteria {
        let mut object_128 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_io_t_job_rate_increase_criteria(
            &mut object_128,
            var_127,
        );
        object_128.finish();
    }
}

pub fn serialize_structure_io_t_job_abort_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobAbortCriteria,
) {
    if let Some(var_129) = &input.failure_type {
        object.key("failureType").string(var_129.as_str());
    }
    if let Some(var_130) = &input.action {
        object.key("action").string(var_130.as_str());
    }
    {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.threshold_percentage).into()),
        );
    }
    {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.min_number_of_executed_things).into()),
        );
    }
}

pub fn serialize_structure_lambda_container_params(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaContainerParams,
) {
    if let Some(var_131) = &input.memory_size_in_kb {
        object.key("memorySizeInKB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_131).into()),
        );
    }
    if let Some(var_132) = &input.mount_ro_sysfs {
        object.key("mountROSysfs").boolean(*var_132);
    }
    if let Some(var_133) = &input.volumes {
        let mut array_134 = object.key("volumes").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_lambda_volume_mount(&mut object_136, item_135);
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.devices {
        let mut array_138 = object.key("devices").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_lambda_device_mount(&mut object_140, item_139);
                object_140.finish();
            }
        }
        array_138.finish();
    }
}

pub fn serialize_structure_io_t_job_rate_increase_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IoTJobRateIncreaseCriteria,
) {
    if let Some(var_141) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
}

pub fn serialize_structure_lambda_volume_mount(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaVolumeMount,
) {
    if let Some(var_143) = &input.source_path {
        object.key("sourcePath").string(var_143);
    }
    if let Some(var_144) = &input.destination_path {
        object.key("destinationPath").string(var_144);
    }
    if let Some(var_145) = &input.permission {
        object.key("permission").string(var_145.as_str());
    }
    if let Some(var_146) = &input.add_group_owner {
        object.key("addGroupOwner").boolean(*var_146);
    }
}

pub fn serialize_structure_lambda_device_mount(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaDeviceMount,
) {
    if let Some(var_147) = &input.path {
        object.key("path").string(var_147);
    }
    if let Some(var_148) = &input.permission {
        object.key("permission").string(var_148.as_str());
    }
    if let Some(var_149) = &input.add_group_owner {
        object.key("addGroupOwner").boolean(*var_149);
    }
}
