// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_batch_associate_client_device_with_core_device_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_1: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_batch_associate_client_device_with_core_device_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_2: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_header_batch_disassociate_client_device_from_core_device_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_3: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_batch_disassociate_client_device_from_core_device_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_4: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_4.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_cancel_deployment_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_5: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_5.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_cancel_deployment_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_6: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_6.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_create_component_version_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_7: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_7.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_create_component_version_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_8: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_8.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_8 = var_8;
        Ok(var_8.pop())
    }
}

pub fn deser_header_create_deployment_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_9: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_9.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_create_deployment_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_10: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_10.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}

pub fn deser_header_delete_component_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_11: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_11.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_11 = var_11;
        Ok(var_11.pop())
    }
}

pub fn deser_header_delete_component_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_12: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_12.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_12 = var_12;
        Ok(var_12.pop())
    }
}

pub fn deser_header_delete_core_device_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_13: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_13.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_13 = var_13;
        Ok(var_13.pop())
    }
}

pub fn deser_header_delete_core_device_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_14: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_14.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_14 = var_14;
        Ok(var_14.pop())
    }
}

pub fn deser_header_describe_component_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_15: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_15.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_15 = var_15;
        Ok(var_15.pop())
    }
}

pub fn deser_header_describe_component_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_16: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_16.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_16 = var_16;
        Ok(var_16.pop())
    }
}

pub fn deser_header_get_component_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_17: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_17.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_17 = var_17;
        Ok(var_17.pop())
    }
}

pub fn deser_header_get_component_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_18: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_18.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_18 = var_18;
        Ok(var_18.pop())
    }
}

pub fn deser_header_get_component_version_artifact_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_19: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_19.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_19 = var_19;
        Ok(var_19.pop())
    }
}

pub fn deser_header_get_component_version_artifact_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_20: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_20.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_20 = var_20;
        Ok(var_20.pop())
    }
}

pub fn deser_header_get_core_device_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_21: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_21.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_21 = var_21;
        Ok(var_21.pop())
    }
}

pub fn deser_header_get_core_device_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_22: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_22.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_22 = var_22;
        Ok(var_22.pop())
    }
}

pub fn deser_header_get_deployment_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_23: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_23.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_23 = var_23;
        Ok(var_23.pop())
    }
}

pub fn deser_header_get_deployment_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_24: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_24.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_24 = var_24;
        Ok(var_24.pop())
    }
}

pub fn deser_header_list_client_devices_associated_with_core_device_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_25: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_25.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_25 = var_25;
        Ok(var_25.pop())
    }
}

pub fn deser_header_list_client_devices_associated_with_core_device_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_26: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_26.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_26 = var_26;
        Ok(var_26.pop())
    }
}

pub fn deser_header_list_components_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_27: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_27.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_27 = var_27;
        Ok(var_27.pop())
    }
}

pub fn deser_header_list_components_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_28: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_28.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_28 = var_28;
        Ok(var_28.pop())
    }
}

pub fn deser_header_list_component_versions_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_29: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_29.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_29 = var_29;
        Ok(var_29.pop())
    }
}

pub fn deser_header_list_component_versions_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_30: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_30.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_30 = var_30;
        Ok(var_30.pop())
    }
}

pub fn deser_header_list_core_devices_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_31: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_31.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_31 = var_31;
        Ok(var_31.pop())
    }
}

pub fn deser_header_list_core_devices_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_32: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_32.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_32 = var_32;
        Ok(var_32.pop())
    }
}

pub fn deser_header_list_deployments_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_33: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_33.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_33 = var_33;
        Ok(var_33.pop())
    }
}

pub fn deser_header_list_deployments_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_34: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_34.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_34 = var_34;
        Ok(var_34.pop())
    }
}

pub fn deser_header_list_effective_deployments_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_35: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_35.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_35 = var_35;
        Ok(var_35.pop())
    }
}

pub fn deser_header_list_effective_deployments_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_36: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_36.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_36 = var_36;
        Ok(var_36.pop())
    }
}

pub fn deser_header_list_installed_components_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_37: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_37.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_37 = var_37;
        Ok(var_37.pop())
    }
}

pub fn deser_header_list_installed_components_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_38: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_38.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_38 = var_38;
        Ok(var_38.pop())
    }
}

pub fn deser_header_list_tags_for_resource_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_39: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_39.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_39 = var_39;
        Ok(var_39.pop())
    }
}

pub fn deser_header_resolve_component_candidates_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_40: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_40.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_40 = var_40;
        Ok(var_40.pop())
    }
}

pub fn deser_header_resolve_component_candidates_throttling_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_41: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_41.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_41 = var_41;
        Ok(var_41.pop())
    }
}

pub fn deser_header_tag_resource_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_42: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_42.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_42 = var_42;
        Ok(var_42.pop())
    }
}

pub fn deser_header_untag_resource_internal_server_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_43: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_43.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_43 = var_43;
        Ok(var_43.pop())
    }
}
