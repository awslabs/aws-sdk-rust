// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn request_already_in_progress_exception_correct_errors(
    mut builder: crate::types::error::builders::RequestAlreadyInProgressExceptionBuilder,
) -> crate::types::error::builders::RequestAlreadyInProgressExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_component_version_output_correct_errors(
    mut builder: crate::operation::create_component_version::builders::CreateComponentVersionOutputBuilder,
) -> crate::operation::create_component_version::builders::CreateComponentVersionOutputBuilder {
    if builder.component_name.is_none() {
        builder.component_name = Some(Default::default())
    }
    if builder.component_version.is_none() {
        builder.component_version = Some(Default::default())
    }
    if builder.creation_timestamp.is_none() {
        builder.creation_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::CloudComponentStatusBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_component_output_correct_errors(
    mut builder: crate::operation::get_component::builders::GetComponentOutputBuilder,
) -> crate::operation::get_component::builders::GetComponentOutputBuilder {
    if builder.recipe_output_format.is_none() {
        builder.recipe_output_format = "no value was set".parse::<crate::types::RecipeOutputFormat>().ok()
    }
    if builder.recipe.is_none() {
        builder.recipe = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn get_component_version_artifact_output_correct_errors(
    mut builder: crate::operation::get_component_version_artifact::builders::GetComponentVersionArtifactOutputBuilder,
) -> crate::operation::get_component_version_artifact::builders::GetComponentVersionArtifactOutputBuilder {
    if builder.pre_signed_url.is_none() {
        builder.pre_signed_url = Some(Default::default())
    }
    builder
}

pub(crate) fn effective_deployment_correct_errors(
    mut builder: crate::types::builders::EffectiveDeploymentBuilder,
) -> crate::types::builders::EffectiveDeploymentBuilder {
    if builder.deployment_id.is_none() {
        builder.deployment_id = Some(Default::default())
    }
    if builder.deployment_name.is_none() {
        builder.deployment_name = Some(Default::default())
    }
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    if builder.core_device_execution_status.is_none() {
        builder.core_device_execution_status = "no value was set".parse::<crate::types::EffectiveDeploymentExecutionStatus>().ok()
    }
    if builder.creation_timestamp.is_none() {
        builder.creation_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_timestamp.is_none() {
        builder.modified_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn io_t_job_abort_config_correct_errors(
    mut builder: crate::types::builders::IoTJobAbortConfigBuilder,
) -> crate::types::builders::IoTJobAbortConfigBuilder {
    if builder.criteria_list.is_none() {
        builder.criteria_list = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn io_t_job_exponential_rollout_rate_correct_errors(
    mut builder: crate::types::builders::IoTJobExponentialRolloutRateBuilder,
) -> crate::types::builders::IoTJobExponentialRolloutRateBuilder {
    if builder.base_rate_per_minute.is_none() {
        builder.base_rate_per_minute = Some(Default::default())
    }
    if builder.increment_factor.is_none() {
        builder.increment_factor = Some(Default::default())
    }
    if builder.rate_increase_criteria.is_none() {
        builder.rate_increase_criteria = {
            let builder = crate::types::builders::IoTJobRateIncreaseCriteriaBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn io_t_job_abort_criteria_correct_errors(
    mut builder: crate::types::builders::IoTJobAbortCriteriaBuilder,
) -> crate::types::builders::IoTJobAbortCriteriaBuilder {
    if builder.failure_type.is_none() {
        builder.failure_type = "no value was set".parse::<crate::types::IoTJobExecutionFailureType>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::IoTJobAbortAction>().ok()
    }
    if builder.threshold_percentage.is_none() {
        builder.threshold_percentage = Some(Default::default())
    }
    if builder.min_number_of_executed_things.is_none() {
        builder.min_number_of_executed_things = Some(Default::default())
    }
    builder
}
