// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_installed_components::_list_installed_components_output::ListInstalledComponentsOutputBuilder;

pub use crate::operation::list_installed_components::_list_installed_components_input::ListInstalledComponentsInputBuilder;

impl crate::operation::list_installed_components::builders::ListInstalledComponentsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_installed_components::ListInstalledComponentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_installed_components::ListInstalledComponentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_installed_components();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListInstalledComponents`.
///
/// <p>Retrieves a paginated list of the components that a Greengrass core device runs. By default, this list doesn't include components that are deployed as dependencies of other components. To include dependencies in the response, set the <code>topologyFilter</code> parameter to <code>ALL</code>.</p><note>
/// <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.</p>
/// <p>Core devices send status updates at the following times:</p>
/// <ul>
/// <li>
/// <p>When the IoT Greengrass Core software starts</p></li>
/// <li>
/// <p>When the core device receives a deployment from the Amazon Web Services Cloud</p></li>
/// <li>
/// <p>When the status of any component on the core device becomes <code>BROKEN</code></p></li>
/// <li>
/// <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval that you can configure</a>, which defaults to 24 hours</p></li>
/// <li>
/// <p>For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment</p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListInstalledComponentsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_installed_components::builders::ListInstalledComponentsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_installed_components::ListInstalledComponentsOutput,
        crate::operation::list_installed_components::ListInstalledComponentsError,
    > for ListInstalledComponentsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_installed_components::ListInstalledComponentsOutput,
            crate::operation::list_installed_components::ListInstalledComponentsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListInstalledComponentsFluentBuilder {
    /// Creates a new `ListInstalledComponents`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListInstalledComponents as a reference.
    pub fn as_input(&self) -> &crate::operation::list_installed_components::builders::ListInstalledComponentsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_installed_components::ListInstalledComponentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_installed_components::ListInstalledComponentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_installed_components::ListInstalledComponents::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_installed_components::ListInstalledComponents::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_installed_components::ListInstalledComponentsOutput,
        crate::operation::list_installed_components::ListInstalledComponentsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_installed_components::paginator::ListInstalledComponentsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_installed_components::paginator::ListInstalledComponentsPaginator {
        crate::operation::list_installed_components::paginator::ListInstalledComponentsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn core_device_thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.core_device_thing_name(input.into());
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn set_core_device_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_core_device_thing_name(input);
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn get_core_device_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_core_device_thing_name()
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALL</code> – The list includes all components installed on the core device.</p></li>
    /// <li>
    /// <p><code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p></li>
    /// </ul>
    /// <p>Default: <code>ROOT</code></p>
    pub fn topology_filter(mut self, input: crate::types::InstalledComponentTopologyFilter) -> Self {
        self.inner = self.inner.topology_filter(input);
        self
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALL</code> – The list includes all components installed on the core device.</p></li>
    /// <li>
    /// <p><code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p></li>
    /// </ul>
    /// <p>Default: <code>ROOT</code></p>
    pub fn set_topology_filter(mut self, input: ::std::option::Option<crate::types::InstalledComponentTopologyFilter>) -> Self {
        self.inner = self.inner.set_topology_filter(input);
        self
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALL</code> – The list includes all components installed on the core device.</p></li>
    /// <li>
    /// <p><code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p></li>
    /// </ul>
    /// <p>Default: <code>ROOT</code></p>
    pub fn get_topology_filter(&self) -> &::std::option::Option<crate::types::InstalledComponentTopologyFilter> {
        self.inner.get_topology_filter()
    }
}
