// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListInstalledComponentsInput {
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub core_device_thing_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token to be used for the next set of paginated results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li>
    /// <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li>
    /// </ul>
    /// <p>Default: <code>ROOT</code> </p>
    pub topology_filter: ::std::option::Option<crate::types::InstalledComponentTopologyFilter>,
}
impl ListInstalledComponentsInput {
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn core_device_thing_name(&self) -> ::std::option::Option<&str> {
        self.core_device_thing_name.as_deref()
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li>
    /// <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li>
    /// </ul>
    /// <p>Default: <code>ROOT</code> </p>
    pub fn topology_filter(&self) -> ::std::option::Option<&crate::types::InstalledComponentTopologyFilter> {
        self.topology_filter.as_ref()
    }
}
impl ListInstalledComponentsInput {
    /// Creates a new builder-style object to manufacture [`ListInstalledComponentsInput`](crate::operation::list_installed_components::ListInstalledComponentsInput).
    pub fn builder() -> crate::operation::list_installed_components::builders::ListInstalledComponentsInputBuilder {
        crate::operation::list_installed_components::builders::ListInstalledComponentsInputBuilder::default()
    }
}

/// A builder for [`ListInstalledComponentsInput`](crate::operation::list_installed_components::ListInstalledComponentsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListInstalledComponentsInputBuilder {
    pub(crate) core_device_thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) topology_filter: ::std::option::Option<crate::types::InstalledComponentTopologyFilter>,
}
impl ListInstalledComponentsInputBuilder {
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    /// This field is required.
    pub fn core_device_thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_device_thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn set_core_device_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_device_thing_name = input;
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn get_core_device_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_device_thing_name
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li>
    /// <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li>
    /// </ul>
    /// <p>Default: <code>ROOT</code> </p>
    pub fn topology_filter(mut self, input: crate::types::InstalledComponentTopologyFilter) -> Self {
        self.topology_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li>
    /// <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li>
    /// </ul>
    /// <p>Default: <code>ROOT</code> </p>
    pub fn set_topology_filter(mut self, input: ::std::option::Option<crate::types::InstalledComponentTopologyFilter>) -> Self {
        self.topology_filter = input;
        self
    }
    /// <p>The filter for the list of components. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ALL</code> – The list includes all components installed on the core device.</p> </li>
    /// <li> <p> <code>ROOT</code> – The list includes only <i>root</i> components, which are components that you specify in a deployment. When you choose this option, the list doesn't include components that the core device installs as dependencies of other components.</p> </li>
    /// </ul>
    /// <p>Default: <code>ROOT</code> </p>
    pub fn get_topology_filter(&self) -> &::std::option::Option<crate::types::InstalledComponentTopologyFilter> {
        &self.topology_filter
    }
    /// Consumes the builder and constructs a [`ListInstalledComponentsInput`](crate::operation::list_installed_components::ListInstalledComponentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_installed_components::ListInstalledComponentsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_installed_components::ListInstalledComponentsInput {
            core_device_thing_name: self.core_device_thing_name,
            max_results: self.max_results,
            next_token: self.next_token,
            topology_filter: self.topology_filter,
        })
    }
}
