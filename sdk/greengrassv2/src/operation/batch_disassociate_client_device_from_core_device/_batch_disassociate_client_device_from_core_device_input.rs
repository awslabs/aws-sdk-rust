// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDisassociateClientDeviceFromCoreDeviceInput {
    /// <p>The list of client devices to disassociate.</p>
    pub entries: ::std::option::Option<::std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceEntry>>,
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub core_device_thing_name: ::std::option::Option<::std::string::String>,
}
impl BatchDisassociateClientDeviceFromCoreDeviceInput {
    /// <p>The list of client devices to disassociate.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entries.is_none()`.
    pub fn entries(&self) -> &[crate::types::DisassociateClientDeviceFromCoreDeviceEntry] {
        self.entries.as_deref().unwrap_or_default()
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn core_device_thing_name(&self) -> ::std::option::Option<&str> {
        self.core_device_thing_name.as_deref()
    }
}
impl BatchDisassociateClientDeviceFromCoreDeviceInput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateClientDeviceFromCoreDeviceInput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceInput).
    pub fn builder(
    ) -> crate::operation::batch_disassociate_client_device_from_core_device::builders::BatchDisassociateClientDeviceFromCoreDeviceInputBuilder {
        crate::operation::batch_disassociate_client_device_from_core_device::builders::BatchDisassociateClientDeviceFromCoreDeviceInputBuilder::default()
    }
}

/// A builder for [`BatchDisassociateClientDeviceFromCoreDeviceInput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDisassociateClientDeviceFromCoreDeviceInputBuilder {
    pub(crate) entries: ::std::option::Option<::std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceEntry>>,
    pub(crate) core_device_thing_name: ::std::option::Option<::std::string::String>,
}
impl BatchDisassociateClientDeviceFromCoreDeviceInputBuilder {
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>The list of client devices to disassociate.</p>
    pub fn entries(mut self, input: crate::types::DisassociateClientDeviceFromCoreDeviceEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of client devices to disassociate.</p>
    pub fn set_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceEntry>>) -> Self {
        self.entries = input;
        self
    }
    /// <p>The list of client devices to disassociate.</p>
    pub fn get_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceEntry>> {
        &self.entries
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    /// This field is required.
    pub fn core_device_thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_device_thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn set_core_device_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_device_thing_name = input;
        self
    }
    /// <p>The name of the core device. This is also the name of the IoT thing.</p>
    pub fn get_core_device_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_device_thing_name
    }
    /// Consumes the builder and constructs a [`BatchDisassociateClientDeviceFromCoreDeviceInput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceInput {
                entries: self.entries,
                core_device_thing_name: self.core_device_thing_name,
            },
        )
    }
}
