// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDisassociateClientDeviceFromCoreDeviceOutput {
    /// <p>The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.</p>
    #[doc(hidden)]
    pub error_entries: std::option::Option<
        std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceErrorEntry>,
    >,
    _request_id: Option<String>,
}
impl BatchDisassociateClientDeviceFromCoreDeviceOutput {
    /// <p>The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.</p>
    pub fn error_entries(
        &self,
    ) -> std::option::Option<&[crate::types::DisassociateClientDeviceFromCoreDeviceErrorEntry]>
    {
        self.error_entries.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDisassociateClientDeviceFromCoreDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDisassociateClientDeviceFromCoreDeviceOutput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateClientDeviceFromCoreDeviceOutput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceOutput).
    pub fn builder() -> crate::operation::batch_disassociate_client_device_from_core_device::builders::BatchDisassociateClientDeviceFromCoreDeviceOutputBuilder{
        crate::operation::batch_disassociate_client_device_from_core_device::builders::BatchDisassociateClientDeviceFromCoreDeviceOutputBuilder::default()
    }
}

/// A builder for [`BatchDisassociateClientDeviceFromCoreDeviceOutput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDisassociateClientDeviceFromCoreDeviceOutputBuilder {
    pub(crate) error_entries: std::option::Option<
        std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceErrorEntry>,
    >,
    _request_id: Option<String>,
}
impl BatchDisassociateClientDeviceFromCoreDeviceOutputBuilder {
    /// Appends an item to `error_entries`.
    ///
    /// To override the contents of this collection use [`set_error_entries`](Self::set_error_entries).
    ///
    /// <p>The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.</p>
    pub fn error_entries(
        mut self,
        input: crate::types::DisassociateClientDeviceFromCoreDeviceErrorEntry,
    ) -> Self {
        let mut v = self.error_entries.unwrap_or_default();
        v.push(input);
        self.error_entries = Some(v);
        self
    }
    /// <p>The list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.</p>
    pub fn set_error_entries(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::DisassociateClientDeviceFromCoreDeviceErrorEntry>,
        >,
    ) -> Self {
        self.error_entries = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDisassociateClientDeviceFromCoreDeviceOutput`](crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceOutput).
    pub fn build(self) -> crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceOutput{
        crate::operation::batch_disassociate_client_device_from_core_device::BatchDisassociateClientDeviceFromCoreDeviceOutput {
            error_entries: self.error_entries
            ,
            _request_id: self._request_id,
        }
    }
}
