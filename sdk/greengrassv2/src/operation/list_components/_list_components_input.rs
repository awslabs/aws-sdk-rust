// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListComponentsInput {
    /// <p>The scope of the components to list.</p>
    /// <p>Default: <code>PRIVATE</code> </p>
    #[doc(hidden)]
    pub scope: std::option::Option<crate::types::ComponentVisibilityScope>,
    /// <p>The maximum number of results to be returned per paginated request.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token to be used for the next set of paginated results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListComponentsInput {
    /// <p>The scope of the components to list.</p>
    /// <p>Default: <code>PRIVATE</code> </p>
    pub fn scope(&self) -> std::option::Option<&crate::types::ComponentVisibilityScope> {
        self.scope.as_ref()
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListComponentsInput {
    /// Creates a new builder-style object to manufacture [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn builder() -> crate::operation::list_components::builders::ListComponentsInputBuilder {
        crate::operation::list_components::builders::ListComponentsInputBuilder::default()
    }
}

/// A builder for [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListComponentsInputBuilder {
    pub(crate) scope: std::option::Option<crate::types::ComponentVisibilityScope>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListComponentsInputBuilder {
    /// <p>The scope of the components to list.</p>
    /// <p>Default: <code>PRIVATE</code> </p>
    pub fn scope(mut self, input: crate::types::ComponentVisibilityScope) -> Self {
        self.scope = Some(input);
        self
    }
    /// <p>The scope of the components to list.</p>
    /// <p>Default: <code>PRIVATE</code> </p>
    pub fn set_scope(
        mut self,
        input: std::option::Option<crate::types::ComponentVisibilityScope>,
    ) -> Self {
        self.scope = input;
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to be returned per paginated request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_components::ListComponentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_components::ListComponentsInput {
            scope: self.scope,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
