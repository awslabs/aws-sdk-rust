// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS SimSpace Weaver
///
/// Client for invoking operations on AWS SimSpace Weaver. Each operation on AWS SimSpace Weaver is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_simspaceweaver::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_simspaceweaver::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_simspaceweaver::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`DeleteApp`](crate::client::fluent_builders::DeleteApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::DeleteApp::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::DeleteApp::set_simulation): <p>The name of the simulation of the app.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeleteApp::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeleteApp::set_domain): <p>The name of the domain of the app.</p>
    ///   - [`app(impl Into<String>)`](crate::client::fluent_builders::DeleteApp::app) / [`set_app(Option<String>)`](crate::client::fluent_builders::DeleteApp::set_app): <p>The name of the app.</p>
    /// - On success, responds with [`DeleteAppOutput`](crate::output::DeleteAppOutput)

    /// - On failure, responds with [`SdkError<DeleteAppError>`](crate::error::DeleteAppError)
    pub fn delete_app(&self) -> crate::client::fluent_builders::DeleteApp {
        crate::client::fluent_builders::DeleteApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSimulation`](crate::client::fluent_builders::DeleteSimulation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::DeleteSimulation::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::DeleteSimulation::set_simulation): <p>The name of the simulation.</p>
    /// - On success, responds with [`DeleteSimulationOutput`](crate::output::DeleteSimulationOutput)

    /// - On failure, responds with [`SdkError<DeleteSimulationError>`](crate::error::DeleteSimulationError)
    pub fn delete_simulation(&self) -> crate::client::fluent_builders::DeleteSimulation {
        crate::client::fluent_builders::DeleteSimulation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeApp`](crate::client::fluent_builders::DescribeApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::DescribeApp::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::DescribeApp::set_simulation): <p>The name of the simulation of the app.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeApp::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeApp::set_domain): <p>The name of the domain of the app.</p>
    ///   - [`app(impl Into<String>)`](crate::client::fluent_builders::DescribeApp::app) / [`set_app(Option<String>)`](crate::client::fluent_builders::DescribeApp::set_app): <p>The name of the app.</p>
    /// - On success, responds with [`DescribeAppOutput`](crate::output::DescribeAppOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DescribeAppOutput::name): <p>The name of the app.</p>
    ///   - [`simulation(Option<String>)`](crate::output::DescribeAppOutput::simulation): <p>The name of the simulation of the app.</p>
    ///   - [`domain(Option<String>)`](crate::output::DescribeAppOutput::domain): <p>The name of the domain of the app.</p>
    ///   - [`status(Option<SimulationAppStatus>)`](crate::output::DescribeAppOutput::status): <p>The current lifecycle state of the custom app.</p>
    ///   - [`target_status(Option<SimulationAppTargetStatus>)`](crate::output::DescribeAppOutput::target_status): <p>The desired lifecycle state of the custom app.</p>
    ///   - [`launch_overrides(Option<LaunchOverrides>)`](crate::output::DescribeAppOutput::launch_overrides): <p>Options that apply when the app starts. These optiAons override default behavior.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeAppOutput::description): <p>The description of the app.</p>
    ///   - [`endpoint_info(Option<SimulationAppEndpointInfo>)`](crate::output::DescribeAppOutput::endpoint_info): <p>Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.</p>
    /// - On failure, responds with [`SdkError<DescribeAppError>`](crate::error::DescribeAppError)
    pub fn describe_app(&self) -> crate::client::fluent_builders::DescribeApp {
        crate::client::fluent_builders::DescribeApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSimulation`](crate::client::fluent_builders::DescribeSimulation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::DescribeSimulation::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::DescribeSimulation::set_simulation): <p>The name of the simulation.</p>
    /// - On success, responds with [`DescribeSimulationOutput`](crate::output::DescribeSimulationOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::DescribeSimulationOutput::name): <p>The name of the simulation.</p>
    ///   - [`execution_id(Option<String>)`](crate::output::DescribeSimulationOutput::execution_id): <p>A universally unique identifier (UUID) for this simulation.</p>
    ///   - [`arn(Option<String>)`](crate::output::DescribeSimulationOutput::arn): <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeSimulationOutput::description): <p>The description of the simulation.</p>
    ///   - [`role_arn(Option<String>)`](crate::output::DescribeSimulationOutput::role_arn): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeSimulationOutput::creation_time): <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    ///   - [`status(Option<SimulationStatus>)`](crate::output::DescribeSimulationOutput::status): <p>The current lifecycle state of the simulation.</p>
    ///   - [`target_status(Option<SimulationTargetStatus>)`](crate::output::DescribeSimulationOutput::target_status): <p>The desired lifecycle state of the simulation.</p>
    ///   - [`schema_s3_location(Option<S3Location>)`](crate::output::DescribeSimulationOutput::schema_s3_location): <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    ///   - [`schema_error(Option<String>)`](crate::output::DescribeSimulationOutput::schema_error): <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    ///   - [`logging_configuration(Option<LoggingConfiguration>)`](crate::output::DescribeSimulationOutput::logging_configuration): <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    ///   - [`live_simulation_state(Option<LiveSimulationState>)`](crate::output::DescribeSimulationOutput::live_simulation_state): <p>A collection of additional state information, such as domain and clock configuration.</p>
    ///   - [`maximum_duration(Option<String>)`](crate::output::DescribeSimulationOutput::maximum_duration): <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    /// - On failure, responds with [`SdkError<DescribeSimulationError>`](crate::error::DescribeSimulationError)
    pub fn describe_simulation(&self) -> crate::client::fluent_builders::DescribeSimulation {
        crate::client::fluent_builders::DescribeSimulation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApps`](crate::client::fluent_builders::ListApps) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApps::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::ListApps::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::ListApps::set_simulation): <p>The name of the simulation that you want to list apps for.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListApps::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListApps::set_domain): <p>The name of the domain that you want to list apps for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApps::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApps::set_max_results): <p>The maximum number of apps to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApps::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApps::set_next_token): <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    /// - On success, responds with [`ListAppsOutput`](crate::output::ListAppsOutput) with field(s):
    ///   - [`apps(Option<Vec<SimulationAppMetadata>>)`](crate::output::ListAppsOutput::apps): <p>The list of apps for the given simulation and domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAppsOutput::next_token): <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    /// - On failure, responds with [`SdkError<ListAppsError>`](crate::error::ListAppsError)
    pub fn list_apps(&self) -> crate::client::fluent_builders::ListApps {
        crate::client::fluent_builders::ListApps::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSimulations`](crate::client::fluent_builders::ListSimulations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSimulations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSimulations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSimulations::set_max_results): <p>The maximum number of simulations to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSimulations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSimulations::set_next_token): <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    /// - On success, responds with [`ListSimulationsOutput`](crate::output::ListSimulationsOutput) with field(s):
    ///   - [`simulations(Option<Vec<SimulationMetadata>>)`](crate::output::ListSimulationsOutput::simulations): <p>The list of simulations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSimulationsOutput::next_token): <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    /// - On failure, responds with [`SdkError<ListSimulationsError>`](crate::error::ListSimulationsError)
    pub fn list_simulations(&self) -> crate::client::fluent_builders::ListSimulations {
        crate::client::fluent_builders::ListSimulations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The list of tags for the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartApp`](crate::client::fluent_builders::StartApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartApp::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartApp::set_client_token): <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::StartApp::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::StartApp::set_simulation): <p>The name of the simulation of the app.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::StartApp::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::StartApp::set_domain): <p>The name of the domain of the app.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartApp::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartApp::set_name): <p>The name of the app.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartApp::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartApp::set_description): <p>The description of the app.</p>
    ///   - [`launch_overrides(LaunchOverrides)`](crate::client::fluent_builders::StartApp::launch_overrides) / [`set_launch_overrides(Option<LaunchOverrides>)`](crate::client::fluent_builders::StartApp::set_launch_overrides): <p>Options that apply when the app starts. These optiAons override default behavior.</p>
    /// - On success, responds with [`StartAppOutput`](crate::output::StartAppOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::StartAppOutput::name): <p>The name of the app.</p>
    ///   - [`domain(Option<String>)`](crate::output::StartAppOutput::domain): <p>The name of the domain of the app.</p>
    ///   - [`simulation(Option<String>)`](crate::output::StartAppOutput::simulation): <p>The name of the simulation of the app.</p>
    /// - On failure, responds with [`SdkError<StartAppError>`](crate::error::StartAppError)
    pub fn start_app(&self) -> crate::client::fluent_builders::StartApp {
        crate::client::fluent_builders::StartApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartClock`](crate::client::fluent_builders::StartClock) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::StartClock::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::StartClock::set_simulation): <p>The name of the simulation.</p>
    /// - On success, responds with [`StartClockOutput`](crate::output::StartClockOutput)

    /// - On failure, responds with [`SdkError<StartClockError>`](crate::error::StartClockError)
    pub fn start_clock(&self) -> crate::client::fluent_builders::StartClock {
        crate::client::fluent_builders::StartClock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartSimulation`](crate::client::fluent_builders::StartSimulation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartSimulation::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartSimulation::set_client_token): <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartSimulation::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartSimulation::set_name): <p>The name of the simulation.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartSimulation::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartSimulation::set_description): <p>The description of the simulation.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::StartSimulation::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::StartSimulation::set_role_arn): <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    ///   - [`schema_s3_location(S3Location)`](crate::client::fluent_builders::StartSimulation::schema_s3_location) / [`set_schema_s3_location(Option<S3Location>)`](crate::client::fluent_builders::StartSimulation::set_schema_s3_location): <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    ///   - [`maximum_duration(impl Into<String>)`](crate::client::fluent_builders::StartSimulation::maximum_duration) / [`set_maximum_duration(Option<String>)`](crate::client::fluent_builders::StartSimulation::set_maximum_duration): <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartSimulation::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartSimulation::set_tags): <p>A list of tags for the simulation. For more information about tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// - On success, responds with [`StartSimulationOutput`](crate::output::StartSimulationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::StartSimulationOutput::arn): <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`execution_id(Option<String>)`](crate::output::StartSimulationOutput::execution_id): <p>A universally unique identifier (UUID) for this simulation.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::StartSimulationOutput::creation_time): <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    /// - On failure, responds with [`SdkError<StartSimulationError>`](crate::error::StartSimulationError)
    pub fn start_simulation(&self) -> crate::client::fluent_builders::StartSimulation {
        crate::client::fluent_builders::StartSimulation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopApp`](crate::client::fluent_builders::StopApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::StopApp::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::StopApp::set_simulation): <p>The name of the simulation of the app.</p>
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::StopApp::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::StopApp::set_domain): <p>The name of the domain of the app.</p>
    ///   - [`app(impl Into<String>)`](crate::client::fluent_builders::StopApp::app) / [`set_app(Option<String>)`](crate::client::fluent_builders::StopApp::set_app): <p>The name of the app.</p>
    /// - On success, responds with [`StopAppOutput`](crate::output::StopAppOutput)

    /// - On failure, responds with [`SdkError<StopAppError>`](crate::error::StopAppError)
    pub fn stop_app(&self) -> crate::client::fluent_builders::StopApp {
        crate::client::fluent_builders::StopApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopClock`](crate::client::fluent_builders::StopClock) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::StopClock::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::StopClock::set_simulation): <p>The name of the simulation.</p>
    /// - On success, responds with [`StopClockOutput`](crate::output::StopClockOutput)

    /// - On failure, responds with [`SdkError<StopClockError>`](crate::error::StopClockError)
    pub fn stop_clock(&self) -> crate::client::fluent_builders::StopClock {
        crate::client::fluent_builders::StopClock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopSimulation`](crate::client::fluent_builders::StopSimulation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`simulation(impl Into<String>)`](crate::client::fluent_builders::StopSimulation::simulation) / [`set_simulation(Option<String>)`](crate::client::fluent_builders::StopSimulation::set_simulation): <p>The name of the simulation.</p>
    /// - On success, responds with [`StopSimulationOutput`](crate::output::StopSimulationOutput)

    /// - On failure, responds with [`SdkError<StopSimulationError>`](crate::error::StopSimulationError)
    pub fn stop_simulation(&self) -> crate::client::fluent_builders::StopSimulation {
        crate::client::fluent_builders::StopSimulation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource that you want to add tags to. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A list of tags to apply to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource that you want to remove tags from. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of tag keys to remove from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
