// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `DeleteApp`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_app`](crate::client::Client::delete_app).
///
/// `ParseStrictResponse` impl for `DeleteApp`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteApp {
    _private: (),
}
impl DeleteApp {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::input::DeleteAppInput).
    pub fn builder() -> crate::input::delete_app_input::Builder {
        crate::input::delete_app_input::Builder::default()
    }
    /// Creates a new `DeleteApp` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteApp {
    type Output = std::result::Result<crate::output::DeleteAppOutput, crate::error::DeleteAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_error(response)
        } else {
            crate::operation_deser::parse_delete_app_response(response)
        }
    }
}

/// Operation shape for `DeleteSimulation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_simulation`](crate::client::Client::delete_simulation).
///
/// `ParseStrictResponse` impl for `DeleteSimulation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSimulation {
    _private: (),
}
impl DeleteSimulation {
    /// Creates a new builder-style object to manufacture [`DeleteSimulationInput`](crate::input::DeleteSimulationInput).
    pub fn builder() -> crate::input::delete_simulation_input::Builder {
        crate::input::delete_simulation_input::Builder::default()
    }
    /// Creates a new `DeleteSimulation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSimulation {
    type Output = std::result::Result<
        crate::output::DeleteSimulationOutput,
        crate::error::DeleteSimulationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_simulation_error(response)
        } else {
            crate::operation_deser::parse_delete_simulation_response(response)
        }
    }
}

/// Operation shape for `DescribeApp`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_app`](crate::client::Client::describe_app).
///
/// `ParseStrictResponse` impl for `DescribeApp`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeApp {
    _private: (),
}
impl DescribeApp {
    /// Creates a new builder-style object to manufacture [`DescribeAppInput`](crate::input::DescribeAppInput).
    pub fn builder() -> crate::input::describe_app_input::Builder {
        crate::input::describe_app_input::Builder::default()
    }
    /// Creates a new `DescribeApp` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeApp {
    type Output =
        std::result::Result<crate::output::DescribeAppOutput, crate::error::DescribeAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_app_error(response)
        } else {
            crate::operation_deser::parse_describe_app_response(response)
        }
    }
}

/// Operation shape for `DescribeSimulation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_simulation`](crate::client::Client::describe_simulation).
///
/// `ParseStrictResponse` impl for `DescribeSimulation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeSimulation {
    _private: (),
}
impl DescribeSimulation {
    /// Creates a new builder-style object to manufacture [`DescribeSimulationInput`](crate::input::DescribeSimulationInput).
    pub fn builder() -> crate::input::describe_simulation_input::Builder {
        crate::input::describe_simulation_input::Builder::default()
    }
    /// Creates a new `DescribeSimulation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSimulation {
    type Output = std::result::Result<
        crate::output::DescribeSimulationOutput,
        crate::error::DescribeSimulationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_simulation_error(response)
        } else {
            crate::operation_deser::parse_describe_simulation_response(response)
        }
    }
}

/// Operation shape for `ListApps`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_apps`](crate::client::Client::list_apps).
///
/// `ParseStrictResponse` impl for `ListApps`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListApps {
    _private: (),
}
impl ListApps {
    /// Creates a new builder-style object to manufacture [`ListAppsInput`](crate::input::ListAppsInput).
    pub fn builder() -> crate::input::list_apps_input::Builder {
        crate::input::list_apps_input::Builder::default()
    }
    /// Creates a new `ListApps` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListApps {
    type Output = std::result::Result<crate::output::ListAppsOutput, crate::error::ListAppsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_apps_error(response)
        } else {
            crate::operation_deser::parse_list_apps_response(response)
        }
    }
}

/// Operation shape for `ListSimulations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_simulations`](crate::client::Client::list_simulations).
///
/// `ParseStrictResponse` impl for `ListSimulations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSimulations {
    _private: (),
}
impl ListSimulations {
    /// Creates a new builder-style object to manufacture [`ListSimulationsInput`](crate::input::ListSimulationsInput).
    pub fn builder() -> crate::input::list_simulations_input::Builder {
        crate::input::list_simulations_input::Builder::default()
    }
    /// Creates a new `ListSimulations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSimulations {
    type Output = std::result::Result<
        crate::output::ListSimulationsOutput,
        crate::error::ListSimulationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_simulations_error(response)
        } else {
            crate::operation_deser::parse_list_simulations_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::Client::list_tags_for_resource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `StartApp`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_app`](crate::client::Client::start_app).
///
/// `ParseStrictResponse` impl for `StartApp`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartApp {
    _private: (),
}
impl StartApp {
    /// Creates a new builder-style object to manufacture [`StartAppInput`](crate::input::StartAppInput).
    pub fn builder() -> crate::input::start_app_input::Builder {
        crate::input::start_app_input::Builder::default()
    }
    /// Creates a new `StartApp` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartApp {
    type Output = std::result::Result<crate::output::StartAppOutput, crate::error::StartAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_app_error(response)
        } else {
            crate::operation_deser::parse_start_app_response(response)
        }
    }
}

/// Operation shape for `StartClock`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_clock`](crate::client::Client::start_clock).
///
/// `ParseStrictResponse` impl for `StartClock`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartClock {
    _private: (),
}
impl StartClock {
    /// Creates a new builder-style object to manufacture [`StartClockInput`](crate::input::StartClockInput).
    pub fn builder() -> crate::input::start_clock_input::Builder {
        crate::input::start_clock_input::Builder::default()
    }
    /// Creates a new `StartClock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartClock {
    type Output =
        std::result::Result<crate::output::StartClockOutput, crate::error::StartClockError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_clock_error(response)
        } else {
            crate::operation_deser::parse_start_clock_response(response)
        }
    }
}

/// Operation shape for `StartSimulation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_simulation`](crate::client::Client::start_simulation).
///
/// `ParseStrictResponse` impl for `StartSimulation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartSimulation {
    _private: (),
}
impl StartSimulation {
    /// Creates a new builder-style object to manufacture [`StartSimulationInput`](crate::input::StartSimulationInput).
    pub fn builder() -> crate::input::start_simulation_input::Builder {
        crate::input::start_simulation_input::Builder::default()
    }
    /// Creates a new `StartSimulation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartSimulation {
    type Output = std::result::Result<
        crate::output::StartSimulationOutput,
        crate::error::StartSimulationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_simulation_error(response)
        } else {
            crate::operation_deser::parse_start_simulation_response(response)
        }
    }
}

/// Operation shape for `StopApp`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_app`](crate::client::Client::stop_app).
///
/// `ParseStrictResponse` impl for `StopApp`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopApp {
    _private: (),
}
impl StopApp {
    /// Creates a new builder-style object to manufacture [`StopAppInput`](crate::input::StopAppInput).
    pub fn builder() -> crate::input::stop_app_input::Builder {
        crate::input::stop_app_input::Builder::default()
    }
    /// Creates a new `StopApp` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopApp {
    type Output = std::result::Result<crate::output::StopAppOutput, crate::error::StopAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_app_error(response)
        } else {
            crate::operation_deser::parse_stop_app_response(response)
        }
    }
}

/// Operation shape for `StopClock`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_clock`](crate::client::Client::stop_clock).
///
/// `ParseStrictResponse` impl for `StopClock`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopClock {
    _private: (),
}
impl StopClock {
    /// Creates a new builder-style object to manufacture [`StopClockInput`](crate::input::StopClockInput).
    pub fn builder() -> crate::input::stop_clock_input::Builder {
        crate::input::stop_clock_input::Builder::default()
    }
    /// Creates a new `StopClock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopClock {
    type Output = std::result::Result<crate::output::StopClockOutput, crate::error::StopClockError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_clock_error(response)
        } else {
            crate::operation_deser::parse_stop_clock_response(response)
        }
    }
}

/// Operation shape for `StopSimulation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_simulation`](crate::client::Client::stop_simulation).
///
/// `ParseStrictResponse` impl for `StopSimulation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopSimulation {
    _private: (),
}
impl StopSimulation {
    /// Creates a new builder-style object to manufacture [`StopSimulationInput`](crate::input::StopSimulationInput).
    pub fn builder() -> crate::input::stop_simulation_input::Builder {
        crate::input::stop_simulation_input::Builder::default()
    }
    /// Creates a new `StopSimulation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopSimulation {
    type Output =
        std::result::Result<crate::output::StopSimulationOutput, crate::error::StopSimulationError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_simulation_error(response)
        } else {
            crate::operation_deser::parse_stop_simulation_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
