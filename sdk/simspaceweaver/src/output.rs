// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopClockOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopClockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopClockOutput`](crate::output::StopClockOutput).
pub mod stop_clock_output {

    /// A builder for [`StopClockOutput`](crate::output::StopClockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopClockOutput`](crate::output::StopClockOutput).
        pub fn build(self) -> crate::output::StopClockOutput {
            crate::output::StopClockOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StopClockOutput {
    /// Creates a new builder-style object to manufacture [`StopClockOutput`](crate::output::StopClockOutput).
    pub fn builder() -> crate::output::stop_clock_output::Builder {
        crate::output::stop_clock_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopAppOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopAppOutput`](crate::output::StopAppOutput).
pub mod stop_app_output {

    /// A builder for [`StopAppOutput`](crate::output::StopAppOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopAppOutput`](crate::output::StopAppOutput).
        pub fn build(self) -> crate::output::StopAppOutput {
            crate::output::StopAppOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StopAppOutput {
    /// Creates a new builder-style object to manufacture [`StopAppOutput`](crate::output::StopAppOutput).
    pub fn builder() -> crate::output::stop_app_output::Builder {
        crate::output::stop_app_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartClockOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartClockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartClockOutput`](crate::output::StartClockOutput).
pub mod start_clock_output {

    /// A builder for [`StartClockOutput`](crate::output::StartClockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartClockOutput`](crate::output::StartClockOutput).
        pub fn build(self) -> crate::output::StartClockOutput {
            crate::output::StartClockOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StartClockOutput {
    /// Creates a new builder-style object to manufacture [`StartClockOutput`](crate::output::StartClockOutput).
    pub fn builder() -> crate::output::start_clock_output::Builder {
        crate::output::start_clock_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartAppOutput {
    /// <p>The name of the app.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the domain of the app.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The name of the simulation of the app.</p>
    #[doc(hidden)]
    pub simulation: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartAppOutput {
    /// <p>The name of the app.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(&self) -> std::option::Option<&str> {
        self.simulation.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartAppOutput`](crate::output::StartAppOutput).
pub mod start_app_output {

    /// A builder for [`StartAppOutput`](crate::output::StartAppOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) simulation: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the app.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the app.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The name of the domain of the app.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        /// <p>The name of the domain of the app.</p>
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>The name of the simulation of the app.</p>
        pub fn simulation(mut self, input: impl Into<std::string::String>) -> Self {
            self.simulation = Some(input.into());
            self
        }
        /// <p>The name of the simulation of the app.</p>
        pub fn set_simulation(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.simulation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartAppOutput`](crate::output::StartAppOutput).
        pub fn build(self) -> crate::output::StartAppOutput {
            crate::output::StartAppOutput {
                name: self.name,
                domain: self.domain,
                simulation: self.simulation,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartAppOutput {
    /// Creates a new builder-style object to manufacture [`StartAppOutput`](crate::output::StartAppOutput).
    pub fn builder() -> crate::output::start_app_output::Builder {
        crate::output::start_app_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAppsOutput {
    /// <p>The list of apps for the given simulation and domain.</p>
    #[doc(hidden)]
    pub apps: std::option::Option<std::vec::Vec<crate::model::SimulationAppMetadata>>,
    /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAppsOutput {
    /// <p>The list of apps for the given simulation and domain.</p>
    pub fn apps(&self) -> std::option::Option<&[crate::model::SimulationAppMetadata]> {
        self.apps.as_deref()
    }
    /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAppsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAppsOutput`](crate::output::ListAppsOutput).
pub mod list_apps_output {

    /// A builder for [`ListAppsOutput`](crate::output::ListAppsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apps: std::option::Option<std::vec::Vec<crate::model::SimulationAppMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `apps`.
        ///
        /// To override the contents of this collection use [`set_apps`](Self::set_apps).
        ///
        /// <p>The list of apps for the given simulation and domain.</p>
        pub fn apps(mut self, input: crate::model::SimulationAppMetadata) -> Self {
            let mut v = self.apps.unwrap_or_default();
            v.push(input);
            self.apps = Some(v);
            self
        }
        /// <p>The list of apps for the given simulation and domain.</p>
        pub fn set_apps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SimulationAppMetadata>>,
        ) -> Self {
            self.apps = input;
            self
        }
        /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAppsOutput`](crate::output::ListAppsOutput).
        pub fn build(self) -> crate::output::ListAppsOutput {
            crate::output::ListAppsOutput {
                apps: self.apps,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAppsOutput {
    /// Creates a new builder-style object to manufacture [`ListAppsOutput`](crate::output::ListAppsOutput).
    pub fn builder() -> crate::output::list_apps_output::Builder {
        crate::output::list_apps_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAppOutput {
    /// <p>The name of the app.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the simulation of the app.</p>
    #[doc(hidden)]
    pub simulation: std::option::Option<std::string::String>,
    /// <p>The name of the domain of the app.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The current lifecycle state of the custom app.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::SimulationAppStatus>,
    /// <p>The desired lifecycle state of the custom app.</p>
    #[doc(hidden)]
    pub target_status: std::option::Option<crate::model::SimulationAppTargetStatus>,
    /// <p>Options that apply when the app starts. These optiAons override default behavior.</p>
    #[doc(hidden)]
    pub launch_overrides: std::option::Option<crate::model::LaunchOverrides>,
    /// <p>The description of the app.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.</p>
    #[doc(hidden)]
    pub endpoint_info: std::option::Option<crate::model::SimulationAppEndpointInfo>,
    _request_id: Option<String>,
}
impl DescribeAppOutput {
    /// <p>The name of the app.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(&self) -> std::option::Option<&str> {
        self.simulation.as_deref()
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The current lifecycle state of the custom app.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::SimulationAppStatus> {
        self.status.as_ref()
    }
    /// <p>The desired lifecycle state of the custom app.</p>
    pub fn target_status(&self) -> std::option::Option<&crate::model::SimulationAppTargetStatus> {
        self.target_status.as_ref()
    }
    /// <p>Options that apply when the app starts. These optiAons override default behavior.</p>
    pub fn launch_overrides(&self) -> std::option::Option<&crate::model::LaunchOverrides> {
        self.launch_overrides.as_ref()
    }
    /// <p>The description of the app.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.</p>
    pub fn endpoint_info(&self) -> std::option::Option<&crate::model::SimulationAppEndpointInfo> {
        self.endpoint_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAppOutput`](crate::output::DescribeAppOutput).
pub mod describe_app_output {

    /// A builder for [`DescribeAppOutput`](crate::output::DescribeAppOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) simulation: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::SimulationAppStatus>,
        pub(crate) target_status: std::option::Option<crate::model::SimulationAppTargetStatus>,
        pub(crate) launch_overrides: std::option::Option<crate::model::LaunchOverrides>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) endpoint_info: std::option::Option<crate::model::SimulationAppEndpointInfo>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the app.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the app.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The name of the simulation of the app.</p>
        pub fn simulation(mut self, input: impl Into<std::string::String>) -> Self {
            self.simulation = Some(input.into());
            self
        }
        /// <p>The name of the simulation of the app.</p>
        pub fn set_simulation(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.simulation = input;
            self
        }
        /// <p>The name of the domain of the app.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        /// <p>The name of the domain of the app.</p>
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>The current lifecycle state of the custom app.</p>
        pub fn status(mut self, input: crate::model::SimulationAppStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current lifecycle state of the custom app.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::SimulationAppStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The desired lifecycle state of the custom app.</p>
        pub fn target_status(mut self, input: crate::model::SimulationAppTargetStatus) -> Self {
            self.target_status = Some(input);
            self
        }
        /// <p>The desired lifecycle state of the custom app.</p>
        pub fn set_target_status(
            mut self,
            input: std::option::Option<crate::model::SimulationAppTargetStatus>,
        ) -> Self {
            self.target_status = input;
            self
        }
        /// <p>Options that apply when the app starts. These optiAons override default behavior.</p>
        pub fn launch_overrides(mut self, input: crate::model::LaunchOverrides) -> Self {
            self.launch_overrides = Some(input);
            self
        }
        /// <p>Options that apply when the app starts. These optiAons override default behavior.</p>
        pub fn set_launch_overrides(
            mut self,
            input: std::option::Option<crate::model::LaunchOverrides>,
        ) -> Self {
            self.launch_overrides = input;
            self
        }
        /// <p>The description of the app.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the app.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.</p>
        pub fn endpoint_info(mut self, input: crate::model::SimulationAppEndpointInfo) -> Self {
            self.endpoint_info = Some(input);
            self
        }
        /// <p>Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.</p>
        pub fn set_endpoint_info(
            mut self,
            input: std::option::Option<crate::model::SimulationAppEndpointInfo>,
        ) -> Self {
            self.endpoint_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAppOutput`](crate::output::DescribeAppOutput).
        pub fn build(self) -> crate::output::DescribeAppOutput {
            crate::output::DescribeAppOutput {
                name: self.name,
                simulation: self.simulation,
                domain: self.domain,
                status: self.status,
                target_status: self.target_status,
                launch_overrides: self.launch_overrides,
                description: self.description,
                endpoint_info: self.endpoint_info,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAppOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAppOutput`](crate::output::DescribeAppOutput).
    pub fn builder() -> crate::output::describe_app_output::Builder {
        crate::output::describe_app_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAppOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAppOutput`](crate::output::DeleteAppOutput).
pub mod delete_app_output {

    /// A builder for [`DeleteAppOutput`](crate::output::DeleteAppOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAppOutput`](crate::output::DeleteAppOutput).
        pub fn build(self) -> crate::output::DeleteAppOutput {
            crate::output::DeleteAppOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAppOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppOutput`](crate::output::DeleteAppOutput).
    pub fn builder() -> crate::output::delete_app_output::Builder {
        crate::output::delete_app_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSimulationsOutput {
    /// <p>The list of simulations.</p>
    #[doc(hidden)]
    pub simulations: std::option::Option<std::vec::Vec<crate::model::SimulationMetadata>>,
    /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSimulationsOutput {
    /// <p>The list of simulations.</p>
    pub fn simulations(&self) -> std::option::Option<&[crate::model::SimulationMetadata]> {
        self.simulations.as_deref()
    }
    /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSimulationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSimulationsOutput`](crate::output::ListSimulationsOutput).
pub mod list_simulations_output {

    /// A builder for [`ListSimulationsOutput`](crate::output::ListSimulationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) simulations:
            std::option::Option<std::vec::Vec<crate::model::SimulationMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `simulations`.
        ///
        /// To override the contents of this collection use [`set_simulations`](Self::set_simulations).
        ///
        /// <p>The list of simulations.</p>
        pub fn simulations(mut self, input: crate::model::SimulationMetadata) -> Self {
            let mut v = self.simulations.unwrap_or_default();
            v.push(input);
            self.simulations = Some(v);
            self
        }
        /// <p>The list of simulations.</p>
        pub fn set_simulations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SimulationMetadata>>,
        ) -> Self {
            self.simulations = input;
            self
        }
        /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If SimSpace Weaver returns <code>nextToken</code>, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, you receive an <i>HTTP 400 ValidationException</i> error.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSimulationsOutput`](crate::output::ListSimulationsOutput).
        pub fn build(self) -> crate::output::ListSimulationsOutput {
            crate::output::ListSimulationsOutput {
                simulations: self.simulations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSimulationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSimulationsOutput`](crate::output::ListSimulationsOutput).
    pub fn builder() -> crate::output::list_simulations_output::Builder {
        crate::output::list_simulations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartSimulationOutput {
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartSimulationOutput {
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartSimulationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartSimulationOutput`](crate::output::StartSimulationOutput).
pub mod start_simulation_output {

    /// A builder for [`StartSimulationOutput`](crate::output::StartSimulationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) execution_id: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>A universally unique identifier (UUID) for this simulation.</p>
        pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.execution_id = Some(input.into());
            self
        }
        /// <p>A universally unique identifier (UUID) for this simulation.</p>
        pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.execution_id = input;
            self
        }
        /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartSimulationOutput`](crate::output::StartSimulationOutput).
        pub fn build(self) -> crate::output::StartSimulationOutput {
            crate::output::StartSimulationOutput {
                arn: self.arn,
                execution_id: self.execution_id,
                creation_time: self.creation_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartSimulationOutput {
    /// Creates a new builder-style object to manufacture [`StartSimulationOutput`](crate::output::StartSimulationOutput).
    pub fn builder() -> crate::output::start_simulation_output::Builder {
        crate::output::start_simulation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSimulationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSimulationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSimulationOutput`](crate::output::DeleteSimulationOutput).
pub mod delete_simulation_output {

    /// A builder for [`DeleteSimulationOutput`](crate::output::DeleteSimulationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSimulationOutput`](crate::output::DeleteSimulationOutput).
        pub fn build(self) -> crate::output::DeleteSimulationOutput {
            crate::output::DeleteSimulationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSimulationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSimulationOutput`](crate::output::DeleteSimulationOutput).
    pub fn builder() -> crate::output::delete_simulation_output::Builder {
        crate::output::delete_simulation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopSimulationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopSimulationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopSimulationOutput`](crate::output::StopSimulationOutput).
pub mod stop_simulation_output {

    /// A builder for [`StopSimulationOutput`](crate::output::StopSimulationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopSimulationOutput`](crate::output::StopSimulationOutput).
        pub fn build(self) -> crate::output::StopSimulationOutput {
            crate::output::StopSimulationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StopSimulationOutput {
    /// Creates a new builder-style object to manufacture [`StopSimulationOutput`](crate::output::StopSimulationOutput).
    pub fn builder() -> crate::output::stop_simulation_output::Builder {
        crate::output::stop_simulation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSimulationOutput {
    /// <p>The name of the simulation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The description of the simulation.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current lifecycle state of the simulation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::SimulationStatus>,
    /// <p>The desired lifecycle state of the simulation.</p>
    #[doc(hidden)]
    pub target_status: std::option::Option<crate::model::SimulationTargetStatus>,
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    #[doc(hidden)]
    pub schema_s3_location: std::option::Option<crate::model::S3Location>,
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    #[doc(hidden)]
    pub schema_error: std::option::Option<std::string::String>,
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    #[doc(hidden)]
    pub live_simulation_state: std::option::Option<crate::model::LiveSimulationState>,
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    #[doc(hidden)]
    pub maximum_duration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSimulationOutput {
    /// <p>The name of the simulation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description of the simulation.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current lifecycle state of the simulation.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::SimulationStatus> {
        self.status.as_ref()
    }
    /// <p>The desired lifecycle state of the simulation.</p>
    pub fn target_status(&self) -> std::option::Option<&crate::model::SimulationTargetStatus> {
        self.target_status.as_ref()
    }
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    pub fn schema_s3_location(&self) -> std::option::Option<&crate::model::S3Location> {
        self.schema_s3_location.as_ref()
    }
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    pub fn schema_error(&self) -> std::option::Option<&str> {
        self.schema_error.as_deref()
    }
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    pub fn live_simulation_state(&self) -> std::option::Option<&crate::model::LiveSimulationState> {
        self.live_simulation_state.as_ref()
    }
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    pub fn maximum_duration(&self) -> std::option::Option<&str> {
        self.maximum_duration.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSimulationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSimulationOutput`](crate::output::DescribeSimulationOutput).
pub mod describe_simulation_output {

    /// A builder for [`DescribeSimulationOutput`](crate::output::DescribeSimulationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) execution_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::SimulationStatus>,
        pub(crate) target_status: std::option::Option<crate::model::SimulationTargetStatus>,
        pub(crate) schema_s3_location: std::option::Option<crate::model::S3Location>,
        pub(crate) schema_error: std::option::Option<std::string::String>,
        pub(crate) logging_configuration: std::option::Option<crate::model::LoggingConfiguration>,
        pub(crate) live_simulation_state: std::option::Option<crate::model::LiveSimulationState>,
        pub(crate) maximum_duration: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the simulation.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the simulation.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>A universally unique identifier (UUID) for this simulation.</p>
        pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.execution_id = Some(input.into());
            self
        }
        /// <p>A universally unique identifier (UUID) for this simulation.</p>
        pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.execution_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The description of the simulation.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the simulation.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The current lifecycle state of the simulation.</p>
        pub fn status(mut self, input: crate::model::SimulationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current lifecycle state of the simulation.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::SimulationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The desired lifecycle state of the simulation.</p>
        pub fn target_status(mut self, input: crate::model::SimulationTargetStatus) -> Self {
            self.target_status = Some(input);
            self
        }
        /// <p>The desired lifecycle state of the simulation.</p>
        pub fn set_target_status(
            mut self,
            input: std::option::Option<crate::model::SimulationTargetStatus>,
        ) -> Self {
            self.target_status = input;
            self
        }
        /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
        pub fn schema_s3_location(mut self, input: crate::model::S3Location) -> Self {
            self.schema_s3_location = Some(input);
            self
        }
        /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
        pub fn set_schema_s3_location(
            mut self,
            input: std::option::Option<crate::model::S3Location>,
        ) -> Self {
            self.schema_s3_location = input;
            self
        }
        /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
        pub fn schema_error(mut self, input: impl Into<std::string::String>) -> Self {
            self.schema_error = Some(input.into());
            self
        }
        /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
        pub fn set_schema_error(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schema_error = input;
            self
        }
        /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
        pub fn logging_configuration(mut self, input: crate::model::LoggingConfiguration) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::LoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        /// <p>A collection of additional state information, such as domain and clock configuration.</p>
        pub fn live_simulation_state(mut self, input: crate::model::LiveSimulationState) -> Self {
            self.live_simulation_state = Some(input);
            self
        }
        /// <p>A collection of additional state information, such as domain and clock configuration.</p>
        pub fn set_live_simulation_state(
            mut self,
            input: std::option::Option<crate::model::LiveSimulationState>,
        ) -> Self {
            self.live_simulation_state = input;
            self
        }
        /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
        pub fn maximum_duration(mut self, input: impl Into<std::string::String>) -> Self {
            self.maximum_duration = Some(input.into());
            self
        }
        /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
        pub fn set_maximum_duration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.maximum_duration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSimulationOutput`](crate::output::DescribeSimulationOutput).
        pub fn build(self) -> crate::output::DescribeSimulationOutput {
            crate::output::DescribeSimulationOutput {
                name: self.name,
                execution_id: self.execution_id,
                arn: self.arn,
                description: self.description,
                role_arn: self.role_arn,
                creation_time: self.creation_time,
                status: self.status,
                target_status: self.target_status,
                schema_s3_location: self.schema_s3_location,
                schema_error: self.schema_error,
                logging_configuration: self.logging_configuration,
                live_simulation_state: self.live_simulation_state,
                maximum_duration: self.maximum_duration,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSimulationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSimulationOutput`](crate::output::DescribeSimulationOutput).
    pub fn builder() -> crate::output::describe_simulation_output::Builder {
        crate::output::describe_simulation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tags for the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The list of tags for the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tags for the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The list of tags for the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}
