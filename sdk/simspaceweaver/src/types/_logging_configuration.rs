// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logging configuration for a simulation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingConfiguration {
    /// <p>A list of the locations where SimSpace Weaver sends simulation log data.</p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::types::LogDestination>>,
}
impl LoggingConfiguration {
    /// <p>A list of the locations where SimSpace Weaver sends simulation log data.</p>
    pub fn destinations(&self) -> std::option::Option<&[crate::types::LogDestination]> {
        self.destinations.as_deref()
    }
}
impl LoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn builder() -> crate::types::builders::LoggingConfigurationBuilder {
        crate::types::builders::LoggingConfigurationBuilder::default()
    }
}

/// A builder for [`LoggingConfiguration`](crate::types::LoggingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingConfigurationBuilder {
    pub(crate) destinations: std::option::Option<std::vec::Vec<crate::types::LogDestination>>,
}
impl LoggingConfigurationBuilder {
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>A list of the locations where SimSpace Weaver sends simulation log data.</p>
    pub fn destinations(mut self, input: crate::types::LogDestination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = Some(v);
        self
    }
    /// <p>A list of the locations where SimSpace Weaver sends simulation log data.</p>
    pub fn set_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LogDestination>>,
    ) -> Self {
        self.destinations = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn build(self) -> crate::types::LoggingConfiguration {
        crate::types::LoggingConfiguration {
            destinations: self.destinations,
        }
    }
}
