// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the network endpoint that you can use to connect to your custom or service app.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimulationAppEndpointInfo {
    /// <p>The IP address of the app. SimSpace Weaver dynamically assigns this IP address when the app starts.</p>
    #[doc(hidden)]
    pub address: std::option::Option<std::string::String>,
    /// <p>The inbound TCP/UDP port numbers of the app. The combination of an IP address and a port number form a network endpoint.</p>
    #[doc(hidden)]
    pub ingress_port_mappings:
        std::option::Option<std::vec::Vec<crate::types::SimulationAppPortMapping>>,
}
impl SimulationAppEndpointInfo {
    /// <p>The IP address of the app. SimSpace Weaver dynamically assigns this IP address when the app starts.</p>
    pub fn address(&self) -> std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The inbound TCP/UDP port numbers of the app. The combination of an IP address and a port number form a network endpoint.</p>
    pub fn ingress_port_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::SimulationAppPortMapping]> {
        self.ingress_port_mappings.as_deref()
    }
}
impl SimulationAppEndpointInfo {
    /// Creates a new builder-style object to manufacture [`SimulationAppEndpointInfo`](crate::types::SimulationAppEndpointInfo).
    pub fn builder() -> crate::types::builders::SimulationAppEndpointInfoBuilder {
        crate::types::builders::SimulationAppEndpointInfoBuilder::default()
    }
}

/// A builder for [`SimulationAppEndpointInfo`](crate::types::SimulationAppEndpointInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimulationAppEndpointInfoBuilder {
    pub(crate) address: std::option::Option<std::string::String>,
    pub(crate) ingress_port_mappings:
        std::option::Option<std::vec::Vec<crate::types::SimulationAppPortMapping>>,
}
impl SimulationAppEndpointInfoBuilder {
    /// <p>The IP address of the app. SimSpace Weaver dynamically assigns this IP address when the app starts.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.address = Some(input.into());
        self
    }
    /// <p>The IP address of the app. SimSpace Weaver dynamically assigns this IP address when the app starts.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// Appends an item to `ingress_port_mappings`.
    ///
    /// To override the contents of this collection use [`set_ingress_port_mappings`](Self::set_ingress_port_mappings).
    ///
    /// <p>The inbound TCP/UDP port numbers of the app. The combination of an IP address and a port number form a network endpoint.</p>
    pub fn ingress_port_mappings(mut self, input: crate::types::SimulationAppPortMapping) -> Self {
        let mut v = self.ingress_port_mappings.unwrap_or_default();
        v.push(input);
        self.ingress_port_mappings = Some(v);
        self
    }
    /// <p>The inbound TCP/UDP port numbers of the app. The combination of an IP address and a port number form a network endpoint.</p>
    pub fn set_ingress_port_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SimulationAppPortMapping>>,
    ) -> Self {
        self.ingress_port_mappings = input;
        self
    }
    /// Consumes the builder and constructs a [`SimulationAppEndpointInfo`](crate::types::SimulationAppEndpointInfo).
    pub fn build(self) -> crate::types::SimulationAppEndpointInfo {
        crate::types::SimulationAppEndpointInfo {
            address: self.address,
            ingress_port_mappings: self.ingress_port_mappings,
        }
    }
}
