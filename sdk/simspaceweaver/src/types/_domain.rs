// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of app instances that run the same executable app code and have the same launch options and commands.</p>
/// <p>For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html">Key concepts</a> in the <i>Amazon Web Services SimSpace Weaver User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Domain {
    /// <p>The name of the domain.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of lifecycle management for apps in the domain. This value indicates whether apps in this domain are <i>managed</i> (SimSpace Weaver starts and stops the apps) or <i>unmanaged</i> (you must start and stop the apps).</p>
    /// <p class="title"> <b>Lifecycle types</b> </p>
    /// <ul>
    /// <li> <p> <code>PerWorker</code> – Managed: SimSpace Weaver starts 1 app on each worker</p> </li>
    /// <li> <p> <code>BySpatialSubdivision</code> – Managed: SimSpace Weaver starts 1 app for each spatial partition</p> </li>
    /// <li> <p> <code>ByRequest</code> – Unmanaged: You use the <b>StartApp</b> API to start the apps and use the <b>StopApp</b> API to stop the apps.</p> </li>
    /// </ul> <note>
    /// <p>The lifecycle types will change when the service is released for general availability (GA).</p>
    /// </note>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::LifecycleManagementStrategy>,
}
impl Domain {
    /// <p>The name of the domain.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of lifecycle management for apps in the domain. This value indicates whether apps in this domain are <i>managed</i> (SimSpace Weaver starts and stops the apps) or <i>unmanaged</i> (you must start and stop the apps).</p>
    /// <p class="title"> <b>Lifecycle types</b> </p>
    /// <ul>
    /// <li> <p> <code>PerWorker</code> – Managed: SimSpace Weaver starts 1 app on each worker</p> </li>
    /// <li> <p> <code>BySpatialSubdivision</code> – Managed: SimSpace Weaver starts 1 app for each spatial partition</p> </li>
    /// <li> <p> <code>ByRequest</code> – Unmanaged: You use the <b>StartApp</b> API to start the apps and use the <b>StopApp</b> API to stop the apps.</p> </li>
    /// </ul> <note>
    /// <p>The lifecycle types will change when the service is released for general availability (GA).</p>
    /// </note>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::LifecycleManagementStrategy> {
        self.lifecycle.as_ref()
    }
}
impl Domain {
    /// Creates a new builder-style object to manufacture [`Domain`](crate::types::Domain).
    pub fn builder() -> crate::types::builders::DomainBuilder {
        crate::types::builders::DomainBuilder::default()
    }
}

/// A builder for [`Domain`](crate::types::Domain).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) lifecycle: std::option::Option<crate::types::LifecycleManagementStrategy>,
}
impl DomainBuilder {
    /// <p>The name of the domain.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of lifecycle management for apps in the domain. This value indicates whether apps in this domain are <i>managed</i> (SimSpace Weaver starts and stops the apps) or <i>unmanaged</i> (you must start and stop the apps).</p>
    /// <p class="title"> <b>Lifecycle types</b> </p>
    /// <ul>
    /// <li> <p> <code>PerWorker</code> – Managed: SimSpace Weaver starts 1 app on each worker</p> </li>
    /// <li> <p> <code>BySpatialSubdivision</code> – Managed: SimSpace Weaver starts 1 app for each spatial partition</p> </li>
    /// <li> <p> <code>ByRequest</code> – Unmanaged: You use the <b>StartApp</b> API to start the apps and use the <b>StopApp</b> API to stop the apps.</p> </li>
    /// </ul> <note>
    /// <p>The lifecycle types will change when the service is released for general availability (GA).</p>
    /// </note>
    pub fn lifecycle(mut self, input: crate::types::LifecycleManagementStrategy) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>The type of lifecycle management for apps in the domain. This value indicates whether apps in this domain are <i>managed</i> (SimSpace Weaver starts and stops the apps) or <i>unmanaged</i> (you must start and stop the apps).</p>
    /// <p class="title"> <b>Lifecycle types</b> </p>
    /// <ul>
    /// <li> <p> <code>PerWorker</code> – Managed: SimSpace Weaver starts 1 app on each worker</p> </li>
    /// <li> <p> <code>BySpatialSubdivision</code> – Managed: SimSpace Weaver starts 1 app for each spatial partition</p> </li>
    /// <li> <p> <code>ByRequest</code> – Unmanaged: You use the <b>StartApp</b> API to start the apps and use the <b>StopApp</b> API to stop the apps.</p> </li>
    /// </ul> <note>
    /// <p>The lifecycle types will change when the service is released for general availability (GA).</p>
    /// </note>
    pub fn set_lifecycle(
        mut self,
        input: std::option::Option<crate::types::LifecycleManagementStrategy>,
    ) -> Self {
        self.lifecycle = input;
        self
    }
    /// Consumes the builder and constructs a [`Domain`](crate::types::Domain).
    pub fn build(self) -> crate::types::Domain {
        crate::types::Domain {
            name: self.name,
            lifecycle: self.lifecycle,
        }
    }
}
