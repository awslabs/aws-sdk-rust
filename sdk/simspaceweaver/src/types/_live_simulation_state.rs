// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of additional state information, such as domain and clock configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveSimulationState {
    /// <p>A list of domains for the simulation. For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html#what-is_key-concepts_domains">Key concepts: Domains</a> in the <i>SimSpace Weaver User Guide</i>.</p>
    pub domains: ::std::option::Option<::std::vec::Vec<crate::types::Domain>>,
    /// <p>A list of simulation clocks.</p> <note>
    /// <p>At this time, a simulation has only one clock.</p>
    /// </note>
    pub clocks: ::std::option::Option<::std::vec::Vec<crate::types::SimulationClock>>,
}
impl LiveSimulationState {
    /// <p>A list of domains for the simulation. For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html#what-is_key-concepts_domains">Key concepts: Domains</a> in the <i>SimSpace Weaver User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domains.is_none()`.
    pub fn domains(&self) -> &[crate::types::Domain] {
        self.domains.as_deref().unwrap_or_default()
    }
    /// <p>A list of simulation clocks.</p> <note>
    /// <p>At this time, a simulation has only one clock.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.clocks.is_none()`.
    pub fn clocks(&self) -> &[crate::types::SimulationClock] {
        self.clocks.as_deref().unwrap_or_default()
    }
}
impl LiveSimulationState {
    /// Creates a new builder-style object to manufacture [`LiveSimulationState`](crate::types::LiveSimulationState).
    pub fn builder() -> crate::types::builders::LiveSimulationStateBuilder {
        crate::types::builders::LiveSimulationStateBuilder::default()
    }
}

/// A builder for [`LiveSimulationState`](crate::types::LiveSimulationState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LiveSimulationStateBuilder {
    pub(crate) domains: ::std::option::Option<::std::vec::Vec<crate::types::Domain>>,
    pub(crate) clocks: ::std::option::Option<::std::vec::Vec<crate::types::SimulationClock>>,
}
impl LiveSimulationStateBuilder {
    /// Appends an item to `domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>A list of domains for the simulation. For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html#what-is_key-concepts_domains">Key concepts: Domains</a> in the <i>SimSpace Weaver User Guide</i>.</p>
    pub fn domains(mut self, input: crate::types::Domain) -> Self {
        let mut v = self.domains.unwrap_or_default();
        v.push(input);
        self.domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of domains for the simulation. For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html#what-is_key-concepts_domains">Key concepts: Domains</a> in the <i>SimSpace Weaver User Guide</i>.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Domain>>) -> Self {
        self.domains = input;
        self
    }
    /// <p>A list of domains for the simulation. For more information about domains, see <a href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/what-is_key-concepts.html#what-is_key-concepts_domains">Key concepts: Domains</a> in the <i>SimSpace Weaver User Guide</i>.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Domain>> {
        &self.domains
    }
    /// Appends an item to `clocks`.
    ///
    /// To override the contents of this collection use [`set_clocks`](Self::set_clocks).
    ///
    /// <p>A list of simulation clocks.</p> <note>
    /// <p>At this time, a simulation has only one clock.</p>
    /// </note>
    pub fn clocks(mut self, input: crate::types::SimulationClock) -> Self {
        let mut v = self.clocks.unwrap_or_default();
        v.push(input);
        self.clocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of simulation clocks.</p> <note>
    /// <p>At this time, a simulation has only one clock.</p>
    /// </note>
    pub fn set_clocks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SimulationClock>>) -> Self {
        self.clocks = input;
        self
    }
    /// <p>A list of simulation clocks.</p> <note>
    /// <p>At this time, a simulation has only one clock.</p>
    /// </note>
    pub fn get_clocks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SimulationClock>> {
        &self.clocks
    }
    /// Consumes the builder and constructs a [`LiveSimulationState`](crate::types::LiveSimulationState).
    pub fn build(self) -> crate::types::LiveSimulationState {
        crate::types::LiveSimulationState {
            domains: self.domains,
            clocks: self.clocks,
        }
    }
}
