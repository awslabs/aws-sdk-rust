// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options that apply when the app starts. These options override default behavior.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchOverrides {
    /// <p>App launch commands and command line parameters that override the launch command configured in the simulation schema.</p>
    pub launch_commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LaunchOverrides {
    /// <p>App launch commands and command line parameters that override the launch command configured in the simulation schema.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.launch_commands.is_none()`.
    pub fn launch_commands(&self) -> &[::std::string::String] {
        self.launch_commands.as_deref().unwrap_or_default()
    }
}
impl LaunchOverrides {
    /// Creates a new builder-style object to manufacture [`LaunchOverrides`](crate::types::LaunchOverrides).
    pub fn builder() -> crate::types::builders::LaunchOverridesBuilder {
        crate::types::builders::LaunchOverridesBuilder::default()
    }
}

/// A builder for [`LaunchOverrides`](crate::types::LaunchOverrides).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchOverridesBuilder {
    pub(crate) launch_commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LaunchOverridesBuilder {
    /// Appends an item to `launch_commands`.
    ///
    /// To override the contents of this collection use [`set_launch_commands`](Self::set_launch_commands).
    ///
    /// <p>App launch commands and command line parameters that override the launch command configured in the simulation schema.</p>
    pub fn launch_commands(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.launch_commands.unwrap_or_default();
        v.push(input.into());
        self.launch_commands = ::std::option::Option::Some(v);
        self
    }
    /// <p>App launch commands and command line parameters that override the launch command configured in the simulation schema.</p>
    pub fn set_launch_commands(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.launch_commands = input;
        self
    }
    /// <p>App launch commands and command line parameters that override the launch command configured in the simulation schema.</p>
    pub fn get_launch_commands(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.launch_commands
    }
    /// Consumes the builder and constructs a [`LaunchOverrides`](crate::types::LaunchOverrides).
    pub fn build(self) -> crate::types::LaunchOverrides {
        crate::types::LaunchOverrides {
            launch_commands: self.launch_commands,
        }
    }
}
