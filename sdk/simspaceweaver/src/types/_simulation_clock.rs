// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Status information about the simulation clock.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimulationClock {
    /// <p>The current status of the simulation clock.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ClockStatus>,
    /// <p>The desired status of the simulation clock.</p>
    #[doc(hidden)]
    pub target_status: std::option::Option<crate::types::ClockTargetStatus>,
}
impl SimulationClock {
    /// <p>The current status of the simulation clock.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ClockStatus> {
        self.status.as_ref()
    }
    /// <p>The desired status of the simulation clock.</p>
    pub fn target_status(&self) -> std::option::Option<&crate::types::ClockTargetStatus> {
        self.target_status.as_ref()
    }
}
impl SimulationClock {
    /// Creates a new builder-style object to manufacture [`SimulationClock`](crate::types::SimulationClock).
    pub fn builder() -> crate::types::builders::SimulationClockBuilder {
        crate::types::builders::SimulationClockBuilder::default()
    }
}

/// A builder for [`SimulationClock`](crate::types::SimulationClock).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimulationClockBuilder {
    pub(crate) status: std::option::Option<crate::types::ClockStatus>,
    pub(crate) target_status: std::option::Option<crate::types::ClockTargetStatus>,
}
impl SimulationClockBuilder {
    /// <p>The current status of the simulation clock.</p>
    pub fn status(mut self, input: crate::types::ClockStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the simulation clock.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ClockStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The desired status of the simulation clock.</p>
    pub fn target_status(mut self, input: crate::types::ClockTargetStatus) -> Self {
        self.target_status = Some(input);
        self
    }
    /// <p>The desired status of the simulation clock.</p>
    pub fn set_target_status(
        mut self,
        input: std::option::Option<crate::types::ClockTargetStatus>,
    ) -> Self {
        self.target_status = input;
        self
    }
    /// Consumes the builder and constructs a [`SimulationClock`](crate::types::SimulationClock).
    pub fn build(self) -> crate::types::SimulationClock {
        crate::types::SimulationClock {
            status: self.status,
            target_status: self.target_status,
        }
    }
}
