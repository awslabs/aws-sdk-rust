// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAppInput {
    /// <p>The name of the simulation of the app.</p>
    #[doc(hidden)]
    pub simulation: std::option::Option<std::string::String>,
    /// <p>The name of the domain of the app.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The name of the app.</p>
    #[doc(hidden)]
    pub app: std::option::Option<std::string::String>,
}
impl DeleteAppInput {
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(&self) -> std::option::Option<&str> {
        self.simulation.as_deref()
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The name of the app.</p>
    pub fn app(&self) -> std::option::Option<&str> {
        self.app.as_deref()
    }
}
impl DeleteAppInput {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
    pub fn builder() -> crate::operation::delete_app::builders::DeleteAppInputBuilder {
        crate::operation::delete_app::builders::DeleteAppInputBuilder::default()
    }
}

/// A builder for [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteAppInputBuilder {
    pub(crate) simulation: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) app: std::option::Option<std::string::String>,
}
impl DeleteAppInputBuilder {
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(mut self, input: impl Into<std::string::String>) -> Self {
        self.simulation = Some(input.into());
        self
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn set_simulation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.simulation = input;
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn app(mut self, input: impl Into<std::string::String>) -> Self {
        self.app = Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteAppInput`](crate::operation::delete_app::DeleteAppInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_app::DeleteAppInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_app::DeleteAppInput {
            simulation: self.simulation,
            domain: self.domain,
            app: self.app,
        })
    }
}
