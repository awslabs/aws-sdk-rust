// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSimulationOutput {
    /// <p>The name of the simulation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The description of the simulation.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current lifecycle state of the simulation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SimulationStatus>,
    /// <p>The desired lifecycle state of the simulation.</p>
    #[doc(hidden)]
    pub target_status: std::option::Option<crate::types::SimulationTargetStatus>,
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    #[doc(hidden)]
    pub schema_s3_location: std::option::Option<crate::types::S3Location>,
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    #[doc(hidden)]
    pub schema_error: std::option::Option<std::string::String>,
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    #[doc(hidden)]
    pub logging_configuration: std::option::Option<crate::types::LoggingConfiguration>,
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    #[doc(hidden)]
    pub live_simulation_state: std::option::Option<crate::types::LiveSimulationState>,
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    #[doc(hidden)]
    pub maximum_duration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSimulationOutput {
    /// <p>The name of the simulation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description of the simulation.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current lifecycle state of the simulation.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SimulationStatus> {
        self.status.as_ref()
    }
    /// <p>The desired lifecycle state of the simulation.</p>
    pub fn target_status(&self) -> std::option::Option<&crate::types::SimulationTargetStatus> {
        self.target_status.as_ref()
    }
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    pub fn schema_s3_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.schema_s3_location.as_ref()
    }
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    pub fn schema_error(&self) -> std::option::Option<&str> {
        self.schema_error.as_deref()
    }
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    pub fn live_simulation_state(&self) -> std::option::Option<&crate::types::LiveSimulationState> {
        self.live_simulation_state.as_ref()
    }
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    pub fn maximum_duration(&self) -> std::option::Option<&str> {
        self.maximum_duration.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSimulationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSimulationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSimulationOutput`](crate::operation::describe_simulation::DescribeSimulationOutput).
    pub fn builder(
    ) -> crate::operation::describe_simulation::builders::DescribeSimulationOutputBuilder {
        crate::operation::describe_simulation::builders::DescribeSimulationOutputBuilder::default()
    }
}

/// A builder for [`DescribeSimulationOutput`](crate::operation::describe_simulation::DescribeSimulationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeSimulationOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) execution_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::SimulationStatus>,
    pub(crate) target_status: std::option::Option<crate::types::SimulationTargetStatus>,
    pub(crate) schema_s3_location: std::option::Option<crate::types::S3Location>,
    pub(crate) schema_error: std::option::Option<std::string::String>,
    pub(crate) logging_configuration: std::option::Option<crate::types::LoggingConfiguration>,
    pub(crate) live_simulation_state: std::option::Option<crate::types::LiveSimulationState>,
    pub(crate) maximum_duration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSimulationOutputBuilder {
    /// <p>The name of the simulation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the simulation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_id = Some(input.into());
        self
    }
    /// <p>A universally unique identifier (UUID) for this simulation.</p>
    pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The description of the simulation.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the simulation.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the simulation was created, expressed as the number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The current lifecycle state of the simulation.</p>
    pub fn status(mut self, input: crate::types::SimulationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current lifecycle state of the simulation.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::SimulationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The desired lifecycle state of the simulation.</p>
    pub fn target_status(mut self, input: crate::types::SimulationTargetStatus) -> Self {
        self.target_status = Some(input);
        self
    }
    /// <p>The desired lifecycle state of the simulation.</p>
    pub fn set_target_status(
        mut self,
        input: std::option::Option<crate::types::SimulationTargetStatus>,
    ) -> Self {
        self.target_status = input;
        self
    }
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    pub fn schema_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.schema_s3_location = Some(input);
        self
    }
    /// <p>The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"> <i>Amazon Simple Storage Service User Guide</i> </a>.</p>
    pub fn set_schema_s3_location(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.schema_s3_location = input;
        self
    }
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    pub fn schema_error(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_error = Some(input.into());
        self
    }
    /// <p>An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.</p>
    pub fn set_schema_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_error = input;
        self
    }
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    pub fn logging_configuration(mut self, input: crate::types::LoggingConfiguration) -> Self {
        self.logging_configuration = Some(input);
        self
    }
    /// <p>Settings that control how SimSpace Weaver handles your simulation log data.</p>
    pub fn set_logging_configuration(
        mut self,
        input: std::option::Option<crate::types::LoggingConfiguration>,
    ) -> Self {
        self.logging_configuration = input;
        self
    }
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    pub fn live_simulation_state(mut self, input: crate::types::LiveSimulationState) -> Self {
        self.live_simulation_state = Some(input);
        self
    }
    /// <p>A collection of additional state information, such as domain and clock configuration.</p>
    pub fn set_live_simulation_state(
        mut self,
        input: std::option::Option<crate::types::LiveSimulationState>,
    ) -> Self {
        self.live_simulation_state = input;
        self
    }
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    pub fn maximum_duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.maximum_duration = Some(input.into());
        self
    }
    /// <p>The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit.</p>
    pub fn set_maximum_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.maximum_duration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSimulationOutput`](crate::operation::describe_simulation::DescribeSimulationOutput).
    pub fn build(self) -> crate::operation::describe_simulation::DescribeSimulationOutput {
        crate::operation::describe_simulation::DescribeSimulationOutput {
            name: self.name,
            execution_id: self.execution_id,
            arn: self.arn,
            description: self.description,
            role_arn: self.role_arn,
            creation_time: self.creation_time,
            status: self.status,
            target_status: self.target_status,
            schema_s3_location: self.schema_s3_location,
            schema_error: self.schema_error,
            logging_configuration: self.logging_configuration,
            live_simulation_state: self.live_simulation_state,
            maximum_duration: self.maximum_duration,
            _request_id: self._request_id,
        }
    }
}
