// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSnapshotInput {
    /// <p>The name of the simulation.</p>
    pub simulation: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 bucket and optional folder (object key prefix) where SimSpace Weaver creates the snapshot file.</p>
    /// <p>The Amazon S3 bucket must be in the same Amazon Web Services Region as the simulation.</p>
    pub destination: ::std::option::Option<crate::types::S3Destination>,
}
impl CreateSnapshotInput {
    /// <p>The name of the simulation.</p>
    pub fn simulation(&self) -> ::std::option::Option<&str> {
        self.simulation.as_deref()
    }
    /// <p>The Amazon S3 bucket and optional folder (object key prefix) where SimSpace Weaver creates the snapshot file.</p>
    /// <p>The Amazon S3 bucket must be in the same Amazon Web Services Region as the simulation.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::S3Destination> {
        self.destination.as_ref()
    }
}
impl CreateSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotInput`](crate::operation::create_snapshot::CreateSnapshotInput).
    pub fn builder() -> crate::operation::create_snapshot::builders::CreateSnapshotInputBuilder {
        crate::operation::create_snapshot::builders::CreateSnapshotInputBuilder::default()
    }
}

/// A builder for [`CreateSnapshotInput`](crate::operation::create_snapshot::CreateSnapshotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSnapshotInputBuilder {
    pub(crate) simulation: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<crate::types::S3Destination>,
}
impl CreateSnapshotInputBuilder {
    /// <p>The name of the simulation.</p>
    /// This field is required.
    pub fn simulation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.simulation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the simulation.</p>
    pub fn set_simulation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.simulation = input;
        self
    }
    /// <p>The name of the simulation.</p>
    pub fn get_simulation(&self) -> &::std::option::Option<::std::string::String> {
        &self.simulation
    }
    /// <p>The Amazon S3 bucket and optional folder (object key prefix) where SimSpace Weaver creates the snapshot file.</p>
    /// <p>The Amazon S3 bucket must be in the same Amazon Web Services Region as the simulation.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::S3Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 bucket and optional folder (object key prefix) where SimSpace Weaver creates the snapshot file.</p>
    /// <p>The Amazon S3 bucket must be in the same Amazon Web Services Region as the simulation.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::S3Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The Amazon S3 bucket and optional folder (object key prefix) where SimSpace Weaver creates the snapshot file.</p>
    /// <p>The Amazon S3 bucket must be in the same Amazon Web Services Region as the simulation.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::S3Destination> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`CreateSnapshotInput`](crate::operation::create_snapshot::CreateSnapshotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_snapshot::CreateSnapshotInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_snapshot::CreateSnapshotInput {
            simulation: self.simulation,
            destination: self.destination,
        })
    }
}
