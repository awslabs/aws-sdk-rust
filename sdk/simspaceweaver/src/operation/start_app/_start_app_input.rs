// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartAppInput {
    /// <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the simulation of the app.</p>
    pub simulation: ::std::option::Option<::std::string::String>,
    /// <p>The name of the domain of the app.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The name of the app.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the app.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Options that apply when the app starts. These options override default behavior.</p>
    pub launch_overrides: ::std::option::Option<crate::types::LaunchOverrides>,
}
impl StartAppInput {
    /// <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn simulation(&self) -> ::std::option::Option<&str> {
        self.simulation.as_deref()
    }
    /// <p>The name of the domain of the app.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The name of the app.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the app.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Options that apply when the app starts. These options override default behavior.</p>
    pub fn launch_overrides(&self) -> ::std::option::Option<&crate::types::LaunchOverrides> {
        self.launch_overrides.as_ref()
    }
}
impl ::std::fmt::Debug for StartAppInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartAppInput");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("simulation", &self.simulation);
        formatter.field("domain", &self.domain);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("launch_overrides", &self.launch_overrides);
        formatter.finish()
    }
}
impl StartAppInput {
    /// Creates a new builder-style object to manufacture [`StartAppInput`](crate::operation::start_app::StartAppInput).
    pub fn builder() -> crate::operation::start_app::builders::StartAppInputBuilder {
        crate::operation::start_app::builders::StartAppInputBuilder::default()
    }
}

/// A builder for [`StartAppInput`](crate::operation::start_app::StartAppInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StartAppInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) simulation: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) launch_overrides: ::std::option::Option<crate::types::LaunchOverrides>,
}
impl StartAppInputBuilder {
    /// <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The name of the simulation of the app.</p>
    /// This field is required.
    pub fn simulation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.simulation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn set_simulation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.simulation = input;
        self
    }
    /// <p>The name of the simulation of the app.</p>
    pub fn get_simulation(&self) -> &::std::option::Option<::std::string::String> {
        &self.simulation
    }
    /// <p>The name of the domain of the app.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain of the app.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The name of the app.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the app.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the app.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the app.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Options that apply when the app starts. These options override default behavior.</p>
    pub fn launch_overrides(mut self, input: crate::types::LaunchOverrides) -> Self {
        self.launch_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>Options that apply when the app starts. These options override default behavior.</p>
    pub fn set_launch_overrides(mut self, input: ::std::option::Option<crate::types::LaunchOverrides>) -> Self {
        self.launch_overrides = input;
        self
    }
    /// <p>Options that apply when the app starts. These options override default behavior.</p>
    pub fn get_launch_overrides(&self) -> &::std::option::Option<crate::types::LaunchOverrides> {
        &self.launch_overrides
    }
    /// Consumes the builder and constructs a [`StartAppInput`](crate::operation::start_app::StartAppInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_app::StartAppInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_app::StartAppInput {
            client_token: self.client_token,
            simulation: self.simulation,
            domain: self.domain,
            name: self.name,
            description: self.description,
            launch_overrides: self.launch_overrides,
        })
    }
}
impl ::std::fmt::Debug for StartAppInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartAppInputBuilder");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("simulation", &self.simulation);
        formatter.field("domain", &self.domain);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("launch_overrides", &self.launch_overrides);
        formatter.finish()
    }
}
