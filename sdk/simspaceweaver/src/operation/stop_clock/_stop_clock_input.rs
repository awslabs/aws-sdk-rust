// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopClockInput {
    /// <p>The name of the simulation.</p>
    #[doc(hidden)]
    pub simulation: std::option::Option<std::string::String>,
}
impl StopClockInput {
    /// <p>The name of the simulation.</p>
    pub fn simulation(&self) -> std::option::Option<&str> {
        self.simulation.as_deref()
    }
}
impl StopClockInput {
    /// Creates a new builder-style object to manufacture [`StopClockInput`](crate::operation::stop_clock::StopClockInput).
    pub fn builder() -> crate::operation::stop_clock::builders::StopClockInputBuilder {
        crate::operation::stop_clock::builders::StopClockInputBuilder::default()
    }
}

/// A builder for [`StopClockInput`](crate::operation::stop_clock::StopClockInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StopClockInputBuilder {
    pub(crate) simulation: std::option::Option<std::string::String>,
}
impl StopClockInputBuilder {
    /// <p>The name of the simulation.</p>
    pub fn simulation(mut self, input: impl Into<std::string::String>) -> Self {
        self.simulation = Some(input.into());
        self
    }
    /// <p>The name of the simulation.</p>
    pub fn set_simulation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.simulation = input;
        self
    }
    /// Consumes the builder and constructs a [`StopClockInput`](crate::operation::stop_clock::StopClockInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_clock::StopClockInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::stop_clock::StopClockInput {
            simulation: self.simulation,
        })
    }
}
