// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An error occurred due to a conflict.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The specified device is currently offline.</p>
    DeviceOfflineException(crate::types::error::DeviceOfflineException),
    /// <p>The specified device has been retired.</p>
    DeviceRetiredException(crate::types::error::DeviceRetiredException),
    /// <p>The request processing has failed because of an unknown error, exception, or failure.</p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request failed because a service quota is exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The throttling rate limit is met.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DeviceOfflineException(inner) => inner.fmt(f),
            Error::DeviceRetiredException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_job::CancelJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::cancel_job::CancelJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_job::CancelJobError> for Error {
    fn from(err: crate::operation::cancel_job::CancelJobError) -> Self {
        match err {
            crate::operation::cancel_job::CancelJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_job::CancelJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_job::CancelJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_quantum_task::CancelQuantumTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_quantum_task::CancelQuantumTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_quantum_task::CancelQuantumTaskError> for Error {
    fn from(err: crate::operation::cancel_quantum_task::CancelQuantumTaskError) -> Self {
        match err {
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_quantum_task::CancelQuantumTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_job::CreateJobError> for Error {
    fn from(err: crate::operation::create_job::CreateJobError) -> Self {
        match err {
            crate::operation::create_job::CreateJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_job::CreateJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_job::CreateJobError::DeviceRetiredException(inner) => {
                Error::DeviceRetiredException(inner)
            }
            crate::operation::create_job::CreateJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_job::CreateJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_job::CreateJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_job::CreateJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_job::CreateJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_quantum_task::CreateQuantumTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_quantum_task::CreateQuantumTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_quantum_task::CreateQuantumTaskError> for Error {
    fn from(err: crate::operation::create_quantum_task::CreateQuantumTaskError) -> Self {
        match err {
            crate::operation::create_quantum_task::CreateQuantumTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::DeviceOfflineException(inner) => Error::DeviceOfflineException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::DeviceRetiredException(inner) => Error::DeviceRetiredException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_quantum_task::CreateQuantumTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_device::GetDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_device::GetDeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device::GetDeviceError> for Error {
    fn from(err: crate::operation::get_device::GetDeviceError) -> Self {
        match err {
            crate::operation::get_device::GetDeviceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_device::GetDeviceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_device::GetDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_device::GetDeviceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_device::GetDeviceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_device::GetDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_job::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_job::GetJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_job::GetJobError> for Error {
    fn from(err: crate::operation::get_job::GetJobError) -> Self {
        match err {
            crate::operation::get_job::GetJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_job::GetJobError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_job::GetJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_job::GetJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_job::GetJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_job::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_quantum_task::GetQuantumTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_quantum_task::GetQuantumTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_quantum_task::GetQuantumTaskError> for Error {
    fn from(err: crate::operation::get_quantum_task::GetQuantumTaskError) -> Self {
        match err {
            crate::operation::get_quantum_task::GetQuantumTaskError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_quantum_task::GetQuantumTaskError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::get_quantum_task::GetQuantumTaskError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_quantum_task::GetQuantumTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_quantum_task::GetQuantumTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_quantum_task::GetQuantumTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::search_devices::SearchDevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_devices::SearchDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_devices::SearchDevicesError> for Error {
    fn from(err: crate::operation::search_devices::SearchDevicesError) -> Self {
        match err {
            crate::operation::search_devices::SearchDevicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::search_devices::SearchDevicesError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::search_devices::SearchDevicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::search_devices::SearchDevicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::search_devices::SearchDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::search_jobs::SearchJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::search_jobs::SearchJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_jobs::SearchJobsError> for Error {
    fn from(err: crate::operation::search_jobs::SearchJobsError) -> Self {
        match err {
            crate::operation::search_jobs::SearchJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::search_jobs::SearchJobsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::search_jobs::SearchJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::search_jobs::SearchJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::search_jobs::SearchJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_quantum_tasks::SearchQuantumTasksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_quantum_tasks::SearchQuantumTasksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_quantum_tasks::SearchQuantumTasksError> for Error {
    fn from(err: crate::operation::search_quantum_tasks::SearchQuantumTasksError) -> Self {
        match err {
            crate::operation::search_quantum_tasks::SearchQuantumTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_quantum_tasks::SearchQuantumTasksError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::search_quantum_tasks::SearchQuantumTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_quantum_tasks::SearchQuantumTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_quantum_tasks::SearchQuantumTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DeviceOfflineException(e) => e.request_id(),
            Self::DeviceRetiredException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
