// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn cancel_job_output_correct_errors(
    mut builder: crate::operation::cancel_job::builders::CancelJobOutputBuilder,
) -> crate::operation::cancel_job::builders::CancelJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.cancellation_status.is_none() {
        builder.cancellation_status = "no value was set".parse::<crate::types::CancellationStatus>().ok()
    }
    builder
}

pub(crate) fn cancel_quantum_task_output_correct_errors(
    mut builder: crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder,
) -> crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder {
    if builder.quantum_task_arn.is_none() {
        builder.quantum_task_arn = Some(Default::default())
    }
    if builder.cancellation_status.is_none() {
        builder.cancellation_status = "no value was set".parse::<crate::types::CancellationStatus>().ok()
    }
    builder
}

pub(crate) fn create_job_output_correct_errors(
    mut builder: crate::operation::create_job::builders::CreateJobOutputBuilder,
) -> crate::operation::create_job::builders::CreateJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_quantum_task_output_correct_errors(
    mut builder: crate::operation::create_quantum_task::builders::CreateQuantumTaskOutputBuilder,
) -> crate::operation::create_quantum_task::builders::CreateQuantumTaskOutputBuilder {
    if builder.quantum_task_arn.is_none() {
        builder.quantum_task_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_device_output_correct_errors(
    mut builder: crate::operation::get_device::builders::GetDeviceOutputBuilder,
) -> crate::operation::get_device::builders::GetDeviceOutputBuilder {
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.provider_name.is_none() {
        builder.provider_name = Some(Default::default())
    }
    if builder.device_type.is_none() {
        builder.device_type = "no value was set".parse::<crate::types::DeviceType>().ok()
    }
    if builder.device_status.is_none() {
        builder.device_status = "no value was set".parse::<crate::types::DeviceStatus>().ok()
    }
    if builder.device_capabilities.is_none() {
        builder.device_capabilities = Some(Default::default())
    }
    builder
}

pub(crate) fn get_job_output_correct_errors(
    mut builder: crate::operation::get_job::builders::GetJobOutputBuilder,
) -> crate::operation::get_job::builders::GetJobOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobPrimaryStatus>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::JobOutputDataConfigBuilder::default();
            crate::serde_util::job_output_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.algorithm_specification.is_none() {
        builder.algorithm_specification = {
            let builder = crate::types::builders::AlgorithmSpecificationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.instance_config.is_none() {
        builder.instance_config = {
            let builder = crate::types::builders::InstanceConfigBuilder::default();
            crate::serde_util::instance_config_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_quantum_task_output_correct_errors(
    mut builder: crate::operation::get_quantum_task::builders::GetQuantumTaskOutputBuilder,
) -> crate::operation::get_quantum_task::builders::GetQuantumTaskOutputBuilder {
    if builder.quantum_task_arn.is_none() {
        builder.quantum_task_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QuantumTaskStatus>().ok()
    }
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    if builder.device_parameters.is_none() {
        builder.device_parameters = Some(Default::default())
    }
    if builder.shots.is_none() {
        builder.shots = Some(Default::default())
    }
    if builder.output_s3_bucket.is_none() {
        builder.output_s3_bucket = Some(Default::default())
    }
    if builder.output_s3_directory.is_none() {
        builder.output_s3_directory = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn search_devices_output_correct_errors(
    mut builder: crate::operation::search_devices::builders::SearchDevicesOutputBuilder,
) -> crate::operation::search_devices::builders::SearchDevicesOutputBuilder {
    if builder.devices.is_none() {
        builder.devices = Some(Default::default())
    }
    builder
}

pub(crate) fn search_jobs_output_correct_errors(
    mut builder: crate::operation::search_jobs::builders::SearchJobsOutputBuilder,
) -> crate::operation::search_jobs::builders::SearchJobsOutputBuilder {
    if builder.jobs.is_none() {
        builder.jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn search_quantum_tasks_output_correct_errors(
    mut builder: crate::operation::search_quantum_tasks::builders::SearchQuantumTasksOutputBuilder,
) -> crate::operation::search_quantum_tasks::builders::SearchQuantumTasksOutputBuilder {
    if builder.quantum_tasks.is_none() {
        builder.quantum_tasks = Some(Default::default())
    }
    builder
}

pub(crate) fn job_output_data_config_correct_errors(
    mut builder: crate::types::builders::JobOutputDataConfigBuilder,
) -> crate::types::builders::JobOutputDataConfigBuilder {
    if builder.s3_path.is_none() {
        builder.s3_path = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_config_correct_errors(
    mut builder: crate::types::builders::InstanceConfigBuilder,
) -> crate::types::builders::InstanceConfigBuilder {
    if builder.instance_type.is_none() {
        builder.instance_type = "no value was set".parse::<crate::types::InstanceType>().ok()
    }
    if builder.volume_size_in_gb.is_none() {
        builder.volume_size_in_gb = Some(Default::default())
    }
    builder
}

pub(crate) fn device_config_correct_errors(mut builder: crate::types::builders::DeviceConfigBuilder) -> crate::types::builders::DeviceConfigBuilder {
    if builder.device.is_none() {
        builder.device = Some(Default::default())
    }
    builder
}

pub(crate) fn hybrid_job_queue_info_correct_errors(
    mut builder: crate::types::builders::HybridJobQueueInfoBuilder,
) -> crate::types::builders::HybridJobQueueInfoBuilder {
    if builder.queue.is_none() {
        builder.queue = "no value was set".parse::<crate::types::QueueName>().ok()
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn job_checkpoint_config_correct_errors(
    mut builder: crate::types::builders::JobCheckpointConfigBuilder,
) -> crate::types::builders::JobCheckpointConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn quantum_task_queue_info_correct_errors(
    mut builder: crate::types::builders::QuantumTaskQueueInfoBuilder,
) -> crate::types::builders::QuantumTaskQueueInfoBuilder {
    if builder.queue.is_none() {
        builder.queue = "no value was set".parse::<crate::types::QueueName>().ok()
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn container_image_correct_errors(
    mut builder: crate::types::builders::ContainerImageBuilder,
) -> crate::types::builders::ContainerImageBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn device_queue_info_correct_errors(
    mut builder: crate::types::builders::DeviceQueueInfoBuilder,
) -> crate::types::builders::DeviceQueueInfoBuilder {
    if builder.queue.is_none() {
        builder.queue = "no value was set".parse::<crate::types::QueueName>().ok()
    }
    if builder.queue_size.is_none() {
        builder.queue_size = Some(Default::default())
    }
    builder
}

pub(crate) fn device_summary_correct_errors(
    mut builder: crate::types::builders::DeviceSummaryBuilder,
) -> crate::types::builders::DeviceSummaryBuilder {
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    if builder.provider_name.is_none() {
        builder.provider_name = Some(Default::default())
    }
    if builder.device_type.is_none() {
        builder.device_type = "no value was set".parse::<crate::types::DeviceType>().ok()
    }
    if builder.device_status.is_none() {
        builder.device_status = "no value was set".parse::<crate::types::DeviceStatus>().ok()
    }
    builder
}

pub(crate) fn input_file_config_correct_errors(
    mut builder: crate::types::builders::InputFileConfigBuilder,
) -> crate::types::builders::InputFileConfigBuilder {
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            Some(crate::serde_util::data_source_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobPrimaryStatus>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.device.is_none() {
        builder.device = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn quantum_task_summary_correct_errors(
    mut builder: crate::types::builders::QuantumTaskSummaryBuilder,
) -> crate::types::builders::QuantumTaskSummaryBuilder {
    if builder.quantum_task_arn.is_none() {
        builder.quantum_task_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QuantumTaskStatus>().ok()
    }
    if builder.device_arn.is_none() {
        builder.device_arn = Some(Default::default())
    }
    if builder.shots.is_none() {
        builder.shots = Some(Default::default())
    }
    if builder.output_s3_bucket.is_none() {
        builder.output_s3_bucket = Some(Default::default())
    }
    if builder.output_s3_directory.is_none() {
        builder.output_s3_directory = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn script_mode_config_correct_errors(
    mut builder: crate::types::builders::ScriptModeConfigBuilder,
) -> crate::types::builders::ScriptModeConfigBuilder {
    if builder.entry_point.is_none() {
        builder.entry_point = Some(Default::default())
    }
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.s3_data_source.is_none() {
        builder.s3_data_source = {
            let builder = crate::types::builders::S3DataSourceBuilder::default();
            crate::serde_util::s3_data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_data_source_correct_errors(mut builder: crate::types::builders::S3DataSourceBuilder) -> crate::types::builders::S3DataSourceBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}
