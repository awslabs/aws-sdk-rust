// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.algorithm_specification {
        #[allow(unused_mut)]
        let mut object_2 = object.key("algorithmSpecification").start_object();
        crate::protocol_serde::shape_algorithm_specification::ser_algorithm_specification(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.checkpoint_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("checkpointConfig").start_object();
        crate::protocol_serde::shape_job_checkpoint_config::ser_job_checkpoint_config(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.device_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("deviceConfig").start_object();
        crate::protocol_serde::shape_device_config::ser_device_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.hyper_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("hyperParameters").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.input_data_config {
        let mut array_13 = object.key("inputDataConfig").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_input_file_config::ser_input_file_config(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.instance_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("instanceConfig").start_object();
        crate::protocol_serde::shape_instance_config::ser_instance_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.job_name {
        object.key("jobName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("outputDataConfig").start_object();
        crate::protocol_serde::shape_job_output_data_config::ser_job_output_data_config(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.role_arn {
        object.key("roleArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_23 = object.key("stoppingCondition").start_object();
        crate::protocol_serde::shape_job_stopping_condition::ser_job_stopping_condition(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        #[allow(unused_mut)]
        let mut object_25 = object.key("tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26.as_str()).string(value_27.as_str());
            }
        }
        object_25.finish();
    }
    Ok(())
}
