// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of parameters that specify the input channels, type of input data, and where it is located.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputFileConfig {
    /// <p>A named input source that an Amazon Braket job can consume.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>The MIME type of the data.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>The location of the channel data.</p>
    #[doc(hidden)]
    pub data_source: std::option::Option<crate::types::DataSource>,
}
impl InputFileConfig {
    /// <p>A named input source that an Amazon Braket job can consume.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The MIME type of the data.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The location of the channel data.</p>
    pub fn data_source(&self) -> std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
}
impl InputFileConfig {
    /// Creates a new builder-style object to manufacture [`InputFileConfig`](crate::types::InputFileConfig).
    pub fn builder() -> crate::types::builders::InputFileConfigBuilder {
        crate::types::builders::InputFileConfigBuilder::default()
    }
}

/// A builder for [`InputFileConfig`](crate::types::InputFileConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputFileConfigBuilder {
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) data_source: std::option::Option<crate::types::DataSource>,
}
impl InputFileConfigBuilder {
    /// <p>A named input source that an Amazon Braket job can consume.</p>
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// <p>A named input source that an Amazon Braket job can consume.</p>
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The MIME type of the data.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The MIME type of the data.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The location of the channel data.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = Some(input);
        self
    }
    /// <p>The location of the channel data.</p>
    pub fn set_data_source(mut self, input: std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// Consumes the builder and constructs a [`InputFileConfig`](crate::types::InputFileConfig).
    pub fn build(self) -> crate::types::InputFileConfig {
        crate::types::InputFileConfig {
            channel_name: self.channel_name,
            content_type: self.content_type,
            data_source: self.data_source,
        }
    }
}
