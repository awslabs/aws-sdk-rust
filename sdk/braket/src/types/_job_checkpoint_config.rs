// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the output locations for job checkpoint data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobCheckpointConfig {
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>
    pub local_path: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub s3_uri: ::std::string::String,
}
impl JobCheckpointConfig {
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>
    pub fn local_path(&self) -> ::std::option::Option<&str> {
        self.local_path.as_deref()
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn s3_uri(&self) -> &str {
        use std::ops::Deref;
        self.s3_uri.deref()
    }
}
impl JobCheckpointConfig {
    /// Creates a new builder-style object to manufacture [`JobCheckpointConfig`](crate::types::JobCheckpointConfig).
    pub fn builder() -> crate::types::builders::JobCheckpointConfigBuilder {
        crate::types::builders::JobCheckpointConfigBuilder::default()
    }
}

/// A builder for [`JobCheckpointConfig`](crate::types::JobCheckpointConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobCheckpointConfigBuilder {
    pub(crate) local_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
}
impl JobCheckpointConfigBuilder {
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>
    pub fn local_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>
    pub fn set_local_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_path = input;
        self
    }
    /// <p>(Optional) The local directory where checkpoints are written. The default directory is <code>/opt/braket/checkpoints/</code>.</p>
    pub fn get_local_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_path
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store checkpoints. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// Consumes the builder and constructs a [`JobCheckpointConfig`](crate::types::JobCheckpointConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_uri`](crate::types::builders::JobCheckpointConfigBuilder::s3_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::JobCheckpointConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobCheckpointConfig {
            local_path: self.local_path,
            s3_uri: self.s3_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_uri",
                    "s3_uri was not specified but it is required when building JobCheckpointConfig",
                )
            })?,
        })
    }
}
