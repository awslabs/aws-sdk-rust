// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobOutputDataConfig {
    /// <p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job training artifacts at rest using Amazon S3 server-side encryption.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    #[doc(hidden)]
    pub s3_path: std::option::Option<std::string::String>,
}
impl JobOutputDataConfig {
    /// <p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job training artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn s3_path(&self) -> std::option::Option<&str> {
        self.s3_path.as_deref()
    }
}
impl JobOutputDataConfig {
    /// Creates a new builder-style object to manufacture [`JobOutputDataConfig`](crate::types::JobOutputDataConfig).
    pub fn builder() -> crate::types::builders::JobOutputDataConfigBuilder {
        crate::types::builders::JobOutputDataConfigBuilder::default()
    }
}

/// A builder for [`JobOutputDataConfig`](crate::types::JobOutputDataConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobOutputDataConfigBuilder {
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) s3_path: std::option::Option<std::string::String>,
}
impl JobOutputDataConfigBuilder {
    /// <p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job training artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The AWS Key Management Service (AWS KMS) key that Amazon Braket uses to encrypt the job training artifacts at rest using Amazon S3 server-side encryption.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_path = Some(input.into());
        self
    }
    /// <p>Identifies the S3 path where you want Amazon Braket to store the job training artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>.</p>
    pub fn set_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_path = input;
        self
    }
    /// Consumes the builder and constructs a [`JobOutputDataConfig`](crate::types::JobOutputDataConfig).
    pub fn build(self) -> crate::types::JobOutputDataConfig {
        crate::types::JobOutputDataConfig {
            kms_key_id: self.kms_key_id,
            s3_path: self.s3_path,
        }
    }
}
