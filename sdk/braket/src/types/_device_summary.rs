// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes information about the device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceSummary {
    /// <p>The ARN of the device.</p>
    pub device_arn: ::std::string::String,
    /// <p>The name of the device.</p>
    pub device_name: ::std::string::String,
    /// <p>The provider of the device.</p>
    pub provider_name: ::std::string::String,
    /// <p>The type of the device.</p>
    pub device_type: crate::types::DeviceType,
    /// <p>The status of the device.</p>
    pub device_status: crate::types::DeviceStatus,
}
impl DeviceSummary {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> &str {
        use std::ops::Deref;
        self.device_arn.deref()
    }
    /// <p>The name of the device.</p>
    pub fn device_name(&self) -> &str {
        use std::ops::Deref;
        self.device_name.deref()
    }
    /// <p>The provider of the device.</p>
    pub fn provider_name(&self) -> &str {
        use std::ops::Deref;
        self.provider_name.deref()
    }
    /// <p>The type of the device.</p>
    pub fn device_type(&self) -> &crate::types::DeviceType {
        &self.device_type
    }
    /// <p>The status of the device.</p>
    pub fn device_status(&self) -> &crate::types::DeviceStatus {
        &self.device_status
    }
}
impl DeviceSummary {
    /// Creates a new builder-style object to manufacture [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn builder() -> crate::types::builders::DeviceSummaryBuilder {
        crate::types::builders::DeviceSummaryBuilder::default()
    }
}

/// A builder for [`DeviceSummary`](crate::types::DeviceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceSummaryBuilder {
    pub(crate) device_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_type: ::std::option::Option<crate::types::DeviceType>,
    pub(crate) device_status: ::std::option::Option<crate::types::DeviceStatus>,
}
impl DeviceSummaryBuilder {
    /// <p>The ARN of the device.</p>
    /// This field is required.
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_arn
    }
    /// <p>The name of the device.</p>
    /// This field is required.
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the device.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The name of the device.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// <p>The provider of the device.</p>
    /// This field is required.
    pub fn provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider of the device.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The provider of the device.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_name
    }
    /// <p>The type of the device.</p>
    /// This field is required.
    pub fn device_type(mut self, input: crate::types::DeviceType) -> Self {
        self.device_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the device.</p>
    pub fn set_device_type(mut self, input: ::std::option::Option<crate::types::DeviceType>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The type of the device.</p>
    pub fn get_device_type(&self) -> &::std::option::Option<crate::types::DeviceType> {
        &self.device_type
    }
    /// <p>The status of the device.</p>
    /// This field is required.
    pub fn device_status(mut self, input: crate::types::DeviceStatus) -> Self {
        self.device_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the device.</p>
    pub fn set_device_status(mut self, input: ::std::option::Option<crate::types::DeviceStatus>) -> Self {
        self.device_status = input;
        self
    }
    /// <p>The status of the device.</p>
    pub fn get_device_status(&self) -> &::std::option::Option<crate::types::DeviceStatus> {
        &self.device_status
    }
    /// Consumes the builder and constructs a [`DeviceSummary`](crate::types::DeviceSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`device_arn`](crate::types::builders::DeviceSummaryBuilder::device_arn)
    /// - [`device_name`](crate::types::builders::DeviceSummaryBuilder::device_name)
    /// - [`provider_name`](crate::types::builders::DeviceSummaryBuilder::provider_name)
    /// - [`device_type`](crate::types::builders::DeviceSummaryBuilder::device_type)
    /// - [`device_status`](crate::types::builders::DeviceSummaryBuilder::device_status)
    pub fn build(self) -> ::std::result::Result<crate::types::DeviceSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeviceSummary {
            device_arn: self.device_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_arn",
                    "device_arn was not specified but it is required when building DeviceSummary",
                )
            })?,
            device_name: self.device_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_name",
                    "device_name was not specified but it is required when building DeviceSummary",
                )
            })?,
            provider_name: self.provider_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_name",
                    "provider_name was not specified but it is required when building DeviceSummary",
                )
            })?,
            device_type: self.device_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_type",
                    "device_type was not specified but it is required when building DeviceSummary",
                )
            })?,
            device_status: self.device_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_status",
                    "device_status was not specified but it is required when building DeviceSummary",
                )
            })?,
        })
    }
}
