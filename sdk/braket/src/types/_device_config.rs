// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceConfig {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub device: ::std::string::String,
}
impl DeviceConfig {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn device(&self) -> &str {
        use std::ops::Deref;
        self.device.deref()
    }
}
impl DeviceConfig {
    /// Creates a new builder-style object to manufacture [`DeviceConfig`](crate::types::DeviceConfig).
    pub fn builder() -> crate::types::builders::DeviceConfigBuilder {
        crate::types::builders::DeviceConfigBuilder::default()
    }
}

/// A builder for [`DeviceConfig`](crate::types::DeviceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceConfigBuilder {
    pub(crate) device: ::std::option::Option<::std::string::String>,
}
impl DeviceConfigBuilder {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    /// This field is required.
    pub fn device(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn set_device(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device = input;
        self
    }
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn get_device(&self) -> &::std::option::Option<::std::string::String> {
        &self.device
    }
    /// Consumes the builder and constructs a [`DeviceConfig`](crate::types::DeviceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`device`](crate::types::builders::DeviceConfigBuilder::device)
    pub fn build(self) -> ::std::result::Result<crate::types::DeviceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeviceConfig {
            device: self.device.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device",
                    "device was not specified but it is required when building DeviceConfig",
                )
            })?,
        })
    }
}
