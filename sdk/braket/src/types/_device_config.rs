// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceConfig {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    #[doc(hidden)]
    pub device: std::option::Option<std::string::String>,
}
impl DeviceConfig {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn device(&self) -> std::option::Option<&str> {
        self.device.as_deref()
    }
}
impl DeviceConfig {
    /// Creates a new builder-style object to manufacture [`DeviceConfig`](crate::types::DeviceConfig).
    pub fn builder() -> crate::types::builders::DeviceConfigBuilder {
        crate::types::builders::DeviceConfigBuilder::default()
    }
}

/// A builder for [`DeviceConfig`](crate::types::DeviceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceConfigBuilder {
    pub(crate) device: std::option::Option<std::string::String>,
}
impl DeviceConfigBuilder {
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn device(mut self, input: impl Into<std::string::String>) -> Self {
        self.device = Some(input.into());
        self
    }
    /// <p>The primary quantum processing unit (QPU) or simulator used to create and run an Amazon Braket job.</p>
    pub fn set_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceConfig`](crate::types::DeviceConfig).
    pub fn build(self) -> crate::types::DeviceConfig {
        crate::types::DeviceConfig {
            device: self.device,
        }
    }
}
