// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies limits for how long an Amazon Braket job can run. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobStoppingCondition {
    /// <p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>
    #[doc(hidden)]
    pub max_runtime_in_seconds: std::option::Option<i32>,
}
impl JobStoppingCondition {
    /// <p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>
    pub fn max_runtime_in_seconds(&self) -> std::option::Option<i32> {
        self.max_runtime_in_seconds
    }
}
impl JobStoppingCondition {
    /// Creates a new builder-style object to manufacture [`JobStoppingCondition`](crate::types::JobStoppingCondition).
    pub fn builder() -> crate::types::builders::JobStoppingConditionBuilder {
        crate::types::builders::JobStoppingConditionBuilder::default()
    }
}

/// A builder for [`JobStoppingCondition`](crate::types::JobStoppingCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobStoppingConditionBuilder {
    pub(crate) max_runtime_in_seconds: std::option::Option<i32>,
}
impl JobStoppingConditionBuilder {
    /// <p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>
    pub fn max_runtime_in_seconds(mut self, input: i32) -> Self {
        self.max_runtime_in_seconds = Some(input);
        self
    }
    /// <p>The maximum length of time, in seconds, that an Amazon Braket job can run.</p>
    pub fn set_max_runtime_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.max_runtime_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`JobStoppingCondition`](crate::types::JobStoppingCondition).
    pub fn build(self) -> crate::types::JobStoppingCondition {
        crate::types::JobStoppingCondition {
            max_runtime_in_seconds: self.max_runtime_in_seconds,
        }
    }
}
