// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the queue for the specified quantum task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuantumTaskQueueInfo {
    /// <p>The name of the queue. </p>
    pub queue: crate::types::QueueName,
    /// <p>Current position of the task in the quantum tasks queue.</p>
    pub position: ::std::string::String,
    /// <p>Optional. Specifies the priority of the queue. Quantum tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub queue_priority: ::std::option::Option<crate::types::QueuePriority>,
    /// <p>Optional. Provides more information about the queue position. For example, if the task is complete and no longer in the queue, the message field contains that information.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl QuantumTaskQueueInfo {
    /// <p>The name of the queue. </p>
    pub fn queue(&self) -> &crate::types::QueueName {
        &self.queue
    }
    /// <p>Current position of the task in the quantum tasks queue.</p>
    pub fn position(&self) -> &str {
        use std::ops::Deref;
        self.position.deref()
    }
    /// <p>Optional. Specifies the priority of the queue. Quantum tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn queue_priority(&self) -> ::std::option::Option<&crate::types::QueuePriority> {
        self.queue_priority.as_ref()
    }
    /// <p>Optional. Provides more information about the queue position. For example, if the task is complete and no longer in the queue, the message field contains that information.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl QuantumTaskQueueInfo {
    /// Creates a new builder-style object to manufacture [`QuantumTaskQueueInfo`](crate::types::QuantumTaskQueueInfo).
    pub fn builder() -> crate::types::builders::QuantumTaskQueueInfoBuilder {
        crate::types::builders::QuantumTaskQueueInfoBuilder::default()
    }
}

/// A builder for [`QuantumTaskQueueInfo`](crate::types::QuantumTaskQueueInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QuantumTaskQueueInfoBuilder {
    pub(crate) queue: ::std::option::Option<crate::types::QueueName>,
    pub(crate) position: ::std::option::Option<::std::string::String>,
    pub(crate) queue_priority: ::std::option::Option<crate::types::QueuePriority>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl QuantumTaskQueueInfoBuilder {
    /// <p>The name of the queue. </p>
    /// This field is required.
    pub fn queue(mut self, input: crate::types::QueueName) -> Self {
        self.queue = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the queue. </p>
    pub fn set_queue(mut self, input: ::std::option::Option<crate::types::QueueName>) -> Self {
        self.queue = input;
        self
    }
    /// <p>The name of the queue. </p>
    pub fn get_queue(&self) -> &::std::option::Option<crate::types::QueueName> {
        &self.queue
    }
    /// <p>Current position of the task in the quantum tasks queue.</p>
    /// This field is required.
    pub fn position(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.position = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Current position of the task in the quantum tasks queue.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.position = input;
        self
    }
    /// <p>Current position of the task in the quantum tasks queue.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::string::String> {
        &self.position
    }
    /// <p>Optional. Specifies the priority of the queue. Quantum tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn queue_priority(mut self, input: crate::types::QueuePriority) -> Self {
        self.queue_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. Specifies the priority of the queue. Quantum tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn set_queue_priority(mut self, input: ::std::option::Option<crate::types::QueuePriority>) -> Self {
        self.queue_priority = input;
        self
    }
    /// <p>Optional. Specifies the priority of the queue. Quantum tasks in a priority queue are processed before the tasks in a normal queue.</p>
    pub fn get_queue_priority(&self) -> &::std::option::Option<crate::types::QueuePriority> {
        &self.queue_priority
    }
    /// <p>Optional. Provides more information about the queue position. For example, if the task is complete and no longer in the queue, the message field contains that information.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. Provides more information about the queue position. For example, if the task is complete and no longer in the queue, the message field contains that information.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Optional. Provides more information about the queue position. For example, if the task is complete and no longer in the queue, the message field contains that information.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`QuantumTaskQueueInfo`](crate::types::QuantumTaskQueueInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`queue`](crate::types::builders::QuantumTaskQueueInfoBuilder::queue)
    /// - [`position`](crate::types::builders::QuantumTaskQueueInfoBuilder::position)
    pub fn build(self) -> ::std::result::Result<crate::types::QuantumTaskQueueInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QuantumTaskQueueInfo {
            queue: self.queue.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "queue",
                    "queue was not specified but it is required when building QuantumTaskQueueInfo",
                )
            })?,
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building QuantumTaskQueueInfo",
                )
            })?,
            queue_priority: self.queue_priority,
            message: self.message,
        })
    }
}
