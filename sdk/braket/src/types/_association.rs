// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Braket resource and the association type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Association {
    /// <p>The Amazon Braket resource arn.</p>
    pub arn: ::std::string::String,
    /// <p>The association type for the specified Amazon Braket resource arn.</p>
    pub r#type: crate::types::AssociationType,
}
impl Association {
    /// <p>The Amazon Braket resource arn.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The association type for the specified Amazon Braket resource arn.</p>
    pub fn r#type(&self) -> &crate::types::AssociationType {
        &self.r#type
    }
}
impl Association {
    /// Creates a new builder-style object to manufacture [`Association`](crate::types::Association).
    pub fn builder() -> crate::types::builders::AssociationBuilder {
        crate::types::builders::AssociationBuilder::default()
    }
}

/// A builder for [`Association`](crate::types::Association).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociationBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AssociationType>,
}
impl AssociationBuilder {
    /// <p>The Amazon Braket resource arn.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Braket resource arn.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Braket resource arn.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The association type for the specified Amazon Braket resource arn.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AssociationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association type for the specified Amazon Braket resource arn.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AssociationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The association type for the specified Amazon Braket resource arn.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AssociationType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`Association`](crate::types::Association).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::AssociationBuilder::arn)
    /// - [`r#type`](crate::types::builders::AssociationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::Association, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Association {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Association",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Association",
                )
            })?,
        })
    }
}
