// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetQuantumTaskInput {
    /// <p>the ARN of the task to retrieve.</p>
    #[doc(hidden)]
    pub quantum_task_arn: std::option::Option<std::string::String>,
}
impl GetQuantumTaskInput {
    /// <p>the ARN of the task to retrieve.</p>
    pub fn quantum_task_arn(&self) -> std::option::Option<&str> {
        self.quantum_task_arn.as_deref()
    }
}
impl GetQuantumTaskInput {
    /// Creates a new builder-style object to manufacture [`GetQuantumTaskInput`](crate::operation::get_quantum_task::GetQuantumTaskInput).
    pub fn builder() -> crate::operation::get_quantum_task::builders::GetQuantumTaskInputBuilder {
        crate::operation::get_quantum_task::builders::GetQuantumTaskInputBuilder::default()
    }
}

/// A builder for [`GetQuantumTaskInput`](crate::operation::get_quantum_task::GetQuantumTaskInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetQuantumTaskInputBuilder {
    pub(crate) quantum_task_arn: std::option::Option<std::string::String>,
}
impl GetQuantumTaskInputBuilder {
    /// <p>the ARN of the task to retrieve.</p>
    pub fn quantum_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.quantum_task_arn = Some(input.into());
        self
    }
    /// <p>the ARN of the task to retrieve.</p>
    pub fn set_quantum_task_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.quantum_task_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`GetQuantumTaskInput`](crate::operation::get_quantum_task::GetQuantumTaskInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_quantum_task::GetQuantumTaskInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_quantum_task::GetQuantumTaskInput {
            quantum_task_arn: self.quantum_task_arn,
        })
    }
}
