// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_quantum_task::_create_quantum_task_output::CreateQuantumTaskOutputBuilder;

pub use crate::operation::create_quantum_task::_create_quantum_task_input::CreateQuantumTaskInputBuilder;

/// Fluent builder constructing a request to `CreateQuantumTask`.
///
/// <p>Creates a quantum task.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateQuantumTaskFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_quantum_task::builders::CreateQuantumTaskInputBuilder,
}
impl CreateQuantumTaskFluentBuilder {
    /// Creates a new `CreateQuantumTask`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_quantum_task::CreateQuantumTask,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_quantum_task::CreateQuantumTaskError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_quantum_task::CreateQuantumTaskOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_quantum_task::CreateQuantumTaskError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The client token associated with the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token associated with the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The ARN of the device to run the task on.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_arn(input.into());
        self
    }
    /// <p>The ARN of the device to run the task on.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_device_arn(input);
        self
    }
    /// <p>The parameters for the device to run the task on.</p>
    pub fn device_parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_parameters(input.into());
        self
    }
    /// <p>The parameters for the device to run the task on.</p>
    pub fn set_device_parameters(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_device_parameters(input);
        self
    }
    /// <p>The number of shots to use for the task.</p>
    pub fn shots(mut self, input: i64) -> Self {
        self.inner = self.inner.shots(input);
        self
    }
    /// <p>The number of shots to use for the task.</p>
    pub fn set_shots(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_shots(input);
        self
    }
    /// <p>The S3 bucket to store task result files in.</p>
    pub fn output_s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_s3_bucket(input.into());
        self
    }
    /// <p>The S3 bucket to store task result files in.</p>
    pub fn set_output_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_s3_bucket(input);
        self
    }
    /// <p>The key prefix for the location in the S3 bucket to store task results in.</p>
    pub fn output_s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_s3_key_prefix(input.into());
        self
    }
    /// <p>The key prefix for the location in the S3 bucket to store task results in.</p>
    pub fn set_output_s3_key_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_output_s3_key_prefix(input);
        self
    }
    /// <p>The action associated with the task.</p>
    pub fn action(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action(input.into());
        self
    }
    /// <p>The action associated with the task.</p>
    pub fn set_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to be added to the quantum task you're creating.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to be added to the quantum task you're creating.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The token for an Amazon Braket job that associates it with the quantum task.</p>
    pub fn job_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_token(input.into());
        self
    }
    /// <p>The token for an Amazon Braket job that associates it with the quantum task.</p>
    pub fn set_job_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_token(input);
        self
    }
}
