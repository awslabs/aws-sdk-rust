// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchQuantumTasksInput {
    /// <p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Maximum number of results to return in the response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::SearchQuantumTasksFilter>>,
}
impl SearchQuantumTasksInput {
    /// <p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::SearchQuantumTasksFilter]> {
        self.filters.as_deref()
    }
}
impl SearchQuantumTasksInput {
    /// Creates a new builder-style object to manufacture [`SearchQuantumTasksInput`](crate::operation::search_quantum_tasks::SearchQuantumTasksInput).
    pub fn builder(
    ) -> crate::operation::search_quantum_tasks::builders::SearchQuantumTasksInputBuilder {
        crate::operation::search_quantum_tasks::builders::SearchQuantumTasksInputBuilder::default()
    }
}

/// A builder for [`SearchQuantumTasksInput`](crate::operation::search_quantum_tasks::SearchQuantumTasksInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchQuantumTasksInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::SearchQuantumTasksFilter>>,
}
impl SearchQuantumTasksInputBuilder {
    /// <p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
    pub fn filters(mut self, input: crate::types::SearchQuantumTasksFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SearchQuantumTasksFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchQuantumTasksInput`](crate::operation::search_quantum_tasks::SearchQuantumTasksInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_quantum_tasks::SearchQuantumTasksInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::search_quantum_tasks::SearchQuantumTasksInput {
                next_token: self.next_token,
                max_results: self.max_results,
                filters: self.filters,
            },
        )
    }
}
