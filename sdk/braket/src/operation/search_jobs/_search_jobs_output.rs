// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchJobsOutput {
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    #[doc(hidden)]
    pub jobs: std::option::Option<std::vec::Vec<crate::types::JobSummary>>,
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchJobsOutput {
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    pub fn jobs(&self) -> std::option::Option<&[crate::types::JobSummary]> {
        self.jobs.as_deref()
    }
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchJobsOutput {
    /// Creates a new builder-style object to manufacture [`SearchJobsOutput`](crate::operation::search_jobs::SearchJobsOutput).
    pub fn builder() -> crate::operation::search_jobs::builders::SearchJobsOutputBuilder {
        crate::operation::search_jobs::builders::SearchJobsOutputBuilder::default()
    }
}

/// A builder for [`SearchJobsOutput`](crate::operation::search_jobs::SearchJobsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchJobsOutputBuilder {
    pub(crate) jobs: std::option::Option<std::vec::Vec<crate::types::JobSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchJobsOutputBuilder {
    /// Appends an item to `jobs`.
    ///
    /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
    ///
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    pub fn jobs(mut self, input: crate::types::JobSummary) -> Self {
        let mut v = self.jobs.unwrap_or_default();
        v.push(input);
        self.jobs = Some(v);
        self
    }
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    pub fn set_jobs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JobSummary>>,
    ) -> Self {
        self.jobs = input;
        self
    }
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchJobsOutput`](crate::operation::search_jobs::SearchJobsOutput).
    pub fn build(self) -> crate::operation::search_jobs::SearchJobsOutput {
        crate::operation::search_jobs::SearchJobsOutput {
            jobs: self.jobs,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
