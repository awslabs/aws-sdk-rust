// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    pub quantum_task_arn: ::std::string::String,
    /// <p>The status of the cancellation request.</p>
    pub cancellation_status: crate::types::CancellationStatus,
    _request_id: Option<String>,
}
impl CancelQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    pub fn quantum_task_arn(&self) -> &str {
        use std::ops::Deref;
        self.quantum_task_arn.deref()
    }
    /// <p>The status of the cancellation request.</p>
    pub fn cancellation_status(&self) -> &crate::types::CancellationStatus {
        &self.cancellation_status
    }
}
impl ::aws_http::request_id::RequestId for CancelQuantumTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelQuantumTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelQuantumTaskOutput`](crate::operation::cancel_quantum_task::CancelQuantumTaskOutput).
    pub fn builder() -> crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder {
        crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder::default()
    }
}

/// A builder for [`CancelQuantumTaskOutput`](crate::operation::cancel_quantum_task::CancelQuantumTaskOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelQuantumTaskOutputBuilder {
    pub(crate) quantum_task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cancellation_status: ::std::option::Option<crate::types::CancellationStatus>,
    _request_id: Option<String>,
}
impl CancelQuantumTaskOutputBuilder {
    /// <p>The ARN of the task.</p>
    /// This field is required.
    pub fn quantum_task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quantum_task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the task.</p>
    pub fn set_quantum_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quantum_task_arn = input;
        self
    }
    /// <p>The ARN of the task.</p>
    pub fn get_quantum_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.quantum_task_arn
    }
    /// <p>The status of the cancellation request.</p>
    /// This field is required.
    pub fn cancellation_status(mut self, input: crate::types::CancellationStatus) -> Self {
        self.cancellation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the cancellation request.</p>
    pub fn set_cancellation_status(mut self, input: ::std::option::Option<crate::types::CancellationStatus>) -> Self {
        self.cancellation_status = input;
        self
    }
    /// <p>The status of the cancellation request.</p>
    pub fn get_cancellation_status(&self) -> &::std::option::Option<crate::types::CancellationStatus> {
        &self.cancellation_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CancelQuantumTaskOutput`](crate::operation::cancel_quantum_task::CancelQuantumTaskOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`quantum_task_arn`](crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder::quantum_task_arn)
    /// - [`cancellation_status`](crate::operation::cancel_quantum_task::builders::CancelQuantumTaskOutputBuilder::cancellation_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_quantum_task::CancelQuantumTaskOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::cancel_quantum_task::CancelQuantumTaskOutput {
            quantum_task_arn: self.quantum_task_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quantum_task_arn",
                    "quantum_task_arn was not specified but it is required when building CancelQuantumTaskOutput",
                )
            })?,
            cancellation_status: self.cancellation_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cancellation_status",
                    "cancellation_status was not specified but it is required when building CancelQuantumTaskOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
