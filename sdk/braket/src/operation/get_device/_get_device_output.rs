// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceOutput {
    /// <p>The ARN of the device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>The name of the device.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The name of the partner company for the device.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The type of the device.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<crate::types::DeviceType>,
    /// <p>The status of the device.</p>
    #[doc(hidden)]
    pub device_status: std::option::Option<crate::types::DeviceStatus>,
    /// <p>Details about the capabilities of the device.</p>
    #[doc(hidden)]
    pub device_capabilities: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDeviceOutput {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The name of the device.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The name of the partner company for the device.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The type of the device.</p>
    pub fn device_type(&self) -> std::option::Option<&crate::types::DeviceType> {
        self.device_type.as_ref()
    }
    /// <p>The status of the device.</p>
    pub fn device_status(&self) -> std::option::Option<&crate::types::DeviceStatus> {
        self.device_status.as_ref()
    }
    /// <p>Details about the capabilities of the device.</p>
    pub fn device_capabilities(&self) -> std::option::Option<&str> {
        self.device_capabilities.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
    pub fn builder() -> crate::operation::get_device::builders::GetDeviceOutputBuilder {
        crate::operation::get_device::builders::GetDeviceOutputBuilder::default()
    }
}

/// A builder for [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceOutputBuilder {
    pub(crate) device_arn: std::option::Option<std::string::String>,
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) device_type: std::option::Option<crate::types::DeviceType>,
    pub(crate) device_status: std::option::Option<crate::types::DeviceStatus>,
    pub(crate) device_capabilities: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDeviceOutputBuilder {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The name of the device.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The name of the device.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The name of the partner company for the device.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the partner company for the device.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The type of the device.</p>
    pub fn device_type(mut self, input: crate::types::DeviceType) -> Self {
        self.device_type = Some(input);
        self
    }
    /// <p>The type of the device.</p>
    pub fn set_device_type(mut self, input: std::option::Option<crate::types::DeviceType>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The status of the device.</p>
    pub fn device_status(mut self, input: crate::types::DeviceStatus) -> Self {
        self.device_status = Some(input);
        self
    }
    /// <p>The status of the device.</p>
    pub fn set_device_status(
        mut self,
        input: std::option::Option<crate::types::DeviceStatus>,
    ) -> Self {
        self.device_status = input;
        self
    }
    /// <p>Details about the capabilities of the device.</p>
    pub fn device_capabilities(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_capabilities = Some(input.into());
        self
    }
    /// <p>Details about the capabilities of the device.</p>
    pub fn set_device_capabilities(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_capabilities = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
    pub fn build(self) -> crate::operation::get_device::GetDeviceOutput {
        crate::operation::get_device::GetDeviceOutput {
            device_arn: self.device_arn,
            device_name: self.device_name,
            provider_name: self.provider_name,
            device_type: self.device_type,
            device_status: self.device_status,
            device_capabilities: self.device_capabilities,
            _request_id: self._request_id,
        }
    }
}
