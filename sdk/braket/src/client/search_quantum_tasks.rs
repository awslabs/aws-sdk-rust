// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SearchQuantumTasks`](crate::client::fluent_builders::SearchQuantumTasks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::SearchQuantumTasks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::SearchQuantumTasks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::SearchQuantumTasks::set_next_token): <p>A token used for pagination of results returned in the response. Use the token returned from the previous request continue results where the previous request ended.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::SearchQuantumTasks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::SearchQuantumTasks::set_max_results): <p>Maximum number of results to return in the response.</p>
    ///   - [`filters(Vec<SearchQuantumTasksFilter>)`](crate::client::fluent_builders::SearchQuantumTasks::filters) / [`set_filters(Option<Vec<SearchQuantumTasksFilter>>)`](crate::client::fluent_builders::SearchQuantumTasks::set_filters): <p>Array of <code>SearchQuantumTasksFilter</code> objects.</p>
    /// - On success, responds with [`SearchQuantumTasksOutput`](crate::output::SearchQuantumTasksOutput) with field(s):
    ///   - [`quantum_tasks(Option<Vec<QuantumTaskSummary>>)`](crate::output::SearchQuantumTasksOutput::quantum_tasks): <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>
    ///   - [`next_token(Option<String>)`](crate::output::SearchQuantumTasksOutput::next_token): <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    /// - On failure, responds with [`SdkError<SearchQuantumTasksError>`](crate::error::SearchQuantumTasksError)
    pub fn search_quantum_tasks(&self) -> crate::client::fluent_builders::SearchQuantumTasks {
        crate::client::fluent_builders::SearchQuantumTasks::new(self.handle.clone())
    }
}
