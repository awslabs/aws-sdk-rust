// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchQuantumTasksOutput {
    /// <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>
    #[doc(hidden)]
    pub quantum_tasks: std::option::Option<std::vec::Vec<crate::model::QuantumTaskSummary>>,
    /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchQuantumTasksOutput {
    /// <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>
    pub fn quantum_tasks(&self) -> std::option::Option<&[crate::model::QuantumTaskSummary]> {
        self.quantum_tasks.as_deref()
    }
    /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchQuantumTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchQuantumTasksOutput {
    /// Creates a new builder-style object to manufacture [`SearchQuantumTasksOutput`](crate::output::SearchQuantumTasksOutput).
    pub fn builder() -> crate::output::search_quantum_tasks_output::Builder {
        crate::output::search_quantum_tasks_output::Builder::default()
    }
}

/// See [`SearchQuantumTasksOutput`](crate::output::SearchQuantumTasksOutput).
pub mod search_quantum_tasks_output {

    /// A builder for [`SearchQuantumTasksOutput`](crate::output::SearchQuantumTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quantum_tasks:
            std::option::Option<std::vec::Vec<crate::model::QuantumTaskSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `quantum_tasks`.
        ///
        /// To override the contents of this collection use [`set_quantum_tasks`](Self::set_quantum_tasks).
        ///
        /// <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>
        pub fn quantum_tasks(mut self, input: crate::model::QuantumTaskSummary) -> Self {
            let mut v = self.quantum_tasks.unwrap_or_default();
            v.push(input);
            self.quantum_tasks = Some(v);
            self
        }
        /// <p>An array of <code>QuantumTaskSummary</code> objects for tasks that match the specified filters.</p>
        pub fn set_quantum_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QuantumTaskSummary>>,
        ) -> Self {
            self.quantum_tasks = input;
            self
        }
        /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchQuantumTasksOutput`](crate::output::SearchQuantumTasksOutput).
        pub fn build(self) -> crate::output::SearchQuantumTasksOutput {
            crate::output::SearchQuantumTasksOutput {
                quantum_tasks: self.quantum_tasks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateQuantumTaskOutput {
    /// <p>The ARN of the task created by the request.</p>
    #[doc(hidden)]
    pub quantum_task_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateQuantumTaskOutput {
    /// <p>The ARN of the task created by the request.</p>
    pub fn quantum_task_arn(&self) -> std::option::Option<&str> {
        self.quantum_task_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateQuantumTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateQuantumTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateQuantumTaskOutput`](crate::output::CreateQuantumTaskOutput).
    pub fn builder() -> crate::output::create_quantum_task_output::Builder {
        crate::output::create_quantum_task_output::Builder::default()
    }
}

/// See [`CreateQuantumTaskOutput`](crate::output::CreateQuantumTaskOutput).
pub mod create_quantum_task_output {

    /// A builder for [`CreateQuantumTaskOutput`](crate::output::CreateQuantumTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quantum_task_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the task created by the request.</p>
        pub fn quantum_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.quantum_task_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the task created by the request.</p>
        pub fn set_quantum_task_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.quantum_task_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateQuantumTaskOutput`](crate::output::CreateQuantumTaskOutput).
        pub fn build(self) -> crate::output::CreateQuantumTaskOutput {
            crate::output::CreateQuantumTaskOutput {
                quantum_task_arn: self.quantum_task_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    #[doc(hidden)]
    pub quantum_task_arn: std::option::Option<std::string::String>,
    /// <p>The status of the cancellation request.</p>
    #[doc(hidden)]
    pub cancellation_status: std::option::Option<crate::model::CancellationStatus>,
    _request_id: Option<String>,
}
impl CancelQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    pub fn quantum_task_arn(&self) -> std::option::Option<&str> {
        self.quantum_task_arn.as_deref()
    }
    /// <p>The status of the cancellation request.</p>
    pub fn cancellation_status(&self) -> std::option::Option<&crate::model::CancellationStatus> {
        self.cancellation_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CancelQuantumTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelQuantumTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelQuantumTaskOutput`](crate::output::CancelQuantumTaskOutput).
    pub fn builder() -> crate::output::cancel_quantum_task_output::Builder {
        crate::output::cancel_quantum_task_output::Builder::default()
    }
}

/// See [`CancelQuantumTaskOutput`](crate::output::CancelQuantumTaskOutput).
pub mod cancel_quantum_task_output {

    /// A builder for [`CancelQuantumTaskOutput`](crate::output::CancelQuantumTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quantum_task_arn: std::option::Option<std::string::String>,
        pub(crate) cancellation_status: std::option::Option<crate::model::CancellationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the task.</p>
        pub fn quantum_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.quantum_task_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the task.</p>
        pub fn set_quantum_task_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.quantum_task_arn = input;
            self
        }
        /// <p>The status of the cancellation request.</p>
        pub fn cancellation_status(mut self, input: crate::model::CancellationStatus) -> Self {
            self.cancellation_status = Some(input);
            self
        }
        /// <p>The status of the cancellation request.</p>
        pub fn set_cancellation_status(
            mut self,
            input: std::option::Option<crate::model::CancellationStatus>,
        ) -> Self {
            self.cancellation_status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelQuantumTaskOutput`](crate::output::CancelQuantumTaskOutput).
        pub fn build(self) -> crate::output::CancelQuantumTaskOutput {
            crate::output::CancelQuantumTaskOutput {
                quantum_task_arn: self.quantum_task_arn,
                cancellation_status: self.cancellation_status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    #[doc(hidden)]
    pub quantum_task_arn: std::option::Option<std::string::String>,
    /// <p>The status of the task.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::QuantumTaskStatus>,
    /// <p>The reason that a task failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The ARN of the device the task was run on.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>The parameters for the device on which the task ran.</p>
    #[doc(hidden)]
    pub device_parameters: std::option::Option<std::string::String>,
    /// <p>The number of shots used in the task.</p>
    #[doc(hidden)]
    pub shots: std::option::Option<i64>,
    /// <p>The S3 bucket where task results are stored.</p>
    #[doc(hidden)]
    pub output_s3_bucket: std::option::Option<std::string::String>,
    /// <p>The folder in the S3 bucket where task results are stored.</p>
    #[doc(hidden)]
    pub output_s3_directory: std::option::Option<std::string::String>,
    /// <p>The time at which the task was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the task ended.</p>
    #[doc(hidden)]
    pub ended_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The tags that belong to this task.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The ARN of the Amazon Braket job associated with the quantum task.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetQuantumTaskOutput {
    /// <p>The ARN of the task.</p>
    pub fn quantum_task_arn(&self) -> std::option::Option<&str> {
        self.quantum_task_arn.as_deref()
    }
    /// <p>The status of the task.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::QuantumTaskStatus> {
        self.status.as_ref()
    }
    /// <p>The reason that a task failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The ARN of the device the task was run on.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The parameters for the device on which the task ran.</p>
    pub fn device_parameters(&self) -> std::option::Option<&str> {
        self.device_parameters.as_deref()
    }
    /// <p>The number of shots used in the task.</p>
    pub fn shots(&self) -> std::option::Option<i64> {
        self.shots
    }
    /// <p>The S3 bucket where task results are stored.</p>
    pub fn output_s3_bucket(&self) -> std::option::Option<&str> {
        self.output_s3_bucket.as_deref()
    }
    /// <p>The folder in the S3 bucket where task results are stored.</p>
    pub fn output_s3_directory(&self) -> std::option::Option<&str> {
        self.output_s3_directory.as_deref()
    }
    /// <p>The time at which the task was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time at which the task ended.</p>
    pub fn ended_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The tags that belong to this task.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The ARN of the Amazon Braket job associated with the quantum task.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetQuantumTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetQuantumTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetQuantumTaskOutput`](crate::output::GetQuantumTaskOutput).
    pub fn builder() -> crate::output::get_quantum_task_output::Builder {
        crate::output::get_quantum_task_output::Builder::default()
    }
}

/// See [`GetQuantumTaskOutput`](crate::output::GetQuantumTaskOutput).
pub mod get_quantum_task_output {

    /// A builder for [`GetQuantumTaskOutput`](crate::output::GetQuantumTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) quantum_task_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::QuantumTaskStatus>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        pub(crate) device_arn: std::option::Option<std::string::String>,
        pub(crate) device_parameters: std::option::Option<std::string::String>,
        pub(crate) shots: std::option::Option<i64>,
        pub(crate) output_s3_bucket: std::option::Option<std::string::String>,
        pub(crate) output_s3_directory: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) ended_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) job_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the task.</p>
        pub fn quantum_task_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.quantum_task_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the task.</p>
        pub fn set_quantum_task_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.quantum_task_arn = input;
            self
        }
        /// <p>The status of the task.</p>
        pub fn status(mut self, input: crate::model::QuantumTaskStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the task.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::QuantumTaskStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The reason that a task failed.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>The reason that a task failed.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        /// <p>The ARN of the device the task was run on.</p>
        pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the device the task was run on.</p>
        pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device_arn = input;
            self
        }
        /// <p>The parameters for the device on which the task ran.</p>
        pub fn device_parameters(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_parameters = Some(input.into());
            self
        }
        /// <p>The parameters for the device on which the task ran.</p>
        pub fn set_device_parameters(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_parameters = input;
            self
        }
        /// <p>The number of shots used in the task.</p>
        pub fn shots(mut self, input: i64) -> Self {
            self.shots = Some(input);
            self
        }
        /// <p>The number of shots used in the task.</p>
        pub fn set_shots(mut self, input: std::option::Option<i64>) -> Self {
            self.shots = input;
            self
        }
        /// <p>The S3 bucket where task results are stored.</p>
        pub fn output_s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.output_s3_bucket = Some(input.into());
            self
        }
        /// <p>The S3 bucket where task results are stored.</p>
        pub fn set_output_s3_bucket(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.output_s3_bucket = input;
            self
        }
        /// <p>The folder in the S3 bucket where task results are stored.</p>
        pub fn output_s3_directory(mut self, input: impl Into<std::string::String>) -> Self {
            self.output_s3_directory = Some(input.into());
            self
        }
        /// <p>The folder in the S3 bucket where task results are stored.</p>
        pub fn set_output_s3_directory(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.output_s3_directory = input;
            self
        }
        /// <p>The time at which the task was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The time at which the task was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time at which the task ended.</p>
        pub fn ended_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.ended_at = Some(input);
            self
        }
        /// <p>The time at which the task ended.</p>
        pub fn set_ended_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.ended_at = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags that belong to this task.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags that belong to this task.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The ARN of the Amazon Braket job associated with the quantum task.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Braket job associated with the quantum task.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetQuantumTaskOutput`](crate::output::GetQuantumTaskOutput).
        pub fn build(self) -> crate::output::GetQuantumTaskOutput {
            crate::output::GetQuantumTaskOutput {
                quantum_task_arn: self.quantum_task_arn,
                status: self.status,
                failure_reason: self.failure_reason,
                device_arn: self.device_arn,
                device_parameters: self.device_parameters,
                shots: self.shots,
                output_s3_bucket: self.output_s3_bucket,
                output_s3_directory: self.output_s3_directory,
                created_at: self.created_at,
                ended_at: self.ended_at,
                tags: self.tags,
                job_arn: self.job_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchJobsOutput {
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    #[doc(hidden)]
    pub jobs: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchJobsOutput {
    /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
    pub fn jobs(&self) -> std::option::Option<&[crate::model::JobSummary]> {
        self.jobs.as_deref()
    }
    /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchJobsOutput {
    /// Creates a new builder-style object to manufacture [`SearchJobsOutput`](crate::output::SearchJobsOutput).
    pub fn builder() -> crate::output::search_jobs_output::Builder {
        crate::output::search_jobs_output::Builder::default()
    }
}

/// See [`SearchJobsOutput`](crate::output::SearchJobsOutput).
pub mod search_jobs_output {

    /// A builder for [`SearchJobsOutput`](crate::output::SearchJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) jobs: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `jobs`.
        ///
        /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
        ///
        /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
        pub fn jobs(mut self, input: crate::model::JobSummary) -> Self {
            let mut v = self.jobs.unwrap_or_default();
            v.push(input);
            self.jobs = Some(v);
            self
        }
        /// <p>An array of <code>JobSummary</code> objects for devices that match the specified filter values.</p>
        pub fn set_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        ) -> Self {
            self.jobs = input;
            self
        }
        /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results, or <code>null</code> if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchJobsOutput`](crate::output::SearchJobsOutput).
        pub fn build(self) -> crate::output::SearchJobsOutput {
            crate::output::SearchJobsOutput {
                jobs: self.jobs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateJobOutput {
    /// <p>The ARN of the Amazon Braket job created.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateJobOutput {
    /// <p>The ARN of the Amazon Braket job created.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateJobOutput`](crate::output::CreateJobOutput).
    pub fn builder() -> crate::output::create_job_output::Builder {
        crate::output::create_job_output::Builder::default()
    }
}

/// See [`CreateJobOutput`](crate::output::CreateJobOutput).
pub mod create_job_output {

    /// A builder for [`CreateJobOutput`](crate::output::CreateJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the Amazon Braket job created.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Braket job created.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateJobOutput`](crate::output::CreateJobOutput).
        pub fn build(self) -> crate::output::CreateJobOutput {
            crate::output::CreateJobOutput {
                job_arn: self.job_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelJobOutput {
    /// <p>The ARN of the Amazon Braket job.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The status of the job cancellation request.</p>
    #[doc(hidden)]
    pub cancellation_status: std::option::Option<crate::model::CancellationStatus>,
    _request_id: Option<String>,
}
impl CancelJobOutput {
    /// <p>The ARN of the Amazon Braket job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The status of the job cancellation request.</p>
    pub fn cancellation_status(&self) -> std::option::Option<&crate::model::CancellationStatus> {
        self.cancellation_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CancelJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelJobOutput`](crate::output::CancelJobOutput).
    pub fn builder() -> crate::output::cancel_job_output::Builder {
        crate::output::cancel_job_output::Builder::default()
    }
}

/// See [`CancelJobOutput`](crate::output::CancelJobOutput).
pub mod cancel_job_output {

    /// A builder for [`CancelJobOutput`](crate::output::CancelJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_arn: std::option::Option<std::string::String>,
        pub(crate) cancellation_status: std::option::Option<crate::model::CancellationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the Amazon Braket job.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Braket job.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        /// <p>The status of the job cancellation request.</p>
        pub fn cancellation_status(mut self, input: crate::model::CancellationStatus) -> Self {
            self.cancellation_status = Some(input);
            self
        }
        /// <p>The status of the job cancellation request.</p>
        pub fn set_cancellation_status(
            mut self,
            input: std::option::Option<crate::model::CancellationStatus>,
        ) -> Self {
            self.cancellation_status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelJobOutput`](crate::output::CancelJobOutput).
        pub fn build(self) -> crate::output::CancelJobOutput {
            crate::output::CancelJobOutput {
                job_arn: self.job_arn,
                cancellation_status: self.cancellation_status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetJobOutput {
    /// <p>The status of the Amazon Braket job.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::JobPrimaryStatus>,
    /// <p>The ARN of the Amazon Braket job.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the s3 buckets of a user.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>A description of the reason why an Amazon Braket job failed, if it failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Braket job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the traiing job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>
    #[doc(hidden)]
    pub hyper_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of parameters that specify the name and type of input data and where it is located.</p>
    #[doc(hidden)]
    pub input_data_config: std::option::Option<std::vec::Vec<crate::model::InputFileConfig>>,
    /// <p>The path to the S3 location where job artifacts are stored and the encryption key used to store them there.</p>
    #[doc(hidden)]
    pub output_data_config: std::option::Option<crate::model::JobOutputDataConfig>,
    /// <p>The user-defined criteria that specifies when to stop a job running.</p>
    #[doc(hidden)]
    pub stopping_condition: std::option::Option<crate::model::JobStoppingCondition>,
    /// <p>Information about the output locations for job checkpoint data.</p>
    #[doc(hidden)]
    pub checkpoint_config: std::option::Option<crate::model::JobCheckpointConfig>,
    /// <p>Definition of the Amazon Braket job created. Specifies the container image the job uses, information about the Python scripts used for entry and training, and the user-defined metrics used to evaluation the job.</p>
    #[doc(hidden)]
    pub algorithm_specification: std::option::Option<crate::model::AlgorithmSpecification>,
    /// <p>The resource instances to use while running the hybrid job on Amazon Braket.</p>
    #[doc(hidden)]
    pub instance_config: std::option::Option<crate::model::InstanceConfig>,
    /// <p>The date and time that the Amazon Braket job was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the Amazon Braket job was started.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the Amazon Braket job ended.</p>
    #[doc(hidden)]
    pub ended_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The billable time the Amazon Braket job used to complete.</p>
    #[doc(hidden)]
    pub billable_duration: std::option::Option<i32>,
    /// <p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>
    #[doc(hidden)]
    pub device_config: std::option::Option<crate::model::DeviceConfig>,
    /// <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<crate::model::JobEventDetails>>,
    /// <p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetJobOutput {
    /// <p>The status of the Amazon Braket job.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::JobPrimaryStatus> {
        self.status.as_ref()
    }
    /// <p>The ARN of the Amazon Braket job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the s3 buckets of a user.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A description of the reason why an Amazon Braket job failed, if it failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The name of the Amazon Braket job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the traiing job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>
    pub fn hyper_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.hyper_parameters.as_ref()
    }
    /// <p>A list of parameters that specify the name and type of input data and where it is located.</p>
    pub fn input_data_config(&self) -> std::option::Option<&[crate::model::InputFileConfig]> {
        self.input_data_config.as_deref()
    }
    /// <p>The path to the S3 location where job artifacts are stored and the encryption key used to store them there.</p>
    pub fn output_data_config(&self) -> std::option::Option<&crate::model::JobOutputDataConfig> {
        self.output_data_config.as_ref()
    }
    /// <p>The user-defined criteria that specifies when to stop a job running.</p>
    pub fn stopping_condition(&self) -> std::option::Option<&crate::model::JobStoppingCondition> {
        self.stopping_condition.as_ref()
    }
    /// <p>Information about the output locations for job checkpoint data.</p>
    pub fn checkpoint_config(&self) -> std::option::Option<&crate::model::JobCheckpointConfig> {
        self.checkpoint_config.as_ref()
    }
    /// <p>Definition of the Amazon Braket job created. Specifies the container image the job uses, information about the Python scripts used for entry and training, and the user-defined metrics used to evaluation the job.</p>
    pub fn algorithm_specification(
        &self,
    ) -> std::option::Option<&crate::model::AlgorithmSpecification> {
        self.algorithm_specification.as_ref()
    }
    /// <p>The resource instances to use while running the hybrid job on Amazon Braket.</p>
    pub fn instance_config(&self) -> std::option::Option<&crate::model::InstanceConfig> {
        self.instance_config.as_ref()
    }
    /// <p>The date and time that the Amazon Braket job was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time that the Amazon Braket job was started.</p>
    pub fn started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time that the Amazon Braket job ended.</p>
    pub fn ended_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The billable time the Amazon Braket job used to complete.</p>
    pub fn billable_duration(&self) -> std::option::Option<i32> {
        self.billable_duration
    }
    /// <p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>
    pub fn device_config(&self) -> std::option::Option<&crate::model::DeviceConfig> {
        self.device_config.as_ref()
    }
    /// <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
    pub fn events(&self) -> std::option::Option<&[crate::model::JobEventDetails]> {
        self.events.as_deref()
    }
    /// <p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetJobOutput {
    /// Creates a new builder-style object to manufacture [`GetJobOutput`](crate::output::GetJobOutput).
    pub fn builder() -> crate::output::get_job_output::Builder {
        crate::output::get_job_output::Builder::default()
    }
}

/// See [`GetJobOutput`](crate::output::GetJobOutput).
pub mod get_job_output {

    /// A builder for [`GetJobOutput`](crate::output::GetJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::JobPrimaryStatus>,
        pub(crate) job_arn: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        pub(crate) job_name: std::option::Option<std::string::String>,
        pub(crate) hyper_parameters: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) input_data_config:
            std::option::Option<std::vec::Vec<crate::model::InputFileConfig>>,
        pub(crate) output_data_config: std::option::Option<crate::model::JobOutputDataConfig>,
        pub(crate) stopping_condition: std::option::Option<crate::model::JobStoppingCondition>,
        pub(crate) checkpoint_config: std::option::Option<crate::model::JobCheckpointConfig>,
        pub(crate) algorithm_specification:
            std::option::Option<crate::model::AlgorithmSpecification>,
        pub(crate) instance_config: std::option::Option<crate::model::InstanceConfig>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) started_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) ended_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) billable_duration: std::option::Option<i32>,
        pub(crate) device_config: std::option::Option<crate::model::DeviceConfig>,
        pub(crate) events: std::option::Option<std::vec::Vec<crate::model::JobEventDetails>>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The status of the Amazon Braket job.</p>
        pub fn status(mut self, input: crate::model::JobPrimaryStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the Amazon Braket job.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::JobPrimaryStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The ARN of the Amazon Braket job.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Braket job.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the s3 buckets of a user.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the s3 buckets of a user.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>A description of the reason why an Amazon Braket job failed, if it failed.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>A description of the reason why an Amazon Braket job failed, if it failed.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        /// <p>The name of the Amazon Braket job.</p>
        pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_name = Some(input.into());
            self
        }
        /// <p>The name of the Amazon Braket job.</p>
        pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_name = input;
            self
        }
        /// Adds a key-value pair to `hyper_parameters`.
        ///
        /// To override the contents of this collection use [`set_hyper_parameters`](Self::set_hyper_parameters).
        ///
        /// <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the traiing job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>
        pub fn hyper_parameters(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.hyper_parameters.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.hyper_parameters = Some(hash_map);
            self
        }
        /// <p>Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the traiing job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.</p>
        pub fn set_hyper_parameters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.hyper_parameters = input;
            self
        }
        /// Appends an item to `input_data_config`.
        ///
        /// To override the contents of this collection use [`set_input_data_config`](Self::set_input_data_config).
        ///
        /// <p>A list of parameters that specify the name and type of input data and where it is located.</p>
        pub fn input_data_config(mut self, input: crate::model::InputFileConfig) -> Self {
            let mut v = self.input_data_config.unwrap_or_default();
            v.push(input);
            self.input_data_config = Some(v);
            self
        }
        /// <p>A list of parameters that specify the name and type of input data and where it is located.</p>
        pub fn set_input_data_config(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InputFileConfig>>,
        ) -> Self {
            self.input_data_config = input;
            self
        }
        /// <p>The path to the S3 location where job artifacts are stored and the encryption key used to store them there.</p>
        pub fn output_data_config(mut self, input: crate::model::JobOutputDataConfig) -> Self {
            self.output_data_config = Some(input);
            self
        }
        /// <p>The path to the S3 location where job artifacts are stored and the encryption key used to store them there.</p>
        pub fn set_output_data_config(
            mut self,
            input: std::option::Option<crate::model::JobOutputDataConfig>,
        ) -> Self {
            self.output_data_config = input;
            self
        }
        /// <p>The user-defined criteria that specifies when to stop a job running.</p>
        pub fn stopping_condition(mut self, input: crate::model::JobStoppingCondition) -> Self {
            self.stopping_condition = Some(input);
            self
        }
        /// <p>The user-defined criteria that specifies when to stop a job running.</p>
        pub fn set_stopping_condition(
            mut self,
            input: std::option::Option<crate::model::JobStoppingCondition>,
        ) -> Self {
            self.stopping_condition = input;
            self
        }
        /// <p>Information about the output locations for job checkpoint data.</p>
        pub fn checkpoint_config(mut self, input: crate::model::JobCheckpointConfig) -> Self {
            self.checkpoint_config = Some(input);
            self
        }
        /// <p>Information about the output locations for job checkpoint data.</p>
        pub fn set_checkpoint_config(
            mut self,
            input: std::option::Option<crate::model::JobCheckpointConfig>,
        ) -> Self {
            self.checkpoint_config = input;
            self
        }
        /// <p>Definition of the Amazon Braket job created. Specifies the container image the job uses, information about the Python scripts used for entry and training, and the user-defined metrics used to evaluation the job.</p>
        pub fn algorithm_specification(
            mut self,
            input: crate::model::AlgorithmSpecification,
        ) -> Self {
            self.algorithm_specification = Some(input);
            self
        }
        /// <p>Definition of the Amazon Braket job created. Specifies the container image the job uses, information about the Python scripts used for entry and training, and the user-defined metrics used to evaluation the job.</p>
        pub fn set_algorithm_specification(
            mut self,
            input: std::option::Option<crate::model::AlgorithmSpecification>,
        ) -> Self {
            self.algorithm_specification = input;
            self
        }
        /// <p>The resource instances to use while running the hybrid job on Amazon Braket.</p>
        pub fn instance_config(mut self, input: crate::model::InstanceConfig) -> Self {
            self.instance_config = Some(input);
            self
        }
        /// <p>The resource instances to use while running the hybrid job on Amazon Braket.</p>
        pub fn set_instance_config(
            mut self,
            input: std::option::Option<crate::model::InstanceConfig>,
        ) -> Self {
            self.instance_config = input;
            self
        }
        /// <p>The date and time that the Amazon Braket job was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The date and time that the Amazon Braket job was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The date and time that the Amazon Braket job was started.</p>
        pub fn started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.started_at = Some(input);
            self
        }
        /// <p>The date and time that the Amazon Braket job was started.</p>
        pub fn set_started_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.started_at = input;
            self
        }
        /// <p>The date and time that the Amazon Braket job ended.</p>
        pub fn ended_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.ended_at = Some(input);
            self
        }
        /// <p>The date and time that the Amazon Braket job ended.</p>
        pub fn set_ended_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.ended_at = input;
            self
        }
        /// <p>The billable time the Amazon Braket job used to complete.</p>
        pub fn billable_duration(mut self, input: i32) -> Self {
            self.billable_duration = Some(input);
            self
        }
        /// <p>The billable time the Amazon Braket job used to complete.</p>
        pub fn set_billable_duration(mut self, input: std::option::Option<i32>) -> Self {
            self.billable_duration = input;
            self
        }
        /// <p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>
        pub fn device_config(mut self, input: crate::model::DeviceConfig) -> Self {
            self.device_config = Some(input);
            self
        }
        /// <p>The quantum processing unit (QPU) or simulator used to run the Amazon Braket job.</p>
        pub fn set_device_config(
            mut self,
            input: std::option::Option<crate::model::DeviceConfig>,
        ) -> Self {
            self.device_config = input;
            self
        }
        /// Appends an item to `events`.
        ///
        /// To override the contents of this collection use [`set_events`](Self::set_events).
        ///
        /// <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
        pub fn events(mut self, input: crate::model::JobEventDetails) -> Self {
            let mut v = self.events.unwrap_or_default();
            v.push(input);
            self.events = Some(v);
            self
        }
        /// <p>Details about the type and time events occurred related to the Amazon Braket job.</p>
        pub fn set_events(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobEventDetails>>,
        ) -> Self {
            self.events = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetJobOutput`](crate::output::GetJobOutput).
        pub fn build(self) -> crate::output::GetJobOutput {
            crate::output::GetJobOutput {
                status: self.status,
                job_arn: self.job_arn,
                role_arn: self.role_arn,
                failure_reason: self.failure_reason,
                job_name: self.job_name,
                hyper_parameters: self.hyper_parameters,
                input_data_config: self.input_data_config,
                output_data_config: self.output_data_config,
                stopping_condition: self.stopping_condition,
                checkpoint_config: self.checkpoint_config,
                algorithm_specification: self.algorithm_specification,
                instance_config: self.instance_config,
                created_at: self.created_at,
                started_at: self.started_at,
                ended_at: self.ended_at,
                billable_duration: self.billable_duration,
                device_config: self.device_config,
                events: self.events,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchDevicesOutput {
    /// <p>An array of <code>DeviceSummary</code> objects for devices that match the specified filter values.</p>
    #[doc(hidden)]
    pub devices: std::option::Option<std::vec::Vec<crate::model::DeviceSummary>>,
    /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchDevicesOutput {
    /// <p>An array of <code>DeviceSummary</code> objects for devices that match the specified filter values.</p>
    pub fn devices(&self) -> std::option::Option<&[crate::model::DeviceSummary]> {
        self.devices.as_deref()
    }
    /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchDevicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchDevicesOutput {
    /// Creates a new builder-style object to manufacture [`SearchDevicesOutput`](crate::output::SearchDevicesOutput).
    pub fn builder() -> crate::output::search_devices_output::Builder {
        crate::output::search_devices_output::Builder::default()
    }
}

/// See [`SearchDevicesOutput`](crate::output::SearchDevicesOutput).
pub mod search_devices_output {

    /// A builder for [`SearchDevicesOutput`](crate::output::SearchDevicesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) devices: std::option::Option<std::vec::Vec<crate::model::DeviceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `devices`.
        ///
        /// To override the contents of this collection use [`set_devices`](Self::set_devices).
        ///
        /// <p>An array of <code>DeviceSummary</code> objects for devices that match the specified filter values.</p>
        pub fn devices(mut self, input: crate::model::DeviceSummary) -> Self {
            let mut v = self.devices.unwrap_or_default();
            v.push(input);
            self.devices = Some(v);
            self
        }
        /// <p>An array of <code>DeviceSummary</code> objects for devices that match the specified filter values.</p>
        pub fn set_devices(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeviceSummary>>,
        ) -> Self {
            self.devices = input;
            self
        }
        /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results, or null if there are no additional results. Use the token value in a subsequent request to continue results where the previous request ended.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchDevicesOutput`](crate::output::SearchDevicesOutput).
        pub fn build(self) -> crate::output::SearchDevicesOutput {
            crate::output::SearchDevicesOutput {
                devices: self.devices,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceOutput {
    /// <p>The ARN of the device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>The name of the device.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The name of the partner company for the device.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The type of the device.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<crate::model::DeviceType>,
    /// <p>The status of the device.</p>
    #[doc(hidden)]
    pub device_status: std::option::Option<crate::model::DeviceStatus>,
    /// <p>Details about the capabilities of the device.</p>
    #[doc(hidden)]
    pub device_capabilities: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDeviceOutput {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The name of the device.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The name of the partner company for the device.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The type of the device.</p>
    pub fn device_type(&self) -> std::option::Option<&crate::model::DeviceType> {
        self.device_type.as_ref()
    }
    /// <p>The status of the device.</p>
    pub fn device_status(&self) -> std::option::Option<&crate::model::DeviceStatus> {
        self.device_status.as_ref()
    }
    /// <p>Details about the capabilities of the device.</p>
    pub fn device_capabilities(&self) -> std::option::Option<&str> {
        self.device_capabilities.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceOutput`](crate::output::GetDeviceOutput).
    pub fn builder() -> crate::output::get_device_output::Builder {
        crate::output::get_device_output::Builder::default()
    }
}

/// See [`GetDeviceOutput`](crate::output::GetDeviceOutput).
pub mod get_device_output {

    /// A builder for [`GetDeviceOutput`](crate::output::GetDeviceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_arn: std::option::Option<std::string::String>,
        pub(crate) device_name: std::option::Option<std::string::String>,
        pub(crate) provider_name: std::option::Option<std::string::String>,
        pub(crate) device_type: std::option::Option<crate::model::DeviceType>,
        pub(crate) device_status: std::option::Option<crate::model::DeviceStatus>,
        pub(crate) device_capabilities: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the device.</p>
        pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the device.</p>
        pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device_arn = input;
            self
        }
        /// <p>The name of the device.</p>
        pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_name = Some(input.into());
            self
        }
        /// <p>The name of the device.</p>
        pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device_name = input;
            self
        }
        /// <p>The name of the partner company for the device.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.provider_name = Some(input.into());
            self
        }
        /// <p>The name of the partner company for the device.</p>
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.provider_name = input;
            self
        }
        /// <p>The type of the device.</p>
        pub fn device_type(mut self, input: crate::model::DeviceType) -> Self {
            self.device_type = Some(input);
            self
        }
        /// <p>The type of the device.</p>
        pub fn set_device_type(
            mut self,
            input: std::option::Option<crate::model::DeviceType>,
        ) -> Self {
            self.device_type = input;
            self
        }
        /// <p>The status of the device.</p>
        pub fn device_status(mut self, input: crate::model::DeviceStatus) -> Self {
            self.device_status = Some(input);
            self
        }
        /// <p>The status of the device.</p>
        pub fn set_device_status(
            mut self,
            input: std::option::Option<crate::model::DeviceStatus>,
        ) -> Self {
            self.device_status = input;
            self
        }
        /// <p>Details about the capabilities of the device.</p>
        pub fn device_capabilities(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_capabilities = Some(input.into());
            self
        }
        /// <p>Details about the capabilities of the device.</p>
        pub fn set_device_capabilities(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_capabilities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceOutput`](crate::output::GetDeviceOutput).
        pub fn build(self) -> crate::output::GetDeviceOutput {
            crate::output::GetDeviceOutput {
                device_arn: self.device_arn,
                device_name: self.device_name,
                provider_name: self.provider_name,
                device_type: self.device_type,
                device_status: self.device_status,
                device_capabilities: self.device_capabilities,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>Displays the key, value pairs of tags associated with this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>Displays the key, value pairs of tags associated with this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Displays the key, value pairs of tags associated with this resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Displays the key, value pairs of tags associated with this resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
