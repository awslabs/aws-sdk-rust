// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn unauthorized_exception_correct_errors(
    mut builder: crate::types::error::builders::UnauthorizedExceptionBuilder,
) -> crate::types::error::builders::UnauthorizedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn accept_predictions_output_correct_errors(
    mut builder: crate::operation::accept_predictions::builders::AcceptPredictionsOutputBuilder,
) -> crate::operation::accept_predictions::builders::AcceptPredictionsOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn accept_subscription_request_output_correct_errors(
    mut builder: crate::operation::accept_subscription_request::builders::AcceptSubscriptionRequestOutputBuilder,
) -> crate::operation::accept_subscription_request::builders::AcceptSubscriptionRequestOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_subscription_output_correct_errors(
    mut builder: crate::operation::cancel_subscription::builders::CancelSubscriptionOutputBuilder,
) -> crate::operation::cancel_subscription::builders::CancelSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscribed_principal.is_none() {
        builder.subscribed_principal = Some(crate::types::SubscribedPrincipal::Unknown)
    }
    if builder.subscribed_listing.is_none() {
        builder.subscribed_listing = {
            let builder = crate::types::builders::SubscribedListingBuilder::default();
            crate::serde_util::subscribed_listing_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_asset_output_correct_errors(
    mut builder: crate::operation::create_asset::builders::CreateAssetOutputBuilder,
) -> crate::operation::create_asset::builders::CreateAssetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.type_identifier.is_none() {
        builder.type_identifier = Some(Default::default())
    }
    if builder.type_revision.is_none() {
        builder.type_revision = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    builder
}

pub(crate) fn create_asset_revision_output_correct_errors(
    mut builder: crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder,
) -> crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.type_identifier.is_none() {
        builder.type_identifier = Some(Default::default())
    }
    if builder.type_revision.is_none() {
        builder.type_revision = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    builder
}

pub(crate) fn create_asset_type_output_correct_errors(
    mut builder: crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder,
) -> crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    builder
}

pub(crate) fn create_data_source_output_correct_errors(
    mut builder: crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder,
) -> crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_domain_output_correct_errors(
    mut builder: crate::operation::create_domain::builders::CreateDomainOutputBuilder,
) -> crate::operation::create_domain::builders::CreateDomainOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_environment_output_correct_errors(
    mut builder: crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder,
) -> crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_profile_id.is_none() {
        builder.environment_profile_id = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn create_environment_profile_output_correct_errors(
    mut builder: crate::operation::create_environment_profile::builders::CreateEnvironmentProfileOutputBuilder,
) -> crate::operation::create_environment_profile::builders::CreateEnvironmentProfileOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_form_type_output_correct_errors(
    mut builder: crate::operation::create_form_type::builders::CreateFormTypeOutputBuilder,
) -> crate::operation::create_form_type::builders::CreateFormTypeOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn create_glossary_output_correct_errors(
    mut builder: crate::operation::create_glossary::builders::CreateGlossaryOutputBuilder,
) -> crate::operation::create_glossary::builders::CreateGlossaryOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_glossary_term_output_correct_errors(
    mut builder: crate::operation::create_glossary_term::builders::CreateGlossaryTermOutputBuilder,
) -> crate::operation::create_glossary_term::builders::CreateGlossaryTermOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.glossary_id.is_none() {
        builder.glossary_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryTermStatus>().ok()
    }
    builder
}

pub(crate) fn create_listing_change_set_output_correct_errors(
    mut builder: crate::operation::create_listing_change_set::builders::CreateListingChangeSetOutputBuilder,
) -> crate::operation::create_listing_change_set::builders::CreateListingChangeSetOutputBuilder {
    if builder.listing_id.is_none() {
        builder.listing_id = Some(Default::default())
    }
    if builder.listing_revision.is_none() {
        builder.listing_revision = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ListingStatus>().ok()
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn create_subscription_grant_output_correct_errors(
    mut builder: crate::operation::create_subscription_grant::builders::CreateSubscriptionGrantOutputBuilder,
) -> crate::operation::create_subscription_grant::builders::CreateSubscriptionGrantOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscription_target_id.is_none() {
        builder.subscription_target_id = Some(Default::default())
    }
    if builder.granted_entity.is_none() {
        builder.granted_entity = Some(crate::types::GrantedEntity::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantOverallStatus>().ok()
    }
    builder
}

pub(crate) fn create_subscription_request_output_correct_errors(
    mut builder: crate::operation::create_subscription_request::builders::CreateSubscriptionRequestOutputBuilder,
) -> crate::operation::create_subscription_request::builders::CreateSubscriptionRequestOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn create_subscription_target_output_correct_errors(
    mut builder: crate::operation::create_subscription_target::builders::CreateSubscriptionTargetOutputBuilder,
) -> crate::operation::create_subscription_target::builders::CreateSubscriptionTargetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.authorized_principals.is_none() {
        builder.authorized_principals = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.manage_access_role.is_none() {
        builder.manage_access_role = Some(Default::default())
    }
    if builder.applicable_asset_types.is_none() {
        builder.applicable_asset_types = Some(Default::default())
    }
    if builder.subscription_target_config.is_none() {
        builder.subscription_target_config = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_data_source_output_correct_errors(
    mut builder: crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder,
) -> crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_domain_output_correct_errors(
    mut builder: crate::operation::delete_domain::builders::DeleteDomainOutputBuilder,
) -> crate::operation::delete_domain::builders::DeleteDomainOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DomainStatus>().ok()
    }
    builder
}

pub(crate) fn delete_subscription_grant_output_correct_errors(
    mut builder: crate::operation::delete_subscription_grant::builders::DeleteSubscriptionGrantOutputBuilder,
) -> crate::operation::delete_subscription_grant::builders::DeleteSubscriptionGrantOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscription_target_id.is_none() {
        builder.subscription_target_id = Some(Default::default())
    }
    if builder.granted_entity.is_none() {
        builder.granted_entity = Some(crate::types::GrantedEntity::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantOverallStatus>().ok()
    }
    builder
}

pub(crate) fn get_asset_output_correct_errors(
    mut builder: crate::operation::get_asset::builders::GetAssetOutputBuilder,
) -> crate::operation::get_asset::builders::GetAssetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.type_identifier.is_none() {
        builder.type_identifier = Some(Default::default())
    }
    if builder.type_revision.is_none() {
        builder.type_revision = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    builder
}

pub(crate) fn get_asset_type_output_correct_errors(
    mut builder: crate::operation::get_asset_type::builders::GetAssetTypeOutputBuilder,
) -> crate::operation::get_asset_type::builders::GetAssetTypeOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_data_source_output_correct_errors(
    mut builder: crate::operation::get_data_source::builders::GetDataSourceOutputBuilder,
) -> crate::operation::get_data_source::builders::GetDataSourceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_data_source_run_output_correct_errors(
    mut builder: crate::operation::get_data_source_run::builders::GetDataSourceRunOutputBuilder,
) -> crate::operation::get_data_source_run::builders::GetDataSourceRunOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceRunStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSourceRunType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_domain_output_correct_errors(
    mut builder: crate::operation::get_domain::builders::GetDomainOutputBuilder,
) -> crate::operation::get_domain::builders::GetDomainOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_execution_role.is_none() {
        builder.domain_execution_role = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DomainStatus>().ok()
    }
    builder
}

pub(crate) fn get_environment_output_correct_errors(
    mut builder: crate::operation::get_environment::builders::GetEnvironmentOutputBuilder,
) -> crate::operation::get_environment::builders::GetEnvironmentOutputBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_profile_id.is_none() {
        builder.environment_profile_id = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn get_environment_blueprint_output_correct_errors(
    mut builder: crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder,
) -> crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    if builder.provisioning_properties.is_none() {
        builder.provisioning_properties = Some(crate::types::ProvisioningProperties::Unknown)
    }
    builder
}

pub(crate) fn get_environment_blueprint_configuration_output_correct_errors(
    mut builder: crate::operation::get_environment_blueprint_configuration::builders::GetEnvironmentBlueprintConfigurationOutputBuilder,
) -> crate::operation::get_environment_blueprint_configuration::builders::GetEnvironmentBlueprintConfigurationOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_environment_profile_output_correct_errors(
    mut builder: crate::operation::get_environment_profile::builders::GetEnvironmentProfileOutputBuilder,
) -> crate::operation::get_environment_profile::builders::GetEnvironmentProfileOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_form_type_output_correct_errors(
    mut builder: crate::operation::get_form_type::builders::GetFormTypeOutputBuilder,
) -> crate::operation::get_form_type::builders::GetFormTypeOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.model.is_none() {
        builder.model = Some(crate::types::Model::Unknown)
    }
    builder
}

pub(crate) fn get_glossary_output_correct_errors(
    mut builder: crate::operation::get_glossary::builders::GetGlossaryOutputBuilder,
) -> crate::operation::get_glossary::builders::GetGlossaryOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryStatus>().ok()
    }
    builder
}

pub(crate) fn get_glossary_term_output_correct_errors(
    mut builder: crate::operation::get_glossary_term::builders::GetGlossaryTermOutputBuilder,
) -> crate::operation::get_glossary_term::builders::GetGlossaryTermOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.glossary_id.is_none() {
        builder.glossary_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryTermStatus>().ok()
    }
    builder
}

pub(crate) fn get_iam_portal_login_url_output_correct_errors(
    mut builder: crate::operation::get_iam_portal_login_url::builders::GetIamPortalLoginUrlOutputBuilder,
) -> crate::operation::get_iam_portal_login_url::builders::GetIamPortalLoginUrlOutputBuilder {
    if builder.user_profile_id.is_none() {
        builder.user_profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_listing_output_correct_errors(
    mut builder: crate::operation::get_listing::builders::GetListingOutputBuilder,
) -> crate::operation::get_listing::builders::GetListingOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.listing_revision.is_none() {
        builder.listing_revision = Some(Default::default())
    }
    builder
}

pub(crate) fn get_project_output_correct_errors(
    mut builder: crate::operation::get_project::builders::GetProjectOutputBuilder,
) -> crate::operation::get_project::builders::GetProjectOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_subscription_output_correct_errors(
    mut builder: crate::operation::get_subscription::builders::GetSubscriptionOutputBuilder,
) -> crate::operation::get_subscription::builders::GetSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscribed_principal.is_none() {
        builder.subscribed_principal = Some(crate::types::SubscribedPrincipal::Unknown)
    }
    if builder.subscribed_listing.is_none() {
        builder.subscribed_listing = {
            let builder = crate::types::builders::SubscribedListingBuilder::default();
            crate::serde_util::subscribed_listing_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_subscription_grant_output_correct_errors(
    mut builder: crate::operation::get_subscription_grant::builders::GetSubscriptionGrantOutputBuilder,
) -> crate::operation::get_subscription_grant::builders::GetSubscriptionGrantOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscription_target_id.is_none() {
        builder.subscription_target_id = Some(Default::default())
    }
    if builder.granted_entity.is_none() {
        builder.granted_entity = Some(crate::types::GrantedEntity::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantOverallStatus>().ok()
    }
    builder
}

pub(crate) fn get_subscription_request_details_output_correct_errors(
    mut builder: crate::operation::get_subscription_request_details::builders::GetSubscriptionRequestDetailsOutputBuilder,
) -> crate::operation::get_subscription_request_details::builders::GetSubscriptionRequestDetailsOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn get_subscription_target_output_correct_errors(
    mut builder: crate::operation::get_subscription_target::builders::GetSubscriptionTargetOutputBuilder,
) -> crate::operation::get_subscription_target::builders::GetSubscriptionTargetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.authorized_principals.is_none() {
        builder.authorized_principals = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.manage_access_role.is_none() {
        builder.manage_access_role = Some(Default::default())
    }
    if builder.applicable_asset_types.is_none() {
        builder.applicable_asset_types = Some(Default::default())
    }
    if builder.subscription_target_config.is_none() {
        builder.subscription_target_config = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_source_run_activities_output_correct_errors(
    mut builder: crate::operation::list_data_source_run_activities::builders::ListDataSourceRunActivitiesOutputBuilder,
) -> crate::operation::list_data_source_run_activities::builders::ListDataSourceRunActivitiesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_source_runs_output_correct_errors(
    mut builder: crate::operation::list_data_source_runs::builders::ListDataSourceRunsOutputBuilder,
) -> crate::operation::list_data_source_runs::builders::ListDataSourceRunsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_sources_output_correct_errors(
    mut builder: crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder,
) -> crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domains_output_correct_errors(
    mut builder: crate::operation::list_domains::builders::ListDomainsOutputBuilder,
) -> crate::operation::list_domains::builders::ListDomainsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_blueprints_output_correct_errors(
    mut builder: crate::operation::list_environment_blueprints::builders::ListEnvironmentBlueprintsOutputBuilder,
) -> crate::operation::list_environment_blueprints::builders::ListEnvironmentBlueprintsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_profiles_output_correct_errors(
    mut builder: crate::operation::list_environment_profiles::builders::ListEnvironmentProfilesOutputBuilder,
) -> crate::operation::list_environment_profiles::builders::ListEnvironmentProfilesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environments_output_correct_errors(
    mut builder: crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder,
) -> crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_project_memberships_output_correct_errors(
    mut builder: crate::operation::list_project_memberships::builders::ListProjectMembershipsOutputBuilder,
) -> crate::operation::list_project_memberships::builders::ListProjectMembershipsOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    builder
}

pub(crate) fn list_subscription_grants_output_correct_errors(
    mut builder: crate::operation::list_subscription_grants::builders::ListSubscriptionGrantsOutputBuilder,
) -> crate::operation::list_subscription_grants::builders::ListSubscriptionGrantsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_subscription_requests_output_correct_errors(
    mut builder: crate::operation::list_subscription_requests::builders::ListSubscriptionRequestsOutputBuilder,
) -> crate::operation::list_subscription_requests::builders::ListSubscriptionRequestsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_subscription_targets_output_correct_errors(
    mut builder: crate::operation::list_subscription_targets::builders::ListSubscriptionTargetsOutputBuilder,
) -> crate::operation::list_subscription_targets::builders::ListSubscriptionTargetsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_subscriptions_output_correct_errors(
    mut builder: crate::operation::list_subscriptions::builders::ListSubscriptionsOutputBuilder,
) -> crate::operation::list_subscriptions::builders::ListSubscriptionsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn put_environment_blueprint_configuration_output_correct_errors(
    mut builder: crate::operation::put_environment_blueprint_configuration::builders::PutEnvironmentBlueprintConfigurationOutputBuilder,
) -> crate::operation::put_environment_blueprint_configuration::builders::PutEnvironmentBlueprintConfigurationOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn reject_predictions_output_correct_errors(
    mut builder: crate::operation::reject_predictions::builders::RejectPredictionsOutputBuilder,
) -> crate::operation::reject_predictions::builders::RejectPredictionsOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.asset_revision.is_none() {
        builder.asset_revision = Some(Default::default())
    }
    builder
}

pub(crate) fn reject_subscription_request_output_correct_errors(
    mut builder: crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder,
) -> crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn revoke_subscription_output_correct_errors(
    mut builder: crate::operation::revoke_subscription::builders::RevokeSubscriptionOutputBuilder,
) -> crate::operation::revoke_subscription::builders::RevokeSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscribed_principal.is_none() {
        builder.subscribed_principal = Some(crate::types::SubscribedPrincipal::Unknown)
    }
    if builder.subscribed_listing.is_none() {
        builder.subscribed_listing = {
            let builder = crate::types::builders::SubscribedListingBuilder::default();
            crate::serde_util::subscribed_listing_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn start_data_source_run_output_correct_errors(
    mut builder: crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder,
) -> crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceRunStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSourceRunType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_data_source_output_correct_errors(
    mut builder: crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder,
) -> crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_domain_output_correct_errors(
    mut builder: crate::operation::update_domain::builders::UpdateDomainOutputBuilder,
) -> crate::operation::update_domain::builders::UpdateDomainOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_environment_output_correct_errors(
    mut builder: crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder,
) -> crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_profile_id.is_none() {
        builder.environment_profile_id = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn update_environment_profile_output_correct_errors(
    mut builder: crate::operation::update_environment_profile::builders::UpdateEnvironmentProfileOutputBuilder,
) -> crate::operation::update_environment_profile::builders::UpdateEnvironmentProfileOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_glossary_output_correct_errors(
    mut builder: crate::operation::update_glossary::builders::UpdateGlossaryOutputBuilder,
) -> crate::operation::update_glossary::builders::UpdateGlossaryOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_glossary_term_output_correct_errors(
    mut builder: crate::operation::update_glossary_term::builders::UpdateGlossaryTermOutputBuilder,
) -> crate::operation::update_glossary_term::builders::UpdateGlossaryTermOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.glossary_id.is_none() {
        builder.glossary_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryTermStatus>().ok()
    }
    builder
}

pub(crate) fn update_project_output_correct_errors(
    mut builder: crate::operation::update_project::builders::UpdateProjectOutputBuilder,
) -> crate::operation::update_project::builders::UpdateProjectOutputBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn update_subscription_grant_status_output_correct_errors(
    mut builder: crate::operation::update_subscription_grant_status::builders::UpdateSubscriptionGrantStatusOutputBuilder,
) -> crate::operation::update_subscription_grant_status::builders::UpdateSubscriptionGrantStatusOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscription_target_id.is_none() {
        builder.subscription_target_id = Some(Default::default())
    }
    if builder.granted_entity.is_none() {
        builder.granted_entity = Some(crate::types::GrantedEntity::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantOverallStatus>().ok()
    }
    builder
}

pub(crate) fn update_subscription_request_output_correct_errors(
    mut builder: crate::operation::update_subscription_request::builders::UpdateSubscriptionRequestOutputBuilder,
) -> crate::operation::update_subscription_request::builders::UpdateSubscriptionRequestOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn update_subscription_target_output_correct_errors(
    mut builder: crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder,
) -> crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.authorized_principals.is_none() {
        builder.authorized_principals = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.manage_access_role.is_none() {
        builder.manage_access_role = Some(Default::default())
    }
    if builder.applicable_asset_types.is_none() {
        builder.applicable_asset_types = Some(Default::default())
    }
    if builder.subscription_target_config.is_none() {
        builder.subscription_target_config = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn subscribed_listing_correct_errors(
    mut builder: crate::types::builders::SubscribedListingBuilder,
) -> crate::types::builders::SubscribedListingBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.item.is_none() {
        builder.item = Some(crate::types::SubscribedListingItem::Unknown)
    }
    if builder.owner_project_id.is_none() {
        builder.owner_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_listing_details_correct_errors(
    mut builder: crate::types::builders::AssetListingDetailsBuilder,
) -> crate::types::builders::AssetListingDetailsBuilder {
    if builder.listing_id.is_none() {
        builder.listing_id = Some(Default::default())
    }
    if builder.listing_status.is_none() {
        builder.listing_status = "no value was set".parse::<crate::types::ListingStatus>().ok()
    }
    builder
}

pub(crate) fn data_source_error_message_correct_errors(
    mut builder: crate::types::builders::DataSourceErrorMessageBuilder,
) -> crate::types::builders::DataSourceErrorMessageBuilder {
    if builder.error_type.is_none() {
        builder.error_type = "no value was set".parse::<crate::types::DataSourceErrorType>().ok()
    }
    builder
}

pub(crate) fn cloud_formation_properties_correct_errors(
    mut builder: crate::types::builders::CloudFormationPropertiesBuilder,
) -> crate::types::builders::CloudFormationPropertiesBuilder {
    if builder.template_url.is_none() {
        builder.template_url = Some(Default::default())
    }
    builder
}

pub(crate) fn configurable_environment_action_correct_errors(
    mut builder: crate::types::builders::ConfigurableEnvironmentActionBuilder,
) -> crate::types::builders::ConfigurableEnvironmentActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_parameter_correct_errors(
    mut builder: crate::types::builders::CustomParameterBuilder,
) -> crate::types::builders::CustomParameterBuilder {
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.field_type.is_none() {
        builder.field_type = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_run_activity_correct_errors(
    mut builder: crate::types::builders::DataSourceRunActivityBuilder,
) -> crate::types::builders::DataSourceRunActivityBuilder {
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.data_source_run_id.is_none() {
        builder.data_source_run_id = Some(Default::default())
    }
    if builder.technical_name.is_none() {
        builder.technical_name = Some(Default::default())
    }
    if builder.data_asset_status.is_none() {
        builder.data_asset_status = "no value was set".parse::<crate::types::DataAssetActivityStatus>().ok()
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_run_summary_correct_errors(
    mut builder: crate::types::builders::DataSourceRunSummaryBuilder,
) -> crate::types::builders::DataSourceRunSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSourceRunType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceRunStatus>().ok()
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_summary_correct_errors(
    mut builder: crate::types::builders::DataSourceSummaryBuilder,
) -> crate::types::builders::DataSourceSummaryBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn domain_summary_correct_errors(
    mut builder: crate::types::builders::DomainSummaryBuilder,
) -> crate::types::builders::DomainSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.managed_account_id.is_none() {
        builder.managed_account_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DomainStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn environment_blueprint_configuration_item_correct_errors(
    mut builder: crate::types::builders::EnvironmentBlueprintConfigurationItemBuilder,
) -> crate::types::builders::EnvironmentBlueprintConfigurationItemBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_blueprint_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentBlueprintSummaryBuilder,
) -> crate::types::builders::EnvironmentBlueprintSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    if builder.provisioning_properties.is_none() {
        builder.provisioning_properties = Some(crate::types::ProvisioningProperties::Unknown)
    }
    builder
}

pub(crate) fn environment_error_correct_errors(
    mut builder: crate::types::builders::EnvironmentErrorBuilder,
) -> crate::types::builders::EnvironmentErrorBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_profile_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentProfileSummaryBuilder,
) -> crate::types::builders::EnvironmentProfileSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_blueprint_id.is_none() {
        builder.environment_blueprint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentSummaryBuilder,
) -> crate::types::builders::EnvironmentSummaryBuilder {
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.environment_profile_id.is_none() {
        builder.environment_profile_id = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn form_entry_output_correct_errors(
    mut builder: crate::types::builders::FormEntryOutputBuilder,
) -> crate::types::builders::FormEntryOutputBuilder {
    if builder.type_name.is_none() {
        builder.type_name = Some(Default::default())
    }
    if builder.type_revision.is_none() {
        builder.type_revision = Some(Default::default())
    }
    builder
}

pub(crate) fn form_output_correct_errors(mut builder: crate::types::builders::FormOutputBuilder) -> crate::types::builders::FormOutputBuilder {
    if builder.form_name.is_none() {
        builder.form_name = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_run_configuration_output_correct_errors(
    mut builder: crate::types::builders::GlueRunConfigurationOutputBuilder,
) -> crate::types::builders::GlueRunConfigurationOutputBuilder {
    if builder.relational_filter_configurations.is_none() {
        builder.relational_filter_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn import_correct_errors(mut builder: crate::types::builders::ImportBuilder) -> crate::types::builders::ImportBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn listing_revision_correct_errors(
    mut builder: crate::types::builders::ListingRevisionBuilder,
) -> crate::types::builders::ListingRevisionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_output_correct_errors(
    mut builder: crate::types::builders::NotificationOutputBuilder,
) -> crate::types::builders::NotificationOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.domain_identifier.is_none() {
        builder.domain_identifier = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::NotificationType>().ok()
    }
    if builder.topic.is_none() {
        builder.topic = {
            let builder = crate::types::builders::TopicBuilder::default();
            crate::serde_util::topic_correct_errors(builder).build().ok()
        }
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.action_link.is_none() {
        builder.action_link = Some(Default::default())
    }
    if builder.creation_timestamp.is_none() {
        builder.creation_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_timestamp.is_none() {
        builder.last_updated_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn project_member_correct_errors(
    mut builder: crate::types::builders::ProjectMemberBuilder,
) -> crate::types::builders::ProjectMemberBuilder {
    if builder.member_details.is_none() {
        builder.member_details = Some(crate::types::MemberDetails::Unknown)
    }
    if builder.designation.is_none() {
        builder.designation = "no value was set".parse::<crate::types::UserDesignation>().ok()
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_run_configuration_output_correct_errors(
    mut builder: crate::types::builders::RedshiftRunConfigurationOutputBuilder,
) -> crate::types::builders::RedshiftRunConfigurationOutputBuilder {
    if builder.relational_filter_configurations.is_none() {
        builder.relational_filter_configurations = Some(Default::default())
    }
    if builder.redshift_credential_configuration.is_none() {
        builder.redshift_credential_configuration = {
            let builder = crate::types::builders::RedshiftCredentialConfigurationBuilder::default();
            crate::serde_util::redshift_credential_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.redshift_storage.is_none() {
        builder.redshift_storage = Some(crate::types::RedshiftStorage::Unknown)
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn subscribed_asset_correct_errors(
    mut builder: crate::types::builders::SubscribedAssetBuilder,
) -> crate::types::builders::SubscribedAssetBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.asset_revision.is_none() {
        builder.asset_revision = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantStatus>().ok()
    }
    builder
}

pub(crate) fn subscription_grant_summary_correct_errors(
    mut builder: crate::types::builders::SubscriptionGrantSummaryBuilder,
) -> crate::types::builders::SubscriptionGrantSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscription_target_id.is_none() {
        builder.subscription_target_id = Some(Default::default())
    }
    if builder.granted_entity.is_none() {
        builder.granted_entity = Some(crate::types::GrantedEntity::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionGrantOverallStatus>().ok()
    }
    builder
}

pub(crate) fn subscription_request_summary_correct_errors(
    mut builder: crate::types::builders::SubscriptionRequestSummaryBuilder,
) -> crate::types::builders::SubscriptionRequestSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionRequestStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_reason.is_none() {
        builder.request_reason = Some(Default::default())
    }
    if builder.subscribed_principals.is_none() {
        builder.subscribed_principals = Some(Default::default())
    }
    if builder.subscribed_listings.is_none() {
        builder.subscribed_listings = Some(Default::default())
    }
    builder
}

pub(crate) fn subscription_summary_correct_errors(
    mut builder: crate::types::builders::SubscriptionSummaryBuilder,
) -> crate::types::builders::SubscriptionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SubscriptionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.subscribed_principal.is_none() {
        builder.subscribed_principal = Some(crate::types::SubscribedPrincipal::Unknown)
    }
    if builder.subscribed_listing.is_none() {
        builder.subscribed_listing = {
            let builder = crate::types::builders::SubscribedListingBuilder::default();
            crate::serde_util::subscribed_listing_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn subscription_target_form_correct_errors(
    mut builder: crate::types::builders::SubscriptionTargetFormBuilder,
) -> crate::types::builders::SubscriptionTargetFormBuilder {
    if builder.form_name.is_none() {
        builder.form_name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn subscription_target_summary_correct_errors(
    mut builder: crate::types::builders::SubscriptionTargetSummaryBuilder,
) -> crate::types::builders::SubscriptionTargetSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.authorized_principals.is_none() {
        builder.authorized_principals = Some(Default::default())
    }
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.project_id.is_none() {
        builder.project_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.manage_access_role.is_none() {
        builder.manage_access_role = Some(Default::default())
    }
    if builder.applicable_asset_types.is_none() {
        builder.applicable_asset_types = Some(Default::default())
    }
    if builder.subscription_target_config.is_none() {
        builder.subscription_target_config = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_item_correct_errors(mut builder: crate::types::builders::AssetItemBuilder) -> crate::types::builders::AssetItemBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.type_identifier.is_none() {
        builder.type_identifier = Some(Default::default())
    }
    if builder.type_revision.is_none() {
        builder.type_revision = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_type_item_correct_errors(
    mut builder: crate::types::builders::AssetTypeItemBuilder,
) -> crate::types::builders::AssetTypeItemBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.forms_output.is_none() {
        builder.forms_output = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn data_product_summary_correct_errors(
    mut builder: crate::types::builders::DataProductSummaryBuilder,
) -> crate::types::builders::DataProductSummaryBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    builder
}

pub(crate) fn form_type_data_correct_errors(mut builder: crate::types::builders::FormTypeDataBuilder) -> crate::types::builders::FormTypeDataBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn glossary_item_correct_errors(mut builder: crate::types::builders::GlossaryItemBuilder) -> crate::types::builders::GlossaryItemBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owning_project_id.is_none() {
        builder.owning_project_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryStatus>().ok()
    }
    builder
}

pub(crate) fn glossary_term_item_correct_errors(
    mut builder: crate::types::builders::GlossaryTermItemBuilder,
) -> crate::types::builders::GlossaryTermItemBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.glossary_id.is_none() {
        builder.glossary_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GlossaryTermStatus>().ok()
    }
    builder
}

pub(crate) fn redshift_credential_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftCredentialConfigurationBuilder,
) -> crate::types::builders::RedshiftCredentialConfigurationBuilder {
    if builder.secret_manager_arn.is_none() {
        builder.secret_manager_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_correct_errors(mut builder: crate::types::builders::TopicBuilder) -> crate::types::builders::TopicBuilder {
    if builder.subject.is_none() {
        builder.subject = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = {
            let builder = crate::types::builders::NotificationResourceBuilder::default();
            crate::serde_util::notification_resource_correct_errors(builder).build().ok()
        }
    }
    if builder.role.is_none() {
        builder.role = "no value was set".parse::<crate::types::NotificationRole>().ok()
    }
    builder
}

pub(crate) fn group_details_correct_errors(mut builder: crate::types::builders::GroupDetailsBuilder) -> crate::types::builders::GroupDetailsBuilder {
    if builder.group_id.is_none() {
        builder.group_id = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_resource_correct_errors(
    mut builder: crate::types::builders::NotificationResourceBuilder,
) -> crate::types::builders::NotificationResourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::NotificationResourceType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_cluster_storage_correct_errors(
    mut builder: crate::types::builders::RedshiftClusterStorageBuilder,
) -> crate::types::builders::RedshiftClusterStorageBuilder {
    if builder.cluster_name.is_none() {
        builder.cluster_name = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_serverless_storage_correct_errors(
    mut builder: crate::types::builders::RedshiftServerlessStorageBuilder,
) -> crate::types::builders::RedshiftServerlessStorageBuilder {
    if builder.workgroup_name.is_none() {
        builder.workgroup_name = Some(Default::default())
    }
    builder
}

pub(crate) fn relational_filter_configuration_correct_errors(
    mut builder: crate::types::builders::RelationalFilterConfigurationBuilder,
) -> crate::types::builders::RelationalFilterConfigurationBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn user_details_correct_errors(mut builder: crate::types::builders::UserDetailsBuilder) -> crate::types::builders::UserDetailsBuilder {
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_expression_correct_errors(
    mut builder: crate::types::builders::FilterExpressionBuilder,
) -> crate::types::builders::FilterExpressionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FilterExpressionType>().ok()
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}
