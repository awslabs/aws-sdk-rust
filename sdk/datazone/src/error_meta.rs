// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There is a conflict while performing this action.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource cannot be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request has exceeded the specified service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>You do not have permission to perform this action.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The input fails to satisfy the constraints specified by the Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_predictions::AcceptPredictionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_predictions::AcceptPredictionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_predictions::AcceptPredictionsError> for Error {
    fn from(err: crate::operation::accept_predictions::AcceptPredictionsError) -> Self {
        match err {
            crate::operation::accept_predictions::AcceptPredictionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError> for Error {
    fn from(err: crate::operation::accept_subscription_request::AcceptSubscriptionRequestError) -> Self {
        match err {
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_subscription::CancelSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_subscription::CancelSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_subscription::CancelSubscriptionError> for Error {
    fn from(err: crate::operation::cancel_subscription::CancelSubscriptionError) -> Self {
        match err {
            crate::operation::cancel_subscription::CancelSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_subscription::CancelSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset::CreateAssetError> for Error {
    fn from(err: crate::operation::create_asset::CreateAssetError) -> Self {
        match err {
            crate::operation::create_asset::CreateAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset::CreateAssetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset::CreateAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_asset::CreateAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_asset::CreateAssetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_asset::CreateAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset::CreateAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset::CreateAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset::CreateAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_revision::CreateAssetRevisionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_revision::CreateAssetRevisionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset_revision::CreateAssetRevisionError> for Error {
    fn from(err: crate::operation::create_asset_revision::CreateAssetRevisionError) -> Self {
        match err {
            crate::operation::create_asset_revision::CreateAssetRevisionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_asset_revision::CreateAssetRevisionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_asset_revision::CreateAssetRevisionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_type::CreateAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_type::CreateAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_asset_type::CreateAssetTypeError> for Error {
    fn from(err: crate::operation::create_asset_type::CreateAssetTypeError) -> Self {
        match err {
            crate::operation::create_asset_type::CreateAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_asset_type::CreateAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_source::CreateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_source::CreateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_source::CreateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain::CreateDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain::CreateDomainError> for Error {
    fn from(err: crate::operation::create_domain::CreateDomainError) -> Self {
        match err {
            crate::operation::create_domain::CreateDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_domain::CreateDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_domain::CreateDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_domain::CreateDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_domain::CreateDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_domain::CreateDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_domain::CreateDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_domain::CreateDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_domain::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment::CreateEnvironmentError> for Error {
    fn from(err: crate::operation::create_environment::CreateEnvironmentError) -> Self {
        match err {
            crate::operation::create_environment::CreateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment::CreateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment::CreateEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_profile::CreateEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_profile::CreateEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment_profile::CreateEnvironmentProfileError> for Error {
    fn from(err: crate::operation::create_environment_profile::CreateEnvironmentProfileError) -> Self {
        match err {
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_form_type::CreateFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_form_type::CreateFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_form_type::CreateFormTypeError> for Error {
    fn from(err: crate::operation::create_form_type::CreateFormTypeError) -> Self {
        match err {
            crate::operation::create_form_type::CreateFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_form_type::CreateFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_form_type::CreateFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_form_type::CreateFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_form_type::CreateFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary::CreateGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary::CreateGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_glossary::CreateGlossaryError> for Error {
    fn from(err: crate::operation::create_glossary::CreateGlossaryError) -> Self {
        match err {
            crate::operation::create_glossary::CreateGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_glossary::CreateGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_glossary::CreateGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_glossary::CreateGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_glossary::CreateGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary_term::CreateGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary_term::CreateGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_glossary_term::CreateGlossaryTermError> for Error {
    fn from(err: crate::operation::create_glossary_term::CreateGlossaryTermError) -> Self {
        match err {
            crate::operation::create_glossary_term::CreateGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_glossary_term::CreateGlossaryTermError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_glossary_term::CreateGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_group_profile::CreateGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_group_profile::CreateGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_group_profile::CreateGroupProfileError> for Error {
    fn from(err: crate::operation::create_group_profile::CreateGroupProfileError) -> Self {
        match err {
            crate::operation::create_group_profile::CreateGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_group_profile::CreateGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listing_change_set::CreateListingChangeSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listing_change_set::CreateListingChangeSetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_listing_change_set::CreateListingChangeSetError> for Error {
    fn from(err: crate::operation::create_listing_change_set::CreateListingChangeSetError) -> Self {
        match err {
            crate::operation::create_listing_change_set::CreateListingChangeSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_project::CreateProjectError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_project::CreateProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_project::CreateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_project::CreateProjectError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_project::CreateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project::CreateProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_project::CreateProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_membership::CreateProjectMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_membership::CreateProjectMembershipError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project_membership::CreateProjectMembershipError> for Error {
    fn from(err: crate::operation::create_project_membership::CreateProjectMembershipError) -> Self {
        match err {
            crate::operation::create_project_membership::CreateProjectMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_grant::CreateSubscriptionGrantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_grant::CreateSubscriptionGrantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_subscription_grant::CreateSubscriptionGrantError> for Error {
    fn from(err: crate::operation::create_subscription_grant::CreateSubscriptionGrantError) -> Self {
        match err {
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_request::CreateSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_request::CreateSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_subscription_request::CreateSubscriptionRequestError> for Error {
    fn from(err: crate::operation::create_subscription_request::CreateSubscriptionRequestError) -> Self {
        match err {
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_target::CreateSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_target::CreateSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_subscription_target::CreateSubscriptionTargetError> for Error {
    fn from(err: crate::operation::create_subscription_target::CreateSubscriptionTargetError) -> Self {
        match err {
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user_profile::CreateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user_profile::CreateUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_user_profile::CreateUserProfileError> for Error {
    fn from(err: crate::operation::create_user_profile::CreateUserProfileError) -> Self {
        match err {
            crate::operation::create_user_profile::CreateUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_user_profile::CreateUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset::DeleteAssetError> for Error {
    fn from(err: crate::operation::delete_asset::DeleteAssetError) -> Self {
        match err {
            crate::operation::delete_asset::DeleteAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_asset::DeleteAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_asset::DeleteAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset::DeleteAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset::DeleteAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_asset::DeleteAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_asset::DeleteAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_type::DeleteAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_type::DeleteAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset_type::DeleteAssetTypeError> for Error {
    fn from(err: crate::operation::delete_asset_type::DeleteAssetTypeError) -> Self {
        match err {
            crate::operation::delete_asset_type::DeleteAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_data_source::DeleteDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain::DeleteDomainError> for Error {
    fn from(err: crate::operation::delete_domain::DeleteDomainError) -> Self {
        match err {
            crate::operation::delete_domain::DeleteDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_domain::DeleteDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_domain::DeleteDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_domain::DeleteDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_domain::DeleteDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_domain::DeleteDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_domain::DeleteDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_domain::DeleteDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError> for Error {
    fn from(err: crate::operation::delete_environment_profile::DeleteEnvironmentProfileError) -> Self {
        match err {
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_form_type::DeleteFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_form_type::DeleteFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_form_type::DeleteFormTypeError> for Error {
    fn from(err: crate::operation::delete_form_type::DeleteFormTypeError) -> Self {
        match err {
            crate::operation::delete_form_type::DeleteFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary::DeleteGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary::DeleteGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_glossary::DeleteGlossaryError> for Error {
    fn from(err: crate::operation::delete_glossary::DeleteGlossaryError) -> Self {
        match err {
            crate::operation::delete_glossary::DeleteGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary_term::DeleteGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary_term::DeleteGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_glossary_term::DeleteGlossaryTermError> for Error {
    fn from(err: crate::operation::delete_glossary_term::DeleteGlossaryTermError) -> Self {
        match err {
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listing::DeleteListingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listing::DeleteListingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_listing::DeleteListingError> for Error {
    fn from(err: crate::operation::delete_listing::DeleteListingError) -> Self {
        match err {
            crate::operation::delete_listing::DeleteListingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_listing::DeleteListingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_listing::DeleteListingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_listing::DeleteListingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_listing::DeleteListingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_listing::DeleteListingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_listing::DeleteListingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_listing::DeleteListingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project::DeleteProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_project::DeleteProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project::DeleteProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_project::DeleteProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_membership::DeleteProjectMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_membership::DeleteProjectMembershipError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project_membership::DeleteProjectMembershipError> for Error {
    fn from(err: crate::operation::delete_project_membership::DeleteProjectMembershipError) -> Self {
        match err {
            crate::operation::delete_project_membership::DeleteProjectMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError> for Error {
    fn from(err: crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError) -> Self {
        match err {
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError> for Error {
    fn from(err: crate::operation::delete_subscription_request::DeleteSubscriptionRequestError) -> Self {
        match err {
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError> for Error {
    fn from(err: crate::operation::delete_subscription_target::DeleteSubscriptionTargetError) -> Self {
        match err {
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset::GetAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset::GetAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset::GetAssetError> for Error {
    fn from(err: crate::operation::get_asset::GetAssetError) -> Self {
        match err {
            crate::operation::get_asset::GetAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_asset::GetAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_asset::GetAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_asset::GetAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset::GetAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_asset::GetAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_asset::GetAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_type::GetAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_type::GetAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset_type::GetAssetTypeError> for Error {
    fn from(err: crate::operation::get_asset_type::GetAssetTypeError) -> Self {
        match err {
            crate::operation::get_asset_type::GetAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source::GetDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_source::GetDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source::GetDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_source::GetDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source::GetDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source::GetDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source_run::GetDataSourceRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source_run::GetDataSourceRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_source_run::GetDataSourceRunError> for Error {
    fn from(err: crate::operation::get_data_source_run::GetDataSourceRunError) -> Self {
        match err {
            crate::operation::get_data_source_run::GetDataSourceRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_source_run::GetDataSourceRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain::GetDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain::GetDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_domain::GetDomainError> for Error {
    fn from(err: crate::operation::get_domain::GetDomainError) -> Self {
        match err {
            crate::operation::get_domain::GetDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_domain::GetDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_domain::GetDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_domain::GetDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_domain::GetDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_domain::GetDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_domain::GetDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_domain::GetDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment::GetEnvironmentError> for Error {
    fn from(err: crate::operation::get_environment::GetEnvironmentError) -> Self {
        match err {
            crate::operation::get_environment::GetEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment::GetEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment::GetEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment::GetEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment::GetEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment::GetEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_environment::GetEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError> for Error {
    fn from(err: crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError) -> Self {
        match err {
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_profile::GetEnvironmentProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_profile::GetEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment_profile::GetEnvironmentProfileError> for Error {
    fn from(err: crate::operation::get_environment_profile::GetEnvironmentProfileError) -> Self {
        match err {
            crate::operation::get_environment_profile::GetEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_profile::GetEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_form_type::GetFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_form_type::GetFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_form_type::GetFormTypeError> for Error {
    fn from(err: crate::operation::get_form_type::GetFormTypeError) -> Self {
        match err {
            crate::operation::get_form_type::GetFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_form_type::GetFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_form_type::GetFormTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_form_type::GetFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_form_type::GetFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_form_type::GetFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_form_type::GetFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary::GetGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary::GetGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_glossary::GetGlossaryError> for Error {
    fn from(err: crate::operation::get_glossary::GetGlossaryError) -> Self {
        match err {
            crate::operation::get_glossary::GetGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_glossary::GetGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_glossary::GetGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_glossary::GetGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_glossary::GetGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_glossary::GetGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_glossary::GetGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary_term::GetGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary_term::GetGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_glossary_term::GetGlossaryTermError> for Error {
    fn from(err: crate::operation::get_glossary_term::GetGlossaryTermError) -> Self {
        match err {
            crate::operation::get_glossary_term::GetGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group_profile::GetGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group_profile::GetGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_group_profile::GetGroupProfileError> for Error {
    fn from(err: crate::operation::get_group_profile::GetGroupProfileError) -> Self {
        match err {
            crate::operation::get_group_profile::GetGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError> for Error {
    fn from(err: crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError) -> Self {
        match err {
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listing::GetListingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listing::GetListingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_listing::GetListingError> for Error {
    fn from(err: crate::operation::get_listing::GetListingError) -> Self {
        match err {
            crate::operation::get_listing::GetListingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_listing::GetListingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_listing::GetListingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_listing::GetListingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_listing::GetListingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_listing::GetListingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_listing::GetListingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_project::GetProjectError> for Error {
    fn from(err: crate::operation::get_project::GetProjectError) -> Self {
        match err {
            crate::operation::get_project::GetProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_project::GetProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_project::GetProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_project::GetProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_project::GetProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_project::GetProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_project::GetProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription::GetSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription::GetSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_subscription::GetSubscriptionError> for Error {
    fn from(err: crate::operation::get_subscription::GetSubscriptionError) -> Self {
        match err {
            crate::operation::get_subscription::GetSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_subscription::GetSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription::GetSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_subscription::GetSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_grant::GetSubscriptionGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_grant::GetSubscriptionGrantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_subscription_grant::GetSubscriptionGrantError> for Error {
    fn from(err: crate::operation::get_subscription_grant::GetSubscriptionGrantError) -> Self {
        match err {
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError> for Error {
    fn from(err: crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError) -> Self {
        match err {
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_target::GetSubscriptionTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_target::GetSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_subscription_target::GetSubscriptionTargetError> for Error {
    fn from(err: crate::operation::get_subscription_target::GetSubscriptionTargetError) -> Self {
        match err {
            crate::operation::get_subscription_target::GetSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription_target::GetSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_profile::GetUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_profile::GetUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_user_profile::GetUserProfileError> for Error {
    fn from(err: crate::operation::get_user_profile::GetUserProfileError) -> Self {
        match err {
            crate::operation::get_user_profile::GetUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_user_profile::GetUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_user_profile::GetUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_user_profile::GetUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_revisions::ListAssetRevisionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_revisions::ListAssetRevisionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_asset_revisions::ListAssetRevisionsError> for Error {
    fn from(err: crate::operation::list_asset_revisions::ListAssetRevisionsError) -> Self {
        match err {
            crate::operation::list_asset_revisions::ListAssetRevisionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError> for Error {
    fn from(err: crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError) -> Self {
        match err {
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_runs::ListDataSourceRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_runs::ListDataSourceRunsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_source_runs::ListDataSourceRunsError> for Error {
    fn from(err: crate::operation::list_data_source_runs::ListDataSourceRunsError) -> Self {
        match err {
            crate::operation::list_data_source_runs::ListDataSourceRunsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_sources::ListDataSourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domains::ListDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domains::ListDomainsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domains::ListDomainsError> for Error {
    fn from(err: crate::operation::list_domains::ListDomainsError) -> Self {
        match err {
            crate::operation::list_domains::ListDomainsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_domains::ListDomainsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_domains::ListDomainsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_domains::ListDomainsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_domains::ListDomainsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_domains::ListDomainsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_domains::ListDomainsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_domains::ListDomainsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_domains::ListDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError> for Error {
    fn from(err: crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError) -> Self {
        match err {
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError> for Error {
    fn from(err: crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError) -> Self {
        match err {
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_profiles::ListEnvironmentProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_profiles::ListEnvironmentProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environment_profiles::ListEnvironmentProfilesError> for Error {
    fn from(err: crate::operation::list_environment_profiles::ListEnvironmentProfilesError) -> Self {
        match err {
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environments::ListEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environments::ListEnvironmentsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notifications::ListNotificationsError> for Error {
    fn from(err: crate::operation::list_notifications::ListNotificationsError) -> Self {
        match err {
            crate::operation::list_notifications::ListNotificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_notifications::ListNotificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_notifications::ListNotificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_notifications::ListNotificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notifications::ListNotificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_notifications::ListNotificationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_notifications::ListNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_memberships::ListProjectMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_memberships::ListProjectMembershipsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_project_memberships::ListProjectMembershipsError> for Error {
    fn from(err: crate::operation::list_project_memberships::ListProjectMembershipsError) -> Self {
        match err {
            crate::operation::list_project_memberships::ListProjectMembershipsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_project_memberships::ListProjectMembershipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_project_memberships::ListProjectMembershipsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_projects::ListProjectsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_projects::ListProjectsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_projects::ListProjectsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_projects::ListProjectsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_grants::ListSubscriptionGrantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_grants::ListSubscriptionGrantsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscription_grants::ListSubscriptionGrantsError> for Error {
    fn from(err: crate::operation::list_subscription_grants::ListSubscriptionGrantsError) -> Self {
        match err {
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_requests::ListSubscriptionRequestsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_requests::ListSubscriptionRequestsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscription_requests::ListSubscriptionRequestsError> for Error {
    fn from(err: crate::operation::list_subscription_requests::ListSubscriptionRequestsError) -> Self {
        match err {
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscriptions::ListSubscriptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscriptions::ListSubscriptionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscriptions::ListSubscriptionsError> for Error {
    fn from(err: crate::operation::list_subscriptions::ListSubscriptionsError) -> Self {
        match err {
            crate::operation::list_subscriptions::ListSubscriptionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_targets::ListSubscriptionTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_targets::ListSubscriptionTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_subscription_targets::ListSubscriptionTargetsError> for Error {
    fn from(err: crate::operation::list_subscription_targets::ListSubscriptionTargetsError) -> Self {
        match err {
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_predictions::RejectPredictionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_predictions::RejectPredictionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_predictions::RejectPredictionsError> for Error {
    fn from(err: crate::operation::reject_predictions::RejectPredictionsError) -> Self {
        match err {
            crate::operation::reject_predictions::RejectPredictionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_subscription_request::RejectSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_subscription_request::RejectSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_subscription_request::RejectSubscriptionRequestError> for Error {
    fn from(err: crate::operation::reject_subscription_request::RejectSubscriptionRequestError) -> Self {
        match err {
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::revoke_subscription::RevokeSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::revoke_subscription::RevokeSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::revoke_subscription::RevokeSubscriptionError> for Error {
    fn from(err: crate::operation::revoke_subscription::RevokeSubscriptionError) -> Self {
        match err {
            crate::operation::revoke_subscription::RevokeSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::revoke_subscription::RevokeSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search::SearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search::SearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search::SearchError> for Error {
    fn from(err: crate::operation::search::SearchError) -> Self {
        match err {
            crate::operation::search::SearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search::SearchError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search::SearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search::SearchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search::SearchError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search::SearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_group_profiles::SearchGroupProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_group_profiles::SearchGroupProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_group_profiles::SearchGroupProfilesError> for Error {
    fn from(err: crate::operation::search_group_profiles::SearchGroupProfilesError) -> Self {
        match err {
            crate::operation::search_group_profiles::SearchGroupProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::search_group_profiles::SearchGroupProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_group_profiles::SearchGroupProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_listings::SearchListingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_listings::SearchListingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_listings::SearchListingsError> for Error {
    fn from(err: crate::operation::search_listings::SearchListingsError) -> Self {
        match err {
            crate::operation::search_listings::SearchListingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_listings::SearchListingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_listings::SearchListingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_listings::SearchListingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_listings::SearchListingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_listings::SearchListingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_types::SearchTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_types::SearchTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_types::SearchTypesError> for Error {
    fn from(err: crate::operation::search_types::SearchTypesError) -> Self {
        match err {
            crate::operation::search_types::SearchTypesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_types::SearchTypesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_types::SearchTypesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_types::SearchTypesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_types::SearchTypesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_types::SearchTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_user_profiles::SearchUserProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_user_profiles::SearchUserProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_user_profiles::SearchUserProfilesError> for Error {
    fn from(err: crate::operation::search_user_profiles::SearchUserProfilesError) -> Self {
        match err {
            crate::operation::search_user_profiles::SearchUserProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_user_profiles::SearchUserProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_run::StartDataSourceRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_run::StartDataSourceRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_data_source_run::StartDataSourceRunError> for Error {
    fn from(err: crate::operation::start_data_source_run::StartDataSourceRunError) -> Self {
        match err {
            crate::operation::start_data_source_run::StartDataSourceRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_data_source_run::StartDataSourceRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_data_source_run::StartDataSourceRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_data_source::UpdateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain::UpdateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain::UpdateDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_domain::UpdateDomainError> for Error {
    fn from(err: crate::operation::update_domain::UpdateDomainError) -> Self {
        match err {
            crate::operation::update_domain::UpdateDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_domain::UpdateDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_domain::UpdateDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_domain::UpdateDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_domain::UpdateDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_domain::UpdateDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_domain::UpdateDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_domain::UpdateDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_domain::UpdateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_environment::UpdateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_profile::UpdateEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_profile::UpdateEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment_profile::UpdateEnvironmentProfileError> for Error {
    fn from(err: crate::operation::update_environment_profile::UpdateEnvironmentProfileError) -> Self {
        match err {
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary::UpdateGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary::UpdateGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_glossary::UpdateGlossaryError> for Error {
    fn from(err: crate::operation::update_glossary::UpdateGlossaryError) -> Self {
        match err {
            crate::operation::update_glossary::UpdateGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary_term::UpdateGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary_term::UpdateGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_glossary_term::UpdateGlossaryTermError> for Error {
    fn from(err: crate::operation::update_glossary_term::UpdateGlossaryTermError) -> Self {
        match err {
            crate::operation::update_glossary_term::UpdateGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_group_profile::UpdateGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_group_profile::UpdateGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_group_profile::UpdateGroupProfileError> for Error {
    fn from(err: crate::operation::update_group_profile::UpdateGroupProfileError) -> Self {
        match err {
            crate::operation::update_group_profile::UpdateGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_group_profile::UpdateGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_project::UpdateProjectError> for Error {
    fn from(err: crate::operation::update_project::UpdateProjectError) -> Self {
        match err {
            crate::operation::update_project::UpdateProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_project::UpdateProjectError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_project::UpdateProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_project::UpdateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_project::UpdateProjectError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_project::UpdateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_project::UpdateProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_project::UpdateProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_project::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError> for Error {
    fn from(err: crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError) -> Self {
        match err {
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_request::UpdateSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_request::UpdateSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscription_request::UpdateSubscriptionRequestError> for Error {
    fn from(err: crate::operation::update_subscription_request::UpdateSubscriptionRequestError) -> Self {
        match err {
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_target::UpdateSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_target::UpdateSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscription_target::UpdateSubscriptionTargetError> for Error {
    fn from(err: crate::operation::update_subscription_target::UpdateSubscriptionTargetError) -> Self {
        match err {
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_profile::UpdateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_profile::UpdateUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_user_profile::UpdateUserProfileError> for Error {
    fn from(err: crate::operation::update_user_profile::UpdateUserProfileError) -> Self {
        match err {
            crate::operation::update_user_profile::UpdateUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_user_profile::UpdateUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
