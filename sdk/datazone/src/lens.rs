// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_asset_revisions_output_next_token(
    input: &crate::operation::list_asset_revisions::ListAssetRevisionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_source_run_activities_output_next_token(
    input: &crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_source_runs_output_next_token(
    input: &crate::operation::list_data_source_runs::ListDataSourceRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_sources_output_next_token(
    input: &crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domains_output_next_token(
    input: &crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_blueprint_configurations_output_next_token(
    input: &crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_blueprints_output_next_token(
    input: &crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_profiles_output_next_token(
    input: &crate::operation::list_environment_profiles::ListEnvironmentProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environments_output_next_token(
    input: &crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_notifications_output_next_token(
    input: &crate::operation::list_notifications::ListNotificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_project_memberships_output_next_token(
    input: &crate::operation::list_project_memberships::ListProjectMembershipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_grants_output_next_token(
    input: &crate::operation::list_subscription_grants::ListSubscriptionGrantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_requests_output_next_token(
    input: &crate::operation::list_subscription_requests::ListSubscriptionRequestsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_targets_output_next_token(
    input: &crate::operation::list_subscription_targets::ListSubscriptionTargetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscriptions_output_next_token(
    input: &crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_output_next_token(input: &crate::operation::search::SearchOutput) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_group_profiles_output_next_token(
    input: &crate::operation::search_group_profiles::SearchGroupProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_listings_output_next_token(
    input: &crate::operation::search_listings::SearchListingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_types_output_next_token(
    input: &crate::operation::search_types::SearchTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_user_profiles_output_next_token(
    input: &crate::operation::search_user_profiles::SearchUserProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_revisions_output_items(
    input: crate::operation::list_asset_revisions::ListAssetRevisionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetRevision>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_source_run_activities_output_items(
    input: crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceRunActivity>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_source_runs_output_items(
    input: crate::operation::list_data_source_runs::ListDataSourceRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceRunSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_sources_output_items(
    input: crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domains_output_items(
    input: crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DomainSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_blueprint_configurations_output_items(
    input: crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentBlueprintConfigurationItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_blueprints_output_items(
    input: crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentBlueprintSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_profiles_output_items(
    input: crate::operation::list_environment_profiles::ListEnvironmentProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentProfileSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environments_output_items(
    input: crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_notifications_output_notifications(
    input: crate::operation::list_notifications::ListNotificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NotificationOutput>> {
    let input = match input.notifications {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_project_memberships_output_members(
    input: crate::operation::list_project_memberships::ListProjectMembershipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_projects_output_items(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_grants_output_items(
    input: crate::operation::list_subscription_grants::ListSubscriptionGrantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionGrantSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_requests_output_items(
    input: crate::operation::list_subscription_requests::ListSubscriptionRequestsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionRequestSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_targets_output_items(
    input: crate::operation::list_subscription_targets::ListSubscriptionTargetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscriptions_output_items(
    input: crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_output_items(
    input: crate::operation::search::SearchOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchInventoryResultItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_group_profiles_output_items(
    input: crate::operation::search_group_profiles::SearchGroupProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupProfileSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_listings_output_items(
    input: crate::operation::search_listings::SearchListingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchResultItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_types_output_items(
    input: crate::operation::search_types::SearchTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchTypesResultItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_user_profiles_output_items(
    input: crate::operation::search_user_profiles::SearchUserProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserProfileSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
