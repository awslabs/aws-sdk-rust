// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RevokeSubscription`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_identifier(impl Into<String>)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::domain_identifier) / [`set_domain_identifier(Option<String>)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::set_domain_identifier):<br>required: **true**<br><p>The identifier of the Amazon DataZone domain where you want to revoke a subscription.</p><br>
    ///   - [`identifier(impl Into<String>)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::set_identifier):<br>required: **true**<br><p>The identifier of the revoked subscription.</p><br>
    ///   - [`retain_permissions(bool)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::retain_permissions) / [`set_retain_permissions(Option<bool>)`](crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::set_retain_permissions):<br>required: **false**<br><p>Specifies whether permissions are retained when the subscription is revoked.</p><br>
    /// - On success, responds with [`RevokeSubscriptionOutput`](crate::operation::revoke_subscription::RevokeSubscriptionOutput) with field(s):
    ///   - [`id(String)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::id): <p>The identifier of the revoked subscription.</p>
    ///   - [`created_by(String)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::created_by): <p>The identifier of the user who revoked the subscription.</p>
    ///   - [`updated_by(Option<String>)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::updated_by): <p>The Amazon DataZone user who revoked the subscription.</p>
    ///   - [`domain_id(String)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::domain_id): <p>The identifier of the Amazon DataZone domain where you want to revoke a subscription.</p>
    ///   - [`status(SubscriptionStatus)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::status): <p>The status of the revoked subscription.</p>
    ///   - [`created_at(DateTime)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::created_at): <p>The timestamp of when the subscription was revoked.</p>
    ///   - [`updated_at(DateTime)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::updated_at): <p>The timestamp of when the subscription was revoked.</p>
    ///   - [`subscribed_principal(Option<SubscribedPrincipal>)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::subscribed_principal): <p>The subscribed principal of the revoked subscription.</p>
    ///   - [`subscribed_listing(Option<SubscribedListing>)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::subscribed_listing): <p>The subscribed listing of the revoked subscription.</p>
    ///   - [`subscription_request_id(Option<String>)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::subscription_request_id): <p>The identifier of the subscription request for the revoked subscription.</p>
    ///   - [`retain_permissions(Option<bool>)`](crate::operation::revoke_subscription::RevokeSubscriptionOutput::retain_permissions): <p>Specifies whether permissions are retained when the subscription is revoked.</p>
    /// - On failure, responds with [`SdkError<RevokeSubscriptionError>`](crate::operation::revoke_subscription::RevokeSubscriptionError)
    pub fn revoke_subscription(&self) -> crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder {
        crate::operation::revoke_subscription::builders::RevokeSubscriptionFluentBuilder::new(self.handle.clone())
    }
}
