// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteDataSource`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_identifier(impl Into<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::domain_identifier) / [`set_domain_identifier(Option<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::set_domain_identifier):<br>required: **true**<br><p>The ID of the Amazon DataZone domain in which the data source is deleted.</p><br>
    ///   - [`identifier(impl Into<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::set_identifier):<br>required: **true**<br><p>The identifier of the data source that is deleted.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p><br>
    /// - On success, responds with [`DeleteDataSourceOutput`](crate::operation::delete_data_source::DeleteDataSourceOutput) with field(s):
    ///   - [`id(String)`](crate::operation::delete_data_source::DeleteDataSourceOutput::id): <p>The ID of the data source that is deleted.</p>
    ///   - [`status(Option<DataSourceStatus>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::status): <p>The status of this data source.</p>
    ///   - [`r#type(Option<String>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::type): <p>The type of this data source.</p>
    ///   - [`name(String)`](crate::operation::delete_data_source::DeleteDataSourceOutput::name): <p>The name of the data source that is deleted.</p>
    ///   - [`description(Option<String>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::description): <p>The description of the data source that is deleted.</p>
    ///   - [`domain_id(String)`](crate::operation::delete_data_source::DeleteDataSourceOutput::domain_id): <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    ///   - [`project_id(String)`](crate::operation::delete_data_source::DeleteDataSourceOutput::project_id): <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    ///   - [`environment_id(String)`](crate::operation::delete_data_source::DeleteDataSourceOutput::environment_id): <p>The ID of the environemnt associated with this data source.</p>
    ///   - [`configuration(Option<DataSourceConfigurationOutput>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::configuration): <p>The configuration of the data source that is deleted.</p>
    ///   - [`enable_setting(Option<EnableSetting>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::enable_setting): <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    ///   - [`publish_on_import(Option<bool>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::publish_on_import): <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    ///   - [`asset_forms_output(Option<Vec::<FormOutput>>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::asset_forms_output): <p>The asset data forms associated with this data source.</p>
    ///   - [`schedule(Option<ScheduleConfiguration>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::schedule): <p>The schedule of runs for this data source.</p>
    ///   - [`last_run_status(Option<DataSourceRunStatus>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::last_run_status): <p>The status of the last run of this data source.</p>
    ///   - [`last_run_at(Option<DateTime>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::last_run_at): <p>The timestamp of when the data source was last run.</p>
    ///   - [`last_run_error_message(Option<DataSourceErrorMessage>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::last_run_error_message): <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    ///   - [`error_message(Option<DataSourceErrorMessage>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::error_message): <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::created_at): <p>The timestamp of when this data source was created.</p>
    ///   - [`updated_at(Option<DateTime>)`](crate::operation::delete_data_source::DeleteDataSourceOutput::updated_at): <p>The timestamp of when this data source was updated.</p>
    /// - On failure, responds with [`SdkError<DeleteDataSourceError>`](crate::operation::delete_data_source::DeleteDataSourceError)
    pub fn delete_data_source(&self) -> crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder {
        crate::operation::delete_data_source::builders::DeleteDataSourceFluentBuilder::new(self.handle.clone())
    }
}
