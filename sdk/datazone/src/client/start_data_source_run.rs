// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartDataSourceRun`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_identifier(impl Into<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::domain_identifier) / [`set_domain_identifier(Option<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::set_domain_identifier):<br>required: **true**<br><p>The identifier of the Amazon DataZone domain in which to start a data source run.</p><br>
    ///   - [`data_source_identifier(impl Into<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::data_source_identifier) / [`set_data_source_identifier(Option<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::set_data_source_identifier):<br>required: **true**<br><p>The identifier of the data source.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p><br>
    /// - On success, responds with [`StartDataSourceRunOutput`](crate::operation::start_data_source_run::StartDataSourceRunOutput) with field(s):
    ///   - [`domain_id(String)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::domain_id): <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    ///   - [`data_source_id(String)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::data_source_id): <p>The identifier of the data source.</p>
    ///   - [`id(String)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::id): <p>The identifier of the data source run.</p>
    ///   - [`project_id(String)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::project_id): <p>The identifier of the project.</p>
    ///   - [`status(DataSourceRunStatus)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::status): <p>The status of the data source run.</p>
    ///   - [`r#type(DataSourceRunType)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::type): <p>The type of the data source run.</p>
    ///   - [`data_source_configuration_snapshot(Option<String>)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::data_source_configuration_snapshot): <p>The configuration snapshot of the data source that is being run.</p>
    ///   - [`run_statistics_for_assets(Option<RunStatisticsForAssets>)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::run_statistics_for_assets): <p>Specifies run statistics for assets.</p>
    ///   - [`error_message(Option<DataSourceErrorMessage>)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::error_message): <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    ///   - [`created_at(DateTime)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::created_at): <p>The timestamp of when data source run was created.</p>
    ///   - [`updated_at(DateTime)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::updated_at): <p>The timestamp of when the data source run was updated.</p>
    ///   - [`started_at(Option<DateTime>)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::started_at): <p>The timestamp of when the data source run was started.</p>
    ///   - [`stopped_at(Option<DateTime>)`](crate::operation::start_data_source_run::StartDataSourceRunOutput::stopped_at): <p>The timestamp of when the data source run was stopped.</p>
    /// - On failure, responds with [`SdkError<StartDataSourceRunError>`](crate::operation::start_data_source_run::StartDataSourceRunError)
    pub fn start_data_source_run(&self) -> crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder {
        crate::operation::start_data_source_run::builders::StartDataSourceRunFluentBuilder::new(self.handle.clone())
    }
}
