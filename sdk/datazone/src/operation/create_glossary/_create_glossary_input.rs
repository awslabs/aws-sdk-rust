// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGlossaryInput {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of this business glossary.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the project that currently owns business glossary.</p>
    pub owning_project_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description of this business glossary.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of this business glossary.</p>
    pub status: ::std::option::Option<crate::types::GlossaryStatus>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGlossaryInput {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The name of this business glossary.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the project that currently owns business glossary.</p>
    pub fn owning_project_identifier(&self) -> ::std::option::Option<&str> {
        self.owning_project_identifier.as_deref()
    }
    /// <p>The description of this business glossary.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of this business glossary.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::GlossaryStatus> {
        self.status.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateGlossaryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlossaryInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateGlossaryInput {
    /// Creates a new builder-style object to manufacture [`CreateGlossaryInput`](crate::operation::create_glossary::CreateGlossaryInput).
    pub fn builder() -> crate::operation::create_glossary::builders::CreateGlossaryInputBuilder {
        crate::operation::create_glossary::builders::CreateGlossaryInputBuilder::default()
    }
}

/// A builder for [`CreateGlossaryInput`](crate::operation::create_glossary::CreateGlossaryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateGlossaryInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owning_project_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GlossaryStatus>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGlossaryInputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this business glossary is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this business glossary is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The name of this business glossary.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this business glossary.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this business glossary.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the project that currently owns business glossary.</p>
    /// This field is required.
    pub fn owning_project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project that currently owns business glossary.</p>
    pub fn set_owning_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_identifier = input;
        self
    }
    /// <p>The ID of the project that currently owns business glossary.</p>
    pub fn get_owning_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_identifier
    }
    /// <p>The description of this business glossary.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of this business glossary.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of this business glossary.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of this business glossary.</p>
    pub fn status(mut self, input: crate::types::GlossaryStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this business glossary.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GlossaryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this business glossary.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GlossaryStatus> {
        &self.status
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateGlossaryInput`](crate::operation::create_glossary::CreateGlossaryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_glossary::CreateGlossaryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_glossary::CreateGlossaryInput {
            domain_identifier: self.domain_identifier,
            name: self.name,
            owning_project_identifier: self.owning_project_identifier,
            description: self.description,
            status: self.status,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateGlossaryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlossaryInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
