// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateSubscriptionTargetOutput {
    /// <p>Identifier of the subscription target that is to be updated.</p>
    pub id: ::std::string::String,
    /// <p>The authorized principals to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub authorized_principals: ::std::vec::Vec<::std::string::String>,
    /// <p>The identifier of the Amazon DataZone domain in which a subscription target is to be updated.</p>
    pub domain_id: ::std::string::String,
    /// <p>The identifier of the project in which a subscription target is to be updated.</p>
    pub project_id: ::std::string::String,
    /// <p>The identifier of the environment in which a subscription target is to be updated.</p>
    pub environment_id: ::std::string::String,
    /// <p>The name to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub name: ::std::string::String,
    /// <p>The type to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub r#type: ::std::string::String,
    /// <p>The Amazon DataZone user who created the subscription target.</p>
    pub created_by: ::std::string::String,
    /// <p>The Amazon DataZone user who updated the subscription target.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when a subscription target was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the subscription target was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The manage access role to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub manage_access_role: ::std::string::String,
    /// <p>The applicable asset types to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub applicable_asset_types: ::std::vec::Vec<::std::string::String>,
    /// <p>The configuration to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub subscription_target_config: ::std::vec::Vec<crate::types::SubscriptionTargetForm>,
    /// <p>The provider to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub provider: ::std::string::String,
    _request_id: Option<String>,
}
impl UpdateSubscriptionTargetOutput {
    /// <p>Identifier of the subscription target that is to be updated.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The authorized principals to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn authorized_principals(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.authorized_principals.deref()
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription target is to be updated.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The identifier of the project in which a subscription target is to be updated.</p>
    pub fn project_id(&self) -> &str {
        use std::ops::Deref;
        self.project_id.deref()
    }
    /// <p>The identifier of the environment in which a subscription target is to be updated.</p>
    pub fn environment_id(&self) -> &str {
        use std::ops::Deref;
        self.environment_id.deref()
    }
    /// <p>The name to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The Amazon DataZone user who created the subscription target.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The Amazon DataZone user who updated the subscription target.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The timestamp of when a subscription target was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the subscription target was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The manage access role to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn manage_access_role(&self) -> &str {
        use std::ops::Deref;
        self.manage_access_role.deref()
    }
    /// <p>The applicable asset types to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn applicable_asset_types(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.applicable_asset_types.deref()
    }
    /// <p>The configuration to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn subscription_target_config(&self) -> &[crate::types::SubscriptionTargetForm] {
        use std::ops::Deref;
        self.subscription_target_config.deref()
    }
    /// <p>The provider to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn provider(&self) -> &str {
        use std::ops::Deref;
        self.provider.deref()
    }
}
impl ::std::fmt::Debug for UpdateSubscriptionTargetOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSubscriptionTargetOutput");
        formatter.field("id", &self.id);
        formatter.field("authorized_principals", &self.authorized_principals);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("project_id", &self.project_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("manage_access_role", &self.manage_access_role);
        formatter.field("applicable_asset_types", &self.applicable_asset_types);
        formatter.field("subscription_target_config", &self.subscription_target_config);
        formatter.field("provider", &self.provider);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for UpdateSubscriptionTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSubscriptionTargetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriptionTargetOutput`](crate::operation::update_subscription_target::UpdateSubscriptionTargetOutput).
    pub fn builder() -> crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder {
        crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::default()
    }
}

/// A builder for [`UpdateSubscriptionTargetOutput`](crate::operation::update_subscription_target::UpdateSubscriptionTargetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateSubscriptionTargetOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) authorized_principals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) manage_access_role: ::std::option::Option<::std::string::String>,
    pub(crate) applicable_asset_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subscription_target_config: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetForm>>,
    pub(crate) provider: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateSubscriptionTargetOutputBuilder {
    /// <p>Identifier of the subscription target that is to be updated.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the subscription target that is to be updated.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Identifier of the subscription target that is to be updated.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `authorized_principals`.
    ///
    /// To override the contents of this collection use [`set_authorized_principals`](Self::set_authorized_principals).
    ///
    /// <p>The authorized principals to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn authorized_principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorized_principals.unwrap_or_default();
        v.push(input.into());
        self.authorized_principals = ::std::option::Option::Some(v);
        self
    }
    /// <p>The authorized principals to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_authorized_principals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorized_principals = input;
        self
    }
    /// <p>The authorized principals to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_authorized_principals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorized_principals
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription target is to be updated.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription target is to be updated.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription target is to be updated.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the project in which a subscription target is to be updated.</p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project in which a subscription target is to be updated.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The identifier of the project in which a subscription target is to be updated.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The identifier of the environment in which a subscription target is to be updated.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the environment in which a subscription target is to be updated.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The identifier of the environment in which a subscription target is to be updated.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The name to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The Amazon DataZone user who created the subscription target.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the subscription target.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the subscription target.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The Amazon DataZone user who updated the subscription target.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who updated the subscription target.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The Amazon DataZone user who updated the subscription target.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The timestamp of when a subscription target was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when a subscription target was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when a subscription target was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the subscription target was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the subscription target was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the subscription target was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The manage access role to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    /// This field is required.
    pub fn manage_access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manage_access_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The manage access role to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_manage_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manage_access_role = input;
        self
    }
    /// <p>The manage access role to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_manage_access_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.manage_access_role
    }
    /// Appends an item to `applicable_asset_types`.
    ///
    /// To override the contents of this collection use [`set_applicable_asset_types`](Self::set_applicable_asset_types).
    ///
    /// <p>The applicable asset types to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn applicable_asset_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.applicable_asset_types.unwrap_or_default();
        v.push(input.into());
        self.applicable_asset_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The applicable asset types to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_applicable_asset_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.applicable_asset_types = input;
        self
    }
    /// <p>The applicable asset types to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_applicable_asset_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.applicable_asset_types
    }
    /// Appends an item to `subscription_target_config`.
    ///
    /// To override the contents of this collection use [`set_subscription_target_config`](Self::set_subscription_target_config).
    ///
    /// <p>The configuration to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn subscription_target_config(mut self, input: crate::types::SubscriptionTargetForm) -> Self {
        let mut v = self.subscription_target_config.unwrap_or_default();
        v.push(input);
        self.subscription_target_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_subscription_target_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetForm>>) -> Self {
        self.subscription_target_config = input;
        self
    }
    /// <p>The configuration to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_subscription_target_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetForm>> {
        &self.subscription_target_config
    }
    /// <p>The provider to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    /// This field is required.
    pub fn provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The provider to be updated as part of the <code>UpdateSubscriptionTarget</code> action.</p>
    pub fn get_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSubscriptionTargetOutput`](crate::operation::update_subscription_target::UpdateSubscriptionTargetOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::id)
    /// - [`authorized_principals`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::authorized_principals)
    /// - [`domain_id`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::domain_id)
    /// - [`project_id`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::project_id)
    /// - [`environment_id`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::environment_id)
    /// - [`name`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::name)
    /// - [`r#type`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::r#type)
    /// - [`created_by`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::created_by)
    /// - [`created_at`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::created_at)
    /// - [`manage_access_role`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::manage_access_role)
    /// - [`applicable_asset_types`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::applicable_asset_types)
    /// - [`subscription_target_config`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::subscription_target_config)
    /// - [`provider`](crate::operation::update_subscription_target::builders::UpdateSubscriptionTargetOutputBuilder::provider)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_subscription_target::UpdateSubscriptionTargetOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_subscription_target::UpdateSubscriptionTargetOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            authorized_principals: self.authorized_principals.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorized_principals",
                    "authorized_principals was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            project_id: self.project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_id",
                    "project_id was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            environment_id: self.environment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_id",
                    "environment_id was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            updated_by: self.updated_by,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            updated_at: self.updated_at,
            manage_access_role: self.manage_access_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manage_access_role",
                    "manage_access_role was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            applicable_asset_types: self.applicable_asset_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "applicable_asset_types",
                    "applicable_asset_types was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            subscription_target_config: self.subscription_target_config.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subscription_target_config",
                    "subscription_target_config was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            provider: self.provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider",
                    "provider was not specified but it is required when building UpdateSubscriptionTargetOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for UpdateSubscriptionTargetOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSubscriptionTargetOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("authorized_principals", &self.authorized_principals);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("project_id", &self.project_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("manage_access_role", &self.manage_access_role);
        formatter.field("applicable_asset_types", &self.applicable_asset_types);
        formatter.field("subscription_target_config", &self.subscription_target_config);
        formatter.field("provider", &self.provider);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
