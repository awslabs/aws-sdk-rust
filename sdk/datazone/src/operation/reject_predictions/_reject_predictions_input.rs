// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectPredictionsInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the prediction.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub revision: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub reject_rule: ::std::option::Option<crate::types::RejectRule>,
    /// <p></p>
    pub reject_choices: ::std::option::Option<::std::vec::Vec<crate::types::RejectChoice>>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl RejectPredictionsInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the prediction.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p></p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
    /// <p></p>
    pub fn reject_rule(&self) -> ::std::option::Option<&crate::types::RejectRule> {
        self.reject_rule.as_ref()
    }
    /// <p></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reject_choices.is_none()`.
    pub fn reject_choices(&self) -> &[crate::types::RejectChoice] {
        self.reject_choices.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl RejectPredictionsInput {
    /// Creates a new builder-style object to manufacture [`RejectPredictionsInput`](crate::operation::reject_predictions::RejectPredictionsInput).
    pub fn builder() -> crate::operation::reject_predictions::builders::RejectPredictionsInputBuilder {
        crate::operation::reject_predictions::builders::RejectPredictionsInputBuilder::default()
    }
}

/// A builder for [`RejectPredictionsInput`](crate::operation::reject_predictions::RejectPredictionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RejectPredictionsInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) reject_rule: ::std::option::Option<crate::types::RejectRule>,
    pub(crate) reject_choices: ::std::option::Option<::std::vec::Vec<crate::types::RejectChoice>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl RejectPredictionsInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the prediction.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the prediction.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the prediction.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p></p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p></p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p></p>
    pub fn reject_rule(mut self, input: crate::types::RejectRule) -> Self {
        self.reject_rule = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_reject_rule(mut self, input: ::std::option::Option<crate::types::RejectRule>) -> Self {
        self.reject_rule = input;
        self
    }
    /// <p></p>
    pub fn get_reject_rule(&self) -> &::std::option::Option<crate::types::RejectRule> {
        &self.reject_rule
    }
    /// Appends an item to `reject_choices`.
    ///
    /// To override the contents of this collection use [`set_reject_choices`](Self::set_reject_choices).
    ///
    /// <p></p>
    pub fn reject_choices(mut self, input: crate::types::RejectChoice) -> Self {
        let mut v = self.reject_choices.unwrap_or_default();
        v.push(input);
        self.reject_choices = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    pub fn set_reject_choices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RejectChoice>>) -> Self {
        self.reject_choices = input;
        self
    }
    /// <p></p>
    pub fn get_reject_choices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RejectChoice>> {
        &self.reject_choices
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`RejectPredictionsInput`](crate::operation::reject_predictions::RejectPredictionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::reject_predictions::RejectPredictionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::reject_predictions::RejectPredictionsInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            revision: self.revision,
            reject_rule: self.reject_rule,
            reject_choices: self.reject_choices,
            client_token: self.client_token,
        })
    }
}
