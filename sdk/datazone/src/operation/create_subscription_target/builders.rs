// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_subscription_target::_create_subscription_target_output::CreateSubscriptionTargetOutputBuilder;

pub use crate::operation::create_subscription_target::_create_subscription_target_input::CreateSubscriptionTargetInputBuilder;

impl crate::operation::create_subscription_target::builders::CreateSubscriptionTargetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_subscription_target::CreateSubscriptionTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_subscription_target::CreateSubscriptionTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_subscription_target();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateSubscriptionTarget`.
///
/// <p>Creates a subscription target in Amazon DataZone.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateSubscriptionTargetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_subscription_target::builders::CreateSubscriptionTargetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_subscription_target::CreateSubscriptionTargetOutput,
        crate::operation::create_subscription_target::CreateSubscriptionTargetError,
    > for CreateSubscriptionTargetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_subscription_target::CreateSubscriptionTargetOutput,
            crate::operation::create_subscription_target::CreateSubscriptionTargetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateSubscriptionTargetFluentBuilder {
    /// Creates a new `CreateSubscriptionTarget`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateSubscriptionTarget as a reference.
    pub fn as_input(&self) -> &crate::operation::create_subscription_target::builders::CreateSubscriptionTargetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_subscription_target::CreateSubscriptionTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_subscription_target::CreateSubscriptionTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_subscription_target::CreateSubscriptionTarget::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_subscription_target::CreateSubscriptionTarget::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_subscription_target::CreateSubscriptionTargetOutput,
        crate::operation::create_subscription_target::CreateSubscriptionTargetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which subscription target is created.</p>
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_identifier(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which subscription target is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_identifier(input);
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which subscription target is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_identifier()
    }
    /// <p>The ID of the environment in which subscription target is created.</p>
    pub fn environment_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_identifier(input.into());
        self
    }
    /// <p>The ID of the environment in which subscription target is created.</p>
    pub fn set_environment_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_identifier(input);
        self
    }
    /// <p>The ID of the environment in which subscription target is created.</p>
    pub fn get_environment_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_identifier()
    }
    /// <p>The name of the subscription target.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the subscription target.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the subscription target.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The type of the subscription target.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.r#type(input.into());
        self
    }
    /// <p>The type of the subscription target.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The type of the subscription target.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_type()
    }
    ///
    /// Appends an item to `subscriptionTargetConfig`.
    ///
    /// To override the contents of this collection use [`set_subscription_target_config`](Self::set_subscription_target_config).
    ///
    /// <p>The configuration of the subscription target.</p>
    pub fn subscription_target_config(mut self, input: crate::types::SubscriptionTargetForm) -> Self {
        self.inner = self.inner.subscription_target_config(input);
        self
    }
    /// <p>The configuration of the subscription target.</p>
    pub fn set_subscription_target_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetForm>>) -> Self {
        self.inner = self.inner.set_subscription_target_config(input);
        self
    }
    /// <p>The configuration of the subscription target.</p>
    pub fn get_subscription_target_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetForm>> {
        self.inner.get_subscription_target_config()
    }
    ///
    /// Appends an item to `authorizedPrincipals`.
    ///
    /// To override the contents of this collection use [`set_authorized_principals`](Self::set_authorized_principals).
    ///
    /// <p>The authorized principals of the subscription target.</p>
    pub fn authorized_principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.authorized_principals(input.into());
        self
    }
    /// <p>The authorized principals of the subscription target.</p>
    pub fn set_authorized_principals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_authorized_principals(input);
        self
    }
    /// <p>The authorized principals of the subscription target.</p>
    pub fn get_authorized_principals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_authorized_principals()
    }
    /// <p>The manage access role that is used to create the subscription target.</p>
    pub fn manage_access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.manage_access_role(input.into());
        self
    }
    /// <p>The manage access role that is used to create the subscription target.</p>
    pub fn set_manage_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_manage_access_role(input);
        self
    }
    /// <p>The manage access role that is used to create the subscription target.</p>
    pub fn get_manage_access_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_manage_access_role()
    }
    ///
    /// Appends an item to `applicableAssetTypes`.
    ///
    /// To override the contents of this collection use [`set_applicable_asset_types`](Self::set_applicable_asset_types).
    ///
    /// <p>The asset types that can be included in the subscription target.</p>
    pub fn applicable_asset_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.applicable_asset_types(input.into());
        self
    }
    /// <p>The asset types that can be included in the subscription target.</p>
    pub fn set_applicable_asset_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_applicable_asset_types(input);
        self
    }
    /// <p>The asset types that can be included in the subscription target.</p>
    pub fn get_applicable_asset_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_applicable_asset_types()
    }
    /// <p>The provider of the subscription target.</p>
    pub fn provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provider(input.into());
        self
    }
    /// <p>The provider of the subscription target.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provider(input);
        self
    }
    /// <p>The provider of the subscription target.</p>
    pub fn get_provider(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provider()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
