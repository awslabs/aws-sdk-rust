// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListNotificationsInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of notifications.</p>
    pub r#type: ::std::option::Option<crate::types::NotificationType>,
    /// <p>The time after which you want to list notifications.</p>
    pub after_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time before which you want to list notifications.</p>
    pub before_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The subjects of notifications.</p>
    pub subjects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The task status of notifications.</p>
    pub task_status: ::std::option::Option<crate::types::TaskStatus>,
    /// <p>The maximum number of notifications to return in a single call to <code>ListNotifications</code>. When the number of notifications to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>When the number of notifications is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of notifications, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationsInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The type of notifications.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NotificationType> {
        self.r#type.as_ref()
    }
    /// <p>The time after which you want to list notifications.</p>
    pub fn after_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.after_timestamp.as_ref()
    }
    /// <p>The time before which you want to list notifications.</p>
    pub fn before_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.before_timestamp.as_ref()
    }
    /// <p>The subjects of notifications.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subjects.is_none()`.
    pub fn subjects(&self) -> &[::std::string::String] {
        self.subjects.as_deref().unwrap_or_default()
    }
    /// <p>The task status of notifications.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::TaskStatus> {
        self.task_status.as_ref()
    }
    /// <p>The maximum number of notifications to return in a single call to <code>ListNotifications</code>. When the number of notifications to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>When the number of notifications is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of notifications, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListNotificationsInput {
    /// Creates a new builder-style object to manufacture [`ListNotificationsInput`](crate::operation::list_notifications::ListNotificationsInput).
    pub fn builder() -> crate::operation::list_notifications::builders::ListNotificationsInputBuilder {
        crate::operation::list_notifications::builders::ListNotificationsInputBuilder::default()
    }
}

/// A builder for [`ListNotificationsInput`](crate::operation::list_notifications::ListNotificationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListNotificationsInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::NotificationType>,
    pub(crate) after_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) before_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) subjects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) task_status: ::std::option::Option<crate::types::TaskStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListNotificationsInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The type of notifications.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NotificationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of notifications.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotificationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of notifications.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotificationType> {
        &self.r#type
    }
    /// <p>The time after which you want to list notifications.</p>
    pub fn after_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.after_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time after which you want to list notifications.</p>
    pub fn set_after_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.after_timestamp = input;
        self
    }
    /// <p>The time after which you want to list notifications.</p>
    pub fn get_after_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.after_timestamp
    }
    /// <p>The time before which you want to list notifications.</p>
    pub fn before_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.before_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time before which you want to list notifications.</p>
    pub fn set_before_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.before_timestamp = input;
        self
    }
    /// <p>The time before which you want to list notifications.</p>
    pub fn get_before_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.before_timestamp
    }
    /// Appends an item to `subjects`.
    ///
    /// To override the contents of this collection use [`set_subjects`](Self::set_subjects).
    ///
    /// <p>The subjects of notifications.</p>
    pub fn subjects(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subjects.unwrap_or_default();
        v.push(input.into());
        self.subjects = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subjects of notifications.</p>
    pub fn set_subjects(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subjects = input;
        self
    }
    /// <p>The subjects of notifications.</p>
    pub fn get_subjects(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subjects
    }
    /// <p>The task status of notifications.</p>
    pub fn task_status(mut self, input: crate::types::TaskStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task status of notifications.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::TaskStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>The task status of notifications.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::TaskStatus> {
        &self.task_status
    }
    /// <p>The maximum number of notifications to return in a single call to <code>ListNotifications</code>. When the number of notifications to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of notifications to return in a single call to <code>ListNotifications</code>. When the number of notifications to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of notifications to return in a single call to <code>ListNotifications</code>. When the number of notifications to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>When the number of notifications is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of notifications, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of notifications is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of notifications, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of notifications is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of notifications, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListNotifications</code> to list the next set of notifications.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListNotificationsInput`](crate::operation::list_notifications::ListNotificationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_notifications::ListNotificationsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_notifications::ListNotificationsInput {
            domain_identifier: self.domain_identifier,
            r#type: self.r#type,
            after_timestamp: self.after_timestamp,
            before_timestamp: self.before_timestamp,
            subjects: self.subjects,
            task_status: self.task_status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
