// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetEnvironmentBlueprintOutput {
    /// <p>The ID of this Amazon DataZone blueprint.</p>
    pub id: ::std::string::String,
    /// <p>The name of this Amazon DataZone blueprint.</p>
    pub name: ::std::string::String,
    /// <p>The description of this Amazon DataZone blueprint.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The provider of this Amazon DataZone blueprint.</p>
    pub provider: ::std::string::String,
    /// <p>The provisioning properties of this Amazon DataZone blueprint.</p>
    pub provisioning_properties: ::std::option::Option<crate::types::ProvisioningProperties>,
    /// <p>The deployment properties of this Amazon DataZone blueprint.</p>
    pub deployment_properties: ::std::option::Option<crate::types::DeploymentProperties>,
    /// <p>The user parameters of this blueprint.</p>
    pub user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>,
    /// <p>The glossary terms attached to this Amazon DataZone blueprint.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A timestamp of when this blueprint was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when this blueprint was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetEnvironmentBlueprintOutput {
    /// <p>The ID of this Amazon DataZone blueprint.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of this Amazon DataZone blueprint.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of this Amazon DataZone blueprint.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The provider of this Amazon DataZone blueprint.</p>
    pub fn provider(&self) -> &str {
        use std::ops::Deref;
        self.provider.deref()
    }
    /// <p>The provisioning properties of this Amazon DataZone blueprint.</p>
    pub fn provisioning_properties(&self) -> ::std::option::Option<&crate::types::ProvisioningProperties> {
        self.provisioning_properties.as_ref()
    }
    /// <p>The deployment properties of this Amazon DataZone blueprint.</p>
    pub fn deployment_properties(&self) -> ::std::option::Option<&crate::types::DeploymentProperties> {
        self.deployment_properties.as_ref()
    }
    /// <p>The user parameters of this blueprint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_parameters.is_none()`.
    pub fn user_parameters(&self) -> &[crate::types::CustomParameter] {
        self.user_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The glossary terms attached to this Amazon DataZone blueprint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>A timestamp of when this blueprint was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when this blueprint was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for GetEnvironmentBlueprintOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEnvironmentBlueprintOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("provider", &self.provider);
        formatter.field("provisioning_properties", &self.provisioning_properties);
        formatter.field("deployment_properties", &self.deployment_properties);
        formatter.field("user_parameters", &self.user_parameters);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetEnvironmentBlueprintOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEnvironmentBlueprintOutput {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentBlueprintOutput`](crate::operation::get_environment_blueprint::GetEnvironmentBlueprintOutput).
    pub fn builder() -> crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder {
        crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder::default()
    }
}

/// A builder for [`GetEnvironmentBlueprintOutput`](crate::operation::get_environment_blueprint::GetEnvironmentBlueprintOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetEnvironmentBlueprintOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) provider: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_properties: ::std::option::Option<crate::types::ProvisioningProperties>,
    pub(crate) deployment_properties: ::std::option::Option<crate::types::DeploymentProperties>,
    pub(crate) user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetEnvironmentBlueprintOutputBuilder {
    /// <p>The ID of this Amazon DataZone blueprint.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of this Amazon DataZone blueprint.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of this Amazon DataZone blueprint.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of this Amazon DataZone blueprint.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this Amazon DataZone blueprint.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this Amazon DataZone blueprint.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of this Amazon DataZone blueprint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of this Amazon DataZone blueprint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of this Amazon DataZone blueprint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The provider of this Amazon DataZone blueprint.</p>
    /// This field is required.
    pub fn provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider of this Amazon DataZone blueprint.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The provider of this Amazon DataZone blueprint.</p>
    pub fn get_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider
    }
    /// <p>The provisioning properties of this Amazon DataZone blueprint.</p>
    /// This field is required.
    pub fn provisioning_properties(mut self, input: crate::types::ProvisioningProperties) -> Self {
        self.provisioning_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioning properties of this Amazon DataZone blueprint.</p>
    pub fn set_provisioning_properties(mut self, input: ::std::option::Option<crate::types::ProvisioningProperties>) -> Self {
        self.provisioning_properties = input;
        self
    }
    /// <p>The provisioning properties of this Amazon DataZone blueprint.</p>
    pub fn get_provisioning_properties(&self) -> &::std::option::Option<crate::types::ProvisioningProperties> {
        &self.provisioning_properties
    }
    /// <p>The deployment properties of this Amazon DataZone blueprint.</p>
    pub fn deployment_properties(mut self, input: crate::types::DeploymentProperties) -> Self {
        self.deployment_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment properties of this Amazon DataZone blueprint.</p>
    pub fn set_deployment_properties(mut self, input: ::std::option::Option<crate::types::DeploymentProperties>) -> Self {
        self.deployment_properties = input;
        self
    }
    /// <p>The deployment properties of this Amazon DataZone blueprint.</p>
    pub fn get_deployment_properties(&self) -> &::std::option::Option<crate::types::DeploymentProperties> {
        &self.deployment_properties
    }
    /// Appends an item to `user_parameters`.
    ///
    /// To override the contents of this collection use [`set_user_parameters`](Self::set_user_parameters).
    ///
    /// <p>The user parameters of this blueprint.</p>
    pub fn user_parameters(mut self, input: crate::types::CustomParameter) -> Self {
        let mut v = self.user_parameters.unwrap_or_default();
        v.push(input);
        self.user_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user parameters of this blueprint.</p>
    pub fn set_user_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>) -> Self {
        self.user_parameters = input;
        self
    }
    /// <p>The user parameters of this blueprint.</p>
    pub fn get_user_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>> {
        &self.user_parameters
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms attached to this Amazon DataZone blueprint.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms attached to this Amazon DataZone blueprint.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms attached to this Amazon DataZone blueprint.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// <p>A timestamp of when this blueprint was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of when this blueprint was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A timestamp of when this blueprint was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when this blueprint was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when this blueprint was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when this blueprint was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEnvironmentBlueprintOutput`](crate::operation::get_environment_blueprint::GetEnvironmentBlueprintOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder::id)
    /// - [`name`](crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder::name)
    /// - [`provider`](crate::operation::get_environment_blueprint::builders::GetEnvironmentBlueprintOutputBuilder::provider)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_environment_blueprint::GetEnvironmentBlueprintOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_environment_blueprint::GetEnvironmentBlueprintOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetEnvironmentBlueprintOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetEnvironmentBlueprintOutput",
                )
            })?,
            description: self.description,
            provider: self.provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider",
                    "provider was not specified but it is required when building GetEnvironmentBlueprintOutput",
                )
            })?,
            provisioning_properties: self.provisioning_properties,
            deployment_properties: self.deployment_properties,
            user_parameters: self.user_parameters,
            glossary_terms: self.glossary_terms,
            created_at: self.created_at,
            updated_at: self.updated_at,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetEnvironmentBlueprintOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEnvironmentBlueprintOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("provider", &self.provider);
        formatter.field("provisioning_properties", &self.provisioning_properties);
        formatter.field("deployment_properties", &self.deployment_properties);
        formatter.field("user_parameters", &self.user_parameters);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
