// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSubscriptionGrantStatusInput {
    /// <p>The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the subscription grant the status of which is to be updated.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the asset the subscription grant status of which is to be updated.</p>
    pub asset_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub status: ::std::option::Option<crate::types::SubscriptionGrantStatus>,
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub failure_cause: ::std::option::Option<crate::types::FailureCause>,
    /// <p>The target name to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub target_name: ::std::option::Option<::std::string::String>,
}
impl UpdateSubscriptionGrantStatusInput {
    /// <p>The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the subscription grant the status of which is to be updated.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The identifier of the asset the subscription grant status of which is to be updated.</p>
    pub fn asset_identifier(&self) -> ::std::option::Option<&str> {
        self.asset_identifier.as_deref()
    }
    /// <p>The status to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SubscriptionGrantStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn failure_cause(&self) -> ::std::option::Option<&crate::types::FailureCause> {
        self.failure_cause.as_ref()
    }
    /// <p>The target name to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn target_name(&self) -> ::std::option::Option<&str> {
        self.target_name.as_deref()
    }
}
impl UpdateSubscriptionGrantStatusInput {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriptionGrantStatusInput`](crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusInput).
    pub fn builder() -> crate::operation::update_subscription_grant_status::builders::UpdateSubscriptionGrantStatusInputBuilder {
        crate::operation::update_subscription_grant_status::builders::UpdateSubscriptionGrantStatusInputBuilder::default()
    }
}

/// A builder for [`UpdateSubscriptionGrantStatusInput`](crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSubscriptionGrantStatusInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) asset_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SubscriptionGrantStatus>,
    pub(crate) failure_cause: ::std::option::Option<crate::types::FailureCause>,
    pub(crate) target_name: ::std::option::Option<::std::string::String>,
}
impl UpdateSubscriptionGrantStatusInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the subscription grant the status of which is to be updated.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subscription grant the status of which is to be updated.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the subscription grant the status of which is to be updated.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The identifier of the asset the subscription grant status of which is to be updated.</p>
    /// This field is required.
    pub fn asset_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the asset the subscription grant status of which is to be updated.</p>
    pub fn set_asset_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_identifier = input;
        self
    }
    /// <p>The identifier of the asset the subscription grant status of which is to be updated.</p>
    pub fn get_asset_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_identifier
    }
    /// <p>The status to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SubscriptionGrantStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SubscriptionGrantStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SubscriptionGrantStatus> {
        &self.status
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn failure_cause(mut self, input: crate::types::FailureCause) -> Self {
        self.failure_cause = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_failure_cause(mut self, input: ::std::option::Option<crate::types::FailureCause>) -> Self {
        self.failure_cause = input;
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_failure_cause(&self) -> &::std::option::Option<crate::types::FailureCause> {
        &self.failure_cause
    }
    /// <p>The target name to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn target_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target name to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn set_target_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_name = input;
        self
    }
    /// <p>The target name to be updated as part of the <code>UpdateSubscriptionGrantStatus</code> action.</p>
    pub fn get_target_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_name
    }
    /// Consumes the builder and constructs a [`UpdateSubscriptionGrantStatusInput`](crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            asset_identifier: self.asset_identifier,
            status: self.status,
            failure_cause: self.failure_cause,
            target_name: self.target_name,
        })
    }
}
