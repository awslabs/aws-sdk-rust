// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAssetRevisionOutput {
    /// <p>The unique identifier of the asset revision.</p>
    pub id: ::std::string::String,
    /// <p>The revised name of the asset.</p>
    pub name: ::std::string::String,
    /// <p>The identifier of the revision type.</p>
    pub type_identifier: ::std::string::String,
    /// <p>The revision type of the asset.</p>
    pub type_revision: ::std::string::String,
    /// <p></p>
    pub external_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the asset.</p>
    pub revision: ::std::string::String,
    /// <p>The revised asset description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the asset revision occured.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who performed the asset revision.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the first asset revision occured.</p>
    pub first_revision_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who performed the first asset revision.</p>
    pub first_revision_created_by: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms that were attached to the asset as part of asset revision.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The unique identifier of the revised project that owns the asset.</p>
    pub owning_project_id: ::std::string::String,
    /// <p>The unique identifier of the Amazon DataZone domain where the asset was revised.</p>
    pub domain_id: ::std::string::String,
    /// <p></p>
    pub listing: ::std::option::Option<crate::types::AssetListingDetails>,
    /// <p>The metadata forms that were attached to the asset as part of the asset revision.</p>
    pub forms_output: ::std::vec::Vec<crate::types::FormOutput>,
    /// <p>The read-only metadata forms that were attached to the asset as part of the asset revision.</p>
    pub read_only_forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub prediction_configuration: ::std::option::Option<crate::types::PredictionConfiguration>,
    _request_id: Option<String>,
}
impl CreateAssetRevisionOutput {
    /// <p>The unique identifier of the asset revision.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The revised name of the asset.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The identifier of the revision type.</p>
    pub fn type_identifier(&self) -> &str {
        use std::ops::Deref;
        self.type_identifier.deref()
    }
    /// <p>The revision type of the asset.</p>
    pub fn type_revision(&self) -> &str {
        use std::ops::Deref;
        self.type_revision.deref()
    }
    /// <p></p>
    pub fn external_identifier(&self) -> ::std::option::Option<&str> {
        self.external_identifier.as_deref()
    }
    /// <p>The revision of the asset.</p>
    pub fn revision(&self) -> &str {
        use std::ops::Deref;
        self.revision.deref()
    }
    /// <p>The revised asset description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp of when the asset revision occured.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who performed the asset revision.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp of when the first asset revision occured.</p>
    pub fn first_revision_created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.first_revision_created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who performed the first asset revision.</p>
    pub fn first_revision_created_by(&self) -> ::std::option::Option<&str> {
        self.first_revision_created_by.as_deref()
    }
    /// <p>The glossary terms that were attached to the asset as part of asset revision.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the revised project that owns the asset.</p>
    pub fn owning_project_id(&self) -> &str {
        use std::ops::Deref;
        self.owning_project_id.deref()
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the asset was revised.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p></p>
    pub fn listing(&self) -> ::std::option::Option<&crate::types::AssetListingDetails> {
        self.listing.as_ref()
    }
    /// <p>The metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn forms_output(&self) -> &[crate::types::FormOutput] {
        use std::ops::Deref;
        self.forms_output.deref()
    }
    /// <p>The read-only metadata forms that were attached to the asset as part of the asset revision.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.read_only_forms_output.is_none()`.
    pub fn read_only_forms_output(&self) -> &[crate::types::FormOutput] {
        self.read_only_forms_output.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn prediction_configuration(&self) -> ::std::option::Option<&crate::types::PredictionConfiguration> {
        self.prediction_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for CreateAssetRevisionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetRevisionOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_identifier", &self.type_identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("external_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("revision", &self.revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("first_revision_created_at", &self.first_revision_created_at);
        formatter.field("first_revision_created_by", &self.first_revision_created_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("listing", &self.listing);
        formatter.field("forms_output", &self.forms_output);
        formatter.field("read_only_forms_output", &self.read_only_forms_output);
        formatter.field("prediction_configuration", &self.prediction_configuration);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for CreateAssetRevisionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssetRevisionOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssetRevisionOutput`](crate::operation::create_asset_revision::CreateAssetRevisionOutput).
    pub fn builder() -> crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder {
        crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::default()
    }
}

/// A builder for [`CreateAssetRevisionOutput`](crate::operation::create_asset_revision::CreateAssetRevisionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateAssetRevisionOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) type_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) type_revision: ::std::option::Option<::std::string::String>,
    pub(crate) external_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) first_revision_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) first_revision_created_by: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) listing: ::std::option::Option<crate::types::AssetListingDetails>,
    pub(crate) forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    pub(crate) read_only_forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    pub(crate) prediction_configuration: ::std::option::Option<crate::types::PredictionConfiguration>,
    _request_id: Option<String>,
}
impl CreateAssetRevisionOutputBuilder {
    /// <p>The unique identifier of the asset revision.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the asset revision.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the asset revision.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The revised name of the asset.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revised name of the asset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The revised name of the asset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the revision type.</p>
    /// This field is required.
    pub fn type_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the revision type.</p>
    pub fn set_type_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_identifier = input;
        self
    }
    /// <p>The identifier of the revision type.</p>
    pub fn get_type_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_identifier
    }
    /// <p>The revision type of the asset.</p>
    /// This field is required.
    pub fn type_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision type of the asset.</p>
    pub fn set_type_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_revision = input;
        self
    }
    /// <p>The revision type of the asset.</p>
    pub fn get_type_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_revision
    }
    /// <p></p>
    pub fn external_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_external_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_identifier = input;
        self
    }
    /// <p></p>
    pub fn get_external_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_identifier
    }
    /// <p>The revision of the asset.</p>
    /// This field is required.
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the asset.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the asset.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p>The revised asset description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revised asset description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The revised asset description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp of when the asset revision occured.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the asset revision occured.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the asset revision occured.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Amazon DataZone user who performed the asset revision.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who performed the asset revision.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who performed the asset revision.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp of when the first asset revision occured.</p>
    pub fn first_revision_created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.first_revision_created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the first asset revision occured.</p>
    pub fn set_first_revision_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.first_revision_created_at = input;
        self
    }
    /// <p>The timestamp of when the first asset revision occured.</p>
    pub fn get_first_revision_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.first_revision_created_at
    }
    /// <p>The Amazon DataZone user who performed the first asset revision.</p>
    pub fn first_revision_created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_revision_created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who performed the first asset revision.</p>
    pub fn set_first_revision_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_revision_created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who performed the first asset revision.</p>
    pub fn get_first_revision_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_revision_created_by
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms that were attached to the asset as part of asset revision.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms that were attached to the asset as part of asset revision.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms that were attached to the asset as part of asset revision.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// <p>The unique identifier of the revised project that owns the asset.</p>
    /// This field is required.
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the revised project that owns the asset.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The unique identifier of the revised project that owns the asset.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the asset was revised.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the asset was revised.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the asset was revised.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p></p>
    pub fn listing(mut self, input: crate::types::AssetListingDetails) -> Self {
        self.listing = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_listing(mut self, input: ::std::option::Option<crate::types::AssetListingDetails>) -> Self {
        self.listing = input;
        self
    }
    /// <p></p>
    pub fn get_listing(&self) -> &::std::option::Option<crate::types::AssetListingDetails> {
        &self.listing
    }
    /// Appends an item to `forms_output`.
    ///
    /// To override the contents of this collection use [`set_forms_output`](Self::set_forms_output).
    ///
    /// <p>The metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn forms_output(mut self, input: crate::types::FormOutput) -> Self {
        let mut v = self.forms_output.unwrap_or_default();
        v.push(input);
        self.forms_output = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn set_forms_output(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>) -> Self {
        self.forms_output = input;
        self
    }
    /// <p>The metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn get_forms_output(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormOutput>> {
        &self.forms_output
    }
    /// Appends an item to `read_only_forms_output`.
    ///
    /// To override the contents of this collection use [`set_read_only_forms_output`](Self::set_read_only_forms_output).
    ///
    /// <p>The read-only metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn read_only_forms_output(mut self, input: crate::types::FormOutput) -> Self {
        let mut v = self.read_only_forms_output.unwrap_or_default();
        v.push(input);
        self.read_only_forms_output = ::std::option::Option::Some(v);
        self
    }
    /// <p>The read-only metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn set_read_only_forms_output(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>) -> Self {
        self.read_only_forms_output = input;
        self
    }
    /// <p>The read-only metadata forms that were attached to the asset as part of the asset revision.</p>
    pub fn get_read_only_forms_output(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormOutput>> {
        &self.read_only_forms_output
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn prediction_configuration(mut self, input: crate::types::PredictionConfiguration) -> Self {
        self.prediction_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn set_prediction_configuration(mut self, input: ::std::option::Option<crate::types::PredictionConfiguration>) -> Self {
        self.prediction_configuration = input;
        self
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn get_prediction_configuration(&self) -> &::std::option::Option<crate::types::PredictionConfiguration> {
        &self.prediction_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssetRevisionOutput`](crate::operation::create_asset_revision::CreateAssetRevisionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::id)
    /// - [`name`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::name)
    /// - [`type_identifier`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::type_identifier)
    /// - [`type_revision`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::type_revision)
    /// - [`revision`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::revision)
    /// - [`owning_project_id`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::owning_project_id)
    /// - [`domain_id`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::domain_id)
    /// - [`forms_output`](crate::operation::create_asset_revision::builders::CreateAssetRevisionOutputBuilder::forms_output)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_asset_revision::CreateAssetRevisionOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_asset_revision::CreateAssetRevisionOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            type_identifier: self.type_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_identifier",
                    "type_identifier was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            type_revision: self.type_revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_revision",
                    "type_revision was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            external_identifier: self.external_identifier,
            revision: self.revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision",
                    "revision was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            description: self.description,
            created_at: self.created_at,
            created_by: self.created_by,
            first_revision_created_at: self.first_revision_created_at,
            first_revision_created_by: self.first_revision_created_by,
            glossary_terms: self.glossary_terms,
            owning_project_id: self.owning_project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owning_project_id",
                    "owning_project_id was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            listing: self.listing,
            forms_output: self.forms_output.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "forms_output",
                    "forms_output was not specified but it is required when building CreateAssetRevisionOutput",
                )
            })?,
            read_only_forms_output: self.read_only_forms_output,
            prediction_configuration: self.prediction_configuration,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CreateAssetRevisionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetRevisionOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_identifier", &self.type_identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("external_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("revision", &self.revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("first_revision_created_at", &self.first_revision_created_at);
        formatter.field("first_revision_created_by", &self.first_revision_created_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("listing", &self.listing);
        formatter.field("forms_output", &self.forms_output);
        formatter.field("read_only_forms_output", &self.read_only_forms_output);
        formatter.field("prediction_configuration", &self.prediction_configuration);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
