// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAssetRevisionInput {
    /// <p>Te revised name of the asset.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the domain where the asset is being revised.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the asset.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The revision type of the asset.</p>
    pub type_revision: ::std::option::Option<::std::string::String>,
    /// <p>The revised description of the asset.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms to be attached to the asset as part of asset revision.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The metadata forms to be attached to the asset as part of asset revision.</p>
    pub forms_input: ::std::option::Option<::std::vec::Vec<crate::types::FormInput>>,
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub prediction_configuration: ::std::option::Option<crate::types::PredictionConfiguration>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateAssetRevisionInput {
    /// <p>Te revised name of the asset.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier of the domain where the asset is being revised.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the asset.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The revision type of the asset.</p>
    pub fn type_revision(&self) -> ::std::option::Option<&str> {
        self.type_revision.as_deref()
    }
    /// <p>The revised description of the asset.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The glossary terms to be attached to the asset as part of asset revision.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The metadata forms to be attached to the asset as part of asset revision.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forms_input.is_none()`.
    pub fn forms_input(&self) -> &[crate::types::FormInput] {
        self.forms_input.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn prediction_configuration(&self) -> ::std::option::Option<&crate::types::PredictionConfiguration> {
        self.prediction_configuration.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateAssetRevisionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetRevisionInput");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("forms_input", &"*** Sensitive Data Redacted ***");
        formatter.field("prediction_configuration", &self.prediction_configuration);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateAssetRevisionInput {
    /// Creates a new builder-style object to manufacture [`CreateAssetRevisionInput`](crate::operation::create_asset_revision::CreateAssetRevisionInput).
    pub fn builder() -> crate::operation::create_asset_revision::builders::CreateAssetRevisionInputBuilder {
        crate::operation::create_asset_revision::builders::CreateAssetRevisionInputBuilder::default()
    }
}

/// A builder for [`CreateAssetRevisionInput`](crate::operation::create_asset_revision::CreateAssetRevisionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateAssetRevisionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) type_revision: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) forms_input: ::std::option::Option<::std::vec::Vec<crate::types::FormInput>>,
    pub(crate) prediction_configuration: ::std::option::Option<crate::types::PredictionConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateAssetRevisionInputBuilder {
    /// <p>Te revised name of the asset.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Te revised name of the asset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Te revised name of the asset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier of the domain where the asset is being revised.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the domain where the asset is being revised.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The unique identifier of the domain where the asset is being revised.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the asset.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the asset.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the asset.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The revision type of the asset.</p>
    pub fn type_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision type of the asset.</p>
    pub fn set_type_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_revision = input;
        self
    }
    /// <p>The revision type of the asset.</p>
    pub fn get_type_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_revision
    }
    /// <p>The revised description of the asset.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revised description of the asset.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The revised description of the asset.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms to be attached to the asset as part of asset revision.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms to be attached to the asset as part of asset revision.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms to be attached to the asset as part of asset revision.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// Appends an item to `forms_input`.
    ///
    /// To override the contents of this collection use [`set_forms_input`](Self::set_forms_input).
    ///
    /// <p>The metadata forms to be attached to the asset as part of asset revision.</p>
    pub fn forms_input(mut self, input: crate::types::FormInput) -> Self {
        let mut v = self.forms_input.unwrap_or_default();
        v.push(input);
        self.forms_input = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata forms to be attached to the asset as part of asset revision.</p>
    pub fn set_forms_input(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormInput>>) -> Self {
        self.forms_input = input;
        self
    }
    /// <p>The metadata forms to be attached to the asset as part of asset revision.</p>
    pub fn get_forms_input(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormInput>> {
        &self.forms_input
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn prediction_configuration(mut self, input: crate::types::PredictionConfiguration) -> Self {
        self.prediction_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn set_prediction_configuration(mut self, input: ::std::option::Option<crate::types::PredictionConfiguration>) -> Self {
        self.prediction_configuration = input;
        self
    }
    /// <p>The configuration of the automatically generated business-friendly metadata for the asset.</p>
    pub fn get_prediction_configuration(&self) -> &::std::option::Option<crate::types::PredictionConfiguration> {
        &self.prediction_configuration
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateAssetRevisionInput`](crate::operation::create_asset_revision::CreateAssetRevisionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_asset_revision::CreateAssetRevisionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_asset_revision::CreateAssetRevisionInput {
            name: self.name,
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            type_revision: self.type_revision,
            description: self.description,
            glossary_terms: self.glossary_terms,
            forms_input: self.forms_input,
            prediction_configuration: self.prediction_configuration,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateAssetRevisionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetRevisionInputBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("forms_input", &"*** Sensitive Data Redacted ***");
        formatter.field("prediction_configuration", &self.prediction_configuration);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
