// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteDataSourceOutput {
    /// <p>The ID of the data source that is deleted.</p>
    pub id: ::std::string::String,
    /// <p>The status of this data source.</p>
    pub status: ::std::option::Option<crate::types::DataSourceStatus>,
    /// <p>The type of this data source.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the data source that is deleted.</p>
    pub name: ::std::string::String,
    /// <p>The description of the data source that is deleted.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    pub domain_id: ::std::string::String,
    /// <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    pub project_id: ::std::string::String,
    /// <p>The ID of the environemnt associated with this data source.</p>
    pub environment_id: ::std::string::String,
    /// <p>The configuration of the data source that is deleted.</p>
    pub configuration: ::std::option::Option<crate::types::DataSourceConfigurationOutput>,
    /// <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    pub enable_setting: ::std::option::Option<crate::types::EnableSetting>,
    /// <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    pub publish_on_import: ::std::option::Option<bool>,
    /// <p>The asset data forms associated with this data source.</p>
    pub asset_forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    /// <p>The schedule of runs for this data source.</p>
    pub schedule: ::std::option::Option<crate::types::ScheduleConfiguration>,
    /// <p>The status of the last run of this data source.</p>
    pub last_run_status: ::std::option::Option<crate::types::DataSourceRunStatus>,
    /// <p>The timestamp of when the data source was last run.</p>
    pub last_run_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub last_run_error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    /// <p>The timestamp of when this data source was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when this data source was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DeleteDataSourceOutput {
    /// <p>The ID of the data source that is deleted.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The status of this data source.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataSourceStatus> {
        self.status.as_ref()
    }
    /// <p>The type of this data source.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The name of the data source that is deleted.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the data source that is deleted.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    pub fn project_id(&self) -> &str {
        use std::ops::Deref;
        self.project_id.deref()
    }
    /// <p>The ID of the environemnt associated with this data source.</p>
    pub fn environment_id(&self) -> &str {
        use std::ops::Deref;
        self.environment_id.deref()
    }
    /// <p>The configuration of the data source that is deleted.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::DataSourceConfigurationOutput> {
        self.configuration.as_ref()
    }
    /// <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    pub fn enable_setting(&self) -> ::std::option::Option<&crate::types::EnableSetting> {
        self.enable_setting.as_ref()
    }
    /// <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    pub fn publish_on_import(&self) -> ::std::option::Option<bool> {
        self.publish_on_import
    }
    /// <p>The asset data forms associated with this data source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_forms_output.is_none()`.
    pub fn asset_forms_output(&self) -> &[crate::types::FormOutput] {
        self.asset_forms_output.as_deref().unwrap_or_default()
    }
    /// <p>The schedule of runs for this data source.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::ScheduleConfiguration> {
        self.schedule.as_ref()
    }
    /// <p>The status of the last run of this data source.</p>
    pub fn last_run_status(&self) -> ::std::option::Option<&crate::types::DataSourceRunStatus> {
        self.last_run_status.as_ref()
    }
    /// <p>The timestamp of when the data source was last run.</p>
    pub fn last_run_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_run_at.as_ref()
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn last_run_error_message(&self) -> ::std::option::Option<&crate::types::DataSourceErrorMessage> {
        self.last_run_error_message.as_ref()
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&crate::types::DataSourceErrorMessage> {
        self.error_message.as_ref()
    }
    /// <p>The timestamp of when this data source was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when this data source was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for DeleteDataSourceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDataSourceOutput");
        formatter.field("id", &self.id);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("project_id", &self.project_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("configuration", &self.configuration);
        formatter.field("enable_setting", &self.enable_setting);
        formatter.field("publish_on_import", &self.publish_on_import);
        formatter.field("asset_forms_output", &self.asset_forms_output);
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.field("last_run_status", &self.last_run_status);
        formatter.field("last_run_at", &self.last_run_at);
        formatter.field("last_run_error_message", &self.last_run_error_message);
        formatter.field("error_message", &self.error_message);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for DeleteDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDataSourceOutput`](crate::operation::delete_data_source::DeleteDataSourceOutput).
    pub fn builder() -> crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder {
        crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::default()
    }
}

/// A builder for [`DeleteDataSourceOutput`](crate::operation::delete_data_source::DeleteDataSourceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DeleteDataSourceOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataSourceStatus>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::DataSourceConfigurationOutput>,
    pub(crate) enable_setting: ::std::option::Option<crate::types::EnableSetting>,
    pub(crate) publish_on_import: ::std::option::Option<bool>,
    pub(crate) asset_forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    pub(crate) schedule: ::std::option::Option<crate::types::ScheduleConfiguration>,
    pub(crate) last_run_status: ::std::option::Option<crate::types::DataSourceRunStatus>,
    pub(crate) last_run_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_run_error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    pub(crate) error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DeleteDataSourceOutputBuilder {
    /// <p>The ID of the data source that is deleted.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data source that is deleted.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the data source that is deleted.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of this data source.</p>
    pub fn status(mut self, input: crate::types::DataSourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this data source.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this data source.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSourceStatus> {
        &self.status
    }
    /// <p>The type of this data source.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of this data source.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of this data source.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The name of the data source that is deleted.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data source that is deleted.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data source that is deleted.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the data source that is deleted.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the data source that is deleted.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the data source that is deleted.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the data source is deleted.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The ID of the project in which this data source exists and from which it's deleted.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The ID of the environemnt associated with this data source.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environemnt associated with this data source.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the environemnt associated with this data source.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The configuration of the data source that is deleted.</p>
    pub fn configuration(mut self, input: crate::types::DataSourceConfigurationOutput) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the data source that is deleted.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceConfigurationOutput>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the data source that is deleted.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::DataSourceConfigurationOutput> {
        &self.configuration
    }
    /// <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    pub fn enable_setting(mut self, input: crate::types::EnableSetting) -> Self {
        self.enable_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    pub fn set_enable_setting(mut self, input: ::std::option::Option<crate::types::EnableSetting>) -> Self {
        self.enable_setting = input;
        self
    }
    /// <p>The enable setting of the data source that specifies whether the data source is enabled or disabled.</p>
    pub fn get_enable_setting(&self) -> &::std::option::Option<crate::types::EnableSetting> {
        &self.enable_setting
    }
    /// <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    pub fn publish_on_import(mut self, input: bool) -> Self {
        self.publish_on_import = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    pub fn set_publish_on_import(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publish_on_import = input;
        self
    }
    /// <p>Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.</p>
    pub fn get_publish_on_import(&self) -> &::std::option::Option<bool> {
        &self.publish_on_import
    }
    /// Appends an item to `asset_forms_output`.
    ///
    /// To override the contents of this collection use [`set_asset_forms_output`](Self::set_asset_forms_output).
    ///
    /// <p>The asset data forms associated with this data source.</p>
    pub fn asset_forms_output(mut self, input: crate::types::FormOutput) -> Self {
        let mut v = self.asset_forms_output.unwrap_or_default();
        v.push(input);
        self.asset_forms_output = ::std::option::Option::Some(v);
        self
    }
    /// <p>The asset data forms associated with this data source.</p>
    pub fn set_asset_forms_output(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>) -> Self {
        self.asset_forms_output = input;
        self
    }
    /// <p>The asset data forms associated with this data source.</p>
    pub fn get_asset_forms_output(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormOutput>> {
        &self.asset_forms_output
    }
    /// <p>The schedule of runs for this data source.</p>
    pub fn schedule(mut self, input: crate::types::ScheduleConfiguration) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule of runs for this data source.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::ScheduleConfiguration>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule of runs for this data source.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::ScheduleConfiguration> {
        &self.schedule
    }
    /// <p>The status of the last run of this data source.</p>
    pub fn last_run_status(mut self, input: crate::types::DataSourceRunStatus) -> Self {
        self.last_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the last run of this data source.</p>
    pub fn set_last_run_status(mut self, input: ::std::option::Option<crate::types::DataSourceRunStatus>) -> Self {
        self.last_run_status = input;
        self
    }
    /// <p>The status of the last run of this data source.</p>
    pub fn get_last_run_status(&self) -> &::std::option::Option<crate::types::DataSourceRunStatus> {
        &self.last_run_status
    }
    /// <p>The timestamp of when the data source was last run.</p>
    pub fn last_run_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_run_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source was last run.</p>
    pub fn set_last_run_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_run_at = input;
        self
    }
    /// <p>The timestamp of when the data source was last run.</p>
    pub fn get_last_run_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_run_at
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn last_run_error_message(mut self, input: crate::types::DataSourceErrorMessage) -> Self {
        self.last_run_error_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_last_run_error_message(mut self, input: ::std::option::Option<crate::types::DataSourceErrorMessage>) -> Self {
        self.last_run_error_message = input;
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_last_run_error_message(&self) -> &::std::option::Option<crate::types::DataSourceErrorMessage> {
        &self.last_run_error_message
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn error_message(mut self, input: crate::types::DataSourceErrorMessage) -> Self {
        self.error_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<crate::types::DataSourceErrorMessage>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<crate::types::DataSourceErrorMessage> {
        &self.error_message
    }
    /// <p>The timestamp of when this data source was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when this data source was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when this data source was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when this data source was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when this data source was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when this data source was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteDataSourceOutput`](crate::operation::delete_data_source::DeleteDataSourceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::id)
    /// - [`name`](crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::name)
    /// - [`domain_id`](crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::domain_id)
    /// - [`project_id`](crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::project_id)
    /// - [`environment_id`](crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder::environment_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_data_source::DeleteDataSourceOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_data_source::DeleteDataSourceOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building DeleteDataSourceOutput",
                )
            })?,
            status: self.status,
            r#type: self.r#type,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DeleteDataSourceOutput",
                )
            })?,
            description: self.description,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building DeleteDataSourceOutput",
                )
            })?,
            project_id: self.project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_id",
                    "project_id was not specified but it is required when building DeleteDataSourceOutput",
                )
            })?,
            environment_id: self.environment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_id",
                    "environment_id was not specified but it is required when building DeleteDataSourceOutput",
                )
            })?,
            configuration: self.configuration,
            enable_setting: self.enable_setting,
            publish_on_import: self.publish_on_import,
            asset_forms_output: self.asset_forms_output,
            schedule: self.schedule,
            last_run_status: self.last_run_status,
            last_run_at: self.last_run_at,
            last_run_error_message: self.last_run_error_message,
            error_message: self.error_message,
            created_at: self.created_at,
            updated_at: self.updated_at,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for DeleteDataSourceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDataSourceOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("status", &self.status);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("project_id", &self.project_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("configuration", &self.configuration);
        formatter.field("enable_setting", &self.enable_setting);
        formatter.field("publish_on_import", &self.publish_on_import);
        formatter.field("asset_forms_output", &self.asset_forms_output);
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.field("last_run_status", &self.last_run_status);
        formatter.field("last_run_at", &self.last_run_at);
        formatter.field("last_run_error_message", &self.last_run_error_message);
        formatter.field("error_message", &self.error_message);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
