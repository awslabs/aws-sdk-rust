// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetListingOutput {
    /// <p></p>
    pub domain_id: ::std::string::String,
    /// <p></p>
    pub id: ::std::string::String,
    /// <p></p>
    pub listing_revision: ::std::string::String,
    /// <p></p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the listing was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub item: ::std::option::Option<crate::types::ListingItem>,
    /// <p></p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub status: ::std::option::Option<crate::types::ListingStatus>,
    _request_id: Option<String>,
}
impl GetListingOutput {
    /// <p></p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p></p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p></p>
    pub fn listing_revision(&self) -> &str {
        use std::ops::Deref;
        self.listing_revision.deref()
    }
    /// <p></p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the listing was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p></p>
    pub fn item(&self) -> ::std::option::Option<&crate::types::ListingItem> {
        self.item.as_ref()
    }
    /// <p></p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p></p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p></p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ListingStatus> {
        self.status.as_ref()
    }
}
impl ::std::fmt::Debug for GetListingOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetListingOutput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("listing_revision", &self.listing_revision);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("item", &self.item);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetListingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetListingOutput {
    /// Creates a new builder-style object to manufacture [`GetListingOutput`](crate::operation::get_listing::GetListingOutput).
    pub fn builder() -> crate::operation::get_listing::builders::GetListingOutputBuilder {
        crate::operation::get_listing::builders::GetListingOutputBuilder::default()
    }
}

/// A builder for [`GetListingOutput`](crate::operation::get_listing::GetListingOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetListingOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) listing_revision: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) item: ::std::option::Option<crate::types::ListingItem>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ListingStatus>,
    _request_id: Option<String>,
}
impl GetListingOutputBuilder {
    /// <p></p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p></p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p></p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p></p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p></p>
    /// This field is required.
    pub fn listing_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_listing_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_revision = input;
        self
    }
    /// <p></p>
    pub fn get_listing_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_revision
    }
    /// <p></p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p></p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the listing was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the listing was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the listing was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p></p>
    pub fn item(mut self, input: crate::types::ListingItem) -> Self {
        self.item = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_item(mut self, input: ::std::option::Option<crate::types::ListingItem>) -> Self {
        self.item = input;
        self
    }
    /// <p></p>
    pub fn get_item(&self) -> &::std::option::Option<crate::types::ListingItem> {
        &self.item
    }
    /// <p></p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p></p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p></p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p></p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p></p>
    pub fn status(mut self, input: crate::types::ListingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ListingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p></p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ListingStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetListingOutput`](crate::operation::get_listing::GetListingOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::get_listing::builders::GetListingOutputBuilder::domain_id)
    /// - [`id`](crate::operation::get_listing::builders::GetListingOutputBuilder::id)
    /// - [`listing_revision`](crate::operation::get_listing::builders::GetListingOutputBuilder::listing_revision)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_listing::GetListingOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_listing::GetListingOutput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building GetListingOutput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetListingOutput",
                )
            })?,
            listing_revision: self.listing_revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "listing_revision",
                    "listing_revision was not specified but it is required when building GetListingOutput",
                )
            })?,
            created_at: self.created_at,
            updated_at: self.updated_at,
            created_by: self.created_by,
            updated_by: self.updated_by,
            item: self.item,
            name: self.name,
            description: self.description,
            status: self.status,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetListingOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetListingOutputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("listing_revision", &self.listing_revision);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("item", &self.item);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
