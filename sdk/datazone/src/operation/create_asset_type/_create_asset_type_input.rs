// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAssetTypeInput {
    /// <p>The unique identifier of the Amazon DataZone domain where the custom asset type is being created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the custom asset type.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The descripton of the custom asset type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The metadata forms that are to be attached to the custom asset type.</p>
    pub forms_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryInput>>,
    /// <p>The identifier of the Amazon DataZone project that is to own the custom asset type.</p>
    pub owning_project_identifier: ::std::option::Option<::std::string::String>,
}
impl CreateAssetTypeInput {
    /// <p>The unique identifier of the Amazon DataZone domain where the custom asset type is being created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The name of the custom asset type.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The descripton of the custom asset type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The metadata forms that are to be attached to the custom asset type.</p>
    pub fn forms_input(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::FormEntryInput>> {
        self.forms_input.as_ref()
    }
    /// <p>The identifier of the Amazon DataZone project that is to own the custom asset type.</p>
    pub fn owning_project_identifier(&self) -> ::std::option::Option<&str> {
        self.owning_project_identifier.as_deref()
    }
}
impl ::std::fmt::Debug for CreateAssetTypeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetTypeInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("forms_input", &self.forms_input);
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.finish()
    }
}
impl CreateAssetTypeInput {
    /// Creates a new builder-style object to manufacture [`CreateAssetTypeInput`](crate::operation::create_asset_type::CreateAssetTypeInput).
    pub fn builder() -> crate::operation::create_asset_type::builders::CreateAssetTypeInputBuilder {
        crate::operation::create_asset_type::builders::CreateAssetTypeInputBuilder::default()
    }
}

/// A builder for [`CreateAssetTypeInput`](crate::operation::create_asset_type::CreateAssetTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateAssetTypeInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) forms_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryInput>>,
    pub(crate) owning_project_identifier: ::std::option::Option<::std::string::String>,
}
impl CreateAssetTypeInputBuilder {
    /// <p>The unique identifier of the Amazon DataZone domain where the custom asset type is being created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the custom asset type is being created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The unique identifier of the Amazon DataZone domain where the custom asset type is being created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The name of the custom asset type.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom asset type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the custom asset type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The descripton of the custom asset type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descripton of the custom asset type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The descripton of the custom asset type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `forms_input`.
    ///
    /// To override the contents of this collection use [`set_forms_input`](Self::set_forms_input).
    ///
    /// <p>The metadata forms that are to be attached to the custom asset type.</p>
    pub fn forms_input(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FormEntryInput) -> Self {
        let mut hash_map = self.forms_input.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.forms_input = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata forms that are to be attached to the custom asset type.</p>
    pub fn set_forms_input(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryInput>>,
    ) -> Self {
        self.forms_input = input;
        self
    }
    /// <p>The metadata forms that are to be attached to the custom asset type.</p>
    pub fn get_forms_input(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryInput>> {
        &self.forms_input
    }
    /// <p>The identifier of the Amazon DataZone project that is to own the custom asset type.</p>
    /// This field is required.
    pub fn owning_project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone project that is to own the custom asset type.</p>
    pub fn set_owning_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone project that is to own the custom asset type.</p>
    pub fn get_owning_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_identifier
    }
    /// Consumes the builder and constructs a [`CreateAssetTypeInput`](crate::operation::create_asset_type::CreateAssetTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_asset_type::CreateAssetTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_asset_type::CreateAssetTypeInput {
            domain_identifier: self.domain_identifier,
            name: self.name,
            description: self.description,
            forms_input: self.forms_input,
            owning_project_identifier: self.owning_project_identifier,
        })
    }
}
impl ::std::fmt::Debug for CreateAssetTypeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetTypeInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("forms_input", &self.forms_input);
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.finish()
    }
}
