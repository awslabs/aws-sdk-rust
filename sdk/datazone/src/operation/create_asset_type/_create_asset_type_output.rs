// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAssetTypeOutput {
    /// <p>The ID of the Amazon DataZone domain in which the asset type was created.</p>
    pub domain_id: ::std::string::String,
    /// <p>The name of the asset type.</p>
    pub name: ::std::string::String,
    /// <p>The revision of the custom asset type.</p>
    pub revision: ::std::string::String,
    /// <p>The description of the custom asset type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The metadata forms that are attached to the asset type.</p>
    pub forms_output: ::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>,
    /// <p>The ID of the Amazon DataZone project that currently owns this asset type.</p>
    pub owning_project_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon DataZone domain where the asset type was originally created.</p>
    pub origin_domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon DataZone project where the asset type was originally created.</p>
    pub origin_project_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the asset type is to be created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who creates this custom asset type.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the custom type was created.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user that created the custom asset type.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateAssetTypeOutput {
    /// <p>The ID of the Amazon DataZone domain in which the asset type was created.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The name of the asset type.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The revision of the custom asset type.</p>
    pub fn revision(&self) -> &str {
        use std::ops::Deref;
        self.revision.deref()
    }
    /// <p>The description of the custom asset type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The metadata forms that are attached to the asset type.</p>
    pub fn forms_output(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput> {
        &self.forms_output
    }
    /// <p>The ID of the Amazon DataZone project that currently owns this asset type.</p>
    pub fn owning_project_id(&self) -> ::std::option::Option<&str> {
        self.owning_project_id.as_deref()
    }
    /// <p>The ID of the Amazon DataZone domain where the asset type was originally created.</p>
    pub fn origin_domain_id(&self) -> ::std::option::Option<&str> {
        self.origin_domain_id.as_deref()
    }
    /// <p>The ID of the Amazon DataZone project where the asset type was originally created.</p>
    pub fn origin_project_id(&self) -> ::std::option::Option<&str> {
        self.origin_project_id.as_deref()
    }
    /// <p>The timestamp of when the asset type is to be created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who creates this custom asset type.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp of when the custom type was created.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The Amazon DataZone user that created the custom asset type.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl ::std::fmt::Debug for CreateAssetTypeOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetTypeOutput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("name", &self.name);
        formatter.field("revision", &self.revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("forms_output", &self.forms_output);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("origin_domain_id", &self.origin_domain_id);
        formatter.field("origin_project_id", &self.origin_project_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for CreateAssetTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssetTypeOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssetTypeOutput`](crate::operation::create_asset_type::CreateAssetTypeOutput).
    pub fn builder() -> crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder {
        crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder::default()
    }
}

/// A builder for [`CreateAssetTypeOutput`](crate::operation::create_asset_type::CreateAssetTypeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateAssetTypeOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) forms_output: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin_domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateAssetTypeOutputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which the asset type was created.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the asset type was created.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the asset type was created.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the asset type.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the asset type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the asset type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The revision of the custom asset type.</p>
    /// This field is required.
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the custom asset type.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the custom asset type.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p>The description of the custom asset type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the custom asset type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the custom asset type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `forms_output`.
    ///
    /// To override the contents of this collection use [`set_forms_output`](Self::set_forms_output).
    ///
    /// <p>The metadata forms that are attached to the asset type.</p>
    pub fn forms_output(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FormEntryOutput) -> Self {
        let mut hash_map = self.forms_output.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.forms_output = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata forms that are attached to the asset type.</p>
    pub fn set_forms_output(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>>,
    ) -> Self {
        self.forms_output = input;
        self
    }
    /// <p>The metadata forms that are attached to the asset type.</p>
    pub fn get_forms_output(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>> {
        &self.forms_output
    }
    /// <p>The ID of the Amazon DataZone project that currently owns this asset type.</p>
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone project that currently owns this asset type.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone project that currently owns this asset type.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// <p>The ID of the Amazon DataZone domain where the asset type was originally created.</p>
    pub fn origin_domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain where the asset type was originally created.</p>
    pub fn set_origin_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain where the asset type was originally created.</p>
    pub fn get_origin_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_domain_id
    }
    /// <p>The ID of the Amazon DataZone project where the asset type was originally created.</p>
    pub fn origin_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone project where the asset type was originally created.</p>
    pub fn set_origin_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_project_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone project where the asset type was originally created.</p>
    pub fn get_origin_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_project_id
    }
    /// <p>The timestamp of when the asset type is to be created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the asset type is to be created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the asset type is to be created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Amazon DataZone user who creates this custom asset type.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who creates this custom asset type.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who creates this custom asset type.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp of when the custom type was created.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the custom type was created.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the custom type was created.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The Amazon DataZone user that created the custom asset type.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user that created the custom asset type.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The Amazon DataZone user that created the custom asset type.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssetTypeOutput`](crate::operation::create_asset_type::CreateAssetTypeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder::domain_id)
    /// - [`name`](crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder::name)
    /// - [`revision`](crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder::revision)
    /// - [`forms_output`](crate::operation::create_asset_type::builders::CreateAssetTypeOutputBuilder::forms_output)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_asset_type::CreateAssetTypeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_asset_type::CreateAssetTypeOutput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building CreateAssetTypeOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateAssetTypeOutput",
                )
            })?,
            revision: self.revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision",
                    "revision was not specified but it is required when building CreateAssetTypeOutput",
                )
            })?,
            description: self.description,
            forms_output: self.forms_output.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "forms_output",
                    "forms_output was not specified but it is required when building CreateAssetTypeOutput",
                )
            })?,
            owning_project_id: self.owning_project_id,
            origin_domain_id: self.origin_domain_id,
            origin_project_id: self.origin_project_id,
            created_at: self.created_at,
            created_by: self.created_by,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CreateAssetTypeOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAssetTypeOutputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("name", &self.name);
        formatter.field("revision", &self.revision);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("forms_output", &self.forms_output);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("origin_domain_id", &self.origin_domain_id);
        formatter.field("origin_project_id", &self.origin_project_id);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
