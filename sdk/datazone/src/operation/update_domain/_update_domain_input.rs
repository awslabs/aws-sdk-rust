// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDomainInput {
    /// <p>The ID of the Amazon Web Services domain that is to be updated.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The single sign-on option to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub single_sign_on: ::std::option::Option<crate::types::SingleSignOn>,
    /// <p>The domain execution role to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub domain_execution_role: ::std::option::Option<::std::string::String>,
    /// <p>The name to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDomainInput {
    /// <p>The ID of the Amazon Web Services domain that is to be updated.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The description to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The single sign-on option to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn single_sign_on(&self) -> ::std::option::Option<&crate::types::SingleSignOn> {
        self.single_sign_on.as_ref()
    }
    /// <p>The domain execution role to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn domain_execution_role(&self) -> ::std::option::Option<&str> {
        self.domain_execution_role.as_deref()
    }
    /// <p>The name to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateDomainInput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainInput`](crate::operation::update_domain::UpdateDomainInput).
    pub fn builder() -> crate::operation::update_domain::builders::UpdateDomainInputBuilder {
        crate::operation::update_domain::builders::UpdateDomainInputBuilder::default()
    }
}

/// A builder for [`UpdateDomainInput`](crate::operation::update_domain::UpdateDomainInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDomainInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) single_sign_on: ::std::option::Option<crate::types::SingleSignOn>,
    pub(crate) domain_execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDomainInputBuilder {
    /// <p>The ID of the Amazon Web Services domain that is to be updated.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services domain that is to be updated.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the Amazon Web Services domain that is to be updated.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The description to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The single sign-on option to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn single_sign_on(mut self, input: crate::types::SingleSignOn) -> Self {
        self.single_sign_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The single sign-on option to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn set_single_sign_on(mut self, input: ::std::option::Option<crate::types::SingleSignOn>) -> Self {
        self.single_sign_on = input;
        self
    }
    /// <p>The single sign-on option to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn get_single_sign_on(&self) -> &::std::option::Option<crate::types::SingleSignOn> {
        &self.single_sign_on
    }
    /// <p>The domain execution role to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn domain_execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain execution role to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn set_domain_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_execution_role = input;
        self
    }
    /// <p>The domain execution role to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn get_domain_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_execution_role
    }
    /// <p>The name to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name to be updated as part of the <code>UpdateDomain</code> action.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateDomainInput`](crate::operation::update_domain::UpdateDomainInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_domain::UpdateDomainInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_domain::UpdateDomainInput {
            identifier: self.identifier,
            description: self.description,
            single_sign_on: self.single_sign_on,
            domain_execution_role: self.domain_execution_role,
            name: self.name,
            client_token: self.client_token,
        })
    }
}
