// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDomainOutput {
    /// <p>The identifier of the specified Amazon DataZone domain.</p>
    pub id: ::std::string::String,
    /// <p>The name of the Amazon DataZone domain.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Amazon DataZone domain.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The single sing-on option of the specified Amazon DataZone domain.</p>
    pub single_sign_on: ::std::option::Option<crate::types::SingleSignOn>,
    /// <p>The domain execution role with which the Amazon DataZone domain is created.</p>
    pub domain_execution_role: ::std::string::String,
    /// <p>The ARN of the specified Amazon DataZone domain.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data. </p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of the specified Amazon DataZone domain.</p>
    pub status: crate::types::DomainStatus,
    /// <p>The URL of the data portal for this Amazon DataZone domain.</p>
    pub portal_url: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the Amazon DataZone domain was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the Amazon DataZone domain was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags specified for the Amazon DataZone domain.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetDomainOutput {
    /// <p>The identifier of the specified Amazon DataZone domain.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the Amazon DataZone domain.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the Amazon DataZone domain.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The single sing-on option of the specified Amazon DataZone domain.</p>
    pub fn single_sign_on(&self) -> ::std::option::Option<&crate::types::SingleSignOn> {
        self.single_sign_on.as_ref()
    }
    /// <p>The domain execution role with which the Amazon DataZone domain is created.</p>
    pub fn domain_execution_role(&self) -> &str {
        use std::ops::Deref;
        self.domain_execution_role.deref()
    }
    /// <p>The ARN of the specified Amazon DataZone domain.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data. </p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
    /// <p>The status of the specified Amazon DataZone domain.</p>
    pub fn status(&self) -> &crate::types::DomainStatus {
        &self.status
    }
    /// <p>The URL of the data portal for this Amazon DataZone domain.</p>
    pub fn portal_url(&self) -> ::std::option::Option<&str> {
        self.portal_url.as_deref()
    }
    /// <p>The timestamp of when the Amazon DataZone domain was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the Amazon DataZone domain was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The tags specified for the Amazon DataZone domain.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDomainOutput {
    /// Creates a new builder-style object to manufacture [`GetDomainOutput`](crate::operation::get_domain::GetDomainOutput).
    pub fn builder() -> crate::operation::get_domain::builders::GetDomainOutputBuilder {
        crate::operation::get_domain::builders::GetDomainOutputBuilder::default()
    }
}

/// A builder for [`GetDomainOutput`](crate::operation::get_domain::GetDomainOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDomainOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) single_sign_on: ::std::option::Option<crate::types::SingleSignOn>,
    pub(crate) domain_execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DomainStatus>,
    pub(crate) portal_url: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetDomainOutputBuilder {
    /// <p>The identifier of the specified Amazon DataZone domain.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specified Amazon DataZone domain.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the specified Amazon DataZone domain.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the Amazon DataZone domain.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon DataZone domain.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon DataZone domain.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the Amazon DataZone domain.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon DataZone domain.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon DataZone domain.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The single sing-on option of the specified Amazon DataZone domain.</p>
    pub fn single_sign_on(mut self, input: crate::types::SingleSignOn) -> Self {
        self.single_sign_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The single sing-on option of the specified Amazon DataZone domain.</p>
    pub fn set_single_sign_on(mut self, input: ::std::option::Option<crate::types::SingleSignOn>) -> Self {
        self.single_sign_on = input;
        self
    }
    /// <p>The single sing-on option of the specified Amazon DataZone domain.</p>
    pub fn get_single_sign_on(&self) -> &::std::option::Option<crate::types::SingleSignOn> {
        &self.single_sign_on
    }
    /// <p>The domain execution role with which the Amazon DataZone domain is created.</p>
    /// This field is required.
    pub fn domain_execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain execution role with which the Amazon DataZone domain is created.</p>
    pub fn set_domain_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_execution_role = input;
        self
    }
    /// <p>The domain execution role with which the Amazon DataZone domain is created.</p>
    pub fn get_domain_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_execution_role
    }
    /// <p>The ARN of the specified Amazon DataZone domain.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the specified Amazon DataZone domain.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the specified Amazon DataZone domain.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data. </p>
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data. </p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data. </p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>The status of the specified Amazon DataZone domain.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DomainStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the specified Amazon DataZone domain.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DomainStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the specified Amazon DataZone domain.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DomainStatus> {
        &self.status
    }
    /// <p>The URL of the data portal for this Amazon DataZone domain.</p>
    pub fn portal_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portal_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the data portal for this Amazon DataZone domain.</p>
    pub fn set_portal_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portal_url = input;
        self
    }
    /// <p>The URL of the data portal for this Amazon DataZone domain.</p>
    pub fn get_portal_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.portal_url
    }
    /// <p>The timestamp of when the Amazon DataZone domain was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the Amazon DataZone domain was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the Amazon DataZone domain was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the Amazon DataZone domain was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the Amazon DataZone domain was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp of when the Amazon DataZone domain was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags specified for the Amazon DataZone domain.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags specified for the Amazon DataZone domain.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags specified for the Amazon DataZone domain.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDomainOutput`](crate::operation::get_domain::GetDomainOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_domain::builders::GetDomainOutputBuilder::id)
    /// - [`domain_execution_role`](crate::operation::get_domain::builders::GetDomainOutputBuilder::domain_execution_role)
    /// - [`status`](crate::operation::get_domain::builders::GetDomainOutputBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_domain::GetDomainOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_domain::GetDomainOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetDomainOutput",
                )
            })?,
            name: self.name,
            description: self.description,
            single_sign_on: self.single_sign_on,
            domain_execution_role: self.domain_execution_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_execution_role",
                    "domain_execution_role was not specified but it is required when building GetDomainOutput",
                )
            })?,
            arn: self.arn,
            kms_key_identifier: self.kms_key_identifier,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetDomainOutput",
                )
            })?,
            portal_url: self.portal_url,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
