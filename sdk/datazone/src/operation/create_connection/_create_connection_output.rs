// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateConnectionOutput {
    /// <p>The ID of the connection.</p>
    pub connection_id: ::std::string::String,
    /// <p>The connection description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the domain where the connection is created.</p>
    pub domain_id: ::std::string::String,
    /// <p>The ID of the domain unit where the connection is created.</p>
    pub domain_unit_id: ::std::string::String,
    /// <p>The ID of the environment where the connection is created.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The connection name.</p>
    pub name: ::std::string::String,
    /// <p>The physical endpoints of the connection.</p>
    pub physical_endpoints: ::std::vec::Vec<crate::types::PhysicalEndpoint>,
    /// <p>The ID of the project where the connection is created.</p>
    pub project_id: ::std::option::Option<::std::string::String>,
    /// <p>The connection props.</p>
    pub props: ::std::option::Option<crate::types::ConnectionPropertiesOutput>,
    /// <p>The connection type.</p>
    pub r#type: crate::types::ConnectionType,
    /// <p>The scope of the connection.</p>
    pub scope: ::std::option::Option<crate::types::ConnectionScope>,
    _request_id: Option<String>,
}
impl CreateConnectionOutput {
    /// <p>The ID of the connection.</p>
    pub fn connection_id(&self) -> &str {
        use std::ops::Deref;
        self.connection_id.deref()
    }
    /// <p>The connection description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the domain where the connection is created.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The ID of the domain unit where the connection is created.</p>
    pub fn domain_unit_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_unit_id.deref()
    }
    /// <p>The ID of the environment where the connection is created.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The connection name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The physical endpoints of the connection.</p>
    pub fn physical_endpoints(&self) -> &[crate::types::PhysicalEndpoint] {
        use std::ops::Deref;
        self.physical_endpoints.deref()
    }
    /// <p>The ID of the project where the connection is created.</p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
    /// <p>The connection props.</p>
    pub fn props(&self) -> ::std::option::Option<&crate::types::ConnectionPropertiesOutput> {
        self.props.as_ref()
    }
    /// <p>The connection type.</p>
    pub fn r#type(&self) -> &crate::types::ConnectionType {
        &self.r#type
    }
    /// <p>The scope of the connection.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::ConnectionScope> {
        self.scope.as_ref()
    }
}
impl ::std::fmt::Debug for CreateConnectionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateConnectionOutput");
        formatter.field("connection_id", &self.connection_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("name", &self.name);
        formatter.field("physical_endpoints", &self.physical_endpoints);
        formatter.field("project_id", &self.project_id);
        formatter.field("props", &self.props);
        formatter.field("r#type", &self.r#type);
        formatter.field("scope", &self.scope);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for CreateConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateConnectionOutput`](crate::operation::create_connection::CreateConnectionOutput).
    pub fn builder() -> crate::operation::create_connection::builders::CreateConnectionOutputBuilder {
        crate::operation::create_connection::builders::CreateConnectionOutputBuilder::default()
    }
}

/// A builder for [`CreateConnectionOutput`](crate::operation::create_connection::CreateConnectionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateConnectionOutputBuilder {
    pub(crate) connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) physical_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::PhysicalEndpoint>>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) props: ::std::option::Option<crate::types::ConnectionPropertiesOutput>,
    pub(crate) r#type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) scope: ::std::option::Option<crate::types::ConnectionScope>,
    _request_id: Option<String>,
}
impl CreateConnectionOutputBuilder {
    /// <p>The ID of the connection.</p>
    /// This field is required.
    pub fn connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn set_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_id = input;
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn get_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_id
    }
    /// <p>The connection description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connection description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The connection description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the domain where the connection is created.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where the connection is created.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain where the connection is created.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the domain unit where the connection is created.</p>
    /// This field is required.
    pub fn domain_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain unit where the connection is created.</p>
    pub fn set_domain_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit_id = input;
        self
    }
    /// <p>The ID of the domain unit where the connection is created.</p>
    pub fn get_domain_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit_id
    }
    /// <p>The ID of the environment where the connection is created.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment where the connection is created.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the environment where the connection is created.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The connection name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connection name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The connection name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `physical_endpoints`.
    ///
    /// To override the contents of this collection use [`set_physical_endpoints`](Self::set_physical_endpoints).
    ///
    /// <p>The physical endpoints of the connection.</p>
    pub fn physical_endpoints(mut self, input: crate::types::PhysicalEndpoint) -> Self {
        let mut v = self.physical_endpoints.unwrap_or_default();
        v.push(input);
        self.physical_endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The physical endpoints of the connection.</p>
    pub fn set_physical_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhysicalEndpoint>>) -> Self {
        self.physical_endpoints = input;
        self
    }
    /// <p>The physical endpoints of the connection.</p>
    pub fn get_physical_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhysicalEndpoint>> {
        &self.physical_endpoints
    }
    /// <p>The ID of the project where the connection is created.</p>
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project where the connection is created.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The ID of the project where the connection is created.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The connection props.</p>
    pub fn props(mut self, input: crate::types::ConnectionPropertiesOutput) -> Self {
        self.props = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection props.</p>
    pub fn set_props(mut self, input: ::std::option::Option<crate::types::ConnectionPropertiesOutput>) -> Self {
        self.props = input;
        self
    }
    /// <p>The connection props.</p>
    pub fn get_props(&self) -> &::std::option::Option<crate::types::ConnectionPropertiesOutput> {
        &self.props
    }
    /// <p>The connection type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ConnectionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The connection type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.r#type
    }
    /// <p>The scope of the connection.</p>
    pub fn scope(mut self, input: crate::types::ConnectionScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the connection.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::ConnectionScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the connection.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::ConnectionScope> {
        &self.scope
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectionOutput`](crate::operation::create_connection::CreateConnectionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`connection_id`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::connection_id)
    /// - [`domain_id`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::domain_id)
    /// - [`domain_unit_id`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::domain_unit_id)
    /// - [`name`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::name)
    /// - [`physical_endpoints`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::physical_endpoints)
    /// - [`r#type`](crate::operation::create_connection::builders::CreateConnectionOutputBuilder::type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_connection::CreateConnectionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_connection::CreateConnectionOutput {
            connection_id: self.connection_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_id",
                    "connection_id was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            description: self.description,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            domain_unit_id: self.domain_unit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_unit_id",
                    "domain_unit_id was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            environment_id: self.environment_id,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            physical_endpoints: self.physical_endpoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "physical_endpoints",
                    "physical_endpoints was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            project_id: self.project_id,
            props: self.props,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CreateConnectionOutput",
                )
            })?,
            scope: self.scope,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CreateConnectionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateConnectionOutputBuilder");
        formatter.field("connection_id", &self.connection_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("name", &self.name);
        formatter.field("physical_endpoints", &self.physical_endpoints);
        formatter.field("project_id", &self.project_id);
        formatter.field("props", &self.props);
        formatter.field("r#type", &self.r#type);
        formatter.field("scope", &self.scope);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
