// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEnvironmentInput {
    /// <p>The identifier of the Amazon DataZone project in which this environment is created.</p>
    pub project_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon DataZone domain in which the environment is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Amazon DataZone environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon DataZone environment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the environment profile that is used to create this Amazon DataZone environment.</p>
    pub environment_profile_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The user parameters of this Amazon DataZone environment.</p>
    pub user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentParameter>>,
    /// <p>The glossary terms that can be used in this Amazon DataZone environment.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateEnvironmentInput {
    /// <p>The identifier of the Amazon DataZone project in which this environment is created.</p>
    pub fn project_identifier(&self) -> ::std::option::Option<&str> {
        self.project_identifier.as_deref()
    }
    /// <p>The identifier of the Amazon DataZone domain in which the environment is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The description of the Amazon DataZone environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the Amazon DataZone environment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier of the environment profile that is used to create this Amazon DataZone environment.</p>
    pub fn environment_profile_identifier(&self) -> ::std::option::Option<&str> {
        self.environment_profile_identifier.as_deref()
    }
    /// <p>The user parameters of this Amazon DataZone environment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_parameters.is_none()`.
    pub fn user_parameters(&self) -> &[crate::types::EnvironmentParameter] {
        self.user_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The glossary terms that can be used in this Amazon DataZone environment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
}
impl CreateEnvironmentInput {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentInput`](crate::operation::create_environment::CreateEnvironmentInput).
    pub fn builder() -> crate::operation::create_environment::builders::CreateEnvironmentInputBuilder {
        crate::operation::create_environment::builders::CreateEnvironmentInputBuilder::default()
    }
}

/// A builder for [`CreateEnvironmentInput`](crate::operation::create_environment::CreateEnvironmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEnvironmentInputBuilder {
    pub(crate) project_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_profile_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentParameter>>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateEnvironmentInputBuilder {
    /// <p>The identifier of the Amazon DataZone project in which this environment is created.</p>
    /// This field is required.
    pub fn project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone project in which this environment is created.</p>
    pub fn set_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone project in which this environment is created.</p>
    pub fn get_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_identifier
    }
    /// <p>The identifier of the Amazon DataZone domain in which the environment is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the environment is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the environment is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The description of the Amazon DataZone environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon DataZone environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon DataZone environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the Amazon DataZone environment.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon DataZone environment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon DataZone environment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the environment profile that is used to create this Amazon DataZone environment.</p>
    /// This field is required.
    pub fn environment_profile_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_profile_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the environment profile that is used to create this Amazon DataZone environment.</p>
    pub fn set_environment_profile_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_profile_identifier = input;
        self
    }
    /// <p>The identifier of the environment profile that is used to create this Amazon DataZone environment.</p>
    pub fn get_environment_profile_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_profile_identifier
    }
    /// Appends an item to `user_parameters`.
    ///
    /// To override the contents of this collection use [`set_user_parameters`](Self::set_user_parameters).
    ///
    /// <p>The user parameters of this Amazon DataZone environment.</p>
    pub fn user_parameters(mut self, input: crate::types::EnvironmentParameter) -> Self {
        let mut v = self.user_parameters.unwrap_or_default();
        v.push(input);
        self.user_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user parameters of this Amazon DataZone environment.</p>
    pub fn set_user_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentParameter>>) -> Self {
        self.user_parameters = input;
        self
    }
    /// <p>The user parameters of this Amazon DataZone environment.</p>
    pub fn get_user_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentParameter>> {
        &self.user_parameters
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms that can be used in this Amazon DataZone environment.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms that can be used in this Amazon DataZone environment.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms that can be used in this Amazon DataZone environment.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// Consumes the builder and constructs a [`CreateEnvironmentInput`](crate::operation::create_environment::CreateEnvironmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_environment::CreateEnvironmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_environment::CreateEnvironmentInput {
            project_identifier: self.project_identifier,
            domain_identifier: self.domain_identifier,
            description: self.description,
            name: self.name,
            environment_profile_identifier: self.environment_profile_identifier,
            user_parameters: self.user_parameters,
            glossary_terms: self.glossary_terms,
        })
    }
}
