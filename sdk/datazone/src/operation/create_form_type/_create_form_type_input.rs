// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateFormTypeInput {
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of this Amazon DataZone metadata form type.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The model of this Amazon DataZone metadata form type.</p>
    pub model: ::std::option::Option<crate::types::Model>,
    /// <p>The ID of the Amazon DataZone project that owns this metadata form type.</p>
    pub owning_project_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of this Amazon DataZone metadata form type.</p>
    pub status: ::std::option::Option<crate::types::FormTypeStatus>,
    /// <p>The description of this Amazon DataZone metadata form type.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CreateFormTypeInput {
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The name of this Amazon DataZone metadata form type.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The model of this Amazon DataZone metadata form type.</p>
    pub fn model(&self) -> ::std::option::Option<&crate::types::Model> {
        self.model.as_ref()
    }
    /// <p>The ID of the Amazon DataZone project that owns this metadata form type.</p>
    pub fn owning_project_identifier(&self) -> ::std::option::Option<&str> {
        self.owning_project_identifier.as_deref()
    }
    /// <p>The status of this Amazon DataZone metadata form type.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FormTypeStatus> {
        self.status.as_ref()
    }
    /// <p>The description of this Amazon DataZone metadata form type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for CreateFormTypeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFormTypeInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.field("status", &self.status);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateFormTypeInput {
    /// Creates a new builder-style object to manufacture [`CreateFormTypeInput`](crate::operation::create_form_type::CreateFormTypeInput).
    pub fn builder() -> crate::operation::create_form_type::builders::CreateFormTypeInputBuilder {
        crate::operation::create_form_type::builders::CreateFormTypeInputBuilder::default()
    }
}

/// A builder for [`CreateFormTypeInput`](crate::operation::create_form_type::CreateFormTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateFormTypeInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) model: ::std::option::Option<crate::types::Model>,
    pub(crate) owning_project_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FormTypeStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CreateFormTypeInputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The name of this Amazon DataZone metadata form type.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this Amazon DataZone metadata form type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this Amazon DataZone metadata form type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The model of this Amazon DataZone metadata form type.</p>
    /// This field is required.
    pub fn model(mut self, input: crate::types::Model) -> Self {
        self.model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model of this Amazon DataZone metadata form type.</p>
    pub fn set_model(mut self, input: ::std::option::Option<crate::types::Model>) -> Self {
        self.model = input;
        self
    }
    /// <p>The model of this Amazon DataZone metadata form type.</p>
    pub fn get_model(&self) -> &::std::option::Option<crate::types::Model> {
        &self.model
    }
    /// <p>The ID of the Amazon DataZone project that owns this metadata form type.</p>
    /// This field is required.
    pub fn owning_project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone project that owns this metadata form type.</p>
    pub fn set_owning_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone project that owns this metadata form type.</p>
    pub fn get_owning_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_identifier
    }
    /// <p>The status of this Amazon DataZone metadata form type.</p>
    pub fn status(mut self, input: crate::types::FormTypeStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this Amazon DataZone metadata form type.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FormTypeStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this Amazon DataZone metadata form type.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FormTypeStatus> {
        &self.status
    }
    /// <p>The description of this Amazon DataZone metadata form type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of this Amazon DataZone metadata form type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of this Amazon DataZone metadata form type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CreateFormTypeInput`](crate::operation::create_form_type::CreateFormTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_form_type::CreateFormTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_form_type::CreateFormTypeInput {
            domain_identifier: self.domain_identifier,
            name: self.name,
            model: self.model,
            owning_project_identifier: self.owning_project_identifier,
            status: self.status,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for CreateFormTypeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFormTypeInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("owning_project_identifier", &self.owning_project_identifier);
        formatter.field("status", &self.status);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
