// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGroupProfileInput {
    /// <p>The identifier of the Amazon DataZone domain in which the group profile is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the group for which the group profile is created.</p>
    pub group_identifier: ::std::option::Option<::std::string::String>,
    /// <p> A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGroupProfileInput {
    /// <p>The identifier of the Amazon DataZone domain in which the group profile is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the group for which the group profile is created.</p>
    pub fn group_identifier(&self) -> ::std::option::Option<&str> {
        self.group_identifier.as_deref()
    }
    /// <p> A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateGroupProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateGroupProfileInput`](crate::operation::create_group_profile::CreateGroupProfileInput).
    pub fn builder() -> crate::operation::create_group_profile::builders::CreateGroupProfileInputBuilder {
        crate::operation::create_group_profile::builders::CreateGroupProfileInputBuilder::default()
    }
}

/// A builder for [`CreateGroupProfileInput`](crate::operation::create_group_profile::CreateGroupProfileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGroupProfileInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGroupProfileInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which the group profile is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the group profile is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the group profile is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the group for which the group profile is created.</p>
    /// This field is required.
    pub fn group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the group for which the group profile is created.</p>
    pub fn set_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_identifier = input;
        self
    }
    /// <p>The identifier of the group for which the group profile is created.</p>
    pub fn get_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_identifier
    }
    /// <p> A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p> A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateGroupProfileInput`](crate::operation::create_group_profile::CreateGroupProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_group_profile::CreateGroupProfileInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_group_profile::CreateGroupProfileInput {
            domain_identifier: self.domain_identifier,
            group_identifier: self.group_identifier,
            client_token: self.client_token,
        })
    }
}
