// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AcceptSubscriptionRequestInput {
    /// <p>The Amazon DataZone domain where the specified subscription request is being accepted.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the subscription request that is to be accepted.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>A description that specifies the reason for accepting the specified subscription request.</p>
    pub decision_comment: ::std::option::Option<::std::string::String>,
}
impl AcceptSubscriptionRequestInput {
    /// <p>The Amazon DataZone domain where the specified subscription request is being accepted.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The unique identifier of the subscription request that is to be accepted.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>A description that specifies the reason for accepting the specified subscription request.</p>
    pub fn decision_comment(&self) -> ::std::option::Option<&str> {
        self.decision_comment.as_deref()
    }
}
impl ::std::fmt::Debug for AcceptSubscriptionRequestInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptSubscriptionRequestInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("decision_comment", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AcceptSubscriptionRequestInput {
    /// Creates a new builder-style object to manufacture [`AcceptSubscriptionRequestInput`](crate::operation::accept_subscription_request::AcceptSubscriptionRequestInput).
    pub fn builder() -> crate::operation::accept_subscription_request::builders::AcceptSubscriptionRequestInputBuilder {
        crate::operation::accept_subscription_request::builders::AcceptSubscriptionRequestInputBuilder::default()
    }
}

/// A builder for [`AcceptSubscriptionRequestInput`](crate::operation::accept_subscription_request::AcceptSubscriptionRequestInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AcceptSubscriptionRequestInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) decision_comment: ::std::option::Option<::std::string::String>,
}
impl AcceptSubscriptionRequestInputBuilder {
    /// <p>The Amazon DataZone domain where the specified subscription request is being accepted.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone domain where the specified subscription request is being accepted.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The Amazon DataZone domain where the specified subscription request is being accepted.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The unique identifier of the subscription request that is to be accepted.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the subscription request that is to be accepted.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The unique identifier of the subscription request that is to be accepted.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>A description that specifies the reason for accepting the specified subscription request.</p>
    pub fn decision_comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.decision_comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description that specifies the reason for accepting the specified subscription request.</p>
    pub fn set_decision_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.decision_comment = input;
        self
    }
    /// <p>A description that specifies the reason for accepting the specified subscription request.</p>
    pub fn get_decision_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.decision_comment
    }
    /// Consumes the builder and constructs a [`AcceptSubscriptionRequestInput`](crate::operation::accept_subscription_request::AcceptSubscriptionRequestInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::accept_subscription_request::AcceptSubscriptionRequestInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::accept_subscription_request::AcceptSubscriptionRequestInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            decision_comment: self.decision_comment,
        })
    }
}
impl ::std::fmt::Debug for AcceptSubscriptionRequestInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptSubscriptionRequestInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("decision_comment", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
