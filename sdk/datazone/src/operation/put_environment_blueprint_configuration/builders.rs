// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_environment_blueprint_configuration::_put_environment_blueprint_configuration_output::PutEnvironmentBlueprintConfigurationOutputBuilder;

pub use crate::operation::put_environment_blueprint_configuration::_put_environment_blueprint_configuration_input::PutEnvironmentBlueprintConfigurationInputBuilder;

impl PutEnvironmentBlueprintConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_environment_blueprint_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutEnvironmentBlueprintConfiguration`.
///
/// <p>Writes the configuration for the specified environment blueprint in Amazon DataZone.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutEnvironmentBlueprintConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_environment_blueprint_configuration::builders::PutEnvironmentBlueprintConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationOutput,
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
    > for PutEnvironmentBlueprintConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationOutput,
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutEnvironmentBlueprintConfigurationFluentBuilder {
    /// Creates a new `PutEnvironmentBlueprintConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutEnvironmentBlueprintConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::put_environment_blueprint_configuration::builders::PutEnvironmentBlueprintConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfiguration::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationOutput,
        crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_identifier(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_identifier(input);
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_identifier()
    }
    /// <p>The identifier of the environment blueprint.</p>
    pub fn environment_blueprint_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_blueprint_identifier(input.into());
        self
    }
    /// <p>The identifier of the environment blueprint.</p>
    pub fn set_environment_blueprint_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_blueprint_identifier(input);
        self
    }
    /// <p>The identifier of the environment blueprint.</p>
    pub fn get_environment_blueprint_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_blueprint_identifier()
    }
    /// <p>The ARN of the provisioning role.</p>
    pub fn provisioning_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provisioning_role_arn(input.into());
        self
    }
    /// <p>The ARN of the provisioning role.</p>
    pub fn set_provisioning_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provisioning_role_arn(input);
        self
    }
    /// <p>The ARN of the provisioning role.</p>
    pub fn get_provisioning_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provisioning_role_arn()
    }
    /// <p>The ARN of the manage access role.</p>
    pub fn manage_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.manage_access_role_arn(input.into());
        self
    }
    /// <p>The ARN of the manage access role.</p>
    pub fn set_manage_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_manage_access_role_arn(input);
        self
    }
    /// <p>The ARN of the manage access role.</p>
    pub fn get_manage_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_manage_access_role_arn()
    }
    /// Appends an item to `enabledRegions`.
    ///
    /// To override the contents of this collection use [`set_enabled_regions`](Self::set_enabled_regions).
    ///
    /// <p>Specifies the enabled Amazon Web Services Regions.</p>
    pub fn enabled_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.enabled_regions(input.into());
        self
    }
    /// <p>Specifies the enabled Amazon Web Services Regions.</p>
    pub fn set_enabled_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_enabled_regions(input);
        self
    }
    /// <p>Specifies the enabled Amazon Web Services Regions.</p>
    pub fn get_enabled_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_enabled_regions()
    }
    /// Adds a key-value pair to `regionalParameters`.
    ///
    /// To override the contents of this collection use [`set_regional_parameters`](Self::set_regional_parameters).
    ///
    /// <p>The regional parameters in the environment blueprint.</p>
    pub fn regional_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ) -> Self {
        self.inner = self.inner.regional_parameters(k.into(), v);
        self
    }
    /// <p>The regional parameters in the environment blueprint.</p>
    pub fn set_regional_parameters(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
        >,
    ) -> Self {
        self.inner = self.inner.set_regional_parameters(input);
        self
    }
    /// <p>The regional parameters in the environment blueprint.</p>
    pub fn get_regional_parameters(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<::std::string::String, ::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    > {
        self.inner.get_regional_parameters()
    }
}
