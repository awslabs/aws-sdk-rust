// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGlossaryTermInput {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary term is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the business glossary in which this term is created.</p>
    pub glossary_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of this business glossary term.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of this business glossary term.</p>
    pub status: ::std::option::Option<crate::types::GlossaryTermStatus>,
    /// <p>The short description of this business glossary term.</p>
    pub short_description: ::std::option::Option<::std::string::String>,
    /// <p>The long description of this business glossary term.</p>
    pub long_description: ::std::option::Option<::std::string::String>,
    /// <p>The term relations of this business glossary term.</p>
    pub term_relations: ::std::option::Option<crate::types::TermRelations>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGlossaryTermInput {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary term is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the business glossary in which this term is created.</p>
    pub fn glossary_identifier(&self) -> ::std::option::Option<&str> {
        self.glossary_identifier.as_deref()
    }
    /// <p>The name of this business glossary term.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of this business glossary term.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::GlossaryTermStatus> {
        self.status.as_ref()
    }
    /// <p>The short description of this business glossary term.</p>
    pub fn short_description(&self) -> ::std::option::Option<&str> {
        self.short_description.as_deref()
    }
    /// <p>The long description of this business glossary term.</p>
    pub fn long_description(&self) -> ::std::option::Option<&str> {
        self.long_description.as_deref()
    }
    /// <p>The term relations of this business glossary term.</p>
    pub fn term_relations(&self) -> ::std::option::Option<&crate::types::TermRelations> {
        self.term_relations.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateGlossaryTermInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlossaryTermInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("glossary_identifier", &self.glossary_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("short_description", &"*** Sensitive Data Redacted ***");
        formatter.field("long_description", &"*** Sensitive Data Redacted ***");
        formatter.field("term_relations", &self.term_relations);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateGlossaryTermInput {
    /// Creates a new builder-style object to manufacture [`CreateGlossaryTermInput`](crate::operation::create_glossary_term::CreateGlossaryTermInput).
    pub fn builder() -> crate::operation::create_glossary_term::builders::CreateGlossaryTermInputBuilder {
        crate::operation::create_glossary_term::builders::CreateGlossaryTermInputBuilder::default()
    }
}

/// A builder for [`CreateGlossaryTermInput`](crate::operation::create_glossary_term::CreateGlossaryTermInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateGlossaryTermInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GlossaryTermStatus>,
    pub(crate) short_description: ::std::option::Option<::std::string::String>,
    pub(crate) long_description: ::std::option::Option<::std::string::String>,
    pub(crate) term_relations: ::std::option::Option<crate::types::TermRelations>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateGlossaryTermInputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which this business glossary term is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this business glossary term is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this business glossary term is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the business glossary in which this term is created.</p>
    /// This field is required.
    pub fn glossary_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.glossary_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the business glossary in which this term is created.</p>
    pub fn set_glossary_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.glossary_identifier = input;
        self
    }
    /// <p>The ID of the business glossary in which this term is created.</p>
    pub fn get_glossary_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.glossary_identifier
    }
    /// <p>The name of this business glossary term.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this business glossary term.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this business glossary term.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of this business glossary term.</p>
    pub fn status(mut self, input: crate::types::GlossaryTermStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this business glossary term.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GlossaryTermStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this business glossary term.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GlossaryTermStatus> {
        &self.status
    }
    /// <p>The short description of this business glossary term.</p>
    pub fn short_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.short_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The short description of this business glossary term.</p>
    pub fn set_short_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.short_description = input;
        self
    }
    /// <p>The short description of this business glossary term.</p>
    pub fn get_short_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.short_description
    }
    /// <p>The long description of this business glossary term.</p>
    pub fn long_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.long_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The long description of this business glossary term.</p>
    pub fn set_long_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.long_description = input;
        self
    }
    /// <p>The long description of this business glossary term.</p>
    pub fn get_long_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.long_description
    }
    /// <p>The term relations of this business glossary term.</p>
    pub fn term_relations(mut self, input: crate::types::TermRelations) -> Self {
        self.term_relations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The term relations of this business glossary term.</p>
    pub fn set_term_relations(mut self, input: ::std::option::Option<crate::types::TermRelations>) -> Self {
        self.term_relations = input;
        self
    }
    /// <p>The term relations of this business glossary term.</p>
    pub fn get_term_relations(&self) -> &::std::option::Option<crate::types::TermRelations> {
        &self.term_relations
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateGlossaryTermInput`](crate::operation::create_glossary_term::CreateGlossaryTermInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_glossary_term::CreateGlossaryTermInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_glossary_term::CreateGlossaryTermInput {
            domain_identifier: self.domain_identifier,
            glossary_identifier: self.glossary_identifier,
            name: self.name,
            status: self.status,
            short_description: self.short_description,
            long_description: self.long_description,
            term_relations: self.term_relations,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateGlossaryTermInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlossaryTermInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("glossary_identifier", &self.glossary_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("short_description", &"*** Sensitive Data Redacted ***");
        formatter.field("long_description", &"*** Sensitive Data Redacted ***");
        formatter.field("term_relations", &self.term_relations);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
