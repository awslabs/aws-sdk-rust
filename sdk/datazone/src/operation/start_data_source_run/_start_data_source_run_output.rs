// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDataSourceRunOutput {
    /// <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    pub domain_id: ::std::string::String,
    /// <p>The identifier of the data source.</p>
    pub data_source_id: ::std::string::String,
    /// <p>The identifier of the data source run.</p>
    pub id: ::std::string::String,
    /// <p>The identifier of the project.</p>
    pub project_id: ::std::string::String,
    /// <p>The status of the data source run.</p>
    pub status: crate::types::DataSourceRunStatus,
    /// <p>The type of the data source run.</p>
    pub r#type: crate::types::DataSourceRunType,
    /// <p>The configuration snapshot of the data source that is being run.</p>
    pub data_source_configuration_snapshot: ::std::option::Option<::std::string::String>,
    /// <p>Specifies run statistics for assets.</p>
    pub run_statistics_for_assets: ::std::option::Option<crate::types::RunStatisticsForAssets>,
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    /// <p>The timestamp of when data source run was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the data source run was updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the data source run was started.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the data source run was stopped.</p>
    pub stopped_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartDataSourceRunOutput {
    /// <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The identifier of the data source.</p>
    pub fn data_source_id(&self) -> &str {
        use std::ops::Deref;
        self.data_source_id.deref()
    }
    /// <p>The identifier of the data source run.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identifier of the project.</p>
    pub fn project_id(&self) -> &str {
        use std::ops::Deref;
        self.project_id.deref()
    }
    /// <p>The status of the data source run.</p>
    pub fn status(&self) -> &crate::types::DataSourceRunStatus {
        &self.status
    }
    /// <p>The type of the data source run.</p>
    pub fn r#type(&self) -> &crate::types::DataSourceRunType {
        &self.r#type
    }
    /// <p>The configuration snapshot of the data source that is being run.</p>
    pub fn data_source_configuration_snapshot(&self) -> ::std::option::Option<&str> {
        self.data_source_configuration_snapshot.as_deref()
    }
    /// <p>Specifies run statistics for assets.</p>
    pub fn run_statistics_for_assets(&self) -> ::std::option::Option<&crate::types::RunStatisticsForAssets> {
        self.run_statistics_for_assets.as_ref()
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&crate::types::DataSourceErrorMessage> {
        self.error_message.as_ref()
    }
    /// <p>The timestamp of when data source run was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the data source run was updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The timestamp of when the data source run was started.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The timestamp of when the data source run was stopped.</p>
    pub fn stopped_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stopped_at.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for StartDataSourceRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDataSourceRunOutput {
    /// Creates a new builder-style object to manufacture [`StartDataSourceRunOutput`](crate::operation::start_data_source_run::StartDataSourceRunOutput).
    pub fn builder() -> crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder {
        crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::default()
    }
}

/// A builder for [`StartDataSourceRunOutput`](crate::operation::start_data_source_run::StartDataSourceRunOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDataSourceRunOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataSourceRunStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::DataSourceRunType>,
    pub(crate) data_source_configuration_snapshot: ::std::option::Option<::std::string::String>,
    pub(crate) run_statistics_for_assets: ::std::option::Option<crate::types::RunStatisticsForAssets>,
    pub(crate) error_message: ::std::option::Option<crate::types::DataSourceErrorMessage>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stopped_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartDataSourceRunOutputBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which to start a data source run.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the data source.</p>
    /// This field is required.
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the data source.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>The identifier of the data source run.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the data source run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the project.</p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project.</p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p>The identifier of the project.</p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p>The status of the data source run.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DataSourceRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the data source run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSourceRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the data source run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSourceRunStatus> {
        &self.status
    }
    /// <p>The type of the data source run.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataSourceRunType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the data source run.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataSourceRunType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the data source run.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataSourceRunType> {
        &self.r#type
    }
    /// <p>The configuration snapshot of the data source that is being run.</p>
    pub fn data_source_configuration_snapshot(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_configuration_snapshot = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration snapshot of the data source that is being run.</p>
    pub fn set_data_source_configuration_snapshot(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_configuration_snapshot = input;
        self
    }
    /// <p>The configuration snapshot of the data source that is being run.</p>
    pub fn get_data_source_configuration_snapshot(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_configuration_snapshot
    }
    /// <p>Specifies run statistics for assets.</p>
    pub fn run_statistics_for_assets(mut self, input: crate::types::RunStatisticsForAssets) -> Self {
        self.run_statistics_for_assets = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies run statistics for assets.</p>
    pub fn set_run_statistics_for_assets(mut self, input: ::std::option::Option<crate::types::RunStatisticsForAssets>) -> Self {
        self.run_statistics_for_assets = input;
        self
    }
    /// <p>Specifies run statistics for assets.</p>
    pub fn get_run_statistics_for_assets(&self) -> &::std::option::Option<crate::types::RunStatisticsForAssets> {
        &self.run_statistics_for_assets
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn error_message(mut self, input: crate::types::DataSourceErrorMessage) -> Self {
        self.error_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<crate::types::DataSourceErrorMessage>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<crate::types::DataSourceErrorMessage> {
        &self.error_message
    }
    /// <p>The timestamp of when data source run was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when data source run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when data source run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the data source run was updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source run was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the data source run was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The timestamp of when the data source run was started.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source run was started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The timestamp of when the data source run was started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The timestamp of when the data source run was stopped.</p>
    pub fn stopped_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the data source run was stopped.</p>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The timestamp of when the data source run was stopped.</p>
    pub fn get_stopped_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stopped_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartDataSourceRunOutput`](crate::operation::start_data_source_run::StartDataSourceRunOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::domain_id)
    /// - [`data_source_id`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::data_source_id)
    /// - [`id`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::id)
    /// - [`project_id`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::project_id)
    /// - [`status`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::status)
    /// - [`r#type`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::r#type)
    /// - [`created_at`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::start_data_source_run::builders::StartDataSourceRunOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_data_source_run::StartDataSourceRunOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_data_source_run::StartDataSourceRunOutput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            data_source_id: self.data_source_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_id",
                    "data_source_id was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            project_id: self.project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_id",
                    "project_id was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            data_source_configuration_snapshot: self.data_source_configuration_snapshot,
            run_statistics_for_assets: self.run_statistics_for_assets,
            error_message: self.error_message,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building StartDataSourceRunOutput",
                )
            })?,
            started_at: self.started_at,
            stopped_at: self.stopped_at,
            _request_id: self._request_id,
        })
    }
}
