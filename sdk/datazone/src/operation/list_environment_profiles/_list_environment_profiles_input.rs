// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListEnvironmentProfilesInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Web Services account where you want to list environment profiles.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services region where you want to list environment profiles.</p>
    pub aws_account_region: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the blueprint that was used to create the environment profiles that you want to list.</p>
    pub environment_blueprint_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon DataZone project.</p>
    pub project_identifier: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>When the number of environment profiles is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of environment profiles, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of environment profiles to return in a single call to <code>ListEnvironmentProfiles</code>. When the number of environment profiles to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListEnvironmentProfilesInput {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services account where you want to list environment profiles.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The Amazon Web Services region where you want to list environment profiles.</p>
    pub fn aws_account_region(&self) -> ::std::option::Option<&str> {
        self.aws_account_region.as_deref()
    }
    /// <p>The identifier of the blueprint that was used to create the environment profiles that you want to list.</p>
    pub fn environment_blueprint_identifier(&self) -> ::std::option::Option<&str> {
        self.environment_blueprint_identifier.as_deref()
    }
    /// <p>The identifier of the Amazon DataZone project.</p>
    pub fn project_identifier(&self) -> ::std::option::Option<&str> {
        self.project_identifier.as_deref()
    }
    /// <p></p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>When the number of environment profiles is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of environment profiles, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of environment profiles to return in a single call to <code>ListEnvironmentProfiles</code>. When the number of environment profiles to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ::std::fmt::Debug for ListEnvironmentProfilesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListEnvironmentProfilesInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("aws_account_region", &self.aws_account_region);
        formatter.field("environment_blueprint_identifier", &self.environment_blueprint_identifier);
        formatter.field("project_identifier", &self.project_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
impl ListEnvironmentProfilesInput {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentProfilesInput`](crate::operation::list_environment_profiles::ListEnvironmentProfilesInput).
    pub fn builder() -> crate::operation::list_environment_profiles::builders::ListEnvironmentProfilesInputBuilder {
        crate::operation::list_environment_profiles::builders::ListEnvironmentProfilesInputBuilder::default()
    }
}

/// A builder for [`ListEnvironmentProfilesInput`](crate::operation::list_environment_profiles::ListEnvironmentProfilesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ListEnvironmentProfilesInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_region: ::std::option::Option<::std::string::String>,
    pub(crate) environment_blueprint_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) project_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListEnvironmentProfilesInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the Amazon Web Services account where you want to list environment profiles.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services account where you want to list environment profiles.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services account where you want to list environment profiles.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The Amazon Web Services region where you want to list environment profiles.</p>
    pub fn aws_account_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services region where you want to list environment profiles.</p>
    pub fn set_aws_account_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_region = input;
        self
    }
    /// <p>The Amazon Web Services region where you want to list environment profiles.</p>
    pub fn get_aws_account_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_region
    }
    /// <p>The identifier of the blueprint that was used to create the environment profiles that you want to list.</p>
    pub fn environment_blueprint_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_blueprint_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the blueprint that was used to create the environment profiles that you want to list.</p>
    pub fn set_environment_blueprint_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_blueprint_identifier = input;
        self
    }
    /// <p>The identifier of the blueprint that was used to create the environment profiles that you want to list.</p>
    pub fn get_environment_blueprint_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_blueprint_identifier
    }
    /// <p>The identifier of the Amazon DataZone project.</p>
    pub fn project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone project.</p>
    pub fn set_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone project.</p>
    pub fn get_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_identifier
    }
    /// <p></p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p></p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>When the number of environment profiles is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of environment profiles, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of environment profiles is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of environment profiles, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of environment profiles is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of environment profiles, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of environment profiles to return in a single call to <code>ListEnvironmentProfiles</code>. When the number of environment profiles to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of environment profiles to return in a single call to <code>ListEnvironmentProfiles</code>. When the number of environment profiles to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of environment profiles to return in a single call to <code>ListEnvironmentProfiles</code>. When the number of environment profiles to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEnvironmentProfiles</code> to list the next set of environment profiles.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListEnvironmentProfilesInput`](crate::operation::list_environment_profiles::ListEnvironmentProfilesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_environment_profiles::ListEnvironmentProfilesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_environment_profiles::ListEnvironmentProfilesInput {
            domain_identifier: self.domain_identifier,
            aws_account_id: self.aws_account_id,
            aws_account_region: self.aws_account_region,
            environment_blueprint_identifier: self.environment_blueprint_identifier,
            project_identifier: self.project_identifier,
            name: self.name,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
impl ::std::fmt::Debug for ListEnvironmentProfilesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListEnvironmentProfilesInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("aws_account_region", &self.aws_account_region);
        formatter.field("environment_blueprint_identifier", &self.environment_blueprint_identifier);
        formatter.field("project_identifier", &self.project_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
