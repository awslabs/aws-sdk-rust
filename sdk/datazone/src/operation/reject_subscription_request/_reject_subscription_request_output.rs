// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RejectSubscriptionRequestOutput {
    /// <p>The identifier of the subscription request that was rejected.</p>
    pub id: ::std::string::String,
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub created_by: ::std::string::String,
    /// <p>The Amazon DataZone user who updated the subscription request.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon DataZone domain in which the subscription request was rejected.</p>
    pub domain_id: ::std::string::String,
    /// <p>The status of the subscription request.</p>
    pub status: crate::types::SubscriptionRequestStatus,
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the subscription request was updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The reason for the subscription request.</p>
    pub request_reason: ::std::string::String,
    /// <p>The subscribed principals of the subscription request.</p>
    pub subscribed_principals: ::std::vec::Vec<crate::types::SubscribedPrincipal>,
    /// <p>The subscribed listings of the subscription request.</p>
    pub subscribed_listings: ::std::vec::Vec<crate::types::SubscribedListing>,
    /// <p>The identifier of the subscription request reviewer.</p>
    pub reviewer_id: ::std::option::Option<::std::string::String>,
    /// <p>The decision comment of the rejected subscription request.</p>
    pub decision_comment: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl RejectSubscriptionRequestOutput {
    /// <p>The identifier of the subscription request that was rejected.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The Amazon DataZone user who updated the subscription request.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The identifier of the Amazon DataZone domain in which the subscription request was rejected.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The status of the subscription request.</p>
    pub fn status(&self) -> &crate::types::SubscriptionRequestStatus {
        &self.status
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the subscription request was updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The reason for the subscription request.</p>
    pub fn request_reason(&self) -> &str {
        use std::ops::Deref;
        self.request_reason.deref()
    }
    /// <p>The subscribed principals of the subscription request.</p>
    pub fn subscribed_principals(&self) -> &[crate::types::SubscribedPrincipal] {
        use std::ops::Deref;
        self.subscribed_principals.deref()
    }
    /// <p>The subscribed listings of the subscription request.</p>
    pub fn subscribed_listings(&self) -> &[crate::types::SubscribedListing] {
        use std::ops::Deref;
        self.subscribed_listings.deref()
    }
    /// <p>The identifier of the subscription request reviewer.</p>
    pub fn reviewer_id(&self) -> ::std::option::Option<&str> {
        self.reviewer_id.as_deref()
    }
    /// <p>The decision comment of the rejected subscription request.</p>
    pub fn decision_comment(&self) -> ::std::option::Option<&str> {
        self.decision_comment.as_deref()
    }
}
impl ::std::fmt::Debug for RejectSubscriptionRequestOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RejectSubscriptionRequestOutput");
        formatter.field("id", &self.id);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("request_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("subscribed_principals", &self.subscribed_principals);
        formatter.field("subscribed_listings", &self.subscribed_listings);
        formatter.field("reviewer_id", &self.reviewer_id);
        formatter.field("decision_comment", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for RejectSubscriptionRequestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RejectSubscriptionRequestOutput {
    /// Creates a new builder-style object to manufacture [`RejectSubscriptionRequestOutput`](crate::operation::reject_subscription_request::RejectSubscriptionRequestOutput).
    pub fn builder() -> crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder {
        crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::default()
    }
}

/// A builder for [`RejectSubscriptionRequestOutput`](crate::operation::reject_subscription_request::RejectSubscriptionRequestOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RejectSubscriptionRequestOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SubscriptionRequestStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) request_reason: ::std::option::Option<::std::string::String>,
    pub(crate) subscribed_principals: ::std::option::Option<::std::vec::Vec<crate::types::SubscribedPrincipal>>,
    pub(crate) subscribed_listings: ::std::option::Option<::std::vec::Vec<crate::types::SubscribedListing>>,
    pub(crate) reviewer_id: ::std::option::Option<::std::string::String>,
    pub(crate) decision_comment: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl RejectSubscriptionRequestOutputBuilder {
    /// <p>The identifier of the subscription request that was rejected.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subscription request that was rejected.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the subscription request that was rejected.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The Amazon DataZone user who updated the subscription request.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who updated the subscription request.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The Amazon DataZone user who updated the subscription request.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The identifier of the Amazon DataZone domain in which the subscription request was rejected.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the subscription request was rejected.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the subscription request was rejected.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The status of the subscription request.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SubscriptionRequestStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the subscription request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SubscriptionRequestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the subscription request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SubscriptionRequestStatus> {
        &self.status
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the subscription request was rejected.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the subscription request was updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the subscription request was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the subscription request was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The reason for the subscription request.</p>
    /// This field is required.
    pub fn request_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the subscription request.</p>
    pub fn set_request_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_reason = input;
        self
    }
    /// <p>The reason for the subscription request.</p>
    pub fn get_request_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_reason
    }
    /// Appends an item to `subscribed_principals`.
    ///
    /// To override the contents of this collection use [`set_subscribed_principals`](Self::set_subscribed_principals).
    ///
    /// <p>The subscribed principals of the subscription request.</p>
    pub fn subscribed_principals(mut self, input: crate::types::SubscribedPrincipal) -> Self {
        let mut v = self.subscribed_principals.unwrap_or_default();
        v.push(input);
        self.subscribed_principals = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subscribed principals of the subscription request.</p>
    pub fn set_subscribed_principals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubscribedPrincipal>>) -> Self {
        self.subscribed_principals = input;
        self
    }
    /// <p>The subscribed principals of the subscription request.</p>
    pub fn get_subscribed_principals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubscribedPrincipal>> {
        &self.subscribed_principals
    }
    /// Appends an item to `subscribed_listings`.
    ///
    /// To override the contents of this collection use [`set_subscribed_listings`](Self::set_subscribed_listings).
    ///
    /// <p>The subscribed listings of the subscription request.</p>
    pub fn subscribed_listings(mut self, input: crate::types::SubscribedListing) -> Self {
        let mut v = self.subscribed_listings.unwrap_or_default();
        v.push(input);
        self.subscribed_listings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subscribed listings of the subscription request.</p>
    pub fn set_subscribed_listings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubscribedListing>>) -> Self {
        self.subscribed_listings = input;
        self
    }
    /// <p>The subscribed listings of the subscription request.</p>
    pub fn get_subscribed_listings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubscribedListing>> {
        &self.subscribed_listings
    }
    /// <p>The identifier of the subscription request reviewer.</p>
    pub fn reviewer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reviewer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subscription request reviewer.</p>
    pub fn set_reviewer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reviewer_id = input;
        self
    }
    /// <p>The identifier of the subscription request reviewer.</p>
    pub fn get_reviewer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reviewer_id
    }
    /// <p>The decision comment of the rejected subscription request.</p>
    pub fn decision_comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.decision_comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The decision comment of the rejected subscription request.</p>
    pub fn set_decision_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.decision_comment = input;
        self
    }
    /// <p>The decision comment of the rejected subscription request.</p>
    pub fn get_decision_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.decision_comment
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RejectSubscriptionRequestOutput`](crate::operation::reject_subscription_request::RejectSubscriptionRequestOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::id)
    /// - [`created_by`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::created_by)
    /// - [`domain_id`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::domain_id)
    /// - [`status`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::status)
    /// - [`created_at`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::updated_at)
    /// - [`request_reason`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::request_reason)
    /// - [`subscribed_principals`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::subscribed_principals)
    /// - [`subscribed_listings`](crate::operation::reject_subscription_request::builders::RejectSubscriptionRequestOutputBuilder::subscribed_listings)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::reject_subscription_request::RejectSubscriptionRequestOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::reject_subscription_request::RejectSubscriptionRequestOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            updated_by: self.updated_by,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            request_reason: self.request_reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "request_reason",
                    "request_reason was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            subscribed_principals: self.subscribed_principals.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subscribed_principals",
                    "subscribed_principals was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            subscribed_listings: self.subscribed_listings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subscribed_listings",
                    "subscribed_listings was not specified but it is required when building RejectSubscriptionRequestOutput",
                )
            })?,
            reviewer_id: self.reviewer_id,
            decision_comment: self.decision_comment,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for RejectSubscriptionRequestOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RejectSubscriptionRequestOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("request_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("subscribed_principals", &self.subscribed_principals);
        formatter.field("subscribed_listings", &self.subscribed_listings);
        formatter.field("reviewer_id", &self.reviewer_id);
        formatter.field("decision_comment", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
