// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a notification generated in Amazon DataZone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NotificationOutput {
    /// <p>The identifier of the notification.</p>
    pub identifier: ::std::string::String,
    /// <p>The identifier of a Amazon DataZone domain in which the notification exists.</p>
    pub domain_identifier: ::std::string::String,
    /// <p>The type of the notification.</p>
    pub r#type: crate::types::NotificationType,
    /// <p>The topic of the notification.</p>
    pub topic: ::std::option::Option<crate::types::Topic>,
    /// <p>The title of the notification.</p>
    pub title: ::std::string::String,
    /// <p>The message included in the notification.</p>
    pub message: ::std::string::String,
    /// <p>The status included in the notification.</p>
    pub status: ::std::option::Option<crate::types::TaskStatus>,
    /// <p>The action link included in the notification.</p>
    pub action_link: ::std::string::String,
    /// <p>The timestamp of when a notification was created.</p>
    pub creation_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the notification was last updated.</p>
    pub last_updated_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The metadata included in the notification.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl NotificationOutput {
    /// <p>The identifier of the notification.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The identifier of a Amazon DataZone domain in which the notification exists.</p>
    pub fn domain_identifier(&self) -> &str {
        use std::ops::Deref;
        self.domain_identifier.deref()
    }
    /// <p>The type of the notification.</p>
    pub fn r#type(&self) -> &crate::types::NotificationType {
        &self.r#type
    }
    /// <p>The topic of the notification.</p>
    pub fn topic(&self) -> ::std::option::Option<&crate::types::Topic> {
        self.topic.as_ref()
    }
    /// <p>The title of the notification.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The message included in the notification.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The status included in the notification.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskStatus> {
        self.status.as_ref()
    }
    /// <p>The action link included in the notification.</p>
    pub fn action_link(&self) -> &str {
        use std::ops::Deref;
        self.action_link.deref()
    }
    /// <p>The timestamp of when a notification was created.</p>
    pub fn creation_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_timestamp
    }
    /// <p>The timestamp of when the notification was last updated.</p>
    pub fn last_updated_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_timestamp
    }
    /// <p>The metadata included in the notification.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metadata.as_ref()
    }
}
impl ::std::fmt::Debug for NotificationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationOutput");
        formatter.field("identifier", &self.identifier);
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("r#type", &self.r#type);
        formatter.field("topic", &self.topic);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("action_link", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_timestamp", &self.creation_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.field("metadata", &self.metadata);
        formatter.finish()
    }
}
impl NotificationOutput {
    /// Creates a new builder-style object to manufacture [`NotificationOutput`](crate::types::NotificationOutput).
    pub fn builder() -> crate::types::builders::NotificationOutputBuilder {
        crate::types::builders::NotificationOutputBuilder::default()
    }
}

/// A builder for [`NotificationOutput`](crate::types::NotificationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct NotificationOutputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::NotificationType>,
    pub(crate) topic: ::std::option::Option<crate::types::Topic>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaskStatus>,
    pub(crate) action_link: ::std::option::Option<::std::string::String>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl NotificationOutputBuilder {
    /// <p>The identifier of the notification.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the notification.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the notification.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The identifier of a Amazon DataZone domain in which the notification exists.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a Amazon DataZone domain in which the notification exists.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of a Amazon DataZone domain in which the notification exists.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The type of the notification.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NotificationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the notification.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotificationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the notification.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotificationType> {
        &self.r#type
    }
    /// <p>The topic of the notification.</p>
    /// This field is required.
    pub fn topic(mut self, input: crate::types::Topic) -> Self {
        self.topic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The topic of the notification.</p>
    pub fn set_topic(mut self, input: ::std::option::Option<crate::types::Topic>) -> Self {
        self.topic = input;
        self
    }
    /// <p>The topic of the notification.</p>
    pub fn get_topic(&self) -> &::std::option::Option<crate::types::Topic> {
        &self.topic
    }
    /// <p>The title of the notification.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the notification.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the notification.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The message included in the notification.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message included in the notification.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message included in the notification.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The status included in the notification.</p>
    pub fn status(mut self, input: crate::types::TaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status included in the notification.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status included in the notification.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskStatus> {
        &self.status
    }
    /// <p>The action link included in the notification.</p>
    /// This field is required.
    pub fn action_link(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_link = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action link included in the notification.</p>
    pub fn set_action_link(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_link = input;
        self
    }
    /// <p>The action link included in the notification.</p>
    pub fn get_action_link(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_link
    }
    /// <p>The timestamp of when a notification was created.</p>
    /// This field is required.
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when a notification was created.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The timestamp of when a notification was created.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// <p>The timestamp of when the notification was last updated.</p>
    /// This field is required.
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the notification was last updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The timestamp of when the notification was last updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>The metadata included in the notification.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata included in the notification.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata included in the notification.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`NotificationOutput`](crate::types::NotificationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`identifier`](crate::types::builders::NotificationOutputBuilder::identifier)
    /// - [`domain_identifier`](crate::types::builders::NotificationOutputBuilder::domain_identifier)
    /// - [`r#type`](crate::types::builders::NotificationOutputBuilder::r#type)
    /// - [`title`](crate::types::builders::NotificationOutputBuilder::title)
    /// - [`message`](crate::types::builders::NotificationOutputBuilder::message)
    /// - [`action_link`](crate::types::builders::NotificationOutputBuilder::action_link)
    /// - [`creation_timestamp`](crate::types::builders::NotificationOutputBuilder::creation_timestamp)
    /// - [`last_updated_timestamp`](crate::types::builders::NotificationOutputBuilder::last_updated_timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationOutput {
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building NotificationOutput",
                )
            })?,
            domain_identifier: self.domain_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_identifier",
                    "domain_identifier was not specified but it is required when building NotificationOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building NotificationOutput",
                )
            })?,
            topic: self.topic,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building NotificationOutput",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building NotificationOutput",
                )
            })?,
            status: self.status,
            action_link: self.action_link.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_link",
                    "action_link was not specified but it is required when building NotificationOutput",
                )
            })?,
            creation_timestamp: self.creation_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_timestamp",
                    "creation_timestamp was not specified but it is required when building NotificationOutput",
                )
            })?,
            last_updated_timestamp: self.last_updated_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_timestamp",
                    "last_updated_timestamp was not specified but it is required when building NotificationOutput",
                )
            })?,
            metadata: self.metadata,
        })
    }
}
impl ::std::fmt::Debug for NotificationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NotificationOutputBuilder");
        formatter.field("identifier", &self.identifier);
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("r#type", &self.r#type);
        formatter.field("topic", &self.topic);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("action_link", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_timestamp", &self.creation_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.field("metadata", &self.metadata);
        formatter.finish()
    }
}
