// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties of a connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ConnectionPropertiesInput {
    /// <p>The Amazon Q properties of the connection.</p>
    AmazonQProperties(crate::types::AmazonQPropertiesInput),
    /// <p>The Amazon Athena properties of a connection.</p>
    AthenaProperties(crate::types::AthenaPropertiesInput),
    /// <p>The Amazon Web Services Glue properties of a connection.</p>
    GlueProperties(crate::types::GluePropertiesInput),
    /// <p>The hyper pod properties of a connection.</p>
    HyperPodProperties(crate::types::HyperPodPropertiesInput),
    /// <p>The IAM properties of a connection.</p>
    IamProperties(crate::types::IamPropertiesInput),
    /// <p>The MLflow properties of a connection.</p>
    MlflowProperties(crate::types::MlflowPropertiesInput),
    /// <p>The Amazon Redshift properties of a connection.</p>
    RedshiftProperties(crate::types::RedshiftPropertiesInput),
    /// <p>The Amazon S3 properties of a connection.</p>
    S3Properties(crate::types::S3PropertiesInput),
    /// <p>The Spark EMR properties of a connection.</p>
    SparkEmrProperties(crate::types::SparkEmrPropertiesInput),
    /// <p>The Spark Amazon Web Services Glue properties of a connection.</p>
    SparkGlueProperties(crate::types::SparkGluePropertiesInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ConnectionPropertiesInput {
    /// Tries to convert the enum instance into [`AmazonQProperties`](crate::types::ConnectionPropertiesInput::AmazonQProperties), extracting the inner [`AmazonQPropertiesInput`](crate::types::AmazonQPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_amazon_q_properties(&self) -> ::std::result::Result<&crate::types::AmazonQPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::AmazonQProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AmazonQProperties`](crate::types::ConnectionPropertiesInput::AmazonQProperties).
    pub fn is_amazon_q_properties(&self) -> bool {
        self.as_amazon_q_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`AthenaProperties`](crate::types::ConnectionPropertiesInput::AthenaProperties), extracting the inner [`AthenaPropertiesInput`](crate::types::AthenaPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_athena_properties(&self) -> ::std::result::Result<&crate::types::AthenaPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::AthenaProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AthenaProperties`](crate::types::ConnectionPropertiesInput::AthenaProperties).
    pub fn is_athena_properties(&self) -> bool {
        self.as_athena_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`GlueProperties`](crate::types::ConnectionPropertiesInput::GlueProperties), extracting the inner [`GluePropertiesInput`](crate::types::GluePropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_glue_properties(&self) -> ::std::result::Result<&crate::types::GluePropertiesInput, &Self> {
        if let ConnectionPropertiesInput::GlueProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GlueProperties`](crate::types::ConnectionPropertiesInput::GlueProperties).
    pub fn is_glue_properties(&self) -> bool {
        self.as_glue_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`HyperPodProperties`](crate::types::ConnectionPropertiesInput::HyperPodProperties), extracting the inner [`HyperPodPropertiesInput`](crate::types::HyperPodPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_hyper_pod_properties(&self) -> ::std::result::Result<&crate::types::HyperPodPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::HyperPodProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`HyperPodProperties`](crate::types::ConnectionPropertiesInput::HyperPodProperties).
    pub fn is_hyper_pod_properties(&self) -> bool {
        self.as_hyper_pod_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`IamProperties`](crate::types::ConnectionPropertiesInput::IamProperties), extracting the inner [`IamPropertiesInput`](crate::types::IamPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iam_properties(&self) -> ::std::result::Result<&crate::types::IamPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::IamProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IamProperties`](crate::types::ConnectionPropertiesInput::IamProperties).
    pub fn is_iam_properties(&self) -> bool {
        self.as_iam_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`MlflowProperties`](crate::types::ConnectionPropertiesInput::MlflowProperties), extracting the inner [`MlflowPropertiesInput`](crate::types::MlflowPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mlflow_properties(&self) -> ::std::result::Result<&crate::types::MlflowPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::MlflowProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`MlflowProperties`](crate::types::ConnectionPropertiesInput::MlflowProperties).
    pub fn is_mlflow_properties(&self) -> bool {
        self.as_mlflow_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`RedshiftProperties`](crate::types::ConnectionPropertiesInput::RedshiftProperties), extracting the inner [`RedshiftPropertiesInput`](crate::types::RedshiftPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_redshift_properties(&self) -> ::std::result::Result<&crate::types::RedshiftPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::RedshiftProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RedshiftProperties`](crate::types::ConnectionPropertiesInput::RedshiftProperties).
    pub fn is_redshift_properties(&self) -> bool {
        self.as_redshift_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`S3Properties`](crate::types::ConnectionPropertiesInput::S3Properties), extracting the inner [`S3PropertiesInput`](crate::types::S3PropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3_properties(&self) -> ::std::result::Result<&crate::types::S3PropertiesInput, &Self> {
        if let ConnectionPropertiesInput::S3Properties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`S3Properties`](crate::types::ConnectionPropertiesInput::S3Properties).
    pub fn is_s3_properties(&self) -> bool {
        self.as_s3_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`SparkEmrProperties`](crate::types::ConnectionPropertiesInput::SparkEmrProperties), extracting the inner [`SparkEmrPropertiesInput`](crate::types::SparkEmrPropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_spark_emr_properties(&self) -> ::std::result::Result<&crate::types::SparkEmrPropertiesInput, &Self> {
        if let ConnectionPropertiesInput::SparkEmrProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SparkEmrProperties`](crate::types::ConnectionPropertiesInput::SparkEmrProperties).
    pub fn is_spark_emr_properties(&self) -> bool {
        self.as_spark_emr_properties().is_ok()
    }
    /// Tries to convert the enum instance into [`SparkGlueProperties`](crate::types::ConnectionPropertiesInput::SparkGlueProperties), extracting the inner [`SparkGluePropertiesInput`](crate::types::SparkGluePropertiesInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_spark_glue_properties(&self) -> ::std::result::Result<&crate::types::SparkGluePropertiesInput, &Self> {
        if let ConnectionPropertiesInput::SparkGlueProperties(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SparkGlueProperties`](crate::types::ConnectionPropertiesInput::SparkGlueProperties).
    pub fn is_spark_glue_properties(&self) -> bool {
        self.as_spark_glue_properties().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
