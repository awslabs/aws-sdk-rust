// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an asset published in an Amazon DataZone catalog.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssetListingItem {
    /// <p>The identifier of the listing (asset published in Amazon DataZone catalog).</p>
    pub listing_id: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the listing (asset published in Amazon DataZone catalog).</p>
    pub listing_revision: ::std::option::Option<::std::string::String>,
    /// <p>The name of the inventory asset.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the inventory asset.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the inventory asset.</p>
    pub entity_revision: ::std::option::Option<::std::string::String>,
    /// <p>The type of the inventory asset.</p>
    pub entity_type: ::std::option::Option<::std::string::String>,
    /// <p>The description of an asset published in an Amazon DataZone catalog.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub listing_created_by: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub listing_updated_by: ::std::option::Option<::std::string::String>,
    /// <p>Glossary terms attached to the inventory asset.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    /// <p>The identifier of the project that owns the inventory asset.</p>
    pub owning_project_id: ::std::option::Option<::std::string::String>,
    /// <p>The additional attributes of an asset published in an Amazon DataZone catalog.</p>
    pub additional_attributes: ::std::option::Option<crate::types::AssetListingItemAdditionalAttributes>,
}
impl AssetListingItem {
    /// <p>The identifier of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn listing_id(&self) -> ::std::option::Option<&str> {
        self.listing_id.as_deref()
    }
    /// <p>The revision of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn listing_revision(&self) -> ::std::option::Option<&str> {
        self.listing_revision.as_deref()
    }
    /// <p>The name of the inventory asset.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier of the inventory asset.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The revision of the inventory asset.</p>
    pub fn entity_revision(&self) -> ::std::option::Option<&str> {
        self.entity_revision.as_deref()
    }
    /// <p>The type of the inventory asset.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&str> {
        self.entity_type.as_deref()
    }
    /// <p>The description of an asset published in an Amazon DataZone catalog.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn listing_created_by(&self) -> ::std::option::Option<&str> {
        self.listing_created_by.as_deref()
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn listing_updated_by(&self) -> ::std::option::Option<&str> {
        self.listing_updated_by.as_deref()
    }
    /// <p>Glossary terms attached to the inventory asset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[crate::types::DetailedGlossaryTerm] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the project that owns the inventory asset.</p>
    pub fn owning_project_id(&self) -> ::std::option::Option<&str> {
        self.owning_project_id.as_deref()
    }
    /// <p>The additional attributes of an asset published in an Amazon DataZone catalog.</p>
    pub fn additional_attributes(&self) -> ::std::option::Option<&crate::types::AssetListingItemAdditionalAttributes> {
        self.additional_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for AssetListingItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetListingItem");
        formatter.field("listing_id", &self.listing_id);
        formatter.field("listing_revision", &self.listing_revision);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_id", &self.entity_id);
        formatter.field("entity_revision", &self.entity_revision);
        formatter.field("entity_type", &self.entity_type);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("listing_created_by", &self.listing_created_by);
        formatter.field("listing_updated_by", &self.listing_updated_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("additional_attributes", &self.additional_attributes);
        formatter.finish()
    }
}
impl AssetListingItem {
    /// Creates a new builder-style object to manufacture [`AssetListingItem`](crate::types::AssetListingItem).
    pub fn builder() -> crate::types::builders::AssetListingItemBuilder {
        crate::types::builders::AssetListingItemBuilder::default()
    }
}

/// A builder for [`AssetListingItem`](crate::types::AssetListingItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AssetListingItemBuilder {
    pub(crate) listing_id: ::std::option::Option<::std::string::String>,
    pub(crate) listing_revision: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_revision: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) listing_created_by: ::std::option::Option<::std::string::String>,
    pub(crate) listing_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) additional_attributes: ::std::option::Option<crate::types::AssetListingItemAdditionalAttributes>,
}
impl AssetListingItemBuilder {
    /// <p>The identifier of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn listing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn set_listing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_id = input;
        self
    }
    /// <p>The identifier of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn get_listing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_id
    }
    /// <p>The revision of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn listing_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn set_listing_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_revision = input;
        self
    }
    /// <p>The revision of the listing (asset published in Amazon DataZone catalog).</p>
    pub fn get_listing_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_revision
    }
    /// <p>The name of the inventory asset.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the inventory asset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the inventory asset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the inventory asset.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the inventory asset.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The identifier of the inventory asset.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The revision of the inventory asset.</p>
    pub fn entity_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the inventory asset.</p>
    pub fn set_entity_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_revision = input;
        self
    }
    /// <p>The revision of the inventory asset.</p>
    pub fn get_entity_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_revision
    }
    /// <p>The type of the inventory asset.</p>
    pub fn entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the inventory asset.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the inventory asset.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_type
    }
    /// <p>The description of an asset published in an Amazon DataZone catalog.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of an asset published in an Amazon DataZone catalog.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of an asset published in an Amazon DataZone catalog.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn listing_created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn set_listing_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the listing.</p>
    pub fn get_listing_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_created_by
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn listing_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn set_listing_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_updated_by = input;
        self
    }
    /// <p>The Amazon DataZone user who updated the listing.</p>
    pub fn get_listing_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_updated_by
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>Glossary terms attached to the inventory asset.</p>
    pub fn glossary_terms(mut self, input: crate::types::DetailedGlossaryTerm) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input);
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Glossary terms attached to the inventory asset.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>Glossary terms attached to the inventory asset.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>> {
        &self.glossary_terms
    }
    /// <p>The identifier of the project that owns the inventory asset.</p>
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project that owns the inventory asset.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The identifier of the project that owns the inventory asset.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// <p>The additional attributes of an asset published in an Amazon DataZone catalog.</p>
    pub fn additional_attributes(mut self, input: crate::types::AssetListingItemAdditionalAttributes) -> Self {
        self.additional_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional attributes of an asset published in an Amazon DataZone catalog.</p>
    pub fn set_additional_attributes(mut self, input: ::std::option::Option<crate::types::AssetListingItemAdditionalAttributes>) -> Self {
        self.additional_attributes = input;
        self
    }
    /// <p>The additional attributes of an asset published in an Amazon DataZone catalog.</p>
    pub fn get_additional_attributes(&self) -> &::std::option::Option<crate::types::AssetListingItemAdditionalAttributes> {
        &self.additional_attributes
    }
    /// Consumes the builder and constructs a [`AssetListingItem`](crate::types::AssetListingItem).
    pub fn build(self) -> crate::types::AssetListingItem {
        crate::types::AssetListingItem {
            listing_id: self.listing_id,
            listing_revision: self.listing_revision,
            name: self.name,
            entity_id: self.entity_id,
            entity_revision: self.entity_revision,
            entity_type: self.entity_type,
            description: self.description,
            created_at: self.created_at,
            listing_created_by: self.listing_created_by,
            listing_updated_by: self.listing_updated_by,
            glossary_terms: self.glossary_terms,
            owning_project_id: self.owning_project_id,
            additional_attributes: self.additional_attributes,
        }
    }
}
impl ::std::fmt::Debug for AssetListingItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetListingItemBuilder");
        formatter.field("listing_id", &self.listing_id);
        formatter.field("listing_revision", &self.listing_revision);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("entity_id", &self.entity_id);
        formatter.field("entity_revision", &self.entity_revision);
        formatter.field("entity_type", &self.entity_type);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("listing_created_by", &self.listing_created_by);
        formatter.field("listing_updated_by", &self.listing_updated_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("additional_attributes", &self.additional_attributes);
        formatter.finish()
    }
}
