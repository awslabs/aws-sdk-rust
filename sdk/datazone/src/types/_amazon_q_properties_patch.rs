// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Q properties of the connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmazonQPropertiesPatch {
    /// <p>Specifies whether Amazon Q is enabled for the connection.</p>
    pub is_enabled: bool,
    /// <p>The profile ARN of the connection's Amazon Q properties.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The authentication mode of the connection's Amazon Q properties.</p>
    pub auth_mode: ::std::option::Option<::std::string::String>,
}
impl AmazonQPropertiesPatch {
    /// <p>Specifies whether Amazon Q is enabled for the connection.</p>
    pub fn is_enabled(&self) -> bool {
        self.is_enabled
    }
    /// <p>The profile ARN of the connection's Amazon Q properties.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The authentication mode of the connection's Amazon Q properties.</p>
    pub fn auth_mode(&self) -> ::std::option::Option<&str> {
        self.auth_mode.as_deref()
    }
}
impl AmazonQPropertiesPatch {
    /// Creates a new builder-style object to manufacture [`AmazonQPropertiesPatch`](crate::types::AmazonQPropertiesPatch).
    pub fn builder() -> crate::types::builders::AmazonQPropertiesPatchBuilder {
        crate::types::builders::AmazonQPropertiesPatchBuilder::default()
    }
}

/// A builder for [`AmazonQPropertiesPatch`](crate::types::AmazonQPropertiesPatch).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AmazonQPropertiesPatchBuilder {
    pub(crate) is_enabled: ::std::option::Option<bool>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) auth_mode: ::std::option::Option<::std::string::String>,
}
impl AmazonQPropertiesPatchBuilder {
    /// <p>Specifies whether Amazon Q is enabled for the connection.</p>
    /// This field is required.
    pub fn is_enabled(mut self, input: bool) -> Self {
        self.is_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon Q is enabled for the connection.</p>
    pub fn set_is_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_enabled = input;
        self
    }
    /// <p>Specifies whether Amazon Q is enabled for the connection.</p>
    pub fn get_is_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_enabled
    }
    /// <p>The profile ARN of the connection's Amazon Q properties.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile ARN of the connection's Amazon Q properties.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The profile ARN of the connection's Amazon Q properties.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// <p>The authentication mode of the connection's Amazon Q properties.</p>
    pub fn auth_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication mode of the connection's Amazon Q properties.</p>
    pub fn set_auth_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_mode = input;
        self
    }
    /// <p>The authentication mode of the connection's Amazon Q properties.</p>
    pub fn get_auth_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_mode
    }
    /// Consumes the builder and constructs a [`AmazonQPropertiesPatch`](crate::types::AmazonQPropertiesPatch).
    /// This method will fail if any of the following fields are not set:
    /// - [`is_enabled`](crate::types::builders::AmazonQPropertiesPatchBuilder::is_enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::AmazonQPropertiesPatch, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AmazonQPropertiesPatch {
            is_enabled: self.is_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_enabled",
                    "is_enabled was not specified but it is required when building AmazonQPropertiesPatch",
                )
            })?,
            profile_arn: self.profile_arn,
            auth_mode: self.auth_mode,
        })
    }
}
