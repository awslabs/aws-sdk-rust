// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The asset for which metadata was generated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataGenerationRunTarget {
    /// <p>The type of the asset for which metadata was generated.</p>
    pub r#type: crate::types::MetadataGenerationTargetType,
    /// <p>The ID of the metadata generation run's target.</p>
    pub identifier: ::std::string::String,
    /// <p>The revision of the asset for which metadata was generated.</p>
    pub revision: ::std::option::Option<::std::string::String>,
}
impl MetadataGenerationRunTarget {
    /// <p>The type of the asset for which metadata was generated.</p>
    pub fn r#type(&self) -> &crate::types::MetadataGenerationTargetType {
        &self.r#type
    }
    /// <p>The ID of the metadata generation run's target.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The revision of the asset for which metadata was generated.</p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
}
impl MetadataGenerationRunTarget {
    /// Creates a new builder-style object to manufacture [`MetadataGenerationRunTarget`](crate::types::MetadataGenerationRunTarget).
    pub fn builder() -> crate::types::builders::MetadataGenerationRunTargetBuilder {
        crate::types::builders::MetadataGenerationRunTargetBuilder::default()
    }
}

/// A builder for [`MetadataGenerationRunTarget`](crate::types::MetadataGenerationRunTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetadataGenerationRunTargetBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::MetadataGenerationTargetType>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
}
impl MetadataGenerationRunTargetBuilder {
    /// <p>The type of the asset for which metadata was generated.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MetadataGenerationTargetType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the asset for which metadata was generated.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MetadataGenerationTargetType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the asset for which metadata was generated.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MetadataGenerationTargetType> {
        &self.r#type
    }
    /// <p>The ID of the metadata generation run's target.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the metadata generation run's target.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the metadata generation run's target.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The revision of the asset for which metadata was generated.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the asset for which metadata was generated.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the asset for which metadata was generated.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// Consumes the builder and constructs a [`MetadataGenerationRunTarget`](crate::types::MetadataGenerationRunTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::MetadataGenerationRunTargetBuilder::type)
    /// - [`identifier`](crate::types::builders::MetadataGenerationRunTargetBuilder::identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::MetadataGenerationRunTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetadataGenerationRunTarget {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MetadataGenerationRunTarget",
                )
            })?,
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building MetadataGenerationRunTarget",
                )
            })?,
            revision: self.revision,
        })
    }
}
