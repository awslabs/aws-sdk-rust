// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Amazon DataZone inventory asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssetItem {
    /// <p>The identifier of the Amazon DataZone domain in which the inventory asset exists.</p>
    pub domain_id: ::std::string::String,
    /// <p>the identifier of the Amazon DataZone inventory asset.</p>
    pub identifier: ::std::string::String,
    /// <p>The name of the Amazon DataZone inventory asset.</p>
    pub name: ::std::string::String,
    /// <p>The identifier of the asset type of the specified Amazon DataZone inventory asset.</p>
    pub type_identifier: ::std::string::String,
    /// <p>The revision of the inventory asset type.</p>
    pub type_revision: ::std::string::String,
    /// <p>The external identifier of the Amazon DataZone inventory asset.</p>
    pub external_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description of an Amazon DataZone inventory asset.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the Amazon DataZone inventory asset was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who created the inventory asset.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the first revision of the inventory asset was created.</p>
    pub first_revision_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon DataZone user who created the first revision of the inventory asset.</p>
    pub first_revision_created_by: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms attached to the Amazon DataZone inventory asset.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier of the Amazon DataZone project that owns the inventory asset.</p>
    pub owning_project_id: ::std::string::String,
    /// <p>The additional attributes of a Amazon DataZone inventory asset. </p>
    pub additional_attributes: ::std::option::Option<crate::types::AssetItemAdditionalAttributes>,
}
impl AssetItem {
    /// <p>The identifier of the Amazon DataZone domain in which the inventory asset exists.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>the identifier of the Amazon DataZone inventory asset.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The name of the Amazon DataZone inventory asset.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The identifier of the asset type of the specified Amazon DataZone inventory asset.</p>
    pub fn type_identifier(&self) -> &str {
        use std::ops::Deref;
        self.type_identifier.deref()
    }
    /// <p>The revision of the inventory asset type.</p>
    pub fn type_revision(&self) -> &str {
        use std::ops::Deref;
        self.type_revision.deref()
    }
    /// <p>The external identifier of the Amazon DataZone inventory asset.</p>
    pub fn external_identifier(&self) -> ::std::option::Option<&str> {
        self.external_identifier.as_deref()
    }
    /// <p>The description of an Amazon DataZone inventory asset.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp of when the Amazon DataZone inventory asset was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who created the inventory asset.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp of when the first revision of the inventory asset was created.</p>
    pub fn first_revision_created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.first_revision_created_at.as_ref()
    }
    /// <p>The Amazon DataZone user who created the first revision of the inventory asset.</p>
    pub fn first_revision_created_by(&self) -> ::std::option::Option<&str> {
        self.first_revision_created_by.as_deref()
    }
    /// <p>The glossary terms attached to the Amazon DataZone inventory asset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the Amazon DataZone project that owns the inventory asset.</p>
    pub fn owning_project_id(&self) -> &str {
        use std::ops::Deref;
        self.owning_project_id.deref()
    }
    /// <p>The additional attributes of a Amazon DataZone inventory asset. </p>
    pub fn additional_attributes(&self) -> ::std::option::Option<&crate::types::AssetItemAdditionalAttributes> {
        self.additional_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for AssetItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetItem");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("identifier", &self.identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_identifier", &self.type_identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("external_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("first_revision_created_at", &self.first_revision_created_at);
        formatter.field("first_revision_created_by", &self.first_revision_created_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("additional_attributes", &self.additional_attributes);
        formatter.finish()
    }
}
impl AssetItem {
    /// Creates a new builder-style object to manufacture [`AssetItem`](crate::types::AssetItem).
    pub fn builder() -> crate::types::builders::AssetItemBuilder {
        crate::types::builders::AssetItemBuilder::default()
    }
}

/// A builder for [`AssetItem`](crate::types::AssetItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AssetItemBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) type_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) type_revision: ::std::option::Option<::std::string::String>,
    pub(crate) external_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) first_revision_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) first_revision_created_by: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) additional_attributes: ::std::option::Option<crate::types::AssetItemAdditionalAttributes>,
}
impl AssetItemBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which the inventory asset exists.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the inventory asset exists.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which the inventory asset exists.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>the identifier of the Amazon DataZone inventory asset.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>the identifier of the Amazon DataZone inventory asset.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>the identifier of the Amazon DataZone inventory asset.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The name of the Amazon DataZone inventory asset.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon DataZone inventory asset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon DataZone inventory asset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the asset type of the specified Amazon DataZone inventory asset.</p>
    /// This field is required.
    pub fn type_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the asset type of the specified Amazon DataZone inventory asset.</p>
    pub fn set_type_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_identifier = input;
        self
    }
    /// <p>The identifier of the asset type of the specified Amazon DataZone inventory asset.</p>
    pub fn get_type_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_identifier
    }
    /// <p>The revision of the inventory asset type.</p>
    /// This field is required.
    pub fn type_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the inventory asset type.</p>
    pub fn set_type_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_revision = input;
        self
    }
    /// <p>The revision of the inventory asset type.</p>
    pub fn get_type_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_revision
    }
    /// <p>The external identifier of the Amazon DataZone inventory asset.</p>
    pub fn external_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external identifier of the Amazon DataZone inventory asset.</p>
    pub fn set_external_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_identifier = input;
        self
    }
    /// <p>The external identifier of the Amazon DataZone inventory asset.</p>
    pub fn get_external_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_identifier
    }
    /// <p>The description of an Amazon DataZone inventory asset.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of an Amazon DataZone inventory asset.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of an Amazon DataZone inventory asset.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp of when the Amazon DataZone inventory asset was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the Amazon DataZone inventory asset was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the Amazon DataZone inventory asset was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Amazon DataZone user who created the inventory asset.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the inventory asset.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the inventory asset.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp of when the first revision of the inventory asset was created.</p>
    pub fn first_revision_created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.first_revision_created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the first revision of the inventory asset was created.</p>
    pub fn set_first_revision_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.first_revision_created_at = input;
        self
    }
    /// <p>The timestamp of when the first revision of the inventory asset was created.</p>
    pub fn get_first_revision_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.first_revision_created_at
    }
    /// <p>The Amazon DataZone user who created the first revision of the inventory asset.</p>
    pub fn first_revision_created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_revision_created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the first revision of the inventory asset.</p>
    pub fn set_first_revision_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_revision_created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the first revision of the inventory asset.</p>
    pub fn get_first_revision_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_revision_created_by
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms attached to the Amazon DataZone inventory asset.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms attached to the Amazon DataZone inventory asset.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms attached to the Amazon DataZone inventory asset.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// <p>The identifier of the Amazon DataZone project that owns the inventory asset.</p>
    /// This field is required.
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone project that owns the inventory asset.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone project that owns the inventory asset.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// <p>The additional attributes of a Amazon DataZone inventory asset. </p>
    pub fn additional_attributes(mut self, input: crate::types::AssetItemAdditionalAttributes) -> Self {
        self.additional_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional attributes of a Amazon DataZone inventory asset. </p>
    pub fn set_additional_attributes(mut self, input: ::std::option::Option<crate::types::AssetItemAdditionalAttributes>) -> Self {
        self.additional_attributes = input;
        self
    }
    /// <p>The additional attributes of a Amazon DataZone inventory asset. </p>
    pub fn get_additional_attributes(&self) -> &::std::option::Option<crate::types::AssetItemAdditionalAttributes> {
        &self.additional_attributes
    }
    /// Consumes the builder and constructs a [`AssetItem`](crate::types::AssetItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::types::builders::AssetItemBuilder::domain_id)
    /// - [`identifier`](crate::types::builders::AssetItemBuilder::identifier)
    /// - [`name`](crate::types::builders::AssetItemBuilder::name)
    /// - [`type_identifier`](crate::types::builders::AssetItemBuilder::type_identifier)
    /// - [`type_revision`](crate::types::builders::AssetItemBuilder::type_revision)
    /// - [`owning_project_id`](crate::types::builders::AssetItemBuilder::owning_project_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetItem {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building AssetItem",
                )
            })?,
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building AssetItem",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AssetItem",
                )
            })?,
            type_identifier: self.type_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_identifier",
                    "type_identifier was not specified but it is required when building AssetItem",
                )
            })?,
            type_revision: self.type_revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_revision",
                    "type_revision was not specified but it is required when building AssetItem",
                )
            })?,
            external_identifier: self.external_identifier,
            description: self.description,
            created_at: self.created_at,
            created_by: self.created_by,
            first_revision_created_at: self.first_revision_created_at,
            first_revision_created_by: self.first_revision_created_by,
            glossary_terms: self.glossary_terms,
            owning_project_id: self.owning_project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owning_project_id",
                    "owning_project_id was not specified but it is required when building AssetItem",
                )
            })?,
            additional_attributes: self.additional_attributes,
        })
    }
}
impl ::std::fmt::Debug for AssetItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetItemBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("identifier", &self.identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("type_identifier", &self.type_identifier);
        formatter.field("type_revision", &self.type_revision);
        formatter.field("external_identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("first_revision_created_at", &self.first_revision_created_at);
        formatter.field("first_revision_created_by", &self.first_revision_created_by);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("owning_project_id", &self.owning_project_id);
        formatter.field("additional_attributes", &self.additional_attributes);
        formatter.finish()
    }
}
