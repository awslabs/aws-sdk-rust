// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ManagedPolicyType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let managedpolicytype = unimplemented!();
/// match managedpolicytype {
///     ManagedPolicyType::AddToProjectMemberPool => { /* ... */ },
///     ManagedPolicyType::CreateAssetType => { /* ... */ },
///     ManagedPolicyType::CreateDomainUnit => { /* ... */ },
///     ManagedPolicyType::CreateEnvironment => { /* ... */ },
///     ManagedPolicyType::CreateEnvironmentFromBlueprint => { /* ... */ },
///     ManagedPolicyType::CreateEnvironmentProfile => { /* ... */ },
///     ManagedPolicyType::CreateFormType => { /* ... */ },
///     ManagedPolicyType::CreateGlossary => { /* ... */ },
///     ManagedPolicyType::CreateProject => { /* ... */ },
///     ManagedPolicyType::CreateProjectFromProjectProfile => { /* ... */ },
///     ManagedPolicyType::DelegateCreateEnvironmentProfile => { /* ... */ },
///     ManagedPolicyType::OverrideDomainUnitOwners => { /* ... */ },
///     ManagedPolicyType::OverrideProjectOwners => { /* ... */ },
///     ManagedPolicyType::UseAssetType => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `managedpolicytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ManagedPolicyType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ManagedPolicyType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ManagedPolicyType::NewFeature` is defined.
/// Specifically, when `managedpolicytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ManagedPolicyType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ManagedPolicyType {
    #[allow(missing_docs)] // documentation missing in model
    AddToProjectMemberPool,
    #[allow(missing_docs)] // documentation missing in model
    CreateAssetType,
    #[allow(missing_docs)] // documentation missing in model
    CreateDomainUnit,
    #[allow(missing_docs)] // documentation missing in model
    CreateEnvironment,
    #[allow(missing_docs)] // documentation missing in model
    CreateEnvironmentFromBlueprint,
    #[allow(missing_docs)] // documentation missing in model
    CreateEnvironmentProfile,
    #[allow(missing_docs)] // documentation missing in model
    CreateFormType,
    #[allow(missing_docs)] // documentation missing in model
    CreateGlossary,
    #[allow(missing_docs)] // documentation missing in model
    CreateProject,
    #[allow(missing_docs)] // documentation missing in model
    CreateProjectFromProjectProfile,
    #[allow(missing_docs)] // documentation missing in model
    DelegateCreateEnvironmentProfile,
    #[allow(missing_docs)] // documentation missing in model
    OverrideDomainUnitOwners,
    #[allow(missing_docs)] // documentation missing in model
    OverrideProjectOwners,
    #[allow(missing_docs)] // documentation missing in model
    UseAssetType,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ManagedPolicyType {
    fn from(s: &str) -> Self {
        match s {
            "ADD_TO_PROJECT_MEMBER_POOL" => ManagedPolicyType::AddToProjectMemberPool,
            "CREATE_ASSET_TYPE" => ManagedPolicyType::CreateAssetType,
            "CREATE_DOMAIN_UNIT" => ManagedPolicyType::CreateDomainUnit,
            "CREATE_ENVIRONMENT" => ManagedPolicyType::CreateEnvironment,
            "CREATE_ENVIRONMENT_FROM_BLUEPRINT" => ManagedPolicyType::CreateEnvironmentFromBlueprint,
            "CREATE_ENVIRONMENT_PROFILE" => ManagedPolicyType::CreateEnvironmentProfile,
            "CREATE_FORM_TYPE" => ManagedPolicyType::CreateFormType,
            "CREATE_GLOSSARY" => ManagedPolicyType::CreateGlossary,
            "CREATE_PROJECT" => ManagedPolicyType::CreateProject,
            "CREATE_PROJECT_FROM_PROJECT_PROFILE" => ManagedPolicyType::CreateProjectFromProjectProfile,
            "DELEGATE_CREATE_ENVIRONMENT_PROFILE" => ManagedPolicyType::DelegateCreateEnvironmentProfile,
            "OVERRIDE_DOMAIN_UNIT_OWNERS" => ManagedPolicyType::OverrideDomainUnitOwners,
            "OVERRIDE_PROJECT_OWNERS" => ManagedPolicyType::OverrideProjectOwners,
            "USE_ASSET_TYPE" => ManagedPolicyType::UseAssetType,
            other => ManagedPolicyType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ManagedPolicyType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ManagedPolicyType::from(s))
    }
}
impl ManagedPolicyType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ManagedPolicyType::AddToProjectMemberPool => "ADD_TO_PROJECT_MEMBER_POOL",
            ManagedPolicyType::CreateAssetType => "CREATE_ASSET_TYPE",
            ManagedPolicyType::CreateDomainUnit => "CREATE_DOMAIN_UNIT",
            ManagedPolicyType::CreateEnvironment => "CREATE_ENVIRONMENT",
            ManagedPolicyType::CreateEnvironmentFromBlueprint => "CREATE_ENVIRONMENT_FROM_BLUEPRINT",
            ManagedPolicyType::CreateEnvironmentProfile => "CREATE_ENVIRONMENT_PROFILE",
            ManagedPolicyType::CreateFormType => "CREATE_FORM_TYPE",
            ManagedPolicyType::CreateGlossary => "CREATE_GLOSSARY",
            ManagedPolicyType::CreateProject => "CREATE_PROJECT",
            ManagedPolicyType::CreateProjectFromProjectProfile => "CREATE_PROJECT_FROM_PROJECT_PROFILE",
            ManagedPolicyType::DelegateCreateEnvironmentProfile => "DELEGATE_CREATE_ENVIRONMENT_PROFILE",
            ManagedPolicyType::OverrideDomainUnitOwners => "OVERRIDE_DOMAIN_UNIT_OWNERS",
            ManagedPolicyType::OverrideProjectOwners => "OVERRIDE_PROJECT_OWNERS",
            ManagedPolicyType::UseAssetType => "USE_ASSET_TYPE",
            ManagedPolicyType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADD_TO_PROJECT_MEMBER_POOL",
            "CREATE_ASSET_TYPE",
            "CREATE_DOMAIN_UNIT",
            "CREATE_ENVIRONMENT",
            "CREATE_ENVIRONMENT_FROM_BLUEPRINT",
            "CREATE_ENVIRONMENT_PROFILE",
            "CREATE_FORM_TYPE",
            "CREATE_GLOSSARY",
            "CREATE_PROJECT",
            "CREATE_PROJECT_FROM_PROJECT_PROFILE",
            "DELEGATE_CREATE_ENVIRONMENT_PROFILE",
            "OVERRIDE_DOMAIN_UNIT_OWNERS",
            "OVERRIDE_PROJECT_OWNERS",
            "USE_ASSET_TYPE",
        ]
    }
}
impl ::std::convert::AsRef<str> for ManagedPolicyType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ManagedPolicyType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ManagedPolicyType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ManagedPolicyType::AddToProjectMemberPool => write!(f, "ADD_TO_PROJECT_MEMBER_POOL"),
            ManagedPolicyType::CreateAssetType => write!(f, "CREATE_ASSET_TYPE"),
            ManagedPolicyType::CreateDomainUnit => write!(f, "CREATE_DOMAIN_UNIT"),
            ManagedPolicyType::CreateEnvironment => write!(f, "CREATE_ENVIRONMENT"),
            ManagedPolicyType::CreateEnvironmentFromBlueprint => write!(f, "CREATE_ENVIRONMENT_FROM_BLUEPRINT"),
            ManagedPolicyType::CreateEnvironmentProfile => write!(f, "CREATE_ENVIRONMENT_PROFILE"),
            ManagedPolicyType::CreateFormType => write!(f, "CREATE_FORM_TYPE"),
            ManagedPolicyType::CreateGlossary => write!(f, "CREATE_GLOSSARY"),
            ManagedPolicyType::CreateProject => write!(f, "CREATE_PROJECT"),
            ManagedPolicyType::CreateProjectFromProjectProfile => write!(f, "CREATE_PROJECT_FROM_PROJECT_PROFILE"),
            ManagedPolicyType::DelegateCreateEnvironmentProfile => write!(f, "DELEGATE_CREATE_ENVIRONMENT_PROFILE"),
            ManagedPolicyType::OverrideDomainUnitOwners => write!(f, "OVERRIDE_DOMAIN_UNIT_OWNERS"),
            ManagedPolicyType::OverrideProjectOwners => write!(f, "OVERRIDE_PROJECT_OWNERS"),
            ManagedPolicyType::UseAssetType => write!(f, "USE_ASSET_TYPE"),
            ManagedPolicyType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
