// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the published asset for which the subscription grant is created.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SubscribedListing {
    /// <p>The identifier of the published asset for which the subscription grant is created.</p>
    pub id: ::std::string::String,
    /// <p>The revision of the published asset for which the subscription grant is created.</p>
    pub revision: ::std::option::Option<::std::string::String>,
    /// <p>The name of the published asset for which the subscription grant is created.</p>
    pub name: ::std::string::String,
    /// <p>The description of the published asset for which the subscription grant is created.</p>
    pub description: ::std::string::String,
    /// <p>The published asset for which the subscription grant is created.</p>
    pub item: ::std::option::Option<crate::types::SubscribedListingItem>,
    /// <p>The identifier of the project of the published asset for which the subscription grant is created.</p>
    pub owner_project_id: ::std::string::String,
    /// <p>The name of the project that owns the published asset for which the subscription grant is created.</p>
    pub owner_project_name: ::std::option::Option<::std::string::String>,
}
impl SubscribedListing {
    /// <p>The identifier of the published asset for which the subscription grant is created.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The revision of the published asset for which the subscription grant is created.</p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
    /// <p>The name of the published asset for which the subscription grant is created.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the published asset for which the subscription grant is created.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The published asset for which the subscription grant is created.</p>
    pub fn item(&self) -> ::std::option::Option<&crate::types::SubscribedListingItem> {
        self.item.as_ref()
    }
    /// <p>The identifier of the project of the published asset for which the subscription grant is created.</p>
    pub fn owner_project_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_project_id.deref()
    }
    /// <p>The name of the project that owns the published asset for which the subscription grant is created.</p>
    pub fn owner_project_name(&self) -> ::std::option::Option<&str> {
        self.owner_project_name.as_deref()
    }
}
impl ::std::fmt::Debug for SubscribedListing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SubscribedListing");
        formatter.field("id", &self.id);
        formatter.field("revision", &self.revision);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("item", &self.item);
        formatter.field("owner_project_id", &self.owner_project_id);
        formatter.field("owner_project_name", &self.owner_project_name);
        formatter.finish()
    }
}
impl SubscribedListing {
    /// Creates a new builder-style object to manufacture [`SubscribedListing`](crate::types::SubscribedListing).
    pub fn builder() -> crate::types::builders::SubscribedListingBuilder {
        crate::types::builders::SubscribedListingBuilder::default()
    }
}

/// A builder for [`SubscribedListing`](crate::types::SubscribedListing).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SubscribedListingBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) item: ::std::option::Option<crate::types::SubscribedListingItem>,
    pub(crate) owner_project_id: ::std::option::Option<::std::string::String>,
    pub(crate) owner_project_name: ::std::option::Option<::std::string::String>,
}
impl SubscribedListingBuilder {
    /// <p>The identifier of the published asset for which the subscription grant is created.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the published asset for which the subscription grant is created.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the published asset for which the subscription grant is created.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The revision of the published asset for which the subscription grant is created.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the published asset for which the subscription grant is created.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the published asset for which the subscription grant is created.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p>The name of the published asset for which the subscription grant is created.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the published asset for which the subscription grant is created.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the published asset for which the subscription grant is created.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the published asset for which the subscription grant is created.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the published asset for which the subscription grant is created.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the published asset for which the subscription grant is created.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The published asset for which the subscription grant is created.</p>
    /// This field is required.
    pub fn item(mut self, input: crate::types::SubscribedListingItem) -> Self {
        self.item = ::std::option::Option::Some(input);
        self
    }
    /// <p>The published asset for which the subscription grant is created.</p>
    pub fn set_item(mut self, input: ::std::option::Option<crate::types::SubscribedListingItem>) -> Self {
        self.item = input;
        self
    }
    /// <p>The published asset for which the subscription grant is created.</p>
    pub fn get_item(&self) -> &::std::option::Option<crate::types::SubscribedListingItem> {
        &self.item
    }
    /// <p>The identifier of the project of the published asset for which the subscription grant is created.</p>
    /// This field is required.
    pub fn owner_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project of the published asset for which the subscription grant is created.</p>
    pub fn set_owner_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_project_id = input;
        self
    }
    /// <p>The identifier of the project of the published asset for which the subscription grant is created.</p>
    pub fn get_owner_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_project_id
    }
    /// <p>The name of the project that owns the published asset for which the subscription grant is created.</p>
    pub fn owner_project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project that owns the published asset for which the subscription grant is created.</p>
    pub fn set_owner_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_project_name = input;
        self
    }
    /// <p>The name of the project that owns the published asset for which the subscription grant is created.</p>
    pub fn get_owner_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_project_name
    }
    /// Consumes the builder and constructs a [`SubscribedListing`](crate::types::SubscribedListing).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::SubscribedListingBuilder::id)
    /// - [`name`](crate::types::builders::SubscribedListingBuilder::name)
    /// - [`description`](crate::types::builders::SubscribedListingBuilder::description)
    /// - [`owner_project_id`](crate::types::builders::SubscribedListingBuilder::owner_project_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SubscribedListing, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SubscribedListing {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building SubscribedListing",
                )
            })?,
            revision: self.revision,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SubscribedListing",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building SubscribedListing",
                )
            })?,
            item: self.item,
            owner_project_id: self.owner_project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_project_id",
                    "owner_project_id was not specified but it is required when building SubscribedListing",
                )
            })?,
            owner_project_name: self.owner_project_name,
        })
    }
}
impl ::std::fmt::Debug for SubscribedListingBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SubscribedListingBuilder");
        formatter.field("id", &self.id);
        formatter.field("revision", &self.revision);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("item", &self.item);
        formatter.field("owner_project_id", &self.owner_project_id);
        formatter.field("owner_project_name", &self.owner_project_name);
        formatter.finish()
    }
}
