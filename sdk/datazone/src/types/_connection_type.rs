// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ConnectionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let connectiontype = unimplemented!();
/// match connectiontype {
///     ConnectionType::AmazonQ => { /* ... */ },
///     ConnectionType::Athena => { /* ... */ },
///     ConnectionType::Bigquery => { /* ... */ },
///     ConnectionType::Databricks => { /* ... */ },
///     ConnectionType::Documentdb => { /* ... */ },
///     ConnectionType::Dynamodb => { /* ... */ },
///     ConnectionType::Hyperpod => { /* ... */ },
///     ConnectionType::Iam => { /* ... */ },
///     ConnectionType::Mlflow => { /* ... */ },
///     ConnectionType::Mysql => { /* ... */ },
///     ConnectionType::Opensearch => { /* ... */ },
///     ConnectionType::Oracle => { /* ... */ },
///     ConnectionType::Postgresql => { /* ... */ },
///     ConnectionType::Redshift => { /* ... */ },
///     ConnectionType::S3 => { /* ... */ },
///     ConnectionType::Saphana => { /* ... */ },
///     ConnectionType::Snowflake => { /* ... */ },
///     ConnectionType::Spark => { /* ... */ },
///     ConnectionType::Sqlserver => { /* ... */ },
///     ConnectionType::Teradata => { /* ... */ },
///     ConnectionType::Vertica => { /* ... */ },
///     ConnectionType::WorkflowsMwaa => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `connectiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ConnectionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ConnectionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ConnectionType::NewFeature` is defined.
/// Specifically, when `connectiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ConnectionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ConnectionType {
    #[allow(missing_docs)] // documentation missing in model
    AmazonQ,
    #[allow(missing_docs)] // documentation missing in model
    Athena,
    #[allow(missing_docs)] // documentation missing in model
    Bigquery,
    #[allow(missing_docs)] // documentation missing in model
    Databricks,
    #[allow(missing_docs)] // documentation missing in model
    Documentdb,
    #[allow(missing_docs)] // documentation missing in model
    Dynamodb,
    #[allow(missing_docs)] // documentation missing in model
    Hyperpod,
    #[allow(missing_docs)] // documentation missing in model
    Iam,
    #[allow(missing_docs)] // documentation missing in model
    Mlflow,
    #[allow(missing_docs)] // documentation missing in model
    Mysql,
    #[allow(missing_docs)] // documentation missing in model
    Opensearch,
    #[allow(missing_docs)] // documentation missing in model
    Oracle,
    #[allow(missing_docs)] // documentation missing in model
    Postgresql,
    #[allow(missing_docs)] // documentation missing in model
    Redshift,
    #[allow(missing_docs)] // documentation missing in model
    S3,
    #[allow(missing_docs)] // documentation missing in model
    Saphana,
    #[allow(missing_docs)] // documentation missing in model
    Snowflake,
    #[allow(missing_docs)] // documentation missing in model
    Spark,
    #[allow(missing_docs)] // documentation missing in model
    Sqlserver,
    #[allow(missing_docs)] // documentation missing in model
    Teradata,
    #[allow(missing_docs)] // documentation missing in model
    Vertica,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowsMwaa,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ConnectionType {
    fn from(s: &str) -> Self {
        match s {
            "AMAZON_Q" => ConnectionType::AmazonQ,
            "ATHENA" => ConnectionType::Athena,
            "BIGQUERY" => ConnectionType::Bigquery,
            "DATABRICKS" => ConnectionType::Databricks,
            "DOCUMENTDB" => ConnectionType::Documentdb,
            "DYNAMODB" => ConnectionType::Dynamodb,
            "HYPERPOD" => ConnectionType::Hyperpod,
            "IAM" => ConnectionType::Iam,
            "MLFLOW" => ConnectionType::Mlflow,
            "MYSQL" => ConnectionType::Mysql,
            "OPENSEARCH" => ConnectionType::Opensearch,
            "ORACLE" => ConnectionType::Oracle,
            "POSTGRESQL" => ConnectionType::Postgresql,
            "REDSHIFT" => ConnectionType::Redshift,
            "S3" => ConnectionType::S3,
            "SAPHANA" => ConnectionType::Saphana,
            "SNOWFLAKE" => ConnectionType::Snowflake,
            "SPARK" => ConnectionType::Spark,
            "SQLSERVER" => ConnectionType::Sqlserver,
            "TERADATA" => ConnectionType::Teradata,
            "VERTICA" => ConnectionType::Vertica,
            "WORKFLOWS_MWAA" => ConnectionType::WorkflowsMwaa,
            other => ConnectionType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ConnectionType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ConnectionType::from(s))
    }
}
impl ConnectionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ConnectionType::AmazonQ => "AMAZON_Q",
            ConnectionType::Athena => "ATHENA",
            ConnectionType::Bigquery => "BIGQUERY",
            ConnectionType::Databricks => "DATABRICKS",
            ConnectionType::Documentdb => "DOCUMENTDB",
            ConnectionType::Dynamodb => "DYNAMODB",
            ConnectionType::Hyperpod => "HYPERPOD",
            ConnectionType::Iam => "IAM",
            ConnectionType::Mlflow => "MLFLOW",
            ConnectionType::Mysql => "MYSQL",
            ConnectionType::Opensearch => "OPENSEARCH",
            ConnectionType::Oracle => "ORACLE",
            ConnectionType::Postgresql => "POSTGRESQL",
            ConnectionType::Redshift => "REDSHIFT",
            ConnectionType::S3 => "S3",
            ConnectionType::Saphana => "SAPHANA",
            ConnectionType::Snowflake => "SNOWFLAKE",
            ConnectionType::Spark => "SPARK",
            ConnectionType::Sqlserver => "SQLSERVER",
            ConnectionType::Teradata => "TERADATA",
            ConnectionType::Vertica => "VERTICA",
            ConnectionType::WorkflowsMwaa => "WORKFLOWS_MWAA",
            ConnectionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AMAZON_Q",
            "ATHENA",
            "BIGQUERY",
            "DATABRICKS",
            "DOCUMENTDB",
            "DYNAMODB",
            "HYPERPOD",
            "IAM",
            "MLFLOW",
            "MYSQL",
            "OPENSEARCH",
            "ORACLE",
            "POSTGRESQL",
            "REDSHIFT",
            "S3",
            "SAPHANA",
            "SNOWFLAKE",
            "SPARK",
            "SQLSERVER",
            "TERADATA",
            "VERTICA",
            "WORKFLOWS_MWAA",
        ]
    }
}
impl ::std::convert::AsRef<str> for ConnectionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ConnectionType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ConnectionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ConnectionType::AmazonQ => write!(f, "AMAZON_Q"),
            ConnectionType::Athena => write!(f, "ATHENA"),
            ConnectionType::Bigquery => write!(f, "BIGQUERY"),
            ConnectionType::Databricks => write!(f, "DATABRICKS"),
            ConnectionType::Documentdb => write!(f, "DOCUMENTDB"),
            ConnectionType::Dynamodb => write!(f, "DYNAMODB"),
            ConnectionType::Hyperpod => write!(f, "HYPERPOD"),
            ConnectionType::Iam => write!(f, "IAM"),
            ConnectionType::Mlflow => write!(f, "MLFLOW"),
            ConnectionType::Mysql => write!(f, "MYSQL"),
            ConnectionType::Opensearch => write!(f, "OPENSEARCH"),
            ConnectionType::Oracle => write!(f, "ORACLE"),
            ConnectionType::Postgresql => write!(f, "POSTGRESQL"),
            ConnectionType::Redshift => write!(f, "REDSHIFT"),
            ConnectionType::S3 => write!(f, "S3"),
            ConnectionType::Saphana => write!(f, "SAPHANA"),
            ConnectionType::Snowflake => write!(f, "SNOWFLAKE"),
            ConnectionType::Spark => write!(f, "SPARK"),
            ConnectionType::Sqlserver => write!(f, "SQLSERVER"),
            ConnectionType::Teradata => write!(f, "TERADATA"),
            ConnectionType::Vertica => write!(f, "VERTICA"),
            ConnectionType::WorkflowsMwaa => write!(f, "WORKFLOWS_MWAA"),
            ConnectionType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
