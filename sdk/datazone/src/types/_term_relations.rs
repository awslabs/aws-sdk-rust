// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the term relations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TermRelations {
    /// <p>The <code>isA</code> property of the term relations.</p>
    pub is_a: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The classifies of the term relations.</p>
    pub classifies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TermRelations {
    /// <p>The <code>isA</code> property of the term relations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.is_a.is_none()`.
    pub fn is_a(&self) -> &[::std::string::String] {
        self.is_a.as_deref().unwrap_or_default()
    }
    /// <p>The classifies of the term relations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.classifies.is_none()`.
    pub fn classifies(&self) -> &[::std::string::String] {
        self.classifies.as_deref().unwrap_or_default()
    }
}
impl TermRelations {
    /// Creates a new builder-style object to manufacture [`TermRelations`](crate::types::TermRelations).
    pub fn builder() -> crate::types::builders::TermRelationsBuilder {
        crate::types::builders::TermRelationsBuilder::default()
    }
}

/// A builder for [`TermRelations`](crate::types::TermRelations).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TermRelationsBuilder {
    pub(crate) is_a: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) classifies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TermRelationsBuilder {
    /// Appends an item to `is_a`.
    ///
    /// To override the contents of this collection use [`set_is_a`](Self::set_is_a).
    ///
    /// <p>The <code>isA</code> property of the term relations.</p>
    pub fn is_a(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.is_a.unwrap_or_default();
        v.push(input.into());
        self.is_a = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>isA</code> property of the term relations.</p>
    pub fn set_is_a(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.is_a = input;
        self
    }
    /// <p>The <code>isA</code> property of the term relations.</p>
    pub fn get_is_a(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.is_a
    }
    /// Appends an item to `classifies`.
    ///
    /// To override the contents of this collection use [`set_classifies`](Self::set_classifies).
    ///
    /// <p>The classifies of the term relations.</p>
    pub fn classifies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.classifies.unwrap_or_default();
        v.push(input.into());
        self.classifies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The classifies of the term relations.</p>
    pub fn set_classifies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.classifies = input;
        self
    }
    /// <p>The classifies of the term relations.</p>
    pub fn get_classifies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.classifies
    }
    /// Consumes the builder and constructs a [`TermRelations`](crate::types::TermRelations).
    pub fn build(self) -> crate::types::TermRelations {
        crate::types::TermRelations {
            is_a: self.is_a,
            classifies: self.classifies,
        }
    }
}
