// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The user details of a project member.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserDetails {
    /// <p>The identifier of the Amazon DataZone user.</p>
    pub user_id: ::std::string::String,
}
impl UserDetails {
    /// <p>The identifier of the Amazon DataZone user.</p>
    pub fn user_id(&self) -> &str {
        use std::ops::Deref;
        self.user_id.deref()
    }
}
impl UserDetails {
    /// Creates a new builder-style object to manufacture [`UserDetails`](crate::types::UserDetails).
    pub fn builder() -> crate::types::builders::UserDetailsBuilder {
        crate::types::builders::UserDetailsBuilder::default()
    }
}

/// A builder for [`UserDetails`](crate::types::UserDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserDetailsBuilder {
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl UserDetailsBuilder {
    /// <p>The identifier of the Amazon DataZone user.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone user.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone user.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`UserDetails`](crate::types::UserDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_id`](crate::types::builders::UserDetailsBuilder::user_id)
    pub fn build(self) -> ::std::result::Result<crate::types::UserDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserDetails {
            user_id: self.user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id",
                    "user_id was not specified but it is required when building UserDetails",
                )
            })?,
        })
    }
}
