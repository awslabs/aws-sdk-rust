// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter expression in Amazon DataZone.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterExpression {
    /// <p>The search filter explresison type.</p>
    pub r#type: crate::types::FilterExpressionType,
    /// <p>The search filter expression.</p>
    pub expression: ::std::string::String,
}
impl FilterExpression {
    /// <p>The search filter explresison type.</p>
    pub fn r#type(&self) -> &crate::types::FilterExpressionType {
        &self.r#type
    }
    /// <p>The search filter expression.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
}
impl FilterExpression {
    /// Creates a new builder-style object to manufacture [`FilterExpression`](crate::types::FilterExpression).
    pub fn builder() -> crate::types::builders::FilterExpressionBuilder {
        crate::types::builders::FilterExpressionBuilder::default()
    }
}

/// A builder for [`FilterExpression`](crate::types::FilterExpression).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FilterExpressionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::FilterExpressionType>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl FilterExpressionBuilder {
    /// <p>The search filter explresison type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FilterExpressionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search filter explresison type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FilterExpressionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The search filter explresison type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FilterExpressionType> {
        &self.r#type
    }
    /// <p>The search filter expression.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The search filter expression.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The search filter expression.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`FilterExpression`](crate::types::FilterExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FilterExpressionBuilder::r#type)
    /// - [`expression`](crate::types::builders::FilterExpressionBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterExpression {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FilterExpression",
                )
            })?,
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building FilterExpression",
                )
            })?,
        })
    }
}
