// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of user parameters of an environment blueprint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomParameter {
    /// <p>The key name of the parameter.</p>
    pub key_name: ::std::string::String,
    /// <p>The description of the parameter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The filed type of the parameter.</p>
    pub field_type: ::std::string::String,
    /// <p>The default value of the parameter.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the parameter is editable.</p>
    pub is_editable: ::std::option::Option<bool>,
    /// <p>Specifies whether the custom parameter is optional.</p>
    pub is_optional: ::std::option::Option<bool>,
}
impl CustomParameter {
    /// <p>The key name of the parameter.</p>
    pub fn key_name(&self) -> &str {
        use std::ops::Deref;
        self.key_name.deref()
    }
    /// <p>The description of the parameter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The filed type of the parameter.</p>
    pub fn field_type(&self) -> &str {
        use std::ops::Deref;
        self.field_type.deref()
    }
    /// <p>The default value of the parameter.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>Specifies whether the parameter is editable.</p>
    pub fn is_editable(&self) -> ::std::option::Option<bool> {
        self.is_editable
    }
    /// <p>Specifies whether the custom parameter is optional.</p>
    pub fn is_optional(&self) -> ::std::option::Option<bool> {
        self.is_optional
    }
}
impl ::std::fmt::Debug for CustomParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomParameter");
        formatter.field("key_name", &self.key_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("field_type", &self.field_type);
        formatter.field("default_value", &self.default_value);
        formatter.field("is_editable", &self.is_editable);
        formatter.field("is_optional", &self.is_optional);
        formatter.finish()
    }
}
impl CustomParameter {
    /// Creates a new builder-style object to manufacture [`CustomParameter`](crate::types::CustomParameter).
    pub fn builder() -> crate::types::builders::CustomParameterBuilder {
        crate::types::builders::CustomParameterBuilder::default()
    }
}

/// A builder for [`CustomParameter`](crate::types::CustomParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CustomParameterBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) field_type: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) is_editable: ::std::option::Option<bool>,
    pub(crate) is_optional: ::std::option::Option<bool>,
}
impl CustomParameterBuilder {
    /// <p>The key name of the parameter.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key name of the parameter.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The key name of the parameter.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The description of the parameter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the parameter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the parameter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The filed type of the parameter.</p>
    /// This field is required.
    pub fn field_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filed type of the parameter.</p>
    pub fn set_field_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_type = input;
        self
    }
    /// <p>The filed type of the parameter.</p>
    pub fn get_field_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_type
    }
    /// <p>The default value of the parameter.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value of the parameter.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of the parameter.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// <p>Specifies whether the parameter is editable.</p>
    pub fn is_editable(mut self, input: bool) -> Self {
        self.is_editable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the parameter is editable.</p>
    pub fn set_is_editable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_editable = input;
        self
    }
    /// <p>Specifies whether the parameter is editable.</p>
    pub fn get_is_editable(&self) -> &::std::option::Option<bool> {
        &self.is_editable
    }
    /// <p>Specifies whether the custom parameter is optional.</p>
    pub fn is_optional(mut self, input: bool) -> Self {
        self.is_optional = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the custom parameter is optional.</p>
    pub fn set_is_optional(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_optional = input;
        self
    }
    /// <p>Specifies whether the custom parameter is optional.</p>
    pub fn get_is_optional(&self) -> &::std::option::Option<bool> {
        &self.is_optional
    }
    /// Consumes the builder and constructs a [`CustomParameter`](crate::types::CustomParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_name`](crate::types::builders::CustomParameterBuilder::key_name)
    /// - [`field_type`](crate::types::builders::CustomParameterBuilder::field_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomParameter {
            key_name: self.key_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_name",
                    "key_name was not specified but it is required when building CustomParameter",
                )
            })?,
            description: self.description,
            field_type: self.field_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_type",
                    "field_type was not specified but it is required when building CustomParameter",
                )
            })?,
            default_value: self.default_value,
            is_editable: self.is_editable,
            is_optional: self.is_optional,
        })
    }
}
impl ::std::fmt::Debug for CustomParameterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomParameterBuilder");
        formatter.field("key_name", &self.key_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("field_type", &self.field_type);
        formatter.field("default_value", &self.default_value);
        formatter.field("is_editable", &self.is_editable);
        formatter.field("is_optional", &self.is_optional);
        formatter.finish()
    }
}
