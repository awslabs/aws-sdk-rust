// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a project member.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectMember {
    /// <p>The membership details of a project member.</p>
    pub member_details: ::std::option::Option<crate::types::MemberDetails>,
    /// <p>The designated role of a project member.</p>
    pub designation: crate::types::UserDesignation,
}
impl ProjectMember {
    /// <p>The membership details of a project member.</p>
    pub fn member_details(&self) -> ::std::option::Option<&crate::types::MemberDetails> {
        self.member_details.as_ref()
    }
    /// <p>The designated role of a project member.</p>
    pub fn designation(&self) -> &crate::types::UserDesignation {
        &self.designation
    }
}
impl ProjectMember {
    /// Creates a new builder-style object to manufacture [`ProjectMember`](crate::types::ProjectMember).
    pub fn builder() -> crate::types::builders::ProjectMemberBuilder {
        crate::types::builders::ProjectMemberBuilder::default()
    }
}

/// A builder for [`ProjectMember`](crate::types::ProjectMember).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProjectMemberBuilder {
    pub(crate) member_details: ::std::option::Option<crate::types::MemberDetails>,
    pub(crate) designation: ::std::option::Option<crate::types::UserDesignation>,
}
impl ProjectMemberBuilder {
    /// <p>The membership details of a project member.</p>
    /// This field is required.
    pub fn member_details(mut self, input: crate::types::MemberDetails) -> Self {
        self.member_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The membership details of a project member.</p>
    pub fn set_member_details(mut self, input: ::std::option::Option<crate::types::MemberDetails>) -> Self {
        self.member_details = input;
        self
    }
    /// <p>The membership details of a project member.</p>
    pub fn get_member_details(&self) -> &::std::option::Option<crate::types::MemberDetails> {
        &self.member_details
    }
    /// <p>The designated role of a project member.</p>
    /// This field is required.
    pub fn designation(mut self, input: crate::types::UserDesignation) -> Self {
        self.designation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The designated role of a project member.</p>
    pub fn set_designation(mut self, input: ::std::option::Option<crate::types::UserDesignation>) -> Self {
        self.designation = input;
        self
    }
    /// <p>The designated role of a project member.</p>
    pub fn get_designation(&self) -> &::std::option::Option<crate::types::UserDesignation> {
        &self.designation
    }
    /// Consumes the builder and constructs a [`ProjectMember`](crate::types::ProjectMember).
    /// This method will fail if any of the following fields are not set:
    /// - [`designation`](crate::types::builders::ProjectMemberBuilder::designation)
    pub fn build(self) -> ::std::result::Result<crate::types::ProjectMember, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProjectMember {
            member_details: self.member_details,
            designation: self.designation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "designation",
                    "designation was not specified but it is required when building ProjectMember",
                )
            })?,
        })
    }
}
