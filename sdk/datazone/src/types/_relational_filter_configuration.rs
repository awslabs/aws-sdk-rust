// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The relational filter configuration for the data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelationalFilterConfiguration {
    /// <p>The database name specified in the relational filter configuration for the data source.</p>
    pub database_name: ::std::string::String,
    /// <p>The schema name specified in the relational filter configuration for the data source.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// <p>The filter expressions specified in the relational filter configuration for the data source.</p>
    pub filter_expressions: ::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>>,
}
impl RelationalFilterConfiguration {
    /// <p>The database name specified in the relational filter configuration for the data source.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>The schema name specified in the relational filter configuration for the data source.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The filter expressions specified in the relational filter configuration for the data source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_expressions.is_none()`.
    pub fn filter_expressions(&self) -> &[crate::types::FilterExpression] {
        self.filter_expressions.as_deref().unwrap_or_default()
    }
}
impl RelationalFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`RelationalFilterConfiguration`](crate::types::RelationalFilterConfiguration).
    pub fn builder() -> crate::types::builders::RelationalFilterConfigurationBuilder {
        crate::types::builders::RelationalFilterConfigurationBuilder::default()
    }
}

/// A builder for [`RelationalFilterConfiguration`](crate::types::RelationalFilterConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RelationalFilterConfigurationBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_expressions: ::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>>,
}
impl RelationalFilterConfigurationBuilder {
    /// <p>The database name specified in the relational filter configuration for the data source.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name specified in the relational filter configuration for the data source.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The database name specified in the relational filter configuration for the data source.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The schema name specified in the relational filter configuration for the data source.</p>
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema name specified in the relational filter configuration for the data source.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The schema name specified in the relational filter configuration for the data source.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// Appends an item to `filter_expressions`.
    ///
    /// To override the contents of this collection use [`set_filter_expressions`](Self::set_filter_expressions).
    ///
    /// <p>The filter expressions specified in the relational filter configuration for the data source.</p>
    pub fn filter_expressions(mut self, input: crate::types::FilterExpression) -> Self {
        let mut v = self.filter_expressions.unwrap_or_default();
        v.push(input);
        self.filter_expressions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter expressions specified in the relational filter configuration for the data source.</p>
    pub fn set_filter_expressions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>>) -> Self {
        self.filter_expressions = input;
        self
    }
    /// <p>The filter expressions specified in the relational filter configuration for the data source.</p>
    pub fn get_filter_expressions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>> {
        &self.filter_expressions
    }
    /// Consumes the builder and constructs a [`RelationalFilterConfiguration`](crate::types::RelationalFilterConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`database_name`](crate::types::builders::RelationalFilterConfigurationBuilder::database_name)
    pub fn build(self) -> ::std::result::Result<crate::types::RelationalFilterConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RelationalFilterConfiguration {
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building RelationalFilterConfiguration",
                )
            })?,
            schema_name: self.schema_name,
            filter_expressions: self.filter_expressions,
        })
    }
}
