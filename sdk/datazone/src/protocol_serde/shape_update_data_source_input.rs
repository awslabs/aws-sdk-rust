// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_source_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_source::UpdateDataSourceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.asset_forms_input {
        let mut array_2 = object.key("assetFormsInput").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_form_input::ser_form_input(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("configuration").start_object();
        crate::protocol_serde::shape_data_source_configuration_input::ser_data_source_configuration_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.enable_setting {
        object.key("enableSetting").string(var_8.as_str());
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.publish_on_import {
        object.key("publishOnImport").boolean(*var_10);
    }
    if let Some(var_11) = &input.recommendation {
        #[allow(unused_mut)]
        let mut object_12 = object.key("recommendation").start_object();
        crate::protocol_serde::shape_recommendation_configuration::ser_recommendation_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_14 = object.key("schedule").start_object();
        crate::protocol_serde::shape_schedule_configuration::ser_schedule_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
