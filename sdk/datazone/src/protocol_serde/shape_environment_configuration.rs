// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_environment_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EnvironmentConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.id {
        object.key("id").string(var_1.as_str());
    }
    {
        object.key("environmentBlueprintId").string(input.environment_blueprint_id.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.deployment_mode {
        object.key("deploymentMode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.configuration_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("configurationParameters").start_object();
        crate::protocol_serde::shape_environment_configuration_parameters_details::ser_environment_configuration_parameters_details(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.aws_account {
        #[allow(unused_mut)]
        let mut object_7 = object.key("awsAccount").start_object();
        crate::protocol_serde::shape_aws_account::ser_aws_account(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.account_pools {
        let mut array_9 = object.key("accountPools").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.aws_region {
        #[allow(unused_mut)]
        let mut object_12 = object.key("awsRegion").start_object();
        crate::protocol_serde::shape_region::ser_region(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.deployment_order {
        object.key("deploymentOrder").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_environment_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::EnvironmentConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EnvironmentConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "environmentBlueprintId" => {
                            builder = builder.set_environment_blueprint_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "description" => {
                            builder = builder.set_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "deploymentMode" => {
                            builder = builder.set_deployment_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DeploymentMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "configurationParameters" => {
                            builder = builder.set_configuration_parameters(
                                    crate::protocol_serde::shape_environment_configuration_parameters_details::de_environment_configuration_parameters_details(tokens)?
                                );
                        }
                        "awsAccount" => {
                            builder = builder.set_aws_account(crate::protocol_serde::shape_aws_account::de_aws_account(tokens)?);
                        }
                        "accountPools" => {
                            builder = builder.set_account_pools(crate::protocol_serde::shape_account_pool_list::de_account_pool_list(tokens)?);
                        }
                        "awsRegion" => {
                            builder = builder.set_aws_region(crate::protocol_serde::shape_region::de_region(tokens)?);
                        }
                        "deploymentOrder" => {
                            builder = builder.set_deployment_order(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::environment_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
