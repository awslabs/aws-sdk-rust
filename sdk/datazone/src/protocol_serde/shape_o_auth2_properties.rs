// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_o_auth2_properties<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::OAuth2Properties>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OAuth2PropertiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "oAuth2GrantType" => {
                            builder = builder.set_o_auth2_grant_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::OAuth2GrantType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "oAuth2ClientApplication" => {
                            builder = builder.set_o_auth2_client_application(
                                crate::protocol_serde::shape_o_auth2_client_application::de_o_auth2_client_application(tokens)?,
                            );
                        }
                        "tokenUrl" => {
                            builder = builder.set_token_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "tokenUrlParametersMap" => {
                            builder = builder.set_token_url_parameters_map(
                                crate::protocol_serde::shape_token_url_parameters_map::de_token_url_parameters_map(tokens)?,
                            );
                        }
                        "authorizationCodeProperties" => {
                            builder = builder.set_authorization_code_properties(
                                crate::protocol_serde::shape_authorization_code_properties::de_authorization_code_properties(tokens)?,
                            );
                        }
                        "oAuth2Credentials" => {
                            builder = builder.set_o_auth2_credentials(
                                crate::protocol_serde::shape_glue_o_auth2_credentials::de_glue_o_auth2_credentials(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_o_auth2_properties(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OAuth2Properties,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.o_auth2_grant_type {
        object.key("oAuth2GrantType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.o_auth2_client_application {
        #[allow(unused_mut)]
        let mut object_3 = object.key("oAuth2ClientApplication").start_object();
        crate::protocol_serde::shape_o_auth2_client_application::ser_o_auth2_client_application(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.token_url {
        object.key("tokenUrl").string(var_4.as_str());
    }
    if let Some(var_5) = &input.token_url_parameters_map {
        #[allow(unused_mut)]
        let mut object_6 = object.key("tokenUrlParametersMap").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.authorization_code_properties {
        #[allow(unused_mut)]
        let mut object_10 = object.key("authorizationCodeProperties").start_object();
        crate::protocol_serde::shape_authorization_code_properties::ser_authorization_code_properties(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.o_auth2_credentials {
        #[allow(unused_mut)]
        let mut object_12 = object.key("oAuth2Credentials").start_object();
        crate::protocol_serde::shape_glue_o_auth2_credentials::ser_glue_o_auth2_credentials(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
