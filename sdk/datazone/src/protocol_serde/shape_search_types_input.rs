// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_types_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_types::SearchTypesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filters {
        #[allow(unused_mut)]
        let mut object_2 = object.key("filters").start_object();
        crate::protocol_serde::shape_filter_clause::ser_filter_clause(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.managed {
        object.key("managed").boolean(*var_3);
    }
    if let Some(var_4) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.next_token {
        object.key("nextToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.search_in {
        let mut array_7 = object.key("searchIn").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_search_in_item::ser_search_in_item(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.search_scope {
        object.key("searchScope").string(var_10.as_str());
    }
    if let Some(var_11) = &input.search_text {
        object.key("searchText").string(var_11.as_str());
    }
    if let Some(var_12) = &input.sort {
        #[allow(unused_mut)]
        let mut object_13 = object.key("sort").start_object();
        crate::protocol_serde::shape_search_sort::ser_search_sort(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
