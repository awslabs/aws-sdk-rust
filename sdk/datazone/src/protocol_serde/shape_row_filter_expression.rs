// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_row_filter_expression<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::RowFilterExpression>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "equalTo" => Some(crate::types::RowFilterExpression::EqualTo(
                            crate::protocol_serde::shape_equal_to_expression::de_equal_to_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'equalTo' cannot be null")
                            })?,
                        )),
                        "notEqualTo" => Some(crate::types::RowFilterExpression::NotEqualTo(
                            crate::protocol_serde::shape_not_equal_to_expression::de_not_equal_to_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'notEqualTo' cannot be null")
                            })?,
                        )),
                        "greaterThan" => Some(crate::types::RowFilterExpression::GreaterThan(
                            crate::protocol_serde::shape_greater_than_expression::de_greater_than_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'greaterThan' cannot be null")
                            })?,
                        )),
                        "lessThan" => Some(crate::types::RowFilterExpression::LessThan(
                            crate::protocol_serde::shape_less_than_expression::de_less_than_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'lessThan' cannot be null")
                            })?,
                        )),
                        "greaterThanOrEqualTo" => Some(crate::types::RowFilterExpression::GreaterThanOrEqualTo(
                            crate::protocol_serde::shape_greater_than_or_equal_to_expression::de_greater_than_or_equal_to_expression(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'greaterThanOrEqualTo' cannot be null")
                                })?,
                        )),
                        "lessThanOrEqualTo" => Some(crate::types::RowFilterExpression::LessThanOrEqualTo(
                            crate::protocol_serde::shape_less_than_or_equal_to_expression::de_less_than_or_equal_to_expression(tokens)?.ok_or_else(
                                || ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'lessThanOrEqualTo' cannot be null"),
                            )?,
                        )),
                        "isNull" => Some(crate::types::RowFilterExpression::IsNull(
                            crate::protocol_serde::shape_is_null_expression::de_is_null_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'isNull' cannot be null")
                            })?,
                        )),
                        "isNotNull" => Some(crate::types::RowFilterExpression::IsNotNull(
                            crate::protocol_serde::shape_is_not_null_expression::de_is_not_null_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'isNotNull' cannot be null")
                            })?,
                        )),
                        "in" => Some(crate::types::RowFilterExpression::In(
                            crate::protocol_serde::shape_in_expression::de_in_expression(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'in' cannot be null"))?,
                        )),
                        "notIn" => Some(crate::types::RowFilterExpression::NotIn(
                            crate::protocol_serde::shape_not_in_expression::de_not_in_expression(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'notIn' cannot be null"))?,
                        )),
                        "like" => Some(crate::types::RowFilterExpression::Like(
                            crate::protocol_serde::shape_like_expression::de_like_expression(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'like' cannot be null"))?,
                        )),
                        "notLike" => Some(crate::types::RowFilterExpression::NotLike(
                            crate::protocol_serde::shape_not_like_expression::de_not_like_expression(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'notLike' cannot be null")
                            })?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::RowFilterExpression::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}

pub fn ser_row_filter_expression(
    object_1: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RowFilterExpression,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::RowFilterExpression::EqualTo(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_1.key("equalTo").start_object();
            crate::protocol_serde::shape_equal_to_expression::ser_equal_to_expression(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::RowFilterExpression::NotEqualTo(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_1.key("notEqualTo").start_object();
            crate::protocol_serde::shape_not_equal_to_expression::ser_not_equal_to_expression(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::RowFilterExpression::GreaterThan(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_1.key("greaterThan").start_object();
            crate::protocol_serde::shape_greater_than_expression::ser_greater_than_expression(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::RowFilterExpression::LessThan(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_1.key("lessThan").start_object();
            crate::protocol_serde::shape_less_than_expression::ser_less_than_expression(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::RowFilterExpression::GreaterThanOrEqualTo(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_1.key("greaterThanOrEqualTo").start_object();
            crate::protocol_serde::shape_greater_than_or_equal_to_expression::ser_greater_than_or_equal_to_expression(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::RowFilterExpression::LessThanOrEqualTo(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_1.key("lessThanOrEqualTo").start_object();
            crate::protocol_serde::shape_less_than_or_equal_to_expression::ser_less_than_or_equal_to_expression(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::RowFilterExpression::IsNull(inner) => {
            #[allow(unused_mut)]
            let mut object_7 = object_1.key("isNull").start_object();
            crate::protocol_serde::shape_is_null_expression::ser_is_null_expression(&mut object_7, inner)?;
            object_7.finish();
        }
        crate::types::RowFilterExpression::IsNotNull(inner) => {
            #[allow(unused_mut)]
            let mut object_8 = object_1.key("isNotNull").start_object();
            crate::protocol_serde::shape_is_not_null_expression::ser_is_not_null_expression(&mut object_8, inner)?;
            object_8.finish();
        }
        crate::types::RowFilterExpression::In(inner) => {
            #[allow(unused_mut)]
            let mut object_9 = object_1.key("in").start_object();
            crate::protocol_serde::shape_in_expression::ser_in_expression(&mut object_9, inner)?;
            object_9.finish();
        }
        crate::types::RowFilterExpression::NotIn(inner) => {
            #[allow(unused_mut)]
            let mut object_10 = object_1.key("notIn").start_object();
            crate::protocol_serde::shape_not_in_expression::ser_not_in_expression(&mut object_10, inner)?;
            object_10.finish();
        }
        crate::types::RowFilterExpression::Like(inner) => {
            #[allow(unused_mut)]
            let mut object_11 = object_1.key("like").start_object();
            crate::protocol_serde::shape_like_expression::ser_like_expression(&mut object_11, inner)?;
            object_11.finish();
        }
        crate::types::RowFilterExpression::NotLike(inner) => {
            #[allow(unused_mut)]
            let mut object_12 = object_1.key("notLike").start_object();
            crate::protocol_serde::shape_not_like_expression::ser_not_like_expression(&mut object_12, inner)?;
            object_12.finish();
        }
        crate::types::RowFilterExpression::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "RowFilterExpression",
            ))
        }
    }
    Ok(())
}
