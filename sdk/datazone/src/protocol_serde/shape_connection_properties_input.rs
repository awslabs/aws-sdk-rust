// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_connection_properties_input(
    object_9: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConnectionPropertiesInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::ConnectionPropertiesInput::AthenaProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_9.key("athenaProperties").start_object();
            crate::protocol_serde::shape_athena_properties_input::ser_athena_properties_input(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::ConnectionPropertiesInput::GlueProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_9.key("glueProperties").start_object();
            crate::protocol_serde::shape_glue_properties_input::ser_glue_properties_input(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::ConnectionPropertiesInput::HyperPodProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_9.key("hyperPodProperties").start_object();
            crate::protocol_serde::shape_hyper_pod_properties_input::ser_hyper_pod_properties_input(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::ConnectionPropertiesInput::IamProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_9.key("iamProperties").start_object();
            crate::protocol_serde::shape_iam_properties_input::ser_iam_properties_input(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::ConnectionPropertiesInput::RedshiftProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_9.key("redshiftProperties").start_object();
            crate::protocol_serde::shape_redshift_properties_input::ser_redshift_properties_input(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::ConnectionPropertiesInput::SparkEmrProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_9.key("sparkEmrProperties").start_object();
            crate::protocol_serde::shape_spark_emr_properties_input::ser_spark_emr_properties_input(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::ConnectionPropertiesInput::SparkGlueProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_7 = object_9.key("sparkGlueProperties").start_object();
            crate::protocol_serde::shape_spark_glue_properties_input::ser_spark_glue_properties_input(&mut object_7, inner)?;
            object_7.finish();
        }
        crate::types::ConnectionPropertiesInput::S3Properties(inner) => {
            #[allow(unused_mut)]
            let mut object_8 = object_9.key("s3Properties").start_object();
            crate::protocol_serde::shape_s3_properties_input::ser_s3_properties_input(&mut object_8, inner)?;
            object_8.finish();
        }
        crate::types::ConnectionPropertiesInput::AmazonQProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_9 = object_9.key("amazonQProperties").start_object();
            crate::protocol_serde::shape_amazon_q_properties_input::ser_amazon_q_properties_input(&mut object_9, inner)?;
            object_9.finish();
        }
        crate::types::ConnectionPropertiesInput::MlflowProperties(inner) => {
            #[allow(unused_mut)]
            let mut object_10 = object_9.key("mlflowProperties").start_object();
            crate::protocol_serde::shape_mlflow_properties_input::ser_mlflow_properties_input(&mut object_10, inner)?;
            object_10.finish();
        }
        crate::types::ConnectionPropertiesInput::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "ConnectionPropertiesInput",
            ))
        }
    }
    Ok(())
}
