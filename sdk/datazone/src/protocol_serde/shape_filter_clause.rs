// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter_clause(
    object_5: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FilterClause,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::FilterClause::Filter(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_5.key("filter").start_object();
            crate::protocol_serde::shape_filter::ser_filter(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::FilterClause::And(inner) => {
            let mut array_2 = object_5.key("and").start_array();
            for item_3 in inner {
                {
                    #[allow(unused_mut)]
                    let mut object_4 = array_2.value().start_object();
                    crate::protocol_serde::shape_filter_clause::ser_filter_clause(&mut object_4, item_3)?;
                    object_4.finish();
                }
            }
            array_2.finish();
        }
        crate::types::FilterClause::Or(inner) => {
            let mut array_5 = object_5.key("or").start_array();
            for item_6 in inner {
                {
                    #[allow(unused_mut)]
                    let mut object_7 = array_5.value().start_object();
                    crate::protocol_serde::shape_filter_clause::ser_filter_clause(&mut object_7, item_6)?;
                    object_7.finish();
                }
            }
            array_5.finish();
        }
        crate::types::FilterClause::Unknown => return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant("FilterClause")),
    }
    Ok(())
}
