// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_glue_connection<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::GlueConnection>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GlueConnectionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "description" => {
                            builder = builder.set_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "connectionType" => {
                            builder = builder.set_connection_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ConnectionType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "matchCriteria" => {
                            builder = builder.set_match_criteria(crate::protocol_serde::shape_match_criteria::de_match_criteria(tokens)?);
                        }
                        "connectionProperties" => {
                            builder = builder
                                .set_connection_properties(crate::protocol_serde::shape_connection_properties::de_connection_properties(tokens)?);
                        }
                        "sparkProperties" => {
                            builder = builder.set_spark_properties(crate::protocol_serde::shape_property_map::de_property_map(tokens)?);
                        }
                        "athenaProperties" => {
                            builder = builder.set_athena_properties(crate::protocol_serde::shape_property_map::de_property_map(tokens)?);
                        }
                        "pythonProperties" => {
                            builder = builder.set_python_properties(crate::protocol_serde::shape_property_map::de_property_map(tokens)?);
                        }
                        "physicalConnectionRequirements" => {
                            builder = builder.set_physical_connection_requirements(
                                crate::protocol_serde::shape_physical_connection_requirements::de_physical_connection_requirements(tokens)?,
                            );
                        }
                        "creationTime" => {
                            builder = builder.set_creation_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "lastUpdatedTime" => {
                            builder = builder.set_last_updated_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "lastUpdatedBy" => {
                            builder = builder.set_last_updated_by(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "status" => {
                            builder = builder.set_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ConnectionStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "statusReason" => {
                            builder = builder.set_status_reason(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "lastConnectionValidationTime" => {
                            builder = builder.set_last_connection_validation_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "authenticationConfiguration" => {
                            builder = builder.set_authentication_configuration(
                                crate::protocol_serde::shape_authentication_configuration::de_authentication_configuration(tokens)?,
                            );
                        }
                        "connectionSchemaVersion" => {
                            builder = builder.set_connection_schema_version(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "compatibleComputeEnvironments" => {
                            builder = builder.set_compatible_compute_environments(
                                crate::protocol_serde::shape_compute_environments_list::de_compute_environments_list(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
