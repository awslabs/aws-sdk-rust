// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_listings_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_listings::SearchListingsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_attributes {
        let mut array_2 = object.key("additionalAttributes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.filters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("filters").start_object();
        crate::protocol_serde::shape_filter_clause::ser_filter_clause(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.next_token {
        object.key("nextToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.search_in {
        let mut array_9 = object.key("searchIn").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_search_in_item::ser_search_in_item(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.search_text {
        object.key("searchText").string(var_12.as_str());
    }
    if let Some(var_13) = &input.sort {
        #[allow(unused_mut)]
        let mut object_14 = object.key("sort").start_object();
        crate::protocol_serde::shape_search_sort::ser_search_sort(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
