// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_effective_permissions_for_path_output_next_token(
    input: &crate::output::GetEffectivePermissionsForPathOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_table_objects_output_next_token(
    input: &crate::output::GetTableObjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_work_units_output_next_token(
    input: &crate::output::GetWorkUnitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_data_cells_filter_output_next_token(
    input: &crate::output::ListDataCellsFilterOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_lf_tags_output_next_token(
    input: &crate::output::ListLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_permissions_output_next_token(
    input: &crate::output::ListPermissionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_resources_output_next_token(
    input: &crate::output::ListResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_table_storage_optimizers_output_next_token(
    input: &crate::output::ListTableStorageOptimizersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_transactions_output_next_token(
    input: &crate::output::ListTransactionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_databases_by_lf_tags_output_next_token(
    input: &crate::output::SearchDatabasesByLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_tables_by_lf_tags_output_next_token(
    input: &crate::output::SearchTablesByLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_data_cells_filter_output_data_cells_filters(
    input: crate::output::ListDataCellsFilterOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataCellsFilter>> {
    let input = match input.data_cells_filters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_lf_tags_output_lf_tags(
    input: crate::output::ListLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LfTagPair>> {
    let input = match input.lf_tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_databases_by_lf_tags_output_database_list(
    input: crate::output::SearchDatabasesByLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TaggedDatabase>> {
    let input = match input.database_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_tables_by_lf_tags_output_table_list(
    input: crate::output::SearchTablesByLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TaggedTable>> {
    let input = match input.table_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
