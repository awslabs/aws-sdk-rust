// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_effective_permissions_for_path_output_next_token(
    input: &crate::operation::get_effective_permissions_for_path::GetEffectivePermissionsForPathOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_table_objects_output_next_token(
    input: &crate::operation::get_table_objects::GetTableObjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_work_units_output_next_token(
    input: &crate::operation::get_work_units::GetWorkUnitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_data_cells_filter_output_next_token(
    input: &crate::operation::list_data_cells_filter::ListDataCellsFilterOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_lf_tags_output_next_token(
    input: &crate::operation::list_lf_tags::ListLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_permissions_output_next_token(
    input: &crate::operation::list_permissions::ListPermissionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resources_output_next_token(
    input: &crate::operation::list_resources::ListResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_table_storage_optimizers_output_next_token(
    input: &crate::operation::list_table_storage_optimizers::ListTableStorageOptimizersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_transactions_output_next_token(
    input: &crate::operation::list_transactions::ListTransactionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_databases_by_lf_tags_output_next_token(
    input: &crate::operation::search_databases_by_lf_tags::SearchDatabasesByLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_tables_by_lf_tags_output_next_token(
    input: &crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_work_units_output_work_unit_ranges(
    input: crate::operation::get_work_units::GetWorkUnitsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WorkUnitRange>> {
    let input = match input.work_unit_ranges {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_data_cells_filter_output_data_cells_filters(
    input: crate::operation::list_data_cells_filter::ListDataCellsFilterOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataCellsFilter>> {
    let input = match input.data_cells_filters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_lf_tags_output_lf_tags(
    input: crate::operation::list_lf_tags::ListLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LfTagPair>> {
    let input = match input.lf_tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_databases_by_lf_tags_output_database_list(
    input: crate::operation::search_databases_by_lf_tags::SearchDatabasesByLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TaggedDatabase>> {
    let input = match input.database_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_tables_by_lf_tags_output_table_list(
    input: crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TaggedTable>> {
    let input = match input.table_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
