// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateResourceOutput {}
impl std::fmt::Debug for UpdateResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateResourceOutput");
        formatter.finish()
    }
}
/// See [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
pub mod update_resource_output {
    /// A builder for [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
        pub fn build(self) -> crate::output::UpdateResourceOutput {
            crate::output::UpdateResourceOutput {}
        }
    }
}
impl UpdateResourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
    pub fn builder() -> crate::output::update_resource_output::Builder {
        crate::output::update_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLfTagOutput {}
impl std::fmt::Debug for UpdateLfTagOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLfTagOutput");
        formatter.finish()
    }
}
/// See [`UpdateLfTagOutput`](crate::output::UpdateLfTagOutput)
pub mod update_lf_tag_output {
    /// A builder for [`UpdateLfTagOutput`](crate::output::UpdateLfTagOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateLfTagOutput`](crate::output::UpdateLfTagOutput)
        pub fn build(self) -> crate::output::UpdateLfTagOutput {
            crate::output::UpdateLfTagOutput {}
        }
    }
}
impl UpdateLfTagOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLfTagOutput`](crate::output::UpdateLfTagOutput)
    pub fn builder() -> crate::output::update_lf_tag_output::Builder {
        crate::output::update_lf_tag_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchTablesByLfTagsOutput {
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of tables that meet the tag conditions.</p>
    pub table_list: std::option::Option<std::vec::Vec<crate::model::TaggedTable>>,
}
impl std::fmt::Debug for SearchTablesByLfTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SearchTablesByLfTagsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("table_list", &self.table_list);
        formatter.finish()
    }
}
/// See [`SearchTablesByLfTagsOutput`](crate::output::SearchTablesByLfTagsOutput)
pub mod search_tables_by_lf_tags_output {
    /// A builder for [`SearchTablesByLfTagsOutput`](crate::output::SearchTablesByLfTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) table_list: std::option::Option<std::vec::Vec<crate::model::TaggedTable>>,
    }
    impl Builder {
        /// <p>A continuation token, present if the current list segment is not the last.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn table_list(mut self, input: impl Into<crate::model::TaggedTable>) -> Self {
            let mut v = self.table_list.unwrap_or_default();
            v.push(input.into());
            self.table_list = Some(v);
            self
        }
        pub fn set_table_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TaggedTable>>,
        ) -> Self {
            self.table_list = input;
            self
        }
        /// Consumes the builder and constructs a [`SearchTablesByLfTagsOutput`](crate::output::SearchTablesByLfTagsOutput)
        pub fn build(self) -> crate::output::SearchTablesByLfTagsOutput {
            crate::output::SearchTablesByLfTagsOutput {
                next_token: self.next_token,
                table_list: self.table_list,
            }
        }
    }
}
impl SearchTablesByLfTagsOutput {
    /// Creates a new builder-style object to manufacture [`SearchTablesByLfTagsOutput`](crate::output::SearchTablesByLfTagsOutput)
    pub fn builder() -> crate::output::search_tables_by_lf_tags_output::Builder {
        crate::output::search_tables_by_lf_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchDatabasesByLfTagsOutput {
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of databases that meet the tag conditions.</p>
    pub database_list: std::option::Option<std::vec::Vec<crate::model::TaggedDatabase>>,
}
impl std::fmt::Debug for SearchDatabasesByLfTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SearchDatabasesByLfTagsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("database_list", &self.database_list);
        formatter.finish()
    }
}
/// See [`SearchDatabasesByLfTagsOutput`](crate::output::SearchDatabasesByLfTagsOutput)
pub mod search_databases_by_lf_tags_output {
    /// A builder for [`SearchDatabasesByLfTagsOutput`](crate::output::SearchDatabasesByLfTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) database_list: std::option::Option<std::vec::Vec<crate::model::TaggedDatabase>>,
    }
    impl Builder {
        /// <p>A continuation token, present if the current list segment is not the last.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn database_list(mut self, input: impl Into<crate::model::TaggedDatabase>) -> Self {
            let mut v = self.database_list.unwrap_or_default();
            v.push(input.into());
            self.database_list = Some(v);
            self
        }
        pub fn set_database_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TaggedDatabase>>,
        ) -> Self {
            self.database_list = input;
            self
        }
        /// Consumes the builder and constructs a [`SearchDatabasesByLfTagsOutput`](crate::output::SearchDatabasesByLfTagsOutput)
        pub fn build(self) -> crate::output::SearchDatabasesByLfTagsOutput {
            crate::output::SearchDatabasesByLfTagsOutput {
                next_token: self.next_token,
                database_list: self.database_list,
            }
        }
    }
}
impl SearchDatabasesByLfTagsOutput {
    /// Creates a new builder-style object to manufacture [`SearchDatabasesByLfTagsOutput`](crate::output::SearchDatabasesByLfTagsOutput)
    pub fn builder() -> crate::output::search_databases_by_lf_tags_output::Builder {
        crate::output::search_databases_by_lf_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokePermissionsOutput {}
impl std::fmt::Debug for RevokePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokePermissionsOutput");
        formatter.finish()
    }
}
/// See [`RevokePermissionsOutput`](crate::output::RevokePermissionsOutput)
pub mod revoke_permissions_output {
    /// A builder for [`RevokePermissionsOutput`](crate::output::RevokePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RevokePermissionsOutput`](crate::output::RevokePermissionsOutput)
        pub fn build(self) -> crate::output::RevokePermissionsOutput {
            crate::output::RevokePermissionsOutput {}
        }
    }
}
impl RevokePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`RevokePermissionsOutput`](crate::output::RevokePermissionsOutput)
    pub fn builder() -> crate::output::revoke_permissions_output::Builder {
        crate::output::revoke_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveLfTagsFromResourceOutput {
    /// <p>A list of failures to untag a resource.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
}
impl std::fmt::Debug for RemoveLfTagsFromResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveLfTagsFromResourceOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`RemoveLfTagsFromResourceOutput`](crate::output::RemoveLfTagsFromResourceOutput)
pub mod remove_lf_tags_from_resource_output {
    /// A builder for [`RemoveLfTagsFromResourceOutput`](crate::output::RemoveLfTagsFromResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
    }
    impl Builder {
        pub fn failures(mut self, input: impl Into<crate::model::LfTagError>) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveLfTagsFromResourceOutput`](crate::output::RemoveLfTagsFromResourceOutput)
        pub fn build(self) -> crate::output::RemoveLfTagsFromResourceOutput {
            crate::output::RemoveLfTagsFromResourceOutput {
                failures: self.failures,
            }
        }
    }
}
impl RemoveLfTagsFromResourceOutput {
    /// Creates a new builder-style object to manufacture [`RemoveLfTagsFromResourceOutput`](crate::output::RemoveLfTagsFromResourceOutput)
    pub fn builder() -> crate::output::remove_lf_tags_from_resource_output::Builder {
        crate::output::remove_lf_tags_from_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterResourceOutput {}
impl std::fmt::Debug for RegisterResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterResourceOutput");
        formatter.finish()
    }
}
/// See [`RegisterResourceOutput`](crate::output::RegisterResourceOutput)
pub mod register_resource_output {
    /// A builder for [`RegisterResourceOutput`](crate::output::RegisterResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RegisterResourceOutput`](crate::output::RegisterResourceOutput)
        pub fn build(self) -> crate::output::RegisterResourceOutput {
            crate::output::RegisterResourceOutput {}
        }
    }
}
impl RegisterResourceOutput {
    /// Creates a new builder-style object to manufacture [`RegisterResourceOutput`](crate::output::RegisterResourceOutput)
    pub fn builder() -> crate::output::register_resource_output::Builder {
        crate::output::register_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutDataLakeSettingsOutput {}
impl std::fmt::Debug for PutDataLakeSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutDataLakeSettingsOutput");
        formatter.finish()
    }
}
/// See [`PutDataLakeSettingsOutput`](crate::output::PutDataLakeSettingsOutput)
pub mod put_data_lake_settings_output {
    /// A builder for [`PutDataLakeSettingsOutput`](crate::output::PutDataLakeSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutDataLakeSettingsOutput`](crate::output::PutDataLakeSettingsOutput)
        pub fn build(self) -> crate::output::PutDataLakeSettingsOutput {
            crate::output::PutDataLakeSettingsOutput {}
        }
    }
}
impl PutDataLakeSettingsOutput {
    /// Creates a new builder-style object to manufacture [`PutDataLakeSettingsOutput`](crate::output::PutDataLakeSettingsOutput)
    pub fn builder() -> crate::output::put_data_lake_settings_output::Builder {
        crate::output::put_data_lake_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourcesOutput {
    /// <p>A summary of the data lake resources.</p>
    pub resource_info_list: std::option::Option<std::vec::Vec<crate::model::ResourceInfo>>,
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListResourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourcesOutput");
        formatter.field("resource_info_list", &self.resource_info_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResourcesOutput`](crate::output::ListResourcesOutput)
pub mod list_resources_output {
    /// A builder for [`ListResourcesOutput`](crate::output::ListResourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_info_list:
            std::option::Option<std::vec::Vec<crate::model::ResourceInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn resource_info_list(mut self, input: impl Into<crate::model::ResourceInfo>) -> Self {
            let mut v = self.resource_info_list.unwrap_or_default();
            v.push(input.into());
            self.resource_info_list = Some(v);
            self
        }
        pub fn set_resource_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceInfo>>,
        ) -> Self {
            self.resource_info_list = input;
            self
        }
        /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourcesOutput`](crate::output::ListResourcesOutput)
        pub fn build(self) -> crate::output::ListResourcesOutput {
            crate::output::ListResourcesOutput {
                resource_info_list: self.resource_info_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListResourcesOutput`](crate::output::ListResourcesOutput)
    pub fn builder() -> crate::output::list_resources_output::Builder {
        crate::output::list_resources_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPermissionsOutput {
    /// <p>A list of principals and their permissions on the resource for the specified principal and resource types.</p>
    pub principal_resource_permissions:
        std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
    /// <p>A continuation token, if this is not the first call to retrieve this list.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPermissionsOutput");
        formatter.field(
            "principal_resource_permissions",
            &self.principal_resource_permissions,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPermissionsOutput`](crate::output::ListPermissionsOutput)
pub mod list_permissions_output {
    /// A builder for [`ListPermissionsOutput`](crate::output::ListPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) principal_resource_permissions:
            std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn principal_resource_permissions(
            mut self,
            input: impl Into<crate::model::PrincipalResourcePermissions>,
        ) -> Self {
            let mut v = self.principal_resource_permissions.unwrap_or_default();
            v.push(input.into());
            self.principal_resource_permissions = Some(v);
            self
        }
        pub fn set_principal_resource_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
        ) -> Self {
            self.principal_resource_permissions = input;
            self
        }
        /// <p>A continuation token, if this is not the first call to retrieve this list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPermissionsOutput`](crate::output::ListPermissionsOutput)
        pub fn build(self) -> crate::output::ListPermissionsOutput {
            crate::output::ListPermissionsOutput {
                principal_resource_permissions: self.principal_resource_permissions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ListPermissionsOutput`](crate::output::ListPermissionsOutput)
    pub fn builder() -> crate::output::list_permissions_output::Builder {
        crate::output::list_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLfTagsOutput {
    /// <p>A list of tags that the requested has permission to view.</p>
    pub lf_tags: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLfTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLfTagsOutput");
        formatter.field("lf_tags", &self.lf_tags);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLfTagsOutput`](crate::output::ListLfTagsOutput)
pub mod list_lf_tags_output {
    /// A builder for [`ListLfTagsOutput`](crate::output::ListLfTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lf_tags: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn lf_tags(mut self, input: impl Into<crate::model::LfTagPair>) -> Self {
            let mut v = self.lf_tags.unwrap_or_default();
            v.push(input.into());
            self.lf_tags = Some(v);
            self
        }
        pub fn set_lf_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        ) -> Self {
            self.lf_tags = input;
            self
        }
        /// <p>A continuation token, present if the current list segment is not the last.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLfTagsOutput`](crate::output::ListLfTagsOutput)
        pub fn build(self) -> crate::output::ListLfTagsOutput {
            crate::output::ListLfTagsOutput {
                lf_tags: self.lf_tags,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLfTagsOutput {
    /// Creates a new builder-style object to manufacture [`ListLfTagsOutput`](crate::output::ListLfTagsOutput)
    pub fn builder() -> crate::output::list_lf_tags_output::Builder {
        crate::output::list_lf_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GrantPermissionsOutput {}
impl std::fmt::Debug for GrantPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GrantPermissionsOutput");
        formatter.finish()
    }
}
/// See [`GrantPermissionsOutput`](crate::output::GrantPermissionsOutput)
pub mod grant_permissions_output {
    /// A builder for [`GrantPermissionsOutput`](crate::output::GrantPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`GrantPermissionsOutput`](crate::output::GrantPermissionsOutput)
        pub fn build(self) -> crate::output::GrantPermissionsOutput {
            crate::output::GrantPermissionsOutput {}
        }
    }
}
impl GrantPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`GrantPermissionsOutput`](crate::output::GrantPermissionsOutput)
    pub fn builder() -> crate::output::grant_permissions_output::Builder {
        crate::output::grant_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetResourceLfTagsOutput {
    /// <p>A list of tags applied to a database resource.</p>
    pub lf_tag_on_database: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
    /// <p>A list of tags applied to a table resource.</p>
    pub lf_tags_on_table: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
    /// <p>A list of tags applied to a column resource.</p>
    pub lf_tags_on_columns: std::option::Option<std::vec::Vec<crate::model::ColumnLfTag>>,
}
impl std::fmt::Debug for GetResourceLfTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceLfTagsOutput");
        formatter.field("lf_tag_on_database", &self.lf_tag_on_database);
        formatter.field("lf_tags_on_table", &self.lf_tags_on_table);
        formatter.field("lf_tags_on_columns", &self.lf_tags_on_columns);
        formatter.finish()
    }
}
/// See [`GetResourceLfTagsOutput`](crate::output::GetResourceLfTagsOutput)
pub mod get_resource_lf_tags_output {
    /// A builder for [`GetResourceLfTagsOutput`](crate::output::GetResourceLfTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lf_tag_on_database: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        pub(crate) lf_tags_on_table: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        pub(crate) lf_tags_on_columns:
            std::option::Option<std::vec::Vec<crate::model::ColumnLfTag>>,
    }
    impl Builder {
        pub fn lf_tag_on_database(mut self, input: impl Into<crate::model::LfTagPair>) -> Self {
            let mut v = self.lf_tag_on_database.unwrap_or_default();
            v.push(input.into());
            self.lf_tag_on_database = Some(v);
            self
        }
        pub fn set_lf_tag_on_database(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        ) -> Self {
            self.lf_tag_on_database = input;
            self
        }
        pub fn lf_tags_on_table(mut self, input: impl Into<crate::model::LfTagPair>) -> Self {
            let mut v = self.lf_tags_on_table.unwrap_or_default();
            v.push(input.into());
            self.lf_tags_on_table = Some(v);
            self
        }
        pub fn set_lf_tags_on_table(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LfTagPair>>,
        ) -> Self {
            self.lf_tags_on_table = input;
            self
        }
        pub fn lf_tags_on_columns(mut self, input: impl Into<crate::model::ColumnLfTag>) -> Self {
            let mut v = self.lf_tags_on_columns.unwrap_or_default();
            v.push(input.into());
            self.lf_tags_on_columns = Some(v);
            self
        }
        pub fn set_lf_tags_on_columns(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ColumnLfTag>>,
        ) -> Self {
            self.lf_tags_on_columns = input;
            self
        }
        /// Consumes the builder and constructs a [`GetResourceLfTagsOutput`](crate::output::GetResourceLfTagsOutput)
        pub fn build(self) -> crate::output::GetResourceLfTagsOutput {
            crate::output::GetResourceLfTagsOutput {
                lf_tag_on_database: self.lf_tag_on_database,
                lf_tags_on_table: self.lf_tags_on_table,
                lf_tags_on_columns: self.lf_tags_on_columns,
            }
        }
    }
}
impl GetResourceLfTagsOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceLfTagsOutput`](crate::output::GetResourceLfTagsOutput)
    pub fn builder() -> crate::output::get_resource_lf_tags_output::Builder {
        crate::output::get_resource_lf_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLfTagOutput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your AWS Lake Formation environment. </p>
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The key-name for the tag.</p>
    pub tag_key: std::option::Option<std::string::String>,
    /// <p>A list of possible values an attribute can take.</p>
    pub tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for GetLfTagOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLfTagOutput");
        formatter.field("catalog_id", &self.catalog_id);
        formatter.field("tag_key", &self.tag_key);
        formatter.field("tag_values", &self.tag_values);
        formatter.finish()
    }
}
/// See [`GetLfTagOutput`](crate::output::GetLfTagOutput)
pub mod get_lf_tag_output {
    /// A builder for [`GetLfTagOutput`](crate::output::GetLfTagOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) catalog_id: std::option::Option<std::string::String>,
        pub(crate) tag_key: std::option::Option<std::string::String>,
        pub(crate) tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your AWS Lake Formation environment. </p>
        pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.catalog_id = Some(input.into());
            self
        }
        pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.catalog_id = input;
            self
        }
        /// <p>The key-name for the tag.</p>
        pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.tag_key = Some(input.into());
            self
        }
        pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tag_key = input;
            self
        }
        pub fn tag_values(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.tag_values.unwrap_or_default();
            v.push(input.into());
            self.tag_values = Some(v);
            self
        }
        pub fn set_tag_values(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.tag_values = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLfTagOutput`](crate::output::GetLfTagOutput)
        pub fn build(self) -> crate::output::GetLfTagOutput {
            crate::output::GetLfTagOutput {
                catalog_id: self.catalog_id,
                tag_key: self.tag_key,
                tag_values: self.tag_values,
            }
        }
    }
}
impl GetLfTagOutput {
    /// Creates a new builder-style object to manufacture [`GetLfTagOutput`](crate::output::GetLfTagOutput)
    pub fn builder() -> crate::output::get_lf_tag_output::Builder {
        crate::output::get_lf_tag_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEffectivePermissionsForPathOutput {
    /// <p>A list of the permissions for the specified table or database resource located at the path in Amazon S3.</p>
    pub permissions: std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
    /// <p>A continuation token, if this is not the first call to retrieve this list.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetEffectivePermissionsForPathOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEffectivePermissionsForPathOutput");
        formatter.field("permissions", &self.permissions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetEffectivePermissionsForPathOutput`](crate::output::GetEffectivePermissionsForPathOutput)
pub mod get_effective_permissions_for_path_output {
    /// A builder for [`GetEffectivePermissionsForPathOutput`](crate::output::GetEffectivePermissionsForPathOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permissions:
            std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn permissions(
            mut self,
            input: impl Into<crate::model::PrincipalResourcePermissions>,
        ) -> Self {
            let mut v = self.permissions.unwrap_or_default();
            v.push(input.into());
            self.permissions = Some(v);
            self
        }
        pub fn set_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrincipalResourcePermissions>>,
        ) -> Self {
            self.permissions = input;
            self
        }
        /// <p>A continuation token, if this is not the first call to retrieve this list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEffectivePermissionsForPathOutput`](crate::output::GetEffectivePermissionsForPathOutput)
        pub fn build(self) -> crate::output::GetEffectivePermissionsForPathOutput {
            crate::output::GetEffectivePermissionsForPathOutput {
                permissions: self.permissions,
                next_token: self.next_token,
            }
        }
    }
}
impl GetEffectivePermissionsForPathOutput {
    /// Creates a new builder-style object to manufacture [`GetEffectivePermissionsForPathOutput`](crate::output::GetEffectivePermissionsForPathOutput)
    pub fn builder() -> crate::output::get_effective_permissions_for_path_output::Builder {
        crate::output::get_effective_permissions_for_path_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDataLakeSettingsOutput {
    /// <p>A structure representing a list of AWS Lake Formation principals designated as data lake administrators.</p>
    pub data_lake_settings: std::option::Option<crate::model::DataLakeSettings>,
}
impl std::fmt::Debug for GetDataLakeSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataLakeSettingsOutput");
        formatter.field("data_lake_settings", &self.data_lake_settings);
        formatter.finish()
    }
}
/// See [`GetDataLakeSettingsOutput`](crate::output::GetDataLakeSettingsOutput)
pub mod get_data_lake_settings_output {
    /// A builder for [`GetDataLakeSettingsOutput`](crate::output::GetDataLakeSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_lake_settings: std::option::Option<crate::model::DataLakeSettings>,
    }
    impl Builder {
        /// <p>A structure representing a list of AWS Lake Formation principals designated as data lake administrators.</p>
        pub fn data_lake_settings(mut self, input: crate::model::DataLakeSettings) -> Self {
            self.data_lake_settings = Some(input);
            self
        }
        pub fn set_data_lake_settings(
            mut self,
            input: std::option::Option<crate::model::DataLakeSettings>,
        ) -> Self {
            self.data_lake_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDataLakeSettingsOutput`](crate::output::GetDataLakeSettingsOutput)
        pub fn build(self) -> crate::output::GetDataLakeSettingsOutput {
            crate::output::GetDataLakeSettingsOutput {
                data_lake_settings: self.data_lake_settings,
            }
        }
    }
}
impl GetDataLakeSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetDataLakeSettingsOutput`](crate::output::GetDataLakeSettingsOutput)
    pub fn builder() -> crate::output::get_data_lake_settings_output::Builder {
        crate::output::get_data_lake_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeResourceOutput {
    /// <p>A structure containing information about an AWS Lake Formation resource.</p>
    pub resource_info: std::option::Option<crate::model::ResourceInfo>,
}
impl std::fmt::Debug for DescribeResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeResourceOutput");
        formatter.field("resource_info", &self.resource_info);
        formatter.finish()
    }
}
/// See [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
pub mod describe_resource_output {
    /// A builder for [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_info: std::option::Option<crate::model::ResourceInfo>,
    }
    impl Builder {
        /// <p>A structure containing information about an AWS Lake Formation resource.</p>
        pub fn resource_info(mut self, input: crate::model::ResourceInfo) -> Self {
            self.resource_info = Some(input);
            self
        }
        pub fn set_resource_info(
            mut self,
            input: std::option::Option<crate::model::ResourceInfo>,
        ) -> Self {
            self.resource_info = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
        pub fn build(self) -> crate::output::DescribeResourceOutput {
            crate::output::DescribeResourceOutput {
                resource_info: self.resource_info,
            }
        }
    }
}
impl DescribeResourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
    pub fn builder() -> crate::output::describe_resource_output::Builder {
        crate::output::describe_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterResourceOutput {}
impl std::fmt::Debug for DeregisterResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterResourceOutput");
        formatter.finish()
    }
}
/// See [`DeregisterResourceOutput`](crate::output::DeregisterResourceOutput)
pub mod deregister_resource_output {
    /// A builder for [`DeregisterResourceOutput`](crate::output::DeregisterResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterResourceOutput`](crate::output::DeregisterResourceOutput)
        pub fn build(self) -> crate::output::DeregisterResourceOutput {
            crate::output::DeregisterResourceOutput {}
        }
    }
}
impl DeregisterResourceOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterResourceOutput`](crate::output::DeregisterResourceOutput)
    pub fn builder() -> crate::output::deregister_resource_output::Builder {
        crate::output::deregister_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLfTagOutput {}
impl std::fmt::Debug for DeleteLfTagOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLfTagOutput");
        formatter.finish()
    }
}
/// See [`DeleteLfTagOutput`](crate::output::DeleteLfTagOutput)
pub mod delete_lf_tag_output {
    /// A builder for [`DeleteLfTagOutput`](crate::output::DeleteLfTagOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLfTagOutput`](crate::output::DeleteLfTagOutput)
        pub fn build(self) -> crate::output::DeleteLfTagOutput {
            crate::output::DeleteLfTagOutput {}
        }
    }
}
impl DeleteLfTagOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLfTagOutput`](crate::output::DeleteLfTagOutput)
    pub fn builder() -> crate::output::delete_lf_tag_output::Builder {
        crate::output::delete_lf_tag_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLfTagOutput {}
impl std::fmt::Debug for CreateLfTagOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLfTagOutput");
        formatter.finish()
    }
}
/// See [`CreateLfTagOutput`](crate::output::CreateLfTagOutput)
pub mod create_lf_tag_output {
    /// A builder for [`CreateLfTagOutput`](crate::output::CreateLfTagOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateLfTagOutput`](crate::output::CreateLfTagOutput)
        pub fn build(self) -> crate::output::CreateLfTagOutput {
            crate::output::CreateLfTagOutput {}
        }
    }
}
impl CreateLfTagOutput {
    /// Creates a new builder-style object to manufacture [`CreateLfTagOutput`](crate::output::CreateLfTagOutput)
    pub fn builder() -> crate::output::create_lf_tag_output::Builder {
        crate::output::create_lf_tag_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchRevokePermissionsOutput {
    /// <p>A list of failures to revoke permissions to the resources.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
}
impl std::fmt::Debug for BatchRevokePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchRevokePermissionsOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`BatchRevokePermissionsOutput`](crate::output::BatchRevokePermissionsOutput)
pub mod batch_revoke_permissions_output {
    /// A builder for [`BatchRevokePermissionsOutput`](crate::output::BatchRevokePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures:
            std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
    }
    impl Builder {
        pub fn failures(
            mut self,
            input: impl Into<crate::model::BatchPermissionsFailureEntry>,
        ) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchRevokePermissionsOutput`](crate::output::BatchRevokePermissionsOutput)
        pub fn build(self) -> crate::output::BatchRevokePermissionsOutput {
            crate::output::BatchRevokePermissionsOutput {
                failures: self.failures,
            }
        }
    }
}
impl BatchRevokePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`BatchRevokePermissionsOutput`](crate::output::BatchRevokePermissionsOutput)
    pub fn builder() -> crate::output::batch_revoke_permissions_output::Builder {
        crate::output::batch_revoke_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGrantPermissionsOutput {
    /// <p>A list of failures to grant permissions to the resources.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
}
impl std::fmt::Debug for BatchGrantPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGrantPermissionsOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`BatchGrantPermissionsOutput`](crate::output::BatchGrantPermissionsOutput)
pub mod batch_grant_permissions_output {
    /// A builder for [`BatchGrantPermissionsOutput`](crate::output::BatchGrantPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures:
            std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
    }
    impl Builder {
        pub fn failures(
            mut self,
            input: impl Into<crate::model::BatchPermissionsFailureEntry>,
        ) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchPermissionsFailureEntry>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGrantPermissionsOutput`](crate::output::BatchGrantPermissionsOutput)
        pub fn build(self) -> crate::output::BatchGrantPermissionsOutput {
            crate::output::BatchGrantPermissionsOutput {
                failures: self.failures,
            }
        }
    }
}
impl BatchGrantPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGrantPermissionsOutput`](crate::output::BatchGrantPermissionsOutput)
    pub fn builder() -> crate::output::batch_grant_permissions_output::Builder {
        crate::output::batch_grant_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddLfTagsToResourceOutput {
    /// <p>A list of failures to tag the resource.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
}
impl std::fmt::Debug for AddLfTagsToResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddLfTagsToResourceOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`AddLfTagsToResourceOutput`](crate::output::AddLfTagsToResourceOutput)
pub mod add_lf_tags_to_resource_output {
    /// A builder for [`AddLfTagsToResourceOutput`](crate::output::AddLfTagsToResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
    }
    impl Builder {
        pub fn failures(mut self, input: impl Into<crate::model::LfTagError>) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LfTagError>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`AddLfTagsToResourceOutput`](crate::output::AddLfTagsToResourceOutput)
        pub fn build(self) -> crate::output::AddLfTagsToResourceOutput {
            crate::output::AddLfTagsToResourceOutput {
                failures: self.failures,
            }
        }
    }
}
impl AddLfTagsToResourceOutput {
    /// Creates a new builder-style object to manufacture [`AddLfTagsToResourceOutput`](crate::output::AddLfTagsToResourceOutput)
    pub fn builder() -> crate::output::add_lf_tags_to_resource_output::Builder {
        crate::output::add_lf_tags_to_resource_output::Builder::default()
    }
}
