// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AddLFTagsToResource`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_id(impl Into<String>)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::catalog_id) / [`set_catalog_id(Option<String>)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::set_catalog_id):<br>required: **false**<br><p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p><br>
    ///   - [`resource(Resource)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::resource) / [`set_resource(Option<Resource>)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::set_resource):<br>required: **true**<br><p>The database, table, or column resource to which to attach an LF-tag.</p><br>
    ///   - [`lf_tags(LfTagPair)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::lf_tags) / [`set_lf_tags(Option<Vec::<LfTagPair>>)`](crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::set_lf_tags):<br>required: **true**<br><p>The LF-tags to attach to the resource.</p><br>
    /// - On success, responds with [`AddLfTagsToResourceOutput`](crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceOutput) with field(s):
    ///   - [`failures(Option<Vec::<LfTagError>>)`](crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceOutput::failures): <p>A list of failures to tag the resource.</p>
    /// - On failure, responds with [`SdkError<AddLFTagsToResourceError>`](crate::operation::add_lf_tags_to_resource::AddLFTagsToResourceError)
    pub fn add_lf_tags_to_resource(&self) -> crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder {
        crate::operation::add_lf_tags_to_resource::builders::AddLFTagsToResourceFluentBuilder::new(self.handle.clone())
    }
}
