// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetQueryState`](crate::operation::get_query_state::builders::GetQueryStateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_id(impl Into<String>)`](crate::operation::get_query_state::builders::GetQueryStateFluentBuilder::query_id) / [`set_query_id(Option<String>)`](crate::operation::get_query_state::builders::GetQueryStateFluentBuilder::set_query_id):<br>required: **true**<br><p>The ID of the plan query operation.</p><br>
    /// - On success, responds with [`GetQueryStateOutput`](crate::operation::get_query_state::GetQueryStateOutput) with field(s):
    ///   - [`error(Option<String>)`](crate::operation::get_query_state::GetQueryStateOutput::error): <p>An error message when the operation fails.</p>
    ///   - [`state(QueryStateString)`](crate::operation::get_query_state::GetQueryStateOutput::state): <p>The state of a query previously submitted. The possible states are:</p>  <ul>   <li> <p>PENDING: the query is pending.</p> </li>   <li> <p>WORKUNITS_AVAILABLE: some work units are ready for retrieval and execution.</p> </li>   <li> <p>FINISHED: the query planning finished successfully, and all work units are ready for retrieval and execution.</p> </li>   <li> <p>ERROR: an error occurred with the query, such as an invalid query ID or a backend error.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<GetQueryStateError>`](crate::operation::get_query_state::GetQueryStateError)
    pub fn get_query_state(&self) -> crate::operation::get_query_state::builders::GetQueryStateFluentBuilder {
        crate::operation::get_query_state::builders::GetQueryStateFluentBuilder::new(self.handle.clone())
    }
}
