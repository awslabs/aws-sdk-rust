// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for the output.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkUnitsOutput {
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the plan query operation.</p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>
    #[doc(hidden)]
    pub work_unit_ranges: std::option::Option<std::vec::Vec<crate::types::WorkUnitRange>>,
    _request_id: Option<String>,
}
impl GetWorkUnitsOutput {
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the plan query operation.</p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>
    pub fn work_unit_ranges(&self) -> std::option::Option<&[crate::types::WorkUnitRange]> {
        self.work_unit_ranges.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetWorkUnitsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkUnitsOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkUnitsOutput`](crate::operation::get_work_units::GetWorkUnitsOutput).
    pub fn builder() -> crate::operation::get_work_units::builders::GetWorkUnitsOutputBuilder {
        crate::operation::get_work_units::builders::GetWorkUnitsOutputBuilder::default()
    }
}

/// A builder for [`GetWorkUnitsOutput`](crate::operation::get_work_units::GetWorkUnitsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetWorkUnitsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) work_unit_ranges: std::option::Option<std::vec::Vec<crate::types::WorkUnitRange>>,
    _request_id: Option<String>,
}
impl GetWorkUnitsOutputBuilder {
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The ID of the plan query operation.</p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The ID of the plan query operation.</p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// Appends an item to `work_unit_ranges`.
    ///
    /// To override the contents of this collection use [`set_work_unit_ranges`](Self::set_work_unit_ranges).
    ///
    /// <p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>
    pub fn work_unit_ranges(mut self, input: crate::types::WorkUnitRange) -> Self {
        let mut v = self.work_unit_ranges.unwrap_or_default();
        v.push(input);
        self.work_unit_ranges = Some(v);
        self
    }
    /// <p>A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.</p>
    pub fn set_work_unit_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorkUnitRange>>,
    ) -> Self {
        self.work_unit_ranges = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkUnitsOutput`](crate::operation::get_work_units::GetWorkUnitsOutput).
    pub fn build(self) -> crate::operation::get_work_units::GetWorkUnitsOutput {
        crate::operation::get_work_units::GetWorkUnitsOutput {
            next_token: self.next_token,
            query_id: self.query_id,
            work_unit_ranges: self.work_unit_ranges,
            _request_id: self._request_id,
        }
    }
}
