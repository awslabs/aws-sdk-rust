// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataCellsFilterInput {
    /// <p>The ID of the catalog to which the table belongs.</p>
    pub table_catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>A database in the Glue Data Catalog.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>A table in the database.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The name given by the user to the data filter cell.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl GetDataCellsFilterInput {
    /// <p>The ID of the catalog to which the table belongs.</p>
    pub fn table_catalog_id(&self) -> ::std::option::Option<&str> {
        self.table_catalog_id.as_deref()
    }
    /// <p>A database in the Glue Data Catalog.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A table in the database.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The name given by the user to the data filter cell.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl GetDataCellsFilterInput {
    /// Creates a new builder-style object to manufacture [`GetDataCellsFilterInput`](crate::operation::get_data_cells_filter::GetDataCellsFilterInput).
    pub fn builder() -> crate::operation::get_data_cells_filter::builders::GetDataCellsFilterInputBuilder {
        crate::operation::get_data_cells_filter::builders::GetDataCellsFilterInputBuilder::default()
    }
}

/// A builder for [`GetDataCellsFilterInput`](crate::operation::get_data_cells_filter::GetDataCellsFilterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataCellsFilterInputBuilder {
    pub(crate) table_catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl GetDataCellsFilterInputBuilder {
    /// <p>The ID of the catalog to which the table belongs.</p>
    /// This field is required.
    pub fn table_catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the catalog to which the table belongs.</p>
    pub fn set_table_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_catalog_id = input;
        self
    }
    /// <p>The ID of the catalog to which the table belongs.</p>
    pub fn get_table_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_catalog_id
    }
    /// <p>A database in the Glue Data Catalog.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A database in the Glue Data Catalog.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>A database in the Glue Data Catalog.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>A table in the database.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A table in the database.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>A table in the database.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The name given by the user to the data filter cell.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name given by the user to the data filter cell.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name given by the user to the data filter cell.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`GetDataCellsFilterInput`](crate::operation::get_data_cells_filter::GetDataCellsFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_data_cells_filter::GetDataCellsFilterInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_data_cells_filter::GetDataCellsFilterInput {
            table_catalog_id: self.table_catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            name: self.name,
        })
    }
}
