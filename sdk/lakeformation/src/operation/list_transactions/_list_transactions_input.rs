// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTransactionsInput {
    /// <p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>
    #[doc(hidden)]
    pub status_filter: std::option::Option<crate::types::TransactionStatusFilter>,
    /// <p>The maximum number of transactions to return in a single call.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>A continuation token if this is not the first call to retrieve transactions.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTransactionsInput {
    /// <p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>
    pub fn status_filter(&self) -> std::option::Option<&crate::types::TransactionStatusFilter> {
        self.status_filter.as_ref()
    }
    /// <p>The maximum number of transactions to return in a single call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>A continuation token if this is not the first call to retrieve transactions.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListTransactionsInput {
    /// Creates a new builder-style object to manufacture [`ListTransactionsInput`](crate::operation::list_transactions::ListTransactionsInput).
    pub fn builder() -> crate::operation::list_transactions::builders::ListTransactionsInputBuilder
    {
        crate::operation::list_transactions::builders::ListTransactionsInputBuilder::default()
    }
}

/// A builder for [`ListTransactionsInput`](crate::operation::list_transactions::ListTransactionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTransactionsInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) status_filter: std::option::Option<crate::types::TransactionStatusFilter>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListTransactionsInputBuilder {
    /// <p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The catalog for which to list transactions. Defaults to the account ID of the caller.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>
    pub fn status_filter(mut self, input: crate::types::TransactionStatusFilter) -> Self {
        self.status_filter = Some(input);
        self
    }
    /// <p> A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.</p>
    pub fn set_status_filter(
        mut self,
        input: std::option::Option<crate::types::TransactionStatusFilter>,
    ) -> Self {
        self.status_filter = input;
        self
    }
    /// <p>The maximum number of transactions to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of transactions to return in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A continuation token if this is not the first call to retrieve transactions.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token if this is not the first call to retrieve transactions.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListTransactionsInput`](crate::operation::list_transactions::ListTransactionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_transactions::ListTransactionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_transactions::ListTransactionsInput {
            catalog_id: self.catalog_id,
            status_filter: self.status_filter,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
