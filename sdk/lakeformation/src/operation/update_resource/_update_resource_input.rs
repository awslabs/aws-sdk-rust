// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateResourceInput {
    /// <p>The new role to use for the given resource registered in Lake Formation.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The resource ARN.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether or not the resource is a federated resource.</p>
    pub with_federation: ::std::option::Option<bool>,
    /// <p> Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies. </p>
    pub hybrid_access_enabled: ::std::option::Option<bool>,
}
impl UpdateResourceInput {
    /// <p>The new role to use for the given resource registered in Lake Formation.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The resource ARN.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Whether or not the resource is a federated resource.</p>
    pub fn with_federation(&self) -> ::std::option::Option<bool> {
        self.with_federation
    }
    /// <p> Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies. </p>
    pub fn hybrid_access_enabled(&self) -> ::std::option::Option<bool> {
        self.hybrid_access_enabled
    }
}
impl UpdateResourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceInput`](crate::operation::update_resource::UpdateResourceInput).
    pub fn builder() -> crate::operation::update_resource::builders::UpdateResourceInputBuilder {
        crate::operation::update_resource::builders::UpdateResourceInputBuilder::default()
    }
}

/// A builder for [`UpdateResourceInput`](crate::operation::update_resource::UpdateResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateResourceInputBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) with_federation: ::std::option::Option<bool>,
    pub(crate) hybrid_access_enabled: ::std::option::Option<bool>,
}
impl UpdateResourceInputBuilder {
    /// <p>The new role to use for the given resource registered in Lake Formation.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new role to use for the given resource registered in Lake Formation.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The new role to use for the given resource registered in Lake Formation.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The resource ARN.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ARN.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The resource ARN.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>Whether or not the resource is a federated resource.</p>
    pub fn with_federation(mut self, input: bool) -> Self {
        self.with_federation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not the resource is a federated resource.</p>
    pub fn set_with_federation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.with_federation = input;
        self
    }
    /// <p>Whether or not the resource is a federated resource.</p>
    pub fn get_with_federation(&self) -> &::std::option::Option<bool> {
        &self.with_federation
    }
    /// <p> Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies. </p>
    pub fn hybrid_access_enabled(mut self, input: bool) -> Self {
        self.hybrid_access_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies. </p>
    pub fn set_hybrid_access_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.hybrid_access_enabled = input;
        self
    }
    /// <p> Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies. </p>
    pub fn get_hybrid_access_enabled(&self) -> &::std::option::Option<bool> {
        &self.hybrid_access_enabled
    }
    /// Consumes the builder and constructs a [`UpdateResourceInput`](crate::operation::update_resource::UpdateResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_resource::UpdateResourceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_resource::UpdateResourceInput {
            role_arn: self.role_arn,
            resource_arn: self.resource_arn,
            with_federation: self.with_federation,
            hybrid_access_enabled: self.hybrid_access_enabled,
        })
    }
}
