// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetResourceLfTagsInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The database, table, or column resource for which you want to return LF-tags.</p>
    pub resource: ::std::option::Option<crate::types::Resource>,
    /// <p>Indicates whether to show the assigned LF-tags.</p>
    pub show_assigned_lf_tags: ::std::option::Option<bool>,
}
impl GetResourceLfTagsInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The database, table, or column resource for which you want to return LF-tags.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>Indicates whether to show the assigned LF-tags.</p>
    pub fn show_assigned_lf_tags(&self) -> ::std::option::Option<bool> {
        self.show_assigned_lf_tags
    }
}
impl GetResourceLfTagsInput {
    /// Creates a new builder-style object to manufacture [`GetResourceLfTagsInput`](crate::operation::get_resource_lf_tags::GetResourceLfTagsInput).
    pub fn builder() -> crate::operation::get_resource_lf_tags::builders::GetResourceLfTagsInputBuilder {
        crate::operation::get_resource_lf_tags::builders::GetResourceLfTagsInputBuilder::default()
    }
}

/// A builder for [`GetResourceLfTagsInput`](crate::operation::get_resource_lf_tags::GetResourceLfTagsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetResourceLfTagsInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<crate::types::Resource>,
    pub(crate) show_assigned_lf_tags: ::std::option::Option<bool>,
}
impl GetResourceLfTagsInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The database, table, or column resource for which you want to return LF-tags.</p>
    /// This field is required.
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The database, table, or column resource for which you want to return LF-tags.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The database, table, or column resource for which you want to return LF-tags.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        &self.resource
    }
    /// <p>Indicates whether to show the assigned LF-tags.</p>
    pub fn show_assigned_lf_tags(mut self, input: bool) -> Self {
        self.show_assigned_lf_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to show the assigned LF-tags.</p>
    pub fn set_show_assigned_lf_tags(mut self, input: ::std::option::Option<bool>) -> Self {
        self.show_assigned_lf_tags = input;
        self
    }
    /// <p>Indicates whether to show the assigned LF-tags.</p>
    pub fn get_show_assigned_lf_tags(&self) -> &::std::option::Option<bool> {
        &self.show_assigned_lf_tags
    }
    /// Consumes the builder and constructs a [`GetResourceLfTagsInput`](crate::operation::get_resource_lf_tags::GetResourceLfTagsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_resource_lf_tags::GetResourceLfTagsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_resource_lf_tags::GetResourceLfTagsInput {
            catalog_id: self.catalog_id,
            resource: self.resource,
            show_assigned_lf_tags: self.show_assigned_lf_tags,
        })
    }
}
