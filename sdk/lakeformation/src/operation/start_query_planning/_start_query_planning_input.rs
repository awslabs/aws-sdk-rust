// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartQueryPlanningInput {
    /// <p>A structure containing information about the query plan.</p>
    #[doc(hidden)]
    pub query_planning_context: std::option::Option<crate::types::QueryPlanningContext>,
    /// <p>A PartiQL query statement used as an input to the planner service.</p>
    #[doc(hidden)]
    pub query_string: std::option::Option<std::string::String>,
}
impl StartQueryPlanningInput {
    /// <p>A structure containing information about the query plan.</p>
    pub fn query_planning_context(
        &self,
    ) -> std::option::Option<&crate::types::QueryPlanningContext> {
        self.query_planning_context.as_ref()
    }
    /// <p>A PartiQL query statement used as an input to the planner service.</p>
    pub fn query_string(&self) -> std::option::Option<&str> {
        self.query_string.as_deref()
    }
}
impl std::fmt::Debug for StartQueryPlanningInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartQueryPlanningInput");
        formatter.field("query_planning_context", &self.query_planning_context);
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StartQueryPlanningInput {
    /// Creates a new builder-style object to manufacture [`StartQueryPlanningInput`](crate::operation::start_query_planning::StartQueryPlanningInput).
    pub fn builder(
    ) -> crate::operation::start_query_planning::builders::StartQueryPlanningInputBuilder {
        crate::operation::start_query_planning::builders::StartQueryPlanningInputBuilder::default()
    }
}

/// A builder for [`StartQueryPlanningInput`](crate::operation::start_query_planning::StartQueryPlanningInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct StartQueryPlanningInputBuilder {
    pub(crate) query_planning_context: std::option::Option<crate::types::QueryPlanningContext>,
    pub(crate) query_string: std::option::Option<std::string::String>,
}
impl StartQueryPlanningInputBuilder {
    /// <p>A structure containing information about the query plan.</p>
    pub fn query_planning_context(mut self, input: crate::types::QueryPlanningContext) -> Self {
        self.query_planning_context = Some(input);
        self
    }
    /// <p>A structure containing information about the query plan.</p>
    pub fn set_query_planning_context(
        mut self,
        input: std::option::Option<crate::types::QueryPlanningContext>,
    ) -> Self {
        self.query_planning_context = input;
        self
    }
    /// <p>A PartiQL query statement used as an input to the planner service.</p>
    pub fn query_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_string = Some(input.into());
        self
    }
    /// <p>A PartiQL query statement used as an input to the planner service.</p>
    pub fn set_query_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// Consumes the builder and constructs a [`StartQueryPlanningInput`](crate::operation::start_query_planning::StartQueryPlanningInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_query_planning::StartQueryPlanningInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_query_planning::StartQueryPlanningInput {
                query_planning_context: self.query_planning_context,
                query_string: self.query_string,
            },
        )
    }
}
impl std::fmt::Debug for StartQueryPlanningInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartQueryPlanningInputBuilder");
        formatter.field("query_planning_context", &self.query_planning_context);
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
