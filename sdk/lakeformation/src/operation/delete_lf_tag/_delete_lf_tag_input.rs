// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The key-name for the LF-tag to delete.</p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
}
impl DeleteLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The key-name for the LF-tag to delete.</p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
}
impl DeleteLfTagInput {
    /// Creates a new builder-style object to manufacture [`DeleteLfTagInput`](crate::operation::delete_lf_tag::DeleteLfTagInput).
    pub fn builder() -> crate::operation::delete_lf_tag::builders::DeleteLfTagInputBuilder {
        crate::operation::delete_lf_tag::builders::DeleteLfTagInputBuilder::default()
    }
}

/// A builder for [`DeleteLfTagInput`](crate::operation::delete_lf_tag::DeleteLfTagInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteLfTagInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) tag_key: std::option::Option<std::string::String>,
}
impl DeleteLfTagInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The key-name for the LF-tag to delete.</p>
    pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag_key = Some(input.into());
        self
    }
    /// <p>The key-name for the LF-tag to delete.</p>
    pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteLfTagInput`](crate::operation::delete_lf_tag::DeleteLfTagInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_lf_tag::DeleteLfTagInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_lf_tag::DeleteLfTagInput {
            catalog_id: self.catalog_id,
            tag_key: self.tag_key,
        })
    }
}
