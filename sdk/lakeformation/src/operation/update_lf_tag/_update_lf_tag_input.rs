// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The key-name for the LF-tag for which to add or delete values.</p>
    pub tag_key: ::std::option::Option<::std::string::String>,
    /// <p>A list of LF-tag values to delete from the LF-tag.</p>
    pub tag_values_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of LF-tag values to add from the LF-tag.</p>
    pub tag_values_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The key-name for the LF-tag for which to add or delete values.</p>
    pub fn tag_key(&self) -> ::std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>A list of LF-tag values to delete from the LF-tag.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_values_to_delete.is_none()`.
    pub fn tag_values_to_delete(&self) -> &[::std::string::String] {
        self.tag_values_to_delete.as_deref().unwrap_or_default()
    }
    /// <p>A list of LF-tag values to add from the LF-tag.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_values_to_add.is_none()`.
    pub fn tag_values_to_add(&self) -> &[::std::string::String] {
        self.tag_values_to_add.as_deref().unwrap_or_default()
    }
}
impl UpdateLfTagInput {
    /// Creates a new builder-style object to manufacture [`UpdateLfTagInput`](crate::operation::update_lf_tag::UpdateLfTagInput).
    pub fn builder() -> crate::operation::update_lf_tag::builders::UpdateLfTagInputBuilder {
        crate::operation::update_lf_tag::builders::UpdateLfTagInputBuilder::default()
    }
}

/// A builder for [`UpdateLfTagInput`](crate::operation::update_lf_tag::UpdateLfTagInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLfTagInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) tag_key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_values_to_delete: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tag_values_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateLfTagInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The key-name for the LF-tag for which to add or delete values.</p>
    /// This field is required.
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key-name for the LF-tag for which to add or delete values.</p>
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// <p>The key-name for the LF-tag for which to add or delete values.</p>
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_key
    }
    /// Appends an item to `tag_values_to_delete`.
    ///
    /// To override the contents of this collection use [`set_tag_values_to_delete`](Self::set_tag_values_to_delete).
    ///
    /// <p>A list of LF-tag values to delete from the LF-tag.</p>
    pub fn tag_values_to_delete(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_values_to_delete.unwrap_or_default();
        v.push(input.into());
        self.tag_values_to_delete = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of LF-tag values to delete from the LF-tag.</p>
    pub fn set_tag_values_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tag_values_to_delete = input;
        self
    }
    /// <p>A list of LF-tag values to delete from the LF-tag.</p>
    pub fn get_tag_values_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tag_values_to_delete
    }
    /// Appends an item to `tag_values_to_add`.
    ///
    /// To override the contents of this collection use [`set_tag_values_to_add`](Self::set_tag_values_to_add).
    ///
    /// <p>A list of LF-tag values to add from the LF-tag.</p>
    pub fn tag_values_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_values_to_add.unwrap_or_default();
        v.push(input.into());
        self.tag_values_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of LF-tag values to add from the LF-tag.</p>
    pub fn set_tag_values_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tag_values_to_add = input;
        self
    }
    /// <p>A list of LF-tag values to add from the LF-tag.</p>
    pub fn get_tag_values_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tag_values_to_add
    }
    /// Consumes the builder and constructs a [`UpdateLfTagInput`](crate::operation::update_lf_tag::UpdateLfTagInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_lf_tag::UpdateLfTagInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_lf_tag::UpdateLfTagInput {
            catalog_id: self.catalog_id,
            tag_key: self.tag_key,
            tag_values_to_delete: self.tag_values_to_delete,
            tag_values_to_add: self.tag_values_to_add,
        })
    }
}
