// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetWorkUnitResultsInput {
    /// <p>The ID of the plan query operation for which to get results.</p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>
    #[doc(hidden)]
    pub work_unit_id: i64,
    /// <p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>
    #[doc(hidden)]
    pub work_unit_token: std::option::Option<std::string::String>,
}
impl GetWorkUnitResultsInput {
    /// <p>The ID of the plan query operation for which to get results.</p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>
    pub fn work_unit_id(&self) -> i64 {
        self.work_unit_id
    }
    /// <p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>
    pub fn work_unit_token(&self) -> std::option::Option<&str> {
        self.work_unit_token.as_deref()
    }
}
impl std::fmt::Debug for GetWorkUnitResultsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWorkUnitResultsInput");
        formatter.field("query_id", &self.query_id);
        formatter.field("work_unit_id", &self.work_unit_id);
        formatter.field("work_unit_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetWorkUnitResultsInput {
    /// Creates a new builder-style object to manufacture [`GetWorkUnitResultsInput`](crate::operation::get_work_unit_results::GetWorkUnitResultsInput).
    pub fn builder(
    ) -> crate::operation::get_work_unit_results::builders::GetWorkUnitResultsInputBuilder {
        crate::operation::get_work_unit_results::builders::GetWorkUnitResultsInputBuilder::default()
    }
}

/// A builder for [`GetWorkUnitResultsInput`](crate::operation::get_work_unit_results::GetWorkUnitResultsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetWorkUnitResultsInputBuilder {
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) work_unit_id: std::option::Option<i64>,
    pub(crate) work_unit_token: std::option::Option<std::string::String>,
}
impl GetWorkUnitResultsInputBuilder {
    /// <p>The ID of the plan query operation for which to get results.</p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The ID of the plan query operation for which to get results.</p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>
    pub fn work_unit_id(mut self, input: i64) -> Self {
        self.work_unit_id = Some(input);
        self
    }
    /// <p>The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.</p>
    pub fn set_work_unit_id(mut self, input: std::option::Option<i64>) -> Self {
        self.work_unit_id = input;
        self
    }
    /// <p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>
    pub fn work_unit_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_unit_token = Some(input.into());
        self
    }
    /// <p>A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.</p>
    pub fn set_work_unit_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_unit_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkUnitResultsInput`](crate::operation::get_work_unit_results::GetWorkUnitResultsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_work_unit_results::GetWorkUnitResultsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_work_unit_results::GetWorkUnitResultsInput {
                query_id: self.query_id,
                work_unit_id: self.work_unit_id.unwrap_or_default(),
                work_unit_token: self.work_unit_token,
            },
        )
    }
}
impl std::fmt::Debug for GetWorkUnitResultsInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetWorkUnitResultsInputBuilder");
        formatter.field("query_id", &self.query_id);
        formatter.field("work_unit_id", &self.work_unit_id);
        formatter.field("work_unit_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
