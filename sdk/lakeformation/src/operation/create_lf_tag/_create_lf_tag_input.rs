// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The key-name for the LF-tag.</p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
    /// <p>A list of possible values an attribute can take.</p>
    #[doc(hidden)]
    pub tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateLfTagInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The key-name for the LF-tag.</p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>A list of possible values an attribute can take.</p>
    pub fn tag_values(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_values.as_deref()
    }
}
impl CreateLfTagInput {
    /// Creates a new builder-style object to manufacture [`CreateLfTagInput`](crate::operation::create_lf_tag::CreateLfTagInput).
    pub fn builder() -> crate::operation::create_lf_tag::builders::CreateLfTagInputBuilder {
        crate::operation::create_lf_tag::builders::CreateLfTagInputBuilder::default()
    }
}

/// A builder for [`CreateLfTagInput`](crate::operation::create_lf_tag::CreateLfTagInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLfTagInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) tag_key: std::option::Option<std::string::String>,
    pub(crate) tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateLfTagInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The key-name for the LF-tag.</p>
    pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag_key = Some(input.into());
        self
    }
    /// <p>The key-name for the LF-tag.</p>
    pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>A list of possible values an attribute can take.</p>
    pub fn tag_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input.into());
        self.tag_values = Some(v);
        self
    }
    /// <p>A list of possible values an attribute can take.</p>
    pub fn set_tag_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tag_values = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLfTagInput`](crate::operation::create_lf_tag::CreateLfTagInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_lf_tag::CreateLfTagInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_lf_tag::CreateLfTagInput {
            catalog_id: self.catalog_id,
            tag_key: self.tag_key,
            tag_values: self.tag_values,
        })
    }
}
