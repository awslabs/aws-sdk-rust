// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_lake_formation_identity_center_configuration::_create_lake_formation_identity_center_configuration_output::CreateLakeFormationIdentityCenterConfigurationOutputBuilder;

pub use crate::operation::create_lake_formation_identity_center_configuration::_create_lake_formation_identity_center_configuration_input::CreateLakeFormationIdentityCenterConfigurationInputBuilder;

impl crate::operation::create_lake_formation_identity_center_configuration::builders::CreateLakeFormationIdentityCenterConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_lake_formation_identity_center_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLakeFormationIdentityCenterConfiguration`.
///
/// <p>Creates an IAM Identity Center connection with Lake Formation to allow IAM Identity Center users and groups to access Data Catalog resources.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLakeFormationIdentityCenterConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_lake_formation_identity_center_configuration::builders::CreateLakeFormationIdentityCenterConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationOutput,
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationError,
    > for CreateLakeFormationIdentityCenterConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationOutput,
            crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLakeFormationIdentityCenterConfigurationFluentBuilder {
    /// Creates a new `CreateLakeFormationIdentityCenterConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLakeFormationIdentityCenterConfiguration as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::create_lake_formation_identity_center_configuration::builders::CreateLakeFormationIdentityCenterConfigurationInputBuilder
    {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfiguration::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfiguration::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationOutput,
        crate::operation::create_lake_formation_identity_center_configuration::CreateLakeFormationIdentityCenterConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog_id(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog_id(input);
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog_id()
    }
    /// <p>The ARN of the IAM Identity Center instance for which the operation will be executed. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.</p>
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance for which the operation will be executed. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_arn(input);
        self
    }
    /// <p>The ARN of the IAM Identity Center instance for which the operation will be executed. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_arn()
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn external_filtering(mut self, input: crate::types::ExternalFilteringConfiguration) -> Self {
        self.inner = self.inner.external_filtering(input);
        self
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn set_external_filtering(mut self, input: ::std::option::Option<crate::types::ExternalFilteringConfiguration>) -> Self {
        self.inner = self.inner.set_external_filtering(input);
        self
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.</p>
    pub fn get_external_filtering(&self) -> &::std::option::Option<crate::types::ExternalFilteringConfiguration> {
        self.inner.get_external_filtering()
    }
    ///
    /// Appends an item to `ShareRecipients`.
    ///
    /// To override the contents of this collection use [`set_share_recipients`](Self::set_share_recipients).
    ///
    /// <p>A list of Amazon Web Services account IDs and/or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn share_recipients(mut self, input: crate::types::DataLakePrincipal) -> Self {
        self.inner = self.inner.share_recipients(input);
        self
    }
    /// <p>A list of Amazon Web Services account IDs and/or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn set_share_recipients(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>>) -> Self {
        self.inner = self.inner.set_share_recipients(input);
        self
    }
    /// <p>A list of Amazon Web Services account IDs and/or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn get_share_recipients(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>> {
        self.inner.get_share_recipients()
    }
}
