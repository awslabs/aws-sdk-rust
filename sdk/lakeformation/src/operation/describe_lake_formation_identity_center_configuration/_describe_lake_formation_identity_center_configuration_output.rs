// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLakeFormationIdentityCenterConfigurationOutput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the connection.</p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Lake Formation application integrated with IAM Identity Center.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if external filtering is enabled.</p>
    pub external_filtering: ::std::option::Option<crate::types::ExternalFilteringConfiguration>,
    /// <p>A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources as the <code>ShareRecipients</code>.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub share_recipients: ::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>>,
    /// <p>The Amazon Resource Name (ARN) of the RAM share.</p>
    pub resource_share: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLakeFormationIdentityCenterConfigurationOutput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connection.</p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Lake Formation application integrated with IAM Identity Center.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Indicates if external filtering is enabled.</p>
    pub fn external_filtering(&self) -> ::std::option::Option<&crate::types::ExternalFilteringConfiguration> {
        self.external_filtering.as_ref()
    }
    /// <p>A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources as the <code>ShareRecipients</code>.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.share_recipients.is_none()`.
    pub fn share_recipients(&self) -> &[crate::types::DataLakePrincipal] {
        self.share_recipients.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the RAM share.</p>
    pub fn resource_share(&self) -> ::std::option::Option<&str> {
        self.resource_share.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeLakeFormationIdentityCenterConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLakeFormationIdentityCenterConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLakeFormationIdentityCenterConfigurationOutput`](crate::operation::describe_lake_formation_identity_center_configuration::DescribeLakeFormationIdentityCenterConfigurationOutput).
    pub fn builder() -> crate::operation::describe_lake_formation_identity_center_configuration::builders::DescribeLakeFormationIdentityCenterConfigurationOutputBuilder{
        crate::operation::describe_lake_formation_identity_center_configuration::builders::DescribeLakeFormationIdentityCenterConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeLakeFormationIdentityCenterConfigurationOutput`](crate::operation::describe_lake_formation_identity_center_configuration::DescribeLakeFormationIdentityCenterConfigurationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLakeFormationIdentityCenterConfigurationOutputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) external_filtering: ::std::option::Option<crate::types::ExternalFilteringConfiguration>,
    pub(crate) share_recipients: ::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>>,
    pub(crate) resource_share: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLakeFormationIdentityCenterConfigurationOutputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The Amazon Resource Name (ARN) of the connection.</p>
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the Lake Formation application integrated with IAM Identity Center.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lake Formation application integrated with IAM Identity Center.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lake Formation application integrated with IAM Identity Center.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>Indicates if external filtering is enabled.</p>
    pub fn external_filtering(mut self, input: crate::types::ExternalFilteringConfiguration) -> Self {
        self.external_filtering = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if external filtering is enabled.</p>
    pub fn set_external_filtering(mut self, input: ::std::option::Option<crate::types::ExternalFilteringConfiguration>) -> Self {
        self.external_filtering = input;
        self
    }
    /// <p>Indicates if external filtering is enabled.</p>
    pub fn get_external_filtering(&self) -> &::std::option::Option<crate::types::ExternalFilteringConfiguration> {
        &self.external_filtering
    }
    /// Appends an item to `share_recipients`.
    ///
    /// To override the contents of this collection use [`set_share_recipients`](Self::set_share_recipients).
    ///
    /// <p>A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources as the <code>ShareRecipients</code>.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn share_recipients(mut self, input: crate::types::DataLakePrincipal) -> Self {
        let mut v = self.share_recipients.unwrap_or_default();
        v.push(input);
        self.share_recipients = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources as the <code>ShareRecipients</code>.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn set_share_recipients(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>>) -> Self {
        self.share_recipients = input;
        self
    }
    /// <p>A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.</p>
    /// <p>If the <code>ShareRecipients</code> list includes valid values, a resource share is created with the principals you want to have access to the resources as the <code>ShareRecipients</code>.</p>
    /// <p>If the <code>ShareRecipients</code> value is null or the list is empty, no resource share is created.</p>
    pub fn get_share_recipients(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataLakePrincipal>> {
        &self.share_recipients
    }
    /// <p>The Amazon Resource Name (ARN) of the RAM share.</p>
    pub fn resource_share(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_share = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the RAM share.</p>
    pub fn set_resource_share(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_share = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the RAM share.</p>
    pub fn get_resource_share(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_share
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLakeFormationIdentityCenterConfigurationOutput`](crate::operation::describe_lake_formation_identity_center_configuration::DescribeLakeFormationIdentityCenterConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_lake_formation_identity_center_configuration::DescribeLakeFormationIdentityCenterConfigurationOutput {
        crate::operation::describe_lake_formation_identity_center_configuration::DescribeLakeFormationIdentityCenterConfigurationOutput {
            catalog_id: self.catalog_id,
            instance_arn: self.instance_arn,
            application_arn: self.application_arn,
            external_filtering: self.external_filtering,
            share_recipients: self.share_recipients,
            resource_share: self.resource_share,
            _request_id: self._request_id,
        }
    }
}
