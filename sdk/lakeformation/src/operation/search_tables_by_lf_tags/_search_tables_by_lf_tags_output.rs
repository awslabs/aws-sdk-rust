// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchTablesByLfTagsOutput {
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of tables that meet the LF-tag conditions.</p>
    #[doc(hidden)]
    pub table_list: std::option::Option<std::vec::Vec<crate::types::TaggedTable>>,
    _request_id: Option<String>,
}
impl SearchTablesByLfTagsOutput {
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of tables that meet the LF-tag conditions.</p>
    pub fn table_list(&self) -> std::option::Option<&[crate::types::TaggedTable]> {
        self.table_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchTablesByLfTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchTablesByLfTagsOutput {
    /// Creates a new builder-style object to manufacture [`SearchTablesByLfTagsOutput`](crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput).
    pub fn builder(
    ) -> crate::operation::search_tables_by_lf_tags::builders::SearchTablesByLfTagsOutputBuilder
    {
        crate::operation::search_tables_by_lf_tags::builders::SearchTablesByLfTagsOutputBuilder::default()
    }
}

/// A builder for [`SearchTablesByLfTagsOutput`](crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchTablesByLfTagsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) table_list: std::option::Option<std::vec::Vec<crate::types::TaggedTable>>,
    _request_id: Option<String>,
}
impl SearchTablesByLfTagsOutputBuilder {
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token, present if the current list segment is not the last.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `table_list`.
    ///
    /// To override the contents of this collection use [`set_table_list`](Self::set_table_list).
    ///
    /// <p>A list of tables that meet the LF-tag conditions.</p>
    pub fn table_list(mut self, input: crate::types::TaggedTable) -> Self {
        let mut v = self.table_list.unwrap_or_default();
        v.push(input);
        self.table_list = Some(v);
        self
    }
    /// <p>A list of tables that meet the LF-tag conditions.</p>
    pub fn set_table_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TaggedTable>>,
    ) -> Self {
        self.table_list = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchTablesByLfTagsOutput`](crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput).
    pub fn build(self) -> crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput {
        crate::operation::search_tables_by_lf_tags::SearchTablesByLfTagsOutput {
            next_token: self.next_token,
            table_list: self.table_list,
            _request_id: self._request_id,
        }
    }
}
