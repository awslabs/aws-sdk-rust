// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourcesInput {
    /// <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
    pub filter_condition_list: ::std::option::Option<::std::vec::Vec<crate::types::FilterCondition>>,
    /// <p>The maximum number of resource results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourcesInput {
    /// <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_condition_list.is_none()`.
    pub fn filter_condition_list(&self) -> &[crate::types::FilterCondition] {
        self.filter_condition_list.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of resource results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListResourcesInput {
    /// Creates a new builder-style object to manufacture [`ListResourcesInput`](crate::operation::list_resources::ListResourcesInput).
    pub fn builder() -> crate::operation::list_resources::builders::ListResourcesInputBuilder {
        crate::operation::list_resources::builders::ListResourcesInputBuilder::default()
    }
}

/// A builder for [`ListResourcesInput`](crate::operation::list_resources::ListResourcesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListResourcesInputBuilder {
    pub(crate) filter_condition_list: ::std::option::Option<::std::vec::Vec<crate::types::FilterCondition>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourcesInputBuilder {
    /// Appends an item to `filter_condition_list`.
    ///
    /// To override the contents of this collection use [`set_filter_condition_list`](Self::set_filter_condition_list).
    ///
    /// <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
    pub fn filter_condition_list(mut self, input: crate::types::FilterCondition) -> Self {
        let mut v = self.filter_condition_list.unwrap_or_default();
        v.push(input);
        self.filter_condition_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
    pub fn set_filter_condition_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterCondition>>) -> Self {
        self.filter_condition_list = input;
        self
    }
    /// <p>Any applicable row-level and/or column-level filtering conditions for the resources.</p>
    pub fn get_filter_condition_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterCondition>> {
        &self.filter_condition_list
    }
    /// <p>The maximum number of resource results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resource results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resource results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A continuation token, if this is not the first call to retrieve these resources.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListResourcesInput`](crate::operation::list_resources::ListResourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_resources::ListResourcesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_resources::ListResourcesInput {
            filter_condition_list: self.filter_condition_list,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
