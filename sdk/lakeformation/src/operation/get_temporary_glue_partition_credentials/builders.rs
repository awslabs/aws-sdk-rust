// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_temporary_glue_partition_credentials::_get_temporary_glue_partition_credentials_output::GetTemporaryGluePartitionCredentialsOutputBuilder;

pub use crate::operation::get_temporary_glue_partition_credentials::_get_temporary_glue_partition_credentials_input::GetTemporaryGluePartitionCredentialsInputBuilder;

/// Fluent builder constructing a request to `GetTemporaryGluePartitionCredentials`.
///
/// <p>This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetTemporaryGluePartitionCredentialsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_temporary_glue_partition_credentials::builders::GetTemporaryGluePartitionCredentialsInputBuilder
            }
impl GetTemporaryGluePartitionCredentialsFluentBuilder {
    /// Creates a new `GetTemporaryGluePartitionCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::get_temporary_glue_partition_credentials::GetTemporaryGluePartitionCredentials, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::get_temporary_glue_partition_credentials::GetTemporaryGluePartitionCredentialsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::get_temporary_glue_partition_credentials::GetTemporaryGluePartitionCredentialsOutput, aws_smithy_http::result::SdkError<crate::operation::get_temporary_glue_partition_credentials::GetTemporaryGluePartitionCredentialsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the partitions' table.</p>
    pub fn table_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.table_arn(input.into());
        self
    }
    /// <p>The ARN of the partitions' table.</p>
    pub fn set_table_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_table_arn(input);
        self
    }
    /// <p>A list of partition values identifying a single partition.</p>
    pub fn partition(mut self, input: crate::types::PartitionValueList) -> Self {
        self.inner = self.inner.partition(input);
        self
    }
    /// <p>A list of partition values identifying a single partition.</p>
    pub fn set_partition(
        mut self,
        input: std::option::Option<crate::types::PartitionValueList>,
    ) -> Self {
        self.inner = self.inner.set_partition(input);
        self
    }
    /// Appends an item to `Permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>
    pub fn permissions(mut self, input: crate::types::Permission) -> Self {
        self.inner = self.inner.permissions(input);
        self
    }
    /// <p>Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    ) -> Self {
        self.inner = self.inner.set_permissions(input);
        self
    }
    /// <p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>
    pub fn duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.duration_seconds(input);
        self
    }
    /// <p>The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.</p>
    pub fn set_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_duration_seconds(input);
        self
    }
    /// <p>A structure representing context to access a resource (column names, query ID, etc).</p>
    pub fn audit_context(mut self, input: crate::types::AuditContext) -> Self {
        self.inner = self.inner.audit_context(input);
        self
    }
    /// <p>A structure representing context to access a resource (column names, query ID, etc).</p>
    pub fn set_audit_context(
        mut self,
        input: std::option::Option<crate::types::AuditContext>,
    ) -> Self {
        self.inner = self.inner.set_audit_context(input);
        self
    }
    /// Appends an item to `SupportedPermissionTypes`.
    ///
    /// To override the contents of this collection use [`set_supported_permission_types`](Self::set_supported_permission_types).
    ///
    /// <p>A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>
    pub fn supported_permission_types(mut self, input: crate::types::PermissionType) -> Self {
        self.inner = self.inner.supported_permission_types(input);
        self
    }
    /// <p>A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.</p>
    pub fn set_supported_permission_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PermissionType>>,
    ) -> Self {
        self.inner = self.inner.set_supported_permission_types(input);
        self
    }
}
