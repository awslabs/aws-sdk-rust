// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddLfTagsToResourceInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<crate::types::Resource>,
    /// <p>The LF-tags to attach to the resource.</p>
    #[doc(hidden)]
    pub lf_tags: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
}
impl AddLfTagsToResourceInput {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn resource(&self) -> std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn lf_tags(&self) -> std::option::Option<&[crate::types::LfTagPair]> {
        self.lf_tags.as_deref()
    }
}
impl AddLfTagsToResourceInput {
    /// Creates a new builder-style object to manufacture [`AddLfTagsToResourceInput`](crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceInput).
    pub fn builder(
    ) -> crate::operation::add_lf_tags_to_resource::builders::AddLfTagsToResourceInputBuilder {
        crate::operation::add_lf_tags_to_resource::builders::AddLfTagsToResourceInputBuilder::default()
    }
}

/// A builder for [`AddLfTagsToResourceInput`](crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddLfTagsToResourceInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) resource: std::option::Option<crate::types::Resource>,
    pub(crate) lf_tags: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
}
impl AddLfTagsToResourceInputBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = Some(input);
        self
    }
    /// <p>The database, table, or column resource to which to attach an LF-tag.</p>
    pub fn set_resource(mut self, input: std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// Appends an item to `lf_tags`.
    ///
    /// To override the contents of this collection use [`set_lf_tags`](Self::set_lf_tags).
    ///
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn lf_tags(mut self, input: crate::types::LfTagPair) -> Self {
        let mut v = self.lf_tags.unwrap_or_default();
        v.push(input);
        self.lf_tags = Some(v);
        self
    }
    /// <p>The LF-tags to attach to the resource.</p>
    pub fn set_lf_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
    ) -> Self {
        self.lf_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`AddLfTagsToResourceInput`](crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::add_lf_tags_to_resource::AddLfTagsToResourceInput {
                catalog_id: self.catalog_id,
                resource: self.resource,
                lf_tags: self.lf_tags,
            },
        )
    }
}
