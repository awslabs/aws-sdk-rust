// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_revoke_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::revoke_permissions::RevokePermissionsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.permissions {
        let mut array_3 = object.key("Permissions").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.permissions_with_grant_option {
        let mut array_6 = object.key("PermissionsWithGrantOption").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.principal {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Principal").start_object();
        crate::protocol_serde::shape_data_lake_principal::ser_data_lake_principal(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.resource {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Resource").start_object();
        crate::protocol_serde::shape_resource::ser_resource(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
