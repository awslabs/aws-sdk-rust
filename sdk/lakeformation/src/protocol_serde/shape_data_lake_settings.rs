// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_data_lake_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::DataLakeSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DataLakeSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "DataLakeAdmins" => {
                                builder = builder.set_data_lake_admins(
                                    crate::protocol_serde::shape_data_lake_principal_list::de_data_lake_principal_list(tokens)?
                                );
                            }
                            "CreateDatabaseDefaultPermissions" => {
                                builder = builder.set_create_database_default_permissions(
                                    crate::protocol_serde::shape_principal_permissions_list::de_principal_permissions_list(tokens)?
                                );
                            }
                            "CreateTableDefaultPermissions" => {
                                builder = builder.set_create_table_default_permissions(
                                    crate::protocol_serde::shape_principal_permissions_list::de_principal_permissions_list(tokens)?
                                );
                            }
                            "Parameters" => {
                                builder = builder.set_parameters(
                                    crate::protocol_serde::shape_parameters_map::de_parameters_map(
                                        tokens,
                                    )?,
                                );
                            }
                            "TrustedResourceOwners" => {
                                builder = builder.set_trusted_resource_owners(
                                    crate::protocol_serde::shape_trusted_resource_owners::de_trusted_resource_owners(tokens)?
                                );
                            }
                            "AllowExternalDataFiltering" => {
                                builder = builder.set_allow_external_data_filtering(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ExternalDataFilteringAllowList" => {
                                builder = builder.set_external_data_filtering_allow_list(
                                    crate::protocol_serde::shape_data_lake_principal_list::de_data_lake_principal_list(tokens)?
                                );
                            }
                            "AuthorizedSessionTagValueList" => {
                                builder = builder.set_authorized_session_tag_value_list(
                                    crate::protocol_serde::shape_authorized_session_tag_value_list::de_authorized_session_tag_value_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_data_lake_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DataLakeSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_lake_admins {
        let mut array_2 = object.key("DataLakeAdmins").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_data_lake_principal::ser_data_lake_principal(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.create_database_default_permissions {
        let mut array_6 = object.key("CreateDatabaseDefaultPermissions").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_principal_permissions::ser_principal_permissions(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.create_table_default_permissions {
        let mut array_10 = object.key("CreateTableDefaultPermissions").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_principal_permissions::ser_principal_permissions(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Parameters").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.trusted_resource_owners {
        let mut array_18 = object.key("TrustedResourceOwners").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.allow_external_data_filtering {
        object.key("AllowExternalDataFiltering").boolean(*var_20);
    }
    if let Some(var_21) = &input.external_data_filtering_allow_list {
        let mut array_22 = object.key("ExternalDataFilteringAllowList").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_data_lake_principal::ser_data_lake_principal(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.authorized_session_tag_value_list {
        let mut array_26 = object.key("AuthorizedSessionTagValueList").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    Ok(())
}
