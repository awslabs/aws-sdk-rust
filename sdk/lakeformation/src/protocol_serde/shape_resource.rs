// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Resource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.catalog {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Catalog").start_object();
        crate::protocol_serde::shape_catalog_resource::ser_catalog_resource(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.database {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Database").start_object();
        crate::protocol_serde::shape_database_resource::ser_database_resource(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.table {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Table").start_object();
        crate::protocol_serde::shape_table_resource::ser_table_resource(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.table_with_columns {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TableWithColumns").start_object();
        crate::protocol_serde::shape_table_with_columns_resource::ser_table_with_columns_resource(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.data_location {
        #[allow(unused_mut)]
        let mut object_10 = object.key("DataLocation").start_object();
        crate::protocol_serde::shape_data_location_resource::ser_data_location_resource(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.data_cells_filter {
        #[allow(unused_mut)]
        let mut object_12 = object.key("DataCellsFilter").start_object();
        crate::protocol_serde::shape_data_cells_filter_resource::ser_data_cells_filter_resource(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.lf_tag {
        #[allow(unused_mut)]
        let mut object_14 = object.key("LFTag").start_object();
        crate::protocol_serde::shape_lf_tag_key_resource::ser_lf_tag_key_resource(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.lf_tag_policy {
        #[allow(unused_mut)]
        let mut object_16 = object.key("LFTagPolicy").start_object();
        crate::protocol_serde::shape_lf_tag_policy_resource::ser_lf_tag_policy_resource(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_resource<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Resource>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ResourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Catalog" => {
                                builder = builder.set_catalog(
                                    crate::protocol_serde::shape_catalog_resource::de_catalog_resource(tokens)?
                                );
                            }
                            "Database" => {
                                builder = builder.set_database(
                                    crate::protocol_serde::shape_database_resource::de_database_resource(tokens)?
                                );
                            }
                            "Table" => {
                                builder = builder.set_table(
                                    crate::protocol_serde::shape_table_resource::de_table_resource(
                                        tokens,
                                    )?,
                                );
                            }
                            "TableWithColumns" => {
                                builder = builder.set_table_with_columns(
                                    crate::protocol_serde::shape_table_with_columns_resource::de_table_with_columns_resource(tokens)?
                                );
                            }
                            "DataLocation" => {
                                builder = builder.set_data_location(
                                    crate::protocol_serde::shape_data_location_resource::de_data_location_resource(tokens)?
                                );
                            }
                            "DataCellsFilter" => {
                                builder = builder.set_data_cells_filter(
                                    crate::protocol_serde::shape_data_cells_filter_resource::de_data_cells_filter_resource(tokens)?
                                );
                            }
                            "LFTag" => {
                                builder = builder.set_lf_tag(
                                    crate::protocol_serde::shape_lf_tag_key_resource::de_lf_tag_key_resource(tokens)?
                                );
                            }
                            "LFTagPolicy" => {
                                builder = builder.set_lf_tag_policy(
                                    crate::protocol_serde::shape_lf_tag_policy_resource::de_lf_tag_policy_resource(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
