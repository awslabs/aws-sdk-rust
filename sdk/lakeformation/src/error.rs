// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddLFTagsToResourceError {
    pub kind: AddLFTagsToResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddLFTagsToResourceErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddLFTagsToResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddLFTagsToResourceErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            AddLFTagsToResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddLFTagsToResourceError {
    fn code(&self) -> Option<&str> {
        AddLFTagsToResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddLFTagsToResourceError {
    pub fn new(kind: AddLFTagsToResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddLFTagsToResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddLFTagsToResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddLFTagsToResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for AddLFTagsToResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddLFTagsToResourceErrorKind::AccessDeniedException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            AddLFTagsToResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct BatchGrantPermissionsError {
    pub kind: BatchGrantPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum BatchGrantPermissionsErrorKind {
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for BatchGrantPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            BatchGrantPermissionsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            BatchGrantPermissionsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            BatchGrantPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for BatchGrantPermissionsError {
    fn code(&self) -> Option<&str> {
        BatchGrantPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl BatchGrantPermissionsError {
    pub fn new(kind: BatchGrantPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: BatchGrantPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: BatchGrantPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            BatchGrantPermissionsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            BatchGrantPermissionsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for BatchGrantPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            BatchGrantPermissionsErrorKind::InvalidInputException(_inner) => Some(_inner),
            BatchGrantPermissionsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            BatchGrantPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct BatchRevokePermissionsError {
    pub kind: BatchRevokePermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum BatchRevokePermissionsErrorKind {
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for BatchRevokePermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            BatchRevokePermissionsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            BatchRevokePermissionsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            BatchRevokePermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for BatchRevokePermissionsError {
    fn code(&self) -> Option<&str> {
        BatchRevokePermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl BatchRevokePermissionsError {
    pub fn new(kind: BatchRevokePermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: BatchRevokePermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: BatchRevokePermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            BatchRevokePermissionsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            BatchRevokePermissionsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for BatchRevokePermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            BatchRevokePermissionsErrorKind::InvalidInputException(_inner) => Some(_inner),
            BatchRevokePermissionsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            BatchRevokePermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateLFTagError {
    pub kind: CreateLFTagErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateLFTagErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    ResourceNumberLimitExceededException(crate::error::ResourceNumberLimitExceededException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateLFTagError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateLFTagErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::ResourceNumberLimitExceededException(_inner) => _inner.fmt(f),
            CreateLFTagErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateLFTagError {
    fn code(&self) -> Option<&str> {
        CreateLFTagError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateLFTagError {
    pub fn new(kind: CreateLFTagErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateLFTagErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateLFTagErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, CreateLFTagErrorKind::AccessDeniedException(_))
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, CreateLFTagErrorKind::EntityNotFoundException(_))
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLFTagErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, CreateLFTagErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLFTagErrorKind::OperationTimeoutException(_)
        )
    }
    pub fn is_resource_number_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLFTagErrorKind::ResourceNumberLimitExceededException(_)
        )
    }
}
impl std::error::Error for CreateLFTagError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateLFTagErrorKind::AccessDeniedException(_inner) => Some(_inner),
            CreateLFTagErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            CreateLFTagErrorKind::InternalServiceException(_inner) => Some(_inner),
            CreateLFTagErrorKind::InvalidInputException(_inner) => Some(_inner),
            CreateLFTagErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            CreateLFTagErrorKind::ResourceNumberLimitExceededException(_inner) => Some(_inner),
            CreateLFTagErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteLFTagError {
    pub kind: DeleteLFTagErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteLFTagErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteLFTagError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteLFTagErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            DeleteLFTagErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DeleteLFTagErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            DeleteLFTagErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            DeleteLFTagErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            DeleteLFTagErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteLFTagError {
    fn code(&self) -> Option<&str> {
        DeleteLFTagError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteLFTagError {
    pub fn new(kind: DeleteLFTagErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteLFTagErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteLFTagErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, DeleteLFTagErrorKind::AccessDeniedException(_))
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, DeleteLFTagErrorKind::EntityNotFoundException(_))
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLFTagErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, DeleteLFTagErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLFTagErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for DeleteLFTagError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteLFTagErrorKind::AccessDeniedException(_inner) => Some(_inner),
            DeleteLFTagErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DeleteLFTagErrorKind::InternalServiceException(_inner) => Some(_inner),
            DeleteLFTagErrorKind::InvalidInputException(_inner) => Some(_inner),
            DeleteLFTagErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            DeleteLFTagErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterResourceError {
    pub kind: DeregisterResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DeregisterResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            DeregisterResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            DeregisterResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            DeregisterResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterResourceError {
    fn code(&self) -> Option<&str> {
        DeregisterResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterResourceError {
    pub fn new(kind: DeregisterResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for DeregisterResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DeregisterResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            DeregisterResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            DeregisterResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            DeregisterResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeResourceError {
    pub kind: DescribeResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeResourceError {
    fn code(&self) -> Option<&str> {
        DescribeResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeResourceError {
    pub fn new(kind: DescribeResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for DescribeResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DescribeResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            DescribeResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            DescribeResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            DescribeResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetDataLakeSettingsError {
    pub kind: GetDataLakeSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetDataLakeSettingsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetDataLakeSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetDataLakeSettingsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetDataLakeSettingsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetDataLakeSettingsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            GetDataLakeSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetDataLakeSettingsError {
    fn code(&self) -> Option<&str> {
        GetDataLakeSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetDataLakeSettingsError {
    pub fn new(kind: GetDataLakeSettingsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetDataLakeSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetDataLakeSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDataLakeSettingsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDataLakeSettingsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDataLakeSettingsErrorKind::InvalidInputException(_)
        )
    }
}
impl std::error::Error for GetDataLakeSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetDataLakeSettingsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetDataLakeSettingsErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetDataLakeSettingsErrorKind::InvalidInputException(_inner) => Some(_inner),
            GetDataLakeSettingsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetEffectivePermissionsForPathError {
    pub kind: GetEffectivePermissionsForPathErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetEffectivePermissionsForPathErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetEffectivePermissionsForPathError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetEffectivePermissionsForPathErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetEffectivePermissionsForPathErrorKind::InternalServiceException(_inner) => {
                _inner.fmt(f)
            }
            GetEffectivePermissionsForPathErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            GetEffectivePermissionsForPathErrorKind::OperationTimeoutException(_inner) => {
                _inner.fmt(f)
            }
            GetEffectivePermissionsForPathErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetEffectivePermissionsForPathError {
    fn code(&self) -> Option<&str> {
        GetEffectivePermissionsForPathError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetEffectivePermissionsForPathError {
    pub fn new(kind: GetEffectivePermissionsForPathErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetEffectivePermissionsForPathErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetEffectivePermissionsForPathErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetEffectivePermissionsForPathErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetEffectivePermissionsForPathErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetEffectivePermissionsForPathErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetEffectivePermissionsForPathErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for GetEffectivePermissionsForPathError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetEffectivePermissionsForPathErrorKind::EntityNotFoundException(_inner) => {
                Some(_inner)
            }
            GetEffectivePermissionsForPathErrorKind::InternalServiceException(_inner) => {
                Some(_inner)
            }
            GetEffectivePermissionsForPathErrorKind::InvalidInputException(_inner) => Some(_inner),
            GetEffectivePermissionsForPathErrorKind::OperationTimeoutException(_inner) => {
                Some(_inner)
            }
            GetEffectivePermissionsForPathErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetLFTagError {
    pub kind: GetLFTagErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetLFTagErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetLFTagError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetLFTagErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            GetLFTagErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetLFTagErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetLFTagErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            GetLFTagErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            GetLFTagErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetLFTagError {
    fn code(&self) -> Option<&str> {
        GetLFTagError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetLFTagError {
    pub fn new(kind: GetLFTagErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetLFTagErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetLFTagErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, GetLFTagErrorKind::AccessDeniedException(_))
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, GetLFTagErrorKind::EntityNotFoundException(_))
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(&self.kind, GetLFTagErrorKind::InternalServiceException(_))
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, GetLFTagErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(&self.kind, GetLFTagErrorKind::OperationTimeoutException(_))
    }
}
impl std::error::Error for GetLFTagError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetLFTagErrorKind::AccessDeniedException(_inner) => Some(_inner),
            GetLFTagErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetLFTagErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetLFTagErrorKind::InvalidInputException(_inner) => Some(_inner),
            GetLFTagErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            GetLFTagErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetResourceLFTagsError {
    pub kind: GetResourceLFTagsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetResourceLFTagsErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    GlueEncryptionException(crate::error::GlueEncryptionException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetResourceLFTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetResourceLFTagsErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::GlueEncryptionException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            GetResourceLFTagsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetResourceLFTagsError {
    fn code(&self) -> Option<&str> {
        GetResourceLFTagsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetResourceLFTagsError {
    pub fn new(kind: GetResourceLFTagsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetResourceLFTagsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetResourceLFTagsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_glue_encryption_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::GlueEncryptionException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetResourceLFTagsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for GetResourceLFTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetResourceLFTagsErrorKind::AccessDeniedException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::GlueEncryptionException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::InternalServiceException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::InvalidInputException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            GetResourceLFTagsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GrantPermissionsError {
    pub kind: GrantPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GrantPermissionsErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidInputException(crate::error::InvalidInputException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GrantPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GrantPermissionsErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            GrantPermissionsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GrantPermissionsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            GrantPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GrantPermissionsError {
    fn code(&self) -> Option<&str> {
        GrantPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GrantPermissionsError {
    pub fn new(kind: GrantPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GrantPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GrantPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            GrantPermissionsErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GrantPermissionsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            GrantPermissionsErrorKind::InvalidInputException(_)
        )
    }
}
impl std::error::Error for GrantPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GrantPermissionsErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            GrantPermissionsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GrantPermissionsErrorKind::InvalidInputException(_inner) => Some(_inner),
            GrantPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListLFTagsError {
    pub kind: ListLFTagsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListLFTagsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListLFTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListLFTagsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListLFTagsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            ListLFTagsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            ListLFTagsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            ListLFTagsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListLFTagsError {
    fn code(&self) -> Option<&str> {
        ListLFTagsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListLFTagsError {
    pub fn new(kind: ListLFTagsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListLFTagsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListLFTagsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, ListLFTagsErrorKind::EntityNotFoundException(_))
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(&self.kind, ListLFTagsErrorKind::InternalServiceException(_))
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, ListLFTagsErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListLFTagsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for ListLFTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListLFTagsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListLFTagsErrorKind::InternalServiceException(_inner) => Some(_inner),
            ListLFTagsErrorKind::InvalidInputException(_inner) => Some(_inner),
            ListLFTagsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            ListLFTagsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListPermissionsError {
    pub kind: ListPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListPermissionsErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListPermissionsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            ListPermissionsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            ListPermissionsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            ListPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListPermissionsError {
    fn code(&self) -> Option<&str> {
        ListPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListPermissionsError {
    pub fn new(kind: ListPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPermissionsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPermissionsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPermissionsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for ListPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListPermissionsErrorKind::InternalServiceException(_inner) => Some(_inner),
            ListPermissionsErrorKind::InvalidInputException(_inner) => Some(_inner),
            ListPermissionsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            ListPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListResourcesError {
    pub kind: ListResourcesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListResourcesErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListResourcesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListResourcesErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListResourcesError {
    fn code(&self) -> Option<&str> {
        ListResourcesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListResourcesError {
    pub fn new(kind: ListResourcesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListResourcesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListResourcesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourcesErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, ListResourcesErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourcesErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for ListResourcesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListResourcesErrorKind::InternalServiceException(_inner) => Some(_inner),
            ListResourcesErrorKind::InvalidInputException(_inner) => Some(_inner),
            ListResourcesErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            ListResourcesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutDataLakeSettingsError {
    pub kind: PutDataLakeSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutDataLakeSettingsErrorKind {
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutDataLakeSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutDataLakeSettingsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            PutDataLakeSettingsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            PutDataLakeSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutDataLakeSettingsError {
    fn code(&self) -> Option<&str> {
        PutDataLakeSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutDataLakeSettingsError {
    pub fn new(kind: PutDataLakeSettingsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutDataLakeSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutDataLakeSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutDataLakeSettingsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutDataLakeSettingsErrorKind::InvalidInputException(_)
        )
    }
}
impl std::error::Error for PutDataLakeSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutDataLakeSettingsErrorKind::InternalServiceException(_inner) => Some(_inner),
            PutDataLakeSettingsErrorKind::InvalidInputException(_inner) => Some(_inner),
            PutDataLakeSettingsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterResourceError {
    pub kind: RegisterResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterResourceErrorKind {
    AlreadyExistsException(crate::error::AlreadyExistsException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterResourceErrorKind::AlreadyExistsException(_inner) => _inner.fmt(f),
            RegisterResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            RegisterResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            RegisterResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            RegisterResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterResourceError {
    fn code(&self) -> Option<&str> {
        RegisterResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterResourceError {
    pub fn new(kind: RegisterResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterResourceErrorKind::AlreadyExistsException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for RegisterResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterResourceErrorKind::AlreadyExistsException(_inner) => Some(_inner),
            RegisterResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            RegisterResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            RegisterResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            RegisterResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemoveLFTagsFromResourceError {
    pub kind: RemoveLFTagsFromResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemoveLFTagsFromResourceErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    GlueEncryptionException(crate::error::GlueEncryptionException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemoveLFTagsFromResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemoveLFTagsFromResourceErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::ConcurrentModificationException(_inner) => {
                _inner.fmt(f)
            }
            RemoveLFTagsFromResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::GlueEncryptionException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            RemoveLFTagsFromResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemoveLFTagsFromResourceError {
    fn code(&self) -> Option<&str> {
        RemoveLFTagsFromResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemoveLFTagsFromResourceError {
    pub fn new(kind: RemoveLFTagsFromResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemoveLFTagsFromResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemoveLFTagsFromResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_glue_encryption_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::GlueEncryptionException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveLFTagsFromResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for RemoveLFTagsFromResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemoveLFTagsFromResourceErrorKind::AccessDeniedException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::ConcurrentModificationException(_inner) => {
                Some(_inner)
            }
            RemoveLFTagsFromResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::GlueEncryptionException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            RemoveLFTagsFromResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RevokePermissionsError {
    pub kind: RevokePermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RevokePermissionsErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidInputException(crate::error::InvalidInputException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RevokePermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RevokePermissionsErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            RevokePermissionsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            RevokePermissionsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            RevokePermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RevokePermissionsError {
    fn code(&self) -> Option<&str> {
        RevokePermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RevokePermissionsError {
    pub fn new(kind: RevokePermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RevokePermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RevokePermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            RevokePermissionsErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RevokePermissionsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            RevokePermissionsErrorKind::InvalidInputException(_)
        )
    }
}
impl std::error::Error for RevokePermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RevokePermissionsErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            RevokePermissionsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            RevokePermissionsErrorKind::InvalidInputException(_inner) => Some(_inner),
            RevokePermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SearchDatabasesByLFTagsError {
    pub kind: SearchDatabasesByLFTagsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SearchDatabasesByLFTagsErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    GlueEncryptionException(crate::error::GlueEncryptionException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SearchDatabasesByLFTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SearchDatabasesByLFTagsErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::GlueEncryptionException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            SearchDatabasesByLFTagsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SearchDatabasesByLFTagsError {
    fn code(&self) -> Option<&str> {
        SearchDatabasesByLFTagsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SearchDatabasesByLFTagsError {
    pub fn new(kind: SearchDatabasesByLFTagsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SearchDatabasesByLFTagsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SearchDatabasesByLFTagsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_glue_encryption_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::GlueEncryptionException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchDatabasesByLFTagsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for SearchDatabasesByLFTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SearchDatabasesByLFTagsErrorKind::AccessDeniedException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::GlueEncryptionException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::InternalServiceException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::InvalidInputException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            SearchDatabasesByLFTagsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SearchTablesByLFTagsError {
    pub kind: SearchTablesByLFTagsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SearchTablesByLFTagsErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    GlueEncryptionException(crate::error::GlueEncryptionException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SearchTablesByLFTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SearchTablesByLFTagsErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::GlueEncryptionException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            SearchTablesByLFTagsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SearchTablesByLFTagsError {
    fn code(&self) -> Option<&str> {
        SearchTablesByLFTagsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SearchTablesByLFTagsError {
    pub fn new(kind: SearchTablesByLFTagsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SearchTablesByLFTagsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SearchTablesByLFTagsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_glue_encryption_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::GlueEncryptionException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            SearchTablesByLFTagsErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for SearchTablesByLFTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SearchTablesByLFTagsErrorKind::AccessDeniedException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::GlueEncryptionException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::InternalServiceException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::InvalidInputException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            SearchTablesByLFTagsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateLFTagError {
    pub kind: UpdateLFTagErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateLFTagErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateLFTagError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateLFTagErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            UpdateLFTagErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateLFTagError {
    fn code(&self) -> Option<&str> {
        UpdateLFTagError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateLFTagError {
    pub fn new(kind: UpdateLFTagErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateLFTagErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateLFTagErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, UpdateLFTagErrorKind::AccessDeniedException(_))
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateLFTagErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, UpdateLFTagErrorKind::EntityNotFoundException(_))
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateLFTagErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(&self.kind, UpdateLFTagErrorKind::InvalidInputException(_))
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateLFTagErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for UpdateLFTagError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateLFTagErrorKind::AccessDeniedException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::InternalServiceException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::InvalidInputException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            UpdateLFTagErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateResourceError {
    pub kind: UpdateResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InternalServiceException(crate::error::InternalServiceException),
    InvalidInputException(crate::error::InvalidInputException),
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::InternalServiceException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::InvalidInputException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::OperationTimeoutException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateResourceError {
    fn code(&self) -> Option<&str> {
        UpdateResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateResourceError {
    pub fn new(kind: UpdateResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_internal_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::InternalServiceException(_)
        )
    }
    pub fn is_invalid_input_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::InvalidInputException(_)
        )
    }
    pub fn is_operation_timeout_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::OperationTimeoutException(_)
        )
    }
}
impl std::error::Error for UpdateResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdateResourceErrorKind::InternalServiceException(_inner) => Some(_inner),
            UpdateResourceErrorKind::InvalidInputException(_inner) => Some(_inner),
            UpdateResourceErrorKind::OperationTimeoutException(_inner) => Some(_inner),
            UpdateResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The operation timed out.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OperationTimeoutException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for OperationTimeoutException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OperationTimeoutException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl OperationTimeoutException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for OperationTimeoutException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "OperationTimeoutException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for OperationTimeoutException {}
/// See [`OperationTimeoutException`](crate::error::OperationTimeoutException)
pub mod operation_timeout_exception {
    /// A builder for [`OperationTimeoutException`](crate::error::OperationTimeoutException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`OperationTimeoutException`](crate::error::OperationTimeoutException)
        pub fn build(self) -> crate::error::OperationTimeoutException {
            crate::error::OperationTimeoutException {
                message: self.message,
            }
        }
    }
}
impl OperationTimeoutException {
    /// Creates a new builder-style object to manufacture [`OperationTimeoutException`](crate::error::OperationTimeoutException)
    pub fn builder() -> crate::error::operation_timeout_exception::Builder {
        crate::error::operation_timeout_exception::Builder::default()
    }
}

/// <p>The input provided was not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidInputException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidInputException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidInputException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidInputException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidInputException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidInputException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidInputException {}
/// See [`InvalidInputException`](crate::error::InvalidInputException)
pub mod invalid_input_exception {
    /// A builder for [`InvalidInputException`](crate::error::InvalidInputException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidInputException`](crate::error::InvalidInputException)
        pub fn build(self) -> crate::error::InvalidInputException {
            crate::error::InvalidInputException {
                message: self.message,
            }
        }
    }
}
impl InvalidInputException {
    /// Creates a new builder-style object to manufacture [`InvalidInputException`](crate::error::InvalidInputException)
    pub fn builder() -> crate::error::invalid_input_exception::Builder {
        crate::error::invalid_input_exception::Builder::default()
    }
}

/// <p>An internal service error occurred.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServiceException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServiceException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServiceException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServiceException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalServiceException {}
/// See [`InternalServiceException`](crate::error::InternalServiceException)
pub mod internal_service_exception {
    /// A builder for [`InternalServiceException`](crate::error::InternalServiceException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalServiceException`](crate::error::InternalServiceException)
        pub fn build(self) -> crate::error::InternalServiceException {
            crate::error::InternalServiceException {
                message: self.message,
            }
        }
    }
}
impl InternalServiceException {
    /// Creates a new builder-style object to manufacture [`InternalServiceException`](crate::error::InternalServiceException)
    pub fn builder() -> crate::error::internal_service_exception::Builder {
        crate::error::internal_service_exception::Builder::default()
    }
}

/// <p>A specified entity does not exist</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityNotFoundException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EntityNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityNotFoundException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityNotFoundException {}
/// See [`EntityNotFoundException`](crate::error::EntityNotFoundException)
pub mod entity_not_found_exception {
    /// A builder for [`EntityNotFoundException`](crate::error::EntityNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityNotFoundException`](crate::error::EntityNotFoundException)
        pub fn build(self) -> crate::error::EntityNotFoundException {
            crate::error::EntityNotFoundException {
                message: self.message,
            }
        }
    }
}
impl EntityNotFoundException {
    /// Creates a new builder-style object to manufacture [`EntityNotFoundException`](crate::error::EntityNotFoundException)
    pub fn builder() -> crate::error::entity_not_found_exception::Builder {
        crate::error::entity_not_found_exception::Builder::default()
    }
}

/// <p>Two processes are trying to modify a resource simultaneously.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConcurrentModificationException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConcurrentModificationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConcurrentModificationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConcurrentModificationException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConcurrentModificationException {}
/// See [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
pub mod concurrent_modification_exception {
    /// A builder for [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
        pub fn build(self) -> crate::error::ConcurrentModificationException {
            crate::error::ConcurrentModificationException {
                message: self.message,
            }
        }
    }
}
impl ConcurrentModificationException {
    /// Creates a new builder-style object to manufacture [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    pub fn builder() -> crate::error::concurrent_modification_exception::Builder {
        crate::error::concurrent_modification_exception::Builder::default()
    }
}

/// <p>Access to a resource was denied.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AccessDeniedException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AccessDeniedException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl AccessDeniedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for AccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AccessDeniedException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for AccessDeniedException {}
/// See [`AccessDeniedException`](crate::error::AccessDeniedException)
pub mod access_denied_exception {
    /// A builder for [`AccessDeniedException`](crate::error::AccessDeniedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessDeniedException`](crate::error::AccessDeniedException)
        pub fn build(self) -> crate::error::AccessDeniedException {
            crate::error::AccessDeniedException {
                message: self.message,
            }
        }
    }
}
impl AccessDeniedException {
    /// Creates a new builder-style object to manufacture [`AccessDeniedException`](crate::error::AccessDeniedException)
    pub fn builder() -> crate::error::access_denied_exception::Builder {
        crate::error::access_denied_exception::Builder::default()
    }
}

/// <p>An encryption operation failed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlueEncryptionException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GlueEncryptionException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GlueEncryptionException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl GlueEncryptionException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for GlueEncryptionException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "GlueEncryptionException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for GlueEncryptionException {}
/// See [`GlueEncryptionException`](crate::error::GlueEncryptionException)
pub mod glue_encryption_exception {
    /// A builder for [`GlueEncryptionException`](crate::error::GlueEncryptionException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`GlueEncryptionException`](crate::error::GlueEncryptionException)
        pub fn build(self) -> crate::error::GlueEncryptionException {
            crate::error::GlueEncryptionException {
                message: self.message,
            }
        }
    }
}
impl GlueEncryptionException {
    /// Creates a new builder-style object to manufacture [`GlueEncryptionException`](crate::error::GlueEncryptionException)
    pub fn builder() -> crate::error::glue_encryption_exception::Builder {
        crate::error::glue_encryption_exception::Builder::default()
    }
}

/// <p>A resource to be created or added already exists.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AlreadyExistsException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AlreadyExistsException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl AlreadyExistsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for AlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AlreadyExistsException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for AlreadyExistsException {}
/// See [`AlreadyExistsException`](crate::error::AlreadyExistsException)
pub mod already_exists_exception {
    /// A builder for [`AlreadyExistsException`](crate::error::AlreadyExistsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`AlreadyExistsException`](crate::error::AlreadyExistsException)
        pub fn build(self) -> crate::error::AlreadyExistsException {
            crate::error::AlreadyExistsException {
                message: self.message,
            }
        }
    }
}
impl AlreadyExistsException {
    /// Creates a new builder-style object to manufacture [`AlreadyExistsException`](crate::error::AlreadyExistsException)
    pub fn builder() -> crate::error::already_exists_exception::Builder {
        crate::error::already_exists_exception::Builder::default()
    }
}

/// <p>A resource numerical limit was exceeded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNumberLimitExceededException {
    /// <p>A message describing the problem.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNumberLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNumberLimitExceededException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNumberLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNumberLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNumberLimitExceededException")?;
        if let Some(inner_9) = &self.message {
            write!(f, ": {}", inner_9)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNumberLimitExceededException {}
/// See [`ResourceNumberLimitExceededException`](crate::error::ResourceNumberLimitExceededException)
pub mod resource_number_limit_exceeded_exception {
    /// A builder for [`ResourceNumberLimitExceededException`](crate::error::ResourceNumberLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A message describing the problem.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNumberLimitExceededException`](crate::error::ResourceNumberLimitExceededException)
        pub fn build(self) -> crate::error::ResourceNumberLimitExceededException {
            crate::error::ResourceNumberLimitExceededException {
                message: self.message,
            }
        }
    }
}
impl ResourceNumberLimitExceededException {
    /// Creates a new builder-style object to manufacture [`ResourceNumberLimitExceededException`](crate::error::ResourceNumberLimitExceededException)
    pub fn builder() -> crate::error::resource_number_limit_exceeded_exception::Builder {
        crate::error::resource_number_limit_exceeded_exception::Builder::default()
    }
}
