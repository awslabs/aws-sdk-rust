// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Access to a resource was denied.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>A resource to be created or added already exists.</p>
    AlreadyExistsException(crate::error::AlreadyExistsException),
    /// <p>Two processes are trying to modify a resource simultaneously.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>A specified entity does not exist</p>
    EntityNotFoundException(crate::error::EntityNotFoundException),
    /// <p>Contains details about an error where the query request expired.</p>
    ExpiredException(crate::error::ExpiredException),
    /// <p>An encryption operation failed.</p>
    GlueEncryptionException(crate::error::GlueEncryptionException),
    /// <p>An internal service error occurred.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>The input provided was not valid.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The operation timed out.</p>
    OperationTimeoutException(crate::error::OperationTimeoutException),
    /// <p>The engine does not support filtering data based on the enforced permissions. For example, if you call the <code>GetTemporaryGlueTableCredentials</code> operation with <code>SupportedPermissionType</code> equal to <code>ColumnPermission</code>, but cell-level permissions exist on the table, this exception is thrown.</p>
    PermissionTypeMismatchException(crate::error::PermissionTypeMismatchException),
    /// <p>Contains details about an error related to a resource which is not ready for a transaction.</p>
    ResourceNotReadyException(crate::error::ResourceNotReadyException),
    /// <p>A resource numerical limit was exceeded.</p>
    ResourceNumberLimitExceededException(crate::error::ResourceNumberLimitExceededException),
    /// <p>Contains details about an error related to statistics not being ready.</p>
    StatisticsNotReadyYetException(crate::error::StatisticsNotReadyYetException),
    /// <p>Contains details about an error where the query request was throttled.</p>
    ThrottledException(crate::error::ThrottledException),
    /// <p>Contains details about an error related to a transaction that was cancelled.</p>
    TransactionCanceledException(crate::error::TransactionCanceledException),
    /// <p>Contains details about an error related to a transaction commit that was in progress.</p>
    TransactionCommitInProgressException(crate::error::TransactionCommitInProgressException),
    /// <p>Contains details about an error where the specified transaction has already been committed and cannot be used for <code>UpdateTableObjects</code>.</p>
    TransactionCommittedException(crate::error::TransactionCommittedException),
    /// <p>Contains details about an error related to work units not being ready.</p>
    WorkUnitsNotReadyYetException(crate::error::WorkUnitsNotReadyYetException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::EntityNotFoundException(inner) => inner.fmt(f),
            Error::ExpiredException(inner) => inner.fmt(f),
            Error::GlueEncryptionException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::OperationTimeoutException(inner) => inner.fmt(f),
            Error::PermissionTypeMismatchException(inner) => inner.fmt(f),
            Error::ResourceNotReadyException(inner) => inner.fmt(f),
            Error::ResourceNumberLimitExceededException(inner) => inner.fmt(f),
            Error::StatisticsNotReadyYetException(inner) => inner.fmt(f),
            Error::ThrottledException(inner) => inner.fmt(f),
            Error::TransactionCanceledException(inner) => inner.fmt(f),
            Error::TransactionCommitInProgressException(inner) => inner.fmt(f),
            Error::TransactionCommittedException(inner) => inner.fmt(f),
            Error::WorkUnitsNotReadyYetException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddLFTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddLFTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddLFTagsToResourceError> for Error {
    fn from(err: crate::error::AddLFTagsToResourceError) -> Self {
        match err {
            crate::error::AddLFTagsToResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AddLFTagsToResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::AddLFTagsToResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::AddLFTagsToResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AddLFTagsToResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AddLFTagsToResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::AddLFTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssumeDecoratedRoleWithSAMLError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssumeDecoratedRoleWithSAMLError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssumeDecoratedRoleWithSAMLError> for Error {
    fn from(err: crate::error::AssumeDecoratedRoleWithSAMLError) -> Self {
        match err {
            crate::error::AssumeDecoratedRoleWithSAMLError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssumeDecoratedRoleWithSAMLError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::AssumeDecoratedRoleWithSAMLError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::AssumeDecoratedRoleWithSAMLError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AssumeDecoratedRoleWithSAMLError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::AssumeDecoratedRoleWithSAMLError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGrantPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchGrantPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGrantPermissionsError> for Error {
    fn from(err: crate::error::BatchGrantPermissionsError) -> Self {
        match err {
            crate::error::BatchGrantPermissionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchGrantPermissionsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::BatchGrantPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchRevokePermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchRevokePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchRevokePermissionsError> for Error {
    fn from(err: crate::error::BatchRevokePermissionsError) -> Self {
        match err {
            crate::error::BatchRevokePermissionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchRevokePermissionsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::BatchRevokePermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelTransactionError> for Error {
    fn from(err: crate::error::CancelTransactionError) -> Self {
        match err {
            crate::error::CancelTransactionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CancelTransactionError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CancelTransactionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CancelTransactionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CancelTransactionError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::CancelTransactionError::TransactionCommitInProgressException(inner) => {
                Error::TransactionCommitInProgressException(inner)
            }
            crate::error::CancelTransactionError::TransactionCommittedException(inner) => {
                Error::TransactionCommittedException(inner)
            }
            crate::error::CancelTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CommitTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CommitTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CommitTransactionError> for Error {
    fn from(err: crate::error::CommitTransactionError) -> Self {
        match err {
            crate::error::CommitTransactionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CommitTransactionError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CommitTransactionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CommitTransactionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CommitTransactionError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::CommitTransactionError::TransactionCanceledException(inner) => {
                Error::TransactionCanceledException(inner)
            }
            crate::error::CommitTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataCellsFilterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataCellsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataCellsFilterError> for Error {
    fn from(err: crate::error::CreateDataCellsFilterError) -> Self {
        match err {
            crate::error::CreateDataCellsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDataCellsFilterError::AlreadyExistsException(inner) => {
                Error::AlreadyExistsException(inner)
            }
            crate::error::CreateDataCellsFilterError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CreateDataCellsFilterError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateDataCellsFilterError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDataCellsFilterError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::CreateDataCellsFilterError::ResourceNumberLimitExceededException(
                inner,
            ) => Error::ResourceNumberLimitExceededException(inner),
            crate::error::CreateDataCellsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLFTagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLFTagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLFTagError> for Error {
    fn from(err: crate::error::CreateLFTagError) -> Self {
        match err {
            crate::error::CreateLFTagError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLFTagError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CreateLFTagError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateLFTagError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateLFTagError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::CreateLFTagError::ResourceNumberLimitExceededException(inner) => {
                Error::ResourceNumberLimitExceededException(inner)
            }
            crate::error::CreateLFTagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataCellsFilterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDataCellsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataCellsFilterError> for Error {
    fn from(err: crate::error::DeleteDataCellsFilterError) -> Self {
        match err {
            crate::error::DeleteDataCellsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDataCellsFilterError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteDataCellsFilterError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteDataCellsFilterError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDataCellsFilterError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DeleteDataCellsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLFTagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLFTagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLFTagError> for Error {
    fn from(err: crate::error::DeleteLFTagError) -> Self {
        match err {
            crate::error::DeleteLFTagError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteLFTagError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteLFTagError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteLFTagError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteLFTagError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DeleteLFTagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteObjectsOnCancelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteObjectsOnCancelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteObjectsOnCancelError> for Error {
    fn from(err: crate::error::DeleteObjectsOnCancelError) -> Self {
        match err {
            crate::error::DeleteObjectsOnCancelError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::TransactionCanceledException(inner) => {
                Error::TransactionCanceledException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::TransactionCommittedException(inner) => {
                Error::TransactionCommittedException(inner)
            }
            crate::error::DeleteObjectsOnCancelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterResourceError> for Error {
    fn from(err: crate::error::DeregisterResourceError) -> Self {
        match err {
            crate::error::DeregisterResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeregisterResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeregisterResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeregisterResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DeregisterResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourceError> for Error {
    fn from(err: crate::error::DescribeResourceError) -> Self {
        match err {
            crate::error::DescribeResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DescribeResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTransactionError> for Error {
    fn from(err: crate::error::DescribeTransactionError) -> Self {
        match err {
            crate::error::DescribeTransactionError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeTransactionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeTransactionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeTransactionError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::DescribeTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExtendTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExtendTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExtendTransactionError> for Error {
    fn from(err: crate::error::ExtendTransactionError) -> Self {
        match err {
            crate::error::ExtendTransactionError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ExtendTransactionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ExtendTransactionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ExtendTransactionError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ExtendTransactionError::TransactionCanceledException(inner) => {
                Error::TransactionCanceledException(inner)
            }
            crate::error::ExtendTransactionError::TransactionCommitInProgressException(inner) => {
                Error::TransactionCommitInProgressException(inner)
            }
            crate::error::ExtendTransactionError::TransactionCommittedException(inner) => {
                Error::TransactionCommittedException(inner)
            }
            crate::error::ExtendTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDataLakeSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDataLakeSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDataLakeSettingsError> for Error {
    fn from(err: crate::error::GetDataLakeSettingsError) -> Self {
        match err {
            crate::error::GetDataLakeSettingsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetDataLakeSettingsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetDataLakeSettingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDataLakeSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetEffectivePermissionsForPathError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetEffectivePermissionsForPathError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEffectivePermissionsForPathError> for Error {
    fn from(err: crate::error::GetEffectivePermissionsForPathError) -> Self {
        match err {
            crate::error::GetEffectivePermissionsForPathError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetEffectivePermissionsForPathError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetEffectivePermissionsForPathError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetEffectivePermissionsForPathError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::GetEffectivePermissionsForPathError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLFTagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLFTagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLFTagError> for Error {
    fn from(err: crate::error::GetLFTagError) -> Self {
        match err {
            crate::error::GetLFTagError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLFTagError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetLFTagError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetLFTagError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetLFTagError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::GetLFTagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetQueryStateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQueryStateError> for Error {
    fn from(err: crate::error::GetQueryStateError) -> Self {
        match err {
            crate::error::GetQueryStateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetQueryStateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetQueryStateError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetQueryStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryStatisticsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetQueryStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQueryStatisticsError> for Error {
    fn from(err: crate::error::GetQueryStatisticsError) -> Self {
        match err {
            crate::error::GetQueryStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetQueryStatisticsError::ExpiredException(inner) => {
                Error::ExpiredException(inner)
            }
            crate::error::GetQueryStatisticsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetQueryStatisticsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetQueryStatisticsError::StatisticsNotReadyYetException(inner) => {
                Error::StatisticsNotReadyYetException(inner)
            }
            crate::error::GetQueryStatisticsError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::error::GetQueryStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceLFTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourceLFTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceLFTagsError> for Error {
    fn from(err: crate::error::GetResourceLFTagsError) -> Self {
        match err {
            crate::error::GetResourceLFTagsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResourceLFTagsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetResourceLFTagsError::GlueEncryptionException(inner) => {
                Error::GlueEncryptionException(inner)
            }
            crate::error::GetResourceLFTagsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetResourceLFTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetResourceLFTagsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::GetResourceLFTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTableObjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTableObjectsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTableObjectsError> for Error {
    fn from(err: crate::error::GetTableObjectsError) -> Self {
        match err {
            crate::error::GetTableObjectsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetTableObjectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetTableObjectsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetTableObjectsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::GetTableObjectsError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::error::GetTableObjectsError::TransactionCanceledException(inner) => {
                Error::TransactionCanceledException(inner)
            }
            crate::error::GetTableObjectsError::TransactionCommittedException(inner) => {
                Error::TransactionCommittedException(inner)
            }
            crate::error::GetTableObjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetTemporaryGluePartitionCredentialsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetTemporaryGluePartitionCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTemporaryGluePartitionCredentialsError> for Error {
    fn from(err: crate::error::GetTemporaryGluePartitionCredentialsError) -> Self {
        match err {
            crate::error::GetTemporaryGluePartitionCredentialsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::OperationTimeoutException(inner) => Error::OperationTimeoutException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::PermissionTypeMismatchException(inner) => Error::PermissionTypeMismatchException(inner),
            crate::error::GetTemporaryGluePartitionCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetTemporaryGlueTableCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetTemporaryGlueTableCredentialsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTemporaryGlueTableCredentialsError> for Error {
    fn from(err: crate::error::GetTemporaryGlueTableCredentialsError) -> Self {
        match err {
            crate::error::GetTemporaryGlueTableCredentialsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::OperationTimeoutException(inner) => Error::OperationTimeoutException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::PermissionTypeMismatchException(inner) => Error::PermissionTypeMismatchException(inner),
            crate::error::GetTemporaryGlueTableCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkUnitResultsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetWorkUnitResultsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWorkUnitResultsError> for Error {
    fn from(err: crate::error::GetWorkUnitResultsError) -> Self {
        match err {
            crate::error::GetWorkUnitResultsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetWorkUnitResultsError::ExpiredException(inner) => {
                Error::ExpiredException(inner)
            }
            crate::error::GetWorkUnitResultsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetWorkUnitResultsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetWorkUnitResultsError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::error::GetWorkUnitResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkUnitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkUnitsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWorkUnitsError> for Error {
    fn from(err: crate::error::GetWorkUnitsError) -> Self {
        match err {
            crate::error::GetWorkUnitsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetWorkUnitsError::ExpiredException(inner) => {
                Error::ExpiredException(inner)
            }
            crate::error::GetWorkUnitsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::GetWorkUnitsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetWorkUnitsError::WorkUnitsNotReadyYetException(inner) => {
                Error::WorkUnitsNotReadyYetException(inner)
            }
            crate::error::GetWorkUnitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GrantPermissionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GrantPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GrantPermissionsError> for Error {
    fn from(err: crate::error::GrantPermissionsError) -> Self {
        match err {
            crate::error::GrantPermissionsError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GrantPermissionsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GrantPermissionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GrantPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataCellsFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDataCellsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataCellsFilterError> for Error {
    fn from(err: crate::error::ListDataCellsFilterError) -> Self {
        match err {
            crate::error::ListDataCellsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDataCellsFilterError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListDataCellsFilterError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListDataCellsFilterError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ListDataCellsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLFTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLFTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLFTagsError> for Error {
    fn from(err: crate::error::ListLFTagsError) -> Self {
        match err {
            crate::error::ListLFTagsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLFTagsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListLFTagsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListLFTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListLFTagsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ListLFTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPermissionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPermissionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPermissionsError> for Error {
    fn from(err: crate::error::ListPermissionsError) -> Self {
        match err {
            crate::error::ListPermissionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListPermissionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListPermissionsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ListPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesError> for Error {
    fn from(err: crate::error::ListResourcesError) -> Self {
        match err {
            crate::error::ListResourcesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListResourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListResourcesError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ListResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTableStorageOptimizersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTableStorageOptimizersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTableStorageOptimizersError> for Error {
    fn from(err: crate::error::ListTableStorageOptimizersError) -> Self {
        match err {
            crate::error::ListTableStorageOptimizersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTableStorageOptimizersError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListTableStorageOptimizersError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTableStorageOptimizersError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListTableStorageOptimizersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTransactionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTransactionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTransactionsError> for Error {
    fn from(err: crate::error::ListTransactionsError) -> Self {
        match err {
            crate::error::ListTransactionsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::ListTransactionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListTransactionsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::ListTransactionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutDataLakeSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutDataLakeSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutDataLakeSettingsError> for Error {
    fn from(err: crate::error::PutDataLakeSettingsError) -> Self {
        match err {
            crate::error::PutDataLakeSettingsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::PutDataLakeSettingsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutDataLakeSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterResourceError> for Error {
    fn from(err: crate::error::RegisterResourceError) -> Self {
        match err {
            crate::error::RegisterResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterResourceError::AlreadyExistsException(inner) => {
                Error::AlreadyExistsException(inner)
            }
            crate::error::RegisterResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::RegisterResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RegisterResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RegisterResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::RegisterResourceError::ResourceNumberLimitExceededException(inner) => {
                Error::ResourceNumberLimitExceededException(inner)
            }
            crate::error::RegisterResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveLFTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveLFTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveLFTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveLFTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveLFTagsFromResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::GlueEncryptionException(inner) => {
                Error::GlueEncryptionException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::RemoveLFTagsFromResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokePermissionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RevokePermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokePermissionsError> for Error {
    fn from(err: crate::error::RevokePermissionsError) -> Self {
        match err {
            crate::error::RevokePermissionsError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::RevokePermissionsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::RevokePermissionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::RevokePermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchDatabasesByLFTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchDatabasesByLFTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchDatabasesByLFTagsError> for Error {
    fn from(err: crate::error::SearchDatabasesByLFTagsError) -> Self {
        match err {
            crate::error::SearchDatabasesByLFTagsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::GlueEncryptionException(inner) => {
                Error::GlueEncryptionException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::SearchDatabasesByLFTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchTablesByLFTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SearchTablesByLFTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchTablesByLFTagsError> for Error {
    fn from(err: crate::error::SearchTablesByLFTagsError) -> Self {
        match err {
            crate::error::SearchTablesByLFTagsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchTablesByLFTagsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::SearchTablesByLFTagsError::GlueEncryptionException(inner) => {
                Error::GlueEncryptionException(inner)
            }
            crate::error::SearchTablesByLFTagsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::SearchTablesByLFTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::SearchTablesByLFTagsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::SearchTablesByLFTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartQueryPlanningError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartQueryPlanningError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartQueryPlanningError> for Error {
    fn from(err: crate::error::StartQueryPlanningError) -> Self {
        match err {
            crate::error::StartQueryPlanningError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartQueryPlanningError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartQueryPlanningError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::StartQueryPlanningError::ThrottledException(inner) => {
                Error::ThrottledException(inner)
            }
            crate::error::StartQueryPlanningError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartTransactionError> for Error {
    fn from(err: crate::error::StartTransactionError) -> Self {
        match err {
            crate::error::StartTransactionError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::StartTransactionError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::StartTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLFTagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateLFTagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLFTagError> for Error {
    fn from(err: crate::error::UpdateLFTagError) -> Self {
        match err {
            crate::error::UpdateLFTagError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateLFTagError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateLFTagError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateLFTagError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateLFTagError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateLFTagError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::UpdateLFTagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceError> for Error {
    fn from(err: crate::error::UpdateResourceError) -> Self {
        match err {
            crate::error::UpdateResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateResourceError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::UpdateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTableObjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTableObjectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTableObjectsError> for Error {
    fn from(err: crate::error::UpdateTableObjectsError) -> Self {
        match err {
            crate::error::UpdateTableObjectsError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateTableObjectsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateTableObjectsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateTableObjectsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateTableObjectsError::OperationTimeoutException(inner) => {
                Error::OperationTimeoutException(inner)
            }
            crate::error::UpdateTableObjectsError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::error::UpdateTableObjectsError::TransactionCanceledException(inner) => {
                Error::TransactionCanceledException(inner)
            }
            crate::error::UpdateTableObjectsError::TransactionCommitInProgressException(inner) => {
                Error::TransactionCommitInProgressException(inner)
            }
            crate::error::UpdateTableObjectsError::TransactionCommittedException(inner) => {
                Error::TransactionCommittedException(inner)
            }
            crate::error::UpdateTableObjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTableStorageOptimizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTableStorageOptimizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTableStorageOptimizerError> for Error {
    fn from(err: crate::error::UpdateTableStorageOptimizerError) -> Self {
        match err {
            crate::error::UpdateTableStorageOptimizerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTableStorageOptimizerError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateTableStorageOptimizerError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateTableStorageOptimizerError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateTableStorageOptimizerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AlreadyExistsException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::EntityNotFoundException(e) => e.request_id(),
            Self::ExpiredException(e) => e.request_id(),
            Self::GlueEncryptionException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::OperationTimeoutException(e) => e.request_id(),
            Self::PermissionTypeMismatchException(e) => e.request_id(),
            Self::ResourceNotReadyException(e) => e.request_id(),
            Self::ResourceNumberLimitExceededException(e) => e.request_id(),
            Self::StatisticsNotReadyYetException(e) => e.request_id(),
            Self::ThrottledException(e) => e.request_id(),
            Self::TransactionCanceledException(e) => e.request_id(),
            Self::TransactionCommitInProgressException(e) => e.request_id(),
            Self::TransactionCommittedException(e) => e.request_id(),
            Self::WorkUnitsNotReadyYetException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
