// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_lf_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddLfTagsToResourceInput,
) {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1);
    }
    if let Some(var_2) = &input.resource {
        let mut object_3 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_3, var_2);
        object_3.finish();
    }
    if let Some(var_4) = &input.lf_tags {
        let mut array_5 = object.key("LFTags").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_lf_tag_pair(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_batch_grant_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGrantPermissionsInput,
) {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8);
    }
    if let Some(var_9) = &input.entries {
        let mut array_10 = object.key("Entries").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_batch_permissions_request_entry(
                    &mut object_12,
                    item_11,
                );
                object_12.finish();
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_batch_revoke_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchRevokePermissionsInput,
) {
    if let Some(var_13) = &input.catalog_id {
        object.key("CatalogId").string(var_13);
    }
    if let Some(var_14) = &input.entries {
        let mut array_15 = object.key("Entries").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_batch_permissions_request_entry(
                    &mut object_17,
                    item_16,
                );
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_create_lf_tag_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLfTagInput,
) {
    if let Some(var_18) = &input.catalog_id {
        object.key("CatalogId").string(var_18);
    }
    if let Some(var_19) = &input.tag_key {
        object.key("TagKey").string(var_19);
    }
    if let Some(var_20) = &input.tag_values {
        let mut array_21 = object.key("TagValues").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
}

pub fn serialize_structure_delete_lf_tag_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLfTagInput,
) {
    if let Some(var_23) = &input.catalog_id {
        object.key("CatalogId").string(var_23);
    }
    if let Some(var_24) = &input.tag_key {
        object.key("TagKey").string(var_24);
    }
}

pub fn serialize_structure_deregister_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterResourceInput,
) {
    if let Some(var_25) = &input.resource_arn {
        object.key("ResourceArn").string(var_25);
    }
}

pub fn serialize_structure_describe_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourceInput,
) {
    if let Some(var_26) = &input.resource_arn {
        object.key("ResourceArn").string(var_26);
    }
}

pub fn serialize_structure_get_data_lake_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataLakeSettingsInput,
) {
    if let Some(var_27) = &input.catalog_id {
        object.key("CatalogId").string(var_27);
    }
}

pub fn serialize_structure_get_effective_permissions_for_path_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEffectivePermissionsForPathInput,
) {
    if let Some(var_28) = &input.catalog_id {
        object.key("CatalogId").string(var_28);
    }
    if let Some(var_29) = &input.resource_arn {
        object.key("ResourceArn").string(var_29);
    }
    if let Some(var_30) = &input.next_token {
        object.key("NextToken").string(var_30);
    }
    if let Some(var_31) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_31).into()),
        );
    }
}

pub fn serialize_structure_get_lf_tag_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLfTagInput,
) {
    if let Some(var_32) = &input.catalog_id {
        object.key("CatalogId").string(var_32);
    }
    if let Some(var_33) = &input.tag_key {
        object.key("TagKey").string(var_33);
    }
}

pub fn serialize_structure_get_resource_lf_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourceLfTagsInput,
) {
    if let Some(var_34) = &input.catalog_id {
        object.key("CatalogId").string(var_34);
    }
    if let Some(var_35) = &input.resource {
        let mut object_36 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_36, var_35);
        object_36.finish();
    }
    if let Some(var_37) = &input.show_assigned_lf_tags {
        object.key("ShowAssignedLFTags").boolean(*var_37);
    }
}

pub fn serialize_structure_grant_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GrantPermissionsInput,
) {
    if let Some(var_38) = &input.catalog_id {
        object.key("CatalogId").string(var_38);
    }
    if let Some(var_39) = &input.principal {
        let mut object_40 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_40, var_39);
        object_40.finish();
    }
    if let Some(var_41) = &input.resource {
        let mut object_42 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_42, var_41);
        object_42.finish();
    }
    if let Some(var_43) = &input.permissions {
        let mut array_44 = object.key("Permissions").start_array();
        for item_45 in var_43 {
            {
                array_44.value().string(item_45.as_str());
            }
        }
        array_44.finish();
    }
    if let Some(var_46) = &input.permissions_with_grant_option {
        let mut array_47 = object.key("PermissionsWithGrantOption").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
}

pub fn serialize_structure_list_lf_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLfTagsInput,
) {
    if let Some(var_49) = &input.catalog_id {
        object.key("CatalogId").string(var_49);
    }
    if let Some(var_50) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    if let Some(var_52) = &input.next_token {
        object.key("NextToken").string(var_52);
    }
}

pub fn serialize_structure_list_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPermissionsInput,
) {
    if let Some(var_53) = &input.catalog_id {
        object.key("CatalogId").string(var_53);
    }
    if let Some(var_54) = &input.principal {
        let mut object_55 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.resource_type {
        object.key("ResourceType").string(var_56.as_str());
    }
    if let Some(var_57) = &input.resource {
        let mut object_58 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.next_token {
        object.key("NextToken").string(var_59);
    }
    if let Some(var_60) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_60).into()),
        );
    }
}

pub fn serialize_structure_list_resources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesInput,
) {
    if let Some(var_61) = &input.filter_condition_list {
        let mut array_62 = object.key("FilterConditionList").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_filter_condition(&mut object_64, item_63);
                object_64.finish();
            }
        }
        array_62.finish();
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66);
    }
}

pub fn serialize_structure_put_data_lake_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataLakeSettingsInput,
) {
    if let Some(var_67) = &input.catalog_id {
        object.key("CatalogId").string(var_67);
    }
    if let Some(var_68) = &input.data_lake_settings {
        let mut object_69 = object.key("DataLakeSettings").start_object();
        crate::json_ser::serialize_structure_data_lake_settings(&mut object_69, var_68);
        object_69.finish();
    }
}

pub fn serialize_structure_register_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterResourceInput,
) {
    if let Some(var_70) = &input.resource_arn {
        object.key("ResourceArn").string(var_70);
    }
    if let Some(var_71) = &input.use_service_linked_role {
        object.key("UseServiceLinkedRole").boolean(*var_71);
    }
    if let Some(var_72) = &input.role_arn {
        object.key("RoleArn").string(var_72);
    }
}

pub fn serialize_structure_remove_lf_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveLfTagsFromResourceInput,
) {
    if let Some(var_73) = &input.catalog_id {
        object.key("CatalogId").string(var_73);
    }
    if let Some(var_74) = &input.resource {
        let mut object_75 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_75, var_74);
        object_75.finish();
    }
    if let Some(var_76) = &input.lf_tags {
        let mut array_77 = object.key("LFTags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_lf_tag_pair(&mut object_79, item_78);
                object_79.finish();
            }
        }
        array_77.finish();
    }
}

pub fn serialize_structure_revoke_permissions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokePermissionsInput,
) {
    if let Some(var_80) = &input.catalog_id {
        object.key("CatalogId").string(var_80);
    }
    if let Some(var_81) = &input.principal {
        let mut object_82 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.resource {
        let mut object_84 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_84, var_83);
        object_84.finish();
    }
    if let Some(var_85) = &input.permissions {
        let mut array_86 = object.key("Permissions").start_array();
        for item_87 in var_85 {
            {
                array_86.value().string(item_87.as_str());
            }
        }
        array_86.finish();
    }
    if let Some(var_88) = &input.permissions_with_grant_option {
        let mut array_89 = object.key("PermissionsWithGrantOption").start_array();
        for item_90 in var_88 {
            {
                array_89.value().string(item_90.as_str());
            }
        }
        array_89.finish();
    }
}

pub fn serialize_structure_search_databases_by_lf_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchDatabasesByLfTagsInput,
) {
    if let Some(var_91) = &input.next_token {
        object.key("NextToken").string(var_91);
    }
    if let Some(var_92) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    if let Some(var_93) = &input.catalog_id {
        object.key("CatalogId").string(var_93);
    }
    if let Some(var_94) = &input.expression {
        let mut array_95 = object.key("Expression").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_lf_tag(&mut object_97, item_96);
                object_97.finish();
            }
        }
        array_95.finish();
    }
}

pub fn serialize_structure_search_tables_by_lf_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesByLfTagsInput,
) {
    if let Some(var_98) = &input.next_token {
        object.key("NextToken").string(var_98);
    }
    if let Some(var_99) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_99).into()),
        );
    }
    if let Some(var_100) = &input.catalog_id {
        object.key("CatalogId").string(var_100);
    }
    if let Some(var_101) = &input.expression {
        let mut array_102 = object.key("Expression").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_lf_tag(&mut object_104, item_103);
                object_104.finish();
            }
        }
        array_102.finish();
    }
}

pub fn serialize_structure_update_lf_tag_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLfTagInput,
) {
    if let Some(var_105) = &input.catalog_id {
        object.key("CatalogId").string(var_105);
    }
    if let Some(var_106) = &input.tag_key {
        object.key("TagKey").string(var_106);
    }
    if let Some(var_107) = &input.tag_values_to_delete {
        let mut array_108 = object.key("TagValuesToDelete").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109);
            }
        }
        array_108.finish();
    }
    if let Some(var_110) = &input.tag_values_to_add {
        let mut array_111 = object.key("TagValuesToAdd").start_array();
        for item_112 in var_110 {
            {
                array_111.value().string(item_112);
            }
        }
        array_111.finish();
    }
}

pub fn serialize_structure_update_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceInput,
) {
    if let Some(var_113) = &input.role_arn {
        object.key("RoleArn").string(var_113);
    }
    if let Some(var_114) = &input.resource_arn {
        object.key("ResourceArn").string(var_114);
    }
}

pub fn serialize_structure_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) {
    if let Some(var_115) = &input.catalog {
        let mut object_116 = object.key("Catalog").start_object();
        crate::json_ser::serialize_structure_catalog_resource(&mut object_116, var_115);
        object_116.finish();
    }
    if let Some(var_117) = &input.database {
        let mut object_118 = object.key("Database").start_object();
        crate::json_ser::serialize_structure_database_resource(&mut object_118, var_117);
        object_118.finish();
    }
    if let Some(var_119) = &input.table {
        let mut object_120 = object.key("Table").start_object();
        crate::json_ser::serialize_structure_table_resource(&mut object_120, var_119);
        object_120.finish();
    }
    if let Some(var_121) = &input.table_with_columns {
        let mut object_122 = object.key("TableWithColumns").start_object();
        crate::json_ser::serialize_structure_table_with_columns_resource(&mut object_122, var_121);
        object_122.finish();
    }
    if let Some(var_123) = &input.data_location {
        let mut object_124 = object.key("DataLocation").start_object();
        crate::json_ser::serialize_structure_data_location_resource(&mut object_124, var_123);
        object_124.finish();
    }
    if let Some(var_125) = &input.lf_tag {
        let mut object_126 = object.key("LFTag").start_object();
        crate::json_ser::serialize_structure_lf_tag_key_resource(&mut object_126, var_125);
        object_126.finish();
    }
    if let Some(var_127) = &input.lf_tag_policy {
        let mut object_128 = object.key("LFTagPolicy").start_object();
        crate::json_ser::serialize_structure_lf_tag_policy_resource(&mut object_128, var_127);
        object_128.finish();
    }
}

pub fn serialize_structure_lf_tag_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LfTagPair,
) {
    if let Some(var_129) = &input.catalog_id {
        object.key("CatalogId").string(var_129);
    }
    if let Some(var_130) = &input.tag_key {
        object.key("TagKey").string(var_130);
    }
    if let Some(var_131) = &input.tag_values {
        let mut array_132 = object.key("TagValues").start_array();
        for item_133 in var_131 {
            {
                array_132.value().string(item_133);
            }
        }
        array_132.finish();
    }
}

pub fn serialize_structure_batch_permissions_request_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchPermissionsRequestEntry,
) {
    if let Some(var_134) = &input.id {
        object.key("Id").string(var_134);
    }
    if let Some(var_135) = &input.principal {
        let mut object_136 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.resource {
        let mut object_138 = object.key("Resource").start_object();
        crate::json_ser::serialize_structure_resource(&mut object_138, var_137);
        object_138.finish();
    }
    if let Some(var_139) = &input.permissions {
        let mut array_140 = object.key("Permissions").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141.as_str());
            }
        }
        array_140.finish();
    }
    if let Some(var_142) = &input.permissions_with_grant_option {
        let mut array_143 = object.key("PermissionsWithGrantOption").start_array();
        for item_144 in var_142 {
            {
                array_143.value().string(item_144.as_str());
            }
        }
        array_143.finish();
    }
}

pub fn serialize_structure_data_lake_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) {
    if let Some(var_145) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_145);
    }
}

pub fn serialize_structure_filter_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterCondition,
) {
    if let Some(var_146) = &input.field {
        object.key("Field").string(var_146.as_str());
    }
    if let Some(var_147) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_147.as_str());
    }
    if let Some(var_148) = &input.string_value_list {
        let mut array_149 = object.key("StringValueList").start_array();
        for item_150 in var_148 {
            {
                array_149.value().string(item_150);
            }
        }
        array_149.finish();
    }
}

pub fn serialize_structure_data_lake_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakeSettings,
) {
    if let Some(var_151) = &input.data_lake_admins {
        let mut array_152 = object.key("DataLakeAdmins").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_data_lake_principal(&mut object_154, item_153);
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.create_database_default_permissions {
        let mut array_156 = object.key("CreateDatabaseDefaultPermissions").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_principal_permissions(
                    &mut object_158,
                    item_157,
                );
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.create_table_default_permissions {
        let mut array_160 = object.key("CreateTableDefaultPermissions").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_principal_permissions(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.trusted_resource_owners {
        let mut array_164 = object.key("TrustedResourceOwners").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165);
            }
        }
        array_164.finish();
    }
}

pub fn serialize_structure_lf_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LfTag,
) {
    if let Some(var_166) = &input.tag_key {
        object.key("TagKey").string(var_166);
    }
    if let Some(var_167) = &input.tag_values {
        let mut array_168 = object.key("TagValues").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169);
            }
        }
        array_168.finish();
    }
}

pub fn serialize_structure_catalog_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogResource,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_database_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseResource,
) {
    if let Some(var_170) = &input.catalog_id {
        object.key("CatalogId").string(var_170);
    }
    if let Some(var_171) = &input.name {
        object.key("Name").string(var_171);
    }
}

pub fn serialize_structure_table_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableResource,
) {
    if let Some(var_172) = &input.catalog_id {
        object.key("CatalogId").string(var_172);
    }
    if let Some(var_173) = &input.database_name {
        object.key("DatabaseName").string(var_173);
    }
    if let Some(var_174) = &input.name {
        object.key("Name").string(var_174);
    }
    if let Some(var_175) = &input.table_wildcard {
        let mut object_176 = object.key("TableWildcard").start_object();
        crate::json_ser::serialize_structure_table_wildcard(&mut object_176, var_175);
        object_176.finish();
    }
}

pub fn serialize_structure_table_with_columns_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableWithColumnsResource,
) {
    if let Some(var_177) = &input.catalog_id {
        object.key("CatalogId").string(var_177);
    }
    if let Some(var_178) = &input.database_name {
        object.key("DatabaseName").string(var_178);
    }
    if let Some(var_179) = &input.name {
        object.key("Name").string(var_179);
    }
    if let Some(var_180) = &input.column_names {
        let mut array_181 = object.key("ColumnNames").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.column_wildcard {
        let mut object_184 = object.key("ColumnWildcard").start_object();
        crate::json_ser::serialize_structure_column_wildcard(&mut object_184, var_183);
        object_184.finish();
    }
}

pub fn serialize_structure_data_location_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLocationResource,
) {
    if let Some(var_185) = &input.catalog_id {
        object.key("CatalogId").string(var_185);
    }
    if let Some(var_186) = &input.resource_arn {
        object.key("ResourceArn").string(var_186);
    }
}

pub fn serialize_structure_lf_tag_key_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LfTagKeyResource,
) {
    if let Some(var_187) = &input.catalog_id {
        object.key("CatalogId").string(var_187);
    }
    if let Some(var_188) = &input.tag_key {
        object.key("TagKey").string(var_188);
    }
    if let Some(var_189) = &input.tag_values {
        let mut array_190 = object.key("TagValues").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191);
            }
        }
        array_190.finish();
    }
}

pub fn serialize_structure_lf_tag_policy_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LfTagPolicyResource,
) {
    if let Some(var_192) = &input.catalog_id {
        object.key("CatalogId").string(var_192);
    }
    if let Some(var_193) = &input.resource_type {
        object.key("ResourceType").string(var_193.as_str());
    }
    if let Some(var_194) = &input.expression {
        let mut array_195 = object.key("Expression").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_lf_tag(&mut object_197, item_196);
                object_197.finish();
            }
        }
        array_195.finish();
    }
}

pub fn serialize_structure_principal_permissions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) {
    if let Some(var_198) = &input.principal {
        let mut object_199 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_199, var_198);
        object_199.finish();
    }
    if let Some(var_200) = &input.permissions {
        let mut array_201 = object.key("Permissions").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202.as_str());
            }
        }
        array_201.finish();
    }
}

pub fn serialize_structure_table_wildcard(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableWildcard,
) {
    let (_, _) = (object, input);
}

pub fn serialize_structure_column_wildcard(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnWildcard,
) {
    if let Some(var_203) = &input.excluded_column_names {
        let mut array_204 = object.key("ExcludedColumnNames").start_array();
        for item_205 in var_203 {
            {
                array_204.value().string(item_205);
            }
        }
        array_204.finish();
    }
}
