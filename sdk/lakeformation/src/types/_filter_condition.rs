// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure describes the filtering of columns in a table based on a filter condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterCondition {
    /// <p>The field to filter in the filter condition.</p>
    #[doc(hidden)]
    pub field: std::option::Option<crate::types::FieldNameString>,
    /// <p>The comparison operator used in the filter condition.</p>
    #[doc(hidden)]
    pub comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    /// <p>A string with values used in evaluating the filter condition.</p>
    #[doc(hidden)]
    pub string_value_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FilterCondition {
    /// <p>The field to filter in the filter condition.</p>
    pub fn field(&self) -> std::option::Option<&crate::types::FieldNameString> {
        self.field.as_ref()
    }
    /// <p>The comparison operator used in the filter condition.</p>
    pub fn comparison_operator(&self) -> std::option::Option<&crate::types::ComparisonOperator> {
        self.comparison_operator.as_ref()
    }
    /// <p>A string with values used in evaluating the filter condition.</p>
    pub fn string_value_list(&self) -> std::option::Option<&[std::string::String]> {
        self.string_value_list.as_deref()
    }
}
impl FilterCondition {
    /// Creates a new builder-style object to manufacture [`FilterCondition`](crate::types::FilterCondition).
    pub fn builder() -> crate::types::builders::FilterConditionBuilder {
        crate::types::builders::FilterConditionBuilder::default()
    }
}

/// A builder for [`FilterCondition`](crate::types::FilterCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterConditionBuilder {
    pub(crate) field: std::option::Option<crate::types::FieldNameString>,
    pub(crate) comparison_operator: std::option::Option<crate::types::ComparisonOperator>,
    pub(crate) string_value_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl FilterConditionBuilder {
    /// <p>The field to filter in the filter condition.</p>
    pub fn field(mut self, input: crate::types::FieldNameString) -> Self {
        self.field = Some(input);
        self
    }
    /// <p>The field to filter in the filter condition.</p>
    pub fn set_field(mut self, input: std::option::Option<crate::types::FieldNameString>) -> Self {
        self.field = input;
        self
    }
    /// <p>The comparison operator used in the filter condition.</p>
    pub fn comparison_operator(mut self, input: crate::types::ComparisonOperator) -> Self {
        self.comparison_operator = Some(input);
        self
    }
    /// <p>The comparison operator used in the filter condition.</p>
    pub fn set_comparison_operator(
        mut self,
        input: std::option::Option<crate::types::ComparisonOperator>,
    ) -> Self {
        self.comparison_operator = input;
        self
    }
    /// Appends an item to `string_value_list`.
    ///
    /// To override the contents of this collection use [`set_string_value_list`](Self::set_string_value_list).
    ///
    /// <p>A string with values used in evaluating the filter condition.</p>
    pub fn string_value_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.string_value_list.unwrap_or_default();
        v.push(input.into());
        self.string_value_list = Some(v);
        self
    }
    /// <p>A string with values used in evaluating the filter condition.</p>
    pub fn set_string_value_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.string_value_list = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterCondition`](crate::types::FilterCondition).
    pub fn build(self) -> crate::types::FilterCondition {
        crate::types::FilterCondition {
            field: self.field,
            comparison_operator: self.comparison_operator,
            string_value_list: self.string_value_list,
        }
    }
}
