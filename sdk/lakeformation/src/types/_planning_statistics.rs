// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Statistics related to the processing of a query statement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PlanningStatistics {
    /// <p>An estimate of the data that was scanned in bytes.</p>
    #[doc(hidden)]
    pub estimated_data_to_scan_bytes: i64,
    /// <p>The time that it took to process the request.</p>
    #[doc(hidden)]
    pub planning_time_millis: i64,
    /// <p>The time the request was in queue to be processed.</p>
    #[doc(hidden)]
    pub queue_time_millis: i64,
    /// <p>The number of work units generated.</p>
    #[doc(hidden)]
    pub work_units_generated_count: i64,
}
impl PlanningStatistics {
    /// <p>An estimate of the data that was scanned in bytes.</p>
    pub fn estimated_data_to_scan_bytes(&self) -> i64 {
        self.estimated_data_to_scan_bytes
    }
    /// <p>The time that it took to process the request.</p>
    pub fn planning_time_millis(&self) -> i64 {
        self.planning_time_millis
    }
    /// <p>The time the request was in queue to be processed.</p>
    pub fn queue_time_millis(&self) -> i64 {
        self.queue_time_millis
    }
    /// <p>The number of work units generated.</p>
    pub fn work_units_generated_count(&self) -> i64 {
        self.work_units_generated_count
    }
}
impl PlanningStatistics {
    /// Creates a new builder-style object to manufacture [`PlanningStatistics`](crate::types::PlanningStatistics).
    pub fn builder() -> crate::types::builders::PlanningStatisticsBuilder {
        crate::types::builders::PlanningStatisticsBuilder::default()
    }
}

/// A builder for [`PlanningStatistics`](crate::types::PlanningStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PlanningStatisticsBuilder {
    pub(crate) estimated_data_to_scan_bytes: std::option::Option<i64>,
    pub(crate) planning_time_millis: std::option::Option<i64>,
    pub(crate) queue_time_millis: std::option::Option<i64>,
    pub(crate) work_units_generated_count: std::option::Option<i64>,
}
impl PlanningStatisticsBuilder {
    /// <p>An estimate of the data that was scanned in bytes.</p>
    pub fn estimated_data_to_scan_bytes(mut self, input: i64) -> Self {
        self.estimated_data_to_scan_bytes = Some(input);
        self
    }
    /// <p>An estimate of the data that was scanned in bytes.</p>
    pub fn set_estimated_data_to_scan_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.estimated_data_to_scan_bytes = input;
        self
    }
    /// <p>The time that it took to process the request.</p>
    pub fn planning_time_millis(mut self, input: i64) -> Self {
        self.planning_time_millis = Some(input);
        self
    }
    /// <p>The time that it took to process the request.</p>
    pub fn set_planning_time_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.planning_time_millis = input;
        self
    }
    /// <p>The time the request was in queue to be processed.</p>
    pub fn queue_time_millis(mut self, input: i64) -> Self {
        self.queue_time_millis = Some(input);
        self
    }
    /// <p>The time the request was in queue to be processed.</p>
    pub fn set_queue_time_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.queue_time_millis = input;
        self
    }
    /// <p>The number of work units generated.</p>
    pub fn work_units_generated_count(mut self, input: i64) -> Self {
        self.work_units_generated_count = Some(input);
        self
    }
    /// <p>The number of work units generated.</p>
    pub fn set_work_units_generated_count(mut self, input: std::option::Option<i64>) -> Self {
        self.work_units_generated_count = input;
        self
    }
    /// Consumes the builder and constructs a [`PlanningStatistics`](crate::types::PlanningStatistics).
    pub fn build(self) -> crate::types::PlanningStatistics {
        crate::types::PlanningStatistics {
            estimated_data_to_scan_bytes: self.estimated_data_to_scan_bytes.unwrap_or_default(),
            planning_time_millis: self.planning_time_millis.unwrap_or_default(),
            queue_time_millis: self.queue_time_millis.unwrap_or_default(),
            work_units_generated_count: self.work_units_generated_count.unwrap_or_default(),
        }
    }
}
