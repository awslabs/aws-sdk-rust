// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A new object to add to the governed table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddObjectInput {
    /// <p>The Amazon S3 location of the object.</p>
    pub uri: ::std::string::String,
    /// <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
    pub e_tag: ::std::string::String,
    /// <p>The size of the Amazon S3 object in bytes.</p>
    pub size: i64,
    /// <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
    /// <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
    pub partition_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddObjectInput {
    /// <p>The Amazon S3 location of the object.</p>
    pub fn uri(&self) -> &str {
        use std::ops::Deref;
        self.uri.deref()
    }
    /// <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
    pub fn e_tag(&self) -> &str {
        use std::ops::Deref;
        self.e_tag.deref()
    }
    /// <p>The size of the Amazon S3 object in bytes.</p>
    pub fn size(&self) -> i64 {
        self.size
    }
    /// <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
    /// <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_values.is_none()`.
    pub fn partition_values(&self) -> &[::std::string::String] {
        self.partition_values.as_deref().unwrap_or_default()
    }
}
impl AddObjectInput {
    /// Creates a new builder-style object to manufacture [`AddObjectInput`](crate::types::AddObjectInput).
    pub fn builder() -> crate::types::builders::AddObjectInputBuilder {
        crate::types::builders::AddObjectInputBuilder::default()
    }
}

/// A builder for [`AddObjectInput`](crate::types::AddObjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddObjectInputBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) partition_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddObjectInputBuilder {
    /// <p>The Amazon S3 location of the object.</p>
    /// This field is required.
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the object.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The Amazon S3 location of the object.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
    /// This field is required.
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>The size of the Amazon S3 object in bytes.</p>
    /// This field is required.
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the Amazon S3 object in bytes.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the Amazon S3 object in bytes.</p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// Appends an item to `partition_values`.
    ///
    /// To override the contents of this collection use [`set_partition_values`](Self::set_partition_values).
    ///
    /// <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
    /// <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
    pub fn partition_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.partition_values.unwrap_or_default();
        v.push(input.into());
        self.partition_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
    /// <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
    pub fn set_partition_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.partition_values = input;
        self
    }
    /// <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p>
    /// <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
    pub fn get_partition_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.partition_values
    }
    /// Consumes the builder and constructs a [`AddObjectInput`](crate::types::AddObjectInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`uri`](crate::types::builders::AddObjectInputBuilder::uri)
    /// - [`e_tag`](crate::types::builders::AddObjectInputBuilder::e_tag)
    pub fn build(self) -> ::std::result::Result<crate::types::AddObjectInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AddObjectInput {
            uri: self.uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uri",
                    "uri was not specified but it is required when building AddObjectInput",
                )
            })?,
            e_tag: self.e_tag.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "e_tag",
                    "e_tag was not specified but it is required when building AddObjectInput",
                )
            })?,
            size: self.size.unwrap_or_default(),
            partition_values: self.partition_values,
        })
    }
}
