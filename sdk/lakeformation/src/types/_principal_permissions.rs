// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Permissions granted to a principal.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrincipalPermissions {
    /// <p>The principal who is granted permissions.</p>
    #[doc(hidden)]
    pub principal: std::option::Option<crate::types::DataLakePrincipal>,
    /// <p>The permissions that are granted to the principal.</p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::vec::Vec<crate::types::Permission>>,
}
impl PrincipalPermissions {
    /// <p>The principal who is granted permissions.</p>
    pub fn principal(&self) -> std::option::Option<&crate::types::DataLakePrincipal> {
        self.principal.as_ref()
    }
    /// <p>The permissions that are granted to the principal.</p>
    pub fn permissions(&self) -> std::option::Option<&[crate::types::Permission]> {
        self.permissions.as_deref()
    }
}
impl PrincipalPermissions {
    /// Creates a new builder-style object to manufacture [`PrincipalPermissions`](crate::types::PrincipalPermissions).
    pub fn builder() -> crate::types::builders::PrincipalPermissionsBuilder {
        crate::types::builders::PrincipalPermissionsBuilder::default()
    }
}

/// A builder for [`PrincipalPermissions`](crate::types::PrincipalPermissions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrincipalPermissionsBuilder {
    pub(crate) principal: std::option::Option<crate::types::DataLakePrincipal>,
    pub(crate) permissions: std::option::Option<std::vec::Vec<crate::types::Permission>>,
}
impl PrincipalPermissionsBuilder {
    /// <p>The principal who is granted permissions.</p>
    pub fn principal(mut self, input: crate::types::DataLakePrincipal) -> Self {
        self.principal = Some(input);
        self
    }
    /// <p>The principal who is granted permissions.</p>
    pub fn set_principal(
        mut self,
        input: std::option::Option<crate::types::DataLakePrincipal>,
    ) -> Self {
        self.principal = input;
        self
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The permissions that are granted to the principal.</p>
    pub fn permissions(mut self, input: crate::types::Permission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = Some(v);
        self
    }
    /// <p>The permissions that are granted to the principal.</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    ) -> Self {
        self.permissions = input;
        self
    }
    /// Consumes the builder and constructs a [`PrincipalPermissions`](crate::types::PrincipalPermissions).
    pub fn build(self) -> crate::types::PrincipalPermissions {
        crate::types::PrincipalPermissions {
            principal: self.principal,
            permissions: self.permissions,
        }
    }
}
