// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    #[doc(hidden)]
    pub catalog: std::option::Option<crate::types::CatalogResource>,
    /// <p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>
    #[doc(hidden)]
    pub database: std::option::Option<crate::types::DatabaseResource>,
    /// <p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
    #[doc(hidden)]
    pub table: std::option::Option<crate::types::TableResource>,
    /// <p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>
    #[doc(hidden)]
    pub table_with_columns: std::option::Option<crate::types::TableWithColumnsResource>,
    /// <p>The location of an Amazon S3 path where permissions are granted or revoked. </p>
    #[doc(hidden)]
    pub data_location: std::option::Option<crate::types::DataLocationResource>,
    /// <p>A data cell filter.</p>
    #[doc(hidden)]
    pub data_cells_filter: std::option::Option<crate::types::DataCellsFilterResource>,
    /// <p>The LF-tag key and values attached to a resource.</p>
    #[doc(hidden)]
    pub lf_tag: std::option::Option<crate::types::LfTagKeyResource>,
    /// <p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>
    #[doc(hidden)]
    pub lf_tag_policy: std::option::Option<crate::types::LfTagPolicyResource>,
}
impl Resource {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog(&self) -> std::option::Option<&crate::types::CatalogResource> {
        self.catalog.as_ref()
    }
    /// <p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>
    pub fn database(&self) -> std::option::Option<&crate::types::DatabaseResource> {
        self.database.as_ref()
    }
    /// <p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
    pub fn table(&self) -> std::option::Option<&crate::types::TableResource> {
        self.table.as_ref()
    }
    /// <p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>
    pub fn table_with_columns(
        &self,
    ) -> std::option::Option<&crate::types::TableWithColumnsResource> {
        self.table_with_columns.as_ref()
    }
    /// <p>The location of an Amazon S3 path where permissions are granted or revoked. </p>
    pub fn data_location(&self) -> std::option::Option<&crate::types::DataLocationResource> {
        self.data_location.as_ref()
    }
    /// <p>A data cell filter.</p>
    pub fn data_cells_filter(&self) -> std::option::Option<&crate::types::DataCellsFilterResource> {
        self.data_cells_filter.as_ref()
    }
    /// <p>The LF-tag key and values attached to a resource.</p>
    pub fn lf_tag(&self) -> std::option::Option<&crate::types::LfTagKeyResource> {
        self.lf_tag.as_ref()
    }
    /// <p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>
    pub fn lf_tag_policy(&self) -> std::option::Option<&crate::types::LfTagPolicyResource> {
        self.lf_tag_policy.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) catalog: std::option::Option<crate::types::CatalogResource>,
    pub(crate) database: std::option::Option<crate::types::DatabaseResource>,
    pub(crate) table: std::option::Option<crate::types::TableResource>,
    pub(crate) table_with_columns: std::option::Option<crate::types::TableWithColumnsResource>,
    pub(crate) data_location: std::option::Option<crate::types::DataLocationResource>,
    pub(crate) data_cells_filter: std::option::Option<crate::types::DataCellsFilterResource>,
    pub(crate) lf_tag: std::option::Option<crate::types::LfTagKeyResource>,
    pub(crate) lf_tag_policy: std::option::Option<crate::types::LfTagPolicyResource>,
}
impl ResourceBuilder {
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn catalog(mut self, input: crate::types::CatalogResource) -> Self {
        self.catalog = Some(input);
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. </p>
    pub fn set_catalog(
        mut self,
        input: std::option::Option<crate::types::CatalogResource>,
    ) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>
    pub fn database(mut self, input: crate::types::DatabaseResource) -> Self {
        self.database = Some(input);
        self
    }
    /// <p>The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. </p>
    pub fn set_database(
        mut self,
        input: std::option::Option<crate::types::DatabaseResource>,
    ) -> Self {
        self.database = input;
        self
    }
    /// <p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
    pub fn table(mut self, input: crate::types::TableResource) -> Self {
        self.table = Some(input);
        self
    }
    /// <p>The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. </p>
    pub fn set_table(mut self, input: std::option::Option<crate::types::TableResource>) -> Self {
        self.table = input;
        self
    }
    /// <p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>
    pub fn table_with_columns(mut self, input: crate::types::TableWithColumnsResource) -> Self {
        self.table_with_columns = Some(input);
        self
    }
    /// <p>The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.</p>
    pub fn set_table_with_columns(
        mut self,
        input: std::option::Option<crate::types::TableWithColumnsResource>,
    ) -> Self {
        self.table_with_columns = input;
        self
    }
    /// <p>The location of an Amazon S3 path where permissions are granted or revoked. </p>
    pub fn data_location(mut self, input: crate::types::DataLocationResource) -> Self {
        self.data_location = Some(input);
        self
    }
    /// <p>The location of an Amazon S3 path where permissions are granted or revoked. </p>
    pub fn set_data_location(
        mut self,
        input: std::option::Option<crate::types::DataLocationResource>,
    ) -> Self {
        self.data_location = input;
        self
    }
    /// <p>A data cell filter.</p>
    pub fn data_cells_filter(mut self, input: crate::types::DataCellsFilterResource) -> Self {
        self.data_cells_filter = Some(input);
        self
    }
    /// <p>A data cell filter.</p>
    pub fn set_data_cells_filter(
        mut self,
        input: std::option::Option<crate::types::DataCellsFilterResource>,
    ) -> Self {
        self.data_cells_filter = input;
        self
    }
    /// <p>The LF-tag key and values attached to a resource.</p>
    pub fn lf_tag(mut self, input: crate::types::LfTagKeyResource) -> Self {
        self.lf_tag = Some(input);
        self
    }
    /// <p>The LF-tag key and values attached to a resource.</p>
    pub fn set_lf_tag(
        mut self,
        input: std::option::Option<crate::types::LfTagKeyResource>,
    ) -> Self {
        self.lf_tag = input;
        self
    }
    /// <p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>
    pub fn lf_tag_policy(mut self, input: crate::types::LfTagPolicyResource) -> Self {
        self.lf_tag_policy = Some(input);
        self
    }
    /// <p>A list of LF-tag conditions that define a resource's LF-tag policy.</p>
    pub fn set_lf_tag_policy(
        mut self,
        input: std::option::Option<crate::types::LfTagPolicyResource>,
    ) -> Self {
        self.lf_tag_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    pub fn build(self) -> crate::types::Resource {
        crate::types::Resource {
            catalog: self.catalog,
            database: self.database,
            table: self.table,
            table_with_columns: self.table_with_columns,
            data_location: self.data_location,
            data_cells_filter: self.data_cells_filter,
            lf_tag: self.lf_tag,
            lf_tag_policy: self.lf_tag_policy,
        }
    }
}
