// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure describing the configuration and details of a storage optimizer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StorageOptimizer {
    /// <p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>
    #[doc(hidden)]
    pub storage_optimizer_type: std::option::Option<crate::types::OptimizerType>,
    /// <p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>
    #[doc(hidden)]
    pub config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A message that contains information about any error (if present).</p>
    /// <p>When an acceleration result has an enabled status, the error message is empty.</p>
    /// <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>A message that contains information about any warnings (if present).</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::string::String>,
    /// <p>When an acceleration result has an enabled status, contains the details of the last job run.</p>
    #[doc(hidden)]
    pub last_run_details: std::option::Option<std::string::String>,
}
impl StorageOptimizer {
    /// <p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>
    pub fn storage_optimizer_type(&self) -> std::option::Option<&crate::types::OptimizerType> {
        self.storage_optimizer_type.as_ref()
    }
    /// <p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>
    pub fn config(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.config.as_ref()
    }
    /// <p>A message that contains information about any error (if present).</p>
    /// <p>When an acceleration result has an enabled status, the error message is empty.</p>
    /// <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>A message that contains information about any warnings (if present).</p>
    pub fn warnings(&self) -> std::option::Option<&str> {
        self.warnings.as_deref()
    }
    /// <p>When an acceleration result has an enabled status, contains the details of the last job run.</p>
    pub fn last_run_details(&self) -> std::option::Option<&str> {
        self.last_run_details.as_deref()
    }
}
impl StorageOptimizer {
    /// Creates a new builder-style object to manufacture [`StorageOptimizer`](crate::types::StorageOptimizer).
    pub fn builder() -> crate::types::builders::StorageOptimizerBuilder {
        crate::types::builders::StorageOptimizerBuilder::default()
    }
}

/// A builder for [`StorageOptimizer`](crate::types::StorageOptimizer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StorageOptimizerBuilder {
    pub(crate) storage_optimizer_type: std::option::Option<crate::types::OptimizerType>,
    pub(crate) config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) warnings: std::option::Option<std::string::String>,
    pub(crate) last_run_details: std::option::Option<std::string::String>,
}
impl StorageOptimizerBuilder {
    /// <p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>
    pub fn storage_optimizer_type(mut self, input: crate::types::OptimizerType) -> Self {
        self.storage_optimizer_type = Some(input);
        self
    }
    /// <p>The specific type of storage optimizer. The supported value is <code>compaction</code>.</p>
    pub fn set_storage_optimizer_type(
        mut self,
        input: std::option::Option<crate::types::OptimizerType>,
    ) -> Self {
        self.storage_optimizer_type = input;
        self
    }
    /// Adds a key-value pair to `config`.
    ///
    /// To override the contents of this collection use [`set_config`](Self::set_config).
    ///
    /// <p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>
    pub fn config(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.config.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.config = Some(hash_map);
        self
    }
    /// <p>A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration.</p>
    pub fn set_config(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.config = input;
        self
    }
    /// <p>A message that contains information about any error (if present).</p>
    /// <p>When an acceleration result has an enabled status, the error message is empty.</p>
    /// <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>A message that contains information about any error (if present).</p>
    /// <p>When an acceleration result has an enabled status, the error message is empty.</p>
    /// <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>A message that contains information about any warnings (if present).</p>
    pub fn warnings(mut self, input: impl Into<std::string::String>) -> Self {
        self.warnings = Some(input.into());
        self
    }
    /// <p>A message that contains information about any warnings (if present).</p>
    pub fn set_warnings(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.warnings = input;
        self
    }
    /// <p>When an acceleration result has an enabled status, contains the details of the last job run.</p>
    pub fn last_run_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_run_details = Some(input.into());
        self
    }
    /// <p>When an acceleration result has an enabled status, contains the details of the last job run.</p>
    pub fn set_last_run_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_run_details = input;
        self
    }
    /// Consumes the builder and constructs a [`StorageOptimizer`](crate::types::StorageOptimizer).
    pub fn build(self) -> crate::types::StorageOptimizer {
        crate::types::StorageOptimizer {
            storage_optimizer_type: self.storage_optimizer_type,
            config: self.config,
            error_message: self.error_message,
            warnings: self.warnings,
            last_run_details: self.last_run_details,
        }
    }
}
