// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A permission to a resource granted by batch operation to the principal.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPermissionsRequestEntry {
    /// <p>A unique identifier for the batch permissions request entry.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The principal to be granted a permission.</p>
    #[doc(hidden)]
    pub principal: std::option::Option<crate::types::DataLakePrincipal>,
    /// <p>The resource to which the principal is to be granted a permission.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<crate::types::Resource>,
    /// <p>The permissions to be granted.</p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    /// <p>Indicates if the option to pass permissions is granted.</p>
    #[doc(hidden)]
    pub permissions_with_grant_option: std::option::Option<std::vec::Vec<crate::types::Permission>>,
}
impl BatchPermissionsRequestEntry {
    /// <p>A unique identifier for the batch permissions request entry.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The principal to be granted a permission.</p>
    pub fn principal(&self) -> std::option::Option<&crate::types::DataLakePrincipal> {
        self.principal.as_ref()
    }
    /// <p>The resource to which the principal is to be granted a permission.</p>
    pub fn resource(&self) -> std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The permissions to be granted.</p>
    pub fn permissions(&self) -> std::option::Option<&[crate::types::Permission]> {
        self.permissions.as_deref()
    }
    /// <p>Indicates if the option to pass permissions is granted.</p>
    pub fn permissions_with_grant_option(
        &self,
    ) -> std::option::Option<&[crate::types::Permission]> {
        self.permissions_with_grant_option.as_deref()
    }
}
impl BatchPermissionsRequestEntry {
    /// Creates a new builder-style object to manufacture [`BatchPermissionsRequestEntry`](crate::types::BatchPermissionsRequestEntry).
    pub fn builder() -> crate::types::builders::BatchPermissionsRequestEntryBuilder {
        crate::types::builders::BatchPermissionsRequestEntryBuilder::default()
    }
}

/// A builder for [`BatchPermissionsRequestEntry`](crate::types::BatchPermissionsRequestEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchPermissionsRequestEntryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) principal: std::option::Option<crate::types::DataLakePrincipal>,
    pub(crate) resource: std::option::Option<crate::types::Resource>,
    pub(crate) permissions: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    pub(crate) permissions_with_grant_option:
        std::option::Option<std::vec::Vec<crate::types::Permission>>,
}
impl BatchPermissionsRequestEntryBuilder {
    /// <p>A unique identifier for the batch permissions request entry.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the batch permissions request entry.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The principal to be granted a permission.</p>
    pub fn principal(mut self, input: crate::types::DataLakePrincipal) -> Self {
        self.principal = Some(input);
        self
    }
    /// <p>The principal to be granted a permission.</p>
    pub fn set_principal(
        mut self,
        input: std::option::Option<crate::types::DataLakePrincipal>,
    ) -> Self {
        self.principal = input;
        self
    }
    /// <p>The resource to which the principal is to be granted a permission.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = Some(input);
        self
    }
    /// <p>The resource to which the principal is to be granted a permission.</p>
    pub fn set_resource(mut self, input: std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The permissions to be granted.</p>
    pub fn permissions(mut self, input: crate::types::Permission) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = Some(v);
        self
    }
    /// <p>The permissions to be granted.</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    ) -> Self {
        self.permissions = input;
        self
    }
    /// Appends an item to `permissions_with_grant_option`.
    ///
    /// To override the contents of this collection use [`set_permissions_with_grant_option`](Self::set_permissions_with_grant_option).
    ///
    /// <p>Indicates if the option to pass permissions is granted.</p>
    pub fn permissions_with_grant_option(mut self, input: crate::types::Permission) -> Self {
        let mut v = self.permissions_with_grant_option.unwrap_or_default();
        v.push(input);
        self.permissions_with_grant_option = Some(v);
        self
    }
    /// <p>Indicates if the option to pass permissions is granted.</p>
    pub fn set_permissions_with_grant_option(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Permission>>,
    ) -> Self {
        self.permissions_with_grant_option = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchPermissionsRequestEntry`](crate::types::BatchPermissionsRequestEntry).
    pub fn build(self) -> crate::types::BatchPermissionsRequestEntry {
        crate::types::BatchPermissionsRequestEntry {
            id: self.id,
            principal: self.principal,
            resource: self.resource,
            permissions: self.permissions,
            permissions_with_grant_option: self.permissions_with_grant_option,
        }
    }
}
