// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing an error related to a <code>TagResource</code> or <code>UnTagResource</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LfTagError {
    /// <p>The key-name of the LF-tag.</p>
    #[doc(hidden)]
    pub lf_tag: std::option::Option<crate::types::LfTagPair>,
    /// <p>An error that occurred with the attachment or detachment of the LF-tag.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::ErrorDetail>,
}
impl LfTagError {
    /// <p>The key-name of the LF-tag.</p>
    pub fn lf_tag(&self) -> std::option::Option<&crate::types::LfTagPair> {
        self.lf_tag.as_ref()
    }
    /// <p>An error that occurred with the attachment or detachment of the LF-tag.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
}
impl LfTagError {
    /// Creates a new builder-style object to manufacture [`LfTagError`](crate::types::LfTagError).
    pub fn builder() -> crate::types::builders::LfTagErrorBuilder {
        crate::types::builders::LfTagErrorBuilder::default()
    }
}

/// A builder for [`LfTagError`](crate::types::LfTagError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LfTagErrorBuilder {
    pub(crate) lf_tag: std::option::Option<crate::types::LfTagPair>,
    pub(crate) error: std::option::Option<crate::types::ErrorDetail>,
}
impl LfTagErrorBuilder {
    /// <p>The key-name of the LF-tag.</p>
    pub fn lf_tag(mut self, input: crate::types::LfTagPair) -> Self {
        self.lf_tag = Some(input);
        self
    }
    /// <p>The key-name of the LF-tag.</p>
    pub fn set_lf_tag(mut self, input: std::option::Option<crate::types::LfTagPair>) -> Self {
        self.lf_tag = input;
        self
    }
    /// <p>An error that occurred with the attachment or detachment of the LF-tag.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>An error that occurred with the attachment or detachment of the LF-tag.</p>
    pub fn set_error(mut self, input: std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`LfTagError`](crate::types::LfTagError).
    pub fn build(self) -> crate::types::LfTagError {
        crate::types::LfTagError {
            lf_tag: self.lf_tag,
            error: self.error,
        }
    }
}
