// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing the name of a column resource and the LF-tags attached to it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnLfTag {
    /// <p>The name of a column resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The LF-tags attached to a column resource.</p>
    #[doc(hidden)]
    pub lf_tags: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
}
impl ColumnLfTag {
    /// <p>The name of a column resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The LF-tags attached to a column resource.</p>
    pub fn lf_tags(&self) -> std::option::Option<&[crate::types::LfTagPair]> {
        self.lf_tags.as_deref()
    }
}
impl ColumnLfTag {
    /// Creates a new builder-style object to manufacture [`ColumnLfTag`](crate::types::ColumnLfTag).
    pub fn builder() -> crate::types::builders::ColumnLfTagBuilder {
        crate::types::builders::ColumnLfTagBuilder::default()
    }
}

/// A builder for [`ColumnLfTag`](crate::types::ColumnLfTag).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnLfTagBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) lf_tags: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
}
impl ColumnLfTagBuilder {
    /// <p>The name of a column resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a column resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `lf_tags`.
    ///
    /// To override the contents of this collection use [`set_lf_tags`](Self::set_lf_tags).
    ///
    /// <p>The LF-tags attached to a column resource.</p>
    pub fn lf_tags(mut self, input: crate::types::LfTagPair) -> Self {
        let mut v = self.lf_tags.unwrap_or_default();
        v.push(input);
        self.lf_tags = Some(v);
        self
    }
    /// <p>The LF-tags attached to a column resource.</p>
    pub fn set_lf_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LfTagPair>>,
    ) -> Self {
        self.lf_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnLfTag`](crate::types::ColumnLfTag).
    pub fn build(self) -> crate::types::ColumnLfTag {
        crate::types::ColumnLfTag {
            name: self.name,
            lf_tags: self.lf_tags,
        }
    }
}
