// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines an Amazon S3 object to be deleted if a transaction cancels, provided that <code>VirtualPut</code> was called before writing the object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VirtualObject {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub uri: ::std::string::String,
    /// <p>The ETag of the Amazon S3 object.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
}
impl VirtualObject {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn uri(&self) -> &str {
        use std::ops::Deref;
        self.uri.deref()
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl VirtualObject {
    /// Creates a new builder-style object to manufacture [`VirtualObject`](crate::types::VirtualObject).
    pub fn builder() -> crate::types::builders::VirtualObjectBuilder {
        crate::types::builders::VirtualObjectBuilder::default()
    }
}

/// A builder for [`VirtualObject`](crate::types::VirtualObject).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VirtualObjectBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
}
impl VirtualObjectBuilder {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    /// This field is required.
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// Consumes the builder and constructs a [`VirtualObject`](crate::types::VirtualObject).
    /// This method will fail if any of the following fields are not set:
    /// - [`uri`](crate::types::builders::VirtualObjectBuilder::uri)
    pub fn build(self) -> ::std::result::Result<crate::types::VirtualObject, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VirtualObject {
            uri: self.uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uri",
                    "uri was not specified but it is required when building VirtualObject",
                )
            })?,
            e_tag: self.e_tag,
        })
    }
}
