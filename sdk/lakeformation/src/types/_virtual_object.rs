// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines an Amazon S3 object to be deleted if a transaction cancels, provided that <code>VirtualPut</code> was called before writing the object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VirtualObject {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    #[doc(hidden)]
    pub uri: std::option::Option<std::string::String>,
    /// <p>The ETag of the Amazon S3 object.</p>
    #[doc(hidden)]
    pub e_tag: std::option::Option<std::string::String>,
}
impl VirtualObject {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn uri(&self) -> std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn e_tag(&self) -> std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl VirtualObject {
    /// Creates a new builder-style object to manufacture [`VirtualObject`](crate::types::VirtualObject).
    pub fn builder() -> crate::types::builders::VirtualObjectBuilder {
        crate::types::builders::VirtualObjectBuilder::default()
    }
}

/// A builder for [`VirtualObject`](crate::types::VirtualObject).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VirtualObjectBuilder {
    pub(crate) uri: std::option::Option<std::string::String>,
    pub(crate) e_tag: std::option::Option<std::string::String>,
}
impl VirtualObjectBuilder {
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.uri = Some(input.into());
        self
    }
    /// <p>The path to the Amazon S3 object. Must start with s3://</p>
    pub fn set_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn e_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.e_tag = Some(input.into());
        self
    }
    /// <p>The ETag of the Amazon S3 object.</p>
    pub fn set_e_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// Consumes the builder and constructs a [`VirtualObject`](crate::types::VirtualObject).
    pub fn build(self) -> crate::types::VirtualObject {
        crate::types::VirtualObject {
            uri: self.uri,
            e_tag: self.e_tag,
        }
    }
}
