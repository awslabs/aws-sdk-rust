// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure describing a database resource with LF-tags.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaggedDatabase {
    /// <p>A database that has LF-tags attached to it.</p>
    pub database: ::std::option::Option<crate::types::DatabaseResource>,
    /// <p>A list of LF-tags attached to the database.</p>
    pub lf_tags: ::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>>,
}
impl TaggedDatabase {
    /// <p>A database that has LF-tags attached to it.</p>
    pub fn database(&self) -> ::std::option::Option<&crate::types::DatabaseResource> {
        self.database.as_ref()
    }
    /// <p>A list of LF-tags attached to the database.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.lf_tags.is_none()`.
    pub fn lf_tags(&self) -> &[crate::types::LfTagPair] {
        self.lf_tags.as_deref().unwrap_or_default()
    }
}
impl TaggedDatabase {
    /// Creates a new builder-style object to manufacture [`TaggedDatabase`](crate::types::TaggedDatabase).
    pub fn builder() -> crate::types::builders::TaggedDatabaseBuilder {
        crate::types::builders::TaggedDatabaseBuilder::default()
    }
}

/// A builder for [`TaggedDatabase`](crate::types::TaggedDatabase).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TaggedDatabaseBuilder {
    pub(crate) database: ::std::option::Option<crate::types::DatabaseResource>,
    pub(crate) lf_tags: ::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>>,
}
impl TaggedDatabaseBuilder {
    /// <p>A database that has LF-tags attached to it.</p>
    pub fn database(mut self, input: crate::types::DatabaseResource) -> Self {
        self.database = ::std::option::Option::Some(input);
        self
    }
    /// <p>A database that has LF-tags attached to it.</p>
    pub fn set_database(mut self, input: ::std::option::Option<crate::types::DatabaseResource>) -> Self {
        self.database = input;
        self
    }
    /// <p>A database that has LF-tags attached to it.</p>
    pub fn get_database(&self) -> &::std::option::Option<crate::types::DatabaseResource> {
        &self.database
    }
    /// Appends an item to `lf_tags`.
    ///
    /// To override the contents of this collection use [`set_lf_tags`](Self::set_lf_tags).
    ///
    /// <p>A list of LF-tags attached to the database.</p>
    pub fn lf_tags(mut self, input: crate::types::LfTagPair) -> Self {
        let mut v = self.lf_tags.unwrap_or_default();
        v.push(input);
        self.lf_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of LF-tags attached to the database.</p>
    pub fn set_lf_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>>) -> Self {
        self.lf_tags = input;
        self
    }
    /// <p>A list of LF-tags attached to the database.</p>
    pub fn get_lf_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LfTagPair>> {
        &self.lf_tags
    }
    /// Consumes the builder and constructs a [`TaggedDatabase`](crate::types::TaggedDatabase).
    pub fn build(self) -> crate::types::TaggedDatabase {
        crate::types::TaggedDatabase {
            database: self.database,
            lf_tags: self.lf_tags,
        }
    }
}
