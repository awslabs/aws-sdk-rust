// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataLakeSettings {
    /// <p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>
    #[doc(hidden)]
    pub data_lake_admins: std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    /// <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    #[doc(hidden)]
    pub create_database_default_permissions:
        std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    /// <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    #[doc(hidden)]
    pub create_table_default_permissions:
        std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    /// <p>A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p>
    /// <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
    #[doc(hidden)]
    pub trusted_resource_owners: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p>
    /// <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
    #[doc(hidden)]
    pub allow_external_data_filtering: std::option::Option<bool>,
    /// <p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;</p>
    #[doc(hidden)]
    pub external_data_filtering_allow_list:
        std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    /// <p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>
    #[doc(hidden)]
    pub authorized_session_tag_value_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DataLakeSettings {
    /// <p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>
    pub fn data_lake_admins(&self) -> std::option::Option<&[crate::types::DataLakePrincipal]> {
        self.data_lake_admins.as_deref()
    }
    /// <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn create_database_default_permissions(
        &self,
    ) -> std::option::Option<&[crate::types::PrincipalPermissions]> {
        self.create_database_default_permissions.as_deref()
    }
    /// <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn create_table_default_permissions(
        &self,
    ) -> std::option::Option<&[crate::types::PrincipalPermissions]> {
        self.create_table_default_permissions.as_deref()
    }
    /// <p>A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
    /// <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p>
    /// <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
    pub fn trusted_resource_owners(&self) -> std::option::Option<&[std::string::String]> {
        self.trusted_resource_owners.as_deref()
    }
    /// <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p>
    /// <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
    pub fn allow_external_data_filtering(&self) -> std::option::Option<bool> {
        self.allow_external_data_filtering
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;</p>
    pub fn external_data_filtering_allow_list(
        &self,
    ) -> std::option::Option<&[crate::types::DataLakePrincipal]> {
        self.external_data_filtering_allow_list.as_deref()
    }
    /// <p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>
    pub fn authorized_session_tag_value_list(&self) -> std::option::Option<&[std::string::String]> {
        self.authorized_session_tag_value_list.as_deref()
    }
}
impl DataLakeSettings {
    /// Creates a new builder-style object to manufacture [`DataLakeSettings`](crate::types::DataLakeSettings).
    pub fn builder() -> crate::types::builders::DataLakeSettingsBuilder {
        crate::types::builders::DataLakeSettingsBuilder::default()
    }
}

/// A builder for [`DataLakeSettings`](crate::types::DataLakeSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataLakeSettingsBuilder {
    pub(crate) data_lake_admins:
        std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    pub(crate) create_database_default_permissions:
        std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    pub(crate) create_table_default_permissions:
        std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) trusted_resource_owners: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) allow_external_data_filtering: std::option::Option<bool>,
    pub(crate) external_data_filtering_allow_list:
        std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    pub(crate) authorized_session_tag_value_list:
        std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DataLakeSettingsBuilder {
    /// Appends an item to `data_lake_admins`.
    ///
    /// To override the contents of this collection use [`set_data_lake_admins`](Self::set_data_lake_admins).
    ///
    /// <p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>
    pub fn data_lake_admins(mut self, input: crate::types::DataLakePrincipal) -> Self {
        let mut v = self.data_lake_admins.unwrap_or_default();
        v.push(input);
        self.data_lake_admins = Some(v);
        self
    }
    /// <p>A list of Lake Formation principals. Supported principals are IAM users or IAM roles.</p>
    pub fn set_data_lake_admins(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    ) -> Self {
        self.data_lake_admins = input;
        self
    }
    /// Appends an item to `create_database_default_permissions`.
    ///
    /// To override the contents of this collection use [`set_create_database_default_permissions`](Self::set_create_database_default_permissions).
    ///
    /// <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn create_database_default_permissions(
        mut self,
        input: crate::types::PrincipalPermissions,
    ) -> Self {
        let mut v = self.create_database_default_permissions.unwrap_or_default();
        v.push(input);
        self.create_database_default_permissions = Some(v);
        self
    }
    /// <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn set_create_database_default_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    ) -> Self {
        self.create_database_default_permissions = input;
        self
    }
    /// Appends an item to `create_table_default_permissions`.
    ///
    /// To override the contents of this collection use [`set_create_table_default_permissions`](Self::set_create_table_default_permissions).
    ///
    /// <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn create_table_default_permissions(
        mut self,
        input: crate::types::PrincipalPermissions,
    ) -> Self {
        let mut v = self.create_table_default_permissions.unwrap_or_default();
        v.push(input);
        self.create_table_default_permissions = Some(v);
        self
    }
    /// <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p>
    /// <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p>
    /// <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
    pub fn set_create_table_default_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PrincipalPermissions>>,
    ) -> Self {
        self.create_table_default_permissions = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Appends an item to `trusted_resource_owners`.
    ///
    /// To override the contents of this collection use [`set_trusted_resource_owners`](Self::set_trusted_resource_owners).
    ///
    /// <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p>
    /// <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
    pub fn trusted_resource_owners(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.trusted_resource_owners.unwrap_or_default();
        v.push(input.into());
        self.trusted_resource_owners = Some(v);
        self
    }
    /// <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p>
    /// <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
    pub fn set_trusted_resource_owners(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.trusted_resource_owners = input;
        self
    }
    /// <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p>
    /// <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
    pub fn allow_external_data_filtering(mut self, input: bool) -> Self {
        self.allow_external_data_filtering = Some(input);
        self
    }
    /// <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p>
    /// <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p>
    /// <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
    pub fn set_allow_external_data_filtering(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_external_data_filtering = input;
        self
    }
    /// Appends an item to `external_data_filtering_allow_list`.
    ///
    /// To override the contents of this collection use [`set_external_data_filtering_allow_list`](Self::set_external_data_filtering_allow_list).
    ///
    /// <p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;</p>
    pub fn external_data_filtering_allow_list(
        mut self,
        input: crate::types::DataLakePrincipal,
    ) -> Self {
        let mut v = self.external_data_filtering_allow_list.unwrap_or_default();
        v.push(input);
        self.external_data_filtering_allow_list = Some(v);
        self
    }
    /// <p>A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;</p>
    pub fn set_external_data_filtering_allow_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataLakePrincipal>>,
    ) -> Self {
        self.external_data_filtering_allow_list = input;
        self
    }
    /// Appends an item to `authorized_session_tag_value_list`.
    ///
    /// To override the contents of this collection use [`set_authorized_session_tag_value_list`](Self::set_authorized_session_tag_value_list).
    ///
    /// <p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>
    pub fn authorized_session_tag_value_list(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.authorized_session_tag_value_list.unwrap_or_default();
        v.push(input.into());
        self.authorized_session_tag_value_list = Some(v);
        self
    }
    /// <p>Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.</p>
    pub fn set_authorized_session_tag_value_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.authorized_session_tag_value_list = input;
        self
    }
    /// Consumes the builder and constructs a [`DataLakeSettings`](crate::types::DataLakeSettings).
    pub fn build(self) -> crate::types::DataLakeSettings {
        crate::types::DataLakeSettings {
            data_lake_admins: self.data_lake_admins,
            create_database_default_permissions: self.create_database_default_permissions,
            create_table_default_permissions: self.create_table_default_permissions,
            parameters: self.parameters,
            trusted_resource_owners: self.trusted_resource_owners,
            allow_external_data_filtering: self.allow_external_data_filtering,
            external_data_filtering_allow_list: self.external_data_filtering_allow_list,
            authorized_session_tag_value_list: self.authorized_session_tag_value_list,
        }
    }
}
