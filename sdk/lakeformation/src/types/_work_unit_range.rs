// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the valid range of work unit IDs for querying the execution service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkUnitRange {
    /// <p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>
    #[doc(hidden)]
    pub work_unit_id_max: i64,
    /// <p>Defines the minimum work unit ID in the range.</p>
    #[doc(hidden)]
    pub work_unit_id_min: i64,
    /// <p>A work token used to query the execution service.</p>
    #[doc(hidden)]
    pub work_unit_token: std::option::Option<std::string::String>,
}
impl WorkUnitRange {
    /// <p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>
    pub fn work_unit_id_max(&self) -> i64 {
        self.work_unit_id_max
    }
    /// <p>Defines the minimum work unit ID in the range.</p>
    pub fn work_unit_id_min(&self) -> i64 {
        self.work_unit_id_min
    }
    /// <p>A work token used to query the execution service.</p>
    pub fn work_unit_token(&self) -> std::option::Option<&str> {
        self.work_unit_token.as_deref()
    }
}
impl WorkUnitRange {
    /// Creates a new builder-style object to manufacture [`WorkUnitRange`](crate::types::WorkUnitRange).
    pub fn builder() -> crate::types::builders::WorkUnitRangeBuilder {
        crate::types::builders::WorkUnitRangeBuilder::default()
    }
}

/// A builder for [`WorkUnitRange`](crate::types::WorkUnitRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkUnitRangeBuilder {
    pub(crate) work_unit_id_max: std::option::Option<i64>,
    pub(crate) work_unit_id_min: std::option::Option<i64>,
    pub(crate) work_unit_token: std::option::Option<std::string::String>,
}
impl WorkUnitRangeBuilder {
    /// <p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>
    pub fn work_unit_id_max(mut self, input: i64) -> Self {
        self.work_unit_id_max = Some(input);
        self
    }
    /// <p>Defines the maximum work unit ID in the range. The maximum value is inclusive.</p>
    pub fn set_work_unit_id_max(mut self, input: std::option::Option<i64>) -> Self {
        self.work_unit_id_max = input;
        self
    }
    /// <p>Defines the minimum work unit ID in the range.</p>
    pub fn work_unit_id_min(mut self, input: i64) -> Self {
        self.work_unit_id_min = Some(input);
        self
    }
    /// <p>Defines the minimum work unit ID in the range.</p>
    pub fn set_work_unit_id_min(mut self, input: std::option::Option<i64>) -> Self {
        self.work_unit_id_min = input;
        self
    }
    /// <p>A work token used to query the execution service.</p>
    pub fn work_unit_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.work_unit_token = Some(input.into());
        self
    }
    /// <p>A work token used to query the execution service.</p>
    pub fn set_work_unit_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.work_unit_token = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkUnitRange`](crate::types::WorkUnitRange).
    pub fn build(self) -> crate::types::WorkUnitRange {
        crate::types::WorkUnitRange {
            work_unit_id_max: self.work_unit_id_max.unwrap_or_default(),
            work_unit_id_min: self.work_unit_id_min.unwrap_or_default(),
            work_unit_token: self.work_unit_token,
        }
    }
}
