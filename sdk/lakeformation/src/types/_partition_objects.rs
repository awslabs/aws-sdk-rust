// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing a list of partition values and table objects.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PartitionObjects {
    /// <p>A list of partition values.</p>
    #[doc(hidden)]
    pub partition_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of table objects</p>
    #[doc(hidden)]
    pub objects: std::option::Option<std::vec::Vec<crate::types::TableObject>>,
}
impl PartitionObjects {
    /// <p>A list of partition values.</p>
    pub fn partition_values(&self) -> std::option::Option<&[std::string::String]> {
        self.partition_values.as_deref()
    }
    /// <p>A list of table objects</p>
    pub fn objects(&self) -> std::option::Option<&[crate::types::TableObject]> {
        self.objects.as_deref()
    }
}
impl PartitionObjects {
    /// Creates a new builder-style object to manufacture [`PartitionObjects`](crate::types::PartitionObjects).
    pub fn builder() -> crate::types::builders::PartitionObjectsBuilder {
        crate::types::builders::PartitionObjectsBuilder::default()
    }
}

/// A builder for [`PartitionObjects`](crate::types::PartitionObjects).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PartitionObjectsBuilder {
    pub(crate) partition_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) objects: std::option::Option<std::vec::Vec<crate::types::TableObject>>,
}
impl PartitionObjectsBuilder {
    /// Appends an item to `partition_values`.
    ///
    /// To override the contents of this collection use [`set_partition_values`](Self::set_partition_values).
    ///
    /// <p>A list of partition values.</p>
    pub fn partition_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.partition_values.unwrap_or_default();
        v.push(input.into());
        self.partition_values = Some(v);
        self
    }
    /// <p>A list of partition values.</p>
    pub fn set_partition_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.partition_values = input;
        self
    }
    /// Appends an item to `objects`.
    ///
    /// To override the contents of this collection use [`set_objects`](Self::set_objects).
    ///
    /// <p>A list of table objects</p>
    pub fn objects(mut self, input: crate::types::TableObject) -> Self {
        let mut v = self.objects.unwrap_or_default();
        v.push(input);
        self.objects = Some(v);
        self
    }
    /// <p>A list of table objects</p>
    pub fn set_objects(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TableObject>>,
    ) -> Self {
        self.objects = input;
        self
    }
    /// Consumes the builder and constructs a [`PartitionObjects`](crate::types::PartitionObjects).
    pub fn build(self) -> crate::types::PartitionObjects {
        crate::types::PartitionObjects {
            partition_values: self.partition_values,
            objects: self.objects,
        }
    }
}
