// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties (metadata) of a column. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnMetadata {
    /// <p>A value that indicates whether the column is case-sensitive. </p>
    #[doc(hidden)]
    pub is_case_sensitive: bool,
    /// <p>A value that indicates whether the column contains currency values.</p>
    #[doc(hidden)]
    pub is_currency: bool,
    /// <p>A value that indicates whether an integer column is signed.</p>
    #[doc(hidden)]
    pub is_signed: bool,
    /// <p>The label for the column. </p>
    #[doc(hidden)]
    pub label: std::option::Option<std::string::String>,
    /// <p>The name of the column. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the column is nullable. </p>
    #[doc(hidden)]
    pub nullable: i32,
    /// <p>The precision value of a decimal number column. </p>
    #[doc(hidden)]
    pub precision: i32,
    /// <p>The scale value of a decimal number column. </p>
    #[doc(hidden)]
    pub scale: i32,
    /// <p>The name of the schema that contains the table that includes the column.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>The name of the table that includes the column. </p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The database-specific data type of the column. </p>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
    /// <p>The length of the column.</p>
    #[doc(hidden)]
    pub length: i32,
    /// <p>The default value of the column. </p>
    #[doc(hidden)]
    pub column_default: std::option::Option<std::string::String>,
}
impl ColumnMetadata {
    /// <p>A value that indicates whether the column is case-sensitive. </p>
    pub fn is_case_sensitive(&self) -> bool {
        self.is_case_sensitive
    }
    /// <p>A value that indicates whether the column contains currency values.</p>
    pub fn is_currency(&self) -> bool {
        self.is_currency
    }
    /// <p>A value that indicates whether an integer column is signed.</p>
    pub fn is_signed(&self) -> bool {
        self.is_signed
    }
    /// <p>The label for the column. </p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The name of the column. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A value that indicates whether the column is nullable. </p>
    pub fn nullable(&self) -> i32 {
        self.nullable
    }
    /// <p>The precision value of a decimal number column. </p>
    pub fn precision(&self) -> i32 {
        self.precision
    }
    /// <p>The scale value of a decimal number column. </p>
    pub fn scale(&self) -> i32 {
        self.scale
    }
    /// <p>The name of the schema that contains the table that includes the column.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The name of the table that includes the column. </p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The database-specific data type of the column. </p>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The length of the column.</p>
    pub fn length(&self) -> i32 {
        self.length
    }
    /// <p>The default value of the column. </p>
    pub fn column_default(&self) -> std::option::Option<&str> {
        self.column_default.as_deref()
    }
}
impl ColumnMetadata {
    /// Creates a new builder-style object to manufacture [`ColumnMetadata`](crate::types::ColumnMetadata).
    pub fn builder() -> crate::types::builders::ColumnMetadataBuilder {
        crate::types::builders::ColumnMetadataBuilder::default()
    }
}

/// A builder for [`ColumnMetadata`](crate::types::ColumnMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnMetadataBuilder {
    pub(crate) is_case_sensitive: std::option::Option<bool>,
    pub(crate) is_currency: std::option::Option<bool>,
    pub(crate) is_signed: std::option::Option<bool>,
    pub(crate) label: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) nullable: std::option::Option<i32>,
    pub(crate) precision: std::option::Option<i32>,
    pub(crate) scale: std::option::Option<i32>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) type_name: std::option::Option<std::string::String>,
    pub(crate) length: std::option::Option<i32>,
    pub(crate) column_default: std::option::Option<std::string::String>,
}
impl ColumnMetadataBuilder {
    /// <p>A value that indicates whether the column is case-sensitive. </p>
    pub fn is_case_sensitive(mut self, input: bool) -> Self {
        self.is_case_sensitive = Some(input);
        self
    }
    /// <p>A value that indicates whether the column is case-sensitive. </p>
    pub fn set_is_case_sensitive(mut self, input: std::option::Option<bool>) -> Self {
        self.is_case_sensitive = input;
        self
    }
    /// <p>A value that indicates whether the column contains currency values.</p>
    pub fn is_currency(mut self, input: bool) -> Self {
        self.is_currency = Some(input);
        self
    }
    /// <p>A value that indicates whether the column contains currency values.</p>
    pub fn set_is_currency(mut self, input: std::option::Option<bool>) -> Self {
        self.is_currency = input;
        self
    }
    /// <p>A value that indicates whether an integer column is signed.</p>
    pub fn is_signed(mut self, input: bool) -> Self {
        self.is_signed = Some(input);
        self
    }
    /// <p>A value that indicates whether an integer column is signed.</p>
    pub fn set_is_signed(mut self, input: std::option::Option<bool>) -> Self {
        self.is_signed = input;
        self
    }
    /// <p>The label for the column. </p>
    pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
        self.label = Some(input.into());
        self
    }
    /// <p>The label for the column. </p>
    pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p>The name of the column. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the column. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A value that indicates whether the column is nullable. </p>
    pub fn nullable(mut self, input: i32) -> Self {
        self.nullable = Some(input);
        self
    }
    /// <p>A value that indicates whether the column is nullable. </p>
    pub fn set_nullable(mut self, input: std::option::Option<i32>) -> Self {
        self.nullable = input;
        self
    }
    /// <p>The precision value of a decimal number column. </p>
    pub fn precision(mut self, input: i32) -> Self {
        self.precision = Some(input);
        self
    }
    /// <p>The precision value of a decimal number column. </p>
    pub fn set_precision(mut self, input: std::option::Option<i32>) -> Self {
        self.precision = input;
        self
    }
    /// <p>The scale value of a decimal number column. </p>
    pub fn scale(mut self, input: i32) -> Self {
        self.scale = Some(input);
        self
    }
    /// <p>The scale value of a decimal number column. </p>
    pub fn set_scale(mut self, input: std::option::Option<i32>) -> Self {
        self.scale = input;
        self
    }
    /// <p>The name of the schema that contains the table that includes the column.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema that contains the table that includes the column.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the table that includes the column. </p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table that includes the column. </p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The database-specific data type of the column. </p>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>The database-specific data type of the column. </p>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The length of the column.</p>
    pub fn length(mut self, input: i32) -> Self {
        self.length = Some(input);
        self
    }
    /// <p>The length of the column.</p>
    pub fn set_length(mut self, input: std::option::Option<i32>) -> Self {
        self.length = input;
        self
    }
    /// <p>The default value of the column. </p>
    pub fn column_default(mut self, input: impl Into<std::string::String>) -> Self {
        self.column_default = Some(input.into());
        self
    }
    /// <p>The default value of the column. </p>
    pub fn set_column_default(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.column_default = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnMetadata`](crate::types::ColumnMetadata).
    pub fn build(self) -> crate::types::ColumnMetadata {
        crate::types::ColumnMetadata {
            is_case_sensitive: self.is_case_sensitive.unwrap_or_default(),
            is_currency: self.is_currency.unwrap_or_default(),
            is_signed: self.is_signed.unwrap_or_default(),
            label: self.label,
            name: self.name,
            nullable: self.nullable.unwrap_or_default(),
            precision: self.precision.unwrap_or_default(),
            scale: self.scale.unwrap_or_default(),
            schema_name: self.schema_name,
            table_name: self.table_name,
            type_name: self.type_name,
            length: self.length.unwrap_or_default(),
            column_default: self.column_default,
        }
    }
}
