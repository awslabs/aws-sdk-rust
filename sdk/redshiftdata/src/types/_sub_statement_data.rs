// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an SQL statement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubStatementData {
    /// <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The amount of time in nanoseconds that the statement ran.</p>
    #[doc(hidden)]
    pub duration: i64,
    /// <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StatementStatusString>,
    /// <p>The date and time (UTC) the statement was created. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The SQL statement text.</p>
    #[doc(hidden)]
    pub query_string: std::option::Option<std::string::String>,
    /// <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    #[doc(hidden)]
    pub result_rows: i64,
    /// <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    #[doc(hidden)]
    pub result_size: i64,
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    #[doc(hidden)]
    pub redshift_query_id: i64,
    /// <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
    #[doc(hidden)]
    pub has_result_set: std::option::Option<bool>,
}
impl SubStatementData {
    /// <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The amount of time in nanoseconds that the statement ran.</p>
    pub fn duration(&self) -> i64 {
        self.duration
    }
    /// <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::StatementStatusString> {
        self.status.as_ref()
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The SQL statement text.</p>
    pub fn query_string(&self) -> std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    pub fn result_rows(&self) -> i64 {
        self.result_rows
    }
    /// <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    pub fn result_size(&self) -> i64 {
        self.result_size
    }
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn redshift_query_id(&self) -> i64 {
        self.redshift_query_id
    }
    /// <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
    pub fn has_result_set(&self) -> std::option::Option<bool> {
        self.has_result_set
    }
}
impl SubStatementData {
    /// Creates a new builder-style object to manufacture [`SubStatementData`](crate::types::SubStatementData).
    pub fn builder() -> crate::types::builders::SubStatementDataBuilder {
        crate::types::builders::SubStatementDataBuilder::default()
    }
}

/// A builder for [`SubStatementData`](crate::types::SubStatementData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubStatementDataBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<i64>,
    pub(crate) error: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::StatementStatusString>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) query_string: std::option::Option<std::string::String>,
    pub(crate) result_rows: std::option::Option<i64>,
    pub(crate) result_size: std::option::Option<i64>,
    pub(crate) redshift_query_id: std::option::Option<i64>,
    pub(crate) has_result_set: std::option::Option<bool>,
}
impl SubStatementDataBuilder {
    /// <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The amount of time in nanoseconds that the statement ran.</p>
    pub fn duration(mut self, input: i64) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The amount of time in nanoseconds that the statement ran.</p>
    pub fn set_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn status(mut self, input: crate::types::StatementStatusString) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::StatementStatusString>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The SQL statement text.</p>
    pub fn query_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_string = Some(input.into());
        self
    }
    /// <p>The SQL statement text.</p>
    pub fn set_query_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    pub fn result_rows(mut self, input: i64) -> Self {
        self.result_rows = Some(input);
        self
    }
    /// <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    pub fn set_result_rows(mut self, input: std::option::Option<i64>) -> Self {
        self.result_rows = input;
        self
    }
    /// <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    pub fn result_size(mut self, input: i64) -> Self {
        self.result_size = Some(input);
        self
    }
    /// <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    pub fn set_result_size(mut self, input: std::option::Option<i64>) -> Self {
        self.result_size = input;
        self
    }
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn redshift_query_id(mut self, input: i64) -> Self {
        self.redshift_query_id = Some(input);
        self
    }
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn set_redshift_query_id(mut self, input: std::option::Option<i64>) -> Self {
        self.redshift_query_id = input;
        self
    }
    /// <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
    pub fn has_result_set(mut self, input: bool) -> Self {
        self.has_result_set = Some(input);
        self
    }
    /// <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
    pub fn set_has_result_set(mut self, input: std::option::Option<bool>) -> Self {
        self.has_result_set = input;
        self
    }
    /// Consumes the builder and constructs a [`SubStatementData`](crate::types::SubStatementData).
    pub fn build(self) -> crate::types::SubStatementData {
        crate::types::SubStatementData {
            id: self.id,
            duration: self.duration.unwrap_or_default(),
            error: self.error,
            status: self.status,
            created_at: self.created_at,
            updated_at: self.updated_at,
            query_string: self.query_string,
            result_rows: self.result_rows.unwrap_or_default(),
            result_size: self.result_size.unwrap_or_default(),
            redshift_query_id: self.redshift_query_id.unwrap_or_default(),
            has_result_set: self.has_result_set,
        }
    }
}
