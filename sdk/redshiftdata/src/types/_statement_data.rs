// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL statement to run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatementData {
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub id: ::std::string::String,
    /// <p>The SQL statement.</p>
    pub query_string: ::std::option::Option<::std::string::String>,
    /// <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    pub query_strings: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub status: ::std::option::Option<crate::types::StatusString>,
    /// <p>The name of the SQL statement. </p>
    pub statement_name: ::std::option::Option<::std::string::String>,
    /// <p>The date and time (UTC) the statement was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The parameters used in a SQL statement.</p>
    pub query_parameters: ::std::option::Option<::std::vec::Vec<crate::types::SqlParameter>>,
    /// <p>A value that indicates whether the statement is a batch query request.</p>
    pub is_batch_statement: ::std::option::Option<bool>,
}
impl StatementData {
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The SQL statement.</p>
    pub fn query_string(&self) -> ::std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.query_strings.is_none()`.
    pub fn query_strings(&self) -> &[::std::string::String] {
        self.query_strings.as_deref().unwrap_or_default()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StatusString> {
        self.status.as_ref()
    }
    /// <p>The name of the SQL statement. </p>
    pub fn statement_name(&self) -> ::std::option::Option<&str> {
        self.statement_name.as_deref()
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The parameters used in a SQL statement.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.query_parameters.is_none()`.
    pub fn query_parameters(&self) -> &[crate::types::SqlParameter] {
        self.query_parameters.as_deref().unwrap_or_default()
    }
    /// <p>A value that indicates whether the statement is a batch query request.</p>
    pub fn is_batch_statement(&self) -> ::std::option::Option<bool> {
        self.is_batch_statement
    }
}
impl StatementData {
    /// Creates a new builder-style object to manufacture [`StatementData`](crate::types::StatementData).
    pub fn builder() -> crate::types::builders::StatementDataBuilder {
        crate::types::builders::StatementDataBuilder::default()
    }
}

/// A builder for [`StatementData`](crate::types::StatementData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StatementDataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) query_string: ::std::option::Option<::std::string::String>,
    pub(crate) query_strings: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::StatusString>,
    pub(crate) statement_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) query_parameters: ::std::option::Option<::std::vec::Vec<crate::types::SqlParameter>>,
    pub(crate) is_batch_statement: ::std::option::Option<bool>,
}
impl StatementDataBuilder {
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The SQL statement.</p>
    pub fn query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SQL statement.</p>
    pub fn set_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The SQL statement.</p>
    pub fn get_query_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_string
    }
    /// Appends an item to `query_strings`.
    ///
    /// To override the contents of this collection use [`set_query_strings`](Self::set_query_strings).
    ///
    /// <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    pub fn query_strings(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.query_strings.unwrap_or_default();
        v.push(input.into());
        self.query_strings = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    pub fn set_query_strings(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.query_strings = input;
        self
    }
    /// <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
    pub fn get_query_strings(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.query_strings
    }
    /// <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn status(mut self, input: crate::types::StatusString) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatusString>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the SQL statement. An example is the that the SQL statement finished. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatusString> {
        &self.status
    }
    /// <p>The name of the SQL statement. </p>
    pub fn statement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SQL statement. </p>
    pub fn set_statement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_name = input;
        self
    }
    /// <p>The name of the SQL statement. </p>
    pub fn get_statement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_name
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time (UTC) that the statement metadata was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `query_parameters`.
    ///
    /// To override the contents of this collection use [`set_query_parameters`](Self::set_query_parameters).
    ///
    /// <p>The parameters used in a SQL statement.</p>
    pub fn query_parameters(mut self, input: crate::types::SqlParameter) -> Self {
        let mut v = self.query_parameters.unwrap_or_default();
        v.push(input);
        self.query_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters used in a SQL statement.</p>
    pub fn set_query_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SqlParameter>>) -> Self {
        self.query_parameters = input;
        self
    }
    /// <p>The parameters used in a SQL statement.</p>
    pub fn get_query_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SqlParameter>> {
        &self.query_parameters
    }
    /// <p>A value that indicates whether the statement is a batch query request.</p>
    pub fn is_batch_statement(mut self, input: bool) -> Self {
        self.is_batch_statement = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that indicates whether the statement is a batch query request.</p>
    pub fn set_is_batch_statement(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_batch_statement = input;
        self
    }
    /// <p>A value that indicates whether the statement is a batch query request.</p>
    pub fn get_is_batch_statement(&self) -> &::std::option::Option<bool> {
        &self.is_batch_statement
    }
    /// Consumes the builder and constructs a [`StatementData`](crate::types::StatementData).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::StatementDataBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::StatementData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StatementData {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building StatementData",
                )
            })?,
            query_string: self.query_string,
            query_strings: self.query_strings,
            secret_arn: self.secret_arn,
            status: self.status,
            statement_name: self.statement_name,
            created_at: self.created_at,
            updated_at: self.updated_at,
            query_parameters: self.query_parameters,
            is_batch_statement: self.is_batch_statement,
        })
    }
}
