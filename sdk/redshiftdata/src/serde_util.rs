// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_execute_statement_exception_correct_errors(
    mut builder: crate::types::error::builders::BatchExecuteStatementExceptionBuilder,
) -> crate::types::error::builders::BatchExecuteStatementExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.statement_id.is_none() {
        builder.statement_id = Some(Default::default())
    }
    builder
}

pub(crate) fn database_connection_exception_correct_errors(
    mut builder: crate::types::error::builders::DatabaseConnectionExceptionBuilder,
) -> crate::types::error::builders::DatabaseConnectionExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_statement_output_correct_errors(
    mut builder: crate::operation::describe_statement::builders::DescribeStatementOutputBuilder,
) -> crate::operation::describe_statement::builders::DescribeStatementOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn execute_statement_exception_correct_errors(
    mut builder: crate::types::error::builders::ExecuteStatementExceptionBuilder,
) -> crate::types::error::builders::ExecuteStatementExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.statement_id.is_none() {
        builder.statement_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_statement_result_output_correct_errors(
    mut builder: crate::operation::get_statement_result::builders::GetStatementResultOutputBuilder,
) -> crate::operation::get_statement_result::builders::GetStatementResultOutputBuilder {
    if builder.records.is_none() {
        builder.records = Some(Default::default())
    }
    builder
}

pub(crate) fn list_statements_output_correct_errors(
    mut builder: crate::operation::list_statements::builders::ListStatementsOutputBuilder,
) -> crate::operation::list_statements::builders::ListStatementsOutputBuilder {
    if builder.statements.is_none() {
        builder.statements = Some(Default::default())
    }
    builder
}

pub(crate) fn sql_parameter_correct_errors(mut builder: crate::types::builders::SqlParameterBuilder) -> crate::types::builders::SqlParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn statement_data_correct_errors(
    mut builder: crate::types::builders::StatementDataBuilder,
) -> crate::types::builders::StatementDataBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn sub_statement_data_correct_errors(
    mut builder: crate::types::builders::SubStatementDataBuilder,
) -> crate::types::builders::SubStatementDataBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}
