// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Redshift Data API Service
///
/// Client for invoking operations on Redshift Data API Service. Each operation on Redshift Data API Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_redshiftdata::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_redshiftdata::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_redshiftdata::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchExecuteStatement`](crate::client::fluent_builders::BatchExecuteStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sqls(Vec<String>)`](crate::client::fluent_builders::BatchExecuteStatement::sqls) / [`set_sqls(Option<Vec<String>>)`](crate::client::fluent_builders::BatchExecuteStatement::set_sqls): <p>One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.</p>
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_database): <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`with_event(bool)`](crate::client::fluent_builders::BatchExecuteStatement::with_event) / [`set_with_event(Option<bool>)`](crate::client::fluent_builders::BatchExecuteStatement::set_with_event): <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statements run. </p>
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_statement_name): <p>The name of the SQL statements. You can name the SQL statements when you create them to identify the query. </p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::BatchExecuteStatement::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::BatchExecuteStatement::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    /// - On success, responds with [`BatchExecuteStatementOutput`](crate::output::BatchExecuteStatementOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::BatchExecuteStatementOutput::id): <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    ///   - [`created_at(Option<DateTime>)`](crate::output::BatchExecuteStatementOutput::created_at): <p>The date and time (UTC) the statement was created. </p>
    ///   - [`cluster_identifier(Option<String>)`](crate::output::BatchExecuteStatementOutput::cluster_identifier): <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    ///   - [`db_user(Option<String>)`](crate::output::BatchExecuteStatementOutput::db_user): <p>The database user name.</p>
    ///   - [`database(Option<String>)`](crate::output::BatchExecuteStatementOutput::database): <p>The name of the database.</p>
    ///   - [`secret_arn(Option<String>)`](crate::output::BatchExecuteStatementOutput::secret_arn): <p>The name or ARN of the secret that enables access to the database. </p>
    ///   - [`workgroup_name(Option<String>)`](crate::output::BatchExecuteStatementOutput::workgroup_name): <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    /// - On failure, responds with [`SdkError<BatchExecuteStatementError>`](crate::error::BatchExecuteStatementError)
    pub fn batch_execute_statement(&self) -> crate::client::fluent_builders::BatchExecuteStatement {
        crate::client::fluent_builders::BatchExecuteStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelStatement`](crate::client::fluent_builders::CancelStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::CancelStatement::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::CancelStatement::set_id): <p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
    /// - On success, responds with [`CancelStatementOutput`](crate::output::CancelStatementOutput) with field(s):
    ///   - [`status(Option<bool>)`](crate::output::CancelStatementOutput::status): <p>A value that indicates whether the cancel statement succeeded (true). </p>
    /// - On failure, responds with [`SdkError<CancelStatementError>`](crate::error::CancelStatementError)
    pub fn cancel_statement(&self) -> crate::client::fluent_builders::CancelStatement {
        crate::client::fluent_builders::CancelStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeStatement`](crate::client::fluent_builders::DescribeStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DescribeStatement::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DescribeStatement::set_id): <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. </p>
    /// - On success, responds with [`DescribeStatementOutput`](crate::output::DescribeStatementOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::DescribeStatementOutput::id): <p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    ///   - [`secret_arn(Option<String>)`](crate::output::DescribeStatementOutput::secret_arn): <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    ///   - [`db_user(Option<String>)`](crate::output::DescribeStatementOutput::db_user): <p>The database user name. </p>
    ///   - [`database(Option<String>)`](crate::output::DescribeStatementOutput::database): <p>The name of the database. </p>
    ///   - [`cluster_identifier(Option<String>)`](crate::output::DescribeStatementOutput::cluster_identifier): <p>The cluster identifier. </p>
    ///   - [`duration(i64)`](crate::output::DescribeStatementOutput::duration): <p>The amount of time in nanoseconds that the statement ran. </p>
    ///   - [`error(Option<String>)`](crate::output::DescribeStatementOutput::error): <p>The error message from the cluster if the SQL statement encountered an error while running. </p>
    ///   - [`status(Option<StatusString>)`](crate::output::DescribeStatementOutput::status): <p>The status of the SQL statement being described. Status values are defined as follows: </p>  <ul>   <li> <p>ABORTED - The query run was stopped by the user. </p> </li>   <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li>   <li> <p>FAILED - The query run failed. </p> </li>   <li> <p>FINISHED - The query has finished running. </p> </li>   <li> <p>PICKED - The query has been chosen to be run. </p> </li>   <li> <p>STARTED - The query run has started. </p> </li>   <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li>  </ul>
    ///   - [`created_at(Option<DateTime>)`](crate::output::DescribeStatementOutput::created_at): <p>The date and time (UTC) when the SQL statement was submitted to run. </p>
    ///   - [`updated_at(Option<DateTime>)`](crate::output::DescribeStatementOutput::updated_at): <p>The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed. </p>
    ///   - [`redshift_pid(i64)`](crate::output::DescribeStatementOutput::redshift_pid): <p>The process identifier from Amazon Redshift. </p>
    ///   - [`has_result_set(Option<bool>)`](crate::output::DescribeStatementOutput::has_result_set): <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set. The value is true if any substatement returns a result set.</p>
    ///   - [`query_string(Option<String>)`](crate::output::DescribeStatementOutput::query_string): <p>The SQL statement text. </p>
    ///   - [`result_rows(i64)`](crate::output::DescribeStatementOutput::result_rows): <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    ///   - [`result_size(i64)`](crate::output::DescribeStatementOutput::result_size): <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    ///   - [`redshift_query_id(i64)`](crate::output::DescribeStatementOutput::redshift_query_id): <p>The identifier of the query generated by Amazon Redshift. These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>
    ///   - [`query_parameters(Option<Vec<SqlParameter>>)`](crate::output::DescribeStatementOutput::query_parameters): <p>The parameters for the SQL statement.</p>
    ///   - [`sub_statements(Option<Vec<SubStatementData>>)`](crate::output::DescribeStatementOutput::sub_statements): <p>The SQL statements from a multiple statement run.</p>
    ///   - [`workgroup_name(Option<String>)`](crate::output::DescribeStatementOutput::workgroup_name): <p>The serverless workgroup name.</p>
    /// - On failure, responds with [`SdkError<DescribeStatementError>`](crate::error::DescribeStatementError)
    pub fn describe_statement(&self) -> crate::client::fluent_builders::DescribeStatement {
        crate::client::fluent_builders::DescribeStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTable`](crate::client::fluent_builders::DescribeTable) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeTable::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_database): <p>The name of the database that contains the tables to be described. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    ///   - [`connected_database(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::connected_database) / [`set_connected_database(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_connected_database): <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    ///   - [`schema(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::schema) / [`set_schema(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_schema): <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
    ///   - [`table(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::table) / [`set_table(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_table): <p>The table name. If no table is specified, then all tables for all matching schemas are returned. If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeTable::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeTable::set_max_results): <p>The maximum number of tables to return in the response. If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    /// - On success, responds with [`DescribeTableOutput`](crate::output::DescribeTableOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::DescribeTableOutput::table_name): <p>The table name. </p>
    ///   - [`column_list(Option<Vec<ColumnMetadata>>)`](crate::output::DescribeTableOutput::column_list): <p>A list of columns in the table. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeTableOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<DescribeTableError>`](crate::error::DescribeTableError)
    pub fn describe_table(&self) -> crate::client::fluent_builders::DescribeTable {
        crate::client::fluent_builders::DescribeTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExecuteStatement`](crate::client::fluent_builders::ExecuteStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`sql(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::sql) / [`set_sql(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_sql): <p>The SQL statement text to run. </p>
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_database): <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`with_event(bool)`](crate::client::fluent_builders::ExecuteStatement::with_event) / [`set_with_event(Option<bool>)`](crate::client::fluent_builders::ExecuteStatement::set_with_event): <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_statement_name): <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>
    ///   - [`parameters(Vec<SqlParameter>)`](crate::client::fluent_builders::ExecuteStatement::parameters) / [`set_parameters(Option<Vec<SqlParameter>>)`](crate::client::fluent_builders::ExecuteStatement::set_parameters): <p>The parameters for the SQL statement.</p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    /// - On success, responds with [`ExecuteStatementOutput`](crate::output::ExecuteStatementOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::ExecuteStatementOutput::id): <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    ///   - [`created_at(Option<DateTime>)`](crate::output::ExecuteStatementOutput::created_at): <p>The date and time (UTC) the statement was created. </p>
    ///   - [`cluster_identifier(Option<String>)`](crate::output::ExecuteStatementOutput::cluster_identifier): <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    ///   - [`db_user(Option<String>)`](crate::output::ExecuteStatementOutput::db_user): <p>The database user name.</p>
    ///   - [`database(Option<String>)`](crate::output::ExecuteStatementOutput::database): <p>The name of the database.</p>
    ///   - [`secret_arn(Option<String>)`](crate::output::ExecuteStatementOutput::secret_arn): <p>The name or ARN of the secret that enables access to the database. </p>
    ///   - [`workgroup_name(Option<String>)`](crate::output::ExecuteStatementOutput::workgroup_name): <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    /// - On failure, responds with [`SdkError<ExecuteStatementError>`](crate::error::ExecuteStatementError)
    pub fn execute_statement(&self) -> crate::client::fluent_builders::ExecuteStatement {
        crate::client::fluent_builders::ExecuteStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetStatementResult`](crate::client::fluent_builders::GetStatementResult) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetStatementResult::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetStatementResult::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetStatementResult::set_id): <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates then number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetStatementResult::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetStatementResult::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On success, responds with [`GetStatementResultOutput`](crate::output::GetStatementResultOutput) with field(s):
    ///   - [`records(Option<Vec<Vec<Field>>>)`](crate::output::GetStatementResultOutput::records): <p>The results of the SQL statement.</p>
    ///   - [`column_metadata(Option<Vec<ColumnMetadata>>)`](crate::output::GetStatementResultOutput::column_metadata): <p>The properties (metadata) of a column. </p>
    ///   - [`total_num_rows(i64)`](crate::output::GetStatementResultOutput::total_num_rows): <p>The total number of rows in the result set returned from a query. You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetStatementResultOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<GetStatementResultError>`](crate::error::GetStatementResultError)
    pub fn get_statement_result(&self) -> crate::client::fluent_builders::GetStatementResult {
        crate::client::fluent_builders::GetStatementResult::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatabases`](crate::client::fluent_builders::ListDatabases) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatabases::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_database): <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatabases::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListDatabases::set_max_results): <p>The maximum number of databases to return in the response. If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::ListDatabases::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::ListDatabases::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    /// - On success, responds with [`ListDatabasesOutput`](crate::output::ListDatabasesOutput) with field(s):
    ///   - [`databases(Option<Vec<String>>)`](crate::output::ListDatabasesOutput::databases): <p>The names of databases. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatabasesOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<ListDatabasesError>`](crate::error::ListDatabasesError)
    pub fn list_databases(&self) -> crate::client::fluent_builders::ListDatabases {
        crate::client::fluent_builders::ListDatabases::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSchemas`](crate::client::fluent_builders::ListSchemas) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSchemas::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_database): <p>The name of the database that contains the schemas to list. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    ///   - [`connected_database(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::connected_database) / [`set_connected_database(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_connected_database): <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    ///   - [`schema_pattern(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::schema_pattern) / [`set_schema_pattern(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_schema_pattern): <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSchemas::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListSchemas::set_max_results): <p>The maximum number of schemas to return in the response. If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::ListSchemas::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::ListSchemas::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    /// - On success, responds with [`ListSchemasOutput`](crate::output::ListSchemasOutput) with field(s):
    ///   - [`schemas(Option<Vec<String>>)`](crate::output::ListSchemasOutput::schemas): <p>The schemas that match the request pattern. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSchemasOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<ListSchemasError>`](crate::error::ListSchemasError)
    pub fn list_schemas(&self) -> crate::client::fluent_builders::ListSchemas {
        crate::client::fluent_builders::ListSchemas::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListStatements`](crate::client::fluent_builders::ListStatements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListStatements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListStatements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListStatements::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListStatements::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListStatements::set_max_results): <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    ///   - [`statement_name(impl Into<String>)`](crate::client::fluent_builders::ListStatements::statement_name) / [`set_statement_name(Option<String>)`](crate::client::fluent_builders::ListStatements::set_statement_name): <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
    ///   - [`status(StatusString)`](crate::client::fluent_builders::ListStatements::status) / [`set_status(Option<StatusString>)`](crate::client::fluent_builders::ListStatements::set_status): <p>The status of the SQL statement to list. Status values are defined as follows: </p>  <ul>   <li> <p>ABORTED - The query run was stopped by the user. </p> </li>   <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li>   <li> <p>FAILED - The query run failed. </p> </li>   <li> <p>FINISHED - The query has finished running. </p> </li>   <li> <p>PICKED - The query has been chosen to be run. </p> </li>   <li> <p>STARTED - The query run has started. </p> </li>   <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li>  </ul>
    ///   - [`role_level(bool)`](crate::client::fluent_builders::ListStatements::role_level) / [`set_role_level(Option<bool>)`](crate::client::fluent_builders::ListStatements::set_role_level): <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true. </p>
    /// - On success, responds with [`ListStatementsOutput`](crate::output::ListStatementsOutput) with field(s):
    ///   - [`statements(Option<Vec<StatementData>>)`](crate::output::ListStatementsOutput::statements): <p>The SQL statements. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListStatementsOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<ListStatementsError>`](crate::error::ListStatementsError)
    pub fn list_statements(&self) -> crate::client::fluent_builders::ListStatements {
        crate::client::fluent_builders::ListStatements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTables`](crate::client::fluent_builders::ListTables) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTables::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::ListTables::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::ListTables::set_cluster_identifier): <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
    ///   - [`secret_arn(impl Into<String>)`](crate::client::fluent_builders::ListTables::secret_arn) / [`set_secret_arn(Option<String>)`](crate::client::fluent_builders::ListTables::set_secret_arn): <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
    ///   - [`db_user(impl Into<String>)`](crate::client::fluent_builders::ListTables::db_user) / [`set_db_user(Option<String>)`](crate::client::fluent_builders::ListTables::set_db_user): <p>The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials. </p>
    ///   - [`database(impl Into<String>)`](crate::client::fluent_builders::ListTables::database) / [`set_database(Option<String>)`](crate::client::fluent_builders::ListTables::set_database): <p>The name of the database that contains the tables to list. If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
    ///   - [`connected_database(impl Into<String>)`](crate::client::fluent_builders::ListTables::connected_database) / [`set_connected_database(Option<String>)`](crate::client::fluent_builders::ListTables::set_connected_database): <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
    ///   - [`schema_pattern(impl Into<String>)`](crate::client::fluent_builders::ListTables::schema_pattern) / [`set_schema_pattern(Option<String>)`](crate::client::fluent_builders::ListTables::set_schema_pattern): <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match <code>TablePattern</code> are returned. If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
    ///   - [`table_pattern(impl Into<String>)`](crate::client::fluent_builders::ListTables::table_pattern) / [`set_table_pattern(Option<String>)`](crate::client::fluent_builders::ListTables::set_table_pattern): <p>A pattern to filter results by table name. Within a table pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only table name entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match <code>SchemaPattern</code>are returned. If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTables::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTables::set_next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTables::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListTables::set_max_results): <p>The maximum number of tables to return in the response. If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    ///   - [`workgroup_name(impl Into<String>)`](crate::client::fluent_builders::ListTables::workgroup_name) / [`set_workgroup_name(Option<String>)`](crate::client::fluent_builders::ListTables::set_workgroup_name): <p>The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
    /// - On success, responds with [`ListTablesOutput`](crate::output::ListTablesOutput) with field(s):
    ///   - [`tables(Option<Vec<TableMember>>)`](crate::output::ListTablesOutput::tables): <p>The tables that match the request pattern. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTablesOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<ListTablesError>`](crate::error::ListTablesError)
    pub fn list_tables(&self) -> crate::client::fluent_builders::ListTables {
        crate::client::fluent_builders::ListTables::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
