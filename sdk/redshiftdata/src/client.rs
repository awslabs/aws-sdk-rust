// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn cancel_statement(&self) -> fluent_builders::CancelStatement<C> {
        fluent_builders::CancelStatement::new(self.handle.clone())
    }
    pub fn describe_statement(&self) -> fluent_builders::DescribeStatement<C> {
        fluent_builders::DescribeStatement::new(self.handle.clone())
    }
    pub fn describe_table(&self) -> fluent_builders::DescribeTable<C> {
        fluent_builders::DescribeTable::new(self.handle.clone())
    }
    pub fn execute_statement(&self) -> fluent_builders::ExecuteStatement<C> {
        fluent_builders::ExecuteStatement::new(self.handle.clone())
    }
    pub fn get_statement_result(&self) -> fluent_builders::GetStatementResult<C> {
        fluent_builders::GetStatementResult::new(self.handle.clone())
    }
    pub fn list_databases(&self) -> fluent_builders::ListDatabases<C> {
        fluent_builders::ListDatabases::new(self.handle.clone())
    }
    pub fn list_schemas(&self) -> fluent_builders::ListSchemas<C> {
        fluent_builders::ListSchemas::new(self.handle.clone())
    }
    pub fn list_statements(&self) -> fluent_builders::ListStatements<C> {
        fluent_builders::ListStatements::new(self.handle.clone())
    }
    pub fn list_tables(&self) -> fluent_builders::ListTables<C> {
        fluent_builders::ListTables::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CancelStatement<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::cancel_statement_input::Builder,
    }
    impl<C> CancelStatement<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CancelStatementOutput,
            smithy_http::result::SdkError<crate::error::CancelStatementError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        /// This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStatement<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_statement_input::Builder,
    }
    impl<C> DescribeStatement<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStatementOutput,
            smithy_http::result::SdkError<crate::error::DescribeStatementError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        /// This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTable<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_table_input::Builder,
    }
    impl<C> DescribeTable<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTableOutput,
            smithy_http::result::SdkError<crate::error::DescribeTableError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
        pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_identifier(input);
            self
        }
        pub fn set_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_identifier(input);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
        pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(input);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
        pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(input);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The name of the database that contains the tables to be described.  
        /// If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
        pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(input);
            self
        }
        pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(input);
            self
        }
        /// <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
        pub fn connected_database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connected_database(input);
            self
        }
        pub fn set_connected_database(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connected_database(input);
            self
        }
        /// <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
        pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema(input);
            self
        }
        pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schema(input);
            self
        }
        /// <p>The table name. If no table is specified, then all tables for all matching schemas are returned.
        /// If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
        pub fn table(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.table(input);
            self
        }
        pub fn set_table(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_table(input);
            self
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of tables to return in the response.
        /// If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteStatement<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_statement_input::Builder,
    }
    impl<C> ExecuteStatement<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExecuteStatementOutput,
            smithy_http::result::SdkError<crate::error::ExecuteStatementError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The SQL statement text to run. </p>
        pub fn sql(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql(input);
            self
        }
        pub fn set_sql(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_sql(input);
            self
        }
        /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
        pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_identifier(input);
            self
        }
        pub fn set_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_identifier(input);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
        pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(input);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
        pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(input);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The name of the database. This parameter is required when authenticating using temporary credentials.</p>
        pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(input);
            self
        }
        pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(input);
            self
        }
        /// <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>
        pub fn with_event(mut self, input: bool) -> Self {
            self.inner = self.inner.with_event(input);
            self
        }
        pub fn set_with_event(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_with_event(input);
            self
        }
        /// <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>
        pub fn statement_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.statement_name(input);
            self
        }
        pub fn set_statement_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_statement_name(input);
            self
        }
        /// <p>The parameters for the SQL statement.</p>
        pub fn parameters(mut self, inp: impl Into<crate::model::SqlParameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SqlParameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetStatementResult<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_statement_result_input::Builder,
    }
    impl<C> GetStatementResult<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetStatementResultOutput,
            smithy_http::result::SdkError<crate::error::GetStatementResultError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        /// This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDatabases<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_databases_input::Builder,
    }
    impl<C> ListDatabases<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDatabasesOutput,
            smithy_http::result::SdkError<crate::error::ListDatabasesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
        pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_identifier(input);
            self
        }
        pub fn set_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_identifier(input);
            self
        }
        /// <p>The name of the database. This parameter is required when authenticating using temporary credentials. </p>
        pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(input);
            self
        }
        pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(input);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
        pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(input);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
        pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(input);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of databases to return in the response.
        /// If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListSchemas<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_schemas_input::Builder,
    }
    impl<C> ListSchemas<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSchemasOutput,
            smithy_http::result::SdkError<crate::error::ListSchemasError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
        pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_identifier(input);
            self
        }
        pub fn set_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_identifier(input);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
        pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(input);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
        pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(input);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The name of the database that contains the schemas to list.
        /// If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
        pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(input);
            self
        }
        pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(input);
            self
        }
        /// <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
        pub fn connected_database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connected_database(input);
            self
        }
        pub fn set_connected_database(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connected_database(input);
            self
        }
        /// <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
        /// substring of 0 or more characters and "_" means match any one character. Only schema name
        /// entries matching the search pattern are returned. </p>
        pub fn schema_pattern(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema_pattern(input);
            self
        }
        pub fn set_schema_pattern(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_schema_pattern(input);
            self
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of schemas to return in the response.
        /// If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStatements<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_statements_input::Builder,
    }
    impl<C> ListStatements<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStatementsOutput,
            smithy_http::result::SdkError<crate::error::ListStatementsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of SQL statements to return in the response.
        /// If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The name of the SQL statement specified as input to <code>ExecuteStatement</code> to identify the query.
        /// You can list multiple statements by providing a prefix that matches the beginning of the statement name.
        /// For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>.  
        /// Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
        pub fn statement_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.statement_name(input);
            self
        }
        pub fn set_statement_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_statement_name(input);
            self
        }
        /// <p>The status of the SQL statement to list. Status values are defined as follows: </p>
        /// <ul>
        /// <li>
        /// <p>ABORTED - The query run was stopped by the user. </p>
        /// </li>
        /// <li>
        /// <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
        /// </li>
        /// <li>
        /// <p>FAILED - The query run failed. </p>
        /// </li>
        /// <li>
        /// <p>FINISHED - The query has finished running. </p>
        /// </li>
        /// <li>
        /// <p>PICKED - The query has been chosen to be run. </p>
        /// </li>
        /// <li>
        /// <p>STARTED - The query run has started. </p>
        /// </li>
        /// <li>
        /// <p>SUBMITTED - The query was submitted, but not yet processed. </p>
        /// </li>
        /// </ul>
        pub fn status(mut self, input: crate::model::StatusString) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::StatusString>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned.
        /// If false, only statements run by the caller's IAM role in the current IAM session are returned.  The default is true. </p>
        pub fn role_level(mut self, input: bool) -> Self {
            self.inner = self.inner.role_level(input);
            self
        }
        pub fn set_role_level(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_role_level(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTables<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tables_input::Builder,
    }
    impl<C> ListTables<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTablesOutput,
            smithy_http::result::SdkError<crate::error::ListTablesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>
        pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_identifier(input);
            self
        }
        pub fn set_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_identifier(input);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>
        pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(input);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The database user name. This parameter is required when authenticating using temporary credentials. </p>
        pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(input);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The name of the database that contains the tables to list.
        /// If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
        pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(input);
            self
        }
        pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(input);
            self
        }
        /// <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
        pub fn connected_database(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connected_database(input);
            self
        }
        pub fn set_connected_database(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connected_database(input);
            self
        }
        /// <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
        /// substring of 0 or more characters and "_" means match any one character. Only schema name
        /// entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match
        /// <code>TablePattern</code> are returned.
        /// If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
        pub fn schema_pattern(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema_pattern(input);
            self
        }
        pub fn set_schema_pattern(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_schema_pattern(input);
            self
        }
        /// <p>A pattern to filter results by table name. Within a table pattern, "%" means match any
        /// substring of 0 or more characters and "_" means match any one character. Only table name
        /// entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match
        /// <code>SchemaPattern</code>are returned.  
        /// If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
        pub fn table_pattern(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.table_pattern(input);
            self
        }
        pub fn set_table_pattern(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_table_pattern(input);
            self
        }
        /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of tables to return in the response.
        /// If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
}
