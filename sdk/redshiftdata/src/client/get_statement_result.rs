// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetStatementResult`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::set_id):<br>required: **true**<br><p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates then number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::set_next_token):<br>required: **false**<br><p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p><br>
    /// - On success, responds with [`GetStatementResultOutput`](crate::operation::get_statement_result::GetStatementResultOutput) with field(s):
    ///   - [`records(Vec::<Vec::<Field>>)`](crate::operation::get_statement_result::GetStatementResultOutput::records): <p>The results of the SQL statement.</p>
    ///   - [`column_metadata(Option<Vec::<ColumnMetadata>>)`](crate::operation::get_statement_result::GetStatementResultOutput::column_metadata): <p>The properties (metadata) of a column. </p>
    ///   - [`total_num_rows(i64)`](crate::operation::get_statement_result::GetStatementResultOutput::total_num_rows): <p>The total number of rows in the result set returned from a query. You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_statement_result::GetStatementResultOutput::next_token): <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    /// - On failure, responds with [`SdkError<GetStatementResultError>`](crate::operation::get_statement_result::GetStatementResultError)
    pub fn get_statement_result(&self) -> crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder {
        crate::operation::get_statement_result::builders::GetStatementResultFluentBuilder::new(self.handle.clone())
    }
}
