// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeStatement`](crate::operation::describe_statement::builders::DescribeStatementFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::describe_statement::builders::DescribeStatementFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::describe_statement::builders::DescribeStatementFluentBuilder::set_id): <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query. This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. </p>
    /// - On success, responds with [`DescribeStatementOutput`](crate::operation::describe_statement::DescribeStatementOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::id): <p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
    ///   - [`secret_arn(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::secret_arn): <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
    ///   - [`db_user(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::db_user): <p>The database user name. </p>
    ///   - [`database(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::database): <p>The name of the database. </p>
    ///   - [`cluster_identifier(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::cluster_identifier): <p>The cluster identifier. </p>
    ///   - [`duration(i64)`](crate::operation::describe_statement::DescribeStatementOutput::duration): <p>The amount of time in nanoseconds that the statement ran. </p>
    ///   - [`error(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::error): <p>The error message from the cluster if the SQL statement encountered an error while running. </p>
    ///   - [`status(Option<StatusString>)`](crate::operation::describe_statement::DescribeStatementOutput::status): <p>The status of the SQL statement being described. Status values are defined as follows: </p>  <ul>   <li> <p>ABORTED - The query run was stopped by the user. </p> </li>   <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li>   <li> <p>FAILED - The query run failed. </p> </li>   <li> <p>FINISHED - The query has finished running. </p> </li>   <li> <p>PICKED - The query has been chosen to be run. </p> </li>   <li> <p>STARTED - The query run has started. </p> </li>   <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li>  </ul>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::describe_statement::DescribeStatementOutput::created_at): <p>The date and time (UTC) when the SQL statement was submitted to run. </p>
    ///   - [`updated_at(Option<DateTime>)`](crate::operation::describe_statement::DescribeStatementOutput::updated_at): <p>The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed. </p>
    ///   - [`redshift_pid(i64)`](crate::operation::describe_statement::DescribeStatementOutput::redshift_pid): <p>The process identifier from Amazon Redshift. </p>
    ///   - [`has_result_set(Option<bool>)`](crate::operation::describe_statement::DescribeStatementOutput::has_result_set): <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set. The value is true if any substatement returns a result set.</p>
    ///   - [`query_string(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::query_string): <p>The SQL statement text. </p>
    ///   - [`result_rows(i64)`](crate::operation::describe_statement::DescribeStatementOutput::result_rows): <p>Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A <code>-1</code> indicates the value is null.</p>
    ///   - [`result_size(i64)`](crate::operation::describe_statement::DescribeStatementOutput::result_size): <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
    ///   - [`redshift_query_id(i64)`](crate::operation::describe_statement::DescribeStatementOutput::redshift_query_id): <p>The identifier of the query generated by Amazon Redshift. These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>
    ///   - [`query_parameters(Option<Vec<SqlParameter>>)`](crate::operation::describe_statement::DescribeStatementOutput::query_parameters): <p>The parameters for the SQL statement.</p>
    ///   - [`sub_statements(Option<Vec<SubStatementData>>)`](crate::operation::describe_statement::DescribeStatementOutput::sub_statements): <p>The SQL statements from a multiple statement run.</p>
    ///   - [`workgroup_name(Option<String>)`](crate::operation::describe_statement::DescribeStatementOutput::workgroup_name): <p>The serverless workgroup name.</p>
    /// - On failure, responds with [`SdkError<DescribeStatementError>`](crate::operation::describe_statement::DescribeStatementError)
    pub fn describe_statement(
        &self,
    ) -> crate::operation::describe_statement::builders::DescribeStatementFluentBuilder {
        crate::operation::describe_statement::builders::DescribeStatementFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
