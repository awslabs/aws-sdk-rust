// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_table_output_next_token(
    input: &crate::operation::describe_table::DescribeTableOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_statement_result_output_next_token(
    input: &crate::operation::get_statement_result::GetStatementResultOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_databases_output_next_token(
    input: &crate::operation::list_databases::ListDatabasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_schemas_output_next_token(
    input: &crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_statements_output_next_token(
    input: &crate::operation::list_statements::ListStatementsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tables_output_next_token(
    input: &crate::operation::list_tables::ListTablesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_table_output_column_list(
    input: crate::operation::describe_table::DescribeTableOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ColumnMetadata>> {
    let input = match input.column_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_statement_result_output_records(
    input: crate::operation::get_statement_result::GetStatementResultOutput,
) -> std::option::Option<std::vec::Vec<std::vec::Vec<crate::types::Field>>> {
    let input = match input.records {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_databases_output_databases(
    input: crate::operation::list_databases::ListDatabasesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.databases {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_schemas_output_schemas(
    input: crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_statements_output_statements(
    input: crate::operation::list_statements::ListStatementsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StatementData>> {
    let input = match input.statements {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tables_output_tables(
    input: crate::operation::list_tables::ListTablesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TableMember>> {
    let input = match input.tables {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
