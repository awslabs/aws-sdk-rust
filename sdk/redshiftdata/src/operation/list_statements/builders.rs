// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_statements::_list_statements_output::ListStatementsOutputBuilder;

pub use crate::operation::list_statements::_list_statements_input::ListStatementsInputBuilder;

/// Fluent builder constructing a request to `ListStatements`.
///
/// <p>List of SQL statements. By default, only finished statements are shown. A token is returned to page through the statement list. </p>
/// <p>For more information about the Amazon Redshift Data API and CLI usage examples, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html">Using the Amazon Redshift Data API</a> in the <i>Amazon Redshift Management Guide</i>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListStatementsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_statements::builders::ListStatementsInputBuilder,
}
impl ListStatementsFluentBuilder {
    /// Creates a new `ListStatements`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_statements::ListStatements,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_statements::ListStatementsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_statements::ListStatementsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_statements::ListStatementsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_statements::paginator::ListStatementsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_statements::paginator::ListStatementsPaginator {
        crate::operation::list_statements::paginator::ListStatementsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
    pub fn statement_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.statement_name(input.into());
        self
    }
    /// <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>. Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
    pub fn set_statement_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_statement_name(input);
        self
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows: </p>
    /// <ul>
    /// <li> <p>ABORTED - The query run was stopped by the user. </p> </li>
    /// <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li>
    /// <li> <p>FAILED - The query run failed. </p> </li>
    /// <li> <p>FINISHED - The query has finished running. </p> </li>
    /// <li> <p>PICKED - The query has been chosen to be run. </p> </li>
    /// <li> <p>STARTED - The query run has started. </p> </li>
    /// <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::StatusString) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the SQL statement to list. Status values are defined as follows: </p>
    /// <ul>
    /// <li> <p>ABORTED - The query run was stopped by the user. </p> </li>
    /// <li> <p>ALL - A status value that includes all query statuses. This value can be used to filter results. </p> </li>
    /// <li> <p>FAILED - The query run failed. </p> </li>
    /// <li> <p>FINISHED - The query has finished running. </p> </li>
    /// <li> <p>PICKED - The query has been chosen to be run. </p> </li>
    /// <li> <p>STARTED - The query run has started. </p> </li>
    /// <li> <p>SUBMITTED - The query was submitted, but not yet processed. </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StatusString>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true. </p>
    pub fn role_level(mut self, input: bool) -> Self {
        self.inner = self.inner.role_level(input);
        self
    }
    /// <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true. </p>
    pub fn set_role_level(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_role_level(input);
        self
    }
}
