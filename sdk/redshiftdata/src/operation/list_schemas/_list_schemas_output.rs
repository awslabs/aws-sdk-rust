// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSchemasOutput {
    /// <p>The schemas that match the request pattern. </p>
    pub schemas: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSchemasOutput {
    /// <p>The schemas that match the request pattern. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schemas.is_none()`.
    pub fn schemas(&self) -> &[::std::string::String] {
        self.schemas.as_deref().unwrap_or_default()
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListSchemasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSchemasOutput {
    /// Creates a new builder-style object to manufacture [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
    pub fn builder() -> crate::operation::list_schemas::builders::ListSchemasOutputBuilder {
        crate::operation::list_schemas::builders::ListSchemasOutputBuilder::default()
    }
}

/// A builder for [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSchemasOutputBuilder {
    pub(crate) schemas: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSchemasOutputBuilder {
    /// Appends an item to `schemas`.
    ///
    /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
    ///
    /// <p>The schemas that match the request pattern. </p>
    pub fn schemas(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.schemas.unwrap_or_default();
        v.push(input.into());
        self.schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>The schemas that match the request pattern. </p>
    pub fn set_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.schemas = input;
        self
    }
    /// <p>The schemas that match the request pattern. </p>
    pub fn get_schemas(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.schemas
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
    pub fn build(self) -> crate::operation::list_schemas::ListSchemasOutput {
        crate::operation::list_schemas::ListSchemasOutput {
            schemas: self.schemas,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
