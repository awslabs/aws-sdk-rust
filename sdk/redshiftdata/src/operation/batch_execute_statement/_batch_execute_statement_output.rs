// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchExecuteStatementOutput {
    /// <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The date and time (UTC) the statement was created. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The database user name.</p>
    #[doc(hidden)]
    pub db_user: std::option::Option<std::string::String>,
    /// <p>The name of the database.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>The name or ARN of the secret that enables access to the database. </p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    #[doc(hidden)]
    pub workgroup_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl BatchExecuteStatementOutput {
    /// <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The database user name.</p>
    pub fn db_user(&self) -> std::option::Option<&str> {
        self.db_user.as_deref()
    }
    /// <p>The name of the database.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The name or ARN of the secret that enables access to the database. </p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    pub fn workgroup_name(&self) -> std::option::Option<&str> {
        self.workgroup_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchExecuteStatementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchExecuteStatementOutput {
    /// Creates a new builder-style object to manufacture [`BatchExecuteStatementOutput`](crate::operation::batch_execute_statement::BatchExecuteStatementOutput).
    pub fn builder(
    ) -> crate::operation::batch_execute_statement::builders::BatchExecuteStatementOutputBuilder
    {
        crate::operation::batch_execute_statement::builders::BatchExecuteStatementOutputBuilder::default()
    }
}

/// A builder for [`BatchExecuteStatementOutput`](crate::operation::batch_execute_statement::BatchExecuteStatementOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchExecuteStatementOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) db_user: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) workgroup_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl BatchExecuteStatementOutputBuilder {
    /// <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by <code>BatchExecuteStatment</code>. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time (UTC) the statement was created. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The database user name.</p>
    pub fn db_user(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_user = Some(input.into());
        self
    }
    /// <p>The database user name.</p>
    pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_user = input;
        self
    }
    /// <p>The name of the database.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The name of the database.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name or ARN of the secret that enables access to the database. </p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The name or ARN of the secret that enables access to the database. </p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    pub fn workgroup_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workgroup_name = Some(input.into());
        self
    }
    /// <p>The serverless workgroup name. This element is not returned when connecting to a provisioned cluster.</p>
    pub fn set_workgroup_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workgroup_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchExecuteStatementOutput`](crate::operation::batch_execute_statement::BatchExecuteStatementOutput).
    pub fn build(self) -> crate::operation::batch_execute_statement::BatchExecuteStatementOutput {
        crate::operation::batch_execute_statement::BatchExecuteStatementOutput {
            id: self.id,
            created_at: self.created_at,
            cluster_identifier: self.cluster_identifier,
            db_user: self.db_user,
            database: self.database,
            secret_arn: self.secret_arn,
            workgroup_name: self.workgroup_name,
            _request_id: self._request_id,
        }
    }
}
