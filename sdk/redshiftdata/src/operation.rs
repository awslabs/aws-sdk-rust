// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Cancels a running query. To be canceled, a query must be running. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelStatement {
    _private: (),
}
impl CancelStatement {
    /// Creates a new builder-style object to manufacture [`CancelStatementInput`](crate::input::CancelStatementInput)
    pub fn builder() -> crate::input::cancel_statement_input::Builder {
        crate::input::cancel_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelStatement {
    type Output = std::result::Result<
        crate::output::CancelStatementOutput,
        crate::error::CancelStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_statement_error(response)
        } else {
            crate::operation_deser::parse_cancel_statement_response(response)
        }
    }
}

/// <p>Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information
/// includes when the query started, when it finished, the query status, the number of rows returned, and the SQL
/// statement. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStatement {
    _private: (),
}
impl DescribeStatement {
    /// Creates a new builder-style object to manufacture [`DescribeStatementInput`](crate::input::DescribeStatementInput)
    pub fn builder() -> crate::input::describe_statement_input::Builder {
        crate::input::describe_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStatement {
    type Output = std::result::Result<
        crate::output::DescribeStatementOutput,
        crate::error::DescribeStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_statement_error(response)
        } else {
            crate::operation_deser::parse_describe_statement_response(response)
        }
    }
}

/// <p>Describes the detailed information about a table from metadata in the cluster. The
/// information includes its columns.
/// A token is returned to page through the column list.
/// Depending on the authorization method, use one of the
/// following combinations of request parameters: </p>
/// <ul>
/// <li>
/// <p>AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the
/// cluster identifier that matches the cluster in the secret. </p>
/// </li>
/// <li>
/// <p>Temporary credentials - specify the cluster identifier, the database name, and the database
/// user name. Permission to call the <code>redshift:GetClusterCredentials</code> operation is
/// required to use this method. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTable {
    _private: (),
}
impl DescribeTable {
    /// Creates a new builder-style object to manufacture [`DescribeTableInput`](crate::input::DescribeTableInput)
    pub fn builder() -> crate::input::describe_table_input::Builder {
        crate::input::describe_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTable {
    type Output =
        std::result::Result<crate::output::DescribeTableOutput, crate::error::DescribeTableError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_table_error(response)
        } else {
            crate::operation_deser::parse_describe_table_response(response)
        }
    }
}

/// <p>Runs an SQL statement, which can be data manipulation language (DML) or data definition
/// language (DDL). This statement must be a single SQL statement.
/// Depending on the authorization
/// method, use one of the following combinations of request parameters: </p>
/// <ul>
/// <li>
/// <p>AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the
/// cluster identifier that matches the cluster in the secret. </p>
/// </li>
/// <li>
/// <p>Temporary credentials - specify the cluster identifier, the database name, and the
/// database user name. Permission to call the <code>redshift:GetClusterCredentials</code>
/// operation is required to use this method. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExecuteStatement {
    _private: (),
}
impl ExecuteStatement {
    /// Creates a new builder-style object to manufacture [`ExecuteStatementInput`](crate::input::ExecuteStatementInput)
    pub fn builder() -> crate::input::execute_statement_input::Builder {
        crate::input::execute_statement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExecuteStatement {
    type Output = std::result::Result<
        crate::output::ExecuteStatementOutput,
        crate::error::ExecuteStatementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_execute_statement_error(response)
        } else {
            crate::operation_deser::parse_execute_statement_response(response)
        }
    }
}

/// <p>Fetches the temporarily cached result of an SQL statement.
/// A token is returned to page through the statement results. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetStatementResult {
    _private: (),
}
impl GetStatementResult {
    /// Creates a new builder-style object to manufacture [`GetStatementResultInput`](crate::input::GetStatementResultInput)
    pub fn builder() -> crate::input::get_statement_result_input::Builder {
        crate::input::get_statement_result_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetStatementResult {
    type Output = std::result::Result<
        crate::output::GetStatementResultOutput,
        crate::error::GetStatementResultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_statement_result_error(response)
        } else {
            crate::operation_deser::parse_get_statement_result_response(response)
        }
    }
}

/// <p>List the databases in a cluster.
/// A token is returned to page through the database list.
/// Depending on the authorization method, use one of the
/// following combinations of request parameters: </p>
/// <ul>
/// <li>
/// <p>AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the
/// cluster identifier that matches the cluster in the secret. </p>
/// </li>
/// <li>
/// <p>Temporary credentials - specify the cluster identifier, the database name, and the
/// database user name. Permission to call the <code>redshift:GetClusterCredentials</code>
/// operation is required to use this method. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDatabases {
    _private: (),
}
impl ListDatabases {
    /// Creates a new builder-style object to manufacture [`ListDatabasesInput`](crate::input::ListDatabasesInput)
    pub fn builder() -> crate::input::list_databases_input::Builder {
        crate::input::list_databases_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDatabases {
    type Output =
        std::result::Result<crate::output::ListDatabasesOutput, crate::error::ListDatabasesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_databases_error(response)
        } else {
            crate::operation_deser::parse_list_databases_response(response)
        }
    }
}

/// <p>Lists the schemas in a database.
/// A token is returned to page through the schema list.
/// Depending on the authorization method, use one of the
/// following combinations of request parameters: </p>
/// <ul>
/// <li>
/// <p>AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the
/// cluster identifier that matches the cluster in the secret. </p>
/// </li>
/// <li>
/// <p>Temporary credentials - specify the cluster identifier, the database name, and the
/// database user name. Permission to call the <code>redshift:GetClusterCredentials</code>
/// operation is required to use this method. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSchemas {
    _private: (),
}
impl ListSchemas {
    /// Creates a new builder-style object to manufacture [`ListSchemasInput`](crate::input::ListSchemasInput)
    pub fn builder() -> crate::input::list_schemas_input::Builder {
        crate::input::list_schemas_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSchemas {
    type Output =
        std::result::Result<crate::output::ListSchemasOutput, crate::error::ListSchemasError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_schemas_error(response)
        } else {
            crate::operation_deser::parse_list_schemas_response(response)
        }
    }
}

/// <p>List of SQL statements. By default, only finished statements are shown.
/// A token is returned to page through the statement list. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListStatements {
    _private: (),
}
impl ListStatements {
    /// Creates a new builder-style object to manufacture [`ListStatementsInput`](crate::input::ListStatementsInput)
    pub fn builder() -> crate::input::list_statements_input::Builder {
        crate::input::list_statements_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListStatements {
    type Output =
        std::result::Result<crate::output::ListStatementsOutput, crate::error::ListStatementsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_statements_error(response)
        } else {
            crate::operation_deser::parse_list_statements_response(response)
        }
    }
}

/// <p>List the tables in a database. If neither <code>SchemaPattern</code> nor <code>TablePattern</code> are specified, then
/// all tables in the database are returned.
/// A token is returned to page through the table list.
/// Depending on the authorization method, use one of the
/// following combinations of request parameters: </p>
/// <ul>
/// <li>
/// <p>AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the
/// cluster identifier that matches the cluster in the secret. </p>
/// </li>
/// <li>
/// <p>Temporary credentials - specify the cluster identifier, the database name, and the
/// database user name. Permission to call the <code>redshift:GetClusterCredentials</code>
/// operation is required to use this method. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTables {
    _private: (),
}
impl ListTables {
    /// Creates a new builder-style object to manufacture [`ListTablesInput`](crate::input::ListTablesInput)
    pub fn builder() -> crate::input::list_tables_input::Builder {
        crate::input::list_tables_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTables {
    type Output =
        std::result::Result<crate::output::ListTablesOutput, crate::error::ListTablesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tables_error(response)
        } else {
            crate::operation_deser::parse_list_tables_response(response)
        }
    }
}
