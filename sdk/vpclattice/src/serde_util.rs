// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_access_log_subscription_output_correct_errors(
    mut builder: crate::operation::create_access_log_subscription::builders::CreateAccessLogSubscriptionOutputBuilder,
) -> crate::operation::create_access_log_subscription::builders::CreateAccessLogSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn get_access_log_subscription_output_correct_errors(
    mut builder: crate::operation::get_access_log_subscription::builders::GetAccessLogSubscriptionOutputBuilder,
) -> crate::operation::get_access_log_subscription::builders::GetAccessLogSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_access_log_subscriptions_output_correct_errors(
    mut builder: crate::operation::list_access_log_subscriptions::builders::ListAccessLogSubscriptionsOutputBuilder,
) -> crate::operation::list_access_log_subscriptions::builders::ListAccessLogSubscriptionsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_listeners_output_correct_errors(
    mut builder: crate::operation::list_listeners::builders::ListListenersOutputBuilder,
) -> crate::operation::list_listeners::builders::ListListenersOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rules_output_correct_errors(
    mut builder: crate::operation::list_rules::builders::ListRulesOutputBuilder,
) -> crate::operation::list_rules::builders::ListRulesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_network_service_associations_output_correct_errors(
    mut builder: crate::operation::list_service_network_service_associations::builders::ListServiceNetworkServiceAssociationsOutputBuilder,
) -> crate::operation::list_service_network_service_associations::builders::ListServiceNetworkServiceAssociationsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_network_vpc_associations_output_correct_errors(
    mut builder: crate::operation::list_service_network_vpc_associations::builders::ListServiceNetworkVpcAssociationsOutputBuilder,
) -> crate::operation::list_service_network_vpc_associations::builders::ListServiceNetworkVpcAssociationsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_networks_output_correct_errors(
    mut builder: crate::operation::list_service_networks::builders::ListServiceNetworksOutputBuilder,
) -> crate::operation::list_service_networks::builders::ListServiceNetworksOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_targets_output_correct_errors(
    mut builder: crate::operation::list_targets::builders::ListTargetsOutputBuilder,
) -> crate::operation::list_targets::builders::ListTargetsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn update_access_log_subscription_output_correct_errors(
    mut builder: crate::operation::update_access_log_subscription::builders::UpdateAccessLogSubscriptionOutputBuilder,
) -> crate::operation::update_access_log_subscription::builders::UpdateAccessLogSubscriptionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn access_log_subscription_summary_correct_errors(
    mut builder: crate::types::builders::AccessLogSubscriptionSummaryBuilder,
) -> crate::types::builders::AccessLogSubscriptionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.destination_arn.is_none() {
        builder.destination_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn fixed_response_action_correct_errors(
    mut builder: crate::types::builders::FixedResponseActionBuilder,
) -> crate::types::builders::FixedResponseActionBuilder {
    if builder.status_code.is_none() {
        builder.status_code = Some(Default::default())
    }
    builder
}

pub(crate) fn forward_action_correct_errors(
    mut builder: crate::types::builders::ForwardActionBuilder,
) -> crate::types::builders::ForwardActionBuilder {
    if builder.target_groups.is_none() {
        builder.target_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn target_correct_errors(mut builder: crate::types::builders::TargetBuilder) -> crate::types::builders::TargetBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn path_match_correct_errors(mut builder: crate::types::builders::PathMatchBuilder) -> crate::types::builders::PathMatchBuilder {
    if builder.r#match.is_none() {
        builder.r#match = Some(crate::types::PathMatchType::Unknown)
    }
    builder
}

pub(crate) fn header_match_correct_errors(mut builder: crate::types::builders::HeaderMatchBuilder) -> crate::types::builders::HeaderMatchBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#match.is_none() {
        builder.r#match = Some(crate::types::HeaderMatchType::Unknown)
    }
    builder
}

pub(crate) fn weighted_target_group_correct_errors(
    mut builder: crate::types::builders::WeightedTargetGroupBuilder,
) -> crate::types::builders::WeightedTargetGroupBuilder {
    if builder.target_group_identifier.is_none() {
        builder.target_group_identifier = Some(Default::default())
    }
    builder
}
