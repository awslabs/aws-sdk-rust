// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateRuleOutput {
    /// <p>The rules that were successfully updated.</p>
    pub successful: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateSuccess>>,
    /// <p>The rules that the operation couldn't update.</p>
    pub unsuccessful: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateFailure>>,
    _request_id: Option<String>,
}
impl BatchUpdateRuleOutput {
    /// <p>The rules that were successfully updated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.successful.is_none()`.
    pub fn successful(&self) -> &[crate::types::RuleUpdateSuccess] {
        self.successful.as_deref().unwrap_or_default()
    }
    /// <p>The rules that the operation couldn't update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unsuccessful.is_none()`.
    pub fn unsuccessful(&self) -> &[crate::types::RuleUpdateFailure] {
        self.unsuccessful.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchUpdateRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchUpdateRuleOutput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateRuleOutput`](crate::operation::batch_update_rule::BatchUpdateRuleOutput).
    pub fn builder() -> crate::operation::batch_update_rule::builders::BatchUpdateRuleOutputBuilder {
        crate::operation::batch_update_rule::builders::BatchUpdateRuleOutputBuilder::default()
    }
}

/// A builder for [`BatchUpdateRuleOutput`](crate::operation::batch_update_rule::BatchUpdateRuleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchUpdateRuleOutputBuilder {
    pub(crate) successful: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateSuccess>>,
    pub(crate) unsuccessful: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateFailure>>,
    _request_id: Option<String>,
}
impl BatchUpdateRuleOutputBuilder {
    /// Appends an item to `successful`.
    ///
    /// To override the contents of this collection use [`set_successful`](Self::set_successful).
    ///
    /// <p>The rules that were successfully updated.</p>
    pub fn successful(mut self, input: crate::types::RuleUpdateSuccess) -> Self {
        let mut v = self.successful.unwrap_or_default();
        v.push(input);
        self.successful = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules that were successfully updated.</p>
    pub fn set_successful(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateSuccess>>) -> Self {
        self.successful = input;
        self
    }
    /// <p>The rules that were successfully updated.</p>
    pub fn get_successful(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateSuccess>> {
        &self.successful
    }
    /// Appends an item to `unsuccessful`.
    ///
    /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
    ///
    /// <p>The rules that the operation couldn't update.</p>
    pub fn unsuccessful(mut self, input: crate::types::RuleUpdateFailure) -> Self {
        let mut v = self.unsuccessful.unwrap_or_default();
        v.push(input);
        self.unsuccessful = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules that the operation couldn't update.</p>
    pub fn set_unsuccessful(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateFailure>>) -> Self {
        self.unsuccessful = input;
        self
    }
    /// <p>The rules that the operation couldn't update.</p>
    pub fn get_unsuccessful(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleUpdateFailure>> {
        &self.unsuccessful
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchUpdateRuleOutput`](crate::operation::batch_update_rule::BatchUpdateRuleOutput).
    pub fn build(self) -> crate::operation::batch_update_rule::BatchUpdateRuleOutput {
        crate::operation::batch_update_rule::BatchUpdateRuleOutput {
            successful: self.successful,
            unsuccessful: self.unsuccessful,
            _request_id: self._request_id,
        }
    }
}
