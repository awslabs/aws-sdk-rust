// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRuleInput {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub service_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub listener_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The rule match.</p>
    pub r#match: ::std::option::Option<crate::types::RuleMatch>,
    /// <p>The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The action for the default rule.</p>
    pub action: ::std::option::Option<crate::types::RuleAction>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags for the rule.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateRuleInput {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn service_identifier(&self) -> ::std::option::Option<&str> {
        self.service_identifier.as_deref()
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn listener_identifier(&self) -> ::std::option::Option<&str> {
        self.listener_identifier.as_deref()
    }
    /// <p>The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The rule match.</p>
    pub fn r#match(&self) -> ::std::option::Option<&crate::types::RuleMatch> {
        self.r#match.as_ref()
    }
    /// <p>The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The action for the default rule.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags for the rule.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
    pub fn builder() -> crate::operation::create_rule::builders::CreateRuleInputBuilder {
        crate::operation::create_rule::builders::CreateRuleInputBuilder::default()
    }
}

/// A builder for [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRuleInputBuilder {
    pub(crate) service_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) listener_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#match: ::std::option::Option<crate::types::RuleMatch>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateRuleInputBuilder {
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    /// This field is required.
    pub fn service_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn set_service_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the service.</p>
    pub fn get_service_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_identifier
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    /// This field is required.
    pub fn listener_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listener_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn set_listener_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listener_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the listener.</p>
    pub fn get_listener_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.listener_identifier
    }
    /// <p>The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The rule match.</p>
    /// This field is required.
    pub fn r#match(mut self, input: crate::types::RuleMatch) -> Self {
        self.r#match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule match.</p>
    pub fn set_match(mut self, input: ::std::option::Option<crate::types::RuleMatch>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The rule match.</p>
    pub fn get_match(&self) -> &::std::option::Option<crate::types::RuleMatch> {
        &self.r#match
    }
    /// <p>The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.</p>
    /// This field is required.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The action for the default rule.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action for the default rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action for the default rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the rule.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for the rule.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the rule.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateRuleInput`](crate::operation::create_rule::CreateRuleInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_rule::CreateRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_rule::CreateRuleInput {
            service_identifier: self.service_identifier,
            listener_identifier: self.listener_identifier,
            name: self.name,
            r#match: self.r#match,
            priority: self.priority,
            action: self.action,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
