// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAuthPolicyOutput {
    /// <p>The auth policy.</p>
    #[doc(hidden)]
    pub policy: std::option::Option<std::string::String>,
    /// <p>The state of the auth policy. The auth policy is only active when the auth type is set to <code>Amazon Web Services_IAM</code>. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is <code>NONE</code>, then any auth policy you provide will remain inactive. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network">Create a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::AuthPolicyState>,
    /// <p>The date and time that the auth policy was created, specified in ISO-8601 format.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the auth policy was last updated, specified in ISO-8601 format.</p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAuthPolicyOutput {
    /// <p>The auth policy.</p>
    pub fn policy(&self) -> std::option::Option<&str> {
        self.policy.as_deref()
    }
    /// <p>The state of the auth policy. The auth policy is only active when the auth type is set to <code>Amazon Web Services_IAM</code>. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is <code>NONE</code>, then any auth policy you provide will remain inactive. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network">Create a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::AuthPolicyState> {
        self.state.as_ref()
    }
    /// <p>The date and time that the auth policy was created, specified in ISO-8601 format.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time that the auth policy was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAuthPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAuthPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetAuthPolicyOutput`](crate::operation::get_auth_policy::GetAuthPolicyOutput).
    pub fn builder() -> crate::operation::get_auth_policy::builders::GetAuthPolicyOutputBuilder {
        crate::operation::get_auth_policy::builders::GetAuthPolicyOutputBuilder::default()
    }
}

/// A builder for [`GetAuthPolicyOutput`](crate::operation::get_auth_policy::GetAuthPolicyOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAuthPolicyOutputBuilder {
    pub(crate) policy: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::AuthPolicyState>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAuthPolicyOutputBuilder {
    /// <p>The auth policy.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy = Some(input.into());
        self
    }
    /// <p>The auth policy.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>The state of the auth policy. The auth policy is only active when the auth type is set to <code>Amazon Web Services_IAM</code>. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is <code>NONE</code>, then any auth policy you provide will remain inactive. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network">Create a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
    pub fn state(mut self, input: crate::types::AuthPolicyState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the auth policy. The auth policy is only active when the auth type is set to <code>Amazon Web Services_IAM</code>. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is <code>NONE</code>, then any auth policy you provide will remain inactive. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network">Create a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::AuthPolicyState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The date and time that the auth policy was created, specified in ISO-8601 format.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time that the auth policy was created, specified in ISO-8601 format.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the auth policy was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>The date and time that the auth policy was last updated, specified in ISO-8601 format.</p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAuthPolicyOutput`](crate::operation::get_auth_policy::GetAuthPolicyOutput).
    pub fn build(self) -> crate::operation::get_auth_policy::GetAuthPolicyOutput {
        crate::operation::get_auth_policy::GetAuthPolicyOutput {
            policy: self.policy,
            state: self.state,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            _request_id: self._request_id,
        }
    }
}
