// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_access_log_subscriptions_output_next_token(
    input: &crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_listeners_output_next_token(
    input: &crate::operation::list_listeners::ListListenersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rules_output_next_token(
    input: &crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_network_service_associations_output_next_token(
    input: &crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_network_vpc_associations_output_next_token(
    input: &crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_networks_output_next_token(
    input: &crate::operation::list_service_networks::ListServiceNetworksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_services_output_next_token(
    input: &crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_target_groups_output_next_token(
    input: &crate::operation::list_target_groups::ListTargetGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_targets_output_next_token(
    input: &crate::operation::list_targets::ListTargetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_access_log_subscriptions_output_items(
    input: crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccessLogSubscriptionSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_listeners_output_items(
    input: crate::operation::list_listeners::ListListenersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListenerSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rules_output_items(
    input: crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_network_service_associations_output_items(
    input: crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceNetworkServiceAssociationSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_network_vpc_associations_output_items(
    input: crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceNetworkVpcAssociationSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_networks_output_items(
    input: crate::operation::list_service_networks::ListServiceNetworksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceNetworkSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_services_output_items(
    input: crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_target_groups_output_items(
    input: crate::operation::list_target_groups::ListTargetGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TargetGroupSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_targets_output_items(
    input: crate::operation::list_targets::ListTargetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TargetSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}
