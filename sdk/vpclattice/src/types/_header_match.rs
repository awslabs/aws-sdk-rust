// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the constraints for a header match. Matches incoming requests with rule based on request header value before applying rule action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HeaderMatch {
    /// <p>The name of the header.</p>
    pub name: ::std::string::String,
    /// <p>The header match type.</p>
    pub r#match: ::std::option::Option<crate::types::HeaderMatchType>,
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub case_sensitive: ::std::option::Option<bool>,
}
impl HeaderMatch {
    /// <p>The name of the header.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The header match type.</p>
    pub fn r#match(&self) -> ::std::option::Option<&crate::types::HeaderMatchType> {
        self.r#match.as_ref()
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn case_sensitive(&self) -> ::std::option::Option<bool> {
        self.case_sensitive
    }
}
impl HeaderMatch {
    /// Creates a new builder-style object to manufacture [`HeaderMatch`](crate::types::HeaderMatch).
    pub fn builder() -> crate::types::builders::HeaderMatchBuilder {
        crate::types::builders::HeaderMatchBuilder::default()
    }
}

/// A builder for [`HeaderMatch`](crate::types::HeaderMatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HeaderMatchBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#match: ::std::option::Option<crate::types::HeaderMatchType>,
    pub(crate) case_sensitive: ::std::option::Option<bool>,
}
impl HeaderMatchBuilder {
    /// <p>The name of the header.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the header.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the header.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The header match type.</p>
    /// This field is required.
    pub fn r#match(mut self, input: crate::types::HeaderMatchType) -> Self {
        self.r#match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The header match type.</p>
    pub fn set_match(mut self, input: ::std::option::Option<crate::types::HeaderMatchType>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The header match type.</p>
    pub fn get_match(&self) -> &::std::option::Option<crate::types::HeaderMatchType> {
        &self.r#match
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn case_sensitive(mut self, input: bool) -> Self {
        self.case_sensitive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn set_case_sensitive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.case_sensitive = input;
        self
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn get_case_sensitive(&self) -> &::std::option::Option<bool> {
        &self.case_sensitive
    }
    /// Consumes the builder and constructs a [`HeaderMatch`](crate::types::HeaderMatch).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::HeaderMatchBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::HeaderMatch, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HeaderMatch {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building HeaderMatch",
                )
            })?,
            r#match: self.r#match,
            case_sensitive: self.case_sensitive,
        })
    }
}
