// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a forward action. You can use forward actions to route requests to one or more target groups. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ForwardAction {
    /// <p>The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.</p>
    /// <p>The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.</p>
    pub target_groups: ::std::vec::Vec<crate::types::WeightedTargetGroup>,
}
impl ForwardAction {
    /// <p>The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.</p>
    /// <p>The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.</p>
    pub fn target_groups(&self) -> &[crate::types::WeightedTargetGroup] {
        use std::ops::Deref;
        self.target_groups.deref()
    }
}
impl ForwardAction {
    /// Creates a new builder-style object to manufacture [`ForwardAction`](crate::types::ForwardAction).
    pub fn builder() -> crate::types::builders::ForwardActionBuilder {
        crate::types::builders::ForwardActionBuilder::default()
    }
}

/// A builder for [`ForwardAction`](crate::types::ForwardAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ForwardActionBuilder {
    pub(crate) target_groups: ::std::option::Option<::std::vec::Vec<crate::types::WeightedTargetGroup>>,
}
impl ForwardActionBuilder {
    /// Appends an item to `target_groups`.
    ///
    /// To override the contents of this collection use [`set_target_groups`](Self::set_target_groups).
    ///
    /// <p>The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.</p>
    /// <p>The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.</p>
    pub fn target_groups(mut self, input: crate::types::WeightedTargetGroup) -> Self {
        let mut v = self.target_groups.unwrap_or_default();
        v.push(input);
        self.target_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.</p>
    /// <p>The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.</p>
    pub fn set_target_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WeightedTargetGroup>>) -> Self {
        self.target_groups = input;
        self
    }
    /// <p>The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.</p>
    /// <p>The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of traffic will go to that target group.</p>
    pub fn get_target_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WeightedTargetGroup>> {
        &self.target_groups
    }
    /// Consumes the builder and constructs a [`ForwardAction`](crate::types::ForwardAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_groups`](crate::types::builders::ForwardActionBuilder::target_groups)
    pub fn build(self) -> ::std::result::Result<crate::types::ForwardAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ForwardAction {
            target_groups: self.target_groups.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_groups",
                    "target_groups was not specified but it is required when building ForwardAction",
                )
            })?,
        })
    }
}
