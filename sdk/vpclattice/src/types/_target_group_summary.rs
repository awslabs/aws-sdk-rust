// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a target group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetGroupSummary {
    /// <p>The ID of the target group.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN (Amazon Resource Name) of the target group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the target group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The target group type.</p>
    pub r#type: ::std::option::Option<crate::types::TargetGroupType>,
    /// <p>The date and time that the target group was created, specified in ISO-8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The port of the target group.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The protocol of the target group.</p>
    pub protocol: ::std::option::Option<crate::types::TargetGroupProtocol>,
    /// <p>The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>The ID of the VPC of the target group.</p>
    pub vpc_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the target group was last updated, specified in ISO-8601 format.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::TargetGroupStatus>,
    /// <p>The list of Amazon Resource Names (ARNs) of the service.</p>
    pub service_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// Lambda event structure version
    pub lambda_event_structure_version: ::std::option::Option<crate::types::LambdaEventStructureVersion>,
}
impl TargetGroupSummary {
    /// <p>The ID of the target group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN (Amazon Resource Name) of the target group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the target group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The target group type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TargetGroupType> {
        self.r#type.as_ref()
    }
    /// <p>The date and time that the target group was created, specified in ISO-8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The port of the target group.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The protocol of the target group.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::TargetGroupProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>The ID of the VPC of the target group.</p>
    pub fn vpc_identifier(&self) -> ::std::option::Option<&str> {
        self.vpc_identifier.as_deref()
    }
    /// <p>The date and time that the target group was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TargetGroupStatus> {
        self.status.as_ref()
    }
    /// <p>The list of Amazon Resource Names (ARNs) of the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_arns.is_none()`.
    pub fn service_arns(&self) -> &[::std::string::String] {
        self.service_arns.as_deref().unwrap_or_default()
    }
    /// Lambda event structure version
    pub fn lambda_event_structure_version(&self) -> ::std::option::Option<&crate::types::LambdaEventStructureVersion> {
        self.lambda_event_structure_version.as_ref()
    }
}
impl TargetGroupSummary {
    /// Creates a new builder-style object to manufacture [`TargetGroupSummary`](crate::types::TargetGroupSummary).
    pub fn builder() -> crate::types::builders::TargetGroupSummaryBuilder {
        crate::types::builders::TargetGroupSummaryBuilder::default()
    }
}

/// A builder for [`TargetGroupSummary`](crate::types::TargetGroupSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TargetGroupSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TargetGroupType>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::TargetGroupProtocol>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) vpc_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::TargetGroupStatus>,
    pub(crate) service_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) lambda_event_structure_version: ::std::option::Option<crate::types::LambdaEventStructureVersion>,
}
impl TargetGroupSummaryBuilder {
    /// <p>The ID of the target group.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the target group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the target group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN (Amazon Resource Name) of the target group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the target group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the target group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the target group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the target group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The target group type.</p>
    pub fn r#type(mut self, input: crate::types::TargetGroupType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target group type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TargetGroupType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The target group type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TargetGroupType> {
        &self.r#type
    }
    /// <p>The date and time that the target group was created, specified in ISO-8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the target group was created, specified in ISO-8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the target group was created, specified in ISO-8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The port of the target group.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port of the target group.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port of the target group.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The protocol of the target group.</p>
    pub fn protocol(mut self, input: crate::types::TargetGroupProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol of the target group.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::TargetGroupProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol of the target group.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::TargetGroupProtocol> {
        &self.protocol
    }
    /// <p>The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// <p>The ID of the VPC of the target group.</p>
    pub fn vpc_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC of the target group.</p>
    pub fn set_vpc_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_identifier = input;
        self
    }
    /// <p>The ID of the VPC of the target group.</p>
    pub fn get_vpc_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_identifier
    }
    /// <p>The date and time that the target group was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the target group was last updated, specified in ISO-8601 format.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date and time that the target group was last updated, specified in ISO-8601 format.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::TargetGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TargetGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TargetGroupStatus> {
        &self.status
    }
    /// Appends an item to `service_arns`.
    ///
    /// To override the contents of this collection use [`set_service_arns`](Self::set_service_arns).
    ///
    /// <p>The list of Amazon Resource Names (ARNs) of the service.</p>
    pub fn service_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.service_arns.unwrap_or_default();
        v.push(input.into());
        self.service_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon Resource Names (ARNs) of the service.</p>
    pub fn set_service_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.service_arns = input;
        self
    }
    /// <p>The list of Amazon Resource Names (ARNs) of the service.</p>
    pub fn get_service_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.service_arns
    }
    /// Lambda event structure version
    pub fn lambda_event_structure_version(mut self, input: crate::types::LambdaEventStructureVersion) -> Self {
        self.lambda_event_structure_version = ::std::option::Option::Some(input);
        self
    }
    /// Lambda event structure version
    pub fn set_lambda_event_structure_version(mut self, input: ::std::option::Option<crate::types::LambdaEventStructureVersion>) -> Self {
        self.lambda_event_structure_version = input;
        self
    }
    /// Lambda event structure version
    pub fn get_lambda_event_structure_version(&self) -> &::std::option::Option<crate::types::LambdaEventStructureVersion> {
        &self.lambda_event_structure_version
    }
    /// Consumes the builder and constructs a [`TargetGroupSummary`](crate::types::TargetGroupSummary).
    pub fn build(self) -> crate::types::TargetGroupSummary {
        crate::types::TargetGroupSummary {
            id: self.id,
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            created_at: self.created_at,
            port: self.port,
            protocol: self.protocol,
            ip_address_type: self.ip_address_type,
            vpc_identifier: self.vpc_identifier,
            last_updated_at: self.last_updated_at,
            status: self.status,
            service_arns: self.service_arns,
            lambda_event_structure_version: self.lambda_event_structure_version,
        }
    }
}
