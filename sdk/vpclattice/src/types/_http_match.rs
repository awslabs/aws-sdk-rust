// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes criteria that can be applied to incoming requests.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpMatch {
    /// <p>The HTTP method type.</p>
    pub method: ::std::option::Option<::std::string::String>,
    /// <p>The path match.</p>
    pub path_match: ::std::option::Option<crate::types::PathMatch>,
    /// <p>The header matches. Matches incoming requests with rule based on request header value before applying rule action.</p>
    pub header_matches: ::std::option::Option<::std::vec::Vec<crate::types::HeaderMatch>>,
}
impl HttpMatch {
    /// <p>The HTTP method type.</p>
    pub fn method(&self) -> ::std::option::Option<&str> {
        self.method.as_deref()
    }
    /// <p>The path match.</p>
    pub fn path_match(&self) -> ::std::option::Option<&crate::types::PathMatch> {
        self.path_match.as_ref()
    }
    /// <p>The header matches. Matches incoming requests with rule based on request header value before applying rule action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.header_matches.is_none()`.
    pub fn header_matches(&self) -> &[crate::types::HeaderMatch] {
        self.header_matches.as_deref().unwrap_or_default()
    }
}
impl HttpMatch {
    /// Creates a new builder-style object to manufacture [`HttpMatch`](crate::types::HttpMatch).
    pub fn builder() -> crate::types::builders::HttpMatchBuilder {
        crate::types::builders::HttpMatchBuilder::default()
    }
}

/// A builder for [`HttpMatch`](crate::types::HttpMatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HttpMatchBuilder {
    pub(crate) method: ::std::option::Option<::std::string::String>,
    pub(crate) path_match: ::std::option::Option<crate::types::PathMatch>,
    pub(crate) header_matches: ::std::option::Option<::std::vec::Vec<crate::types::HeaderMatch>>,
}
impl HttpMatchBuilder {
    /// <p>The HTTP method type.</p>
    pub fn method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP method type.</p>
    pub fn set_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.method = input;
        self
    }
    /// <p>The HTTP method type.</p>
    pub fn get_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.method
    }
    /// <p>The path match.</p>
    pub fn path_match(mut self, input: crate::types::PathMatch) -> Self {
        self.path_match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The path match.</p>
    pub fn set_path_match(mut self, input: ::std::option::Option<crate::types::PathMatch>) -> Self {
        self.path_match = input;
        self
    }
    /// <p>The path match.</p>
    pub fn get_path_match(&self) -> &::std::option::Option<crate::types::PathMatch> {
        &self.path_match
    }
    /// Appends an item to `header_matches`.
    ///
    /// To override the contents of this collection use [`set_header_matches`](Self::set_header_matches).
    ///
    /// <p>The header matches. Matches incoming requests with rule based on request header value before applying rule action.</p>
    pub fn header_matches(mut self, input: crate::types::HeaderMatch) -> Self {
        let mut v = self.header_matches.unwrap_or_default();
        v.push(input);
        self.header_matches = ::std::option::Option::Some(v);
        self
    }
    /// <p>The header matches. Matches incoming requests with rule based on request header value before applying rule action.</p>
    pub fn set_header_matches(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HeaderMatch>>) -> Self {
        self.header_matches = input;
        self
    }
    /// <p>The header matches. Matches incoming requests with rule based on request header value before applying rule action.</p>
    pub fn get_header_matches(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HeaderMatch>> {
        &self.header_matches
    }
    /// Consumes the builder and constructs a [`HttpMatch`](crate::types::HttpMatch).
    pub fn build(self) -> crate::types::HttpMatch {
        crate::types::HttpMatch {
            method: self.method,
            path_match: self.path_match,
            header_matches: self.header_matches,
        }
    }
}
