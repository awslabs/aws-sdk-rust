// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the conditions that can be applied when matching a path for incoming requests.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PathMatch {
    /// <p>The type of path match.</p>
    pub r#match: ::std::option::Option<crate::types::PathMatchType>,
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub case_sensitive: ::std::option::Option<bool>,
}
impl PathMatch {
    /// <p>The type of path match.</p>
    pub fn r#match(&self) -> ::std::option::Option<&crate::types::PathMatchType> {
        self.r#match.as_ref()
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn case_sensitive(&self) -> ::std::option::Option<bool> {
        self.case_sensitive
    }
}
impl PathMatch {
    /// Creates a new builder-style object to manufacture [`PathMatch`](crate::types::PathMatch).
    pub fn builder() -> crate::types::builders::PathMatchBuilder {
        crate::types::builders::PathMatchBuilder::default()
    }
}

/// A builder for [`PathMatch`](crate::types::PathMatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PathMatchBuilder {
    pub(crate) r#match: ::std::option::Option<crate::types::PathMatchType>,
    pub(crate) case_sensitive: ::std::option::Option<bool>,
}
impl PathMatchBuilder {
    /// <p>The type of path match.</p>
    /// This field is required.
    pub fn r#match(mut self, input: crate::types::PathMatchType) -> Self {
        self.r#match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of path match.</p>
    pub fn set_match(mut self, input: ::std::option::Option<crate::types::PathMatchType>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The type of path match.</p>
    pub fn get_match(&self) -> &::std::option::Option<crate::types::PathMatchType> {
        &self.r#match
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn case_sensitive(mut self, input: bool) -> Self {
        self.case_sensitive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn set_case_sensitive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.case_sensitive = input;
        self
    }
    /// <p>Indicates whether the match is case sensitive. Defaults to false.</p>
    pub fn get_case_sensitive(&self) -> &::std::option::Option<bool> {
        &self.case_sensitive
    }
    /// Consumes the builder and constructs a [`PathMatch`](crate::types::PathMatch).
    pub fn build(self) -> crate::types::PathMatch {
        crate::types::PathMatch {
            r#match: self.r#match,
            case_sensitive: self.case_sensitive,
        }
    }
}
