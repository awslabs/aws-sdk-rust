// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The user does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error occurred while processing the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request references a resource that does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The limit on the number of requests per second was exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input does not satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_rule::BatchUpdateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_rule::BatchUpdateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_update_rule::BatchUpdateRuleError> for Error {
    fn from(err: crate::operation::batch_update_rule::BatchUpdateRuleError) -> Self {
        match err {
            crate::operation::batch_update_rule::BatchUpdateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_rule::BatchUpdateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError> for Error {
    fn from(err: crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError) -> Self {
        match err {
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_access_log_subscription::CreateAccessLogSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listener::CreateListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listener::CreateListenerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_listener::CreateListenerError> for Error {
    fn from(err: crate::operation::create_listener::CreateListenerError) -> Self {
        match err {
            crate::operation::create_listener::CreateListenerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_listener::CreateListenerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_listener::CreateListenerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_listener::CreateListenerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_listener::CreateListenerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_listener::CreateListenerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_listener::CreateListenerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_listener::CreateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_rule::CreateRuleError> for Error {
    fn from(err: crate::operation::create_rule::CreateRuleError) -> Self {
        match err {
            crate::operation::create_rule::CreateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_rule::CreateRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_rule::CreateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_rule::CreateRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_rule::CreateRuleError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_rule::CreateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_rule::CreateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_rule::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service::CreateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service::CreateServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service::CreateServiceError> for Error {
    fn from(err: crate::operation::create_service::CreateServiceError) -> Self {
        match err {
            crate::operation::create_service::CreateServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service::CreateServiceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service::CreateServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_service::CreateServiceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_service::CreateServiceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service::CreateServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service::CreateServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service::CreateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service_network::CreateServiceNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_service_network::CreateServiceNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_network::CreateServiceNetworkError> for Error {
    fn from(err: crate::operation::create_service_network::CreateServiceNetworkError) -> Self {
        match err {
            crate::operation::create_service_network::CreateServiceNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service_network::CreateServiceNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service_network::CreateServiceNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_service_network::CreateServiceNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_service_network::CreateServiceNetworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_service_network::CreateServiceNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service_network::CreateServiceNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service_network::CreateServiceNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError> for Error {
    fn from(err: crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError) -> Self {
        match err {
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service_network_service_association::CreateServiceNetworkServiceAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError> for Error {
    fn from(err: crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError) -> Self {
        match err {
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_service_network_vpc_association::CreateServiceNetworkVpcAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_target_group::CreateTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_target_group::CreateTargetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_target_group::CreateTargetGroupError> for Error {
    fn from(err: crate::operation::create_target_group::CreateTargetGroupError) -> Self {
        match err {
            crate::operation::create_target_group::CreateTargetGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_target_group::CreateTargetGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_target_group::CreateTargetGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_target_group::CreateTargetGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_target_group::CreateTargetGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_target_group::CreateTargetGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_target_group::CreateTargetGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_target_group::CreateTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError> for Error {
    fn from(err: crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError) -> Self {
        match err {
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_access_log_subscription::DeleteAccessLogSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_auth_policy::DeleteAuthPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_auth_policy::DeleteAuthPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_auth_policy::DeleteAuthPolicyError> for Error {
    fn from(err: crate::operation::delete_auth_policy::DeleteAuthPolicyError) -> Self {
        match err {
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_auth_policy::DeleteAuthPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listener::DeleteListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listener::DeleteListenerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_listener::DeleteListenerError> for Error {
    fn from(err: crate::operation::delete_listener::DeleteListenerError) -> Self {
        match err {
            crate::operation::delete_listener::DeleteListenerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_listener::DeleteListenerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_listener::DeleteListenerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_listener::DeleteListenerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_listener::DeleteListenerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_listener::DeleteListenerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_listener::DeleteListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_rule::DeleteRuleError> for Error {
    fn from(err: crate::operation::delete_rule::DeleteRuleError) -> Self {
        match err {
            crate::operation::delete_rule::DeleteRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_rule::DeleteRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_rule::DeleteRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_rule::DeleteRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_rule::DeleteRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_rule::DeleteRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_rule::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service::DeleteServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service::DeleteServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service::DeleteServiceError> for Error {
    fn from(err: crate::operation::delete_service::DeleteServiceError) -> Self {
        match err {
            crate::operation::delete_service::DeleteServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_service::DeleteServiceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_service::DeleteServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_service::DeleteServiceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_service::DeleteServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_service::DeleteServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_service::DeleteServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service_network::DeleteServiceNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_service_network::DeleteServiceNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_network::DeleteServiceNetworkError> for Error {
    fn from(err: crate::operation::delete_service_network::DeleteServiceNetworkError) -> Self {
        match err {
            crate::operation::delete_service_network::DeleteServiceNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_service_network::DeleteServiceNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_service_network::DeleteServiceNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_service_network::DeleteServiceNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_service_network::DeleteServiceNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_service_network::DeleteServiceNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_service_network::DeleteServiceNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError> for Error {
    fn from(err: crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError) -> Self {
        match err {
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_service_network_service_association::DeleteServiceNetworkServiceAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError> for Error {
    fn from(err: crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError) -> Self {
        match err {
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_service_network_vpc_association::DeleteServiceNetworkVpcAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_target_group::DeleteTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_target_group::DeleteTargetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_target_group::DeleteTargetGroupError> for Error {
    fn from(err: crate::operation::delete_target_group::DeleteTargetGroupError) -> Self {
        match err {
            crate::operation::delete_target_group::DeleteTargetGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_target_group::DeleteTargetGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_target_group::DeleteTargetGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_target_group::DeleteTargetGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_target_group::DeleteTargetGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_target_group::DeleteTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_targets::DeregisterTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_targets::DeregisterTargetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_targets::DeregisterTargetsError> for Error {
    fn from(err: crate::operation::deregister_targets::DeregisterTargetsError) -> Self {
        match err {
            crate::operation::deregister_targets::DeregisterTargetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::deregister_targets::DeregisterTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError> for Error {
    fn from(err: crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError) -> Self {
        match err {
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_access_log_subscription::GetAccessLogSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_auth_policy::GetAuthPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_auth_policy::GetAuthPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_auth_policy::GetAuthPolicyError> for Error {
    fn from(err: crate::operation::get_auth_policy::GetAuthPolicyError) -> Self {
        match err {
            crate::operation::get_auth_policy::GetAuthPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_auth_policy::GetAuthPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_auth_policy::GetAuthPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_auth_policy::GetAuthPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_auth_policy::GetAuthPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_auth_policy::GetAuthPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listener::GetListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listener::GetListenerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_listener::GetListenerError> for Error {
    fn from(err: crate::operation::get_listener::GetListenerError) -> Self {
        match err {
            crate::operation::get_listener::GetListenerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_listener::GetListenerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_listener::GetListenerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_listener::GetListenerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_listener::GetListenerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_listener::GetListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_policy::GetResourcePolicyError> for Error {
    fn from(err: crate::operation::get_resource_policy::GetResourcePolicyError) -> Self {
        match err {
            crate::operation::get_resource_policy::GetResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resource_policy::GetResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule::GetRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule::GetRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_rule::GetRuleError> for Error {
    fn from(err: crate::operation::get_rule::GetRuleError) -> Self {
        match err {
            crate::operation::get_rule::GetRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_rule::GetRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_rule::GetRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_rule::GetRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_rule::GetRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_rule::GetRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service::GetServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service::GetServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service::GetServiceError> for Error {
    fn from(err: crate::operation::get_service::GetServiceError) -> Self {
        match err {
            crate::operation::get_service::GetServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service::GetServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service::GetServiceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_service::GetServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service::GetServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service::GetServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_network::GetServiceNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_service_network::GetServiceNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_network::GetServiceNetworkError> for Error {
    fn from(err: crate::operation::get_service_network::GetServiceNetworkError) -> Self {
        match err {
            crate::operation::get_service_network::GetServiceNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_network::GetServiceNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_network::GetServiceNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_service_network::GetServiceNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_network::GetServiceNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_network::GetServiceNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError> for Error {
    fn from(err: crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError) -> Self {
        match err {
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_service_network_service_association::GetServiceNetworkServiceAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError> for Error {
    fn from(err: crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError) -> Self {
        match err {
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_service_network_vpc_association::GetServiceNetworkVpcAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_target_group::GetTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_target_group::GetTargetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_target_group::GetTargetGroupError> for Error {
    fn from(err: crate::operation::get_target_group::GetTargetGroupError) -> Self {
        match err {
            crate::operation::get_target_group::GetTargetGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_target_group::GetTargetGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_target_group::GetTargetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_target_group::GetTargetGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_target_group::GetTargetGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_target_group::GetTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError> for Error {
    fn from(err: crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError) -> Self {
        match err {
            crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_access_log_subscriptions::ListAccessLogSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_listeners::ListListenersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_listeners::ListListenersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_listeners::ListListenersError> for Error {
    fn from(err: crate::operation::list_listeners::ListListenersError) -> Self {
        match err {
            crate::operation::list_listeners::ListListenersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_listeners::ListListenersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_listeners::ListListenersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_listeners::ListListenersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_listeners::ListListenersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_listeners::ListListenersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rules::ListRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rules::ListRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_rules::ListRulesError> for Error {
    fn from(err: crate::operation::list_rules::ListRulesError) -> Self {
        match err {
            crate::operation::list_rules::ListRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_rules::ListRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_rules::ListRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_rules::ListRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_rules::ListRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_rules::ListRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_service_networks::ListServiceNetworksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_service_networks::ListServiceNetworksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_networks::ListServiceNetworksError> for Error {
    fn from(err: crate::operation::list_service_networks::ListServiceNetworksError) -> Self {
        match err {
            crate::operation::list_service_networks::ListServiceNetworksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_networks::ListServiceNetworksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_service_networks::ListServiceNetworksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_networks::ListServiceNetworksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_networks::ListServiceNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError> for Error {
    fn from(err: crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError) -> Self {
        match err {
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_service_network_service_associations::ListServiceNetworkServiceAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError> for Error {
    fn from(err: crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError) -> Self {
        match err {
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_service_network_vpc_associations::ListServiceNetworkVpcAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_services::ListServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_services::ListServicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_services::ListServicesError> for Error {
    fn from(err: crate::operation::list_services::ListServicesError) -> Self {
        match err {
            crate::operation::list_services::ListServicesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_services::ListServicesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_services::ListServicesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_services::ListServicesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_services::ListServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_target_groups::ListTargetGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_target_groups::ListTargetGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_target_groups::ListTargetGroupsError> for Error {
    fn from(err: crate::operation::list_target_groups::ListTargetGroupsError) -> Self {
        match err {
            crate::operation::list_target_groups::ListTargetGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_target_groups::ListTargetGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_target_groups::ListTargetGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_target_groups::ListTargetGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_target_groups::ListTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_targets::ListTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_targets::ListTargetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_targets::ListTargetsError> for Error {
    fn from(err: crate::operation::list_targets::ListTargetsError) -> Self {
        match err {
            crate::operation::list_targets::ListTargetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_targets::ListTargetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_targets::ListTargetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_targets::ListTargetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_targets::ListTargetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_targets::ListTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_auth_policy::PutAuthPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_auth_policy::PutAuthPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_auth_policy::PutAuthPolicyError> for Error {
    fn from(err: crate::operation::put_auth_policy::PutAuthPolicyError) -> Self {
        match err {
            crate::operation::put_auth_policy::PutAuthPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_auth_policy::PutAuthPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_auth_policy::PutAuthPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_auth_policy::PutAuthPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_auth_policy::PutAuthPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_auth_policy::PutAuthPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_targets::RegisterTargetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_targets::RegisterTargetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_targets::RegisterTargetsError> for Error {
    fn from(err: crate::operation::register_targets::RegisterTargetsError) -> Self {
        match err {
            crate::operation::register_targets::RegisterTargetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::register_targets::RegisterTargetsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_targets::RegisterTargetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::register_targets::RegisterTargetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::register_targets::RegisterTargetsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::register_targets::RegisterTargetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::register_targets::RegisterTargetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_targets::RegisterTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError> for Error {
    fn from(err: crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError) -> Self {
        match err {
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_access_log_subscription::UpdateAccessLogSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_listener::UpdateListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_listener::UpdateListenerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_listener::UpdateListenerError> for Error {
    fn from(err: crate::operation::update_listener::UpdateListenerError) -> Self {
        match err {
            crate::operation::update_listener::UpdateListenerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_listener::UpdateListenerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_listener::UpdateListenerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_listener::UpdateListenerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_listener::UpdateListenerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_listener::UpdateListenerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_listener::UpdateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule::UpdateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule::UpdateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_rule::UpdateRuleError> for Error {
    fn from(err: crate::operation::update_rule::UpdateRuleError) -> Self {
        match err {
            crate::operation::update_rule::UpdateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_rule::UpdateRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rule::UpdateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_rule::UpdateRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_rule::UpdateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_rule::UpdateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_rule::UpdateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_service::UpdateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_service::UpdateServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service::UpdateServiceError> for Error {
    fn from(err: crate::operation::update_service::UpdateServiceError) -> Self {
        match err {
            crate::operation::update_service::UpdateServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service::UpdateServiceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service::UpdateServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_service::UpdateServiceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service::UpdateServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service::UpdateServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service::UpdateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_service_network::UpdateServiceNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_service_network::UpdateServiceNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_network::UpdateServiceNetworkError> for Error {
    fn from(err: crate::operation::update_service_network::UpdateServiceNetworkError) -> Self {
        match err {
            crate::operation::update_service_network::UpdateServiceNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service_network::UpdateServiceNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service_network::UpdateServiceNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_service_network::UpdateServiceNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_service_network::UpdateServiceNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service_network::UpdateServiceNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service_network::UpdateServiceNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError> for Error {
    fn from(err: crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError) -> Self {
        match err {
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_target_group::UpdateTargetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_target_group::UpdateTargetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_target_group::UpdateTargetGroupError> for Error {
    fn from(err: crate::operation::update_target_group::UpdateTargetGroupError) -> Self {
        match err {
            crate::operation::update_target_group::UpdateTargetGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_target_group::UpdateTargetGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_target_group::UpdateTargetGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_target_group::UpdateTargetGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_target_group::UpdateTargetGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_target_group::UpdateTargetGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_target_group::UpdateTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
