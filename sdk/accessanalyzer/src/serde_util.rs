// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_access_preview_output_correct_errors(
    mut builder: crate::operation::create_access_preview::builders::CreateAccessPreviewOutputBuilder,
) -> crate::operation::create_access_preview::builders::CreateAccessPreviewOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_access_preview_output_correct_errors(
    mut builder: crate::operation::get_access_preview::builders::GetAccessPreviewOutputBuilder,
) -> crate::operation::get_access_preview::builders::GetAccessPreviewOutputBuilder {
    if builder.access_preview.is_none() {
        builder.access_preview = {
            let builder = crate::types::builders::AccessPreviewBuilder::default();
            crate::serde_util::access_preview_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_analyzer_output_correct_errors(
    mut builder: crate::operation::get_analyzer::builders::GetAnalyzerOutputBuilder,
) -> crate::operation::get_analyzer::builders::GetAnalyzerOutputBuilder {
    if builder.analyzer.is_none() {
        builder.analyzer = {
            let builder = crate::types::builders::AnalyzerSummaryBuilder::default();
            crate::serde_util::analyzer_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_archive_rule_output_correct_errors(
    mut builder: crate::operation::get_archive_rule::builders::GetArchiveRuleOutputBuilder,
) -> crate::operation::get_archive_rule::builders::GetArchiveRuleOutputBuilder {
    if builder.archive_rule.is_none() {
        builder.archive_rule = {
            let builder = crate::types::builders::ArchiveRuleSummaryBuilder::default();
            crate::serde_util::archive_rule_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_generated_policy_output_correct_errors(
    mut builder: crate::operation::get_generated_policy::builders::GetGeneratedPolicyOutputBuilder,
) -> crate::operation::get_generated_policy::builders::GetGeneratedPolicyOutputBuilder {
    if builder.job_details.is_none() {
        builder.job_details = {
            let builder = crate::types::builders::JobDetailsBuilder::default();
            crate::serde_util::job_details_correct_errors(builder).build().ok()
        }
    }
    if builder.generated_policy_result.is_none() {
        builder.generated_policy_result = {
            let builder = crate::types::builders::GeneratedPolicyResultBuilder::default();
            Some(crate::serde_util::generated_policy_result_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_access_preview_findings_output_correct_errors(
    mut builder: crate::operation::list_access_preview_findings::builders::ListAccessPreviewFindingsOutputBuilder,
) -> crate::operation::list_access_preview_findings::builders::ListAccessPreviewFindingsOutputBuilder {
    if builder.findings.is_none() {
        builder.findings = Some(Default::default())
    }
    builder
}

pub(crate) fn list_access_previews_output_correct_errors(
    mut builder: crate::operation::list_access_previews::builders::ListAccessPreviewsOutputBuilder,
) -> crate::operation::list_access_previews::builders::ListAccessPreviewsOutputBuilder {
    if builder.access_previews.is_none() {
        builder.access_previews = Some(Default::default())
    }
    builder
}

pub(crate) fn list_analyzed_resources_output_correct_errors(
    mut builder: crate::operation::list_analyzed_resources::builders::ListAnalyzedResourcesOutputBuilder,
) -> crate::operation::list_analyzed_resources::builders::ListAnalyzedResourcesOutputBuilder {
    if builder.analyzed_resources.is_none() {
        builder.analyzed_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_analyzers_output_correct_errors(
    mut builder: crate::operation::list_analyzers::builders::ListAnalyzersOutputBuilder,
) -> crate::operation::list_analyzers::builders::ListAnalyzersOutputBuilder {
    if builder.analyzers.is_none() {
        builder.analyzers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_archive_rules_output_correct_errors(
    mut builder: crate::operation::list_archive_rules::builders::ListArchiveRulesOutputBuilder,
) -> crate::operation::list_archive_rules::builders::ListArchiveRulesOutputBuilder {
    if builder.archive_rules.is_none() {
        builder.archive_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn list_findings_output_correct_errors(
    mut builder: crate::operation::list_findings::builders::ListFindingsOutputBuilder,
) -> crate::operation::list_findings::builders::ListFindingsOutputBuilder {
    if builder.findings.is_none() {
        builder.findings = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policy_generations_output_correct_errors(
    mut builder: crate::operation::list_policy_generations::builders::ListPolicyGenerationsOutputBuilder,
) -> crate::operation::list_policy_generations::builders::ListPolicyGenerationsOutputBuilder {
    if builder.policy_generations.is_none() {
        builder.policy_generations = Some(Default::default())
    }
    builder
}

pub(crate) fn start_policy_generation_output_correct_errors(
    mut builder: crate::operation::start_policy_generation::builders::StartPolicyGenerationOutputBuilder,
) -> crate::operation::start_policy_generation::builders::StartPolicyGenerationOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validate_policy_output_correct_errors(
    mut builder: crate::operation::validate_policy::builders::ValidatePolicyOutputBuilder,
) -> crate::operation::validate_policy::builders::ValidatePolicyOutputBuilder {
    if builder.findings.is_none() {
        builder.findings = Some(Default::default())
    }
    builder
}

pub(crate) fn access_preview_correct_errors(
    mut builder: crate::types::builders::AccessPreviewBuilder,
) -> crate::types::builders::AccessPreviewBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.analyzer_arn.is_none() {
        builder.analyzer_arn = Some(Default::default())
    }
    if builder.configurations.is_none() {
        builder.configurations = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AccessPreviewStatus>().ok()
    }
    builder
}

pub(crate) fn analyzer_summary_correct_errors(
    mut builder: crate::types::builders::AnalyzerSummaryBuilder,
) -> crate::types::builders::AnalyzerSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AnalyzerStatus>().ok()
    }
    builder
}

pub(crate) fn archive_rule_summary_correct_errors(
    mut builder: crate::types::builders::ArchiveRuleSummaryBuilder,
) -> crate::types::builders::ArchiveRuleSummaryBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.filter.is_none() {
        builder.filter = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn job_details_correct_errors(mut builder: crate::types::builders::JobDetailsBuilder) -> crate::types::builders::JobDetailsBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.started_on.is_none() {
        builder.started_on = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn generated_policy_result_correct_errors(
    mut builder: crate::types::builders::GeneratedPolicyResultBuilder,
) -> crate::types::builders::GeneratedPolicyResultBuilder {
    if builder.properties.is_none() {
        builder.properties = {
            let builder = crate::types::builders::GeneratedPolicyPropertiesBuilder::default();
            crate::serde_util::generated_policy_properties_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn analyzed_resource_correct_errors(
    mut builder: crate::types::builders::AnalyzedResourceBuilder,
) -> crate::types::builders::AnalyzedResourceBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.analyzed_at.is_none() {
        builder.analyzed_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.is_public.is_none() {
        builder.is_public = Some(Default::default())
    }
    if builder.resource_owner_account.is_none() {
        builder.resource_owner_account = Some(Default::default())
    }
    builder
}

pub(crate) fn finding_correct_errors(mut builder: crate::types::builders::FindingBuilder) -> crate::types::builders::FindingBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.analyzed_at.is_none() {
        builder.analyzed_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FindingStatus>().ok()
    }
    if builder.resource_owner_account.is_none() {
        builder.resource_owner_account = Some(Default::default())
    }
    builder
}

pub(crate) fn generated_policy_properties_correct_errors(
    mut builder: crate::types::builders::GeneratedPolicyPropertiesBuilder,
) -> crate::types::builders::GeneratedPolicyPropertiesBuilder {
    if builder.principal_arn.is_none() {
        builder.principal_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn access_preview_finding_correct_errors(
    mut builder: crate::types::builders::AccessPreviewFindingBuilder,
) -> crate::types::builders::AccessPreviewFindingBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.change_type.is_none() {
        builder.change_type = "no value was set".parse::<crate::types::FindingChangeType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FindingStatus>().ok()
    }
    if builder.resource_owner_account.is_none() {
        builder.resource_owner_account = Some(Default::default())
    }
    builder
}

pub(crate) fn access_preview_status_reason_correct_errors(
    mut builder: crate::types::builders::AccessPreviewStatusReasonBuilder,
) -> crate::types::builders::AccessPreviewStatusReasonBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::AccessPreviewStatusReasonCode>().ok()
    }
    builder
}

pub(crate) fn access_preview_summary_correct_errors(
    mut builder: crate::types::builders::AccessPreviewSummaryBuilder,
) -> crate::types::builders::AccessPreviewSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.analyzer_arn.is_none() {
        builder.analyzer_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AccessPreviewStatus>().ok()
    }
    builder
}

pub(crate) fn analyzed_resource_summary_correct_errors(
    mut builder: crate::types::builders::AnalyzedResourceSummaryBuilder,
) -> crate::types::builders::AnalyzedResourceSummaryBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.resource_owner_account.is_none() {
        builder.resource_owner_account = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn finding_summary_correct_errors(
    mut builder: crate::types::builders::FindingSummaryBuilder,
) -> crate::types::builders::FindingSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.analyzed_at.is_none() {
        builder.analyzed_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FindingStatus>().ok()
    }
    if builder.resource_owner_account.is_none() {
        builder.resource_owner_account = Some(Default::default())
    }
    builder
}

pub(crate) fn job_error_correct_errors(mut builder: crate::types::builders::JobErrorBuilder) -> crate::types::builders::JobErrorBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::JobErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_generation_correct_errors(
    mut builder: crate::types::builders::PolicyGenerationBuilder,
) -> crate::types::builders::PolicyGenerationBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.principal_arn.is_none() {
        builder.principal_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.started_on.is_none() {
        builder.started_on = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn status_reason_correct_errors(mut builder: crate::types::builders::StatusReasonBuilder) -> crate::types::builders::StatusReasonBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::ReasonCode>().ok()
    }
    builder
}

pub(crate) fn validate_policy_finding_correct_errors(
    mut builder: crate::types::builders::ValidatePolicyFindingBuilder,
) -> crate::types::builders::ValidatePolicyFindingBuilder {
    if builder.finding_details.is_none() {
        builder.finding_details = Some(Default::default())
    }
    if builder.finding_type.is_none() {
        builder.finding_type = "no value was set".parse::<crate::types::ValidatePolicyFindingType>().ok()
    }
    if builder.issue_code.is_none() {
        builder.issue_code = Some(Default::default())
    }
    if builder.learn_more_link.is_none() {
        builder.learn_more_link = Some(Default::default())
    }
    if builder.locations.is_none() {
        builder.locations = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_trail_properties_correct_errors(
    mut builder: crate::types::builders::CloudTrailPropertiesBuilder,
) -> crate::types::builders::CloudTrailPropertiesBuilder {
    if builder.trail_properties.is_none() {
        builder.trail_properties = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn finding_source_correct_errors(
    mut builder: crate::types::builders::FindingSourceBuilder,
) -> crate::types::builders::FindingSourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FindingSourceType>().ok()
    }
    builder
}

pub(crate) fn generated_policy_correct_errors(
    mut builder: crate::types::builders::GeneratedPolicyBuilder,
) -> crate::types::builders::GeneratedPolicyBuilder {
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    builder
}

pub(crate) fn location_correct_errors(mut builder: crate::types::builders::LocationBuilder) -> crate::types::builders::LocationBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.span.is_none() {
        builder.span = {
            let builder = crate::types::builders::SpanBuilder::default();
            Some(crate::serde_util::span_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn s3_public_access_block_configuration_correct_errors(
    mut builder: crate::types::builders::S3PublicAccessBlockConfigurationBuilder,
) -> crate::types::builders::S3PublicAccessBlockConfigurationBuilder {
    if builder.ignore_public_acls.is_none() {
        builder.ignore_public_acls = Some(Default::default())
    }
    if builder.restrict_public_buckets.is_none() {
        builder.restrict_public_buckets = Some(Default::default())
    }
    builder
}

pub(crate) fn span_correct_errors(mut builder: crate::types::builders::SpanBuilder) -> crate::types::builders::SpanBuilder {
    if builder.start.is_none() {
        builder.start = {
            let builder = crate::types::builders::PositionBuilder::default();
            crate::serde_util::position_correct_errors(builder).build().ok()
        }
    }
    if builder.end.is_none() {
        builder.end = {
            let builder = crate::types::builders::PositionBuilder::default();
            crate::serde_util::position_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn trail_properties_correct_errors(
    mut builder: crate::types::builders::TrailPropertiesBuilder,
) -> crate::types::builders::TrailPropertiesBuilder {
    if builder.cloud_trail_arn.is_none() {
        builder.cloud_trail_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_grant_configuration_correct_errors(
    mut builder: crate::types::builders::KmsGrantConfigurationBuilder,
) -> crate::types::builders::KmsGrantConfigurationBuilder {
    if builder.operations.is_none() {
        builder.operations = Some(Default::default())
    }
    if builder.grantee_principal.is_none() {
        builder.grantee_principal = Some(Default::default())
    }
    if builder.issuing_account.is_none() {
        builder.issuing_account = Some(Default::default())
    }
    builder
}

pub(crate) fn position_correct_errors(mut builder: crate::types::builders::PositionBuilder) -> crate::types::builders::PositionBuilder {
    if builder.line.is_none() {
        builder.line = Some(Default::default())
    }
    if builder.column.is_none() {
        builder.column = Some(Default::default())
    }
    if builder.offset.is_none() {
        builder.offset = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_acl_grant_configuration_correct_errors(
    mut builder: crate::types::builders::S3BucketAclGrantConfigurationBuilder,
) -> crate::types::builders::S3BucketAclGrantConfigurationBuilder {
    if builder.permission.is_none() {
        builder.permission = "no value was set".parse::<crate::types::AclPermission>().ok()
    }
    if builder.grantee.is_none() {
        builder.grantee = Some(crate::types::AclGrantee::Unknown)
    }
    builder
}

pub(crate) fn substring_correct_errors(mut builder: crate::types::builders::SubstringBuilder) -> crate::types::builders::SubstringBuilder {
    if builder.start.is_none() {
        builder.start = Some(Default::default())
    }
    if builder.length.is_none() {
        builder.length = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationBuilder,
) -> crate::types::builders::VpcConfigurationBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    builder
}
