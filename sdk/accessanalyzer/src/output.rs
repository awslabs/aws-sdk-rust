// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnalyzersOutput {
    /// <p>The analyzers retrieved.</p>
    #[doc(hidden)]
    pub analyzers: std::option::Option<std::vec::Vec<crate::model::AnalyzerSummary>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnalyzersOutput {
    /// <p>The analyzers retrieved.</p>
    pub fn analyzers(&self) -> std::option::Option<&[crate::model::AnalyzerSummary]> {
        self.analyzers.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnalyzersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAnalyzersOutput`](crate::output::ListAnalyzersOutput).
pub mod list_analyzers_output {

    /// A builder for [`ListAnalyzersOutput`](crate::output::ListAnalyzersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analyzers: std::option::Option<std::vec::Vec<crate::model::AnalyzerSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `analyzers`.
        ///
        /// To override the contents of this collection use [`set_analyzers`](Self::set_analyzers).
        ///
        /// <p>The analyzers retrieved.</p>
        pub fn analyzers(mut self, input: crate::model::AnalyzerSummary) -> Self {
            let mut v = self.analyzers.unwrap_or_default();
            v.push(input);
            self.analyzers = Some(v);
            self
        }
        /// <p>The analyzers retrieved.</p>
        pub fn set_analyzers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnalyzerSummary>>,
        ) -> Self {
            self.analyzers = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnalyzersOutput`](crate::output::ListAnalyzersOutput).
        pub fn build(self) -> crate::output::ListAnalyzersOutput {
            crate::output::ListAnalyzersOutput {
                analyzers: self.analyzers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAnalyzersOutput {
    /// Creates a new builder-style object to manufacture [`ListAnalyzersOutput`](crate::output::ListAnalyzersOutput).
    pub fn builder() -> crate::output::list_analyzers_output::Builder {
        crate::output::list_analyzers_output::Builder::default()
    }
}

/// <p>The response to the request to create an analyzer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAnalyzerOutput {
    /// <p>The ARN of the analyzer that was created by the request.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAnalyzerOutput {
    /// <p>The ARN of the analyzer that was created by the request.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAnalyzerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateAnalyzerOutput`](crate::output::CreateAnalyzerOutput).
pub mod create_analyzer_output {

    /// A builder for [`CreateAnalyzerOutput`](crate::output::CreateAnalyzerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the analyzer that was created by the request.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the analyzer that was created by the request.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAnalyzerOutput`](crate::output::CreateAnalyzerOutput).
        pub fn build(self) -> crate::output::CreateAnalyzerOutput {
            crate::output::CreateAnalyzerOutput {
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateAnalyzerOutput {
    /// Creates a new builder-style object to manufacture [`CreateAnalyzerOutput`](crate::output::CreateAnalyzerOutput).
    pub fn builder() -> crate::output::create_analyzer_output::Builder {
        crate::output::create_analyzer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAnalyzerOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAnalyzerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAnalyzerOutput`](crate::output::DeleteAnalyzerOutput).
pub mod delete_analyzer_output {

    /// A builder for [`DeleteAnalyzerOutput`](crate::output::DeleteAnalyzerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAnalyzerOutput`](crate::output::DeleteAnalyzerOutput).
        pub fn build(self) -> crate::output::DeleteAnalyzerOutput {
            crate::output::DeleteAnalyzerOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAnalyzerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAnalyzerOutput`](crate::output::DeleteAnalyzerOutput).
    pub fn builder() -> crate::output::delete_analyzer_output::Builder {
        crate::output::delete_analyzer_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnalyzerOutput {
    /// <p>An <code>AnalyzerSummary</code> object that contains information about the analyzer.</p>
    #[doc(hidden)]
    pub analyzer: std::option::Option<crate::model::AnalyzerSummary>,
    _request_id: Option<String>,
}
impl GetAnalyzerOutput {
    /// <p>An <code>AnalyzerSummary</code> object that contains information about the analyzer.</p>
    pub fn analyzer(&self) -> std::option::Option<&crate::model::AnalyzerSummary> {
        self.analyzer.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAnalyzerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAnalyzerOutput`](crate::output::GetAnalyzerOutput).
pub mod get_analyzer_output {

    /// A builder for [`GetAnalyzerOutput`](crate::output::GetAnalyzerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analyzer: std::option::Option<crate::model::AnalyzerSummary>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An <code>AnalyzerSummary</code> object that contains information about the analyzer.</p>
        pub fn analyzer(mut self, input: crate::model::AnalyzerSummary) -> Self {
            self.analyzer = Some(input);
            self
        }
        /// <p>An <code>AnalyzerSummary</code> object that contains information about the analyzer.</p>
        pub fn set_analyzer(
            mut self,
            input: std::option::Option<crate::model::AnalyzerSummary>,
        ) -> Self {
            self.analyzer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAnalyzerOutput`](crate::output::GetAnalyzerOutput).
        pub fn build(self) -> crate::output::GetAnalyzerOutput {
            crate::output::GetAnalyzerOutput {
                analyzer: self.analyzer,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAnalyzerOutput {
    /// Creates a new builder-style object to manufacture [`GetAnalyzerOutput`](crate::output::GetAnalyzerOutput).
    pub fn builder() -> crate::output::get_analyzer_output::Builder {
        crate::output::get_analyzer_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListArchiveRulesOutput {
    /// <p>A list of archive rules created for the specified analyzer.</p>
    #[doc(hidden)]
    pub archive_rules: std::option::Option<std::vec::Vec<crate::model::ArchiveRuleSummary>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListArchiveRulesOutput {
    /// <p>A list of archive rules created for the specified analyzer.</p>
    pub fn archive_rules(&self) -> std::option::Option<&[crate::model::ArchiveRuleSummary]> {
        self.archive_rules.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListArchiveRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListArchiveRulesOutput`](crate::output::ListArchiveRulesOutput).
pub mod list_archive_rules_output {

    /// A builder for [`ListArchiveRulesOutput`](crate::output::ListArchiveRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) archive_rules:
            std::option::Option<std::vec::Vec<crate::model::ArchiveRuleSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `archive_rules`.
        ///
        /// To override the contents of this collection use [`set_archive_rules`](Self::set_archive_rules).
        ///
        /// <p>A list of archive rules created for the specified analyzer.</p>
        pub fn archive_rules(mut self, input: crate::model::ArchiveRuleSummary) -> Self {
            let mut v = self.archive_rules.unwrap_or_default();
            v.push(input);
            self.archive_rules = Some(v);
            self
        }
        /// <p>A list of archive rules created for the specified analyzer.</p>
        pub fn set_archive_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ArchiveRuleSummary>>,
        ) -> Self {
            self.archive_rules = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListArchiveRulesOutput`](crate::output::ListArchiveRulesOutput).
        pub fn build(self) -> crate::output::ListArchiveRulesOutput {
            crate::output::ListArchiveRulesOutput {
                archive_rules: self.archive_rules,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListArchiveRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListArchiveRulesOutput`](crate::output::ListArchiveRulesOutput).
    pub fn builder() -> crate::output::list_archive_rules_output::Builder {
        crate::output::list_archive_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateArchiveRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateArchiveRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateArchiveRuleOutput`](crate::output::CreateArchiveRuleOutput).
pub mod create_archive_rule_output {

    /// A builder for [`CreateArchiveRuleOutput`](crate::output::CreateArchiveRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateArchiveRuleOutput`](crate::output::CreateArchiveRuleOutput).
        pub fn build(self) -> crate::output::CreateArchiveRuleOutput {
            crate::output::CreateArchiveRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateArchiveRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateArchiveRuleOutput`](crate::output::CreateArchiveRuleOutput).
    pub fn builder() -> crate::output::create_archive_rule_output::Builder {
        crate::output::create_archive_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteArchiveRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteArchiveRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteArchiveRuleOutput`](crate::output::DeleteArchiveRuleOutput).
pub mod delete_archive_rule_output {

    /// A builder for [`DeleteArchiveRuleOutput`](crate::output::DeleteArchiveRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteArchiveRuleOutput`](crate::output::DeleteArchiveRuleOutput).
        pub fn build(self) -> crate::output::DeleteArchiveRuleOutput {
            crate::output::DeleteArchiveRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteArchiveRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteArchiveRuleOutput`](crate::output::DeleteArchiveRuleOutput).
    pub fn builder() -> crate::output::delete_archive_rule_output::Builder {
        crate::output::delete_archive_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateArchiveRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateArchiveRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateArchiveRuleOutput`](crate::output::UpdateArchiveRuleOutput).
pub mod update_archive_rule_output {

    /// A builder for [`UpdateArchiveRuleOutput`](crate::output::UpdateArchiveRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateArchiveRuleOutput`](crate::output::UpdateArchiveRuleOutput).
        pub fn build(self) -> crate::output::UpdateArchiveRuleOutput {
            crate::output::UpdateArchiveRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateArchiveRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateArchiveRuleOutput`](crate::output::UpdateArchiveRuleOutput).
    pub fn builder() -> crate::output::update_archive_rule_output::Builder {
        crate::output::update_archive_rule_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetArchiveRuleOutput {
    /// <p>Contains information about an archive rule.</p>
    #[doc(hidden)]
    pub archive_rule: std::option::Option<crate::model::ArchiveRuleSummary>,
    _request_id: Option<String>,
}
impl GetArchiveRuleOutput {
    /// <p>Contains information about an archive rule.</p>
    pub fn archive_rule(&self) -> std::option::Option<&crate::model::ArchiveRuleSummary> {
        self.archive_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetArchiveRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetArchiveRuleOutput`](crate::output::GetArchiveRuleOutput).
pub mod get_archive_rule_output {

    /// A builder for [`GetArchiveRuleOutput`](crate::output::GetArchiveRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) archive_rule: std::option::Option<crate::model::ArchiveRuleSummary>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Contains information about an archive rule.</p>
        pub fn archive_rule(mut self, input: crate::model::ArchiveRuleSummary) -> Self {
            self.archive_rule = Some(input);
            self
        }
        /// <p>Contains information about an archive rule.</p>
        pub fn set_archive_rule(
            mut self,
            input: std::option::Option<crate::model::ArchiveRuleSummary>,
        ) -> Self {
            self.archive_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetArchiveRuleOutput`](crate::output::GetArchiveRuleOutput).
        pub fn build(self) -> crate::output::GetArchiveRuleOutput {
            crate::output::GetArchiveRuleOutput {
                archive_rule: self.archive_rule,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetArchiveRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetArchiveRuleOutput`](crate::output::GetArchiveRuleOutput).
    pub fn builder() -> crate::output::get_archive_rule_output::Builder {
        crate::output::get_archive_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidatePolicyOutput {
    /// <p>The list of findings in a policy returned by IAM Access Analyzer based on its suite of policy checks.</p>
    #[doc(hidden)]
    pub findings: std::option::Option<std::vec::Vec<crate::model::ValidatePolicyFinding>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ValidatePolicyOutput {
    /// <p>The list of findings in a policy returned by IAM Access Analyzer based on its suite of policy checks.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::ValidatePolicyFinding]> {
        self.findings.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ValidatePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ValidatePolicyOutput`](crate::output::ValidatePolicyOutput).
pub mod validate_policy_output {

    /// A builder for [`ValidatePolicyOutput`](crate::output::ValidatePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings:
            std::option::Option<std::vec::Vec<crate::model::ValidatePolicyFinding>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>The list of findings in a policy returned by IAM Access Analyzer based on its suite of policy checks.</p>
        pub fn findings(mut self, input: crate::model::ValidatePolicyFinding) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input);
            self.findings = Some(v);
            self
        }
        /// <p>The list of findings in a policy returned by IAM Access Analyzer based on its suite of policy checks.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ValidatePolicyFinding>>,
        ) -> Self {
            self.findings = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ValidatePolicyOutput`](crate::output::ValidatePolicyOutput).
        pub fn build(self) -> crate::output::ValidatePolicyOutput {
            crate::output::ValidatePolicyOutput {
                findings: self.findings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ValidatePolicyOutput {
    /// Creates a new builder-style object to manufacture [`ValidatePolicyOutput`](crate::output::ValidatePolicyOutput).
    pub fn builder() -> crate::output::validate_policy_output::Builder {
        crate::output::validate_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFindingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateFindingsOutput`](crate::output::UpdateFindingsOutput).
pub mod update_findings_output {

    /// A builder for [`UpdateFindingsOutput`](crate::output::UpdateFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateFindingsOutput`](crate::output::UpdateFindingsOutput).
        pub fn build(self) -> crate::output::UpdateFindingsOutput {
            crate::output::UpdateFindingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateFindingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsOutput`](crate::output::UpdateFindingsOutput).
    pub fn builder() -> crate::output::update_findings_output::Builder {
        crate::output::update_findings_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartResourceScanOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartResourceScanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartResourceScanOutput`](crate::output::StartResourceScanOutput).
pub mod start_resource_scan_output {

    /// A builder for [`StartResourceScanOutput`](crate::output::StartResourceScanOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartResourceScanOutput`](crate::output::StartResourceScanOutput).
        pub fn build(self) -> crate::output::StartResourceScanOutput {
            crate::output::StartResourceScanOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl StartResourceScanOutput {
    /// Creates a new builder-style object to manufacture [`StartResourceScanOutput`](crate::output::StartResourceScanOutput).
    pub fn builder() -> crate::output::start_resource_scan_output::Builder {
        crate::output::start_resource_scan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartPolicyGenerationOutput {
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartPolicyGenerationOutput {
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartPolicyGenerationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartPolicyGenerationOutput`](crate::output::StartPolicyGenerationOutput).
pub mod start_policy_generation_output {

    /// A builder for [`StartPolicyGenerationOutput`](crate::output::StartPolicyGenerationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartPolicyGenerationOutput`](crate::output::StartPolicyGenerationOutput).
        pub fn build(self) -> crate::output::StartPolicyGenerationOutput {
            crate::output::StartPolicyGenerationOutput {
                job_id: self.job_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartPolicyGenerationOutput {
    /// Creates a new builder-style object to manufacture [`StartPolicyGenerationOutput`](crate::output::StartPolicyGenerationOutput).
    pub fn builder() -> crate::output::start_policy_generation_output::Builder {
        crate::output::start_policy_generation_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags that are applied to the specified resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags that are applied to the specified resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags that are applied to the specified resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags that are applied to the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPolicyGenerationsOutput {
    /// <p>A <code>PolicyGeneration</code> object that contains details about the generated policy.</p>
    #[doc(hidden)]
    pub policy_generations: std::option::Option<std::vec::Vec<crate::model::PolicyGeneration>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPolicyGenerationsOutput {
    /// <p>A <code>PolicyGeneration</code> object that contains details about the generated policy.</p>
    pub fn policy_generations(&self) -> std::option::Option<&[crate::model::PolicyGeneration]> {
        self.policy_generations.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPolicyGenerationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListPolicyGenerationsOutput`](crate::output::ListPolicyGenerationsOutput).
pub mod list_policy_generations_output {

    /// A builder for [`ListPolicyGenerationsOutput`](crate::output::ListPolicyGenerationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_generations:
            std::option::Option<std::vec::Vec<crate::model::PolicyGeneration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `policy_generations`.
        ///
        /// To override the contents of this collection use [`set_policy_generations`](Self::set_policy_generations).
        ///
        /// <p>A <code>PolicyGeneration</code> object that contains details about the generated policy.</p>
        pub fn policy_generations(mut self, input: crate::model::PolicyGeneration) -> Self {
            let mut v = self.policy_generations.unwrap_or_default();
            v.push(input);
            self.policy_generations = Some(v);
            self
        }
        /// <p>A <code>PolicyGeneration</code> object that contains details about the generated policy.</p>
        pub fn set_policy_generations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PolicyGeneration>>,
        ) -> Self {
            self.policy_generations = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPolicyGenerationsOutput`](crate::output::ListPolicyGenerationsOutput).
        pub fn build(self) -> crate::output::ListPolicyGenerationsOutput {
            crate::output::ListPolicyGenerationsOutput {
                policy_generations: self.policy_generations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListPolicyGenerationsOutput {
    /// Creates a new builder-style object to manufacture [`ListPolicyGenerationsOutput`](crate::output::ListPolicyGenerationsOutput).
    pub fn builder() -> crate::output::list_policy_generations_output::Builder {
        crate::output::list_policy_generations_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFindingsOutput {
    /// <p>A list of findings retrieved from the analyzer that match the filter criteria specified, if any.</p>
    #[doc(hidden)]
    pub findings: std::option::Option<std::vec::Vec<crate::model::FindingSummary>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFindingsOutput {
    /// <p>A list of findings retrieved from the analyzer that match the filter criteria specified, if any.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::FindingSummary]> {
        self.findings.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFindingsOutput`](crate::output::ListFindingsOutput).
pub mod list_findings_output {

    /// A builder for [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings: std::option::Option<std::vec::Vec<crate::model::FindingSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>A list of findings retrieved from the analyzer that match the filter criteria specified, if any.</p>
        pub fn findings(mut self, input: crate::model::FindingSummary) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input);
            self.findings = Some(v);
            self
        }
        /// <p>A list of findings retrieved from the analyzer that match the filter criteria specified, if any.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FindingSummary>>,
        ) -> Self {
            self.findings = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFindingsOutput`](crate::output::ListFindingsOutput).
        pub fn build(self) -> crate::output::ListFindingsOutput {
            crate::output::ListFindingsOutput {
                findings: self.findings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    pub fn builder() -> crate::output::list_findings_output::Builder {
        crate::output::list_findings_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnalyzedResourcesOutput {
    /// <p>A list of resources that were analyzed.</p>
    #[doc(hidden)]
    pub analyzed_resources:
        std::option::Option<std::vec::Vec<crate::model::AnalyzedResourceSummary>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnalyzedResourcesOutput {
    /// <p>A list of resources that were analyzed.</p>
    pub fn analyzed_resources(
        &self,
    ) -> std::option::Option<&[crate::model::AnalyzedResourceSummary]> {
        self.analyzed_resources.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnalyzedResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAnalyzedResourcesOutput`](crate::output::ListAnalyzedResourcesOutput).
pub mod list_analyzed_resources_output {

    /// A builder for [`ListAnalyzedResourcesOutput`](crate::output::ListAnalyzedResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analyzed_resources:
            std::option::Option<std::vec::Vec<crate::model::AnalyzedResourceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `analyzed_resources`.
        ///
        /// To override the contents of this collection use [`set_analyzed_resources`](Self::set_analyzed_resources).
        ///
        /// <p>A list of resources that were analyzed.</p>
        pub fn analyzed_resources(mut self, input: crate::model::AnalyzedResourceSummary) -> Self {
            let mut v = self.analyzed_resources.unwrap_or_default();
            v.push(input);
            self.analyzed_resources = Some(v);
            self
        }
        /// <p>A list of resources that were analyzed.</p>
        pub fn set_analyzed_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnalyzedResourceSummary>>,
        ) -> Self {
            self.analyzed_resources = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnalyzedResourcesOutput`](crate::output::ListAnalyzedResourcesOutput).
        pub fn build(self) -> crate::output::ListAnalyzedResourcesOutput {
            crate::output::ListAnalyzedResourcesOutput {
                analyzed_resources: self.analyzed_resources,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAnalyzedResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListAnalyzedResourcesOutput`](crate::output::ListAnalyzedResourcesOutput).
    pub fn builder() -> crate::output::list_analyzed_resources_output::Builder {
        crate::output::list_analyzed_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccessPreviewsOutput {
    /// <p>A list of access previews retrieved for the analyzer.</p>
    #[doc(hidden)]
    pub access_previews: std::option::Option<std::vec::Vec<crate::model::AccessPreviewSummary>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAccessPreviewsOutput {
    /// <p>A list of access previews retrieved for the analyzer.</p>
    pub fn access_previews(&self) -> std::option::Option<&[crate::model::AccessPreviewSummary]> {
        self.access_previews.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAccessPreviewsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAccessPreviewsOutput`](crate::output::ListAccessPreviewsOutput).
pub mod list_access_previews_output {

    /// A builder for [`ListAccessPreviewsOutput`](crate::output::ListAccessPreviewsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_previews:
            std::option::Option<std::vec::Vec<crate::model::AccessPreviewSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `access_previews`.
        ///
        /// To override the contents of this collection use [`set_access_previews`](Self::set_access_previews).
        ///
        /// <p>A list of access previews retrieved for the analyzer.</p>
        pub fn access_previews(mut self, input: crate::model::AccessPreviewSummary) -> Self {
            let mut v = self.access_previews.unwrap_or_default();
            v.push(input);
            self.access_previews = Some(v);
            self
        }
        /// <p>A list of access previews retrieved for the analyzer.</p>
        pub fn set_access_previews(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccessPreviewSummary>>,
        ) -> Self {
            self.access_previews = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAccessPreviewsOutput`](crate::output::ListAccessPreviewsOutput).
        pub fn build(self) -> crate::output::ListAccessPreviewsOutput {
            crate::output::ListAccessPreviewsOutput {
                access_previews: self.access_previews,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAccessPreviewsOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessPreviewsOutput`](crate::output::ListAccessPreviewsOutput).
    pub fn builder() -> crate::output::list_access_previews_output::Builder {
        crate::output::list_access_previews_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAccessPreviewFindingsOutput {
    /// <p>A list of access preview findings that match the specified filter criteria.</p>
    #[doc(hidden)]
    pub findings: std::option::Option<std::vec::Vec<crate::model::AccessPreviewFinding>>,
    /// <p>A token used for pagination of results returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAccessPreviewFindingsOutput {
    /// <p>A list of access preview findings that match the specified filter criteria.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::AccessPreviewFinding]> {
        self.findings.as_deref()
    }
    /// <p>A token used for pagination of results returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAccessPreviewFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAccessPreviewFindingsOutput`](crate::output::ListAccessPreviewFindingsOutput).
pub mod list_access_preview_findings_output {

    /// A builder for [`ListAccessPreviewFindingsOutput`](crate::output::ListAccessPreviewFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings: std::option::Option<std::vec::Vec<crate::model::AccessPreviewFinding>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>A list of access preview findings that match the specified filter criteria.</p>
        pub fn findings(mut self, input: crate::model::AccessPreviewFinding) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input);
            self.findings = Some(v);
            self
        }
        /// <p>A list of access preview findings that match the specified filter criteria.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccessPreviewFinding>>,
        ) -> Self {
            self.findings = input;
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token used for pagination of results returned.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAccessPreviewFindingsOutput`](crate::output::ListAccessPreviewFindingsOutput).
        pub fn build(self) -> crate::output::ListAccessPreviewFindingsOutput {
            crate::output::ListAccessPreviewFindingsOutput {
                findings: self.findings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAccessPreviewFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessPreviewFindingsOutput`](crate::output::ListAccessPreviewFindingsOutput).
    pub fn builder() -> crate::output::list_access_preview_findings_output::Builder {
        crate::output::list_access_preview_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGeneratedPolicyOutput {
    /// <p>A <code>GeneratedPolicyDetails</code> object that contains details about the generated policy.</p>
    #[doc(hidden)]
    pub job_details: std::option::Option<crate::model::JobDetails>,
    /// <p>A <code>GeneratedPolicyResult</code> object that contains the generated policies and associated details.</p>
    #[doc(hidden)]
    pub generated_policy_result: std::option::Option<crate::model::GeneratedPolicyResult>,
    _request_id: Option<String>,
}
impl GetGeneratedPolicyOutput {
    /// <p>A <code>GeneratedPolicyDetails</code> object that contains details about the generated policy.</p>
    pub fn job_details(&self) -> std::option::Option<&crate::model::JobDetails> {
        self.job_details.as_ref()
    }
    /// <p>A <code>GeneratedPolicyResult</code> object that contains the generated policies and associated details.</p>
    pub fn generated_policy_result(
        &self,
    ) -> std::option::Option<&crate::model::GeneratedPolicyResult> {
        self.generated_policy_result.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetGeneratedPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetGeneratedPolicyOutput`](crate::output::GetGeneratedPolicyOutput).
pub mod get_generated_policy_output {

    /// A builder for [`GetGeneratedPolicyOutput`](crate::output::GetGeneratedPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_details: std::option::Option<crate::model::JobDetails>,
        pub(crate) generated_policy_result:
            std::option::Option<crate::model::GeneratedPolicyResult>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A <code>GeneratedPolicyDetails</code> object that contains details about the generated policy.</p>
        pub fn job_details(mut self, input: crate::model::JobDetails) -> Self {
            self.job_details = Some(input);
            self
        }
        /// <p>A <code>GeneratedPolicyDetails</code> object that contains details about the generated policy.</p>
        pub fn set_job_details(
            mut self,
            input: std::option::Option<crate::model::JobDetails>,
        ) -> Self {
            self.job_details = input;
            self
        }
        /// <p>A <code>GeneratedPolicyResult</code> object that contains the generated policies and associated details.</p>
        pub fn generated_policy_result(
            mut self,
            input: crate::model::GeneratedPolicyResult,
        ) -> Self {
            self.generated_policy_result = Some(input);
            self
        }
        /// <p>A <code>GeneratedPolicyResult</code> object that contains the generated policies and associated details.</p>
        pub fn set_generated_policy_result(
            mut self,
            input: std::option::Option<crate::model::GeneratedPolicyResult>,
        ) -> Self {
            self.generated_policy_result = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetGeneratedPolicyOutput`](crate::output::GetGeneratedPolicyOutput).
        pub fn build(self) -> crate::output::GetGeneratedPolicyOutput {
            crate::output::GetGeneratedPolicyOutput {
                job_details: self.job_details,
                generated_policy_result: self.generated_policy_result,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetGeneratedPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetGeneratedPolicyOutput`](crate::output::GetGeneratedPolicyOutput).
    pub fn builder() -> crate::output::get_generated_policy_output::Builder {
        crate::output::get_generated_policy_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingOutput {
    /// <p>A <code>finding</code> object that contains finding details.</p>
    #[doc(hidden)]
    pub finding: std::option::Option<crate::model::Finding>,
    _request_id: Option<String>,
}
impl GetFindingOutput {
    /// <p>A <code>finding</code> object that contains finding details.</p>
    pub fn finding(&self) -> std::option::Option<&crate::model::Finding> {
        self.finding.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFindingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingOutput`](crate::output::GetFindingOutput).
pub mod get_finding_output {

    /// A builder for [`GetFindingOutput`](crate::output::GetFindingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) finding: std::option::Option<crate::model::Finding>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A <code>finding</code> object that contains finding details.</p>
        pub fn finding(mut self, input: crate::model::Finding) -> Self {
            self.finding = Some(input);
            self
        }
        /// <p>A <code>finding</code> object that contains finding details.</p>
        pub fn set_finding(mut self, input: std::option::Option<crate::model::Finding>) -> Self {
            self.finding = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingOutput`](crate::output::GetFindingOutput).
        pub fn build(self) -> crate::output::GetFindingOutput {
            crate::output::GetFindingOutput {
                finding: self.finding,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingOutput`](crate::output::GetFindingOutput).
    pub fn builder() -> crate::output::get_finding_output::Builder {
        crate::output::get_finding_output::Builder::default()
    }
}

/// <p>The response to the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnalyzedResourceOutput {
    /// <p>An <code>AnalyzedResource</code> object that contains information that IAM Access Analyzer found when it analyzed the resource.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<crate::model::AnalyzedResource>,
    _request_id: Option<String>,
}
impl GetAnalyzedResourceOutput {
    /// <p>An <code>AnalyzedResource</code> object that contains information that IAM Access Analyzer found when it analyzed the resource.</p>
    pub fn resource(&self) -> std::option::Option<&crate::model::AnalyzedResource> {
        self.resource.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAnalyzedResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAnalyzedResourceOutput`](crate::output::GetAnalyzedResourceOutput).
pub mod get_analyzed_resource_output {

    /// A builder for [`GetAnalyzedResourceOutput`](crate::output::GetAnalyzedResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource: std::option::Option<crate::model::AnalyzedResource>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An <code>AnalyzedResource</code> object that contains information that IAM Access Analyzer found when it analyzed the resource.</p>
        pub fn resource(mut self, input: crate::model::AnalyzedResource) -> Self {
            self.resource = Some(input);
            self
        }
        /// <p>An <code>AnalyzedResource</code> object that contains information that IAM Access Analyzer found when it analyzed the resource.</p>
        pub fn set_resource(
            mut self,
            input: std::option::Option<crate::model::AnalyzedResource>,
        ) -> Self {
            self.resource = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAnalyzedResourceOutput`](crate::output::GetAnalyzedResourceOutput).
        pub fn build(self) -> crate::output::GetAnalyzedResourceOutput {
            crate::output::GetAnalyzedResourceOutput {
                resource: self.resource,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAnalyzedResourceOutput {
    /// Creates a new builder-style object to manufacture [`GetAnalyzedResourceOutput`](crate::output::GetAnalyzedResourceOutput).
    pub fn builder() -> crate::output::get_analyzed_resource_output::Builder {
        crate::output::get_analyzed_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccessPreviewOutput {
    /// <p>An object that contains information about the access preview.</p>
    #[doc(hidden)]
    pub access_preview: std::option::Option<crate::model::AccessPreview>,
    _request_id: Option<String>,
}
impl GetAccessPreviewOutput {
    /// <p>An object that contains information about the access preview.</p>
    pub fn access_preview(&self) -> std::option::Option<&crate::model::AccessPreview> {
        self.access_preview.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccessPreviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAccessPreviewOutput`](crate::output::GetAccessPreviewOutput).
pub mod get_access_preview_output {

    /// A builder for [`GetAccessPreviewOutput`](crate::output::GetAccessPreviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_preview: std::option::Option<crate::model::AccessPreview>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An object that contains information about the access preview.</p>
        pub fn access_preview(mut self, input: crate::model::AccessPreview) -> Self {
            self.access_preview = Some(input);
            self
        }
        /// <p>An object that contains information about the access preview.</p>
        pub fn set_access_preview(
            mut self,
            input: std::option::Option<crate::model::AccessPreview>,
        ) -> Self {
            self.access_preview = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAccessPreviewOutput`](crate::output::GetAccessPreviewOutput).
        pub fn build(self) -> crate::output::GetAccessPreviewOutput {
            crate::output::GetAccessPreviewOutput {
                access_preview: self.access_preview,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAccessPreviewOutput {
    /// Creates a new builder-style object to manufacture [`GetAccessPreviewOutput`](crate::output::GetAccessPreviewOutput).
    pub fn builder() -> crate::output::get_access_preview_output::Builder {
        crate::output::get_access_preview_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAccessPreviewOutput {
    /// <p>The unique ID for the access preview.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAccessPreviewOutput {
    /// <p>The unique ID for the access preview.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAccessPreviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateAccessPreviewOutput`](crate::output::CreateAccessPreviewOutput).
pub mod create_access_preview_output {

    /// A builder for [`CreateAccessPreviewOutput`](crate::output::CreateAccessPreviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique ID for the access preview.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique ID for the access preview.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAccessPreviewOutput`](crate::output::CreateAccessPreviewOutput).
        pub fn build(self) -> crate::output::CreateAccessPreviewOutput {
            crate::output::CreateAccessPreviewOutput {
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateAccessPreviewOutput {
    /// Creates a new builder-style object to manufacture [`CreateAccessPreviewOutput`](crate::output::CreateAccessPreviewOutput).
    pub fn builder() -> crate::output::create_access_preview_output::Builder {
        crate::output::create_access_preview_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelPolicyGenerationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelPolicyGenerationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelPolicyGenerationOutput`](crate::output::CancelPolicyGenerationOutput).
pub mod cancel_policy_generation_output {

    /// A builder for [`CancelPolicyGenerationOutput`](crate::output::CancelPolicyGenerationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelPolicyGenerationOutput`](crate::output::CancelPolicyGenerationOutput).
        pub fn build(self) -> crate::output::CancelPolicyGenerationOutput {
            crate::output::CancelPolicyGenerationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelPolicyGenerationOutput {
    /// Creates a new builder-style object to manufacture [`CancelPolicyGenerationOutput`](crate::output::CancelPolicyGenerationOutput).
    pub fn builder() -> crate::output::cancel_policy_generation_output::Builder {
        crate::output::cancel_policy_generation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplyArchiveRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ApplyArchiveRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ApplyArchiveRuleOutput`](crate::output::ApplyArchiveRuleOutput).
pub mod apply_archive_rule_output {

    /// A builder for [`ApplyArchiveRuleOutput`](crate::output::ApplyArchiveRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ApplyArchiveRuleOutput`](crate::output::ApplyArchiveRuleOutput).
        pub fn build(self) -> crate::output::ApplyArchiveRuleOutput {
            crate::output::ApplyArchiveRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ApplyArchiveRuleOutput {
    /// Creates a new builder-style object to manufacture [`ApplyArchiveRuleOutput`](crate::output::ApplyArchiveRuleOutput).
    pub fn builder() -> crate::output::apply_archive_rule_output::Builder {
        crate::output::apply_archive_rule_output::Builder::default()
    }
}
