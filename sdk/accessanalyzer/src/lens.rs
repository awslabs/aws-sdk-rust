// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_access_preview_findings_output_next_token(
    input: &crate::output::ListAccessPreviewFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_access_previews_output_next_token(
    input: &crate::output::ListAccessPreviewsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_analyzed_resources_output_next_token(
    input: &crate::output::ListAnalyzedResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_analyzers_output_next_token(
    input: &crate::output::ListAnalyzersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_archive_rules_output_next_token(
    input: &crate::output::ListArchiveRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_findings_output_next_token(
    input: &crate::output::ListFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_policy_generations_output_next_token(
    input: &crate::output::ListPolicyGenerationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_validate_policy_output_next_token(
    input: &crate::output::ValidatePolicyOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_access_preview_findings_output_findings(
    input: crate::output::ListAccessPreviewFindingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccessPreviewFinding>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_access_previews_output_access_previews(
    input: crate::output::ListAccessPreviewsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AccessPreviewSummary>> {
    let input = match input.access_previews {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_analyzed_resources_output_analyzed_resources(
    input: crate::output::ListAnalyzedResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AnalyzedResourceSummary>> {
    let input = match input.analyzed_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_analyzers_output_analyzers(
    input: crate::output::ListAnalyzersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AnalyzerSummary>> {
    let input = match input.analyzers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_archive_rules_output_archive_rules(
    input: crate::output::ListArchiveRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ArchiveRuleSummary>> {
    let input = match input.archive_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_findings_output_findings(
    input: crate::output::ListFindingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FindingSummary>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_policy_generations_output_policy_generations(
    input: crate::output::ListPolicyGenerationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PolicyGeneration>> {
    let input = match input.policy_generations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_validate_policy_output_findings(
    input: crate::output::ValidatePolicyOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ValidatePolicyFinding>> {
    let input = match input.findings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
