// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_findings_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_findings::ListFindingsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.filter {
        #[allow(unused_mut)]
        let mut object_3 = object.key("filter").start_object();
        for (key_4, value_5) in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_criterion::ser_criterion(&mut object_6, value_5)?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.next_token {
        object.key("nextToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.sort {
        #[allow(unused_mut)]
        let mut object_10 = object.key("sort").start_object();
        crate::protocol_serde::shape_sort_criteria::ser_sort_criteria(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
