// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_bucket_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3BucketConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.bucket_policy {
        object.key("bucketPolicy").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bucket_acl_grants {
        let mut array_3 = object.key("bucketAclGrants").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_s3_bucket_acl_grant_configuration::ser_s3_bucket_acl_grant_configuration(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.bucket_public_access_block {
        #[allow(unused_mut)]
        let mut object_7 = object.key("bucketPublicAccessBlock").start_object();
        crate::protocol_serde::shape_s3_public_access_block_configuration::ser_s3_public_access_block_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.access_points {
        #[allow(unused_mut)]
        let mut object_9 = object.key("accessPoints").start_object();
        for (key_10, value_11) in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                crate::protocol_serde::shape_s3_access_point_configuration::ser_s3_access_point_configuration(&mut object_12, value_11)?;
                object_12.finish();
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_s3_bucket_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::S3BucketConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::S3BucketConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "bucketPolicy" => {
                                builder = builder.set_bucket_policy(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "bucketAclGrants" => {
                                builder = builder.set_bucket_acl_grants(
                                    crate::protocol_serde::shape_s3_bucket_acl_grant_configurations_list::de_s3_bucket_acl_grant_configurations_list(tokens)?
                                );
                            }
                            "bucketPublicAccessBlock" => {
                                builder = builder.set_bucket_public_access_block(
                                    crate::protocol_serde::shape_s3_public_access_block_configuration::de_s3_public_access_block_configuration(tokens)?
                                );
                            }
                            "accessPoints" => {
                                builder = builder.set_access_points(
                                    crate::protocol_serde::shape_s3_access_point_configurations_map::de_s3_access_point_configurations_map(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
