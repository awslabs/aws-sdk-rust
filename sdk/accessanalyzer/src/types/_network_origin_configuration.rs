// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. <code>VpcConfiguration</code> does not apply to multi-region access points. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum NetworkOriginConfiguration {
    /// <p>The configuration for the Amazon S3 access point or multi-region access point with an <code>Internet</code> origin.</p>
    InternetConfiguration(crate::types::InternetConfiguration),
    /// <p>The proposed virtual private cloud (VPC) configuration for the Amazon S3 access point. VPC configuration does not apply to multi-region access points. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_VpcConfiguration.html">VpcConfiguration</a>. </p>
    VpcConfiguration(crate::types::VpcConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl NetworkOriginConfiguration {
    /// Tries to convert the enum instance into [`InternetConfiguration`](crate::types::NetworkOriginConfiguration::InternetConfiguration), extracting the inner [`InternetConfiguration`](crate::types::InternetConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_internet_configuration(
        &self,
    ) -> std::result::Result<&crate::types::InternetConfiguration, &Self> {
        if let NetworkOriginConfiguration::InternetConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`InternetConfiguration`](crate::types::NetworkOriginConfiguration::InternetConfiguration).
    pub fn is_internet_configuration(&self) -> bool {
        self.as_internet_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`VpcConfiguration`](crate::types::NetworkOriginConfiguration::VpcConfiguration), extracting the inner [`VpcConfiguration`](crate::types::VpcConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_vpc_configuration(
        &self,
    ) -> std::result::Result<&crate::types::VpcConfiguration, &Self> {
        if let NetworkOriginConfiguration::VpcConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`VpcConfiguration`](crate::types::NetworkOriginConfiguration::VpcConfiguration).
    pub fn is_vpc_configuration(&self) -> bool {
        self.as_vpc_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
