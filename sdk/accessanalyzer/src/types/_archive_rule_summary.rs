// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an archive rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArchiveRuleSummary {
    /// <p>The name of the archive rule.</p>
    #[doc(hidden)]
    pub rule_name: std::option::Option<std::string::String>,
    /// <p>A filter used to define the archive rule.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Criterion>,
    >,
    /// <p>The time at which the archive rule was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the archive rule was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ArchiveRuleSummary {
    /// <p>The name of the archive rule.</p>
    pub fn rule_name(&self) -> std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>A filter used to define the archive rule.</p>
    pub fn filter(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Criterion>>
    {
        self.filter.as_ref()
    }
    /// <p>The time at which the archive rule was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time at which the archive rule was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ArchiveRuleSummary {
    /// Creates a new builder-style object to manufacture [`ArchiveRuleSummary`](crate::types::ArchiveRuleSummary).
    pub fn builder() -> crate::types::builders::ArchiveRuleSummaryBuilder {
        crate::types::builders::ArchiveRuleSummaryBuilder::default()
    }
}

/// A builder for [`ArchiveRuleSummary`](crate::types::ArchiveRuleSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArchiveRuleSummaryBuilder {
    pub(crate) rule_name: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Criterion>,
    >,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ArchiveRuleSummaryBuilder {
    /// <p>The name of the archive rule.</p>
    pub fn rule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_name = Some(input.into());
        self
    }
    /// <p>The name of the archive rule.</p>
    pub fn set_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// Adds a key-value pair to `filter`.
    ///
    /// To override the contents of this collection use [`set_filter`](Self::set_filter).
    ///
    /// <p>A filter used to define the archive rule.</p>
    pub fn filter(mut self, k: impl Into<std::string::String>, v: crate::types::Criterion) -> Self {
        let mut hash_map = self.filter.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.filter = Some(hash_map);
        self
    }
    /// <p>A filter used to define the archive rule.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Criterion>,
        >,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>The time at which the archive rule was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the archive rule was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the archive rule was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The time at which the archive rule was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`ArchiveRuleSummary`](crate::types::ArchiveRuleSummary).
    pub fn build(self) -> crate::types::ArchiveRuleSummary {
        crate::types::ArchiveRuleSummary {
            rule_name: self.rule_name,
            filter: self.filter,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
