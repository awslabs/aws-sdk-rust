// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed access control configuration for an Amazon SNS topic. You can propose a configuration for a new Amazon SNS topic or an existing Amazon SNS topic that you own by specifying the policy. If the configuration is for an existing Amazon SNS topic and you do not specify the Amazon SNS policy, then the access preview uses the existing Amazon SNS policy for the topic. If the access preview is for a new resource and you do not specify the policy, then the access preview assumes an Amazon SNS topic without a policy. To propose deletion of an existing Amazon SNS topic policy, you can specify an empty string for the Amazon SNS policy. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/api/API_Topic.html">Topic</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnsTopicConfiguration {
    /// <p>The JSON policy text that defines who can access an Amazon SNS topic. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy-use-cases.html">Example cases for Amazon SNS access control</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    #[doc(hidden)]
    pub topic_policy: std::option::Option<std::string::String>,
}
impl SnsTopicConfiguration {
    /// <p>The JSON policy text that defines who can access an Amazon SNS topic. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy-use-cases.html">Example cases for Amazon SNS access control</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    pub fn topic_policy(&self) -> std::option::Option<&str> {
        self.topic_policy.as_deref()
    }
}
impl SnsTopicConfiguration {
    /// Creates a new builder-style object to manufacture [`SnsTopicConfiguration`](crate::types::SnsTopicConfiguration).
    pub fn builder() -> crate::types::builders::SnsTopicConfigurationBuilder {
        crate::types::builders::SnsTopicConfigurationBuilder::default()
    }
}

/// A builder for [`SnsTopicConfiguration`](crate::types::SnsTopicConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnsTopicConfigurationBuilder {
    pub(crate) topic_policy: std::option::Option<std::string::String>,
}
impl SnsTopicConfigurationBuilder {
    /// <p>The JSON policy text that defines who can access an Amazon SNS topic. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy-use-cases.html">Example cases for Amazon SNS access control</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    pub fn topic_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_policy = Some(input.into());
        self
    }
    /// <p>The JSON policy text that defines who can access an Amazon SNS topic. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-access-policy-use-cases.html">Example cases for Amazon SNS access control</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    pub fn set_topic_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`SnsTopicConfiguration`](crate::types::SnsTopicConfiguration).
    pub fn build(self) -> crate::types::SnsTopicConfiguration {
        crate::types::SnsTopicConfiguration {
            topic_policy: self.topic_policy,
        }
    }
}
