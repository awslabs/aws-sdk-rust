// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the generated policy details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeneratedPolicyProperties {
    /// <p>This value is set to <code>true</code> if the generated policy contains all possible actions for a service that IAM Access Analyzer identified from the CloudTrail trail that you specified, and <code>false</code> otherwise.</p>
    pub is_complete: ::std::option::Option<bool>,
    /// <p>The ARN of the IAM entity (user or role) for which you are generating a policy.</p>
    pub principal_arn: ::std::string::String,
    /// <p>Lists details about the <code>Trail</code> used to generated policy.</p>
    pub cloud_trail_properties: ::std::option::Option<crate::types::CloudTrailProperties>,
}
impl GeneratedPolicyProperties {
    /// <p>This value is set to <code>true</code> if the generated policy contains all possible actions for a service that IAM Access Analyzer identified from the CloudTrail trail that you specified, and <code>false</code> otherwise.</p>
    pub fn is_complete(&self) -> ::std::option::Option<bool> {
        self.is_complete
    }
    /// <p>The ARN of the IAM entity (user or role) for which you are generating a policy.</p>
    pub fn principal_arn(&self) -> &str {
        use std::ops::Deref;
        self.principal_arn.deref()
    }
    /// <p>Lists details about the <code>Trail</code> used to generated policy.</p>
    pub fn cloud_trail_properties(&self) -> ::std::option::Option<&crate::types::CloudTrailProperties> {
        self.cloud_trail_properties.as_ref()
    }
}
impl GeneratedPolicyProperties {
    /// Creates a new builder-style object to manufacture [`GeneratedPolicyProperties`](crate::types::GeneratedPolicyProperties).
    pub fn builder() -> crate::types::builders::GeneratedPolicyPropertiesBuilder {
        crate::types::builders::GeneratedPolicyPropertiesBuilder::default()
    }
}

/// A builder for [`GeneratedPolicyProperties`](crate::types::GeneratedPolicyProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeneratedPolicyPropertiesBuilder {
    pub(crate) is_complete: ::std::option::Option<bool>,
    pub(crate) principal_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_trail_properties: ::std::option::Option<crate::types::CloudTrailProperties>,
}
impl GeneratedPolicyPropertiesBuilder {
    /// <p>This value is set to <code>true</code> if the generated policy contains all possible actions for a service that IAM Access Analyzer identified from the CloudTrail trail that you specified, and <code>false</code> otherwise.</p>
    pub fn is_complete(mut self, input: bool) -> Self {
        self.is_complete = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is set to <code>true</code> if the generated policy contains all possible actions for a service that IAM Access Analyzer identified from the CloudTrail trail that you specified, and <code>false</code> otherwise.</p>
    pub fn set_is_complete(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_complete = input;
        self
    }
    /// <p>This value is set to <code>true</code> if the generated policy contains all possible actions for a service that IAM Access Analyzer identified from the CloudTrail trail that you specified, and <code>false</code> otherwise.</p>
    pub fn get_is_complete(&self) -> &::std::option::Option<bool> {
        &self.is_complete
    }
    /// <p>The ARN of the IAM entity (user or role) for which you are generating a policy.</p>
    /// This field is required.
    pub fn principal_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM entity (user or role) for which you are generating a policy.</p>
    pub fn set_principal_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_arn = input;
        self
    }
    /// <p>The ARN of the IAM entity (user or role) for which you are generating a policy.</p>
    pub fn get_principal_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_arn
    }
    /// <p>Lists details about the <code>Trail</code> used to generated policy.</p>
    pub fn cloud_trail_properties(mut self, input: crate::types::CloudTrailProperties) -> Self {
        self.cloud_trail_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists details about the <code>Trail</code> used to generated policy.</p>
    pub fn set_cloud_trail_properties(mut self, input: ::std::option::Option<crate::types::CloudTrailProperties>) -> Self {
        self.cloud_trail_properties = input;
        self
    }
    /// <p>Lists details about the <code>Trail</code> used to generated policy.</p>
    pub fn get_cloud_trail_properties(&self) -> &::std::option::Option<crate::types::CloudTrailProperties> {
        &self.cloud_trail_properties
    }
    /// Consumes the builder and constructs a [`GeneratedPolicyProperties`](crate::types::GeneratedPolicyProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`principal_arn`](crate::types::builders::GeneratedPolicyPropertiesBuilder::principal_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::GeneratedPolicyProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GeneratedPolicyProperties {
            is_complete: self.is_complete,
            principal_arn: self.principal_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_arn",
                    "principal_arn was not specified but it is required when building GeneratedPolicyProperties",
                )
            })?,
            cloud_trail_properties: self.cloud_trail_properties,
        })
    }
}
