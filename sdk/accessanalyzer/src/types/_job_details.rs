// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the policy generation request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobDetails {
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    pub job_id: ::std::string::String,
    /// <p>The status of the job request.</p>
    pub status: crate::types::JobStatus,
    /// <p>A timestamp of when the job was started.</p>
    pub started_on: ::aws_smithy_types::DateTime,
    /// <p>A timestamp of when the job was completed.</p>
    pub completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The job error for the policy generation request.</p>
    pub job_error: ::std::option::Option<crate::types::JobError>,
}
impl JobDetails {
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The status of the job request.</p>
    pub fn status(&self) -> &crate::types::JobStatus {
        &self.status
    }
    /// <p>A timestamp of when the job was started.</p>
    pub fn started_on(&self) -> &::aws_smithy_types::DateTime {
        &self.started_on
    }
    /// <p>A timestamp of when the job was completed.</p>
    pub fn completed_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>The job error for the policy generation request.</p>
    pub fn job_error(&self) -> ::std::option::Option<&crate::types::JobError> {
        self.job_error.as_ref()
    }
}
impl JobDetails {
    /// Creates a new builder-style object to manufacture [`JobDetails`](crate::types::JobDetails).
    pub fn builder() -> crate::types::builders::JobDetailsBuilder {
        crate::types::builders::JobDetailsBuilder::default()
    }
}

/// A builder for [`JobDetails`](crate::types::JobDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobDetailsBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_error: ::std::option::Option<crate::types::JobError>,
}
impl JobDetailsBuilder {
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The <code>JobId</code> that is returned by the <code>StartPolicyGeneration</code> operation. The <code>JobId</code> can be used with <code>GetGeneratedPolicy</code> to retrieve the generated policies or used with <code>CancelPolicyGeneration</code> to cancel the policy generation request.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The status of the job request.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::JobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the job request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the job request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.status
    }
    /// <p>A timestamp of when the job was started.</p>
    /// This field is required.
    pub fn started_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of when the job was started.</p>
    pub fn set_started_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_on = input;
        self
    }
    /// <p>A timestamp of when the job was started.</p>
    pub fn get_started_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_on
    }
    /// <p>A timestamp of when the job was completed.</p>
    pub fn completed_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp of when the job was completed.</p>
    pub fn set_completed_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>A timestamp of when the job was completed.</p>
    pub fn get_completed_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_on
    }
    /// <p>The job error for the policy generation request.</p>
    pub fn job_error(mut self, input: crate::types::JobError) -> Self {
        self.job_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job error for the policy generation request.</p>
    pub fn set_job_error(mut self, input: ::std::option::Option<crate::types::JobError>) -> Self {
        self.job_error = input;
        self
    }
    /// <p>The job error for the policy generation request.</p>
    pub fn get_job_error(&self) -> &::std::option::Option<crate::types::JobError> {
        &self.job_error
    }
    /// Consumes the builder and constructs a [`JobDetails`](crate::types::JobDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::types::builders::JobDetailsBuilder::job_id)
    /// - [`status`](crate::types::builders::JobDetailsBuilder::status)
    /// - [`started_on`](crate::types::builders::JobDetailsBuilder::started_on)
    pub fn build(self) -> ::std::result::Result<crate::types::JobDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobDetails {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building JobDetails",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building JobDetails",
                )
            })?,
            started_on: self.started_on.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "started_on",
                    "started_on was not specified but it is required when building JobDetails",
                )
            })?,
            completed_on: self.completed_on,
            job_error: self.job_error,
        })
    }
}
