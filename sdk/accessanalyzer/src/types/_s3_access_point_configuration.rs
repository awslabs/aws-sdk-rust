// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Amazon S3 access point or multi-region access point for the bucket. You can propose up to 10 access points or multi-region access points per bucket. If the proposed Amazon S3 access point configuration is for an existing bucket, the access preview uses the proposed access point configuration in place of the existing access points. To propose an access point without a policy, you can provide an empty string as the access point policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>. For more information about access point policy limits, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-points-restrictions-limitations.html">Access points restrictions and limitations</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3AccessPointConfiguration {
    /// <p>The access point or multi-region access point policy.</p>
    #[doc(hidden)]
    pub access_point_policy: std::option::Option<std::string::String>,
    /// <p>The proposed <code>S3PublicAccessBlock</code> configuration to apply to this Amazon S3 access point or multi-region access point.</p>
    #[doc(hidden)]
    pub public_access_block: std::option::Option<crate::types::S3PublicAccessBlockConfiguration>,
    /// <p>The proposed <code>Internet</code> and <code>VpcConfiguration</code> to apply to this Amazon S3 access point. <code>VpcConfiguration</code> does not apply to multi-region access points. If the access preview is for a new resource and neither is specified, the access preview uses <code>Internet</code> for the network origin. If the access preview is for an existing resource and neither is specified, the access preview uses the exiting network origin.</p>
    #[doc(hidden)]
    pub network_origin: std::option::Option<crate::types::NetworkOriginConfiguration>,
}
impl S3AccessPointConfiguration {
    /// <p>The access point or multi-region access point policy.</p>
    pub fn access_point_policy(&self) -> std::option::Option<&str> {
        self.access_point_policy.as_deref()
    }
    /// <p>The proposed <code>S3PublicAccessBlock</code> configuration to apply to this Amazon S3 access point or multi-region access point.</p>
    pub fn public_access_block(
        &self,
    ) -> std::option::Option<&crate::types::S3PublicAccessBlockConfiguration> {
        self.public_access_block.as_ref()
    }
    /// <p>The proposed <code>Internet</code> and <code>VpcConfiguration</code> to apply to this Amazon S3 access point. <code>VpcConfiguration</code> does not apply to multi-region access points. If the access preview is for a new resource and neither is specified, the access preview uses <code>Internet</code> for the network origin. If the access preview is for an existing resource and neither is specified, the access preview uses the exiting network origin.</p>
    pub fn network_origin(&self) -> std::option::Option<&crate::types::NetworkOriginConfiguration> {
        self.network_origin.as_ref()
    }
}
impl S3AccessPointConfiguration {
    /// Creates a new builder-style object to manufacture [`S3AccessPointConfiguration`](crate::types::S3AccessPointConfiguration).
    pub fn builder() -> crate::types::builders::S3AccessPointConfigurationBuilder {
        crate::types::builders::S3AccessPointConfigurationBuilder::default()
    }
}

/// A builder for [`S3AccessPointConfiguration`](crate::types::S3AccessPointConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3AccessPointConfigurationBuilder {
    pub(crate) access_point_policy: std::option::Option<std::string::String>,
    pub(crate) public_access_block:
        std::option::Option<crate::types::S3PublicAccessBlockConfiguration>,
    pub(crate) network_origin: std::option::Option<crate::types::NetworkOriginConfiguration>,
}
impl S3AccessPointConfigurationBuilder {
    /// <p>The access point or multi-region access point policy.</p>
    pub fn access_point_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_point_policy = Some(input.into());
        self
    }
    /// <p>The access point or multi-region access point policy.</p>
    pub fn set_access_point_policy(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.access_point_policy = input;
        self
    }
    /// <p>The proposed <code>S3PublicAccessBlock</code> configuration to apply to this Amazon S3 access point or multi-region access point.</p>
    pub fn public_access_block(
        mut self,
        input: crate::types::S3PublicAccessBlockConfiguration,
    ) -> Self {
        self.public_access_block = Some(input);
        self
    }
    /// <p>The proposed <code>S3PublicAccessBlock</code> configuration to apply to this Amazon S3 access point or multi-region access point.</p>
    pub fn set_public_access_block(
        mut self,
        input: std::option::Option<crate::types::S3PublicAccessBlockConfiguration>,
    ) -> Self {
        self.public_access_block = input;
        self
    }
    /// <p>The proposed <code>Internet</code> and <code>VpcConfiguration</code> to apply to this Amazon S3 access point. <code>VpcConfiguration</code> does not apply to multi-region access points. If the access preview is for a new resource and neither is specified, the access preview uses <code>Internet</code> for the network origin. If the access preview is for an existing resource and neither is specified, the access preview uses the exiting network origin.</p>
    pub fn network_origin(mut self, input: crate::types::NetworkOriginConfiguration) -> Self {
        self.network_origin = Some(input);
        self
    }
    /// <p>The proposed <code>Internet</code> and <code>VpcConfiguration</code> to apply to this Amazon S3 access point. <code>VpcConfiguration</code> does not apply to multi-region access points. If the access preview is for a new resource and neither is specified, the access preview uses <code>Internet</code> for the network origin. If the access preview is for an existing resource and neither is specified, the access preview uses the exiting network origin.</p>
    pub fn set_network_origin(
        mut self,
        input: std::option::Option<crate::types::NetworkOriginConfiguration>,
    ) -> Self {
        self.network_origin = input;
        self
    }
    /// Consumes the builder and constructs a [`S3AccessPointConfiguration`](crate::types::S3AccessPointConfiguration).
    pub fn build(self) -> crate::types::S3AccessPointConfiguration {
        crate::types::S3AccessPointConfiguration {
            access_point_policy: self.access_point_policy,
            public_access_block: self.public_access_block,
            network_origin: self.network_origin,
        }
    }
}
