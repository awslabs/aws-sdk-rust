// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a summary of information about an access preview.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessPreviewSummary {
    /// <p>The unique ID for the access preview.</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the analyzer used to generate the access preview.</p>
    pub analyzer_arn: ::std::string::String,
    /// <p>The time at which the access preview was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The status of the access preview.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code> - The access preview creation is in progress.</p> </li>
    /// <li> <p> <code>Completed</code> - The access preview is complete and previews the findings for external access to the resource.</p> </li>
    /// <li> <p> <code>Failed</code> - The access preview creation has failed.</p> </li>
    /// </ul>
    pub status: crate::types::AccessPreviewStatus,
    /// <p>Provides more details about the current status of the access preview. For example, if the creation of the access preview fails, a <code>Failed</code> status is returned. This failure can be due to an internal issue with the analysis or due to an invalid proposed resource configuration.</p>
    pub status_reason: ::std::option::Option<crate::types::AccessPreviewStatusReason>,
}
impl AccessPreviewSummary {
    /// <p>The unique ID for the access preview.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the analyzer used to generate the access preview.</p>
    pub fn analyzer_arn(&self) -> &str {
        use std::ops::Deref;
        self.analyzer_arn.deref()
    }
    /// <p>The time at which the access preview was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The status of the access preview.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code> - The access preview creation is in progress.</p> </li>
    /// <li> <p> <code>Completed</code> - The access preview is complete and previews the findings for external access to the resource.</p> </li>
    /// <li> <p> <code>Failed</code> - The access preview creation has failed.</p> </li>
    /// </ul>
    pub fn status(&self) -> &crate::types::AccessPreviewStatus {
        &self.status
    }
    /// <p>Provides more details about the current status of the access preview. For example, if the creation of the access preview fails, a <code>Failed</code> status is returned. This failure can be due to an internal issue with the analysis or due to an invalid proposed resource configuration.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::AccessPreviewStatusReason> {
        self.status_reason.as_ref()
    }
}
impl AccessPreviewSummary {
    /// Creates a new builder-style object to manufacture [`AccessPreviewSummary`](crate::types::AccessPreviewSummary).
    pub fn builder() -> crate::types::builders::AccessPreviewSummaryBuilder {
        crate::types::builders::AccessPreviewSummaryBuilder::default()
    }
}

/// A builder for [`AccessPreviewSummary`](crate::types::AccessPreviewSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessPreviewSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) analyzer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::AccessPreviewStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::AccessPreviewStatusReason>,
}
impl AccessPreviewSummaryBuilder {
    /// <p>The unique ID for the access preview.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the access preview.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID for the access preview.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the analyzer used to generate the access preview.</p>
    /// This field is required.
    pub fn analyzer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analyzer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the analyzer used to generate the access preview.</p>
    pub fn set_analyzer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analyzer_arn = input;
        self
    }
    /// <p>The ARN of the analyzer used to generate the access preview.</p>
    pub fn get_analyzer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.analyzer_arn
    }
    /// <p>The time at which the access preview was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the access preview was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the access preview was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The status of the access preview.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code> - The access preview creation is in progress.</p> </li>
    /// <li> <p> <code>Completed</code> - The access preview is complete and previews the findings for external access to the resource.</p> </li>
    /// <li> <p> <code>Failed</code> - The access preview creation has failed.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AccessPreviewStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the access preview.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code> - The access preview creation is in progress.</p> </li>
    /// <li> <p> <code>Completed</code> - The access preview is complete and previews the findings for external access to the resource.</p> </li>
    /// <li> <p> <code>Failed</code> - The access preview creation has failed.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AccessPreviewStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the access preview.</p>
    /// <ul>
    /// <li> <p> <code>Creating</code> - The access preview creation is in progress.</p> </li>
    /// <li> <p> <code>Completed</code> - The access preview is complete and previews the findings for external access to the resource.</p> </li>
    /// <li> <p> <code>Failed</code> - The access preview creation has failed.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AccessPreviewStatus> {
        &self.status
    }
    /// <p>Provides more details about the current status of the access preview. For example, if the creation of the access preview fails, a <code>Failed</code> status is returned. This failure can be due to an internal issue with the analysis or due to an invalid proposed resource configuration.</p>
    pub fn status_reason(mut self, input: crate::types::AccessPreviewStatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides more details about the current status of the access preview. For example, if the creation of the access preview fails, a <code>Failed</code> status is returned. This failure can be due to an internal issue with the analysis or due to an invalid proposed resource configuration.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::AccessPreviewStatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Provides more details about the current status of the access preview. For example, if the creation of the access preview fails, a <code>Failed</code> status is returned. This failure can be due to an internal issue with the analysis or due to an invalid proposed resource configuration.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::AccessPreviewStatusReason> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`AccessPreviewSummary`](crate::types::AccessPreviewSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AccessPreviewSummaryBuilder::id)
    /// - [`analyzer_arn`](crate::types::builders::AccessPreviewSummaryBuilder::analyzer_arn)
    /// - [`created_at`](crate::types::builders::AccessPreviewSummaryBuilder::created_at)
    /// - [`status`](crate::types::builders::AccessPreviewSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::AccessPreviewSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccessPreviewSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AccessPreviewSummary",
                )
            })?,
            analyzer_arn: self.analyzer_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analyzer_arn",
                    "analyzer_arn was not specified but it is required when building AccessPreviewSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AccessPreviewSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AccessPreviewSummary",
                )
            })?,
            status_reason: self.status_reason,
        })
    }
}
