// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `KmsGrantOperation`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let kmsgrantoperation = unimplemented!();
/// match kmsgrantoperation {
///     KmsGrantOperation::CreateGrant => { /* ... */ },
///     KmsGrantOperation::Decrypt => { /* ... */ },
///     KmsGrantOperation::DescribeKey => { /* ... */ },
///     KmsGrantOperation::Encrypt => { /* ... */ },
///     KmsGrantOperation::GenerateDataKey => { /* ... */ },
///     KmsGrantOperation::GenerateDataKeyPair => { /* ... */ },
///     KmsGrantOperation::GenerateDataKeyPairWithoutPlaintext => { /* ... */ },
///     KmsGrantOperation::GenerateDataKeyWithoutPlaintext => { /* ... */ },
///     KmsGrantOperation::GetPublicKey => { /* ... */ },
///     KmsGrantOperation::ReencryptFrom => { /* ... */ },
///     KmsGrantOperation::ReencryptTo => { /* ... */ },
///     KmsGrantOperation::RetireGrant => { /* ... */ },
///     KmsGrantOperation::Sign => { /* ... */ },
///     KmsGrantOperation::Verify => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `kmsgrantoperation` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `KmsGrantOperation::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `KmsGrantOperation::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `KmsGrantOperation::NewFeature` is defined.
/// Specifically, when `kmsgrantoperation` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `KmsGrantOperation::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum KmsGrantOperation {
    #[allow(missing_docs)] // documentation missing in model
    CreateGrant,
    #[allow(missing_docs)] // documentation missing in model
    Decrypt,
    #[allow(missing_docs)] // documentation missing in model
    DescribeKey,
    #[allow(missing_docs)] // documentation missing in model
    Encrypt,
    #[allow(missing_docs)] // documentation missing in model
    GenerateDataKey,
    #[allow(missing_docs)] // documentation missing in model
    GenerateDataKeyPair,
    #[allow(missing_docs)] // documentation missing in model
    GenerateDataKeyPairWithoutPlaintext,
    #[allow(missing_docs)] // documentation missing in model
    GenerateDataKeyWithoutPlaintext,
    #[allow(missing_docs)] // documentation missing in model
    GetPublicKey,
    #[allow(missing_docs)] // documentation missing in model
    ReencryptFrom,
    #[allow(missing_docs)] // documentation missing in model
    ReencryptTo,
    #[allow(missing_docs)] // documentation missing in model
    RetireGrant,
    #[allow(missing_docs)] // documentation missing in model
    Sign,
    #[allow(missing_docs)] // documentation missing in model
    Verify,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for KmsGrantOperation {
    fn from(s: &str) -> Self {
        match s {
            "CreateGrant" => KmsGrantOperation::CreateGrant,
            "Decrypt" => KmsGrantOperation::Decrypt,
            "DescribeKey" => KmsGrantOperation::DescribeKey,
            "Encrypt" => KmsGrantOperation::Encrypt,
            "GenerateDataKey" => KmsGrantOperation::GenerateDataKey,
            "GenerateDataKeyPair" => KmsGrantOperation::GenerateDataKeyPair,
            "GenerateDataKeyPairWithoutPlaintext" => {
                KmsGrantOperation::GenerateDataKeyPairWithoutPlaintext
            }
            "GenerateDataKeyWithoutPlaintext" => KmsGrantOperation::GenerateDataKeyWithoutPlaintext,
            "GetPublicKey" => KmsGrantOperation::GetPublicKey,
            "ReEncryptFrom" => KmsGrantOperation::ReencryptFrom,
            "ReEncryptTo" => KmsGrantOperation::ReencryptTo,
            "RetireGrant" => KmsGrantOperation::RetireGrant,
            "Sign" => KmsGrantOperation::Sign,
            "Verify" => KmsGrantOperation::Verify,
            other => {
                KmsGrantOperation::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for KmsGrantOperation {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(KmsGrantOperation::from(s))
    }
}
impl KmsGrantOperation {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            KmsGrantOperation::CreateGrant => "CreateGrant",
            KmsGrantOperation::Decrypt => "Decrypt",
            KmsGrantOperation::DescribeKey => "DescribeKey",
            KmsGrantOperation::Encrypt => "Encrypt",
            KmsGrantOperation::GenerateDataKey => "GenerateDataKey",
            KmsGrantOperation::GenerateDataKeyPair => "GenerateDataKeyPair",
            KmsGrantOperation::GenerateDataKeyPairWithoutPlaintext => {
                "GenerateDataKeyPairWithoutPlaintext"
            }
            KmsGrantOperation::GenerateDataKeyWithoutPlaintext => "GenerateDataKeyWithoutPlaintext",
            KmsGrantOperation::GetPublicKey => "GetPublicKey",
            KmsGrantOperation::ReencryptFrom => "ReEncryptFrom",
            KmsGrantOperation::ReencryptTo => "ReEncryptTo",
            KmsGrantOperation::RetireGrant => "RetireGrant",
            KmsGrantOperation::Sign => "Sign",
            KmsGrantOperation::Verify => "Verify",
            KmsGrantOperation::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CreateGrant",
            "Decrypt",
            "DescribeKey",
            "Encrypt",
            "GenerateDataKey",
            "GenerateDataKeyPair",
            "GenerateDataKeyPairWithoutPlaintext",
            "GenerateDataKeyWithoutPlaintext",
            "GetPublicKey",
            "ReEncryptFrom",
            "ReEncryptTo",
            "RetireGrant",
            "Sign",
            "Verify",
        ]
    }
}
impl AsRef<str> for KmsGrantOperation {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
