// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed access control configuration for an Amazon EFS file system. You can propose a configuration for a new Amazon EFS file system or an existing Amazon EFS file system that you own by specifying the Amazon EFS policy. For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/using-fs.html">Using file systems in Amazon EFS</a>.</p>
/// <ul>
/// <li> <p>If the configuration is for an existing Amazon EFS file system and you do not specify the Amazon EFS policy, then the access preview uses the existing Amazon EFS policy for the file system.</p> </li>
/// <li> <p>If the access preview is for a new resource and you do not specify the policy, then the access preview assumes an Amazon EFS file system without a policy.</p> </li>
/// <li> <p>To propose deletion of an existing Amazon EFS file system policy, you can specify an empty string for the Amazon EFS policy.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EfsFileSystemConfiguration {
    /// <p>The JSON policy definition to apply to the Amazon EFS file system. For more information on the elements that make up a file system policy, see <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">Amazon EFS Resource-based policies</a>.</p>
    #[doc(hidden)]
    pub file_system_policy: std::option::Option<std::string::String>,
}
impl EfsFileSystemConfiguration {
    /// <p>The JSON policy definition to apply to the Amazon EFS file system. For more information on the elements that make up a file system policy, see <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">Amazon EFS Resource-based policies</a>.</p>
    pub fn file_system_policy(&self) -> std::option::Option<&str> {
        self.file_system_policy.as_deref()
    }
}
impl EfsFileSystemConfiguration {
    /// Creates a new builder-style object to manufacture [`EfsFileSystemConfiguration`](crate::types::EfsFileSystemConfiguration).
    pub fn builder() -> crate::types::builders::EfsFileSystemConfigurationBuilder {
        crate::types::builders::EfsFileSystemConfigurationBuilder::default()
    }
}

/// A builder for [`EfsFileSystemConfiguration`](crate::types::EfsFileSystemConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EfsFileSystemConfigurationBuilder {
    pub(crate) file_system_policy: std::option::Option<std::string::String>,
}
impl EfsFileSystemConfigurationBuilder {
    /// <p>The JSON policy definition to apply to the Amazon EFS file system. For more information on the elements that make up a file system policy, see <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">Amazon EFS Resource-based policies</a>.</p>
    pub fn file_system_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_system_policy = Some(input.into());
        self
    }
    /// <p>The JSON policy definition to apply to the Amazon EFS file system. For more information on the elements that make up a file system policy, see <a href="https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies">Amazon EFS Resource-based policies</a>.</p>
    pub fn set_file_system_policy(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.file_system_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`EfsFileSystemConfiguration`](crate::types::EfsFileSystemConfiguration).
    pub fn build(self) -> crate::types::EfsFileSystemConfiguration {
        crate::types::EfsFileSystemConfiguration {
            file_system_policy: self.file_system_policy,
        }
    }
}
