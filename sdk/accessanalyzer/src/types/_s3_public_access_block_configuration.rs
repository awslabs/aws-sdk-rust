// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>PublicAccessBlock</code> configuration to apply to this Amazon S3 bucket. If the proposed configuration is for an existing Amazon S3 bucket and the configuration is not specified, the access preview uses the existing setting. If the proposed configuration is for a new bucket and the configuration is not specified, the access preview uses <code>false</code>. If the proposed configuration is for a new access point or multi-region access point and the access point BPA configuration is not specified, the access preview uses <code>true</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-publicaccessblockconfiguration.html">PublicAccessBlockConfiguration</a>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3PublicAccessBlockConfiguration {
    /// <p> Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. </p>
    pub ignore_public_acls: bool,
    /// <p> Specifies whether Amazon S3 should restrict public bucket policies for this bucket. </p>
    pub restrict_public_buckets: bool,
}
impl S3PublicAccessBlockConfiguration {
    /// <p> Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. </p>
    pub fn ignore_public_acls(&self) -> bool {
        self.ignore_public_acls
    }
    /// <p> Specifies whether Amazon S3 should restrict public bucket policies for this bucket. </p>
    pub fn restrict_public_buckets(&self) -> bool {
        self.restrict_public_buckets
    }
}
impl S3PublicAccessBlockConfiguration {
    /// Creates a new builder-style object to manufacture [`S3PublicAccessBlockConfiguration`](crate::types::S3PublicAccessBlockConfiguration).
    pub fn builder() -> crate::types::builders::S3PublicAccessBlockConfigurationBuilder {
        crate::types::builders::S3PublicAccessBlockConfigurationBuilder::default()
    }
}

/// A builder for [`S3PublicAccessBlockConfiguration`](crate::types::S3PublicAccessBlockConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3PublicAccessBlockConfigurationBuilder {
    pub(crate) ignore_public_acls: ::std::option::Option<bool>,
    pub(crate) restrict_public_buckets: ::std::option::Option<bool>,
}
impl S3PublicAccessBlockConfigurationBuilder {
    /// <p> Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. </p>
    /// This field is required.
    pub fn ignore_public_acls(mut self, input: bool) -> Self {
        self.ignore_public_acls = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. </p>
    pub fn set_ignore_public_acls(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ignore_public_acls = input;
        self
    }
    /// <p> Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. </p>
    pub fn get_ignore_public_acls(&self) -> &::std::option::Option<bool> {
        &self.ignore_public_acls
    }
    /// <p> Specifies whether Amazon S3 should restrict public bucket policies for this bucket. </p>
    /// This field is required.
    pub fn restrict_public_buckets(mut self, input: bool) -> Self {
        self.restrict_public_buckets = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether Amazon S3 should restrict public bucket policies for this bucket. </p>
    pub fn set_restrict_public_buckets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restrict_public_buckets = input;
        self
    }
    /// <p> Specifies whether Amazon S3 should restrict public bucket policies for this bucket. </p>
    pub fn get_restrict_public_buckets(&self) -> &::std::option::Option<bool> {
        &self.restrict_public_buckets
    }
    /// Consumes the builder and constructs a [`S3PublicAccessBlockConfiguration`](crate::types::S3PublicAccessBlockConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`ignore_public_acls`](crate::types::builders::S3PublicAccessBlockConfigurationBuilder::ignore_public_acls)
    /// - [`restrict_public_buckets`](crate::types::builders::S3PublicAccessBlockConfigurationBuilder::restrict_public_buckets)
    pub fn build(self) -> ::std::result::Result<crate::types::S3PublicAccessBlockConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3PublicAccessBlockConfiguration {
            ignore_public_acls: self.ignore_public_acls.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ignore_public_acls",
                    "ignore_public_acls was not specified but it is required when building S3PublicAccessBlockConfiguration",
                )
            })?,
            restrict_public_buckets: self.restrict_public_buckets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "restrict_public_buckets",
                    "restrict_public_buckets was not specified but it is required when building S3PublicAccessBlockConfiguration",
                )
            })?,
        })
    }
}
