// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcetype = unimplemented!();
/// match resourcetype {
///     ResourceType::AwsDynamodbStream => { /* ... */ },
///     ResourceType::AwsDynamodbTable => { /* ... */ },
///     ResourceType::AwsEc2Snapshot => { /* ... */ },
///     ResourceType::AwsEcrRepository => { /* ... */ },
///     ResourceType::AwsEfsFilesystem => { /* ... */ },
///     ResourceType::AwsIamRole => { /* ... */ },
///     ResourceType::AwsIamUser => { /* ... */ },
///     ResourceType::AwsKmsKey => { /* ... */ },
///     ResourceType::AwsLambdaFunction => { /* ... */ },
///     ResourceType::AwsLambdaLayerversion => { /* ... */ },
///     ResourceType::AwsRdsDbclustersnapshot => { /* ... */ },
///     ResourceType::AwsRdsDbsnapshot => { /* ... */ },
///     ResourceType::AwsS3Bucket => { /* ... */ },
///     ResourceType::AwsS3ExpressDirectorybucket => { /* ... */ },
///     ResourceType::AwsSnsTopic => { /* ... */ },
///     ResourceType::AwsSqsQueue => { /* ... */ },
///     ResourceType::AwsSecretsmanagerSecret => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceType::NewFeature` is defined.
/// Specifically, when `resourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ResourceType {
    #[allow(missing_docs)] // documentation missing in model
    AwsDynamodbStream,
    #[allow(missing_docs)] // documentation missing in model
    AwsDynamodbTable,
    #[allow(missing_docs)] // documentation missing in model
    AwsEc2Snapshot,
    #[allow(missing_docs)] // documentation missing in model
    AwsEcrRepository,
    #[allow(missing_docs)] // documentation missing in model
    AwsEfsFilesystem,
    #[allow(missing_docs)] // documentation missing in model
    AwsIamRole,
    #[allow(missing_docs)] // documentation missing in model
    AwsIamUser,
    #[allow(missing_docs)] // documentation missing in model
    AwsKmsKey,
    #[allow(missing_docs)] // documentation missing in model
    AwsLambdaFunction,
    #[allow(missing_docs)] // documentation missing in model
    AwsLambdaLayerversion,
    #[allow(missing_docs)] // documentation missing in model
    AwsRdsDbclustersnapshot,
    #[allow(missing_docs)] // documentation missing in model
    AwsRdsDbsnapshot,
    #[allow(missing_docs)] // documentation missing in model
    AwsS3Bucket,
    #[allow(missing_docs)] // documentation missing in model
    AwsS3ExpressDirectorybucket,
    #[allow(missing_docs)] // documentation missing in model
    AwsSnsTopic,
    #[allow(missing_docs)] // documentation missing in model
    AwsSqsQueue,
    #[allow(missing_docs)] // documentation missing in model
    AwsSecretsmanagerSecret,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ResourceType {
    fn from(s: &str) -> Self {
        match s {
            "AWS::DynamoDB::Stream" => ResourceType::AwsDynamodbStream,
            "AWS::DynamoDB::Table" => ResourceType::AwsDynamodbTable,
            "AWS::EC2::Snapshot" => ResourceType::AwsEc2Snapshot,
            "AWS::ECR::Repository" => ResourceType::AwsEcrRepository,
            "AWS::EFS::FileSystem" => ResourceType::AwsEfsFilesystem,
            "AWS::IAM::Role" => ResourceType::AwsIamRole,
            "AWS::IAM::User" => ResourceType::AwsIamUser,
            "AWS::KMS::Key" => ResourceType::AwsKmsKey,
            "AWS::Lambda::Function" => ResourceType::AwsLambdaFunction,
            "AWS::Lambda::LayerVersion" => ResourceType::AwsLambdaLayerversion,
            "AWS::RDS::DBClusterSnapshot" => ResourceType::AwsRdsDbclustersnapshot,
            "AWS::RDS::DBSnapshot" => ResourceType::AwsRdsDbsnapshot,
            "AWS::S3::Bucket" => ResourceType::AwsS3Bucket,
            "AWS::S3Express::DirectoryBucket" => ResourceType::AwsS3ExpressDirectorybucket,
            "AWS::SNS::Topic" => ResourceType::AwsSnsTopic,
            "AWS::SQS::Queue" => ResourceType::AwsSqsQueue,
            "AWS::SecretsManager::Secret" => ResourceType::AwsSecretsmanagerSecret,
            other => ResourceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ResourceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ResourceType::from(s))
    }
}
impl ResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceType::AwsDynamodbStream => "AWS::DynamoDB::Stream",
            ResourceType::AwsDynamodbTable => "AWS::DynamoDB::Table",
            ResourceType::AwsEc2Snapshot => "AWS::EC2::Snapshot",
            ResourceType::AwsEcrRepository => "AWS::ECR::Repository",
            ResourceType::AwsEfsFilesystem => "AWS::EFS::FileSystem",
            ResourceType::AwsIamRole => "AWS::IAM::Role",
            ResourceType::AwsIamUser => "AWS::IAM::User",
            ResourceType::AwsKmsKey => "AWS::KMS::Key",
            ResourceType::AwsLambdaFunction => "AWS::Lambda::Function",
            ResourceType::AwsLambdaLayerversion => "AWS::Lambda::LayerVersion",
            ResourceType::AwsRdsDbclustersnapshot => "AWS::RDS::DBClusterSnapshot",
            ResourceType::AwsRdsDbsnapshot => "AWS::RDS::DBSnapshot",
            ResourceType::AwsS3Bucket => "AWS::S3::Bucket",
            ResourceType::AwsS3ExpressDirectorybucket => "AWS::S3Express::DirectoryBucket",
            ResourceType::AwsSnsTopic => "AWS::SNS::Topic",
            ResourceType::AwsSqsQueue => "AWS::SQS::Queue",
            ResourceType::AwsSecretsmanagerSecret => "AWS::SecretsManager::Secret",
            ResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS::DynamoDB::Stream",
            "AWS::DynamoDB::Table",
            "AWS::EC2::Snapshot",
            "AWS::ECR::Repository",
            "AWS::EFS::FileSystem",
            "AWS::IAM::Role",
            "AWS::IAM::User",
            "AWS::KMS::Key",
            "AWS::Lambda::Function",
            "AWS::Lambda::LayerVersion",
            "AWS::RDS::DBClusterSnapshot",
            "AWS::RDS::DBSnapshot",
            "AWS::S3::Bucket",
            "AWS::S3Express::DirectoryBucket",
            "AWS::SNS::Topic",
            "AWS::SQS::Queue",
            "AWS::SecretsManager::Secret",
        ]
    }
}
impl ::std::convert::AsRef<str> for ResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ResourceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ResourceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ResourceType::AwsDynamodbStream => write!(f, "AWS::DynamoDB::Stream"),
            ResourceType::AwsDynamodbTable => write!(f, "AWS::DynamoDB::Table"),
            ResourceType::AwsEc2Snapshot => write!(f, "AWS::EC2::Snapshot"),
            ResourceType::AwsEcrRepository => write!(f, "AWS::ECR::Repository"),
            ResourceType::AwsEfsFilesystem => write!(f, "AWS::EFS::FileSystem"),
            ResourceType::AwsIamRole => write!(f, "AWS::IAM::Role"),
            ResourceType::AwsIamUser => write!(f, "AWS::IAM::User"),
            ResourceType::AwsKmsKey => write!(f, "AWS::KMS::Key"),
            ResourceType::AwsLambdaFunction => write!(f, "AWS::Lambda::Function"),
            ResourceType::AwsLambdaLayerversion => write!(f, "AWS::Lambda::LayerVersion"),
            ResourceType::AwsRdsDbclustersnapshot => write!(f, "AWS::RDS::DBClusterSnapshot"),
            ResourceType::AwsRdsDbsnapshot => write!(f, "AWS::RDS::DBSnapshot"),
            ResourceType::AwsS3Bucket => write!(f, "AWS::S3::Bucket"),
            ResourceType::AwsS3ExpressDirectorybucket => write!(f, "AWS::S3Express::DirectoryBucket"),
            ResourceType::AwsSnsTopic => write!(f, "AWS::SNS::Topic"),
            ResourceType::AwsSqsQueue => write!(f, "AWS::SQS::Queue"),
            ResourceType::AwsSecretsmanagerSecret => write!(f, "AWS::SecretsManager::Secret"),
            ResourceType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
