// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A proposed grant configuration for a KMS key. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateGrant.html">CreateGrant</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KmsGrantConfiguration {
    /// <p>A list of operations that the grant permits.</p>
    pub operations: ::std::vec::Vec<crate::types::KmsGrantOperation>,
    /// <p>The principal that is given permission to perform the operations that the grant permits.</p>
    pub grantee_principal: ::std::string::String,
    /// <p>The principal that is given permission to retire the grant by using <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html">RetireGrant</a> operation.</p>
    pub retiring_principal: ::std::option::Option<::std::string::String>,
    /// <p>Use this structure to propose allowing <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> in the grant only when the operation request includes the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption context</a>.</p>
    pub constraints: ::std::option::Option<crate::types::KmsGrantConstraints>,
    /// <p> The Amazon Web Services account under which the grant was issued. The account is used to propose KMS grants issued by accounts other than the owner of the key.</p>
    pub issuing_account: ::std::string::String,
}
impl KmsGrantConfiguration {
    /// <p>A list of operations that the grant permits.</p>
    pub fn operations(&self) -> &[crate::types::KmsGrantOperation] {
        use std::ops::Deref;
        self.operations.deref()
    }
    /// <p>The principal that is given permission to perform the operations that the grant permits.</p>
    pub fn grantee_principal(&self) -> &str {
        use std::ops::Deref;
        self.grantee_principal.deref()
    }
    /// <p>The principal that is given permission to retire the grant by using <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html">RetireGrant</a> operation.</p>
    pub fn retiring_principal(&self) -> ::std::option::Option<&str> {
        self.retiring_principal.as_deref()
    }
    /// <p>Use this structure to propose allowing <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> in the grant only when the operation request includes the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption context</a>.</p>
    pub fn constraints(&self) -> ::std::option::Option<&crate::types::KmsGrantConstraints> {
        self.constraints.as_ref()
    }
    /// <p> The Amazon Web Services account under which the grant was issued. The account is used to propose KMS grants issued by accounts other than the owner of the key.</p>
    pub fn issuing_account(&self) -> &str {
        use std::ops::Deref;
        self.issuing_account.deref()
    }
}
impl KmsGrantConfiguration {
    /// Creates a new builder-style object to manufacture [`KmsGrantConfiguration`](crate::types::KmsGrantConfiguration).
    pub fn builder() -> crate::types::builders::KmsGrantConfigurationBuilder {
        crate::types::builders::KmsGrantConfigurationBuilder::default()
    }
}

/// A builder for [`KmsGrantConfiguration`](crate::types::KmsGrantConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KmsGrantConfigurationBuilder {
    pub(crate) operations: ::std::option::Option<::std::vec::Vec<crate::types::KmsGrantOperation>>,
    pub(crate) grantee_principal: ::std::option::Option<::std::string::String>,
    pub(crate) retiring_principal: ::std::option::Option<::std::string::String>,
    pub(crate) constraints: ::std::option::Option<crate::types::KmsGrantConstraints>,
    pub(crate) issuing_account: ::std::option::Option<::std::string::String>,
}
impl KmsGrantConfigurationBuilder {
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>A list of operations that the grant permits.</p>
    pub fn operations(mut self, input: crate::types::KmsGrantOperation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of operations that the grant permits.</p>
    pub fn set_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KmsGrantOperation>>) -> Self {
        self.operations = input;
        self
    }
    /// <p>A list of operations that the grant permits.</p>
    pub fn get_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KmsGrantOperation>> {
        &self.operations
    }
    /// <p>The principal that is given permission to perform the operations that the grant permits.</p>
    /// This field is required.
    pub fn grantee_principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grantee_principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal that is given permission to perform the operations that the grant permits.</p>
    pub fn set_grantee_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grantee_principal = input;
        self
    }
    /// <p>The principal that is given permission to perform the operations that the grant permits.</p>
    pub fn get_grantee_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.grantee_principal
    }
    /// <p>The principal that is given permission to retire the grant by using <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html">RetireGrant</a> operation.</p>
    pub fn retiring_principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retiring_principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal that is given permission to retire the grant by using <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html">RetireGrant</a> operation.</p>
    pub fn set_retiring_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retiring_principal = input;
        self
    }
    /// <p>The principal that is given permission to retire the grant by using <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html">RetireGrant</a> operation.</p>
    pub fn get_retiring_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.retiring_principal
    }
    /// <p>Use this structure to propose allowing <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> in the grant only when the operation request includes the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption context</a>.</p>
    pub fn constraints(mut self, input: crate::types::KmsGrantConstraints) -> Self {
        self.constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this structure to propose allowing <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> in the grant only when the operation request includes the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption context</a>.</p>
    pub fn set_constraints(mut self, input: ::std::option::Option<crate::types::KmsGrantConstraints>) -> Self {
        self.constraints = input;
        self
    }
    /// <p>Use this structure to propose allowing <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic operations</a> in the grant only when the operation request includes the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption context</a>.</p>
    pub fn get_constraints(&self) -> &::std::option::Option<crate::types::KmsGrantConstraints> {
        &self.constraints
    }
    /// <p> The Amazon Web Services account under which the grant was issued. The account is used to propose KMS grants issued by accounts other than the owner of the key.</p>
    /// This field is required.
    pub fn issuing_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuing_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Web Services account under which the grant was issued. The account is used to propose KMS grants issued by accounts other than the owner of the key.</p>
    pub fn set_issuing_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuing_account = input;
        self
    }
    /// <p> The Amazon Web Services account under which the grant was issued. The account is used to propose KMS grants issued by accounts other than the owner of the key.</p>
    pub fn get_issuing_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuing_account
    }
    /// Consumes the builder and constructs a [`KmsGrantConfiguration`](crate::types::KmsGrantConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`operations`](crate::types::builders::KmsGrantConfigurationBuilder::operations)
    /// - [`grantee_principal`](crate::types::builders::KmsGrantConfigurationBuilder::grantee_principal)
    /// - [`issuing_account`](crate::types::builders::KmsGrantConfigurationBuilder::issuing_account)
    pub fn build(self) -> ::std::result::Result<crate::types::KmsGrantConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KmsGrantConfiguration {
            operations: self.operations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operations",
                    "operations was not specified but it is required when building KmsGrantConfiguration",
                )
            })?,
            grantee_principal: self.grantee_principal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grantee_principal",
                    "grantee_principal was not specified but it is required when building KmsGrantConfiguration",
                )
            })?,
            retiring_principal: self.retiring_principal,
            constraints: self.constraints,
            issuing_account: self.issuing_account.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "issuing_account",
                    "issuing_account was not specified but it is required when building KmsGrantConfiguration",
                )
            })?,
        })
    }
}
