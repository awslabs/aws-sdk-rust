// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about CloudTrail access.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudTrailProperties {
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    #[doc(hidden)]
    pub trail_properties: std::option::Option<std::vec::Vec<crate::types::TrailProperties>>,
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CloudTrailProperties {
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn trail_properties(&self) -> std::option::Option<&[crate::types::TrailProperties]> {
        self.trail_properties.as_deref()
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl CloudTrailProperties {
    /// Creates a new builder-style object to manufacture [`CloudTrailProperties`](crate::types::CloudTrailProperties).
    pub fn builder() -> crate::types::builders::CloudTrailPropertiesBuilder {
        crate::types::builders::CloudTrailPropertiesBuilder::default()
    }
}

/// A builder for [`CloudTrailProperties`](crate::types::CloudTrailProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudTrailPropertiesBuilder {
    pub(crate) trail_properties: std::option::Option<std::vec::Vec<crate::types::TrailProperties>>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CloudTrailPropertiesBuilder {
    /// Appends an item to `trail_properties`.
    ///
    /// To override the contents of this collection use [`set_trail_properties`](Self::set_trail_properties).
    ///
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn trail_properties(mut self, input: crate::types::TrailProperties) -> Self {
        let mut v = self.trail_properties.unwrap_or_default();
        v.push(input);
        self.trail_properties = Some(v);
        self
    }
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn set_trail_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TrailProperties>>,
    ) -> Self {
        self.trail_properties = input;
        self
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudTrailProperties`](crate::types::CloudTrailProperties).
    pub fn build(self) -> crate::types::CloudTrailProperties {
        crate::types::CloudTrailProperties {
            trail_properties: self.trail_properties,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
