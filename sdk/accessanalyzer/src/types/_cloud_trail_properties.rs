// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about CloudTrail access.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudTrailProperties {
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub trail_properties: ::std::vec::Vec<crate::types::TrailProperties>,
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub end_time: ::aws_smithy_types::DateTime,
}
impl CloudTrailProperties {
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn trail_properties(&self) -> &[crate::types::TrailProperties] {
        use std::ops::Deref;
        self.trail_properties.deref()
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
}
impl CloudTrailProperties {
    /// Creates a new builder-style object to manufacture [`CloudTrailProperties`](crate::types::CloudTrailProperties).
    pub fn builder() -> crate::types::builders::CloudTrailPropertiesBuilder {
        crate::types::builders::CloudTrailPropertiesBuilder::default()
    }
}

/// A builder for [`CloudTrailProperties`](crate::types::CloudTrailProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudTrailPropertiesBuilder {
    pub(crate) trail_properties: ::std::option::Option<::std::vec::Vec<crate::types::TrailProperties>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CloudTrailPropertiesBuilder {
    /// Appends an item to `trail_properties`.
    ///
    /// To override the contents of this collection use [`set_trail_properties`](Self::set_trail_properties).
    ///
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn trail_properties(mut self, input: crate::types::TrailProperties) -> Self {
        let mut v = self.trail_properties.unwrap_or_default();
        v.push(input);
        self.trail_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn set_trail_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TrailProperties>>) -> Self {
        self.trail_properties = input;
        self
    }
    /// <p>A <code>TrailProperties</code> object that contains settings for trail properties.</p>
    pub fn get_trail_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TrailProperties>> {
        &self.trail_properties
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp before this time are not considered to generate a policy.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end of the time range for which IAM Access Analyzer reviews your CloudTrail events. Events with a timestamp after this time are not considered to generate a policy. If this is not included in the request, the default value is the current time.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`CloudTrailProperties`](crate::types::CloudTrailProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`trail_properties`](crate::types::builders::CloudTrailPropertiesBuilder::trail_properties)
    /// - [`start_time`](crate::types::builders::CloudTrailPropertiesBuilder::start_time)
    /// - [`end_time`](crate::types::builders::CloudTrailPropertiesBuilder::end_time)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudTrailProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudTrailProperties {
            trail_properties: self.trail_properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trail_properties",
                    "trail_properties was not specified but it is required when building CloudTrailProperties",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building CloudTrailProperties",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building CloudTrailProperties",
                )
            })?,
        })
    }
}
