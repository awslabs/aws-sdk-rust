// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AccessCheckResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let accesscheckresourcetype = unimplemented!();
/// match accesscheckresourcetype {
///     AccessCheckResourceType::ApiGatewayRestApi => { /* ... */ },
///     AccessCheckResourceType::BackupVault => { /* ... */ },
///     AccessCheckResourceType::CloudtrailDashboard => { /* ... */ },
///     AccessCheckResourceType::CloudtrailEventDataStore => { /* ... */ },
///     AccessCheckResourceType::CodeArtifactDomain => { /* ... */ },
///     AccessCheckResourceType::DynamodbStream => { /* ... */ },
///     AccessCheckResourceType::DynamodbTable => { /* ... */ },
///     AccessCheckResourceType::EfsFilesystem => { /* ... */ },
///     AccessCheckResourceType::RoleTrust => { /* ... */ },
///     AccessCheckResourceType::KmsKey => { /* ... */ },
///     AccessCheckResourceType::KinesisDataStream => { /* ... */ },
///     AccessCheckResourceType::KinesisStreamConsumer => { /* ... */ },
///     AccessCheckResourceType::LambdaFunction => { /* ... */ },
///     AccessCheckResourceType::OpensearchserviceDomain => { /* ... */ },
///     AccessCheckResourceType::S3AccessPoint => { /* ... */ },
///     AccessCheckResourceType::S3Bucket => { /* ... */ },
///     AccessCheckResourceType::S3Glacier => { /* ... */ },
///     AccessCheckResourceType::S3ExpressAccessPoint => { /* ... */ },
///     AccessCheckResourceType::S3ExpressDirectorybucket => { /* ... */ },
///     AccessCheckResourceType::S3OutpostsAccessPoint => { /* ... */ },
///     AccessCheckResourceType::S3OutpostsBucket => { /* ... */ },
///     AccessCheckResourceType::S3Table => { /* ... */ },
///     AccessCheckResourceType::S3TableBucket => { /* ... */ },
///     AccessCheckResourceType::SnsTopic => { /* ... */ },
///     AccessCheckResourceType::SqsQueue => { /* ... */ },
///     AccessCheckResourceType::SecretsmanagerSecret => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `accesscheckresourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AccessCheckResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AccessCheckResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AccessCheckResourceType::NewFeature` is defined.
/// Specifically, when `accesscheckresourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AccessCheckResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AccessCheckResourceType {
    #[allow(missing_docs)] // documentation missing in model
    ApiGatewayRestApi,
    #[allow(missing_docs)] // documentation missing in model
    BackupVault,
    #[allow(missing_docs)] // documentation missing in model
    CloudtrailDashboard,
    #[allow(missing_docs)] // documentation missing in model
    CloudtrailEventDataStore,
    #[allow(missing_docs)] // documentation missing in model
    CodeArtifactDomain,
    #[allow(missing_docs)] // documentation missing in model
    DynamodbStream,
    #[allow(missing_docs)] // documentation missing in model
    DynamodbTable,
    #[allow(missing_docs)] // documentation missing in model
    EfsFilesystem,
    #[allow(missing_docs)] // documentation missing in model
    RoleTrust,
    #[allow(missing_docs)] // documentation missing in model
    KmsKey,
    #[allow(missing_docs)] // documentation missing in model
    KinesisDataStream,
    #[allow(missing_docs)] // documentation missing in model
    KinesisStreamConsumer,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunction,
    #[allow(missing_docs)] // documentation missing in model
    OpensearchserviceDomain,
    #[allow(missing_docs)] // documentation missing in model
    S3AccessPoint,
    #[allow(missing_docs)] // documentation missing in model
    S3Bucket,
    #[allow(missing_docs)] // documentation missing in model
    S3Glacier,
    #[allow(missing_docs)] // documentation missing in model
    S3ExpressAccessPoint,
    #[allow(missing_docs)] // documentation missing in model
    S3ExpressDirectorybucket,
    #[allow(missing_docs)] // documentation missing in model
    S3OutpostsAccessPoint,
    #[allow(missing_docs)] // documentation missing in model
    S3OutpostsBucket,
    #[allow(missing_docs)] // documentation missing in model
    S3Table,
    #[allow(missing_docs)] // documentation missing in model
    S3TableBucket,
    #[allow(missing_docs)] // documentation missing in model
    SnsTopic,
    #[allow(missing_docs)] // documentation missing in model
    SqsQueue,
    #[allow(missing_docs)] // documentation missing in model
    SecretsmanagerSecret,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AccessCheckResourceType {
    fn from(s: &str) -> Self {
        match s {
            "AWS::ApiGateway::RestApi" => AccessCheckResourceType::ApiGatewayRestApi,
            "AWS::Backup::BackupVault" => AccessCheckResourceType::BackupVault,
            "AWS::CloudTrail::Dashboard" => AccessCheckResourceType::CloudtrailDashboard,
            "AWS::CloudTrail::EventDataStore" => AccessCheckResourceType::CloudtrailEventDataStore,
            "AWS::CodeArtifact::Domain" => AccessCheckResourceType::CodeArtifactDomain,
            "AWS::DynamoDB::Stream" => AccessCheckResourceType::DynamodbStream,
            "AWS::DynamoDB::Table" => AccessCheckResourceType::DynamodbTable,
            "AWS::EFS::FileSystem" => AccessCheckResourceType::EfsFilesystem,
            "AWS::IAM::AssumeRolePolicyDocument" => AccessCheckResourceType::RoleTrust,
            "AWS::KMS::Key" => AccessCheckResourceType::KmsKey,
            "AWS::Kinesis::Stream" => AccessCheckResourceType::KinesisDataStream,
            "AWS::Kinesis::StreamConsumer" => AccessCheckResourceType::KinesisStreamConsumer,
            "AWS::Lambda::Function" => AccessCheckResourceType::LambdaFunction,
            "AWS::OpenSearchService::Domain" => AccessCheckResourceType::OpensearchserviceDomain,
            "AWS::S3::AccessPoint" => AccessCheckResourceType::S3AccessPoint,
            "AWS::S3::Bucket" => AccessCheckResourceType::S3Bucket,
            "AWS::S3::Glacier" => AccessCheckResourceType::S3Glacier,
            "AWS::S3Express::AccessPoint" => AccessCheckResourceType::S3ExpressAccessPoint,
            "AWS::S3Express::DirectoryBucket" => AccessCheckResourceType::S3ExpressDirectorybucket,
            "AWS::S3Outposts::AccessPoint" => AccessCheckResourceType::S3OutpostsAccessPoint,
            "AWS::S3Outposts::Bucket" => AccessCheckResourceType::S3OutpostsBucket,
            "AWS::S3Tables::Table" => AccessCheckResourceType::S3Table,
            "AWS::S3Tables::TableBucket" => AccessCheckResourceType::S3TableBucket,
            "AWS::SNS::Topic" => AccessCheckResourceType::SnsTopic,
            "AWS::SQS::Queue" => AccessCheckResourceType::SqsQueue,
            "AWS::SecretsManager::Secret" => AccessCheckResourceType::SecretsmanagerSecret,
            other => AccessCheckResourceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AccessCheckResourceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AccessCheckResourceType::from(s))
    }
}
impl AccessCheckResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AccessCheckResourceType::ApiGatewayRestApi => "AWS::ApiGateway::RestApi",
            AccessCheckResourceType::BackupVault => "AWS::Backup::BackupVault",
            AccessCheckResourceType::CloudtrailDashboard => "AWS::CloudTrail::Dashboard",
            AccessCheckResourceType::CloudtrailEventDataStore => "AWS::CloudTrail::EventDataStore",
            AccessCheckResourceType::CodeArtifactDomain => "AWS::CodeArtifact::Domain",
            AccessCheckResourceType::DynamodbStream => "AWS::DynamoDB::Stream",
            AccessCheckResourceType::DynamodbTable => "AWS::DynamoDB::Table",
            AccessCheckResourceType::EfsFilesystem => "AWS::EFS::FileSystem",
            AccessCheckResourceType::RoleTrust => "AWS::IAM::AssumeRolePolicyDocument",
            AccessCheckResourceType::KmsKey => "AWS::KMS::Key",
            AccessCheckResourceType::KinesisDataStream => "AWS::Kinesis::Stream",
            AccessCheckResourceType::KinesisStreamConsumer => "AWS::Kinesis::StreamConsumer",
            AccessCheckResourceType::LambdaFunction => "AWS::Lambda::Function",
            AccessCheckResourceType::OpensearchserviceDomain => "AWS::OpenSearchService::Domain",
            AccessCheckResourceType::S3AccessPoint => "AWS::S3::AccessPoint",
            AccessCheckResourceType::S3Bucket => "AWS::S3::Bucket",
            AccessCheckResourceType::S3Glacier => "AWS::S3::Glacier",
            AccessCheckResourceType::S3ExpressAccessPoint => "AWS::S3Express::AccessPoint",
            AccessCheckResourceType::S3ExpressDirectorybucket => "AWS::S3Express::DirectoryBucket",
            AccessCheckResourceType::S3OutpostsAccessPoint => "AWS::S3Outposts::AccessPoint",
            AccessCheckResourceType::S3OutpostsBucket => "AWS::S3Outposts::Bucket",
            AccessCheckResourceType::S3Table => "AWS::S3Tables::Table",
            AccessCheckResourceType::S3TableBucket => "AWS::S3Tables::TableBucket",
            AccessCheckResourceType::SnsTopic => "AWS::SNS::Topic",
            AccessCheckResourceType::SqsQueue => "AWS::SQS::Queue",
            AccessCheckResourceType::SecretsmanagerSecret => "AWS::SecretsManager::Secret",
            AccessCheckResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS::ApiGateway::RestApi",
            "AWS::Backup::BackupVault",
            "AWS::CloudTrail::Dashboard",
            "AWS::CloudTrail::EventDataStore",
            "AWS::CodeArtifact::Domain",
            "AWS::DynamoDB::Stream",
            "AWS::DynamoDB::Table",
            "AWS::EFS::FileSystem",
            "AWS::IAM::AssumeRolePolicyDocument",
            "AWS::KMS::Key",
            "AWS::Kinesis::Stream",
            "AWS::Kinesis::StreamConsumer",
            "AWS::Lambda::Function",
            "AWS::OpenSearchService::Domain",
            "AWS::S3::AccessPoint",
            "AWS::S3::Bucket",
            "AWS::S3::Glacier",
            "AWS::S3Express::AccessPoint",
            "AWS::S3Express::DirectoryBucket",
            "AWS::S3Outposts::AccessPoint",
            "AWS::S3Outposts::Bucket",
            "AWS::S3Tables::Table",
            "AWS::S3Tables::TableBucket",
            "AWS::SNS::Topic",
            "AWS::SQS::Queue",
            "AWS::SecretsManager::Secret",
        ]
    }
}
impl ::std::convert::AsRef<str> for AccessCheckResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AccessCheckResourceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AccessCheckResourceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AccessCheckResourceType::ApiGatewayRestApi => write!(f, "AWS::ApiGateway::RestApi"),
            AccessCheckResourceType::BackupVault => write!(f, "AWS::Backup::BackupVault"),
            AccessCheckResourceType::CloudtrailDashboard => write!(f, "AWS::CloudTrail::Dashboard"),
            AccessCheckResourceType::CloudtrailEventDataStore => write!(f, "AWS::CloudTrail::EventDataStore"),
            AccessCheckResourceType::CodeArtifactDomain => write!(f, "AWS::CodeArtifact::Domain"),
            AccessCheckResourceType::DynamodbStream => write!(f, "AWS::DynamoDB::Stream"),
            AccessCheckResourceType::DynamodbTable => write!(f, "AWS::DynamoDB::Table"),
            AccessCheckResourceType::EfsFilesystem => write!(f, "AWS::EFS::FileSystem"),
            AccessCheckResourceType::RoleTrust => write!(f, "AWS::IAM::AssumeRolePolicyDocument"),
            AccessCheckResourceType::KmsKey => write!(f, "AWS::KMS::Key"),
            AccessCheckResourceType::KinesisDataStream => write!(f, "AWS::Kinesis::Stream"),
            AccessCheckResourceType::KinesisStreamConsumer => write!(f, "AWS::Kinesis::StreamConsumer"),
            AccessCheckResourceType::LambdaFunction => write!(f, "AWS::Lambda::Function"),
            AccessCheckResourceType::OpensearchserviceDomain => write!(f, "AWS::OpenSearchService::Domain"),
            AccessCheckResourceType::S3AccessPoint => write!(f, "AWS::S3::AccessPoint"),
            AccessCheckResourceType::S3Bucket => write!(f, "AWS::S3::Bucket"),
            AccessCheckResourceType::S3Glacier => write!(f, "AWS::S3::Glacier"),
            AccessCheckResourceType::S3ExpressAccessPoint => write!(f, "AWS::S3Express::AccessPoint"),
            AccessCheckResourceType::S3ExpressDirectorybucket => write!(f, "AWS::S3Express::DirectoryBucket"),
            AccessCheckResourceType::S3OutpostsAccessPoint => write!(f, "AWS::S3Outposts::AccessPoint"),
            AccessCheckResourceType::S3OutpostsBucket => write!(f, "AWS::S3Outposts::Bucket"),
            AccessCheckResourceType::S3Table => write!(f, "AWS::S3Tables::Table"),
            AccessCheckResourceType::S3TableBucket => write!(f, "AWS::S3Tables::TableBucket"),
            AccessCheckResourceType::SnsTopic => write!(f, "AWS::SNS::Topic"),
            AccessCheckResourceType::SqsQueue => write!(f, "AWS::SQS::Queue"),
            AccessCheckResourceType::SecretsmanagerSecret => write!(f, "AWS::SecretsManager::Secret"),
            AccessCheckResourceType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
