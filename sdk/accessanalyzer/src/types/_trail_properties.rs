// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the CloudTrail trail being analyzed to generate a policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrailProperties {
    /// <p>Specifies the ARN of the trail. The format of a trail ARN is <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>.</p>
    #[doc(hidden)]
    pub cloud_trail_arn: std::option::Option<std::string::String>,
    /// <p>A list of regions to get CloudTrail data from and analyze to generate a policy.</p>
    #[doc(hidden)]
    pub regions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Possible values are <code>true</code> or <code>false</code>. If set to <code>true</code>, IAM Access Analyzer retrieves CloudTrail data from all regions to analyze and generate a policy.</p>
    #[doc(hidden)]
    pub all_regions: std::option::Option<bool>,
}
impl TrailProperties {
    /// <p>Specifies the ARN of the trail. The format of a trail ARN is <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>.</p>
    pub fn cloud_trail_arn(&self) -> std::option::Option<&str> {
        self.cloud_trail_arn.as_deref()
    }
    /// <p>A list of regions to get CloudTrail data from and analyze to generate a policy.</p>
    pub fn regions(&self) -> std::option::Option<&[std::string::String]> {
        self.regions.as_deref()
    }
    /// <p>Possible values are <code>true</code> or <code>false</code>. If set to <code>true</code>, IAM Access Analyzer retrieves CloudTrail data from all regions to analyze and generate a policy.</p>
    pub fn all_regions(&self) -> std::option::Option<bool> {
        self.all_regions
    }
}
impl TrailProperties {
    /// Creates a new builder-style object to manufacture [`TrailProperties`](crate::types::TrailProperties).
    pub fn builder() -> crate::types::builders::TrailPropertiesBuilder {
        crate::types::builders::TrailPropertiesBuilder::default()
    }
}

/// A builder for [`TrailProperties`](crate::types::TrailProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrailPropertiesBuilder {
    pub(crate) cloud_trail_arn: std::option::Option<std::string::String>,
    pub(crate) regions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) all_regions: std::option::Option<bool>,
}
impl TrailPropertiesBuilder {
    /// <p>Specifies the ARN of the trail. The format of a trail ARN is <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>.</p>
    pub fn cloud_trail_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_trail_arn = Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the trail. The format of a trail ARN is <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code>.</p>
    pub fn set_cloud_trail_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cloud_trail_arn = input;
        self
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>A list of regions to get CloudTrail data from and analyze to generate a policy.</p>
    pub fn regions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = Some(v);
        self
    }
    /// <p>A list of regions to get CloudTrail data from and analyze to generate a policy.</p>
    pub fn set_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.regions = input;
        self
    }
    /// <p>Possible values are <code>true</code> or <code>false</code>. If set to <code>true</code>, IAM Access Analyzer retrieves CloudTrail data from all regions to analyze and generate a policy.</p>
    pub fn all_regions(mut self, input: bool) -> Self {
        self.all_regions = Some(input);
        self
    }
    /// <p>Possible values are <code>true</code> or <code>false</code>. If set to <code>true</code>, IAM Access Analyzer retrieves CloudTrail data from all regions to analyze and generate a policy.</p>
    pub fn set_all_regions(mut self, input: std::option::Option<bool>) -> Self {
        self.all_regions = input;
        self
    }
    /// Consumes the builder and constructs a [`TrailProperties`](crate::types::TrailProperties).
    pub fn build(self) -> crate::types::TrailProperties {
        crate::types::TrailProperties {
            cloud_trail_arn: self.cloud_trail_arn,
            regions: self.regions,
            all_regions: self.all_regions,
        }
    }
}
