// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A span in a policy. The span consists of a start position (inclusive) and end position (exclusive).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Span {
    /// <p>The start position of the span (inclusive).</p>
    #[doc(hidden)]
    pub start: std::option::Option<crate::types::Position>,
    /// <p>The end position of the span (exclusive).</p>
    #[doc(hidden)]
    pub end: std::option::Option<crate::types::Position>,
}
impl Span {
    /// <p>The start position of the span (inclusive).</p>
    pub fn start(&self) -> std::option::Option<&crate::types::Position> {
        self.start.as_ref()
    }
    /// <p>The end position of the span (exclusive).</p>
    pub fn end(&self) -> std::option::Option<&crate::types::Position> {
        self.end.as_ref()
    }
}
impl Span {
    /// Creates a new builder-style object to manufacture [`Span`](crate::types::Span).
    pub fn builder() -> crate::types::builders::SpanBuilder {
        crate::types::builders::SpanBuilder::default()
    }
}

/// A builder for [`Span`](crate::types::Span).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpanBuilder {
    pub(crate) start: std::option::Option<crate::types::Position>,
    pub(crate) end: std::option::Option<crate::types::Position>,
}
impl SpanBuilder {
    /// <p>The start position of the span (inclusive).</p>
    pub fn start(mut self, input: crate::types::Position) -> Self {
        self.start = Some(input);
        self
    }
    /// <p>The start position of the span (inclusive).</p>
    pub fn set_start(mut self, input: std::option::Option<crate::types::Position>) -> Self {
        self.start = input;
        self
    }
    /// <p>The end position of the span (exclusive).</p>
    pub fn end(mut self, input: crate::types::Position) -> Self {
        self.end = Some(input);
        self
    }
    /// <p>The end position of the span (exclusive).</p>
    pub fn set_end(mut self, input: std::option::Option<crate::types::Position>) -> Self {
        self.end = input;
        self
    }
    /// Consumes the builder and constructs a [`Span`](crate::types::Span).
    pub fn build(self) -> crate::types::Span {
        crate::types::Span {
            start: self.start,
            end: self.end,
        }
    }
}
