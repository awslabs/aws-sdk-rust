// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details about the policy generation error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobError {
    /// <p>The job error code.</p>
    pub code: crate::types::JobErrorCode,
    /// <p>Specific information about the error. For example, which service quota was exceeded or which resource was not found.</p>
    pub message: ::std::string::String,
}
impl JobError {
    /// <p>The job error code.</p>
    pub fn code(&self) -> &crate::types::JobErrorCode {
        &self.code
    }
    /// <p>Specific information about the error. For example, which service quota was exceeded or which resource was not found.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl JobError {
    /// Creates a new builder-style object to manufacture [`JobError`](crate::types::JobError).
    pub fn builder() -> crate::types::builders::JobErrorBuilder {
        crate::types::builders::JobErrorBuilder::default()
    }
}

/// A builder for [`JobError`](crate::types::JobError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::JobErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl JobErrorBuilder {
    /// <p>The job error code.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::JobErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job error code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::JobErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The job error code.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::JobErrorCode> {
        &self.code
    }
    /// <p>Specific information about the error. For example, which service quota was exceeded or which resource was not found.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specific information about the error. For example, which service quota was exceeded or which resource was not found.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Specific information about the error. For example, which service quota was exceeded or which resource was not found.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`JobError`](crate::types::JobError).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::JobErrorBuilder::code)
    /// - [`message`](crate::types::builders::JobErrorBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::JobError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobError {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building JobError",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building JobError",
                )
            })?,
        })
    }
}
