// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An access preview finding generated by the access preview.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessPreviewFinding {
    /// <p>The ID of the access preview finding. This ID uniquely identifies the element in the list of access preview findings and is not related to the finding ID in Access Analyzer.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The existing ID of the finding in IAM Access Analyzer, provided only for existing findings.</p>
    #[doc(hidden)]
    pub existing_finding_id: std::option::Option<std::string::String>,
    /// <p>The existing status of the finding, provided only for existing findings.</p>
    #[doc(hidden)]
    pub existing_finding_status: std::option::Option<crate::types::FindingStatus>,
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    #[doc(hidden)]
    pub principal:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The action in the analyzed policy statement that an external principal has permission to perform.</p>
    #[doc(hidden)]
    pub action: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The condition in the analyzed policy statement that resulted in a finding.</p>
    #[doc(hidden)]
    pub condition:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The resource that an external principal has access to. This is the resource associated with the access preview.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<std::string::String>,
    /// <p>Indicates whether the policy that generated the finding allows public access to the resource.</p>
    #[doc(hidden)]
    pub is_public: std::option::Option<bool>,
    /// <p>The type of the resource that can be accessed in the finding.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The time at which the access preview finding was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Provides context on how the access preview finding compares to existing access identified in IAM Access Analyzer.</p>
    /// <ul>
    /// <li> <p> <code>New</code> - The finding is for newly-introduced access.</p> </li>
    /// <li> <p> <code>Unchanged</code> - The preview finding is an existing finding that would remain unchanged.</p> </li>
    /// <li> <p> <code>Changed</code> - The preview finding is an existing finding with a change in status.</p> </li>
    /// </ul>
    /// <p>For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    #[doc(hidden)]
    pub change_type: std::option::Option<crate::types::FindingChangeType>,
    /// <p>The preview status of the finding. This is what the status of the finding would be after permissions deployment. For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FindingStatus>,
    /// <p>The Amazon Web Services account ID that owns the resource. For most Amazon Web Services resources, the owning account is the account in which the resource was created.</p>
    #[doc(hidden)]
    pub resource_owner_account: std::option::Option<std::string::String>,
    /// <p>An error.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    /// <p>The sources of the finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::FindingSource>>,
}
impl AccessPreviewFinding {
    /// <p>The ID of the access preview finding. This ID uniquely identifies the element in the list of access preview findings and is not related to the finding ID in Access Analyzer.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The existing ID of the finding in IAM Access Analyzer, provided only for existing findings.</p>
    pub fn existing_finding_id(&self) -> std::option::Option<&str> {
        self.existing_finding_id.as_deref()
    }
    /// <p>The existing status of the finding, provided only for existing findings.</p>
    pub fn existing_finding_status(&self) -> std::option::Option<&crate::types::FindingStatus> {
        self.existing_finding_status.as_ref()
    }
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn principal(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.principal.as_ref()
    }
    /// <p>The action in the analyzed policy statement that an external principal has permission to perform.</p>
    pub fn action(&self) -> std::option::Option<&[std::string::String]> {
        self.action.as_deref()
    }
    /// <p>The condition in the analyzed policy statement that resulted in a finding.</p>
    pub fn condition(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.condition.as_ref()
    }
    /// <p>The resource that an external principal has access to. This is the resource associated with the access preview.</p>
    pub fn resource(&self) -> std::option::Option<&str> {
        self.resource.as_deref()
    }
    /// <p>Indicates whether the policy that generated the finding allows public access to the resource.</p>
    pub fn is_public(&self) -> std::option::Option<bool> {
        self.is_public
    }
    /// <p>The type of the resource that can be accessed in the finding.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The time at which the access preview finding was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Provides context on how the access preview finding compares to existing access identified in IAM Access Analyzer.</p>
    /// <ul>
    /// <li> <p> <code>New</code> - The finding is for newly-introduced access.</p> </li>
    /// <li> <p> <code>Unchanged</code> - The preview finding is an existing finding that would remain unchanged.</p> </li>
    /// <li> <p> <code>Changed</code> - The preview finding is an existing finding with a change in status.</p> </li>
    /// </ul>
    /// <p>For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn change_type(&self) -> std::option::Option<&crate::types::FindingChangeType> {
        self.change_type.as_ref()
    }
    /// <p>The preview status of the finding. This is what the status of the finding would be after permissions deployment. For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::FindingStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Web Services account ID that owns the resource. For most Amazon Web Services resources, the owning account is the account in which the resource was created.</p>
    pub fn resource_owner_account(&self) -> std::option::Option<&str> {
        self.resource_owner_account.as_deref()
    }
    /// <p>An error.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>The sources of the finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::FindingSource]> {
        self.sources.as_deref()
    }
}
impl AccessPreviewFinding {
    /// Creates a new builder-style object to manufacture [`AccessPreviewFinding`](crate::types::AccessPreviewFinding).
    pub fn builder() -> crate::types::builders::AccessPreviewFindingBuilder {
        crate::types::builders::AccessPreviewFindingBuilder::default()
    }
}

/// A builder for [`AccessPreviewFinding`](crate::types::AccessPreviewFinding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccessPreviewFindingBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) existing_finding_id: std::option::Option<std::string::String>,
    pub(crate) existing_finding_status: std::option::Option<crate::types::FindingStatus>,
    pub(crate) principal:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) action: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) condition:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) resource: std::option::Option<std::string::String>,
    pub(crate) is_public: std::option::Option<bool>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) change_type: std::option::Option<crate::types::FindingChangeType>,
    pub(crate) status: std::option::Option<crate::types::FindingStatus>,
    pub(crate) resource_owner_account: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<std::string::String>,
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::FindingSource>>,
}
impl AccessPreviewFindingBuilder {
    /// <p>The ID of the access preview finding. This ID uniquely identifies the element in the list of access preview findings and is not related to the finding ID in Access Analyzer.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the access preview finding. This ID uniquely identifies the element in the list of access preview findings and is not related to the finding ID in Access Analyzer.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The existing ID of the finding in IAM Access Analyzer, provided only for existing findings.</p>
    pub fn existing_finding_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.existing_finding_id = Some(input.into());
        self
    }
    /// <p>The existing ID of the finding in IAM Access Analyzer, provided only for existing findings.</p>
    pub fn set_existing_finding_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.existing_finding_id = input;
        self
    }
    /// <p>The existing status of the finding, provided only for existing findings.</p>
    pub fn existing_finding_status(mut self, input: crate::types::FindingStatus) -> Self {
        self.existing_finding_status = Some(input);
        self
    }
    /// <p>The existing status of the finding, provided only for existing findings.</p>
    pub fn set_existing_finding_status(
        mut self,
        input: std::option::Option<crate::types::FindingStatus>,
    ) -> Self {
        self.existing_finding_status = input;
        self
    }
    /// Adds a key-value pair to `principal`.
    ///
    /// To override the contents of this collection use [`set_principal`](Self::set_principal).
    ///
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn principal(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.principal.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.principal = Some(hash_map);
        self
    }
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    pub fn set_principal(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.principal = input;
        self
    }
    /// Appends an item to `action`.
    ///
    /// To override the contents of this collection use [`set_action`](Self::set_action).
    ///
    /// <p>The action in the analyzed policy statement that an external principal has permission to perform.</p>
    pub fn action(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.action.unwrap_or_default();
        v.push(input.into());
        self.action = Some(v);
        self
    }
    /// <p>The action in the analyzed policy statement that an external principal has permission to perform.</p>
    pub fn set_action(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.action = input;
        self
    }
    /// Adds a key-value pair to `condition`.
    ///
    /// To override the contents of this collection use [`set_condition`](Self::set_condition).
    ///
    /// <p>The condition in the analyzed policy statement that resulted in a finding.</p>
    pub fn condition(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.condition.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.condition = Some(hash_map);
        self
    }
    /// <p>The condition in the analyzed policy statement that resulted in a finding.</p>
    pub fn set_condition(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.condition = input;
        self
    }
    /// <p>The resource that an external principal has access to. This is the resource associated with the access preview.</p>
    pub fn resource(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource = Some(input.into());
        self
    }
    /// <p>The resource that an external principal has access to. This is the resource associated with the access preview.</p>
    pub fn set_resource(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Indicates whether the policy that generated the finding allows public access to the resource.</p>
    pub fn is_public(mut self, input: bool) -> Self {
        self.is_public = Some(input);
        self
    }
    /// <p>Indicates whether the policy that generated the finding allows public access to the resource.</p>
    pub fn set_is_public(mut self, input: std::option::Option<bool>) -> Self {
        self.is_public = input;
        self
    }
    /// <p>The type of the resource that can be accessed in the finding.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of the resource that can be accessed in the finding.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The time at which the access preview finding was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the access preview finding was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Provides context on how the access preview finding compares to existing access identified in IAM Access Analyzer.</p>
    /// <ul>
    /// <li> <p> <code>New</code> - The finding is for newly-introduced access.</p> </li>
    /// <li> <p> <code>Unchanged</code> - The preview finding is an existing finding that would remain unchanged.</p> </li>
    /// <li> <p> <code>Changed</code> - The preview finding is an existing finding with a change in status.</p> </li>
    /// </ul>
    /// <p>For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn change_type(mut self, input: crate::types::FindingChangeType) -> Self {
        self.change_type = Some(input);
        self
    }
    /// <p>Provides context on how the access preview finding compares to existing access identified in IAM Access Analyzer.</p>
    /// <ul>
    /// <li> <p> <code>New</code> - The finding is for newly-introduced access.</p> </li>
    /// <li> <p> <code>Unchanged</code> - The preview finding is an existing finding that would remain unchanged.</p> </li>
    /// <li> <p> <code>Changed</code> - The preview finding is an existing finding with a change in status.</p> </li>
    /// </ul>
    /// <p>For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn set_change_type(
        mut self,
        input: std::option::Option<crate::types::FindingChangeType>,
    ) -> Self {
        self.change_type = input;
        self
    }
    /// <p>The preview status of the finding. This is what the status of the finding would be after permissions deployment. For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn status(mut self, input: crate::types::FindingStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The preview status of the finding. This is what the status of the finding would be after permissions deployment. For example, a <code>Changed</code> finding with preview status <code>Resolved</code> and existing status <code>Active</code> indicates the existing <code>Active</code> finding would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::FindingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resource. For most Amazon Web Services resources, the owning account is the account in which the resource was created.</p>
    pub fn resource_owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_owner_account = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resource. For most Amazon Web Services resources, the owning account is the account in which the resource was created.</p>
    pub fn set_resource_owner_account(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_owner_account = input;
        self
    }
    /// <p>An error.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>An error.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The sources of the finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn sources(mut self, input: crate::types::FindingSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The sources of the finding. This indicates how the access that generated the finding is granted. It is populated for Amazon S3 bucket findings.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FindingSource>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Consumes the builder and constructs a [`AccessPreviewFinding`](crate::types::AccessPreviewFinding).
    pub fn build(self) -> crate::types::AccessPreviewFinding {
        crate::types::AccessPreviewFinding {
            id: self.id,
            existing_finding_id: self.existing_finding_id,
            existing_finding_status: self.existing_finding_status,
            principal: self.principal,
            action: self.action,
            condition: self.condition,
            resource: self.resource,
            is_public: self.is_public,
            resource_type: self.resource_type,
            created_at: self.created_at,
            change_type: self.change_type,
            status: self.status,
            resource_owner_account: self.resource_owner_account,
            error: self.error,
            sources: self.sources,
        }
    }
}
