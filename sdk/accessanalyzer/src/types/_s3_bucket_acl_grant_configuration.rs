// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A proposed access control list grant configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#setting-acls">How to Specify an ACL</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3BucketAclGrantConfiguration {
    /// <p>The permissions being granted.</p>
    pub permission: crate::types::AclPermission,
    /// <p>The grantee to whom you’re assigning access rights.</p>
    pub grantee: ::std::option::Option<crate::types::AclGrantee>,
}
impl S3BucketAclGrantConfiguration {
    /// <p>The permissions being granted.</p>
    pub fn permission(&self) -> &crate::types::AclPermission {
        &self.permission
    }
    /// <p>The grantee to whom you’re assigning access rights.</p>
    pub fn grantee(&self) -> ::std::option::Option<&crate::types::AclGrantee> {
        self.grantee.as_ref()
    }
}
impl S3BucketAclGrantConfiguration {
    /// Creates a new builder-style object to manufacture [`S3BucketAclGrantConfiguration`](crate::types::S3BucketAclGrantConfiguration).
    pub fn builder() -> crate::types::builders::S3BucketAclGrantConfigurationBuilder {
        crate::types::builders::S3BucketAclGrantConfigurationBuilder::default()
    }
}

/// A builder for [`S3BucketAclGrantConfiguration`](crate::types::S3BucketAclGrantConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3BucketAclGrantConfigurationBuilder {
    pub(crate) permission: ::std::option::Option<crate::types::AclPermission>,
    pub(crate) grantee: ::std::option::Option<crate::types::AclGrantee>,
}
impl S3BucketAclGrantConfigurationBuilder {
    /// <p>The permissions being granted.</p>
    /// This field is required.
    pub fn permission(mut self, input: crate::types::AclPermission) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>The permissions being granted.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::AclPermission>) -> Self {
        self.permission = input;
        self
    }
    /// <p>The permissions being granted.</p>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::AclPermission> {
        &self.permission
    }
    /// <p>The grantee to whom you’re assigning access rights.</p>
    /// This field is required.
    pub fn grantee(mut self, input: crate::types::AclGrantee) -> Self {
        self.grantee = ::std::option::Option::Some(input);
        self
    }
    /// <p>The grantee to whom you’re assigning access rights.</p>
    pub fn set_grantee(mut self, input: ::std::option::Option<crate::types::AclGrantee>) -> Self {
        self.grantee = input;
        self
    }
    /// <p>The grantee to whom you’re assigning access rights.</p>
    pub fn get_grantee(&self) -> &::std::option::Option<crate::types::AclGrantee> {
        &self.grantee
    }
    /// Consumes the builder and constructs a [`S3BucketAclGrantConfiguration`](crate::types::S3BucketAclGrantConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`permission`](crate::types::builders::S3BucketAclGrantConfigurationBuilder::permission)
    pub fn build(self) -> ::std::result::Result<crate::types::S3BucketAclGrantConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3BucketAclGrantConfiguration {
            permission: self.permission.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "permission",
                    "permission was not specified but it is required when building S3BucketAclGrantConfiguration",
                )
            })?,
            grantee: self.grantee,
        })
    }
}
