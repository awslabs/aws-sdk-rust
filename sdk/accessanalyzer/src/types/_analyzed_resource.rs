// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the analyzed resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalyzedResource {
    /// <p>The ARN of the resource that was analyzed.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The type of the resource that was analyzed.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The time at which the finding was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the resource was analyzed.</p>
    #[doc(hidden)]
    pub analyzed_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the finding was updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates whether the policy that generated the finding grants public access to the resource.</p>
    #[doc(hidden)]
    pub is_public: std::option::Option<bool>,
    /// <p>The actions that an external principal is granted permission to use by the policy that generated the finding.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates how the access that generated the finding is granted. This is populated for Amazon S3 bucket findings.</p>
    #[doc(hidden)]
    pub shared_via: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The current status of the finding generated from the analyzed resource.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FindingStatus>,
    /// <p>The Amazon Web Services account ID that owns the resource.</p>
    #[doc(hidden)]
    pub resource_owner_account: std::option::Option<std::string::String>,
    /// <p>An error message.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
}
impl AnalyzedResource {
    /// <p>The ARN of the resource that was analyzed.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The type of the resource that was analyzed.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The time at which the finding was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time at which the resource was analyzed.</p>
    pub fn analyzed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.analyzed_at.as_ref()
    }
    /// <p>The time at which the finding was updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Indicates whether the policy that generated the finding grants public access to the resource.</p>
    pub fn is_public(&self) -> std::option::Option<bool> {
        self.is_public
    }
    /// <p>The actions that an external principal is granted permission to use by the policy that generated the finding.</p>
    pub fn actions(&self) -> std::option::Option<&[std::string::String]> {
        self.actions.as_deref()
    }
    /// <p>Indicates how the access that generated the finding is granted. This is populated for Amazon S3 bucket findings.</p>
    pub fn shared_via(&self) -> std::option::Option<&[std::string::String]> {
        self.shared_via.as_deref()
    }
    /// <p>The current status of the finding generated from the analyzed resource.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::FindingStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Web Services account ID that owns the resource.</p>
    pub fn resource_owner_account(&self) -> std::option::Option<&str> {
        self.resource_owner_account.as_deref()
    }
    /// <p>An error message.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
}
impl AnalyzedResource {
    /// Creates a new builder-style object to manufacture [`AnalyzedResource`](crate::types::AnalyzedResource).
    pub fn builder() -> crate::types::builders::AnalyzedResourceBuilder {
        crate::types::builders::AnalyzedResourceBuilder::default()
    }
}

/// A builder for [`AnalyzedResource`](crate::types::AnalyzedResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalyzedResourceBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) analyzed_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) is_public: std::option::Option<bool>,
    pub(crate) actions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) shared_via: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::FindingStatus>,
    pub(crate) resource_owner_account: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<std::string::String>,
}
impl AnalyzedResourceBuilder {
    /// <p>The ARN of the resource that was analyzed.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the resource that was analyzed.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The type of the resource that was analyzed.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of the resource that was analyzed.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The time at which the finding was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the finding was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the resource was analyzed.</p>
    pub fn analyzed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.analyzed_at = Some(input);
        self
    }
    /// <p>The time at which the resource was analyzed.</p>
    pub fn set_analyzed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.analyzed_at = input;
        self
    }
    /// <p>The time at which the finding was updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The time at which the finding was updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>Indicates whether the policy that generated the finding grants public access to the resource.</p>
    pub fn is_public(mut self, input: bool) -> Self {
        self.is_public = Some(input);
        self
    }
    /// <p>Indicates whether the policy that generated the finding grants public access to the resource.</p>
    pub fn set_is_public(mut self, input: std::option::Option<bool>) -> Self {
        self.is_public = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions that an external principal is granted permission to use by the policy that generated the finding.</p>
    pub fn actions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = Some(v);
        self
    }
    /// <p>The actions that an external principal is granted permission to use by the policy that generated the finding.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Appends an item to `shared_via`.
    ///
    /// To override the contents of this collection use [`set_shared_via`](Self::set_shared_via).
    ///
    /// <p>Indicates how the access that generated the finding is granted. This is populated for Amazon S3 bucket findings.</p>
    pub fn shared_via(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.shared_via.unwrap_or_default();
        v.push(input.into());
        self.shared_via = Some(v);
        self
    }
    /// <p>Indicates how the access that generated the finding is granted. This is populated for Amazon S3 bucket findings.</p>
    pub fn set_shared_via(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.shared_via = input;
        self
    }
    /// <p>The current status of the finding generated from the analyzed resource.</p>
    pub fn status(mut self, input: crate::types::FindingStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the finding generated from the analyzed resource.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::FindingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resource.</p>
    pub fn resource_owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_owner_account = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resource.</p>
    pub fn set_resource_owner_account(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_owner_account = input;
        self
    }
    /// <p>An error message.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>An error message.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalyzedResource`](crate::types::AnalyzedResource).
    pub fn build(self) -> crate::types::AnalyzedResource {
        crate::types::AnalyzedResource {
            resource_arn: self.resource_arn,
            resource_type: self.resource_type,
            created_at: self.created_at,
            analyzed_at: self.analyzed_at,
            updated_at: self.updated_at,
            is_public: self.is_public,
            actions: self.actions,
            shared_via: self.shared_via,
            status: self.status,
            resource_owner_account: self.resource_owner_account,
            error: self.error,
        }
    }
}
