// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed access control configuration for an IAM role. You can propose a configuration for a new IAM role or an existing IAM role that you own by specifying the trust policy. If the configuration is for a new IAM role, you must specify the trust policy. If the configuration is for an existing IAM role that you own and you do not propose the trust policy, the access preview uses the existing trust policy for the role. The proposed trust policy cannot be an empty string. For more information about role trust policy limits, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IamRoleConfiguration {
    /// <p>The proposed trust policy for the IAM role.</p>
    #[doc(hidden)]
    pub trust_policy: std::option::Option<std::string::String>,
}
impl IamRoleConfiguration {
    /// <p>The proposed trust policy for the IAM role.</p>
    pub fn trust_policy(&self) -> std::option::Option<&str> {
        self.trust_policy.as_deref()
    }
}
impl IamRoleConfiguration {
    /// Creates a new builder-style object to manufacture [`IamRoleConfiguration`](crate::types::IamRoleConfiguration).
    pub fn builder() -> crate::types::builders::IamRoleConfigurationBuilder {
        crate::types::builders::IamRoleConfigurationBuilder::default()
    }
}

/// A builder for [`IamRoleConfiguration`](crate::types::IamRoleConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IamRoleConfigurationBuilder {
    pub(crate) trust_policy: std::option::Option<std::string::String>,
}
impl IamRoleConfigurationBuilder {
    /// <p>The proposed trust policy for the IAM role.</p>
    pub fn trust_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.trust_policy = Some(input.into());
        self
    }
    /// <p>The proposed trust policy for the IAM role.</p>
    pub fn set_trust_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trust_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`IamRoleConfiguration`](crate::types::IamRoleConfiguration).
    pub fn build(self) -> crate::types::IamRoleConfiguration {
        crate::types::IamRoleConfiguration {
            trust_policy: self.trust_policy,
        }
    }
}
