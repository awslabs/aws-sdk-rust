// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates findings with the new values provided in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFindingsInput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources">ARN of the analyzer</a> that generated the findings to update.</p>
    #[doc(hidden)]
    pub analyzer_arn: std::option::Option<std::string::String>,
    /// <p>The state represents the action to take to update the finding Status. Use <code>ARCHIVE</code> to change an Active finding to an Archived finding. Use <code>ACTIVE</code> to change an Archived finding to an Active finding.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FindingStatusUpdate>,
    /// <p>The IDs of the findings to update.</p>
    #[doc(hidden)]
    pub ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ARN of the resource identified in the finding.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>A client token.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl UpdateFindingsInput {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources">ARN of the analyzer</a> that generated the findings to update.</p>
    pub fn analyzer_arn(&self) -> std::option::Option<&str> {
        self.analyzer_arn.as_deref()
    }
    /// <p>The state represents the action to take to update the finding Status. Use <code>ARCHIVE</code> to change an Active finding to an Archived finding. Use <code>ACTIVE</code> to change an Archived finding to an Active finding.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::FindingStatusUpdate> {
        self.status.as_ref()
    }
    /// <p>The IDs of the findings to update.</p>
    pub fn ids(&self) -> std::option::Option<&[std::string::String]> {
        self.ids.as_deref()
    }
    /// <p>The ARN of the resource identified in the finding.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>A client token.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateFindingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
    pub fn builder() -> crate::operation::update_findings::builders::UpdateFindingsInputBuilder {
        crate::operation::update_findings::builders::UpdateFindingsInputBuilder::default()
    }
}

/// A builder for [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFindingsInputBuilder {
    pub(crate) analyzer_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::FindingStatusUpdate>,
    pub(crate) ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl UpdateFindingsInputBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources">ARN of the analyzer</a> that generated the findings to update.</p>
    pub fn analyzer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.analyzer_arn = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources">ARN of the analyzer</a> that generated the findings to update.</p>
    pub fn set_analyzer_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.analyzer_arn = input;
        self
    }
    /// <p>The state represents the action to take to update the finding Status. Use <code>ARCHIVE</code> to change an Active finding to an Archived finding. Use <code>ACTIVE</code> to change an Archived finding to an Active finding.</p>
    pub fn status(mut self, input: crate::types::FindingStatusUpdate) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The state represents the action to take to update the finding Status. Use <code>ARCHIVE</code> to change an Active finding to an Archived finding. Use <code>ACTIVE</code> to change an Archived finding to an Active finding.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::FindingStatusUpdate>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `ids`.
    ///
    /// To override the contents of this collection use [`set_ids`](Self::set_ids).
    ///
    /// <p>The IDs of the findings to update.</p>
    pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ids.unwrap_or_default();
        v.push(input.into());
        self.ids = Some(v);
        self
    }
    /// <p>The IDs of the findings to update.</p>
    pub fn set_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ids = input;
        self
    }
    /// <p>The ARN of the resource identified in the finding.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the resource identified in the finding.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>A client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFindingsInput`](crate::operation::update_findings::UpdateFindingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_findings::UpdateFindingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_findings::UpdateFindingsInput {
            analyzer_arn: self.analyzer_arn,
            status: self.status,
            ids: self.ids,
            resource_arn: self.resource_arn,
            client_token: self.client_token,
        })
    }
}
