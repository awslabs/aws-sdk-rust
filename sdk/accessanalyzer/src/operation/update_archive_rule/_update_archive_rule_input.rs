// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates the specified archive rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateArchiveRuleInput {
    /// <p>The name of the analyzer to update the archive rules for.</p>
    #[doc(hidden)]
    pub analyzer_name: std::option::Option<std::string::String>,
    /// <p>The name of the rule to update.</p>
    #[doc(hidden)]
    pub rule_name: std::option::Option<std::string::String>,
    /// <p>A filter to match for the rules to update. Only rules that match the filter are updated.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Criterion>,
    >,
    /// <p>A client token.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl UpdateArchiveRuleInput {
    /// <p>The name of the analyzer to update the archive rules for.</p>
    pub fn analyzer_name(&self) -> std::option::Option<&str> {
        self.analyzer_name.as_deref()
    }
    /// <p>The name of the rule to update.</p>
    pub fn rule_name(&self) -> std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>A filter to match for the rules to update. Only rules that match the filter are updated.</p>
    pub fn filter(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Criterion>>
    {
        self.filter.as_ref()
    }
    /// <p>A client token.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateArchiveRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateArchiveRuleInput`](crate::operation::update_archive_rule::UpdateArchiveRuleInput).
    pub fn builder(
    ) -> crate::operation::update_archive_rule::builders::UpdateArchiveRuleInputBuilder {
        crate::operation::update_archive_rule::builders::UpdateArchiveRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateArchiveRuleInput`](crate::operation::update_archive_rule::UpdateArchiveRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateArchiveRuleInputBuilder {
    pub(crate) analyzer_name: std::option::Option<std::string::String>,
    pub(crate) rule_name: std::option::Option<std::string::String>,
    pub(crate) filter: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Criterion>,
    >,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl UpdateArchiveRuleInputBuilder {
    /// <p>The name of the analyzer to update the archive rules for.</p>
    pub fn analyzer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.analyzer_name = Some(input.into());
        self
    }
    /// <p>The name of the analyzer to update the archive rules for.</p>
    pub fn set_analyzer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.analyzer_name = input;
        self
    }
    /// <p>The name of the rule to update.</p>
    pub fn rule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_name = Some(input.into());
        self
    }
    /// <p>The name of the rule to update.</p>
    pub fn set_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// Adds a key-value pair to `filter`.
    ///
    /// To override the contents of this collection use [`set_filter`](Self::set_filter).
    ///
    /// <p>A filter to match for the rules to update. Only rules that match the filter are updated.</p>
    pub fn filter(mut self, k: impl Into<std::string::String>, v: crate::types::Criterion) -> Self {
        let mut hash_map = self.filter.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.filter = Some(hash_map);
        self
    }
    /// <p>A filter to match for the rules to update. Only rules that match the filter are updated.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Criterion>,
        >,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>A client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateArchiveRuleInput`](crate::operation::update_archive_rule::UpdateArchiveRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_archive_rule::UpdateArchiveRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_archive_rule::UpdateArchiveRuleInput {
                analyzer_name: self.analyzer_name,
                rule_name: self.rule_name,
                filter: self.filter,
                client_token: self.client_token,
            },
        )
    }
}
