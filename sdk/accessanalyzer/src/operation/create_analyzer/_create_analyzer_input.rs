// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates an analyzer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAnalyzerInput {
    /// <p>The name of the analyzer to create.</p>
    #[doc(hidden)]
    pub analyzer_name: std::option::Option<std::string::String>,
    /// <p>The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
    /// <p>Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.</p>
    #[doc(hidden)]
    pub archive_rules: std::option::Option<std::vec::Vec<crate::types::InlineArchiveRule>>,
    /// <p>The tags to apply to the analyzer.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A client token.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateAnalyzerInput {
    /// <p>The name of the analyzer to create.</p>
    pub fn analyzer_name(&self) -> std::option::Option<&str> {
        self.analyzer_name.as_deref()
    }
    /// <p>The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// <p>Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.</p>
    pub fn archive_rules(&self) -> std::option::Option<&[crate::types::InlineArchiveRule]> {
        self.archive_rules.as_deref()
    }
    /// <p>The tags to apply to the analyzer.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A client token.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateAnalyzerInput {
    /// Creates a new builder-style object to manufacture [`CreateAnalyzerInput`](crate::operation::create_analyzer::CreateAnalyzerInput).
    pub fn builder() -> crate::operation::create_analyzer::builders::CreateAnalyzerInputBuilder {
        crate::operation::create_analyzer::builders::CreateAnalyzerInputBuilder::default()
    }
}

/// A builder for [`CreateAnalyzerInput`](crate::operation::create_analyzer::CreateAnalyzerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAnalyzerInputBuilder {
    pub(crate) analyzer_name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
    pub(crate) archive_rules: std::option::Option<std::vec::Vec<crate::types::InlineArchiveRule>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateAnalyzerInputBuilder {
    /// <p>The name of the analyzer to create.</p>
    pub fn analyzer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.analyzer_name = Some(input.into());
        self
    }
    /// <p>The name of the analyzer to create.</p>
    pub fn set_analyzer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.analyzer_name = input;
        self
    }
    /// <p>The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `archive_rules`.
    ///
    /// To override the contents of this collection use [`set_archive_rules`](Self::set_archive_rules).
    ///
    /// <p>Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.</p>
    pub fn archive_rules(mut self, input: crate::types::InlineArchiveRule) -> Self {
        let mut v = self.archive_rules.unwrap_or_default();
        v.push(input);
        self.archive_rules = Some(v);
        self
    }
    /// <p>Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.</p>
    pub fn set_archive_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InlineArchiveRule>>,
    ) -> Self {
        self.archive_rules = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the analyzer.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags to apply to the analyzer.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAnalyzerInput`](crate::operation::create_analyzer::CreateAnalyzerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_analyzer::CreateAnalyzerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_analyzer::CreateAnalyzerInput {
            analyzer_name: self.analyzer_name,
            r#type: self.r#type,
            archive_rules: self.archive_rules,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
