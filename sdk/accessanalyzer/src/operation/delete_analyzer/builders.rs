// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_analyzer::_delete_analyzer_output::DeleteAnalyzerOutputBuilder;

pub use crate::operation::delete_analyzer::_delete_analyzer_input::DeleteAnalyzerInputBuilder;

/// Fluent builder constructing a request to `DeleteAnalyzer`.
///
/// <p>Deletes the specified analyzer. When you delete an analyzer, IAM Access Analyzer is disabled for the account or organization in the current or specific Region. All findings that were generated by the analyzer are deleted. You cannot undo this action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAnalyzerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_analyzer::builders::DeleteAnalyzerInputBuilder,
}
impl DeleteAnalyzerFluentBuilder {
    /// Creates a new `DeleteAnalyzer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_analyzer::DeleteAnalyzer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_analyzer::DeleteAnalyzerOutput,
        aws_smithy_http::result::SdkError<crate::operation::delete_analyzer::DeleteAnalyzerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the analyzer to delete.</p>
    pub fn analyzer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.analyzer_name(input.into());
        self
    }
    /// <p>The name of the analyzer to delete.</p>
    pub fn set_analyzer_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_analyzer_name(input);
        self
    }
    /// <p>A client token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A client token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
