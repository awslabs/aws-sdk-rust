// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_git_hub_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GitHubConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.saa_s_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("SaaSConfiguration").start_object();
        crate::protocol_serde::shape_saa_s_configuration::ser_saa_s_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.on_premise_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OnPremiseConfiguration").start_object();
        crate::protocol_serde::shape_on_premise_configuration::ser_on_premise_configuration(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.r#type {
        object.key("Type").string(var_5.as_str());
    }
    if let Some(var_6) = &input.secret_arn {
        object.key("SecretArn").string(var_6.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_7) = &input.git_hub_document_crawl_properties {
        #[allow(unused_mut)]
        let mut object_8 = object.key("GitHubDocumentCrawlProperties").start_object();
        crate::protocol_serde::shape_git_hub_document_crawl_properties::ser_git_hub_document_crawl_properties(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.repository_filter {
        let mut array_10 = object.key("RepositoryFilter").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.inclusion_folder_name_patterns {
        let mut array_13 = object.key("InclusionFolderNamePatterns").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.inclusion_file_type_patterns {
        let mut array_16 = object.key("InclusionFileTypePatterns").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.inclusion_file_name_patterns {
        let mut array_19 = object.key("InclusionFileNamePatterns").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.exclusion_folder_name_patterns {
        let mut array_22 = object.key("ExclusionFolderNamePatterns").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.exclusion_file_type_patterns {
        let mut array_25 = object.key("ExclusionFileTypePatterns").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.exclusion_file_name_patterns {
        let mut array_28 = object.key("ExclusionFileNamePatterns").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_31 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.git_hub_repository_configuration_field_mappings {
        let mut array_33 = object
            .key("GitHubRepositoryConfigurationFieldMappings")
            .start_array();
        for item_34 in var_32 {
            {
                #[allow(unused_mut)]
                let mut object_35 = array_33.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.git_hub_commit_configuration_field_mappings {
        let mut array_37 = object
            .key("GitHubCommitConfigurationFieldMappings")
            .start_array();
        for item_38 in var_36 {
            {
                #[allow(unused_mut)]
                let mut object_39 = array_37.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_39, item_38)?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.git_hub_issue_document_configuration_field_mappings {
        let mut array_41 = object
            .key("GitHubIssueDocumentConfigurationFieldMappings")
            .start_array();
        for item_42 in var_40 {
            {
                #[allow(unused_mut)]
                let mut object_43 = array_41.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_43, item_42)?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.git_hub_issue_comment_configuration_field_mappings {
        let mut array_45 = object
            .key("GitHubIssueCommentConfigurationFieldMappings")
            .start_array();
        for item_46 in var_44 {
            {
                #[allow(unused_mut)]
                let mut object_47 = array_45.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_47, item_46)?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.git_hub_issue_attachment_configuration_field_mappings {
        let mut array_49 = object
            .key("GitHubIssueAttachmentConfigurationFieldMappings")
            .start_array();
        for item_50 in var_48 {
            {
                #[allow(unused_mut)]
                let mut object_51 = array_49.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.git_hub_pull_request_comment_configuration_field_mappings {
        let mut array_53 = object
            .key("GitHubPullRequestCommentConfigurationFieldMappings")
            .start_array();
        for item_54 in var_52 {
            {
                #[allow(unused_mut)]
                let mut object_55 = array_53.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_55, item_54)?;
                object_55.finish();
            }
        }
        array_53.finish();
    }
    if let Some(var_56) = &input.git_hub_pull_request_document_configuration_field_mappings {
        let mut array_57 = object
            .key("GitHubPullRequestDocumentConfigurationFieldMappings")
            .start_array();
        for item_58 in var_56 {
            {
                #[allow(unused_mut)]
                let mut object_59 = array_57.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_59, item_58)?;
                object_59.finish();
            }
        }
        array_57.finish();
    }
    if let Some(var_60) =
        &input.git_hub_pull_request_document_attachment_configuration_field_mappings
    {
        let mut array_61 = object
            .key("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings")
            .start_array();
        for item_62 in var_60 {
            {
                #[allow(unused_mut)]
                let mut object_63 = array_61.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_63, item_62)?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub(crate) fn de_git_hub_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::GitHubConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GitHubConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "SaaSConfiguration" => {
                                builder = builder.set_saa_s_configuration(
                                    crate::protocol_serde::shape_saa_s_configuration::de_saa_s_configuration(tokens)?
                                );
                            }
                            "OnPremiseConfiguration" => {
                                builder = builder.set_on_premise_configuration(
                                    crate::protocol_serde::shape_on_premise_configuration::de_on_premise_configuration(tokens)?
                                );
                            }
                            "Type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Type::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "SecretArn" => {
                                builder = builder.set_secret_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "UseChangeLog" => {
                                builder = builder.set_use_change_log(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "GitHubDocumentCrawlProperties" => {
                                builder = builder.set_git_hub_document_crawl_properties(
                                    crate::protocol_serde::shape_git_hub_document_crawl_properties::de_git_hub_document_crawl_properties(tokens)?
                                );
                            }
                            "RepositoryFilter" => {
                                builder = builder.set_repository_filter(
                                    crate::protocol_serde::shape_repository_names::de_repository_names(tokens)?
                                );
                            }
                            "InclusionFolderNamePatterns" => {
                                builder = builder.set_inclusion_folder_name_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "InclusionFileTypePatterns" => {
                                builder = builder.set_inclusion_file_type_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "InclusionFileNamePatterns" => {
                                builder = builder.set_inclusion_file_name_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ExclusionFolderNamePatterns" => {
                                builder = builder.set_exclusion_folder_name_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ExclusionFileTypePatterns" => {
                                builder = builder.set_exclusion_file_type_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "ExclusionFileNamePatterns" => {
                                builder = builder.set_exclusion_file_name_patterns(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "VpcConfiguration" => {
                                builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_data_source_vpc_configuration::de_data_source_vpc_configuration(tokens)?
                                );
                            }
                            "GitHubRepositoryConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_repository_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubCommitConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_commit_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubIssueDocumentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_issue_document_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubIssueCommentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_issue_comment_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubIssueAttachmentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_issue_attachment_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubPullRequestCommentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_pull_request_comment_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubPullRequestDocumentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_pull_request_document_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            "GitHubPullRequestDocumentAttachmentConfigurationFieldMappings" => {
                                builder = builder.set_git_hub_pull_request_document_attachment_configuration_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
