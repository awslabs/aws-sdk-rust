// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.s3_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("S3Configuration").start_object();
        crate::protocol_serde::shape_s3_data_source_configuration::ser_s3_data_source_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.share_point_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SharePointConfiguration").start_object();
        crate::protocol_serde::shape_share_point_configuration::ser_share_point_configuration(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.database_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DatabaseConfiguration").start_object();
        crate::protocol_serde::shape_database_configuration::ser_database_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.salesforce_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("SalesforceConfiguration").start_object();
        crate::protocol_serde::shape_salesforce_configuration::ser_salesforce_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.one_drive_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("OneDriveConfiguration").start_object();
        crate::protocol_serde::shape_one_drive_configuration::ser_one_drive_configuration(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.service_now_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ServiceNowConfiguration").start_object();
        crate::protocol_serde::shape_service_now_configuration::ser_service_now_configuration(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.confluence_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ConfluenceConfiguration").start_object();
        crate::protocol_serde::shape_confluence_configuration::ser_confluence_configuration(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.google_drive_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("GoogleDriveConfiguration").start_object();
        crate::protocol_serde::shape_google_drive_configuration::ser_google_drive_configuration(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.web_crawler_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("WebCrawlerConfiguration").start_object();
        crate::protocol_serde::shape_web_crawler_configuration::ser_web_crawler_configuration(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.work_docs_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("WorkDocsConfiguration").start_object();
        crate::protocol_serde::shape_work_docs_configuration::ser_work_docs_configuration(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.fsx_configuration {
        #[allow(unused_mut)]
        let mut object_22 = object.key("FsxConfiguration").start_object();
        crate::protocol_serde::shape_fsx_configuration::ser_fsx_configuration(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.slack_configuration {
        #[allow(unused_mut)]
        let mut object_24 = object.key("SlackConfiguration").start_object();
        crate::protocol_serde::shape_slack_configuration::ser_slack_configuration(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.box_configuration {
        #[allow(unused_mut)]
        let mut object_26 = object.key("BoxConfiguration").start_object();
        crate::protocol_serde::shape_box_configuration::ser_box_configuration(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.quip_configuration {
        #[allow(unused_mut)]
        let mut object_28 = object.key("QuipConfiguration").start_object();
        crate::protocol_serde::shape_quip_configuration::ser_quip_configuration(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.jira_configuration {
        #[allow(unused_mut)]
        let mut object_30 = object.key("JiraConfiguration").start_object();
        crate::protocol_serde::shape_jira_configuration::ser_jira_configuration(
            &mut object_30,
            var_29,
        )?;
        object_30.finish();
    }
    if let Some(var_31) = &input.git_hub_configuration {
        #[allow(unused_mut)]
        let mut object_32 = object.key("GitHubConfiguration").start_object();
        crate::protocol_serde::shape_git_hub_configuration::ser_git_hub_configuration(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    if let Some(var_33) = &input.alfresco_configuration {
        #[allow(unused_mut)]
        let mut object_34 = object.key("AlfrescoConfiguration").start_object();
        crate::protocol_serde::shape_alfresco_configuration::ser_alfresco_configuration(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    if let Some(var_35) = &input.template_configuration {
        #[allow(unused_mut)]
        let mut object_36 = object.key("TemplateConfiguration").start_object();
        crate::protocol_serde::shape_template_configuration::ser_template_configuration(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    Ok(())
}

pub(crate) fn de_data_source_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::DataSourceConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DataSourceConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "S3Configuration" => {
                                builder = builder.set_s3_configuration(
                                    crate::protocol_serde::shape_s3_data_source_configuration::de_s3_data_source_configuration(tokens)?
                                );
                            }
                            "SharePointConfiguration" => {
                                builder = builder.set_share_point_configuration(
                                    crate::protocol_serde::shape_share_point_configuration::de_share_point_configuration(tokens)?
                                );
                            }
                            "DatabaseConfiguration" => {
                                builder = builder.set_database_configuration(
                                    crate::protocol_serde::shape_database_configuration::de_database_configuration(tokens)?
                                );
                            }
                            "SalesforceConfiguration" => {
                                builder = builder.set_salesforce_configuration(
                                    crate::protocol_serde::shape_salesforce_configuration::de_salesforce_configuration(tokens)?
                                );
                            }
                            "OneDriveConfiguration" => {
                                builder = builder.set_one_drive_configuration(
                                    crate::protocol_serde::shape_one_drive_configuration::de_one_drive_configuration(tokens)?
                                );
                            }
                            "ServiceNowConfiguration" => {
                                builder = builder.set_service_now_configuration(
                                    crate::protocol_serde::shape_service_now_configuration::de_service_now_configuration(tokens)?
                                );
                            }
                            "ConfluenceConfiguration" => {
                                builder = builder.set_confluence_configuration(
                                    crate::protocol_serde::shape_confluence_configuration::de_confluence_configuration(tokens)?
                                );
                            }
                            "GoogleDriveConfiguration" => {
                                builder = builder.set_google_drive_configuration(
                                    crate::protocol_serde::shape_google_drive_configuration::de_google_drive_configuration(tokens)?
                                );
                            }
                            "WebCrawlerConfiguration" => {
                                builder = builder.set_web_crawler_configuration(
                                    crate::protocol_serde::shape_web_crawler_configuration::de_web_crawler_configuration(tokens)?
                                );
                            }
                            "WorkDocsConfiguration" => {
                                builder = builder.set_work_docs_configuration(
                                    crate::protocol_serde::shape_work_docs_configuration::de_work_docs_configuration(tokens)?
                                );
                            }
                            "FsxConfiguration" => {
                                builder = builder.set_fsx_configuration(
                                    crate::protocol_serde::shape_fsx_configuration::de_fsx_configuration(tokens)?
                                );
                            }
                            "SlackConfiguration" => {
                                builder = builder.set_slack_configuration(
                                    crate::protocol_serde::shape_slack_configuration::de_slack_configuration(tokens)?
                                );
                            }
                            "BoxConfiguration" => {
                                builder = builder.set_box_configuration(
                                    crate::protocol_serde::shape_box_configuration::de_box_configuration(tokens)?
                                );
                            }
                            "QuipConfiguration" => {
                                builder = builder.set_quip_configuration(
                                    crate::protocol_serde::shape_quip_configuration::de_quip_configuration(tokens)?
                                );
                            }
                            "JiraConfiguration" => {
                                builder = builder.set_jira_configuration(
                                    crate::protocol_serde::shape_jira_configuration::de_jira_configuration(tokens)?
                                );
                            }
                            "GitHubConfiguration" => {
                                builder = builder.set_git_hub_configuration(
                                    crate::protocol_serde::shape_git_hub_configuration::de_git_hub_configuration(tokens)?
                                );
                            }
                            "AlfrescoConfiguration" => {
                                builder = builder.set_alfresco_configuration(
                                    crate::protocol_serde::shape_alfresco_configuration::de_alfresco_configuration(tokens)?
                                );
                            }
                            "TemplateConfiguration" => {
                                builder = builder.set_template_configuration(
                                    crate::protocol_serde::shape_template_configuration::de_template_configuration(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
