// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.and_all_filters {
        let mut array_2 = object.key("AndAllFilters").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.or_all_filters {
        let mut array_6 = object.key("OrAllFilters").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.not_filter {
        #[allow(unused_mut)]
        let mut object_10 = object.key("NotFilter").start_object();
        crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.equals_to {
        #[allow(unused_mut)]
        let mut object_12 = object.key("EqualsTo").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.contains_all {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ContainsAll").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.contains_any {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ContainsAny").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.greater_than {
        #[allow(unused_mut)]
        let mut object_18 = object.key("GreaterThan").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.greater_than_or_equals {
        #[allow(unused_mut)]
        let mut object_20 = object.key("GreaterThanOrEquals").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.less_than {
        #[allow(unused_mut)]
        let mut object_22 = object.key("LessThan").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.less_than_or_equals {
        #[allow(unused_mut)]
        let mut object_24 = object.key("LessThanOrEquals").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    Ok(())
}
