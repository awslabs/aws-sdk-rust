// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_share_point_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SharePointConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("SharePointVersion").string(input.share_point_version.as_str());
    }
    {
        let mut array_1 = object.key("Urls").start_array();
        for item_2 in &input.urls {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    {
        object.key("SecretArn").string(input.secret_arn.as_str());
    }
    if input.crawl_attachments {
        object.key("CrawlAttachments").boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_3) = &input.inclusion_patterns {
        let mut array_4 = object.key("InclusionPatterns").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.exclusion_patterns {
        let mut array_7 = object.key("ExclusionPatterns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.field_mappings {
        let mut array_12 = object.key("FieldMappings").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_15.as_str());
    }
    if input.disable_local_groups {
        object.key("DisableLocalGroups").boolean(input.disable_local_groups);
    }
    if let Some(var_16) = &input.ssl_certificate_s3_path {
        #[allow(unused_mut)]
        let mut object_17 = object.key("SslCertificateS3Path").start_object();
        crate::protocol_serde::shape_s3_path::ser_s3_path(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.authentication_type {
        object.key("AuthenticationType").string(var_18.as_str());
    }
    if let Some(var_19) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("ProxyConfiguration").start_object();
        crate::protocol_serde::shape_proxy_configuration::ser_proxy_configuration(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}

pub(crate) fn de_share_point_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SharePointConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SharePointConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "SharePointVersion" => {
                                builder = builder.set_share_point_version(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| crate::types::SharePointVersion::from(u.as_ref())))
                                        .transpose()?,
                                );
                            }
                            "Urls" => {
                                builder = builder.set_urls(crate::protocol_serde::shape_share_point_url_list::de_share_point_url_list(tokens)?);
                            }
                            "SecretArn" => {
                                builder = builder.set_secret_arn(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "CrawlAttachments" => {
                                builder = builder.set_crawl_attachments(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "UseChangeLog" => {
                                builder = builder.set_use_change_log(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "InclusionPatterns" => {
                                builder = builder.set_inclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ExclusionPatterns" => {
                                builder = builder.set_exclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "VpcConfiguration" => {
                                builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_data_source_vpc_configuration::de_data_source_vpc_configuration(tokens)?,
                                );
                            }
                            "FieldMappings" => {
                                builder = builder.set_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "DocumentTitleFieldName" => {
                                builder = builder.set_document_title_field_name(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "DisableLocalGroups" => {
                                builder =
                                    builder.set_disable_local_groups(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "SslCertificateS3Path" => {
                                builder = builder.set_ssl_certificate_s3_path(crate::protocol_serde::shape_s3_path::de_s3_path(tokens)?);
                            }
                            "AuthenticationType" => {
                                builder = builder.set_authentication_type(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| {
                                            s.to_unescaped()
                                                .map(|u| crate::types::SharePointOnlineAuthenticationType::from(u.as_ref()))
                                        })
                                        .transpose()?,
                                );
                            }
                            "ProxyConfiguration" => {
                                builder = builder
                                    .set_proxy_configuration(crate::protocol_serde::shape_proxy_configuration::de_proxy_configuration(tokens)?);
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::share_point_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
