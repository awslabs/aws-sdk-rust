// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_index_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_index::UpdateIndexInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role_arn {
        object.key("RoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_metadata_configuration_updates {
        let mut array_6 = object.key("DocumentMetadataConfigurationUpdates").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_document_metadata_configuration::ser_document_metadata_configuration(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.capacity_units {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CapacityUnits").start_object();
        crate::protocol_serde::shape_capacity_units_configuration::ser_capacity_units_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.user_token_configurations {
        let mut array_12 = object.key("UserTokenConfigurations").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_user_token_configuration::ser_user_token_configuration(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_15.as_str());
    }
    if let Some(var_16) = &input.user_group_resolution_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("UserGroupResolutionConfiguration").start_object();
        crate::protocol_serde::shape_user_group_resolution_configuration::ser_user_group_resolution_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
