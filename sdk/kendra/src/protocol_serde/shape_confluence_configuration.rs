// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.server_url {
        object.key("ServerUrl").string(var_1.as_str());
    }
    if let Some(var_2) = &input.secret_arn {
        object.key("SecretArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.version {
        object.key("Version").string(var_3.as_str());
    }
    if let Some(var_4) = &input.space_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SpaceConfiguration").start_object();
        crate::protocol_serde::shape_confluence_space_configuration::ser_confluence_space_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.page_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("PageConfiguration").start_object();
        crate::protocol_serde::shape_confluence_page_configuration::ser_confluence_page_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.blog_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("BlogConfiguration").start_object();
        crate::protocol_serde::shape_confluence_blog_configuration::ser_confluence_blog_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.attachment_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("AttachmentConfiguration").start_object();
        crate::protocol_serde::shape_confluence_attachment_configuration::ser_confluence_attachment_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.inclusion_patterns {
        let mut array_15 = object.key("InclusionPatterns").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.exclusion_patterns {
        let mut array_18 = object.key("ExclusionPatterns").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ProxyConfiguration").start_object();
        crate::protocol_serde::shape_proxy_configuration::ser_proxy_configuration(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.authentication_type {
        object.key("AuthenticationType").string(var_22.as_str());
    }
    Ok(())
}

pub(crate) fn de_confluence_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ConfluenceConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ConfluenceConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ServerUrl" => {
                                builder = builder.set_server_url(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecretArn" => {
                                builder = builder.set_secret_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Version" => {
                                builder = builder.set_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ConfluenceVersion::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "SpaceConfiguration" => {
                                builder = builder.set_space_configuration(
                                    crate::protocol_serde::shape_confluence_space_configuration::de_confluence_space_configuration(tokens)?
                                );
                            }
                            "PageConfiguration" => {
                                builder = builder.set_page_configuration(
                                    crate::protocol_serde::shape_confluence_page_configuration::de_confluence_page_configuration(tokens)?
                                );
                            }
                            "BlogConfiguration" => {
                                builder = builder.set_blog_configuration(
                                    crate::protocol_serde::shape_confluence_blog_configuration::de_confluence_blog_configuration(tokens)?
                                );
                            }
                            "AttachmentConfiguration" => {
                                builder = builder.set_attachment_configuration(
                                    crate::protocol_serde::shape_confluence_attachment_configuration::de_confluence_attachment_configuration(tokens)?
                                );
                            }
                            "VpcConfiguration" => {
                                builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_data_source_vpc_configuration::de_data_source_vpc_configuration(tokens)?
                                );
                            }
                            "InclusionPatterns" => {
                                builder = builder.set_inclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ExclusionPatterns" => {
                                builder = builder.set_exclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ProxyConfiguration" => {
                                builder = builder.set_proxy_configuration(
                                    crate::protocol_serde::shape_proxy_configuration::de_proxy_configuration(tokens)?
                                );
                            }
                            "AuthenticationType" => {
                                builder = builder.set_authentication_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ConfluenceAuthenticationType::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
