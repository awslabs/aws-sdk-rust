// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_confluence_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConfluenceConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ServerUrl").string(input.server_url.as_str());
    }
    {
        object.key("SecretArn").string(input.secret_arn.as_str());
    }
    {
        object.key("Version").string(input.version.as_str());
    }
    if let Some(var_1) = &input.space_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("SpaceConfiguration").start_object();
        crate::protocol_serde::shape_confluence_space_configuration::ser_confluence_space_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.page_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("PageConfiguration").start_object();
        crate::protocol_serde::shape_confluence_page_configuration::ser_confluence_page_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.blog_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("BlogConfiguration").start_object();
        crate::protocol_serde::shape_confluence_blog_configuration::ser_confluence_blog_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.attachment_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AttachmentConfiguration").start_object();
        crate::protocol_serde::shape_confluence_attachment_configuration::ser_confluence_attachment_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.inclusion_patterns {
        let mut array_12 = object.key("InclusionPatterns").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.exclusion_patterns {
        let mut array_15 = object.key("ExclusionPatterns").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ProxyConfiguration").start_object();
        crate::protocol_serde::shape_proxy_configuration::ser_proxy_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.authentication_type {
        object.key("AuthenticationType").string(var_19.as_str());
    }
    Ok(())
}

pub(crate) fn de_confluence_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ConfluenceConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ConfluenceConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ServerUrl" => {
                                builder = builder.set_server_url(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "SecretArn" => {
                                builder = builder.set_secret_arn(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "Version" => {
                                builder = builder.set_version(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| crate::types::ConfluenceVersion::from(u.as_ref())))
                                        .transpose()?,
                                );
                            }
                            "SpaceConfiguration" => {
                                builder = builder.set_space_configuration(
                                    crate::protocol_serde::shape_confluence_space_configuration::de_confluence_space_configuration(tokens)?,
                                );
                            }
                            "PageConfiguration" => {
                                builder = builder.set_page_configuration(
                                    crate::protocol_serde::shape_confluence_page_configuration::de_confluence_page_configuration(tokens)?,
                                );
                            }
                            "BlogConfiguration" => {
                                builder = builder.set_blog_configuration(
                                    crate::protocol_serde::shape_confluence_blog_configuration::de_confluence_blog_configuration(tokens)?,
                                );
                            }
                            "AttachmentConfiguration" => {
                                builder = builder.set_attachment_configuration(
                                    crate::protocol_serde::shape_confluence_attachment_configuration::de_confluence_attachment_configuration(tokens)?,
                                );
                            }
                            "VpcConfiguration" => {
                                builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_data_source_vpc_configuration::de_data_source_vpc_configuration(tokens)?,
                                );
                            }
                            "InclusionPatterns" => {
                                builder = builder.set_inclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ExclusionPatterns" => {
                                builder = builder.set_exclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ProxyConfiguration" => {
                                builder = builder
                                    .set_proxy_configuration(crate::protocol_serde::shape_proxy_configuration::de_proxy_configuration(tokens)?);
                            }
                            "AuthenticationType" => {
                                builder = builder.set_authentication_type(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| crate::types::ConfluenceAuthenticationType::from(u.as_ref())))
                                        .transpose()?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::confluence_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
