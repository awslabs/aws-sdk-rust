// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_query_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::query::QueryInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.index_id {
        object.key("IndexId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.query_text {
        object.key("QueryText").string(var_2.as_str());
    }
    if let Some(var_3) = &input.attribute_filter {
        #[allow(unused_mut)]
        let mut object_4 = object.key("AttributeFilter").start_object();
        crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.facets {
        let mut array_6 = object.key("Facets").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_facet::ser_facet(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.requested_document_attributes {
        let mut array_10 = object.key("RequestedDocumentAttributes").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_12.as_str());
    }
    if let Some(var_13) = &input.document_relevance_override_configurations {
        let mut array_14 = object.key("DocumentRelevanceOverrideConfigurations").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_document_relevance_configuration::ser_document_relevance_configuration(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.sorting_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("SortingConfiguration").start_object();
        crate::protocol_serde::shape_sorting_configuration::ser_sorting_configuration(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.sorting_configurations {
        let mut array_22 = object.key("SortingConfigurations").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_sorting_configuration::ser_sorting_configuration(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.user_context {
        #[allow(unused_mut)]
        let mut object_26 = object.key("UserContext").start_object();
        crate::protocol_serde::shape_user_context::ser_user_context(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.visitor_id {
        object.key("VisitorId").string(var_27.as_str());
    }
    if let Some(var_28) = &input.spell_correction_configuration {
        #[allow(unused_mut)]
        let mut object_29 = object.key("SpellCorrectionConfiguration").start_object();
        crate::protocol_serde::shape_spell_correction_configuration::ser_spell_correction_configuration(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.collapse_configuration {
        #[allow(unused_mut)]
        let mut object_31 = object.key("CollapseConfiguration").start_object();
        crate::protocol_serde::shape_collapse_configuration::ser_collapse_configuration(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}
