// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_slack_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SlackConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("TeamId").string(input.team_id.as_str());
    }
    {
        object.key("SecretArn").string(input.secret_arn.as_str());
    }
    if let Some(var_1) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    {
        let mut array_3 = object.key("SlackEntityList").start_array();
        for item_4 in &input.slack_entity_list {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object.key("CrawlBotMessage").boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object.key("ExcludeArchived").boolean(input.exclude_archived);
    }
    {
        object.key("SinceCrawlDate").string(input.since_crawl_date.as_str());
    }
    if let Some(var_5) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.private_channel_filter {
        let mut array_7 = object.key("PrivateChannelFilter").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.public_channel_filter {
        let mut array_10 = object.key("PublicChannelFilter").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.inclusion_patterns {
        let mut array_13 = object.key("InclusionPatterns").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.exclusion_patterns {
        let mut array_16 = object.key("ExclusionPatterns").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.field_mappings {
        let mut array_19 = object.key("FieldMappings").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_data_source_to_index_field_mapping::ser_data_source_to_index_field_mapping(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub(crate) fn de_slack_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SlackConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SlackConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TeamId" => {
                                builder = builder.set_team_id(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "SecretArn" => {
                                builder = builder.set_secret_arn(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "VpcConfiguration" => {
                                builder = builder.set_vpc_configuration(
                                    crate::protocol_serde::shape_data_source_vpc_configuration::de_data_source_vpc_configuration(tokens)?,
                                );
                            }
                            "SlackEntityList" => {
                                builder =
                                    builder.set_slack_entity_list(crate::protocol_serde::shape_slack_entity_list::de_slack_entity_list(tokens)?);
                            }
                            "UseChangeLog" => {
                                builder = builder.set_use_change_log(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "CrawlBotMessage" => {
                                builder = builder.set_crawl_bot_message(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "ExcludeArchived" => {
                                builder = builder.set_exclude_archived(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                            }
                            "SinceCrawlDate" => {
                                builder = builder.set_since_crawl_date(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                        .transpose()?,
                                );
                            }
                            "LookBackPeriod" => {
                                builder = builder.set_look_back_period(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                        .map(i32::try_from)
                                        .transpose()?,
                                );
                            }
                            "PrivateChannelFilter" => {
                                builder = builder.set_private_channel_filter(
                                    crate::protocol_serde::shape_private_channel_filter::de_private_channel_filter(tokens)?,
                                );
                            }
                            "PublicChannelFilter" => {
                                builder = builder
                                    .set_public_channel_filter(crate::protocol_serde::shape_public_channel_filter::de_public_channel_filter(tokens)?);
                            }
                            "InclusionPatterns" => {
                                builder = builder.set_inclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "ExclusionPatterns" => {
                                builder = builder.set_exclusion_patterns(
                                    crate::protocol_serde::shape_data_source_inclusions_exclusions_strings::de_data_source_inclusions_exclusions_strings(tokens)?
                                );
                            }
                            "FieldMappings" => {
                                builder = builder.set_field_mappings(
                                    crate::protocol_serde::shape_data_source_to_index_field_mapping_list::de_data_source_to_index_field_mapping_list(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::slack_configuration_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
