// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_index_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_index::CreateIndexInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.edition {
        object.key("Edition").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role_arn {
        object.key("RoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.server_side_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ServerSideEncryptionConfiguration").start_object();
        crate::protocol_serde::shape_server_side_encryption_configuration::ser_server_side_encryption_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("Description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.client_token {
        object.key("ClientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.user_token_configurations {
        let mut array_13 = object.key("UserTokenConfigurations").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_user_token_configuration::ser_user_token_configuration(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_16.as_str());
    }
    if let Some(var_17) = &input.user_group_resolution_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("UserGroupResolutionConfiguration").start_object();
        crate::protocol_serde::shape_user_group_resolution_configuration::ser_user_group_resolution_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
