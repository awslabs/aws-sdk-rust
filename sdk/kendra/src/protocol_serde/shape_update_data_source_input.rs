// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_source::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.index_id {
        object.key("IndexId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Configuration").start_object();
        crate::protocol_serde::shape_data_source_configuration::ser_data_source_configuration(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("VpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("Description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.schedule {
        object.key("Schedule").string(var_9.as_str());
    }
    if let Some(var_10) = &input.role_arn {
        object.key("RoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.language_code {
        object.key("LanguageCode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.custom_document_enrichment_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::protocol_serde::shape_custom_document_enrichment_configuration::ser_custom_document_enrichment_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
