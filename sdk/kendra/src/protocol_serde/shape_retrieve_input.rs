// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_retrieve_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::retrieve::RetrieveInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.index_id {
        object.key("IndexId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.query_text {
        object.key("QueryText").string(var_2.as_str());
    }
    if let Some(var_3) = &input.attribute_filter {
        #[allow(unused_mut)]
        let mut object_4 = object.key("AttributeFilter").start_object();
        crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.requested_document_attributes {
        let mut array_6 = object.key("RequestedDocumentAttributes").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.document_relevance_override_configurations {
        let mut array_9 = object.key("DocumentRelevanceOverrideConfigurations").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_document_relevance_configuration::ser_document_relevance_configuration(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.user_context {
        #[allow(unused_mut)]
        let mut object_15 = object.key("UserContext").start_object();
        crate::protocol_serde::shape_user_context::ser_user_context(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
