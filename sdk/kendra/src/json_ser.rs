// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.index_id {
        object.key("IndexId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.configuration {
        let mut object_37 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.schedule {
        object.key("Schedule").string(var_39.as_str());
    }
    if let Some(var_40) = &input.role_arn {
        object.key("RoleArn").string(var_40.as_str());
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.client_token {
        object.key("ClientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.language_code {
        object.key("LanguageCode").string(var_46.as_str());
    }
    if let Some(var_47) = &input.custom_document_enrichment_configuration {
        let mut object_48 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49.as_str());
    }
    if let Some(var_50) = &input.index_id {
        object.key("IndexId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.role_arn {
        object.key("RoleArn").string(var_51.as_str());
    }
    if let Some(var_52) = &input.configuration {
        let mut object_53 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.description {
        object.key("Description").string(var_54.as_str());
    }
    if let Some(var_55) = &input.client_token {
        object.key("ClientToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.index_id {
        object.key("IndexId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.s3_path {
        let mut object_60 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.role_arn {
        object.key("RoleArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.file_format {
        object.key("FileFormat").string(var_66.as_str());
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.language_code {
        object.key("LanguageCode").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    if let Some(var_70) = &input.edition {
        object.key("Edition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.role_arn {
        object.key("RoleArn").string(var_71.as_str());
    }
    if let Some(var_72) = &input.server_side_encryption_configuration {
        let mut object_73 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.description {
        object.key("Description").string(var_74.as_str());
    }
    if let Some(var_75) = &input.client_token {
        object.key("ClientToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.user_token_configurations {
        let mut array_81 = object.key("UserTokenConfigurations").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_83,
                    item_82,
                )?;
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_84.as_str());
    }
    if let Some(var_85) = &input.user_group_resolution_configuration {
        let mut object_86 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.name {
        object.key("Name").string(var_88.as_str());
    }
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89.as_str());
    }
    if let Some(var_90) = &input.source_s3_path {
        let mut object_91 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.client_token {
        object.key("ClientToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.role_arn {
        object.key("RoleArn").string(var_93.as_str());
    }
    if let Some(var_94) = &input.tags {
        let mut array_95 = object.key("Tags").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_97, item_96)?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99.as_str());
    }
    if let Some(var_100) = &input.description {
        object.key("Description").string(var_100.as_str());
    }
    if let Some(var_101) = &input.role_arn {
        object.key("RoleArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.tags {
        let mut array_103 = object.key("Tags").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_105, item_104)?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.source_s3_path {
        let mut object_107 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.client_token {
        object.key("ClientToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.id {
        object.key("Id").string(var_109.as_str());
    }
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.id {
        object.key("Id").string(var_111.as_str());
    }
    if let Some(var_112) = &input.index_id {
        object.key("IndexId").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.id {
        object.key("Id").string(var_113.as_str());
    }
    if let Some(var_114) = &input.index_id {
        object.key("IndexId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.id {
        object.key("Id").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.index_id {
        object.key("IndexId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.data_source_id {
        object.key("DataSourceId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.group_id {
        object.key("GroupId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.index_id {
        object.key("IndexId").string(var_120.as_str());
    }
    if let Some(var_121) = &input.id {
        object.key("Id").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.id {
        object.key("Id").string(var_124.as_str());
    }
    if let Some(var_125) = &input.index_id {
        object.key("IndexId").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.index_id {
        object.key("IndexId").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.id {
        object.key("Id").string(var_128.as_str());
    }
    if let Some(var_129) = &input.index_id {
        object.key("IndexId").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.id {
        object.key("Id").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.index_id {
        object.key("IndexId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.data_source_id {
        object.key("DataSourceId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.group_id {
        object.key("GroupId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.index_id {
        object.key("IndexId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.id {
        object.key("Id").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.index_id {
        object.key("IndexId").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.id {
        object.key("Id").string(var_137.as_str());
    }
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.id {
        object.key("Id").string(var_139.as_str());
    }
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140.as_str());
    }
    if let Some(var_141) = &input.entity_list {
        let mut array_142 = object.key("EntityList").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.id {
        object.key("Id").string(var_145.as_str());
    }
    if let Some(var_146) = &input.index_id {
        object.key("IndexId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.entity_ids {
        let mut array_148 = object.key("EntityIds").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.query_text {
        object.key("QueryText").string(var_151.as_str());
    }
    if let Some(var_152) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.index_id {
        object.key("IndexId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.interval {
        object.key("Interval").string(var_154.as_str());
    }
    if let Some(var_155) = &input.metric_type {
        object.key("MetricType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.index_id {
        object.key("IndexId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.id {
        object.key("Id").string(var_161.as_str());
    }
    if let Some(var_162) = &input.index_id {
        object.key("IndexId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163.as_str());
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.start_time_filter {
        let mut object_166 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.status_filter {
        object.key("StatusFilter").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.id {
        object.key("Id").string(var_168.as_str());
    }
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170.as_str());
    }
    if let Some(var_171) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172.as_str());
    }
    if let Some(var_173) = &input.index_id {
        object.key("IndexId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.index_id {
        object.key("IndexId").string(var_175.as_str());
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.index_id {
        object.key("IndexId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179.as_str());
    }
    if let Some(var_180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.index_id {
        object.key("IndexId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.data_source_id {
        object.key("DataSourceId").string(var_182.as_str());
    }
    if let Some(var_183) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.next_token {
        object.key("NextToken").string(var_186.as_str());
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.index_id {
        object.key("IndexId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.resource_arn {
        object.key("ResourceARN").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.index_id {
        object.key("IndexId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.data_source_id {
        object.key("DataSourceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.group_id {
        object.key("GroupId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.group_members {
        let mut object_199 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.query_text {
        object.key("QueryText").string(var_203.as_str());
    }
    if let Some(var_204) = &input.attribute_filter {
        let mut object_205 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.facets {
        let mut array_207 = object.key("Facets").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_209, item_208)?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.requested_document_attributes {
        let mut array_211 = object.key("RequestedDocumentAttributes").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212.as_str());
            }
        }
        array_211.finish();
    }
    if let Some(var_213) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_213.as_str());
    }
    if let Some(var_214) = &input.document_relevance_override_configurations {
        let mut array_215 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.sorting_configuration {
        let mut object_221 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_221,
            var_220,
        )?;
        object_221.finish();
    }
    if let Some(var_222) = &input.user_context {
        let mut object_223 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_223, var_222)?;
        object_223.finish();
    }
    if let Some(var_224) = &input.visitor_id {
        object.key("VisitorId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.spell_correction_configuration {
        let mut object_226 = object.key("SpellCorrectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_spell_correction_configuration(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.id {
        object.key("Id").string(var_227.as_str());
    }
    if let Some(var_228) = &input.index_id {
        object.key("IndexId").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.id {
        object.key("Id").string(var_229.as_str());
    }
    if let Some(var_230) = &input.index_id {
        object.key("IndexId").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.index_id {
        object.key("IndexId").string(var_231.as_str());
    }
    if let Some(var_232) = &input.query_id {
        object.key("QueryId").string(var_232.as_str());
    }
    if let Some(var_233) = &input.click_feedback_items {
        let mut array_234 = object.key("ClickFeedbackItems").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_236,
                    item_235,
                )?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.relevance_feedback_items {
        let mut array_238 = object.key("RelevanceFeedbackItems").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.resource_arn {
        object.key("ResourceARN").string(var_241.as_str());
    }
    if let Some(var_242) = &input.tags {
        let mut array_243 = object.key("Tags").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_245, item_244)?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.resource_arn {
        object.key("ResourceARN").string(var_246.as_str());
    }
    if let Some(var_247) = &input.tag_keys {
        let mut array_248 = object.key("TagKeys").start_array();
        for item_249 in var_247 {
            {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.id {
        object.key("Id").string(var_250.as_str());
    }
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251.as_str());
    }
    if let Some(var_252) = &input.index_id {
        object.key("IndexId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.configuration {
        let mut object_254 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.description {
        object.key("Description").string(var_255.as_str());
    }
    if let Some(var_256) = &input.schedule {
        object.key("Schedule").string(var_256.as_str());
    }
    if let Some(var_257) = &input.role_arn {
        object.key("RoleArn").string(var_257.as_str());
    }
    if let Some(var_258) = &input.language_code {
        object.key("LanguageCode").string(var_258.as_str());
    }
    if let Some(var_259) = &input.custom_document_enrichment_configuration {
        let mut object_260 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_261) = &input.id {
        object.key("Id").string(var_261.as_str());
    }
    if let Some(var_262) = &input.name {
        object.key("Name").string(var_262.as_str());
    }
    if let Some(var_263) = &input.index_id {
        object.key("IndexId").string(var_263.as_str());
    }
    if let Some(var_264) = &input.role_arn {
        object.key("RoleArn").string(var_264.as_str());
    }
    if let Some(var_265) = &input.configuration {
        let mut object_266 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.description {
        object.key("Description").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.id {
        object.key("Id").string(var_268.as_str());
    }
    if let Some(var_269) = &input.name {
        object.key("Name").string(var_269.as_str());
    }
    if let Some(var_270) = &input.role_arn {
        object.key("RoleArn").string(var_270.as_str());
    }
    if let Some(var_271) = &input.description {
        object.key("Description").string(var_271.as_str());
    }
    if let Some(var_272) = &input.document_metadata_configuration_updates {
        let mut array_273 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_275,
                    item_274,
                )?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    if let Some(var_276) = &input.capacity_units {
        let mut object_277 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_277,
            var_276,
        )?;
        object_277.finish();
    }
    if let Some(var_278) = &input.user_token_configurations {
        let mut array_279 = object.key("UserTokenConfigurations").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_282.as_str());
    }
    if let Some(var_283) = &input.user_group_resolution_configuration {
        let mut object_284 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.index_id {
        object.key("IndexId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.id {
        object.key("Id").string(var_286.as_str());
    }
    if let Some(var_287) = &input.name {
        object.key("Name").string(var_287.as_str());
    }
    if let Some(var_288) = &input.description {
        object.key("Description").string(var_288.as_str());
    }
    if let Some(var_289) = &input.source_s3_path {
        let mut object_290 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.role_arn {
        object.key("RoleArn").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.index_id {
        object.key("IndexId").string(var_292.as_str());
    }
    if let Some(var_293) = &input.mode {
        object.key("Mode").string(var_293.as_str());
    }
    if let Some(var_294) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_295);
    }
    if let Some(var_296) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.id {
        object.key("Id").string(var_298.as_str());
    }
    if let Some(var_299) = &input.name {
        object.key("Name").string(var_299.as_str());
    }
    if let Some(var_300) = &input.index_id {
        object.key("IndexId").string(var_300.as_str());
    }
    if let Some(var_301) = &input.description {
        object.key("Description").string(var_301.as_str());
    }
    if let Some(var_302) = &input.role_arn {
        object.key("RoleArn").string(var_302.as_str());
    }
    if let Some(var_303) = &input.source_s3_path {
        let mut object_304 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_304, var_303)?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.entity_id {
        object.key("EntityId").string(var_305.as_str());
    }
    if let Some(var_306) = &input.entity_type {
        object.key("EntityType").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.entity_id {
        object.key("EntityId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.persona {
        object.key("Persona").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.data_source_id {
        object.key("DataSourceId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.document_id {
        object.key("DocumentId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.attributes {
        let mut array_313 = object.key("Attributes").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.id {
        object.key("Id").string(var_316.as_str());
    }
    if let Some(var_317) = &input.title {
        object.key("Title").string(var_317.as_str());
    }
    if let Some(var_318) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_318));
    }
    if let Some(var_319) = &input.s3_path {
        let mut object_320 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.attributes {
        let mut array_322 = object.key("Attributes").start_array();
        for item_323 in var_321 {
            {
                let mut object_324 = array_322.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_324,
                    item_323,
                )?;
                object_324.finish();
            }
        }
        array_322.finish();
    }
    if let Some(var_325) = &input.access_control_list {
        let mut array_326 = object.key("AccessControlList").start_array();
        for item_327 in var_325 {
            {
                let mut object_328 = array_326.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_328,
                    item_327,
                )?;
                object_328.finish();
            }
        }
        array_326.finish();
    }
    if let Some(var_329) = &input.hierarchical_access_control_list {
        let mut array_330 = object.key("HierarchicalAccessControlList").start_array();
        for item_331 in var_329 {
            {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_332,
                    item_331,
                )?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    if let Some(var_333) = &input.content_type {
        object.key("ContentType").string(var_333.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.inline_configurations {
        let mut array_335 = object.key("InlineConfigurations").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_337, item_336)?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.pre_extraction_hook_configuration {
        let mut object_339 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.post_extraction_hook_configuration {
        let mut object_341 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.role_arn {
        object.key("RoleArn").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.s3_configuration {
        let mut object_344 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_344,
            var_343,
        )?;
        object_344.finish();
    }
    if let Some(var_345) = &input.share_point_configuration {
        let mut object_346 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    if let Some(var_347) = &input.database_configuration {
        let mut object_348 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    if let Some(var_349) = &input.salesforce_configuration {
        let mut object_350 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.one_drive_configuration {
        let mut object_352 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.service_now_configuration {
        let mut object_354 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.confluence_configuration {
        let mut object_356 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.google_drive_configuration {
        let mut object_358 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.web_crawler_configuration {
        let mut object_360 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.work_docs_configuration {
        let mut object_362 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.fsx_configuration {
        let mut object_364 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.slack_configuration {
        let mut object_366 = object.key("SlackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_configuration(
            &mut object_366,
            var_365,
        )?;
        object_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.key {
        object.key("Key").string(var_367.as_str());
    }
    if let Some(var_368) = &input.value {
        object.key("Value").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.content_source_configuration {
        let mut object_370 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    if let Some(var_371) = &input.user_identity_configuration {
        let mut object_372 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.bucket {
        object.key("Bucket").string(var_373.as_str());
    }
    if let Some(var_374) = &input.key {
        object.key("Key").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.jwt_token_type_configuration {
        let mut object_377 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_377,
            var_376,
        )?;
        object_377.finish();
    }
    if let Some(var_378) = &input.json_token_type_configuration {
        let mut object_379 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_379,
            var_378,
        )?;
        object_379.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_381, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_382) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_382, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.member_groups {
        let mut array_384 = object.key("MemberGroups").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_386,
                    item_385,
                )?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    if let Some(var_387) = &input.member_users {
        let mut array_388 = object.key("MemberUsers").start_array();
        for item_389 in var_387 {
            {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_390,
                    item_389,
                )?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if let Some(var_391) = &input.s3_pathfor_group_members {
        let mut object_392 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_392, var_391)?;
        object_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_393) = &input.and_all_filters {
        let mut array_394 = object.key("AndAllFilters").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.or_all_filters {
        let mut array_398 = object.key("OrAllFilters").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_400,
                    item_399,
                )?;
                object_400.finish();
            }
        }
        array_398.finish();
    }
    if let Some(var_401) = &input.not_filter {
        let mut object_402 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.equals_to {
        let mut object_404 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_404,
            var_403,
        )?;
        object_404.finish();
    }
    if let Some(var_405) = &input.contains_all {
        let mut object_406 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.contains_any {
        let mut object_408 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.greater_than {
        let mut object_410 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.greater_than_or_equals {
        let mut object_412 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.less_than {
        let mut object_414 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.less_than_or_equals {
        let mut object_416 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_417.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.name {
        object.key("Name").string(var_418.as_str());
    }
    if let Some(var_419) = &input.relevance {
        let mut object_420 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_420, var_419)?;
        object_420.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_421.as_str());
    }
    if let Some(var_422) = &input.sort_order {
        object.key("SortOrder").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.token {
        object.key("Token").string(var_423.as_str());
    }
    if let Some(var_424) = &input.user_id {
        object.key("UserId").string(var_424.as_str());
    }
    if let Some(var_425) = &input.groups {
        let mut array_426 = object.key("Groups").start_array();
        for item_427 in var_425 {
            {
                array_426.value().string(item_427.as_str());
            }
        }
        array_426.finish();
    }
    if let Some(var_428) = &input.data_source_groups {
        let mut array_429 = object.key("DataSourceGroups").start_array();
        for item_430 in var_428 {
            {
                let mut object_431 = array_429.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_431,
                    item_430,
                )?;
                object_431.finish();
            }
        }
        array_429.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spell_correction_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpellCorrectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("IncludeQuerySpellCheckSuggestions")
            .boolean(input.include_query_spell_check_suggestions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.result_id {
        object.key("ResultId").string(var_432.as_str());
    }
    if let Some(var_433) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_433, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.result_id {
        object.key("ResultId").string(var_434.as_str());
    }
    if let Some(var_435) = &input.relevance_value {
        object.key("RelevanceValue").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.name {
        object.key("Name").string(var_436.as_str());
    }
    if let Some(var_437) = &input.r#type {
        object.key("Type").string(var_437.as_str());
    }
    if let Some(var_438) = &input.relevance {
        let mut object_439 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_439, var_438)?;
        object_439.finish();
    }
    if let Some(var_440) = &input.search {
        let mut object_441 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_441, var_440)?;
        object_441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_443).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_444) = &input.key {
        object.key("Key").string(var_444.as_str());
    }
    if let Some(var_445) = &input.value {
        let mut object_446 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_446,
            var_445,
        )?;
        object_446.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.name {
        object.key("Name").string(var_447.as_str());
    }
    if let Some(var_448) = &input.r#type {
        object.key("Type").string(var_448.as_str());
    }
    if let Some(var_449) = &input.access {
        object.key("Access").string(var_449.as_str());
    }
    if let Some(var_450) = &input.data_source_id {
        object.key("DataSourceId").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.principal_list {
        let mut array_452 = object.key("PrincipalList").start_array();
        for item_453 in var_451 {
            {
                let mut object_454 = array_452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_454,
                    item_453,
                )?;
                object_454.finish();
            }
        }
        array_452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.condition {
        let mut object_456 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    if let Some(var_457) = &input.target {
        let mut object_458 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_458,
            var_457,
        )?;
        object_458.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.invocation_condition {
        let mut object_460 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_460,
            var_459,
        )?;
        object_460.finish();
    }
    if let Some(var_461) = &input.lambda_arn {
        object.key("LambdaArn").string(var_461.as_str());
    }
    if let Some(var_462) = &input.s3_bucket {
        object.key("S3Bucket").string(var_462.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.bucket_name {
        object.key("BucketName").string(var_463.as_str());
    }
    if let Some(var_464) = &input.inclusion_prefixes {
        let mut array_465 = object.key("InclusionPrefixes").start_array();
        for item_466 in var_464 {
            {
                array_465.value().string(item_466.as_str());
            }
        }
        array_465.finish();
    }
    if let Some(var_467) = &input.inclusion_patterns {
        let mut array_468 = object.key("InclusionPatterns").start_array();
        for item_469 in var_467 {
            {
                array_468.value().string(item_469.as_str());
            }
        }
        array_468.finish();
    }
    if let Some(var_470) = &input.exclusion_patterns {
        let mut array_471 = object.key("ExclusionPatterns").start_array();
        for item_472 in var_470 {
            {
                array_471.value().string(item_472.as_str());
            }
        }
        array_471.finish();
    }
    if let Some(var_473) = &input.documents_metadata_configuration {
        let mut object_474 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_474,
            var_473,
        )?;
        object_474.finish();
    }
    if let Some(var_475) = &input.access_control_list_configuration {
        let mut object_476 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_476,
            var_475,
        )?;
        object_476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.share_point_version {
        object.key("SharePointVersion").string(var_477.as_str());
    }
    if let Some(var_478) = &input.urls {
        let mut array_479 = object.key("Urls").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480.as_str());
            }
        }
        array_479.finish();
    }
    if let Some(var_481) = &input.secret_arn {
        object.key("SecretArn").string(var_481.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_482) = &input.inclusion_patterns {
        let mut array_483 = object.key("InclusionPatterns").start_array();
        for item_484 in var_482 {
            {
                array_483.value().string(item_484.as_str());
            }
        }
        array_483.finish();
    }
    if let Some(var_485) = &input.exclusion_patterns {
        let mut array_486 = object.key("ExclusionPatterns").start_array();
        for item_487 in var_485 {
            {
                array_486.value().string(item_487.as_str());
            }
        }
        array_486.finish();
    }
    if let Some(var_488) = &input.vpc_configuration {
        let mut object_489 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_489,
            var_488,
        )?;
        object_489.finish();
    }
    if let Some(var_490) = &input.field_mappings {
        let mut array_491 = object.key("FieldMappings").start_array();
        for item_492 in var_490 {
            {
                let mut object_493 = array_491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_493, item_492)?;
                object_493.finish();
            }
        }
        array_491.finish();
    }
    if let Some(var_494) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_494.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_495) = &input.ssl_certificate_s3_path {
        let mut object_496 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_496, var_495)?;
        object_496.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_497) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_497.as_str());
    }
    if let Some(var_498) = &input.connection_configuration {
        let mut object_499 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_499,
            var_498,
        )?;
        object_499.finish();
    }
    if let Some(var_500) = &input.vpc_configuration {
        let mut object_501 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_501,
            var_500,
        )?;
        object_501.finish();
    }
    if let Some(var_502) = &input.column_configuration {
        let mut object_503 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_503,
            var_502,
        )?;
        object_503.finish();
    }
    if let Some(var_504) = &input.acl_configuration {
        let mut object_505 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_505,
            var_504,
        )?;
        object_505.finish();
    }
    if let Some(var_506) = &input.sql_configuration {
        let mut object_507 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_507,
            var_506,
        )?;
        object_507.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.server_url {
        object.key("ServerUrl").string(var_508.as_str());
    }
    if let Some(var_509) = &input.secret_arn {
        object.key("SecretArn").string(var_509.as_str());
    }
    if let Some(var_510) = &input.standard_object_configurations {
        let mut array_511 = object.key("StandardObjectConfigurations").start_array();
        for item_512 in var_510 {
            {
                let mut object_513 = array_511.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_513, item_512)?;
                object_513.finish();
            }
        }
        array_511.finish();
    }
    if let Some(var_514) = &input.knowledge_article_configuration {
        let mut object_515 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_515, var_514)?;
        object_515.finish();
    }
    if let Some(var_516) = &input.chatter_feed_configuration {
        let mut object_517 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_518) = &input.standard_object_attachment_configuration {
        let mut object_519 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_519, var_518)?;
        object_519.finish();
    }
    if let Some(var_520) = &input.include_attachment_file_patterns {
        let mut array_521 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_522 in var_520 {
            {
                array_521.value().string(item_522.as_str());
            }
        }
        array_521.finish();
    }
    if let Some(var_523) = &input.exclude_attachment_file_patterns {
        let mut array_524 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_525 in var_523 {
            {
                array_524.value().string(item_525.as_str());
            }
        }
        array_524.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.tenant_domain {
        object.key("TenantDomain").string(var_526.as_str());
    }
    if let Some(var_527) = &input.secret_arn {
        object.key("SecretArn").string(var_527.as_str());
    }
    if let Some(var_528) = &input.one_drive_users {
        let mut object_529 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_529, var_528)?;
        object_529.finish();
    }
    if let Some(var_530) = &input.inclusion_patterns {
        let mut array_531 = object.key("InclusionPatterns").start_array();
        for item_532 in var_530 {
            {
                array_531.value().string(item_532.as_str());
            }
        }
        array_531.finish();
    }
    if let Some(var_533) = &input.exclusion_patterns {
        let mut array_534 = object.key("ExclusionPatterns").start_array();
        for item_535 in var_533 {
            {
                array_534.value().string(item_535.as_str());
            }
        }
        array_534.finish();
    }
    if let Some(var_536) = &input.field_mappings {
        let mut array_537 = object.key("FieldMappings").start_array();
        for item_538 in var_536 {
            {
                let mut object_539 = array_537.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_539, item_538)?;
                object_539.finish();
            }
        }
        array_537.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_540) = &input.host_url {
        object.key("HostUrl").string(var_540.as_str());
    }
    if let Some(var_541) = &input.secret_arn {
        object.key("SecretArn").string(var_541.as_str());
    }
    if let Some(var_542) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_542.as_str());
    }
    if let Some(var_543) = &input.knowledge_article_configuration {
        let mut object_544 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_544, var_543)?;
        object_544.finish();
    }
    if let Some(var_545) = &input.service_catalog_configuration {
        let mut object_546 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_546,
            var_545,
        )?;
        object_546.finish();
    }
    if let Some(var_547) = &input.authentication_type {
        object.key("AuthenticationType").string(var_547.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.server_url {
        object.key("ServerUrl").string(var_548.as_str());
    }
    if let Some(var_549) = &input.secret_arn {
        object.key("SecretArn").string(var_549.as_str());
    }
    if let Some(var_550) = &input.version {
        object.key("Version").string(var_550.as_str());
    }
    if let Some(var_551) = &input.space_configuration {
        let mut object_552 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_552,
            var_551,
        )?;
        object_552.finish();
    }
    if let Some(var_553) = &input.page_configuration {
        let mut object_554 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_554,
            var_553,
        )?;
        object_554.finish();
    }
    if let Some(var_555) = &input.blog_configuration {
        let mut object_556 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.attachment_configuration {
        let mut object_558 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_558,
            var_557,
        )?;
        object_558.finish();
    }
    if let Some(var_559) = &input.vpc_configuration {
        let mut object_560 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_560,
            var_559,
        )?;
        object_560.finish();
    }
    if let Some(var_561) = &input.inclusion_patterns {
        let mut array_562 = object.key("InclusionPatterns").start_array();
        for item_563 in var_561 {
            {
                array_562.value().string(item_563.as_str());
            }
        }
        array_562.finish();
    }
    if let Some(var_564) = &input.exclusion_patterns {
        let mut array_565 = object.key("ExclusionPatterns").start_array();
        for item_566 in var_564 {
            {
                array_565.value().string(item_566.as_str());
            }
        }
        array_565.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.secret_arn {
        object.key("SecretArn").string(var_567.as_str());
    }
    if let Some(var_568) = &input.inclusion_patterns {
        let mut array_569 = object.key("InclusionPatterns").start_array();
        for item_570 in var_568 {
            {
                array_569.value().string(item_570.as_str());
            }
        }
        array_569.finish();
    }
    if let Some(var_571) = &input.exclusion_patterns {
        let mut array_572 = object.key("ExclusionPatterns").start_array();
        for item_573 in var_571 {
            {
                array_572.value().string(item_573.as_str());
            }
        }
        array_572.finish();
    }
    if let Some(var_574) = &input.field_mappings {
        let mut array_575 = object.key("FieldMappings").start_array();
        for item_576 in var_574 {
            {
                let mut object_577 = array_575.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_577, item_576)?;
                object_577.finish();
            }
        }
        array_575.finish();
    }
    if let Some(var_578) = &input.exclude_mime_types {
        let mut array_579 = object.key("ExcludeMimeTypes").start_array();
        for item_580 in var_578 {
            {
                array_579.value().string(item_580.as_str());
            }
        }
        array_579.finish();
    }
    if let Some(var_581) = &input.exclude_user_accounts {
        let mut array_582 = object.key("ExcludeUserAccounts").start_array();
        for item_583 in var_581 {
            {
                array_582.value().string(item_583.as_str());
            }
        }
        array_582.finish();
    }
    if let Some(var_584) = &input.exclude_shared_drives {
        let mut array_585 = object.key("ExcludeSharedDrives").start_array();
        for item_586 in var_584 {
            {
                array_585.value().string(item_586.as_str());
            }
        }
        array_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.urls {
        let mut object_588 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_588, var_587)?;
        object_588.finish();
    }
    if let Some(var_589) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    if let Some(var_590) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_590).into()),
        );
    }
    if let Some(var_591) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_591).into()),
        );
    }
    if let Some(var_592) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    if let Some(var_593) = &input.url_inclusion_patterns {
        let mut array_594 = object.key("UrlInclusionPatterns").start_array();
        for item_595 in var_593 {
            {
                array_594.value().string(item_595.as_str());
            }
        }
        array_594.finish();
    }
    if let Some(var_596) = &input.url_exclusion_patterns {
        let mut array_597 = object.key("UrlExclusionPatterns").start_array();
        for item_598 in var_596 {
            {
                array_597.value().string(item_598.as_str());
            }
        }
        array_597.finish();
    }
    if let Some(var_599) = &input.proxy_configuration {
        let mut object_600 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_600,
            var_599,
        )?;
        object_600.finish();
    }
    if let Some(var_601) = &input.authentication_configuration {
        let mut object_602 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_602,
            var_601,
        )?;
        object_602.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.organization_id {
        object.key("OrganizationId").string(var_603.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_604) = &input.inclusion_patterns {
        let mut array_605 = object.key("InclusionPatterns").start_array();
        for item_606 in var_604 {
            {
                array_605.value().string(item_606.as_str());
            }
        }
        array_605.finish();
    }
    if let Some(var_607) = &input.exclusion_patterns {
        let mut array_608 = object.key("ExclusionPatterns").start_array();
        for item_609 in var_607 {
            {
                array_608.value().string(item_609.as_str());
            }
        }
        array_608.finish();
    }
    if let Some(var_610) = &input.field_mappings {
        let mut array_611 = object.key("FieldMappings").start_array();
        for item_612 in var_610 {
            {
                let mut object_613 = array_611.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_613, item_612)?;
                object_613.finish();
            }
        }
        array_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.file_system_id {
        object.key("FileSystemId").string(var_614.as_str());
    }
    if let Some(var_615) = &input.file_system_type {
        object.key("FileSystemType").string(var_615.as_str());
    }
    if let Some(var_616) = &input.vpc_configuration {
        let mut object_617 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_617,
            var_616,
        )?;
        object_617.finish();
    }
    if let Some(var_618) = &input.secret_arn {
        object.key("SecretArn").string(var_618.as_str());
    }
    if let Some(var_619) = &input.inclusion_patterns {
        let mut array_620 = object.key("InclusionPatterns").start_array();
        for item_621 in var_619 {
            {
                array_620.value().string(item_621.as_str());
            }
        }
        array_620.finish();
    }
    if let Some(var_622) = &input.exclusion_patterns {
        let mut array_623 = object.key("ExclusionPatterns").start_array();
        for item_624 in var_622 {
            {
                array_623.value().string(item_624.as_str());
            }
        }
        array_623.finish();
    }
    if let Some(var_625) = &input.field_mappings {
        let mut array_626 = object.key("FieldMappings").start_array();
        for item_627 in var_625 {
            {
                let mut object_628 = array_626.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_628, item_627)?;
                object_628.finish();
            }
        }
        array_626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.team_id {
        object.key("TeamId").string(var_629.as_str());
    }
    if let Some(var_630) = &input.secret_arn {
        object.key("SecretArn").string(var_630.as_str());
    }
    if let Some(var_631) = &input.vpc_configuration {
        let mut object_632 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_632,
            var_631,
        )?;
        object_632.finish();
    }
    if let Some(var_633) = &input.slack_entity_list {
        let mut array_634 = object.key("SlackEntityList").start_array();
        for item_635 in var_633 {
            {
                array_634.value().string(item_635.as_str());
            }
        }
        array_634.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object
            .key("CrawlBotMessage")
            .boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object
            .key("ExcludeArchived")
            .boolean(input.exclude_archived);
    }
    if let Some(var_636) = &input.since_crawl_date {
        object.key("SinceCrawlDate").string(var_636.as_str());
    }
    if let Some(var_637) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.private_channel_filter {
        let mut array_639 = object.key("PrivateChannelFilter").start_array();
        for item_640 in var_638 {
            {
                array_639.value().string(item_640.as_str());
            }
        }
        array_639.finish();
    }
    if let Some(var_641) = &input.public_channel_filter {
        let mut array_642 = object.key("PublicChannelFilter").start_array();
        for item_643 in var_641 {
            {
                array_642.value().string(item_643.as_str());
            }
        }
        array_642.finish();
    }
    if let Some(var_644) = &input.inclusion_patterns {
        let mut array_645 = object.key("InclusionPatterns").start_array();
        for item_646 in var_644 {
            {
                array_645.value().string(item_646.as_str());
            }
        }
        array_645.finish();
    }
    if let Some(var_647) = &input.exclusion_patterns {
        let mut array_648 = object.key("ExclusionPatterns").start_array();
        for item_649 in var_647 {
            {
                array_648.value().string(item_649.as_str());
            }
        }
        array_648.finish();
    }
    if let Some(var_650) = &input.field_mappings {
        let mut array_651 = object.key("FieldMappings").start_array();
        for item_652 in var_650 {
            {
                let mut object_653 = array_651.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_653, item_652)?;
                object_653.finish();
            }
        }
        array_651.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.data_source_ids {
        let mut array_655 = object.key("DataSourceIds").start_array();
        for item_656 in var_654 {
            {
                array_655.value().string(item_656.as_str());
            }
        }
        array_655.finish();
    }
    if let Some(var_657) = &input.faq_ids {
        let mut array_658 = object.key("FaqIds").start_array();
        for item_659 in var_657 {
            {
                array_658.value().string(item_659.as_str());
            }
        }
        array_658.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_660.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.key_location {
        object.key("KeyLocation").string(var_661.as_str());
    }
    if let Some(var_662) = &input.url {
        object.key("URL").string(var_662.as_str());
    }
    if let Some(var_663) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_663.as_str());
    }
    if let Some(var_664) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_664.as_str());
    }
    if let Some(var_665) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_665.as_str());
    }
    if let Some(var_666) = &input.issuer {
        object.key("Issuer").string(var_666.as_str());
    }
    if let Some(var_667) = &input.claim_regex {
        object.key("ClaimRegex").string(var_667.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_668.as_str());
    }
    if let Some(var_669) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_669.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.group_id {
        object.key("GroupId").string(var_670.as_str());
    }
    if let Some(var_671) = &input.data_source_id {
        object.key("DataSourceId").string(var_671.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_672) = &input.user_id {
        object.key("UserId").string(var_672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_673) = &input.freshness {
        object.key("Freshness").boolean(*var_673);
    }
    if let Some(var_674) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_674).into()),
        );
    }
    if let Some(var_675) = &input.duration {
        object.key("Duration").string(var_675.as_str());
    }
    if let Some(var_676) = &input.rank_order {
        object.key("RankOrder").string(var_676.as_str());
    }
    if let Some(var_677) = &input.value_importance_map {
        let mut object_678 = object.key("ValueImportanceMap").start_object();
        for (key_679, value_680) in var_677 {
            {
                object_678.key(key_679).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_680).into()),
                );
            }
        }
        object_678.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_681) = &input.group_id {
        object.key("GroupId").string(var_681.as_str());
    }
    if let Some(var_682) = &input.data_source_id {
        object.key("DataSourceId").string(var_682.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_683) = &input.string_value {
        object.key("StringValue").string(var_683.as_str());
    }
    if let Some(var_684) = &input.string_list_value {
        let mut array_685 = object.key("StringListValue").start_array();
        for item_686 in var_684 {
            {
                array_685.value().string(item_686.as_str());
            }
        }
        array_685.finish();
    }
    if let Some(var_687) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_687).into()),
        );
    }
    if let Some(var_688) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_688, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_689.as_str());
    }
    if let Some(var_690) = &input.operator {
        object.key("Operator").string(var_690.as_str());
    }
    if let Some(var_691) = &input.condition_on_value {
        let mut object_692 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_693.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_694) = &input.target_document_attribute_value {
        let mut object_695 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_695,
            var_694,
        )?;
        object_695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_696) = &input.s3_prefix {
        object.key("S3Prefix").string(var_696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_697) = &input.key_path {
        object.key("KeyPath").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.subnet_ids {
        let mut array_699 = object.key("SubnetIds").start_array();
        for item_700 in var_698 {
            {
                array_699.value().string(item_700.as_str());
            }
        }
        array_699.finish();
    }
    if let Some(var_701) = &input.security_group_ids {
        let mut array_702 = object.key("SecurityGroupIds").start_array();
        for item_703 in var_701 {
            {
                array_702.value().string(item_703.as_str());
            }
        }
        array_702.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_704) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_704.as_str());
    }
    if let Some(var_705) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_705.as_str());
    }
    if let Some(var_706) = &input.index_field_name {
        object.key("IndexFieldName").string(var_706.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.database_host {
        object.key("DatabaseHost").string(var_707.as_str());
    }
    if let Some(var_708) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_708).into()),
        );
    }
    if let Some(var_709) = &input.database_name {
        object.key("DatabaseName").string(var_709.as_str());
    }
    if let Some(var_710) = &input.table_name {
        object.key("TableName").string(var_710.as_str());
    }
    if let Some(var_711) = &input.secret_arn {
        object.key("SecretArn").string(var_711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_712.as_str());
    }
    if let Some(var_713) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_713.as_str());
    }
    if let Some(var_714) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_714.as_str());
    }
    if let Some(var_715) = &input.field_mappings {
        let mut array_716 = object.key("FieldMappings").start_array();
        for item_717 in var_715 {
            {
                let mut object_718 = array_716.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_718, item_717)?;
                object_718.finish();
            }
        }
        array_716.finish();
    }
    if let Some(var_719) = &input.change_detecting_columns {
        let mut array_720 = object.key("ChangeDetectingColumns").start_array();
        for item_721 in var_719 {
            {
                array_720.value().string(item_721.as_str());
            }
        }
        array_720.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_722) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_724) = &input.name {
        object.key("Name").string(var_724.as_str());
    }
    if let Some(var_725) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_725.as_str());
    }
    if let Some(var_726) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_726.as_str());
    }
    if let Some(var_727) = &input.field_mappings {
        let mut array_728 = object.key("FieldMappings").start_array();
        for item_729 in var_727 {
            {
                let mut object_730 = array_728.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_730, item_729)?;
                object_730.finish();
            }
        }
        array_728.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_731) = &input.included_states {
        let mut array_732 = object.key("IncludedStates").start_array();
        for item_733 in var_731 {
            {
                array_732.value().string(item_733.as_str());
            }
        }
        array_732.finish();
    }
    if let Some(var_734) = &input.standard_knowledge_article_type_configuration {
        let mut object_735 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_735, var_734)?;
        object_735.finish();
    }
    if let Some(var_736) = &input.custom_knowledge_article_type_configurations {
        let mut array_737 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_738 in var_736 {
            {
                let mut object_739 = array_737.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_739, item_738)?;
                object_739.finish();
            }
        }
        array_737.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_740) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_740.as_str());
    }
    if let Some(var_741) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_741.as_str());
    }
    if let Some(var_742) = &input.field_mappings {
        let mut array_743 = object.key("FieldMappings").start_array();
        for item_744 in var_742 {
            {
                let mut object_745 = array_743.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_745, item_744)?;
                object_745.finish();
            }
        }
        array_743.finish();
    }
    if let Some(var_746) = &input.include_filter_types {
        let mut array_747 = object.key("IncludeFilterTypes").start_array();
        for item_748 in var_746 {
            {
                array_747.value().string(item_748.as_str());
            }
        }
        array_747.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_749) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_749.as_str());
    }
    if let Some(var_750) = &input.field_mappings {
        let mut array_751 = object.key("FieldMappings").start_array();
        for item_752 in var_750 {
            {
                let mut object_753 = array_751.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_753, item_752)?;
                object_753.finish();
            }
        }
        array_751.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.one_drive_user_list {
        let mut array_755 = object.key("OneDriveUserList").start_array();
        for item_756 in var_754 {
            {
                array_755.value().string(item_756.as_str());
            }
        }
        array_755.finish();
    }
    if let Some(var_757) = &input.one_drive_user_s3_path {
        let mut object_758 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_758, var_757)?;
        object_758.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_759) = &input.include_attachment_file_patterns {
        let mut array_760 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_761 in var_759 {
            {
                array_760.value().string(item_761.as_str());
            }
        }
        array_760.finish();
    }
    if let Some(var_762) = &input.exclude_attachment_file_patterns {
        let mut array_763 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_764 in var_762 {
            {
                array_763.value().string(item_764.as_str());
            }
        }
        array_763.finish();
    }
    if let Some(var_765) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_765.as_str());
    }
    if let Some(var_766) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_766.as_str());
    }
    if let Some(var_767) = &input.field_mappings {
        let mut array_768 = object.key("FieldMappings").start_array();
        for item_769 in var_767 {
            {
                let mut object_770 = array_768.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_770, item_769)?;
                object_770.finish();
            }
        }
        array_768.finish();
    }
    if let Some(var_771) = &input.filter_query {
        object.key("FilterQuery").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_772) = &input.include_attachment_file_patterns {
        let mut array_773 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_774 in var_772 {
            {
                array_773.value().string(item_774.as_str());
            }
        }
        array_773.finish();
    }
    if let Some(var_775) = &input.exclude_attachment_file_patterns {
        let mut array_776 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_777 in var_775 {
            {
                array_776.value().string(item_777.as_str());
            }
        }
        array_776.finish();
    }
    if let Some(var_778) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_778.as_str());
    }
    if let Some(var_779) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_779.as_str());
    }
    if let Some(var_780) = &input.field_mappings {
        let mut array_781 = object.key("FieldMappings").start_array();
        for item_782 in var_780 {
            {
                let mut object_783 = array_781.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_783, item_782)?;
                object_783.finish();
            }
        }
        array_781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_784) = &input.include_spaces {
        let mut array_785 = object.key("IncludeSpaces").start_array();
        for item_786 in var_784 {
            {
                array_785.value().string(item_786.as_str());
            }
        }
        array_785.finish();
    }
    if let Some(var_787) = &input.exclude_spaces {
        let mut array_788 = object.key("ExcludeSpaces").start_array();
        for item_789 in var_787 {
            {
                array_788.value().string(item_789.as_str());
            }
        }
        array_788.finish();
    }
    if let Some(var_790) = &input.space_field_mappings {
        let mut array_791 = object.key("SpaceFieldMappings").start_array();
        for item_792 in var_790 {
            {
                let mut object_793 = array_791.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_793, item_792)?;
                object_793.finish();
            }
        }
        array_791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.page_field_mappings {
        let mut array_795 = object.key("PageFieldMappings").start_array();
        for item_796 in var_794 {
            {
                let mut object_797 = array_795.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_797, item_796)?;
                object_797.finish();
            }
        }
        array_795.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_798) = &input.blog_field_mappings {
        let mut array_799 = object.key("BlogFieldMappings").start_array();
        for item_800 in var_798 {
            {
                let mut object_801 = array_799.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_801, item_800)?;
                object_801.finish();
            }
        }
        array_799.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_802) = &input.attachment_field_mappings {
        let mut array_803 = object.key("AttachmentFieldMappings").start_array();
        for item_804 in var_802 {
            {
                let mut object_805 = array_803.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_805, item_804)?;
                object_805.finish();
            }
        }
        array_803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_806) = &input.seed_url_configuration {
        let mut object_807 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_807,
            var_806,
        )?;
        object_807.finish();
    }
    if let Some(var_808) = &input.site_maps_configuration {
        let mut object_809 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_809,
            var_808,
        )?;
        object_809.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.host {
        object.key("Host").string(var_810.as_str());
    }
    if let Some(var_811) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_811).into()),
        );
    }
    if let Some(var_812) = &input.credentials {
        object.key("Credentials").string(var_812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_813) = &input.basic_authentication {
        let mut array_814 = object.key("BasicAuthentication").start_array();
        for item_815 in var_813 {
            {
                let mut object_816 = array_814.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_816, item_815)?;
                object_816.finish();
            }
        }
        array_814.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_817) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_817.as_str());
    }
    if let Some(var_818) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_818.as_str());
    }
    if let Some(var_819) = &input.field_mappings {
        let mut array_820 = object.key("FieldMappings").start_array();
        for item_821 in var_819 {
            {
                let mut object_822 = array_820.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_822, item_821)?;
                object_822.finish();
            }
        }
        array_820.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_823) = &input.name {
        object.key("Name").string(var_823.as_str());
    }
    if let Some(var_824) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_824.as_str());
    }
    if let Some(var_825) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_825.as_str());
    }
    if let Some(var_826) = &input.field_mappings {
        let mut array_827 = object.key("FieldMappings").start_array();
        for item_828 in var_826 {
            {
                let mut object_829 = array_827.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_829, item_828)?;
                object_829.finish();
            }
        }
        array_827.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_830) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_830.as_str());
    }
    if let Some(var_831) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_831.as_str());
    }
    if let Some(var_832) = &input.index_field_name {
        object.key("IndexFieldName").string(var_832.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_833) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_833.as_str());
    }
    if let Some(var_834) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_834.as_str());
    }
    if let Some(var_835) = &input.index_field_name {
        object.key("IndexFieldName").string(var_835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_836.as_str());
    }
    if let Some(var_837) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_837.as_str());
    }
    if let Some(var_838) = &input.index_field_name {
        object.key("IndexFieldName").string(var_838.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_839) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_839.as_str());
    }
    if let Some(var_840) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_840.as_str());
    }
    if let Some(var_841) = &input.index_field_name {
        object.key("IndexFieldName").string(var_841.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_842) = &input.seed_urls {
        let mut array_843 = object.key("SeedUrls").start_array();
        for item_844 in var_842 {
            {
                array_843.value().string(item_844.as_str());
            }
        }
        array_843.finish();
    }
    if let Some(var_845) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_845.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_846) = &input.site_maps {
        let mut array_847 = object.key("SiteMaps").start_array();
        for item_848 in var_846 {
            {
                array_847.value().string(item_848.as_str());
            }
        }
        array_847.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_849) = &input.host {
        object.key("Host").string(var_849.as_str());
    }
    if let Some(var_850) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_850).into()),
        );
    }
    if let Some(var_851) = &input.credentials {
        object.key("Credentials").string(var_851.as_str());
    }
    Ok(())
}
