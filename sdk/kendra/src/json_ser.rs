// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) {
    if let Some(var_1) = &input.index_id {
        object.key("IndexId").string(var_1);
    }
    if let Some(var_2) = &input.document_id_list {
        let mut array_3 = object.key("DocumentIdList").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4);
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.data_source_sync_job_metric_target {
        let mut object_6 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_6,
            var_5,
        );
        object_6.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) {
    if let Some(var_7) = &input.index_id {
        object.key("IndexId").string(var_7);
    }
    if let Some(var_8) = &input.document_info_list {
        let mut array_9 = object.key("DocumentInfoList").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) {
    if let Some(var_12) = &input.index_id {
        object.key("IndexId").string(var_12);
    }
    if let Some(var_13) = &input.role_arn {
        object.key("RoleArn").string(var_13);
    }
    if let Some(var_14) = &input.documents {
        let mut array_15 = object.key("Documents").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_17, item_16);
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) {
    if let Some(var_18) = &input.index_id {
        object.key("IndexId").string(var_18);
    }
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.index_id {
        object.key("IndexId").string(var_20);
    }
    if let Some(var_21) = &input.r#type {
        object.key("Type").string(var_21.as_str());
    }
    if let Some(var_22) = &input.configuration {
        let mut object_23 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_23,
            var_22,
        );
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("Description").string(var_24);
    }
    if let Some(var_25) = &input.schedule {
        object.key("Schedule").string(var_25);
    }
    if let Some(var_26) = &input.role_arn {
        object.key("RoleArn").string(var_26);
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29);
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.client_token {
        object.key("ClientToken").string(var_31);
    }
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32);
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33);
    }
    if let Some(var_34) = &input.description {
        object.key("Description").string(var_34);
    }
    if let Some(var_35) = &input.s3_path {
        let mut object_36 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_36, var_35);
        object_36.finish();
    }
    if let Some(var_37) = &input.role_arn {
        object.key("RoleArn").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.file_format {
        object.key("FileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.client_token {
        object.key("ClientToken").string(var_43);
    }
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) {
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
    if let Some(var_45) = &input.edition {
        object.key("Edition").string(var_45.as_str());
    }
    if let Some(var_46) = &input.role_arn {
        object.key("RoleArn").string(var_46);
    }
    if let Some(var_47) = &input.server_side_encryption_configuration {
        let mut object_48 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_48,
            var_47,
        );
        object_48.finish();
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49);
    }
    if let Some(var_50) = &input.client_token {
        object.key("ClientToken").string(var_50);
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53);
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.user_token_configurations {
        let mut array_56 = object.key("UserTokenConfigurations").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_58,
                    item_57,
                );
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_59.as_str());
    }
    if let Some(var_60) = &input.user_group_resolution_configuration {
        let mut object_61 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_61,
            var_60,
        );
        object_61.finish();
    }
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) {
    if let Some(var_62) = &input.index_id {
        object.key("IndexId").string(var_62);
    }
    if let Some(var_63) = &input.name {
        object.key("Name").string(var_63);
    }
    if let Some(var_64) = &input.description {
        object.key("Description").string(var_64);
    }
    if let Some(var_65) = &input.source_s3_path {
        let mut object_66 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67);
    }
    if let Some(var_68) = &input.role_arn {
        object.key("RoleArn").string(var_68);
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71);
                object_72.finish();
            }
        }
        array_70.finish();
    }
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) {
    if let Some(var_73) = &input.index_id {
        object.key("IndexId").string(var_73);
    }
    if let Some(var_74) = &input.name {
        object.key("Name").string(var_74);
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75);
    }
    if let Some(var_76) = &input.role_arn {
        object.key("RoleArn").string(var_76);
    }
    if let Some(var_77) = &input.tags {
        let mut array_78 = object.key("Tags").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_80, item_79);
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.source_s3_path {
        let mut object_82 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.client_token {
        object.key("ClientToken").string(var_83);
    }
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) {
    if let Some(var_84) = &input.id {
        object.key("Id").string(var_84);
    }
    if let Some(var_85) = &input.index_id {
        object.key("IndexId").string(var_85);
    }
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) {
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87);
    }
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) {
    if let Some(var_88) = &input.id {
        object.key("Id").string(var_88);
    }
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) {
    if let Some(var_89) = &input.index_id {
        object.key("IndexId").string(var_89);
    }
    if let Some(var_90) = &input.data_source_id {
        object.key("DataSourceId").string(var_90);
    }
    if let Some(var_91) = &input.group_id {
        object.key("GroupId").string(var_91);
    }
    if let Some(var_92) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_92).into()),
        );
    }
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) {
    if let Some(var_93) = &input.index_id {
        object.key("IndexId").string(var_93);
    }
    if let Some(var_94) = &input.id {
        object.key("Id").string(var_94);
    }
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) {
    if let Some(var_95) = &input.id {
        object.key("Id").string(var_95);
    }
    if let Some(var_96) = &input.index_id {
        object.key("IndexId").string(var_96);
    }
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) {
    if let Some(var_97) = &input.id {
        object.key("Id").string(var_97);
    }
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98);
    }
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) {
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99);
    }
    if let Some(var_100) = &input.index_id {
        object.key("IndexId").string(var_100);
    }
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) {
    if let Some(var_101) = &input.id {
        object.key("Id").string(var_101);
    }
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) {
    if let Some(var_102) = &input.index_id {
        object.key("IndexId").string(var_102);
    }
    if let Some(var_103) = &input.data_source_id {
        object.key("DataSourceId").string(var_103);
    }
    if let Some(var_104) = &input.group_id {
        object.key("GroupId").string(var_104);
    }
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) {
    if let Some(var_105) = &input.index_id {
        object.key("IndexId").string(var_105);
    }
    if let Some(var_106) = &input.id {
        object.key("Id").string(var_106);
    }
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) {
    if let Some(var_107) = &input.index_id {
        object.key("IndexId").string(var_107);
    }
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) {
    if let Some(var_108) = &input.id {
        object.key("Id").string(var_108);
    }
    if let Some(var_109) = &input.index_id {
        object.key("IndexId").string(var_109);
    }
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) {
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110);
    }
    if let Some(var_111) = &input.query_text {
        object.key("QueryText").string(var_111);
    }
    if let Some(var_112) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_112).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) {
    if let Some(var_113) = &input.index_id {
        object.key("IndexId").string(var_113);
    }
    if let Some(var_114) = &input.next_token {
        object.key("NextToken").string(var_114);
    }
    if let Some(var_115) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_115).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) {
    if let Some(var_116) = &input.id {
        object.key("Id").string(var_116);
    }
    if let Some(var_117) = &input.index_id {
        object.key("IndexId").string(var_117);
    }
    if let Some(var_118) = &input.next_token {
        object.key("NextToken").string(var_118);
    }
    if let Some(var_119) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    if let Some(var_120) = &input.start_time_filter {
        let mut object_121 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_121, var_120);
        object_121.finish();
    }
    if let Some(var_122) = &input.status_filter {
        object.key("StatusFilter").string(var_122.as_str());
    }
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) {
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123);
    }
    if let Some(var_124) = &input.next_token {
        object.key("NextToken").string(var_124);
    }
    if let Some(var_125) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) {
    if let Some(var_126) = &input.index_id {
        object.key("IndexId").string(var_126);
    }
    if let Some(var_127) = &input.data_source_id {
        object.key("DataSourceId").string(var_127);
    }
    if let Some(var_128) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
    if let Some(var_129) = &input.next_token {
        object.key("NextToken").string(var_129);
    }
    if let Some(var_130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_130).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) {
    if let Some(var_131) = &input.next_token {
        object.key("NextToken").string(var_131);
    }
    if let Some(var_132) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_132).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) {
    if let Some(var_133) = &input.index_id {
        object.key("IndexId").string(var_133);
    }
    if let Some(var_134) = &input.next_token {
        object.key("NextToken").string(var_134);
    }
    if let Some(var_135) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_135).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_136) = &input.resource_arn {
        object.key("ResourceARN").string(var_136);
    }
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) {
    if let Some(var_137) = &input.index_id {
        object.key("IndexId").string(var_137);
    }
    if let Some(var_138) = &input.next_token {
        object.key("NextToken").string(var_138);
    }
    if let Some(var_139) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_139).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) {
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140);
    }
    if let Some(var_141) = &input.data_source_id {
        object.key("DataSourceId").string(var_141);
    }
    if let Some(var_142) = &input.group_id {
        object.key("GroupId").string(var_142);
    }
    if let Some(var_143) = &input.group_members {
        let mut object_144 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_144, var_143);
        object_144.finish();
    }
    if let Some(var_145) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    if let Some(var_146) = &input.role_arn {
        object.key("RoleArn").string(var_146);
    }
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) {
    if let Some(var_147) = &input.index_id {
        object.key("IndexId").string(var_147);
    }
    if let Some(var_148) = &input.query_text {
        object.key("QueryText").string(var_148);
    }
    if let Some(var_149) = &input.attribute_filter {
        let mut object_150 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(&mut object_150, var_149);
        object_150.finish();
    }
    if let Some(var_151) = &input.facets {
        let mut array_152 = object.key("Facets").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_154, item_153);
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.requested_document_attributes {
        let mut array_156 = object.key("RequestedDocumentAttributes").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157);
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_158.as_str());
    }
    if let Some(var_159) = &input.document_relevance_override_configurations {
        let mut array_160 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_162,
                    item_161,
                );
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.sorting_configuration {
        let mut object_166 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_166,
            var_165,
        );
        object_166.finish();
    }
    if let Some(var_167) = &input.user_context {
        let mut object_168 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_168, var_167);
        object_168.finish();
    }
    if let Some(var_169) = &input.visitor_id {
        object.key("VisitorId").string(var_169);
    }
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) {
    if let Some(var_170) = &input.id {
        object.key("Id").string(var_170);
    }
    if let Some(var_171) = &input.index_id {
        object.key("IndexId").string(var_171);
    }
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172);
    }
    if let Some(var_173) = &input.index_id {
        object.key("IndexId").string(var_173);
    }
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) {
    if let Some(var_174) = &input.index_id {
        object.key("IndexId").string(var_174);
    }
    if let Some(var_175) = &input.query_id {
        object.key("QueryId").string(var_175);
    }
    if let Some(var_176) = &input.click_feedback_items {
        let mut array_177 = object.key("ClickFeedbackItems").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_179,
                    item_178,
                );
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.relevance_feedback_items {
        let mut array_181 = object.key("RelevanceFeedbackItems").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_183,
                    item_182,
                );
                object_183.finish();
            }
        }
        array_181.finish();
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_184) = &input.resource_arn {
        object.key("ResourceARN").string(var_184);
    }
    if let Some(var_185) = &input.tags {
        let mut array_186 = object.key("Tags").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_188, item_187);
                object_188.finish();
            }
        }
        array_186.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_189) = &input.resource_arn {
        object.key("ResourceARN").string(var_189);
    }
    if let Some(var_190) = &input.tag_keys {
        let mut array_191 = object.key("TagKeys").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_193) = &input.id {
        object.key("Id").string(var_193);
    }
    if let Some(var_194) = &input.name {
        object.key("Name").string(var_194);
    }
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195);
    }
    if let Some(var_196) = &input.configuration {
        let mut object_197 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_197,
            var_196,
        );
        object_197.finish();
    }
    if let Some(var_198) = &input.description {
        object.key("Description").string(var_198);
    }
    if let Some(var_199) = &input.schedule {
        object.key("Schedule").string(var_199);
    }
    if let Some(var_200) = &input.role_arn {
        object.key("RoleArn").string(var_200);
    }
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) {
    if let Some(var_201) = &input.id {
        object.key("Id").string(var_201);
    }
    if let Some(var_202) = &input.name {
        object.key("Name").string(var_202);
    }
    if let Some(var_203) = &input.role_arn {
        object.key("RoleArn").string(var_203);
    }
    if let Some(var_204) = &input.description {
        object.key("Description").string(var_204);
    }
    if let Some(var_205) = &input.document_metadata_configuration_updates {
        let mut array_206 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_208,
                    item_207,
                );
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.capacity_units {
        let mut object_210 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_210,
            var_209,
        );
        object_210.finish();
    }
    if let Some(var_211) = &input.user_token_configurations {
        let mut array_212 = object.key("UserTokenConfigurations").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_214,
                    item_213,
                );
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_215.as_str());
    }
    if let Some(var_216) = &input.user_group_resolution_configuration {
        let mut object_217 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_217,
            var_216,
        );
        object_217.finish();
    }
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) {
    if let Some(var_218) = &input.index_id {
        object.key("IndexId").string(var_218);
    }
    if let Some(var_219) = &input.id {
        object.key("Id").string(var_219);
    }
    if let Some(var_220) = &input.name {
        object.key("Name").string(var_220);
    }
    if let Some(var_221) = &input.description {
        object.key("Description").string(var_221);
    }
    if let Some(var_222) = &input.source_s3_path {
        let mut object_223 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_223, var_222);
        object_223.finish();
    }
    if let Some(var_224) = &input.role_arn {
        object.key("RoleArn").string(var_224);
    }
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) {
    if let Some(var_225) = &input.index_id {
        object.key("IndexId").string(var_225);
    }
    if let Some(var_226) = &input.mode {
        object.key("Mode").string(var_226.as_str());
    }
    if let Some(var_227) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_228);
    }
    if let Some(var_229) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    if let Some(var_230) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_230).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) {
    if let Some(var_231) = &input.id {
        object.key("Id").string(var_231);
    }
    if let Some(var_232) = &input.name {
        object.key("Name").string(var_232);
    }
    if let Some(var_233) = &input.index_id {
        object.key("IndexId").string(var_233);
    }
    if let Some(var_234) = &input.description {
        object.key("Description").string(var_234);
    }
    if let Some(var_235) = &input.role_arn {
        object.key("RoleArn").string(var_235);
    }
    if let Some(var_236) = &input.source_s3_path {
        let mut object_237 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_237, var_236);
        object_237.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) {
    if let Some(var_238) = &input.data_source_id {
        object.key("DataSourceId").string(var_238);
    }
    if let Some(var_239) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_239);
    }
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) {
    if let Some(var_240) = &input.document_id {
        object.key("DocumentId").string(var_240);
    }
    if let Some(var_241) = &input.attributes {
        let mut array_242 = object.key("Attributes").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_244,
                    item_243,
                );
                object_244.finish();
            }
        }
        array_242.finish();
    }
}

pub fn serialize_structure_crate_model_document(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) {
    if let Some(var_245) = &input.id {
        object.key("Id").string(var_245);
    }
    if let Some(var_246) = &input.title {
        object.key("Title").string(var_246);
    }
    if let Some(var_247) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&smithy_types::base64::encode(var_247));
    }
    if let Some(var_248) = &input.s3_path {
        let mut object_249 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_249, var_248);
        object_249.finish();
    }
    if let Some(var_250) = &input.attributes {
        let mut array_251 = object.key("Attributes").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_253,
                    item_252,
                );
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.access_control_list {
        let mut array_255 = object.key("AccessControlList").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_257,
                    item_256,
                );
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.hierarchical_access_control_list {
        let mut array_259 = object.key("HierarchicalAccessControlList").start_array();
        for item_260 in var_258 {
            {
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_261,
                    item_260,
                );
                object_261.finish();
            }
        }
        array_259.finish();
    }
    if let Some(var_262) = &input.content_type {
        object.key("ContentType").string(var_262.as_str());
    }
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) {
    if let Some(var_263) = &input.s3_configuration {
        let mut object_264 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_264,
            var_263,
        );
        object_264.finish();
    }
    if let Some(var_265) = &input.share_point_configuration {
        let mut object_266 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_266,
            var_265,
        );
        object_266.finish();
    }
    if let Some(var_267) = &input.database_configuration {
        let mut object_268 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_268,
            var_267,
        );
        object_268.finish();
    }
    if let Some(var_269) = &input.salesforce_configuration {
        let mut object_270 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_270,
            var_269,
        );
        object_270.finish();
    }
    if let Some(var_271) = &input.one_drive_configuration {
        let mut object_272 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_272,
            var_271,
        );
        object_272.finish();
    }
    if let Some(var_273) = &input.service_now_configuration {
        let mut object_274 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_274,
            var_273,
        );
        object_274.finish();
    }
    if let Some(var_275) = &input.confluence_configuration {
        let mut object_276 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.google_drive_configuration {
        let mut object_278 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
    if let Some(var_279) = &input.web_crawler_configuration {
        let mut object_280 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.work_docs_configuration {
        let mut object_282 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_283) = &input.key {
        object.key("Key").string(var_283);
    }
    if let Some(var_284) = &input.value {
        object.key("Value").string(var_284);
    }
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) {
    if let Some(var_285) = &input.bucket {
        object.key("Bucket").string(var_285);
    }
    if let Some(var_286) = &input.key {
        object.key("Key").string(var_286);
    }
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) {
    if let Some(var_287) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_287);
    }
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) {
    if let Some(var_288) = &input.jwt_token_type_configuration {
        let mut object_289 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_289,
            var_288,
        );
        object_289.finish();
    }
    if let Some(var_290) = &input.json_token_type_configuration {
        let mut object_291 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_291,
            var_290,
        );
        object_291.finish();
    }
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) {
    if let Some(var_292) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_292.as_str());
    }
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) {
    if let Some(var_293) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_293, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_294) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_294, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) {
    if let Some(var_295) = &input.member_groups {
        let mut array_296 = object.key("MemberGroups").start_array();
        for item_297 in var_295 {
            {
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_298,
                    item_297,
                );
                object_298.finish();
            }
        }
        array_296.finish();
    }
    if let Some(var_299) = &input.member_users {
        let mut array_300 = object.key("MemberUsers").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_302,
                    item_301,
                );
                object_302.finish();
            }
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.s3_pathfor_group_members {
        let mut object_304 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_304, var_303);
        object_304.finish();
    }
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) {
    if let Some(var_305) = &input.and_all_filters {
        let mut array_306 = object.key("AndAllFilters").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_308,
                    item_307,
                );
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.or_all_filters {
        let mut array_310 = object.key("OrAllFilters").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_312,
                    item_311,
                );
                object_312.finish();
            }
        }
        array_310.finish();
    }
    if let Some(var_313) = &input.not_filter {
        let mut object_314 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(&mut object_314, var_313);
        object_314.finish();
    }
    if let Some(var_315) = &input.equals_to {
        let mut object_316 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_316,
            var_315,
        );
        object_316.finish();
    }
    if let Some(var_317) = &input.contains_all {
        let mut object_318 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_318,
            var_317,
        );
        object_318.finish();
    }
    if let Some(var_319) = &input.contains_any {
        let mut object_320 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_320,
            var_319,
        );
        object_320.finish();
    }
    if let Some(var_321) = &input.greater_than {
        let mut object_322 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_322,
            var_321,
        );
        object_322.finish();
    }
    if let Some(var_323) = &input.greater_than_or_equals {
        let mut object_324 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_324,
            var_323,
        );
        object_324.finish();
    }
    if let Some(var_325) = &input.less_than {
        let mut object_326 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_326,
            var_325,
        );
        object_326.finish();
    }
    if let Some(var_327) = &input.less_than_or_equals {
        let mut object_328 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_328,
            var_327,
        );
        object_328.finish();
    }
}

pub fn serialize_structure_crate_model_facet(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) {
    if let Some(var_329) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_329);
    }
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) {
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330);
    }
    if let Some(var_331) = &input.relevance {
        let mut object_332 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_332, var_331);
        object_332.finish();
    }
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) {
    if let Some(var_333) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_333);
    }
    if let Some(var_334) = &input.sort_order {
        object.key("SortOrder").string(var_334.as_str());
    }
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) {
    if let Some(var_335) = &input.token {
        object.key("Token").string(var_335);
    }
    if let Some(var_336) = &input.user_id {
        object.key("UserId").string(var_336);
    }
    if let Some(var_337) = &input.groups {
        let mut array_338 = object.key("Groups").start_array();
        for item_339 in var_337 {
            {
                array_338.value().string(item_339);
            }
        }
        array_338.finish();
    }
    if let Some(var_340) = &input.data_source_groups {
        let mut array_341 = object.key("DataSourceGroups").start_array();
        for item_342 in var_340 {
            {
                let mut object_343 = array_341.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_343,
                    item_342,
                );
                object_343.finish();
            }
        }
        array_341.finish();
    }
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) {
    if let Some(var_344) = &input.result_id {
        object.key("ResultId").string(var_344);
    }
    if let Some(var_345) = &input.click_time {
        object
            .key("ClickTime")
            .instant(var_345, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) {
    if let Some(var_346) = &input.result_id {
        object.key("ResultId").string(var_346);
    }
    if let Some(var_347) = &input.relevance_value {
        object.key("RelevanceValue").string(var_347.as_str());
    }
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) {
    if let Some(var_348) = &input.name {
        object.key("Name").string(var_348);
    }
    if let Some(var_349) = &input.r#type {
        object.key("Type").string(var_349.as_str());
    }
    if let Some(var_350) = &input.relevance {
        let mut object_351 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_351, var_350);
        object_351.finish();
    }
    if let Some(var_352) = &input.search {
        let mut object_353 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_353, var_352);
        object_353.finish();
    }
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) {
    if let Some(var_354) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_354).into()),
        );
    }
    if let Some(var_355) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_355).into()),
        );
    }
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) {
    if let Some(var_356) = &input.key {
        object.key("Key").string(var_356);
    }
    if let Some(var_357) = &input.value {
        let mut object_358 = object.key("Value").start_object();
        crate::json_ser::serialize_union_crate_model_document_attribute_value(
            &mut object_358,
            var_357,
        );
        object_358.finish();
    }
}

pub fn serialize_structure_crate_model_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) {
    if let Some(var_359) = &input.name {
        object.key("Name").string(var_359);
    }
    if let Some(var_360) = &input.r#type {
        object.key("Type").string(var_360.as_str());
    }
    if let Some(var_361) = &input.access {
        object.key("Access").string(var_361.as_str());
    }
    if let Some(var_362) = &input.data_source_id {
        object.key("DataSourceId").string(var_362);
    }
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) {
    if let Some(var_363) = &input.principal_list {
        let mut array_364 = object.key("PrincipalList").start_array();
        for item_365 in var_363 {
            {
                let mut object_366 = array_364.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_366,
                    item_365,
                );
                object_366.finish();
            }
        }
        array_364.finish();
    }
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) {
    if let Some(var_367) = &input.bucket_name {
        object.key("BucketName").string(var_367);
    }
    if let Some(var_368) = &input.inclusion_prefixes {
        let mut array_369 = object.key("InclusionPrefixes").start_array();
        for item_370 in var_368 {
            {
                array_369.value().string(item_370);
            }
        }
        array_369.finish();
    }
    if let Some(var_371) = &input.inclusion_patterns {
        let mut array_372 = object.key("InclusionPatterns").start_array();
        for item_373 in var_371 {
            {
                array_372.value().string(item_373);
            }
        }
        array_372.finish();
    }
    if let Some(var_374) = &input.exclusion_patterns {
        let mut array_375 = object.key("ExclusionPatterns").start_array();
        for item_376 in var_374 {
            {
                array_375.value().string(item_376);
            }
        }
        array_375.finish();
    }
    if let Some(var_377) = &input.documents_metadata_configuration {
        let mut object_378 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_378,
            var_377,
        );
        object_378.finish();
    }
    if let Some(var_379) = &input.access_control_list_configuration {
        let mut object_380 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_380,
            var_379,
        );
        object_380.finish();
    }
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) {
    if let Some(var_381) = &input.share_point_version {
        object.key("SharePointVersion").string(var_381.as_str());
    }
    if let Some(var_382) = &input.urls {
        let mut array_383 = object.key("Urls").start_array();
        for item_384 in var_382 {
            {
                array_383.value().string(item_384);
            }
        }
        array_383.finish();
    }
    if let Some(var_385) = &input.secret_arn {
        object.key("SecretArn").string(var_385);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_386) = &input.inclusion_patterns {
        let mut array_387 = object.key("InclusionPatterns").start_array();
        for item_388 in var_386 {
            {
                array_387.value().string(item_388);
            }
        }
        array_387.finish();
    }
    if let Some(var_389) = &input.exclusion_patterns {
        let mut array_390 = object.key("ExclusionPatterns").start_array();
        for item_391 in var_389 {
            {
                array_390.value().string(item_391);
            }
        }
        array_390.finish();
    }
    if let Some(var_392) = &input.vpc_configuration {
        let mut object_393 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_393,
            var_392,
        );
        object_393.finish();
    }
    if let Some(var_394) = &input.field_mappings {
        let mut array_395 = object.key("FieldMappings").start_array();
        for item_396 in var_394 {
            {
                let mut object_397 = array_395.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_397,
                    item_396,
                );
                object_397.finish();
            }
        }
        array_395.finish();
    }
    if let Some(var_398) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_398);
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_399) = &input.ssl_certificate_s3_path {
        let mut object_400 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_400, var_399);
        object_400.finish();
    }
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) {
    if let Some(var_401) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_401.as_str());
    }
    if let Some(var_402) = &input.connection_configuration {
        let mut object_403 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_403,
            var_402,
        );
        object_403.finish();
    }
    if let Some(var_404) = &input.vpc_configuration {
        let mut object_405 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_405,
            var_404,
        );
        object_405.finish();
    }
    if let Some(var_406) = &input.column_configuration {
        let mut object_407 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_407,
            var_406,
        );
        object_407.finish();
    }
    if let Some(var_408) = &input.acl_configuration {
        let mut object_409 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_409,
            var_408,
        );
        object_409.finish();
    }
    if let Some(var_410) = &input.sql_configuration {
        let mut object_411 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_411,
            var_410,
        );
        object_411.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) {
    if let Some(var_412) = &input.server_url {
        object.key("ServerUrl").string(var_412);
    }
    if let Some(var_413) = &input.secret_arn {
        object.key("SecretArn").string(var_413);
    }
    if let Some(var_414) = &input.standard_object_configurations {
        let mut array_415 = object.key("StandardObjectConfigurations").start_array();
        for item_416 in var_414 {
            {
                let mut object_417 = array_415.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_417, item_416);
                object_417.finish();
            }
        }
        array_415.finish();
    }
    if let Some(var_418) = &input.knowledge_article_configuration {
        let mut object_419 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(
            &mut object_419,
            var_418,
        );
        object_419.finish();
    }
    if let Some(var_420) = &input.chatter_feed_configuration {
        let mut object_421 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_421,
            var_420,
        );
        object_421.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_422) = &input.standard_object_attachment_configuration {
        let mut object_423 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_423, var_422);
        object_423.finish();
    }
    if let Some(var_424) = &input.include_attachment_file_patterns {
        let mut array_425 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_426 in var_424 {
            {
                array_425.value().string(item_426);
            }
        }
        array_425.finish();
    }
    if let Some(var_427) = &input.exclude_attachment_file_patterns {
        let mut array_428 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_429 in var_427 {
            {
                array_428.value().string(item_429);
            }
        }
        array_428.finish();
    }
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) {
    if let Some(var_430) = &input.tenant_domain {
        object.key("TenantDomain").string(var_430);
    }
    if let Some(var_431) = &input.secret_arn {
        object.key("SecretArn").string(var_431);
    }
    if let Some(var_432) = &input.one_drive_users {
        let mut object_433 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_433, var_432);
        object_433.finish();
    }
    if let Some(var_434) = &input.inclusion_patterns {
        let mut array_435 = object.key("InclusionPatterns").start_array();
        for item_436 in var_434 {
            {
                array_435.value().string(item_436);
            }
        }
        array_435.finish();
    }
    if let Some(var_437) = &input.exclusion_patterns {
        let mut array_438 = object.key("ExclusionPatterns").start_array();
        for item_439 in var_437 {
            {
                array_438.value().string(item_439);
            }
        }
        array_438.finish();
    }
    if let Some(var_440) = &input.field_mappings {
        let mut array_441 = object.key("FieldMappings").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_443,
                    item_442,
                );
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) {
    if let Some(var_444) = &input.host_url {
        object.key("HostUrl").string(var_444);
    }
    if let Some(var_445) = &input.secret_arn {
        object.key("SecretArn").string(var_445);
    }
    if let Some(var_446) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_446.as_str());
    }
    if let Some(var_447) = &input.knowledge_article_configuration {
        let mut object_448 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_448, var_447);
        object_448.finish();
    }
    if let Some(var_449) = &input.service_catalog_configuration {
        let mut object_450 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_450,
            var_449,
        );
        object_450.finish();
    }
    if let Some(var_451) = &input.authentication_type {
        object.key("AuthenticationType").string(var_451.as_str());
    }
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) {
    if let Some(var_452) = &input.server_url {
        object.key("ServerUrl").string(var_452);
    }
    if let Some(var_453) = &input.secret_arn {
        object.key("SecretArn").string(var_453);
    }
    if let Some(var_454) = &input.version {
        object.key("Version").string(var_454.as_str());
    }
    if let Some(var_455) = &input.space_configuration {
        let mut object_456 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_456,
            var_455,
        );
        object_456.finish();
    }
    if let Some(var_457) = &input.page_configuration {
        let mut object_458 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_458,
            var_457,
        );
        object_458.finish();
    }
    if let Some(var_459) = &input.blog_configuration {
        let mut object_460 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_460,
            var_459,
        );
        object_460.finish();
    }
    if let Some(var_461) = &input.attachment_configuration {
        let mut object_462 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_462,
            var_461,
        );
        object_462.finish();
    }
    if let Some(var_463) = &input.vpc_configuration {
        let mut object_464 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_464,
            var_463,
        );
        object_464.finish();
    }
    if let Some(var_465) = &input.inclusion_patterns {
        let mut array_466 = object.key("InclusionPatterns").start_array();
        for item_467 in var_465 {
            {
                array_466.value().string(item_467);
            }
        }
        array_466.finish();
    }
    if let Some(var_468) = &input.exclusion_patterns {
        let mut array_469 = object.key("ExclusionPatterns").start_array();
        for item_470 in var_468 {
            {
                array_469.value().string(item_470);
            }
        }
        array_469.finish();
    }
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) {
    if let Some(var_471) = &input.secret_arn {
        object.key("SecretArn").string(var_471);
    }
    if let Some(var_472) = &input.inclusion_patterns {
        let mut array_473 = object.key("InclusionPatterns").start_array();
        for item_474 in var_472 {
            {
                array_473.value().string(item_474);
            }
        }
        array_473.finish();
    }
    if let Some(var_475) = &input.exclusion_patterns {
        let mut array_476 = object.key("ExclusionPatterns").start_array();
        for item_477 in var_475 {
            {
                array_476.value().string(item_477);
            }
        }
        array_476.finish();
    }
    if let Some(var_478) = &input.field_mappings {
        let mut array_479 = object.key("FieldMappings").start_array();
        for item_480 in var_478 {
            {
                let mut object_481 = array_479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_481,
                    item_480,
                );
                object_481.finish();
            }
        }
        array_479.finish();
    }
    if let Some(var_482) = &input.exclude_mime_types {
        let mut array_483 = object.key("ExcludeMimeTypes").start_array();
        for item_484 in var_482 {
            {
                array_483.value().string(item_484);
            }
        }
        array_483.finish();
    }
    if let Some(var_485) = &input.exclude_user_accounts {
        let mut array_486 = object.key("ExcludeUserAccounts").start_array();
        for item_487 in var_485 {
            {
                array_486.value().string(item_487);
            }
        }
        array_486.finish();
    }
    if let Some(var_488) = &input.exclude_shared_drives {
        let mut array_489 = object.key("ExcludeSharedDrives").start_array();
        for item_490 in var_488 {
            {
                array_489.value().string(item_490);
            }
        }
        array_489.finish();
    }
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) {
    if let Some(var_491) = &input.urls {
        let mut object_492 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_492, var_491);
        object_492.finish();
    }
    if let Some(var_493) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    if let Some(var_494) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    if let Some(var_495) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_495).into()),
        );
    }
    if let Some(var_496) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_496).into()),
        );
    }
    if let Some(var_497) = &input.url_inclusion_patterns {
        let mut array_498 = object.key("UrlInclusionPatterns").start_array();
        for item_499 in var_497 {
            {
                array_498.value().string(item_499);
            }
        }
        array_498.finish();
    }
    if let Some(var_500) = &input.url_exclusion_patterns {
        let mut array_501 = object.key("UrlExclusionPatterns").start_array();
        for item_502 in var_500 {
            {
                array_501.value().string(item_502);
            }
        }
        array_501.finish();
    }
    if let Some(var_503) = &input.proxy_configuration {
        let mut object_504 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_504,
            var_503,
        );
        object_504.finish();
    }
    if let Some(var_505) = &input.authentication_configuration {
        let mut object_506 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_506,
            var_505,
        );
        object_506.finish();
    }
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) {
    if let Some(var_507) = &input.organization_id {
        object.key("OrganizationId").string(var_507);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_508) = &input.inclusion_patterns {
        let mut array_509 = object.key("InclusionPatterns").start_array();
        for item_510 in var_508 {
            {
                array_509.value().string(item_510);
            }
        }
        array_509.finish();
    }
    if let Some(var_511) = &input.exclusion_patterns {
        let mut array_512 = object.key("ExclusionPatterns").start_array();
        for item_513 in var_511 {
            {
                array_512.value().string(item_513);
            }
        }
        array_512.finish();
    }
    if let Some(var_514) = &input.field_mappings {
        let mut array_515 = object.key("FieldMappings").start_array();
        for item_516 in var_514 {
            {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_517,
                    item_516,
                );
                object_517.finish();
            }
        }
        array_515.finish();
    }
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) {
    if let Some(var_518) = &input.key_location {
        object.key("KeyLocation").string(var_518.as_str());
    }
    if let Some(var_519) = &input.url {
        object.key("URL").string(var_519);
    }
    if let Some(var_520) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_520);
    }
    if let Some(var_521) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_521);
    }
    if let Some(var_522) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_522);
    }
    if let Some(var_523) = &input.issuer {
        object.key("Issuer").string(var_523);
    }
    if let Some(var_524) = &input.claim_regex {
        object.key("ClaimRegex").string(var_524);
    }
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) {
    if let Some(var_525) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_525);
    }
    if let Some(var_526) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_526);
    }
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) {
    if let Some(var_527) = &input.group_id {
        object.key("GroupId").string(var_527);
    }
    if let Some(var_528) = &input.data_source_id {
        object.key("DataSourceId").string(var_528);
    }
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) {
    if let Some(var_529) = &input.user_id {
        object.key("UserId").string(var_529);
    }
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) {
    if let Some(var_530) = &input.freshness {
        object.key("Freshness").boolean(*var_530);
    }
    if let Some(var_531) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.duration {
        object.key("Duration").string(var_532);
    }
    if let Some(var_533) = &input.rank_order {
        object.key("RankOrder").string(var_533.as_str());
    }
    if let Some(var_534) = &input.value_importance_map {
        let mut object_535 = object.key("ValueImportanceMap").start_object();
        for (key_536, value_537) in var_534 {
            {
                object_535.key(key_536).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*value_537).into()),
                );
            }
        }
        object_535.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) {
    if let Some(var_538) = &input.group_id {
        object.key("GroupId").string(var_538);
    }
    if let Some(var_539) = &input.data_source_id {
        object.key("DataSourceId").string(var_539);
    }
}

pub fn serialize_structure_crate_model_search(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
}

pub fn serialize_union_crate_model_document_attribute_value(
    object_358: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) {
    match input {
        crate::model::DocumentAttributeValue::StringValue(inner) => {
            object_358.key("StringValue").string(inner);
        }
        crate::model::DocumentAttributeValue::StringListValue(inner) => {
            let mut array_540 = object_358.key("StringListValue").start_array();
            for item_541 in inner {
                {
                    array_540.value().string(item_541);
                }
            }
            array_540.finish();
        }
        crate::model::DocumentAttributeValue::LongValue(inner) => {
            object_358.key("LongValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::model::DocumentAttributeValue::DateValue(inner) => {
            object_358
                .key("DateValue")
                .instant(inner, smithy_types::instant::Format::EpochSeconds);
        }
    }
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) {
    if let Some(var_542) = &input.s3_prefix {
        object.key("S3Prefix").string(var_542);
    }
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) {
    if let Some(var_543) = &input.key_path {
        object.key("KeyPath").string(var_543);
    }
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) {
    if let Some(var_544) = &input.subnet_ids {
        let mut array_545 = object.key("SubnetIds").start_array();
        for item_546 in var_544 {
            {
                array_545.value().string(item_546);
            }
        }
        array_545.finish();
    }
    if let Some(var_547) = &input.security_group_ids {
        let mut array_548 = object.key("SecurityGroupIds").start_array();
        for item_549 in var_547 {
            {
                array_548.value().string(item_549);
            }
        }
        array_548.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) {
    if let Some(var_550) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_550);
    }
    if let Some(var_551) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_551);
    }
    if let Some(var_552) = &input.index_field_name {
        object.key("IndexFieldName").string(var_552);
    }
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) {
    if let Some(var_553) = &input.database_host {
        object.key("DatabaseHost").string(var_553);
    }
    if let Some(var_554) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    if let Some(var_555) = &input.database_name {
        object.key("DatabaseName").string(var_555);
    }
    if let Some(var_556) = &input.table_name {
        object.key("TableName").string(var_556);
    }
    if let Some(var_557) = &input.secret_arn {
        object.key("SecretArn").string(var_557);
    }
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) {
    if let Some(var_558) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_558);
    }
    if let Some(var_559) = &input.document_data_column_name {
        object.key("DocumentDataColumnName").string(var_559);
    }
    if let Some(var_560) = &input.document_title_column_name {
        object.key("DocumentTitleColumnName").string(var_560);
    }
    if let Some(var_561) = &input.field_mappings {
        let mut array_562 = object.key("FieldMappings").start_array();
        for item_563 in var_561 {
            {
                let mut object_564 = array_562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_564,
                    item_563,
                );
                object_564.finish();
            }
        }
        array_562.finish();
    }
    if let Some(var_565) = &input.change_detecting_columns {
        let mut array_566 = object.key("ChangeDetectingColumns").start_array();
        for item_567 in var_565 {
            {
                array_566.value().string(item_567);
            }
        }
        array_566.finish();
    }
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) {
    if let Some(var_568) = &input.allowed_groups_column_name {
        object.key("AllowedGroupsColumnName").string(var_568);
    }
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) {
    if let Some(var_569) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_569.as_str());
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) {
    if let Some(var_570) = &input.name {
        object.key("Name").string(var_570.as_str());
    }
    if let Some(var_571) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_571);
    }
    if let Some(var_572) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_572);
    }
    if let Some(var_573) = &input.field_mappings {
        let mut array_574 = object.key("FieldMappings").start_array();
        for item_575 in var_573 {
            {
                let mut object_576 = array_574.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_576,
                    item_575,
                );
                object_576.finish();
            }
        }
        array_574.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) {
    if let Some(var_577) = &input.included_states {
        let mut array_578 = object.key("IncludedStates").start_array();
        for item_579 in var_577 {
            {
                array_578.value().string(item_579.as_str());
            }
        }
        array_578.finish();
    }
    if let Some(var_580) = &input.standard_knowledge_article_type_configuration {
        let mut object_581 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_581, var_580);
        object_581.finish();
    }
    if let Some(var_582) = &input.custom_knowledge_article_type_configurations {
        let mut array_583 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_584 in var_582 {
            {
                let mut object_585 = array_583.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_585, item_584);
                object_585.finish();
            }
        }
        array_583.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) {
    if let Some(var_586) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_586);
    }
    if let Some(var_587) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_587);
    }
    if let Some(var_588) = &input.field_mappings {
        let mut array_589 = object.key("FieldMappings").start_array();
        for item_590 in var_588 {
            {
                let mut object_591 = array_589.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_591,
                    item_590,
                );
                object_591.finish();
            }
        }
        array_589.finish();
    }
    if let Some(var_592) = &input.include_filter_types {
        let mut array_593 = object.key("IncludeFilterTypes").start_array();
        for item_594 in var_592 {
            {
                array_593.value().string(item_594.as_str());
            }
        }
        array_593.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) {
    if let Some(var_595) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_595);
    }
    if let Some(var_596) = &input.field_mappings {
        let mut array_597 = object.key("FieldMappings").start_array();
        for item_598 in var_596 {
            {
                let mut object_599 = array_597.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_599,
                    item_598,
                );
                object_599.finish();
            }
        }
        array_597.finish();
    }
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) {
    if let Some(var_600) = &input.one_drive_user_list {
        let mut array_601 = object.key("OneDriveUserList").start_array();
        for item_602 in var_600 {
            {
                array_601.value().string(item_602);
            }
        }
        array_601.finish();
    }
    if let Some(var_603) = &input.one_drive_user_s3_path {
        let mut object_604 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_604, var_603);
        object_604.finish();
    }
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_605) = &input.include_attachment_file_patterns {
        let mut array_606 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_607 in var_605 {
            {
                array_606.value().string(item_607);
            }
        }
        array_606.finish();
    }
    if let Some(var_608) = &input.exclude_attachment_file_patterns {
        let mut array_609 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_610 in var_608 {
            {
                array_609.value().string(item_610);
            }
        }
        array_609.finish();
    }
    if let Some(var_611) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_611);
    }
    if let Some(var_612) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_612);
    }
    if let Some(var_613) = &input.field_mappings {
        let mut array_614 = object.key("FieldMappings").start_array();
        for item_615 in var_613 {
            {
                let mut object_616 = array_614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_616,
                    item_615,
                );
                object_616.finish();
            }
        }
        array_614.finish();
    }
    if let Some(var_617) = &input.filter_query {
        object.key("FilterQuery").string(var_617);
    }
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_618) = &input.include_attachment_file_patterns {
        let mut array_619 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_620 in var_618 {
            {
                array_619.value().string(item_620);
            }
        }
        array_619.finish();
    }
    if let Some(var_621) = &input.exclude_attachment_file_patterns {
        let mut array_622 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_623 in var_621 {
            {
                array_622.value().string(item_623);
            }
        }
        array_622.finish();
    }
    if let Some(var_624) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_624);
    }
    if let Some(var_625) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_625);
    }
    if let Some(var_626) = &input.field_mappings {
        let mut array_627 = object.key("FieldMappings").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_629,
                    item_628,
                );
                object_629.finish();
            }
        }
        array_627.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_630) = &input.include_spaces {
        let mut array_631 = object.key("IncludeSpaces").start_array();
        for item_632 in var_630 {
            {
                array_631.value().string(item_632);
            }
        }
        array_631.finish();
    }
    if let Some(var_633) = &input.exclude_spaces {
        let mut array_634 = object.key("ExcludeSpaces").start_array();
        for item_635 in var_633 {
            {
                array_634.value().string(item_635);
            }
        }
        array_634.finish();
    }
    if let Some(var_636) = &input.space_field_mappings {
        let mut array_637 = object.key("SpaceFieldMappings").start_array();
        for item_638 in var_636 {
            {
                let mut object_639 = array_637.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_639, item_638);
                object_639.finish();
            }
        }
        array_637.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) {
    if let Some(var_640) = &input.page_field_mappings {
        let mut array_641 = object.key("PageFieldMappings").start_array();
        for item_642 in var_640 {
            {
                let mut object_643 = array_641.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_643, item_642);
                object_643.finish();
            }
        }
        array_641.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) {
    if let Some(var_644) = &input.blog_field_mappings {
        let mut array_645 = object.key("BlogFieldMappings").start_array();
        for item_646 in var_644 {
            {
                let mut object_647 = array_645.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_647, item_646);
                object_647.finish();
            }
        }
        array_645.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_648) = &input.attachment_field_mappings {
        let mut array_649 = object.key("AttachmentFieldMappings").start_array();
        for item_650 in var_648 {
            {
                let mut object_651 = array_649.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_651, item_650);
                object_651.finish();
            }
        }
        array_649.finish();
    }
}

pub fn serialize_structure_crate_model_urls(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) {
    if let Some(var_652) = &input.seed_url_configuration {
        let mut object_653 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_653,
            var_652,
        );
        object_653.finish();
    }
    if let Some(var_654) = &input.site_maps_configuration {
        let mut object_655 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_655,
            var_654,
        );
        object_655.finish();
    }
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) {
    if let Some(var_656) = &input.host {
        object.key("Host").string(var_656);
    }
    if let Some(var_657) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_657).into()),
        );
    }
    if let Some(var_658) = &input.credentials {
        object.key("Credentials").string(var_658);
    }
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) {
    if let Some(var_659) = &input.basic_authentication {
        let mut array_660 = object.key("BasicAuthentication").start_array();
        for item_661 in var_659 {
            {
                let mut object_662 = array_660.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(
                    &mut object_662,
                    item_661,
                );
                object_662.finish();
            }
        }
        array_660.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_663) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_663);
    }
    if let Some(var_664) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_664);
    }
    if let Some(var_665) = &input.field_mappings {
        let mut array_666 = object.key("FieldMappings").start_array();
        for item_667 in var_665 {
            {
                let mut object_668 = array_666.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_668,
                    item_667,
                );
                object_668.finish();
            }
        }
        array_666.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_669) = &input.name {
        object.key("Name").string(var_669);
    }
    if let Some(var_670) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_670);
    }
    if let Some(var_671) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_671);
    }
    if let Some(var_672) = &input.field_mappings {
        let mut array_673 = object.key("FieldMappings").start_array();
        for item_674 in var_672 {
            {
                let mut object_675 = array_673.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_675,
                    item_674,
                );
                object_675.finish();
            }
        }
        array_673.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) {
    if let Some(var_676) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_676.as_str());
    }
    if let Some(var_677) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_677);
    }
    if let Some(var_678) = &input.index_field_name {
        object.key("IndexFieldName").string(var_678);
    }
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) {
    if let Some(var_679) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_679.as_str());
    }
    if let Some(var_680) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_680);
    }
    if let Some(var_681) = &input.index_field_name {
        object.key("IndexFieldName").string(var_681);
    }
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) {
    if let Some(var_682) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_682.as_str());
    }
    if let Some(var_683) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_683);
    }
    if let Some(var_684) = &input.index_field_name {
        object.key("IndexFieldName").string(var_684);
    }
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) {
    if let Some(var_685) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_685.as_str());
    }
    if let Some(var_686) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_686);
    }
    if let Some(var_687) = &input.index_field_name {
        object.key("IndexFieldName").string(var_687);
    }
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) {
    if let Some(var_688) = &input.seed_urls {
        let mut array_689 = object.key("SeedUrls").start_array();
        for item_690 in var_688 {
            {
                array_689.value().string(item_690);
            }
        }
        array_689.finish();
    }
    if let Some(var_691) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_691.as_str());
    }
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) {
    if let Some(var_692) = &input.site_maps {
        let mut array_693 = object.key("SiteMaps").start_array();
        for item_694 in var_692 {
            {
                array_693.value().string(item_694);
            }
        }
        array_693.finish();
    }
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) {
    if let Some(var_695) = &input.host {
        object.key("Host").string(var_695);
    }
    if let Some(var_696) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_696).into()),
        );
    }
    if let Some(var_697) = &input.credentials {
        object.key("Credentials").string(var_697);
    }
}
