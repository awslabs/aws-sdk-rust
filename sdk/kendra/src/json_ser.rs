// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.index_id {
        object.key("IndexId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.r#type {
        object.key("Type").string(var_35.as_str());
    }
    if let Some(var_36) = &input.configuration {
        let mut object_37 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.schedule {
        object.key("Schedule").string(var_39.as_str());
    }
    if let Some(var_40) = &input.role_arn {
        object.key("RoleArn").string(var_40.as_str());
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.client_token {
        object.key("ClientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.language_code {
        object.key("LanguageCode").string(var_46.as_str());
    }
    if let Some(var_47) = &input.custom_document_enrichment_configuration {
        let mut object_48 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49.as_str());
    }
    if let Some(var_50) = &input.index_id {
        object.key("IndexId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.role_arn {
        object.key("RoleArn").string(var_51.as_str());
    }
    if let Some(var_52) = &input.configuration {
        let mut object_53 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.description {
        object.key("Description").string(var_54.as_str());
    }
    if let Some(var_55) = &input.client_token {
        object.key("ClientToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.index_id {
        object.key("IndexId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("Description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.s3_path {
        let mut object_60 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.role_arn {
        object.key("RoleArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if let Some(var_66) = &input.file_format {
        object.key("FileFormat").string(var_66.as_str());
    }
    if let Some(var_67) = &input.client_token {
        object.key("ClientToken").string(var_67.as_str());
    }
    if let Some(var_68) = &input.language_code {
        object.key("LanguageCode").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69.as_str());
    }
    if let Some(var_70) = &input.edition {
        object.key("Edition").string(var_70.as_str());
    }
    if let Some(var_71) = &input.role_arn {
        object.key("RoleArn").string(var_71.as_str());
    }
    if let Some(var_72) = &input.server_side_encryption_configuration {
        let mut object_73 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.description {
        object.key("Description").string(var_74.as_str());
    }
    if let Some(var_75) = &input.client_token {
        object.key("ClientToken").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.user_token_configurations {
        let mut array_81 = object.key("UserTokenConfigurations").start_array();
        for item_82 in var_80 {
            {
                let mut object_83 = array_81.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_83,
                    item_82,
                )?;
                object_83.finish();
            }
        }
        array_81.finish();
    }
    if let Some(var_84) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_84.as_str());
    }
    if let Some(var_85) = &input.user_group_resolution_configuration {
        let mut object_86 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.name {
        object.key("Name").string(var_88.as_str());
    }
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89.as_str());
    }
    if let Some(var_90) = &input.source_s3_path {
        let mut object_91 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.client_token {
        object.key("ClientToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.role_arn {
        object.key("RoleArn").string(var_93.as_str());
    }
    if let Some(var_94) = &input.tags {
        let mut array_95 = object.key("Tags").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_97, item_96)?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99.as_str());
    }
    if let Some(var_100) = &input.description {
        object.key("Description").string(var_100.as_str());
    }
    if let Some(var_101) = &input.role_arn {
        object.key("RoleArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.tags {
        let mut array_103 = object.key("Tags").start_array();
        for item_104 in var_102 {
            {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_105, item_104)?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.source_s3_path {
        let mut object_107 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.client_token {
        object.key("ClientToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.id {
        object.key("Id").string(var_109.as_str());
    }
    if let Some(var_110) = &input.index_id {
        object.key("IndexId").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.id {
        object.key("Id").string(var_111.as_str());
    }
    if let Some(var_112) = &input.index_id {
        object.key("IndexId").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.id {
        object.key("Id").string(var_113.as_str());
    }
    if let Some(var_114) = &input.index_id {
        object.key("IndexId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.id {
        object.key("Id").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.index_id {
        object.key("IndexId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.data_source_id {
        object.key("DataSourceId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.group_id {
        object.key("GroupId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.index_id {
        object.key("IndexId").string(var_120.as_str());
    }
    if let Some(var_121) = &input.id {
        object.key("Id").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.id {
        object.key("Id").string(var_122.as_str());
    }
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.id {
        object.key("Id").string(var_124.as_str());
    }
    if let Some(var_125) = &input.index_id {
        object.key("IndexId").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.index_id {
        object.key("IndexId").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.id {
        object.key("Id").string(var_128.as_str());
    }
    if let Some(var_129) = &input.index_id {
        object.key("IndexId").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.id {
        object.key("Id").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.index_id {
        object.key("IndexId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.data_source_id {
        object.key("DataSourceId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.group_id {
        object.key("GroupId").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.index_id {
        object.key("IndexId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.id {
        object.key("Id").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.index_id {
        object.key("IndexId").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.id {
        object.key("Id").string(var_137.as_str());
    }
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.id {
        object.key("Id").string(var_139.as_str());
    }
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140.as_str());
    }
    if let Some(var_141) = &input.entity_list {
        let mut array_142 = object.key("EntityList").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_144,
                    item_143,
                )?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.id {
        object.key("Id").string(var_145.as_str());
    }
    if let Some(var_146) = &input.index_id {
        object.key("IndexId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.entity_ids {
        let mut array_148 = object.key("EntityIds").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149.as_str());
            }
        }
        array_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.query_text {
        object.key("QueryText").string(var_151.as_str());
    }
    if let Some(var_152) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.index_id {
        object.key("IndexId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.interval {
        object.key("Interval").string(var_154.as_str());
    }
    if let Some(var_155) = &input.metric_type {
        object.key("MetricType").string(var_155.as_str());
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.index_id {
        object.key("IndexId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.next_token {
        object.key("NextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.id {
        object.key("Id").string(var_161.as_str());
    }
    if let Some(var_162) = &input.index_id {
        object.key("IndexId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163.as_str());
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.start_time_filter {
        let mut object_166 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.status_filter {
        object.key("StatusFilter").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.id {
        object.key("Id").string(var_168.as_str());
    }
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.next_token {
        object.key("NextToken").string(var_170.as_str());
    }
    if let Some(var_171) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172.as_str());
    }
    if let Some(var_173) = &input.index_id {
        object.key("IndexId").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.index_id {
        object.key("IndexId").string(var_175.as_str());
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176.as_str());
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.index_id {
        object.key("IndexId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.next_token {
        object.key("NextToken").string(var_179.as_str());
    }
    if let Some(var_180) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.index_id {
        object.key("IndexId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.data_source_id {
        object.key("DataSourceId").string(var_182.as_str());
    }
    if let Some(var_183) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.next_token {
        object.key("NextToken").string(var_186.as_str());
    }
    if let Some(var_187) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.index_id {
        object.key("IndexId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.resource_arn {
        object.key("ResourceARN").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.index_id {
        object.key("IndexId").string(var_192.as_str());
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193.as_str());
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.data_source_id {
        object.key("DataSourceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.group_id {
        object.key("GroupId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.group_members {
        let mut object_199 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.query_text {
        object.key("QueryText").string(var_203.as_str());
    }
    if let Some(var_204) = &input.attribute_filter {
        let mut object_205 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.facets {
        let mut array_207 = object.key("Facets").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_209, item_208)?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.requested_document_attributes {
        let mut array_211 = object.key("RequestedDocumentAttributes").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212.as_str());
            }
        }
        array_211.finish();
    }
    if let Some(var_213) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_213.as_str());
    }
    if let Some(var_214) = &input.document_relevance_override_configurations {
        let mut array_215 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    if let Some(var_220) = &input.sorting_configuration {
        let mut object_221 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_221,
            var_220,
        )?;
        object_221.finish();
    }
    if let Some(var_222) = &input.user_context {
        let mut object_223 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_223, var_222)?;
        object_223.finish();
    }
    if let Some(var_224) = &input.visitor_id {
        object.key("VisitorId").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.id {
        object.key("Id").string(var_225.as_str());
    }
    if let Some(var_226) = &input.index_id {
        object.key("IndexId").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.id {
        object.key("Id").string(var_227.as_str());
    }
    if let Some(var_228) = &input.index_id {
        object.key("IndexId").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.index_id {
        object.key("IndexId").string(var_229.as_str());
    }
    if let Some(var_230) = &input.query_id {
        object.key("QueryId").string(var_230.as_str());
    }
    if let Some(var_231) = &input.click_feedback_items {
        let mut array_232 = object.key("ClickFeedbackItems").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_234,
                    item_233,
                )?;
                object_234.finish();
            }
        }
        array_232.finish();
    }
    if let Some(var_235) = &input.relevance_feedback_items {
        let mut array_236 = object.key("RelevanceFeedbackItems").start_array();
        for item_237 in var_235 {
            {
                let mut object_238 = array_236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_238,
                    item_237,
                )?;
                object_238.finish();
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.resource_arn {
        object.key("ResourceARN").string(var_239.as_str());
    }
    if let Some(var_240) = &input.tags {
        let mut array_241 = object.key("Tags").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_243, item_242)?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.resource_arn {
        object.key("ResourceARN").string(var_244.as_str());
    }
    if let Some(var_245) = &input.tag_keys {
        let mut array_246 = object.key("TagKeys").start_array();
        for item_247 in var_245 {
            {
                array_246.value().string(item_247.as_str());
            }
        }
        array_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.id {
        object.key("Id").string(var_248.as_str());
    }
    if let Some(var_249) = &input.name {
        object.key("Name").string(var_249.as_str());
    }
    if let Some(var_250) = &input.index_id {
        object.key("IndexId").string(var_250.as_str());
    }
    if let Some(var_251) = &input.configuration {
        let mut object_252 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.description {
        object.key("Description").string(var_253.as_str());
    }
    if let Some(var_254) = &input.schedule {
        object.key("Schedule").string(var_254.as_str());
    }
    if let Some(var_255) = &input.role_arn {
        object.key("RoleArn").string(var_255.as_str());
    }
    if let Some(var_256) = &input.language_code {
        object.key("LanguageCode").string(var_256.as_str());
    }
    if let Some(var_257) = &input.custom_document_enrichment_configuration {
        let mut object_258 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.id {
        object.key("Id").string(var_259.as_str());
    }
    if let Some(var_260) = &input.name {
        object.key("Name").string(var_260.as_str());
    }
    if let Some(var_261) = &input.index_id {
        object.key("IndexId").string(var_261.as_str());
    }
    if let Some(var_262) = &input.role_arn {
        object.key("RoleArn").string(var_262.as_str());
    }
    if let Some(var_263) = &input.configuration {
        let mut object_264 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.description {
        object.key("Description").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.id {
        object.key("Id").string(var_266.as_str());
    }
    if let Some(var_267) = &input.name {
        object.key("Name").string(var_267.as_str());
    }
    if let Some(var_268) = &input.role_arn {
        object.key("RoleArn").string(var_268.as_str());
    }
    if let Some(var_269) = &input.description {
        object.key("Description").string(var_269.as_str());
    }
    if let Some(var_270) = &input.document_metadata_configuration_updates {
        let mut array_271 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.capacity_units {
        let mut object_275 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_275,
            var_274,
        )?;
        object_275.finish();
    }
    if let Some(var_276) = &input.user_token_configurations {
        let mut array_277 = object.key("UserTokenConfigurations").start_array();
        for item_278 in var_276 {
            {
                let mut object_279 = array_277.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_279,
                    item_278,
                )?;
                object_279.finish();
            }
        }
        array_277.finish();
    }
    if let Some(var_280) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_280.as_str());
    }
    if let Some(var_281) = &input.user_group_resolution_configuration {
        let mut object_282 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_282,
            var_281,
        )?;
        object_282.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.index_id {
        object.key("IndexId").string(var_283.as_str());
    }
    if let Some(var_284) = &input.id {
        object.key("Id").string(var_284.as_str());
    }
    if let Some(var_285) = &input.name {
        object.key("Name").string(var_285.as_str());
    }
    if let Some(var_286) = &input.description {
        object.key("Description").string(var_286.as_str());
    }
    if let Some(var_287) = &input.source_s3_path {
        let mut object_288 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_288, var_287)?;
        object_288.finish();
    }
    if let Some(var_289) = &input.role_arn {
        object.key("RoleArn").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.index_id {
        object.key("IndexId").string(var_290.as_str());
    }
    if let Some(var_291) = &input.mode {
        object.key("Mode").string(var_291.as_str());
    }
    if let Some(var_292) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_292).into()),
        );
    }
    if let Some(var_293) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_293);
    }
    if let Some(var_294) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    if let Some(var_295) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_295).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.id {
        object.key("Id").string(var_296.as_str());
    }
    if let Some(var_297) = &input.name {
        object.key("Name").string(var_297.as_str());
    }
    if let Some(var_298) = &input.index_id {
        object.key("IndexId").string(var_298.as_str());
    }
    if let Some(var_299) = &input.description {
        object.key("Description").string(var_299.as_str());
    }
    if let Some(var_300) = &input.role_arn {
        object.key("RoleArn").string(var_300.as_str());
    }
    if let Some(var_301) = &input.source_s3_path {
        let mut object_302 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_302, var_301)?;
        object_302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.entity_id {
        object.key("EntityId").string(var_303.as_str());
    }
    if let Some(var_304) = &input.entity_type {
        object.key("EntityType").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.entity_id {
        object.key("EntityId").string(var_305.as_str());
    }
    if let Some(var_306) = &input.persona {
        object.key("Persona").string(var_306.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.data_source_id {
        object.key("DataSourceId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.document_id {
        object.key("DocumentId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.attributes {
        let mut array_311 = object.key("Attributes").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.id {
        object.key("Id").string(var_314.as_str());
    }
    if let Some(var_315) = &input.title {
        object.key("Title").string(var_315.as_str());
    }
    if let Some(var_316) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_316));
    }
    if let Some(var_317) = &input.s3_path {
        let mut object_318 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_318, var_317)?;
        object_318.finish();
    }
    if let Some(var_319) = &input.attributes {
        let mut array_320 = object.key("Attributes").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_322,
                    item_321,
                )?;
                object_322.finish();
            }
        }
        array_320.finish();
    }
    if let Some(var_323) = &input.access_control_list {
        let mut array_324 = object.key("AccessControlList").start_array();
        for item_325 in var_323 {
            {
                let mut object_326 = array_324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_326,
                    item_325,
                )?;
                object_326.finish();
            }
        }
        array_324.finish();
    }
    if let Some(var_327) = &input.hierarchical_access_control_list {
        let mut array_328 = object.key("HierarchicalAccessControlList").start_array();
        for item_329 in var_327 {
            {
                let mut object_330 = array_328.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_330,
                    item_329,
                )?;
                object_330.finish();
            }
        }
        array_328.finish();
    }
    if let Some(var_331) = &input.content_type {
        object.key("ContentType").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.inline_configurations {
        let mut array_333 = object.key("InlineConfigurations").start_array();
        for item_334 in var_332 {
            {
                let mut object_335 = array_333.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_335, item_334)?;
                object_335.finish();
            }
        }
        array_333.finish();
    }
    if let Some(var_336) = &input.pre_extraction_hook_configuration {
        let mut object_337 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_337,
            var_336,
        )?;
        object_337.finish();
    }
    if let Some(var_338) = &input.post_extraction_hook_configuration {
        let mut object_339 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    if let Some(var_340) = &input.role_arn {
        object.key("RoleArn").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.s3_configuration {
        let mut object_342 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_342,
            var_341,
        )?;
        object_342.finish();
    }
    if let Some(var_343) = &input.share_point_configuration {
        let mut object_344 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_344,
            var_343,
        )?;
        object_344.finish();
    }
    if let Some(var_345) = &input.database_configuration {
        let mut object_346 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    if let Some(var_347) = &input.salesforce_configuration {
        let mut object_348 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    if let Some(var_349) = &input.one_drive_configuration {
        let mut object_350 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.service_now_configuration {
        let mut object_352 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_352,
            var_351,
        )?;
        object_352.finish();
    }
    if let Some(var_353) = &input.confluence_configuration {
        let mut object_354 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.google_drive_configuration {
        let mut object_356 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.web_crawler_configuration {
        let mut object_358 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    if let Some(var_359) = &input.work_docs_configuration {
        let mut object_360 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.fsx_configuration {
        let mut object_362 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.key {
        object.key("Key").string(var_363.as_str());
    }
    if let Some(var_364) = &input.value {
        object.key("Value").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.content_source_configuration {
        let mut object_366 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_366,
            var_365,
        )?;
        object_366.finish();
    }
    if let Some(var_367) = &input.user_identity_configuration {
        let mut object_368 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.bucket {
        object.key("Bucket").string(var_369.as_str());
    }
    if let Some(var_370) = &input.key {
        object.key("Key").string(var_370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.jwt_token_type_configuration {
        let mut object_373 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_373,
            var_372,
        )?;
        object_373.finish();
    }
    if let Some(var_374) = &input.json_token_type_configuration {
        let mut object_375 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_377, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_378) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_378, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.member_groups {
        let mut array_380 = object.key("MemberGroups").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_382,
                    item_381,
                )?;
                object_382.finish();
            }
        }
        array_380.finish();
    }
    if let Some(var_383) = &input.member_users {
        let mut array_384 = object.key("MemberUsers").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_386,
                    item_385,
                )?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    if let Some(var_387) = &input.s3_pathfor_group_members {
        let mut object_388 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_388, var_387)?;
        object_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.and_all_filters {
        let mut array_390 = object.key("AndAllFilters").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_392,
                    item_391,
                )?;
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.or_all_filters {
        let mut array_394 = object.key("OrAllFilters").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.not_filter {
        let mut object_398 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    if let Some(var_399) = &input.equals_to {
        let mut object_400 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if let Some(var_401) = &input.contains_all {
        let mut object_402 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.contains_any {
        let mut object_404 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_404,
            var_403,
        )?;
        object_404.finish();
    }
    if let Some(var_405) = &input.greater_than {
        let mut object_406 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.greater_than_or_equals {
        let mut object_408 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.less_than {
        let mut object_410 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.less_than_or_equals {
        let mut object_412 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.name {
        object.key("Name").string(var_414.as_str());
    }
    if let Some(var_415) = &input.relevance {
        let mut object_416 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_416, var_415)?;
        object_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_417.as_str());
    }
    if let Some(var_418) = &input.sort_order {
        object.key("SortOrder").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.token {
        object.key("Token").string(var_419.as_str());
    }
    if let Some(var_420) = &input.user_id {
        object.key("UserId").string(var_420.as_str());
    }
    if let Some(var_421) = &input.groups {
        let mut array_422 = object.key("Groups").start_array();
        for item_423 in var_421 {
            {
                array_422.value().string(item_423.as_str());
            }
        }
        array_422.finish();
    }
    if let Some(var_424) = &input.data_source_groups {
        let mut array_425 = object.key("DataSourceGroups").start_array();
        for item_426 in var_424 {
            {
                let mut object_427 = array_425.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_427,
                    item_426,
                )?;
                object_427.finish();
            }
        }
        array_425.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.result_id {
        object.key("ResultId").string(var_428.as_str());
    }
    if let Some(var_429) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_429, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.result_id {
        object.key("ResultId").string(var_430.as_str());
    }
    if let Some(var_431) = &input.relevance_value {
        object.key("RelevanceValue").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.name {
        object.key("Name").string(var_432.as_str());
    }
    if let Some(var_433) = &input.r#type {
        object.key("Type").string(var_433.as_str());
    }
    if let Some(var_434) = &input.relevance {
        let mut object_435 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_435, var_434)?;
        object_435.finish();
    }
    if let Some(var_436) = &input.search {
        let mut object_437 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_437, var_436)?;
        object_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.key {
        object.key("Key").string(var_440.as_str());
    }
    if let Some(var_441) = &input.value {
        let mut object_442 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_442,
            var_441,
        )?;
        object_442.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.name {
        object.key("Name").string(var_443.as_str());
    }
    if let Some(var_444) = &input.r#type {
        object.key("Type").string(var_444.as_str());
    }
    if let Some(var_445) = &input.access {
        object.key("Access").string(var_445.as_str());
    }
    if let Some(var_446) = &input.data_source_id {
        object.key("DataSourceId").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.principal_list {
        let mut array_448 = object.key("PrincipalList").start_array();
        for item_449 in var_447 {
            {
                let mut object_450 = array_448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_450,
                    item_449,
                )?;
                object_450.finish();
            }
        }
        array_448.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.condition {
        let mut object_452 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_452,
            var_451,
        )?;
        object_452.finish();
    }
    if let Some(var_453) = &input.target {
        let mut object_454 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.invocation_condition {
        let mut object_456 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    if let Some(var_457) = &input.lambda_arn {
        object.key("LambdaArn").string(var_457.as_str());
    }
    if let Some(var_458) = &input.s3_bucket {
        object.key("S3Bucket").string(var_458.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_459) = &input.bucket_name {
        object.key("BucketName").string(var_459.as_str());
    }
    if let Some(var_460) = &input.inclusion_prefixes {
        let mut array_461 = object.key("InclusionPrefixes").start_array();
        for item_462 in var_460 {
            {
                array_461.value().string(item_462.as_str());
            }
        }
        array_461.finish();
    }
    if let Some(var_463) = &input.inclusion_patterns {
        let mut array_464 = object.key("InclusionPatterns").start_array();
        for item_465 in var_463 {
            {
                array_464.value().string(item_465.as_str());
            }
        }
        array_464.finish();
    }
    if let Some(var_466) = &input.exclusion_patterns {
        let mut array_467 = object.key("ExclusionPatterns").start_array();
        for item_468 in var_466 {
            {
                array_467.value().string(item_468.as_str());
            }
        }
        array_467.finish();
    }
    if let Some(var_469) = &input.documents_metadata_configuration {
        let mut object_470 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_470,
            var_469,
        )?;
        object_470.finish();
    }
    if let Some(var_471) = &input.access_control_list_configuration {
        let mut object_472 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.share_point_version {
        object.key("SharePointVersion").string(var_473.as_str());
    }
    if let Some(var_474) = &input.urls {
        let mut array_475 = object.key("Urls").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
    if let Some(var_477) = &input.secret_arn {
        object.key("SecretArn").string(var_477.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_478) = &input.inclusion_patterns {
        let mut array_479 = object.key("InclusionPatterns").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480.as_str());
            }
        }
        array_479.finish();
    }
    if let Some(var_481) = &input.exclusion_patterns {
        let mut array_482 = object.key("ExclusionPatterns").start_array();
        for item_483 in var_481 {
            {
                array_482.value().string(item_483.as_str());
            }
        }
        array_482.finish();
    }
    if let Some(var_484) = &input.vpc_configuration {
        let mut object_485 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_485,
            var_484,
        )?;
        object_485.finish();
    }
    if let Some(var_486) = &input.field_mappings {
        let mut array_487 = object.key("FieldMappings").start_array();
        for item_488 in var_486 {
            {
                let mut object_489 = array_487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_489, item_488)?;
                object_489.finish();
            }
        }
        array_487.finish();
    }
    if let Some(var_490) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_490.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_491) = &input.ssl_certificate_s3_path {
        let mut object_492 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_492, var_491)?;
        object_492.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_493.as_str());
    }
    if let Some(var_494) = &input.connection_configuration {
        let mut object_495 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_495,
            var_494,
        )?;
        object_495.finish();
    }
    if let Some(var_496) = &input.vpc_configuration {
        let mut object_497 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_497,
            var_496,
        )?;
        object_497.finish();
    }
    if let Some(var_498) = &input.column_configuration {
        let mut object_499 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_499,
            var_498,
        )?;
        object_499.finish();
    }
    if let Some(var_500) = &input.acl_configuration {
        let mut object_501 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_501,
            var_500,
        )?;
        object_501.finish();
    }
    if let Some(var_502) = &input.sql_configuration {
        let mut object_503 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_503,
            var_502,
        )?;
        object_503.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.server_url {
        object.key("ServerUrl").string(var_504.as_str());
    }
    if let Some(var_505) = &input.secret_arn {
        object.key("SecretArn").string(var_505.as_str());
    }
    if let Some(var_506) = &input.standard_object_configurations {
        let mut array_507 = object.key("StandardObjectConfigurations").start_array();
        for item_508 in var_506 {
            {
                let mut object_509 = array_507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_509, item_508)?;
                object_509.finish();
            }
        }
        array_507.finish();
    }
    if let Some(var_510) = &input.knowledge_article_configuration {
        let mut object_511 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_511, var_510)?;
        object_511.finish();
    }
    if let Some(var_512) = &input.chatter_feed_configuration {
        let mut object_513 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_514) = &input.standard_object_attachment_configuration {
        let mut object_515 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_515, var_514)?;
        object_515.finish();
    }
    if let Some(var_516) = &input.include_attachment_file_patterns {
        let mut array_517 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_518 in var_516 {
            {
                array_517.value().string(item_518.as_str());
            }
        }
        array_517.finish();
    }
    if let Some(var_519) = &input.exclude_attachment_file_patterns {
        let mut array_520 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_521 in var_519 {
            {
                array_520.value().string(item_521.as_str());
            }
        }
        array_520.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.tenant_domain {
        object.key("TenantDomain").string(var_522.as_str());
    }
    if let Some(var_523) = &input.secret_arn {
        object.key("SecretArn").string(var_523.as_str());
    }
    if let Some(var_524) = &input.one_drive_users {
        let mut object_525 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.inclusion_patterns {
        let mut array_527 = object.key("InclusionPatterns").start_array();
        for item_528 in var_526 {
            {
                array_527.value().string(item_528.as_str());
            }
        }
        array_527.finish();
    }
    if let Some(var_529) = &input.exclusion_patterns {
        let mut array_530 = object.key("ExclusionPatterns").start_array();
        for item_531 in var_529 {
            {
                array_530.value().string(item_531.as_str());
            }
        }
        array_530.finish();
    }
    if let Some(var_532) = &input.field_mappings {
        let mut array_533 = object.key("FieldMappings").start_array();
        for item_534 in var_532 {
            {
                let mut object_535 = array_533.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_535, item_534)?;
                object_535.finish();
            }
        }
        array_533.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.host_url {
        object.key("HostUrl").string(var_536.as_str());
    }
    if let Some(var_537) = &input.secret_arn {
        object.key("SecretArn").string(var_537.as_str());
    }
    if let Some(var_538) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_538.as_str());
    }
    if let Some(var_539) = &input.knowledge_article_configuration {
        let mut object_540 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_540, var_539)?;
        object_540.finish();
    }
    if let Some(var_541) = &input.service_catalog_configuration {
        let mut object_542 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_542,
            var_541,
        )?;
        object_542.finish();
    }
    if let Some(var_543) = &input.authentication_type {
        object.key("AuthenticationType").string(var_543.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_544) = &input.server_url {
        object.key("ServerUrl").string(var_544.as_str());
    }
    if let Some(var_545) = &input.secret_arn {
        object.key("SecretArn").string(var_545.as_str());
    }
    if let Some(var_546) = &input.version {
        object.key("Version").string(var_546.as_str());
    }
    if let Some(var_547) = &input.space_configuration {
        let mut object_548 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_548,
            var_547,
        )?;
        object_548.finish();
    }
    if let Some(var_549) = &input.page_configuration {
        let mut object_550 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_550,
            var_549,
        )?;
        object_550.finish();
    }
    if let Some(var_551) = &input.blog_configuration {
        let mut object_552 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_552,
            var_551,
        )?;
        object_552.finish();
    }
    if let Some(var_553) = &input.attachment_configuration {
        let mut object_554 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_554,
            var_553,
        )?;
        object_554.finish();
    }
    if let Some(var_555) = &input.vpc_configuration {
        let mut object_556 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.inclusion_patterns {
        let mut array_558 = object.key("InclusionPatterns").start_array();
        for item_559 in var_557 {
            {
                array_558.value().string(item_559.as_str());
            }
        }
        array_558.finish();
    }
    if let Some(var_560) = &input.exclusion_patterns {
        let mut array_561 = object.key("ExclusionPatterns").start_array();
        for item_562 in var_560 {
            {
                array_561.value().string(item_562.as_str());
            }
        }
        array_561.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.secret_arn {
        object.key("SecretArn").string(var_563.as_str());
    }
    if let Some(var_564) = &input.inclusion_patterns {
        let mut array_565 = object.key("InclusionPatterns").start_array();
        for item_566 in var_564 {
            {
                array_565.value().string(item_566.as_str());
            }
        }
        array_565.finish();
    }
    if let Some(var_567) = &input.exclusion_patterns {
        let mut array_568 = object.key("ExclusionPatterns").start_array();
        for item_569 in var_567 {
            {
                array_568.value().string(item_569.as_str());
            }
        }
        array_568.finish();
    }
    if let Some(var_570) = &input.field_mappings {
        let mut array_571 = object.key("FieldMappings").start_array();
        for item_572 in var_570 {
            {
                let mut object_573 = array_571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_573, item_572)?;
                object_573.finish();
            }
        }
        array_571.finish();
    }
    if let Some(var_574) = &input.exclude_mime_types {
        let mut array_575 = object.key("ExcludeMimeTypes").start_array();
        for item_576 in var_574 {
            {
                array_575.value().string(item_576.as_str());
            }
        }
        array_575.finish();
    }
    if let Some(var_577) = &input.exclude_user_accounts {
        let mut array_578 = object.key("ExcludeUserAccounts").start_array();
        for item_579 in var_577 {
            {
                array_578.value().string(item_579.as_str());
            }
        }
        array_578.finish();
    }
    if let Some(var_580) = &input.exclude_shared_drives {
        let mut array_581 = object.key("ExcludeSharedDrives").start_array();
        for item_582 in var_580 {
            {
                array_581.value().string(item_582.as_str());
            }
        }
        array_581.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_583) = &input.urls {
        let mut object_584 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_584, var_583)?;
        object_584.finish();
    }
    if let Some(var_585) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    if let Some(var_586) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_586).into()),
        );
    }
    if let Some(var_587) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_587).into()),
        );
    }
    if let Some(var_588) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_588).into()),
        );
    }
    if let Some(var_589) = &input.url_inclusion_patterns {
        let mut array_590 = object.key("UrlInclusionPatterns").start_array();
        for item_591 in var_589 {
            {
                array_590.value().string(item_591.as_str());
            }
        }
        array_590.finish();
    }
    if let Some(var_592) = &input.url_exclusion_patterns {
        let mut array_593 = object.key("UrlExclusionPatterns").start_array();
        for item_594 in var_592 {
            {
                array_593.value().string(item_594.as_str());
            }
        }
        array_593.finish();
    }
    if let Some(var_595) = &input.proxy_configuration {
        let mut object_596 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_596,
            var_595,
        )?;
        object_596.finish();
    }
    if let Some(var_597) = &input.authentication_configuration {
        let mut object_598 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_598,
            var_597,
        )?;
        object_598.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_599) = &input.organization_id {
        object.key("OrganizationId").string(var_599.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_600) = &input.inclusion_patterns {
        let mut array_601 = object.key("InclusionPatterns").start_array();
        for item_602 in var_600 {
            {
                array_601.value().string(item_602.as_str());
            }
        }
        array_601.finish();
    }
    if let Some(var_603) = &input.exclusion_patterns {
        let mut array_604 = object.key("ExclusionPatterns").start_array();
        for item_605 in var_603 {
            {
                array_604.value().string(item_605.as_str());
            }
        }
        array_604.finish();
    }
    if let Some(var_606) = &input.field_mappings {
        let mut array_607 = object.key("FieldMappings").start_array();
        for item_608 in var_606 {
            {
                let mut object_609 = array_607.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_609, item_608)?;
                object_609.finish();
            }
        }
        array_607.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_610) = &input.file_system_id {
        object.key("FileSystemId").string(var_610.as_str());
    }
    if let Some(var_611) = &input.file_system_type {
        object.key("FileSystemType").string(var_611.as_str());
    }
    if let Some(var_612) = &input.vpc_configuration {
        let mut object_613 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_613,
            var_612,
        )?;
        object_613.finish();
    }
    if let Some(var_614) = &input.secret_arn {
        object.key("SecretArn").string(var_614.as_str());
    }
    if let Some(var_615) = &input.inclusion_patterns {
        let mut array_616 = object.key("InclusionPatterns").start_array();
        for item_617 in var_615 {
            {
                array_616.value().string(item_617.as_str());
            }
        }
        array_616.finish();
    }
    if let Some(var_618) = &input.exclusion_patterns {
        let mut array_619 = object.key("ExclusionPatterns").start_array();
        for item_620 in var_618 {
            {
                array_619.value().string(item_620.as_str());
            }
        }
        array_619.finish();
    }
    if let Some(var_621) = &input.field_mappings {
        let mut array_622 = object.key("FieldMappings").start_array();
        for item_623 in var_621 {
            {
                let mut object_624 = array_622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_624, item_623)?;
                object_624.finish();
            }
        }
        array_622.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_625) = &input.data_source_ids {
        let mut array_626 = object.key("DataSourceIds").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627.as_str());
            }
        }
        array_626.finish();
    }
    if let Some(var_628) = &input.faq_ids {
        let mut array_629 = object.key("FaqIds").start_array();
        for item_630 in var_628 {
            {
                array_629.value().string(item_630.as_str());
            }
        }
        array_629.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_631) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.key_location {
        object.key("KeyLocation").string(var_632.as_str());
    }
    if let Some(var_633) = &input.url {
        object.key("URL").string(var_633.as_str());
    }
    if let Some(var_634) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_634.as_str());
    }
    if let Some(var_635) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_635.as_str());
    }
    if let Some(var_636) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_636.as_str());
    }
    if let Some(var_637) = &input.issuer {
        object.key("Issuer").string(var_637.as_str());
    }
    if let Some(var_638) = &input.claim_regex {
        object.key("ClaimRegex").string(var_638.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_639.as_str());
    }
    if let Some(var_640) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.group_id {
        object.key("GroupId").string(var_641.as_str());
    }
    if let Some(var_642) = &input.data_source_id {
        object.key("DataSourceId").string(var_642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_643) = &input.user_id {
        object.key("UserId").string(var_643.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_644) = &input.freshness {
        object.key("Freshness").boolean(*var_644);
    }
    if let Some(var_645) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_645).into()),
        );
    }
    if let Some(var_646) = &input.duration {
        object.key("Duration").string(var_646.as_str());
    }
    if let Some(var_647) = &input.rank_order {
        object.key("RankOrder").string(var_647.as_str());
    }
    if let Some(var_648) = &input.value_importance_map {
        let mut object_649 = object.key("ValueImportanceMap").start_object();
        for (key_650, value_651) in var_648 {
            {
                object_649.key(key_650).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_651).into()),
                );
            }
        }
        object_649.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_652) = &input.group_id {
        object.key("GroupId").string(var_652.as_str());
    }
    if let Some(var_653) = &input.data_source_id {
        object.key("DataSourceId").string(var_653.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.string_value {
        object.key("StringValue").string(var_654.as_str());
    }
    if let Some(var_655) = &input.string_list_value {
        let mut array_656 = object.key("StringListValue").start_array();
        for item_657 in var_655 {
            {
                array_656.value().string(item_657.as_str());
            }
        }
        array_656.finish();
    }
    if let Some(var_658) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_658).into()),
        );
    }
    if let Some(var_659) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_659, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_660.as_str());
    }
    if let Some(var_661) = &input.operator {
        object.key("Operator").string(var_661.as_str());
    }
    if let Some(var_662) = &input.condition_on_value {
        let mut object_663 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_663,
            var_662,
        )?;
        object_663.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_664) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_664.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_665) = &input.target_document_attribute_value {
        let mut object_666 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_666,
            var_665,
        )?;
        object_666.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.s3_prefix {
        object.key("S3Prefix").string(var_667.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.key_path {
        object.key("KeyPath").string(var_668.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.subnet_ids {
        let mut array_670 = object.key("SubnetIds").start_array();
        for item_671 in var_669 {
            {
                array_670.value().string(item_671.as_str());
            }
        }
        array_670.finish();
    }
    if let Some(var_672) = &input.security_group_ids {
        let mut array_673 = object.key("SecurityGroupIds").start_array();
        for item_674 in var_672 {
            {
                array_673.value().string(item_674.as_str());
            }
        }
        array_673.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_675.as_str());
    }
    if let Some(var_676) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_676.as_str());
    }
    if let Some(var_677) = &input.index_field_name {
        object.key("IndexFieldName").string(var_677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.database_host {
        object.key("DatabaseHost").string(var_678.as_str());
    }
    if let Some(var_679) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_679).into()),
        );
    }
    if let Some(var_680) = &input.database_name {
        object.key("DatabaseName").string(var_680.as_str());
    }
    if let Some(var_681) = &input.table_name {
        object.key("TableName").string(var_681.as_str());
    }
    if let Some(var_682) = &input.secret_arn {
        object.key("SecretArn").string(var_682.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_683) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_683.as_str());
    }
    if let Some(var_684) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_684.as_str());
    }
    if let Some(var_685) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_685.as_str());
    }
    if let Some(var_686) = &input.field_mappings {
        let mut array_687 = object.key("FieldMappings").start_array();
        for item_688 in var_686 {
            {
                let mut object_689 = array_687.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_689, item_688)?;
                object_689.finish();
            }
        }
        array_687.finish();
    }
    if let Some(var_690) = &input.change_detecting_columns {
        let mut array_691 = object.key("ChangeDetectingColumns").start_array();
        for item_692 in var_690 {
            {
                array_691.value().string(item_692.as_str());
            }
        }
        array_691.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_693.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_694) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_694.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.name {
        object.key("Name").string(var_695.as_str());
    }
    if let Some(var_696) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_696.as_str());
    }
    if let Some(var_697) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_697.as_str());
    }
    if let Some(var_698) = &input.field_mappings {
        let mut array_699 = object.key("FieldMappings").start_array();
        for item_700 in var_698 {
            {
                let mut object_701 = array_699.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_701, item_700)?;
                object_701.finish();
            }
        }
        array_699.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.included_states {
        let mut array_703 = object.key("IncludedStates").start_array();
        for item_704 in var_702 {
            {
                array_703.value().string(item_704.as_str());
            }
        }
        array_703.finish();
    }
    if let Some(var_705) = &input.standard_knowledge_article_type_configuration {
        let mut object_706 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_706, var_705)?;
        object_706.finish();
    }
    if let Some(var_707) = &input.custom_knowledge_article_type_configurations {
        let mut array_708 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_709 in var_707 {
            {
                let mut object_710 = array_708.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_710, item_709)?;
                object_710.finish();
            }
        }
        array_708.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_711.as_str());
    }
    if let Some(var_712) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_712.as_str());
    }
    if let Some(var_713) = &input.field_mappings {
        let mut array_714 = object.key("FieldMappings").start_array();
        for item_715 in var_713 {
            {
                let mut object_716 = array_714.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_716, item_715)?;
                object_716.finish();
            }
        }
        array_714.finish();
    }
    if let Some(var_717) = &input.include_filter_types {
        let mut array_718 = object.key("IncludeFilterTypes").start_array();
        for item_719 in var_717 {
            {
                array_718.value().string(item_719.as_str());
            }
        }
        array_718.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_720) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_720.as_str());
    }
    if let Some(var_721) = &input.field_mappings {
        let mut array_722 = object.key("FieldMappings").start_array();
        for item_723 in var_721 {
            {
                let mut object_724 = array_722.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_724, item_723)?;
                object_724.finish();
            }
        }
        array_722.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.one_drive_user_list {
        let mut array_726 = object.key("OneDriveUserList").start_array();
        for item_727 in var_725 {
            {
                array_726.value().string(item_727.as_str());
            }
        }
        array_726.finish();
    }
    if let Some(var_728) = &input.one_drive_user_s3_path {
        let mut object_729 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_729, var_728)?;
        object_729.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_730) = &input.include_attachment_file_patterns {
        let mut array_731 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_732 in var_730 {
            {
                array_731.value().string(item_732.as_str());
            }
        }
        array_731.finish();
    }
    if let Some(var_733) = &input.exclude_attachment_file_patterns {
        let mut array_734 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_735 in var_733 {
            {
                array_734.value().string(item_735.as_str());
            }
        }
        array_734.finish();
    }
    if let Some(var_736) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_736.as_str());
    }
    if let Some(var_737) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_737.as_str());
    }
    if let Some(var_738) = &input.field_mappings {
        let mut array_739 = object.key("FieldMappings").start_array();
        for item_740 in var_738 {
            {
                let mut object_741 = array_739.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_741, item_740)?;
                object_741.finish();
            }
        }
        array_739.finish();
    }
    if let Some(var_742) = &input.filter_query {
        object.key("FilterQuery").string(var_742.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_743) = &input.include_attachment_file_patterns {
        let mut array_744 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_745 in var_743 {
            {
                array_744.value().string(item_745.as_str());
            }
        }
        array_744.finish();
    }
    if let Some(var_746) = &input.exclude_attachment_file_patterns {
        let mut array_747 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_748 in var_746 {
            {
                array_747.value().string(item_748.as_str());
            }
        }
        array_747.finish();
    }
    if let Some(var_749) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_749.as_str());
    }
    if let Some(var_750) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_750.as_str());
    }
    if let Some(var_751) = &input.field_mappings {
        let mut array_752 = object.key("FieldMappings").start_array();
        for item_753 in var_751 {
            {
                let mut object_754 = array_752.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_754, item_753)?;
                object_754.finish();
            }
        }
        array_752.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_755) = &input.include_spaces {
        let mut array_756 = object.key("IncludeSpaces").start_array();
        for item_757 in var_755 {
            {
                array_756.value().string(item_757.as_str());
            }
        }
        array_756.finish();
    }
    if let Some(var_758) = &input.exclude_spaces {
        let mut array_759 = object.key("ExcludeSpaces").start_array();
        for item_760 in var_758 {
            {
                array_759.value().string(item_760.as_str());
            }
        }
        array_759.finish();
    }
    if let Some(var_761) = &input.space_field_mappings {
        let mut array_762 = object.key("SpaceFieldMappings").start_array();
        for item_763 in var_761 {
            {
                let mut object_764 = array_762.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_764, item_763)?;
                object_764.finish();
            }
        }
        array_762.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_765) = &input.page_field_mappings {
        let mut array_766 = object.key("PageFieldMappings").start_array();
        for item_767 in var_765 {
            {
                let mut object_768 = array_766.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_768, item_767)?;
                object_768.finish();
            }
        }
        array_766.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.blog_field_mappings {
        let mut array_770 = object.key("BlogFieldMappings").start_array();
        for item_771 in var_769 {
            {
                let mut object_772 = array_770.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_772, item_771)?;
                object_772.finish();
            }
        }
        array_770.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_773) = &input.attachment_field_mappings {
        let mut array_774 = object.key("AttachmentFieldMappings").start_array();
        for item_775 in var_773 {
            {
                let mut object_776 = array_774.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_776, item_775)?;
                object_776.finish();
            }
        }
        array_774.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_777) = &input.seed_url_configuration {
        let mut object_778 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_778,
            var_777,
        )?;
        object_778.finish();
    }
    if let Some(var_779) = &input.site_maps_configuration {
        let mut object_780 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_780,
            var_779,
        )?;
        object_780.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_781) = &input.host {
        object.key("Host").string(var_781.as_str());
    }
    if let Some(var_782) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_782).into()),
        );
    }
    if let Some(var_783) = &input.credentials {
        object.key("Credentials").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_784) = &input.basic_authentication {
        let mut array_785 = object.key("BasicAuthentication").start_array();
        for item_786 in var_784 {
            {
                let mut object_787 = array_785.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_787, item_786)?;
                object_787.finish();
            }
        }
        array_785.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_788) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_788.as_str());
    }
    if let Some(var_789) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_789.as_str());
    }
    if let Some(var_790) = &input.field_mappings {
        let mut array_791 = object.key("FieldMappings").start_array();
        for item_792 in var_790 {
            {
                let mut object_793 = array_791.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_793, item_792)?;
                object_793.finish();
            }
        }
        array_791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.name {
        object.key("Name").string(var_794.as_str());
    }
    if let Some(var_795) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_795.as_str());
    }
    if let Some(var_796) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_796.as_str());
    }
    if let Some(var_797) = &input.field_mappings {
        let mut array_798 = object.key("FieldMappings").start_array();
        for item_799 in var_797 {
            {
                let mut object_800 = array_798.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_800, item_799)?;
                object_800.finish();
            }
        }
        array_798.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_801) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_801.as_str());
    }
    if let Some(var_802) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_802.as_str());
    }
    if let Some(var_803) = &input.index_field_name {
        object.key("IndexFieldName").string(var_803.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_804) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_804.as_str());
    }
    if let Some(var_805) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_805.as_str());
    }
    if let Some(var_806) = &input.index_field_name {
        object.key("IndexFieldName").string(var_806.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_807.as_str());
    }
    if let Some(var_808) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_808.as_str());
    }
    if let Some(var_809) = &input.index_field_name {
        object.key("IndexFieldName").string(var_809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_810.as_str());
    }
    if let Some(var_811) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_811.as_str());
    }
    if let Some(var_812) = &input.index_field_name {
        object.key("IndexFieldName").string(var_812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_813) = &input.seed_urls {
        let mut array_814 = object.key("SeedUrls").start_array();
        for item_815 in var_813 {
            {
                array_814.value().string(item_815.as_str());
            }
        }
        array_814.finish();
    }
    if let Some(var_816) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_817) = &input.site_maps {
        let mut array_818 = object.key("SiteMaps").start_array();
        for item_819 in var_817 {
            {
                array_818.value().string(item_819.as_str());
            }
        }
        array_818.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_820) = &input.host {
        object.key("Host").string(var_820.as_str());
    }
    if let Some(var_821) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_821).into()),
        );
    }
    if let Some(var_822) = &input.credentials {
        object.key("Credentials").string(var_822.as_str());
    }
    Ok(())
}
