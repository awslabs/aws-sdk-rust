// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_delete_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) {
    if let Some(var_1) = &input.index_id {
        object.key("IndexId").string(var_1);
    }
    if let Some(var_2) = &input.document_id_list {
        let mut array_3 = object.key("DocumentIdList").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4);
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.data_source_sync_job_metric_target {
        let mut object_6 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_data_source_sync_job_metric_target(
            &mut object_6,
            var_5,
        );
        object_6.finish();
    }
}

pub fn serialize_structure_batch_get_document_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) {
    if let Some(var_7) = &input.index_id {
        object.key("IndexId").string(var_7);
    }
    if let Some(var_8) = &input.document_info_list {
        let mut array_9 = object.key("DocumentInfoList").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_document_info(&mut object_11, item_10);
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_batch_put_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) {
    if let Some(var_12) = &input.index_id {
        object.key("IndexId").string(var_12);
    }
    if let Some(var_13) = &input.role_arn {
        object.key("RoleArn").string(var_13);
    }
    if let Some(var_14) = &input.documents {
        let mut array_15 = object.key("Documents").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_document(&mut object_17, item_16);
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_clear_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) {
    if let Some(var_18) = &input.index_id {
        object.key("IndexId").string(var_18);
    }
}

pub fn serialize_structure_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.index_id {
        object.key("IndexId").string(var_20);
    }
    if let Some(var_21) = &input.r#type {
        object.key("Type").string(var_21.as_str());
    }
    if let Some(var_22) = &input.configuration {
        let mut object_23 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_data_source_configuration(&mut object_23, var_22);
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("Description").string(var_24);
    }
    if let Some(var_25) = &input.schedule {
        object.key("Schedule").string(var_25);
    }
    if let Some(var_26) = &input.role_arn {
        object.key("RoleArn").string(var_26);
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_30, item_29);
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.client_token {
        object.key("ClientToken").string(var_31);
    }
}

pub fn serialize_structure_create_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32);
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33);
    }
    if let Some(var_34) = &input.description {
        object.key("Description").string(var_34);
    }
    if let Some(var_35) = &input.s3_path {
        let mut object_36 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_36, var_35);
        object_36.finish();
    }
    if let Some(var_37) = &input.role_arn {
        object.key("RoleArn").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.file_format {
        object.key("FileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.client_token {
        object.key("ClientToken").string(var_43);
    }
}

pub fn serialize_structure_create_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) {
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
    if let Some(var_45) = &input.edition {
        object.key("Edition").string(var_45.as_str());
    }
    if let Some(var_46) = &input.role_arn {
        object.key("RoleArn").string(var_46);
    }
    if let Some(var_47) = &input.server_side_encryption_configuration {
        let mut object_48 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_server_side_encryption_configuration(
            &mut object_48,
            var_47,
        );
        object_48.finish();
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49);
    }
    if let Some(var_50) = &input.client_token {
        object.key("ClientToken").string(var_50);
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_54, item_53);
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.user_token_configurations {
        let mut array_56 = object.key("UserTokenConfigurations").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_user_token_configuration(
                    &mut object_58,
                    item_57,
                );
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_59.as_str());
    }
}

pub fn serialize_structure_create_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) {
    if let Some(var_60) = &input.index_id {
        object.key("IndexId").string(var_60);
    }
    if let Some(var_61) = &input.name {
        object.key("Name").string(var_61);
    }
    if let Some(var_62) = &input.description {
        object.key("Description").string(var_62);
    }
    if let Some(var_63) = &input.source_s3_path {
        let mut object_64 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.client_token {
        object.key("ClientToken").string(var_65);
    }
    if let Some(var_66) = &input.role_arn {
        object.key("RoleArn").string(var_66);
    }
    if let Some(var_67) = &input.tags {
        let mut array_68 = object.key("Tags").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_70, item_69);
                object_70.finish();
            }
        }
        array_68.finish();
    }
}

pub fn serialize_structure_create_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) {
    if let Some(var_71) = &input.index_id {
        object.key("IndexId").string(var_71);
    }
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72);
    }
    if let Some(var_73) = &input.description {
        object.key("Description").string(var_73);
    }
    if let Some(var_74) = &input.role_arn {
        object.key("RoleArn").string(var_74);
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("Tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_78, item_77);
                object_78.finish();
            }
        }
        array_76.finish();
    }
    if let Some(var_79) = &input.source_s3_path {
        let mut object_80 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_80, var_79);
        object_80.finish();
    }
    if let Some(var_81) = &input.client_token {
        object.key("ClientToken").string(var_81);
    }
}

pub fn serialize_structure_delete_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) {
    if let Some(var_82) = &input.id {
        object.key("Id").string(var_82);
    }
    if let Some(var_83) = &input.index_id {
        object.key("IndexId").string(var_83);
    }
}

pub fn serialize_structure_delete_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) {
    if let Some(var_84) = &input.id {
        object.key("Id").string(var_84);
    }
    if let Some(var_85) = &input.index_id {
        object.key("IndexId").string(var_85);
    }
}

pub fn serialize_structure_delete_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) {
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
}

pub fn serialize_structure_delete_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87);
    }
    if let Some(var_88) = &input.id {
        object.key("Id").string(var_88);
    }
}

pub fn serialize_structure_delete_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) {
    if let Some(var_89) = &input.id {
        object.key("Id").string(var_89);
    }
    if let Some(var_90) = &input.index_id {
        object.key("IndexId").string(var_90);
    }
}

pub fn serialize_structure_describe_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) {
    if let Some(var_91) = &input.id {
        object.key("Id").string(var_91);
    }
    if let Some(var_92) = &input.index_id {
        object.key("IndexId").string(var_92);
    }
}

pub fn serialize_structure_describe_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) {
    if let Some(var_93) = &input.id {
        object.key("Id").string(var_93);
    }
    if let Some(var_94) = &input.index_id {
        object.key("IndexId").string(var_94);
    }
}

pub fn serialize_structure_describe_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) {
    if let Some(var_95) = &input.id {
        object.key("Id").string(var_95);
    }
}

pub fn serialize_structure_describe_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) {
    if let Some(var_96) = &input.index_id {
        object.key("IndexId").string(var_96);
    }
    if let Some(var_97) = &input.id {
        object.key("Id").string(var_97);
    }
}

pub fn serialize_structure_describe_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) {
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98);
    }
}

pub fn serialize_structure_describe_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) {
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99);
    }
    if let Some(var_100) = &input.index_id {
        object.key("IndexId").string(var_100);
    }
}

pub fn serialize_structure_get_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) {
    if let Some(var_101) = &input.index_id {
        object.key("IndexId").string(var_101);
    }
    if let Some(var_102) = &input.query_text {
        object.key("QueryText").string(var_102);
    }
    if let Some(var_103) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_103).into()),
        );
    }
}

pub fn serialize_structure_list_data_sources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) {
    if let Some(var_104) = &input.index_id {
        object.key("IndexId").string(var_104);
    }
    if let Some(var_105) = &input.next_token {
        object.key("NextToken").string(var_105);
    }
    if let Some(var_106) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_106).into()),
        );
    }
}

pub fn serialize_structure_list_data_source_sync_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) {
    if let Some(var_107) = &input.id {
        object.key("Id").string(var_107);
    }
    if let Some(var_108) = &input.index_id {
        object.key("IndexId").string(var_108);
    }
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109);
    }
    if let Some(var_110) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    if let Some(var_111) = &input.start_time_filter {
        let mut object_112 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_time_range(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.status_filter {
        object.key("StatusFilter").string(var_113.as_str());
    }
}

pub fn serialize_structure_list_faqs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) {
    if let Some(var_114) = &input.index_id {
        object.key("IndexId").string(var_114);
    }
    if let Some(var_115) = &input.next_token {
        object.key("NextToken").string(var_115);
    }
    if let Some(var_116) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_116).into()),
        );
    }
}

pub fn serialize_structure_list_indices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) {
    if let Some(var_117) = &input.next_token {
        object.key("NextToken").string(var_117);
    }
    if let Some(var_118) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_118).into()),
        );
    }
}

pub fn serialize_structure_list_query_suggestions_block_lists_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) {
    if let Some(var_119) = &input.index_id {
        object.key("IndexId").string(var_119);
    }
    if let Some(var_120) = &input.next_token {
        object.key("NextToken").string(var_120);
    }
    if let Some(var_121) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_122) = &input.resource_arn {
        object.key("ResourceARN").string(var_122);
    }
}

pub fn serialize_structure_list_thesauri_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) {
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123);
    }
    if let Some(var_124) = &input.next_token {
        object.key("NextToken").string(var_124);
    }
    if let Some(var_125) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_125).into()),
        );
    }
}

pub fn serialize_structure_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) {
    if let Some(var_126) = &input.index_id {
        object.key("IndexId").string(var_126);
    }
    if let Some(var_127) = &input.query_text {
        object.key("QueryText").string(var_127);
    }
    if let Some(var_128) = &input.attribute_filter {
        let mut object_129 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_attribute_filter(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.facets {
        let mut array_131 = object.key("Facets").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_facet(&mut object_133, item_132);
                object_133.finish();
            }
        }
        array_131.finish();
    }
    if let Some(var_134) = &input.requested_document_attributes {
        let mut array_135 = object.key("RequestedDocumentAttributes").start_array();
        for item_136 in var_134 {
            {
                array_135.value().string(item_136);
            }
        }
        array_135.finish();
    }
    if let Some(var_137) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_137.as_str());
    }
    if let Some(var_138) = &input.document_relevance_override_configurations {
        let mut array_139 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_document_relevance_configuration(
                    &mut object_141,
                    item_140,
                );
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    if let Some(var_143) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.sorting_configuration {
        let mut object_145 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_sorting_configuration(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.user_context {
        let mut object_147 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_user_context(&mut object_147, var_146);
        object_147.finish();
    }
    if let Some(var_148) = &input.visitor_id {
        object.key("VisitorId").string(var_148);
    }
}

pub fn serialize_structure_start_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) {
    if let Some(var_149) = &input.id {
        object.key("Id").string(var_149);
    }
    if let Some(var_150) = &input.index_id {
        object.key("IndexId").string(var_150);
    }
}

pub fn serialize_structure_stop_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) {
    if let Some(var_151) = &input.id {
        object.key("Id").string(var_151);
    }
    if let Some(var_152) = &input.index_id {
        object.key("IndexId").string(var_152);
    }
}

pub fn serialize_structure_submit_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) {
    if let Some(var_153) = &input.index_id {
        object.key("IndexId").string(var_153);
    }
    if let Some(var_154) = &input.query_id {
        object.key("QueryId").string(var_154);
    }
    if let Some(var_155) = &input.click_feedback_items {
        let mut array_156 = object.key("ClickFeedbackItems").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_click_feedback(&mut object_158, item_157);
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.relevance_feedback_items {
        let mut array_160 = object.key("RelevanceFeedbackItems").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_relevance_feedback(&mut object_162, item_161);
                object_162.finish();
            }
        }
        array_160.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_163) = &input.resource_arn {
        object.key("ResourceARN").string(var_163);
    }
    if let Some(var_164) = &input.tags {
        let mut array_165 = object.key("Tags").start_array();
        for item_166 in var_164 {
            {
                let mut object_167 = array_165.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_167, item_166);
                object_167.finish();
            }
        }
        array_165.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_168) = &input.resource_arn {
        object.key("ResourceARN").string(var_168);
    }
    if let Some(var_169) = &input.tag_keys {
        let mut array_170 = object.key("TagKeys").start_array();
        for item_171 in var_169 {
            {
                array_170.value().string(item_171);
            }
        }
        array_170.finish();
    }
}

pub fn serialize_structure_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_172) = &input.id {
        object.key("Id").string(var_172);
    }
    if let Some(var_173) = &input.name {
        object.key("Name").string(var_173);
    }
    if let Some(var_174) = &input.index_id {
        object.key("IndexId").string(var_174);
    }
    if let Some(var_175) = &input.configuration {
        let mut object_176 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_data_source_configuration(&mut object_176, var_175);
        object_176.finish();
    }
    if let Some(var_177) = &input.description {
        object.key("Description").string(var_177);
    }
    if let Some(var_178) = &input.schedule {
        object.key("Schedule").string(var_178);
    }
    if let Some(var_179) = &input.role_arn {
        object.key("RoleArn").string(var_179);
    }
}

pub fn serialize_structure_update_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) {
    if let Some(var_180) = &input.id {
        object.key("Id").string(var_180);
    }
    if let Some(var_181) = &input.name {
        object.key("Name").string(var_181);
    }
    if let Some(var_182) = &input.role_arn {
        object.key("RoleArn").string(var_182);
    }
    if let Some(var_183) = &input.description {
        object.key("Description").string(var_183);
    }
    if let Some(var_184) = &input.document_metadata_configuration_updates {
        let mut array_185 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_186 in var_184 {
            {
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_document_metadata_configuration(
                    &mut object_187,
                    item_186,
                );
                object_187.finish();
            }
        }
        array_185.finish();
    }
    if let Some(var_188) = &input.capacity_units {
        let mut object_189 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_capacity_units_configuration(&mut object_189, var_188);
        object_189.finish();
    }
    if let Some(var_190) = &input.user_token_configurations {
        let mut array_191 = object.key("UserTokenConfigurations").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_user_token_configuration(
                    &mut object_193,
                    item_192,
                );
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_194.as_str());
    }
}

pub fn serialize_structure_update_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) {
    if let Some(var_195) = &input.index_id {
        object.key("IndexId").string(var_195);
    }
    if let Some(var_196) = &input.id {
        object.key("Id").string(var_196);
    }
    if let Some(var_197) = &input.name {
        object.key("Name").string(var_197);
    }
    if let Some(var_198) = &input.description {
        object.key("Description").string(var_198);
    }
    if let Some(var_199) = &input.source_s3_path {
        let mut object_200 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_200, var_199);
        object_200.finish();
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201);
    }
}

pub fn serialize_structure_update_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202);
    }
    if let Some(var_203) = &input.mode {
        object.key("Mode").string(var_203.as_str());
    }
    if let Some(var_204) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_204).into()),
        );
    }
    if let Some(var_205) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_205);
    }
    if let Some(var_206) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_207).into()),
        );
    }
}

pub fn serialize_structure_update_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) {
    if let Some(var_208) = &input.id {
        object.key("Id").string(var_208);
    }
    if let Some(var_209) = &input.name {
        object.key("Name").string(var_209);
    }
    if let Some(var_210) = &input.index_id {
        object.key("IndexId").string(var_210);
    }
    if let Some(var_211) = &input.description {
        object.key("Description").string(var_211);
    }
    if let Some(var_212) = &input.role_arn {
        object.key("RoleArn").string(var_212);
    }
    if let Some(var_213) = &input.source_s3_path {
        let mut object_214 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_214, var_213);
        object_214.finish();
    }
}

pub fn serialize_structure_data_source_sync_job_metric_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) {
    if let Some(var_215) = &input.data_source_id {
        object.key("DataSourceId").string(var_215);
    }
    if let Some(var_216) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_216);
    }
}

pub fn serialize_structure_document_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) {
    if let Some(var_217) = &input.document_id {
        object.key("DocumentId").string(var_217);
    }
    if let Some(var_218) = &input.attributes {
        let mut array_219 = object.key("Attributes").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_document_attribute(&mut object_221, item_220);
                object_221.finish();
            }
        }
        array_219.finish();
    }
}

pub fn serialize_structure_document(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) {
    if let Some(var_222) = &input.id {
        object.key("Id").string(var_222);
    }
    if let Some(var_223) = &input.title {
        object.key("Title").string(var_223);
    }
    if let Some(var_224) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&smithy_types::base64::encode(var_224));
    }
    if let Some(var_225) = &input.s3_path {
        let mut object_226 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_226, var_225);
        object_226.finish();
    }
    if let Some(var_227) = &input.attributes {
        let mut array_228 = object.key("Attributes").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_document_attribute(&mut object_230, item_229);
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if let Some(var_231) = &input.access_control_list {
        let mut array_232 = object.key("AccessControlList").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_principal(&mut object_234, item_233);
                object_234.finish();
            }
        }
        array_232.finish();
    }
    if let Some(var_235) = &input.content_type {
        object.key("ContentType").string(var_235.as_str());
    }
}

pub fn serialize_structure_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) {
    if let Some(var_236) = &input.s3_configuration {
        let mut object_237 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_data_source_configuration(&mut object_237, var_236);
        object_237.finish();
    }
    if let Some(var_238) = &input.share_point_configuration {
        let mut object_239 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_share_point_configuration(&mut object_239, var_238);
        object_239.finish();
    }
    if let Some(var_240) = &input.database_configuration {
        let mut object_241 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_database_configuration(&mut object_241, var_240);
        object_241.finish();
    }
    if let Some(var_242) = &input.salesforce_configuration {
        let mut object_243 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_salesforce_configuration(&mut object_243, var_242);
        object_243.finish();
    }
    if let Some(var_244) = &input.one_drive_configuration {
        let mut object_245 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_one_drive_configuration(&mut object_245, var_244);
        object_245.finish();
    }
    if let Some(var_246) = &input.service_now_configuration {
        let mut object_247 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_service_now_configuration(&mut object_247, var_246);
        object_247.finish();
    }
    if let Some(var_248) = &input.confluence_configuration {
        let mut object_249 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_confluence_configuration(&mut object_249, var_248);
        object_249.finish();
    }
    if let Some(var_250) = &input.google_drive_configuration {
        let mut object_251 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_google_drive_configuration(&mut object_251, var_250);
        object_251.finish();
    }
    if let Some(var_252) = &input.web_crawler_configuration {
        let mut object_253 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_web_crawler_configuration(&mut object_253, var_252);
        object_253.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_254) = &input.key {
        object.key("Key").string(var_254);
    }
    if let Some(var_255) = &input.value {
        object.key("Value").string(var_255);
    }
}

pub fn serialize_structure_s3_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) {
    if let Some(var_256) = &input.bucket {
        object.key("Bucket").string(var_256);
    }
    if let Some(var_257) = &input.key {
        object.key("Key").string(var_257);
    }
}

pub fn serialize_structure_server_side_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) {
    if let Some(var_258) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_258);
    }
}

pub fn serialize_structure_user_token_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) {
    if let Some(var_259) = &input.jwt_token_type_configuration {
        let mut object_260 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_jwt_token_type_configuration(&mut object_260, var_259);
        object_260.finish();
    }
    if let Some(var_261) = &input.json_token_type_configuration {
        let mut object_262 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_json_token_type_configuration(
            &mut object_262,
            var_261,
        );
        object_262.finish();
    }
}

pub fn serialize_structure_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) {
    if let Some(var_263) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_263, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_264) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_264, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_attribute_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) {
    if let Some(var_265) = &input.and_all_filters {
        let mut array_266 = object.key("AndAllFilters").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_attribute_filter(&mut object_268, item_267);
                object_268.finish();
            }
        }
        array_266.finish();
    }
    if let Some(var_269) = &input.or_all_filters {
        let mut array_270 = object.key("OrAllFilters").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_attribute_filter(&mut object_272, item_271);
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.not_filter {
        let mut object_274 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_attribute_filter(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.equals_to {
        let mut object_276 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.contains_all {
        let mut object_278 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_278, var_277);
        object_278.finish();
    }
    if let Some(var_279) = &input.contains_any {
        let mut object_280 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_280, var_279);
        object_280.finish();
    }
    if let Some(var_281) = &input.greater_than {
        let mut object_282 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_282, var_281);
        object_282.finish();
    }
    if let Some(var_283) = &input.greater_than_or_equals {
        let mut object_284 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_284, var_283);
        object_284.finish();
    }
    if let Some(var_285) = &input.less_than {
        let mut object_286 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_286, var_285);
        object_286.finish();
    }
    if let Some(var_287) = &input.less_than_or_equals {
        let mut object_288 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_document_attribute(&mut object_288, var_287);
        object_288.finish();
    }
}

pub fn serialize_structure_facet(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) {
    if let Some(var_289) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_289);
    }
}

pub fn serialize_structure_document_relevance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) {
    if let Some(var_290) = &input.name {
        object.key("Name").string(var_290);
    }
    if let Some(var_291) = &input.relevance {
        let mut object_292 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_relevance(&mut object_292, var_291);
        object_292.finish();
    }
}

pub fn serialize_structure_sorting_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) {
    if let Some(var_293) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_293);
    }
    if let Some(var_294) = &input.sort_order {
        object.key("SortOrder").string(var_294.as_str());
    }
}

pub fn serialize_structure_user_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) {
    if let Some(var_295) = &input.token {
        object.key("Token").string(var_295);
    }
}

pub fn serialize_structure_click_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) {
    if let Some(var_296) = &input.result_id {
        object.key("ResultId").string(var_296);
    }
    if let Some(var_297) = &input.click_time {
        object
            .key("ClickTime")
            .instant(var_297, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_relevance_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) {
    if let Some(var_298) = &input.result_id {
        object.key("ResultId").string(var_298);
    }
    if let Some(var_299) = &input.relevance_value {
        object.key("RelevanceValue").string(var_299.as_str());
    }
}

pub fn serialize_structure_document_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) {
    if let Some(var_300) = &input.name {
        object.key("Name").string(var_300);
    }
    if let Some(var_301) = &input.r#type {
        object.key("Type").string(var_301.as_str());
    }
    if let Some(var_302) = &input.relevance {
        let mut object_303 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_relevance(&mut object_303, var_302);
        object_303.finish();
    }
    if let Some(var_304) = &input.search {
        let mut object_305 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_search(&mut object_305, var_304);
        object_305.finish();
    }
}

pub fn serialize_structure_capacity_units_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) {
    if let Some(var_306) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_306).into()),
        );
    }
    if let Some(var_307) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_307).into()),
        );
    }
}

pub fn serialize_structure_document_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) {
    if let Some(var_308) = &input.key {
        object.key("Key").string(var_308);
    }
    if let Some(var_309) = &input.value {
        let mut object_310 = object.key("Value").start_object();
        crate::json_ser::serialize_union_document_attribute_value(&mut object_310, var_309);
        object_310.finish();
    }
}

pub fn serialize_structure_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) {
    if let Some(var_311) = &input.name {
        object.key("Name").string(var_311);
    }
    if let Some(var_312) = &input.r#type {
        object.key("Type").string(var_312.as_str());
    }
    if let Some(var_313) = &input.access {
        object.key("Access").string(var_313.as_str());
    }
}

pub fn serialize_structure_s3_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) {
    if let Some(var_314) = &input.bucket_name {
        object.key("BucketName").string(var_314);
    }
    if let Some(var_315) = &input.inclusion_prefixes {
        let mut array_316 = object.key("InclusionPrefixes").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317);
            }
        }
        array_316.finish();
    }
    if let Some(var_318) = &input.inclusion_patterns {
        let mut array_319 = object.key("InclusionPatterns").start_array();
        for item_320 in var_318 {
            {
                array_319.value().string(item_320);
            }
        }
        array_319.finish();
    }
    if let Some(var_321) = &input.exclusion_patterns {
        let mut array_322 = object.key("ExclusionPatterns").start_array();
        for item_323 in var_321 {
            {
                array_322.value().string(item_323);
            }
        }
        array_322.finish();
    }
    if let Some(var_324) = &input.documents_metadata_configuration {
        let mut object_325 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_documents_metadata_configuration(
            &mut object_325,
            var_324,
        );
        object_325.finish();
    }
    if let Some(var_326) = &input.access_control_list_configuration {
        let mut object_327 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_access_control_list_configuration(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
}

pub fn serialize_structure_share_point_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) {
    if let Some(var_328) = &input.share_point_version {
        object.key("SharePointVersion").string(var_328.as_str());
    }
    if let Some(var_329) = &input.urls {
        let mut array_330 = object.key("Urls").start_array();
        for item_331 in var_329 {
            {
                array_330.value().string(item_331);
            }
        }
        array_330.finish();
    }
    if let Some(var_332) = &input.secret_arn {
        object.key("SecretArn").string(var_332);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_333) = &input.inclusion_patterns {
        let mut array_334 = object.key("InclusionPatterns").start_array();
        for item_335 in var_333 {
            {
                array_334.value().string(item_335);
            }
        }
        array_334.finish();
    }
    if let Some(var_336) = &input.exclusion_patterns {
        let mut array_337 = object.key("ExclusionPatterns").start_array();
        for item_338 in var_336 {
            {
                array_337.value().string(item_338);
            }
        }
        array_337.finish();
    }
    if let Some(var_339) = &input.vpc_configuration {
        let mut object_340 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_data_source_vpc_configuration(
            &mut object_340,
            var_339,
        );
        object_340.finish();
    }
    if let Some(var_341) = &input.field_mappings {
        let mut array_342 = object.key("FieldMappings").start_array();
        for item_343 in var_341 {
            {
                let mut object_344 = array_342.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_344,
                    item_343,
                );
                object_344.finish();
            }
        }
        array_342.finish();
    }
    if let Some(var_345) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_345);
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_346) = &input.ssl_certificate_s3_path {
        let mut object_347 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_347, var_346);
        object_347.finish();
    }
}

pub fn serialize_structure_database_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) {
    if let Some(var_348) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_348.as_str());
    }
    if let Some(var_349) = &input.connection_configuration {
        let mut object_350 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_connection_configuration(&mut object_350, var_349);
        object_350.finish();
    }
    if let Some(var_351) = &input.vpc_configuration {
        let mut object_352 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_data_source_vpc_configuration(
            &mut object_352,
            var_351,
        );
        object_352.finish();
    }
    if let Some(var_353) = &input.column_configuration {
        let mut object_354 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_column_configuration(&mut object_354, var_353);
        object_354.finish();
    }
    if let Some(var_355) = &input.acl_configuration {
        let mut object_356 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_acl_configuration(&mut object_356, var_355);
        object_356.finish();
    }
    if let Some(var_357) = &input.sql_configuration {
        let mut object_358 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_sql_configuration(&mut object_358, var_357);
        object_358.finish();
    }
}

pub fn serialize_structure_salesforce_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) {
    if let Some(var_359) = &input.server_url {
        object.key("ServerUrl").string(var_359);
    }
    if let Some(var_360) = &input.secret_arn {
        object.key("SecretArn").string(var_360);
    }
    if let Some(var_361) = &input.standard_object_configurations {
        let mut array_362 = object.key("StandardObjectConfigurations").start_array();
        for item_363 in var_361 {
            {
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_salesforce_standard_object_configuration(
                    &mut object_364,
                    item_363,
                );
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.knowledge_article_configuration {
        let mut object_366 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_salesforce_knowledge_article_configuration(
            &mut object_366,
            var_365,
        );
        object_366.finish();
    }
    if let Some(var_367) = &input.chatter_feed_configuration {
        let mut object_368 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_salesforce_chatter_feed_configuration(
            &mut object_368,
            var_367,
        );
        object_368.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_369) = &input.standard_object_attachment_configuration {
        let mut object_370 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_salesforce_standard_object_attachment_configuration(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
    if let Some(var_371) = &input.include_attachment_file_patterns {
        let mut array_372 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_373 in var_371 {
            {
                array_372.value().string(item_373);
            }
        }
        array_372.finish();
    }
    if let Some(var_374) = &input.exclude_attachment_file_patterns {
        let mut array_375 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_376 in var_374 {
            {
                array_375.value().string(item_376);
            }
        }
        array_375.finish();
    }
}

pub fn serialize_structure_one_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) {
    if let Some(var_377) = &input.tenant_domain {
        object.key("TenantDomain").string(var_377);
    }
    if let Some(var_378) = &input.secret_arn {
        object.key("SecretArn").string(var_378);
    }
    if let Some(var_379) = &input.one_drive_users {
        let mut object_380 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_one_drive_users(&mut object_380, var_379);
        object_380.finish();
    }
    if let Some(var_381) = &input.inclusion_patterns {
        let mut array_382 = object.key("InclusionPatterns").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383);
            }
        }
        array_382.finish();
    }
    if let Some(var_384) = &input.exclusion_patterns {
        let mut array_385 = object.key("ExclusionPatterns").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386);
            }
        }
        array_385.finish();
    }
    if let Some(var_387) = &input.field_mappings {
        let mut array_388 = object.key("FieldMappings").start_array();
        for item_389 in var_387 {
            {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_390,
                    item_389,
                );
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
}

pub fn serialize_structure_service_now_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) {
    if let Some(var_391) = &input.host_url {
        object.key("HostUrl").string(var_391);
    }
    if let Some(var_392) = &input.secret_arn {
        object.key("SecretArn").string(var_392);
    }
    if let Some(var_393) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_393.as_str());
    }
    if let Some(var_394) = &input.knowledge_article_configuration {
        let mut object_395 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_service_now_knowledge_article_configuration(
            &mut object_395,
            var_394,
        );
        object_395.finish();
    }
    if let Some(var_396) = &input.service_catalog_configuration {
        let mut object_397 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_service_now_service_catalog_configuration(
            &mut object_397,
            var_396,
        );
        object_397.finish();
    }
    if let Some(var_398) = &input.authentication_type {
        object.key("AuthenticationType").string(var_398.as_str());
    }
}

pub fn serialize_structure_confluence_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) {
    if let Some(var_399) = &input.server_url {
        object.key("ServerUrl").string(var_399);
    }
    if let Some(var_400) = &input.secret_arn {
        object.key("SecretArn").string(var_400);
    }
    if let Some(var_401) = &input.version {
        object.key("Version").string(var_401.as_str());
    }
    if let Some(var_402) = &input.space_configuration {
        let mut object_403 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_confluence_space_configuration(
            &mut object_403,
            var_402,
        );
        object_403.finish();
    }
    if let Some(var_404) = &input.page_configuration {
        let mut object_405 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_confluence_page_configuration(
            &mut object_405,
            var_404,
        );
        object_405.finish();
    }
    if let Some(var_406) = &input.blog_configuration {
        let mut object_407 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_confluence_blog_configuration(
            &mut object_407,
            var_406,
        );
        object_407.finish();
    }
    if let Some(var_408) = &input.attachment_configuration {
        let mut object_409 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_confluence_attachment_configuration(
            &mut object_409,
            var_408,
        );
        object_409.finish();
    }
    if let Some(var_410) = &input.vpc_configuration {
        let mut object_411 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_data_source_vpc_configuration(
            &mut object_411,
            var_410,
        );
        object_411.finish();
    }
    if let Some(var_412) = &input.inclusion_patterns {
        let mut array_413 = object.key("InclusionPatterns").start_array();
        for item_414 in var_412 {
            {
                array_413.value().string(item_414);
            }
        }
        array_413.finish();
    }
    if let Some(var_415) = &input.exclusion_patterns {
        let mut array_416 = object.key("ExclusionPatterns").start_array();
        for item_417 in var_415 {
            {
                array_416.value().string(item_417);
            }
        }
        array_416.finish();
    }
}

pub fn serialize_structure_google_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) {
    if let Some(var_418) = &input.secret_arn {
        object.key("SecretArn").string(var_418);
    }
    if let Some(var_419) = &input.inclusion_patterns {
        let mut array_420 = object.key("InclusionPatterns").start_array();
        for item_421 in var_419 {
            {
                array_420.value().string(item_421);
            }
        }
        array_420.finish();
    }
    if let Some(var_422) = &input.exclusion_patterns {
        let mut array_423 = object.key("ExclusionPatterns").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
    if let Some(var_425) = &input.field_mappings {
        let mut array_426 = object.key("FieldMappings").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_428,
                    item_427,
                );
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.exclude_mime_types {
        let mut array_430 = object.key("ExcludeMimeTypes").start_array();
        for item_431 in var_429 {
            {
                array_430.value().string(item_431);
            }
        }
        array_430.finish();
    }
    if let Some(var_432) = &input.exclude_user_accounts {
        let mut array_433 = object.key("ExcludeUserAccounts").start_array();
        for item_434 in var_432 {
            {
                array_433.value().string(item_434);
            }
        }
        array_433.finish();
    }
    if let Some(var_435) = &input.exclude_shared_drives {
        let mut array_436 = object.key("ExcludeSharedDrives").start_array();
        for item_437 in var_435 {
            {
                array_436.value().string(item_437);
            }
        }
        array_436.finish();
    }
}

pub fn serialize_structure_web_crawler_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) {
    if let Some(var_438) = &input.urls {
        let mut object_439 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_urls(&mut object_439, var_438);
        object_439.finish();
    }
    if let Some(var_440) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    if let Some(var_441) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_441).into()),
        );
    }
    if let Some(var_442) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
    if let Some(var_444) = &input.url_inclusion_patterns {
        let mut array_445 = object.key("UrlInclusionPatterns").start_array();
        for item_446 in var_444 {
            {
                array_445.value().string(item_446);
            }
        }
        array_445.finish();
    }
    if let Some(var_447) = &input.url_exclusion_patterns {
        let mut array_448 = object.key("UrlExclusionPatterns").start_array();
        for item_449 in var_447 {
            {
                array_448.value().string(item_449);
            }
        }
        array_448.finish();
    }
    if let Some(var_450) = &input.proxy_configuration {
        let mut object_451 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_proxy_configuration(&mut object_451, var_450);
        object_451.finish();
    }
    if let Some(var_452) = &input.authentication_configuration {
        let mut object_453 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_authentication_configuration(&mut object_453, var_452);
        object_453.finish();
    }
}

pub fn serialize_structure_jwt_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) {
    if let Some(var_454) = &input.key_location {
        object.key("KeyLocation").string(var_454.as_str());
    }
    if let Some(var_455) = &input.url {
        object.key("URL").string(var_455);
    }
    if let Some(var_456) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_456);
    }
    if let Some(var_457) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_457);
    }
    if let Some(var_458) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_458);
    }
    if let Some(var_459) = &input.issuer {
        object.key("Issuer").string(var_459);
    }
    if let Some(var_460) = &input.claim_regex {
        object.key("ClaimRegex").string(var_460);
    }
}

pub fn serialize_structure_json_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) {
    if let Some(var_461) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_461);
    }
    if let Some(var_462) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_462);
    }
}

pub fn serialize_structure_relevance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) {
    if let Some(var_463) = &input.freshness {
        object.key("Freshness").boolean(*var_463);
    }
    if let Some(var_464) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.duration {
        object.key("Duration").string(var_465);
    }
    if let Some(var_466) = &input.rank_order {
        object.key("RankOrder").string(var_466.as_str());
    }
    if let Some(var_467) = &input.value_importance_map {
        let mut object_468 = object.key("ValueImportanceMap").start_object();
        for (key_469, value_470) in var_467 {
            {
                object_468.key(key_469).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*value_470).into()),
                );
            }
        }
        object_468.finish();
    }
}

pub fn serialize_structure_search(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
}

pub fn serialize_union_document_attribute_value(
    object_310: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) {
    match input {
        crate::model::DocumentAttributeValue::StringValue(inner) => {
            object_310.key("StringValue").string(inner);
        }
        crate::model::DocumentAttributeValue::StringListValue(inner) => {
            let mut array_471 = object_310.key("StringListValue").start_array();
            for item_472 in inner {
                {
                    array_471.value().string(item_472);
                }
            }
            array_471.finish();
        }
        crate::model::DocumentAttributeValue::LongValue(inner) => {
            object_310.key("LongValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::model::DocumentAttributeValue::DateValue(inner) => {
            object_310
                .key("DateValue")
                .instant(inner, smithy_types::instant::Format::EpochSeconds);
        }
    }
}

pub fn serialize_structure_documents_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) {
    if let Some(var_473) = &input.s3_prefix {
        object.key("S3Prefix").string(var_473);
    }
}

pub fn serialize_structure_access_control_list_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) {
    if let Some(var_474) = &input.key_path {
        object.key("KeyPath").string(var_474);
    }
}

pub fn serialize_structure_data_source_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) {
    if let Some(var_475) = &input.subnet_ids {
        let mut array_476 = object.key("SubnetIds").start_array();
        for item_477 in var_475 {
            {
                array_476.value().string(item_477);
            }
        }
        array_476.finish();
    }
    if let Some(var_478) = &input.security_group_ids {
        let mut array_479 = object.key("SecurityGroupIds").start_array();
        for item_480 in var_478 {
            {
                array_479.value().string(item_480);
            }
        }
        array_479.finish();
    }
}

pub fn serialize_structure_data_source_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) {
    if let Some(var_481) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_481);
    }
    if let Some(var_482) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_482);
    }
    if let Some(var_483) = &input.index_field_name {
        object.key("IndexFieldName").string(var_483);
    }
}

pub fn serialize_structure_connection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) {
    if let Some(var_484) = &input.database_host {
        object.key("DatabaseHost").string(var_484);
    }
    if let Some(var_485) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    if let Some(var_486) = &input.database_name {
        object.key("DatabaseName").string(var_486);
    }
    if let Some(var_487) = &input.table_name {
        object.key("TableName").string(var_487);
    }
    if let Some(var_488) = &input.secret_arn {
        object.key("SecretArn").string(var_488);
    }
}

pub fn serialize_structure_column_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) {
    if let Some(var_489) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_489);
    }
    if let Some(var_490) = &input.document_data_column_name {
        object.key("DocumentDataColumnName").string(var_490);
    }
    if let Some(var_491) = &input.document_title_column_name {
        object.key("DocumentTitleColumnName").string(var_491);
    }
    if let Some(var_492) = &input.field_mappings {
        let mut array_493 = object.key("FieldMappings").start_array();
        for item_494 in var_492 {
            {
                let mut object_495 = array_493.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_495,
                    item_494,
                );
                object_495.finish();
            }
        }
        array_493.finish();
    }
    if let Some(var_496) = &input.change_detecting_columns {
        let mut array_497 = object.key("ChangeDetectingColumns").start_array();
        for item_498 in var_496 {
            {
                array_497.value().string(item_498);
            }
        }
        array_497.finish();
    }
}

pub fn serialize_structure_acl_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) {
    if let Some(var_499) = &input.allowed_groups_column_name {
        object.key("AllowedGroupsColumnName").string(var_499);
    }
}

pub fn serialize_structure_sql_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) {
    if let Some(var_500) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_500.as_str());
    }
}

pub fn serialize_structure_salesforce_standard_object_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) {
    if let Some(var_501) = &input.name {
        object.key("Name").string(var_501.as_str());
    }
    if let Some(var_502) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_502);
    }
    if let Some(var_503) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_503);
    }
    if let Some(var_504) = &input.field_mappings {
        let mut array_505 = object.key("FieldMappings").start_array();
        for item_506 in var_504 {
            {
                let mut object_507 = array_505.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_507,
                    item_506,
                );
                object_507.finish();
            }
        }
        array_505.finish();
    }
}

pub fn serialize_structure_salesforce_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) {
    if let Some(var_508) = &input.included_states {
        let mut array_509 = object.key("IncludedStates").start_array();
        for item_510 in var_508 {
            {
                array_509.value().string(item_510.as_str());
            }
        }
        array_509.finish();
    }
    if let Some(var_511) = &input.standard_knowledge_article_type_configuration {
        let mut object_512 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_salesforce_standard_knowledge_article_type_configuration(&mut object_512, var_511);
        object_512.finish();
    }
    if let Some(var_513) = &input.custom_knowledge_article_type_configurations {
        let mut array_514 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_515 in var_513 {
            {
                let mut object_516 = array_514.value().start_object();
                crate::json_ser::serialize_structure_salesforce_custom_knowledge_article_type_configuration(&mut object_516, item_515);
                object_516.finish();
            }
        }
        array_514.finish();
    }
}

pub fn serialize_structure_salesforce_chatter_feed_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) {
    if let Some(var_517) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_517);
    }
    if let Some(var_518) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_518);
    }
    if let Some(var_519) = &input.field_mappings {
        let mut array_520 = object.key("FieldMappings").start_array();
        for item_521 in var_519 {
            {
                let mut object_522 = array_520.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_522,
                    item_521,
                );
                object_522.finish();
            }
        }
        array_520.finish();
    }
    if let Some(var_523) = &input.include_filter_types {
        let mut array_524 = object.key("IncludeFilterTypes").start_array();
        for item_525 in var_523 {
            {
                array_524.value().string(item_525.as_str());
            }
        }
        array_524.finish();
    }
}

pub fn serialize_structure_salesforce_standard_object_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) {
    if let Some(var_526) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_526);
    }
    if let Some(var_527) = &input.field_mappings {
        let mut array_528 = object.key("FieldMappings").start_array();
        for item_529 in var_527 {
            {
                let mut object_530 = array_528.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_530,
                    item_529,
                );
                object_530.finish();
            }
        }
        array_528.finish();
    }
}

pub fn serialize_structure_one_drive_users(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) {
    if let Some(var_531) = &input.one_drive_user_list {
        let mut array_532 = object.key("OneDriveUserList").start_array();
        for item_533 in var_531 {
            {
                array_532.value().string(item_533);
            }
        }
        array_532.finish();
    }
    if let Some(var_534) = &input.one_drive_user_s3_path {
        let mut object_535 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_s3_path(&mut object_535, var_534);
        object_535.finish();
    }
}

pub fn serialize_structure_service_now_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_536) = &input.include_attachment_file_patterns {
        let mut array_537 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_538 in var_536 {
            {
                array_537.value().string(item_538);
            }
        }
        array_537.finish();
    }
    if let Some(var_539) = &input.exclude_attachment_file_patterns {
        let mut array_540 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_541 in var_539 {
            {
                array_540.value().string(item_541);
            }
        }
        array_540.finish();
    }
    if let Some(var_542) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_542);
    }
    if let Some(var_543) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_543);
    }
    if let Some(var_544) = &input.field_mappings {
        let mut array_545 = object.key("FieldMappings").start_array();
        for item_546 in var_544 {
            {
                let mut object_547 = array_545.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_547,
                    item_546,
                );
                object_547.finish();
            }
        }
        array_545.finish();
    }
    if let Some(var_548) = &input.filter_query {
        object.key("FilterQuery").string(var_548);
    }
}

pub fn serialize_structure_service_now_service_catalog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_549) = &input.include_attachment_file_patterns {
        let mut array_550 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_551 in var_549 {
            {
                array_550.value().string(item_551);
            }
        }
        array_550.finish();
    }
    if let Some(var_552) = &input.exclude_attachment_file_patterns {
        let mut array_553 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_554 in var_552 {
            {
                array_553.value().string(item_554);
            }
        }
        array_553.finish();
    }
    if let Some(var_555) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_555);
    }
    if let Some(var_556) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_556);
    }
    if let Some(var_557) = &input.field_mappings {
        let mut array_558 = object.key("FieldMappings").start_array();
        for item_559 in var_557 {
            {
                let mut object_560 = array_558.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_560,
                    item_559,
                );
                object_560.finish();
            }
        }
        array_558.finish();
    }
}

pub fn serialize_structure_confluence_space_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_561) = &input.include_spaces {
        let mut array_562 = object.key("IncludeSpaces").start_array();
        for item_563 in var_561 {
            {
                array_562.value().string(item_563);
            }
        }
        array_562.finish();
    }
    if let Some(var_564) = &input.exclude_spaces {
        let mut array_565 = object.key("ExcludeSpaces").start_array();
        for item_566 in var_564 {
            {
                array_565.value().string(item_566);
            }
        }
        array_565.finish();
    }
    if let Some(var_567) = &input.space_field_mappings {
        let mut array_568 = object.key("SpaceFieldMappings").start_array();
        for item_569 in var_567 {
            {
                let mut object_570 = array_568.value().start_object();
                crate::json_ser::serialize_structure_confluence_space_to_index_field_mapping(
                    &mut object_570,
                    item_569,
                );
                object_570.finish();
            }
        }
        array_568.finish();
    }
}

pub fn serialize_structure_confluence_page_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) {
    if let Some(var_571) = &input.page_field_mappings {
        let mut array_572 = object.key("PageFieldMappings").start_array();
        for item_573 in var_571 {
            {
                let mut object_574 = array_572.value().start_object();
                crate::json_ser::serialize_structure_confluence_page_to_index_field_mapping(
                    &mut object_574,
                    item_573,
                );
                object_574.finish();
            }
        }
        array_572.finish();
    }
}

pub fn serialize_structure_confluence_blog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) {
    if let Some(var_575) = &input.blog_field_mappings {
        let mut array_576 = object.key("BlogFieldMappings").start_array();
        for item_577 in var_575 {
            {
                let mut object_578 = array_576.value().start_object();
                crate::json_ser::serialize_structure_confluence_blog_to_index_field_mapping(
                    &mut object_578,
                    item_577,
                );
                object_578.finish();
            }
        }
        array_576.finish();
    }
}

pub fn serialize_structure_confluence_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_579) = &input.attachment_field_mappings {
        let mut array_580 = object.key("AttachmentFieldMappings").start_array();
        for item_581 in var_579 {
            {
                let mut object_582 = array_580.value().start_object();
                crate::json_ser::serialize_structure_confluence_attachment_to_index_field_mapping(
                    &mut object_582,
                    item_581,
                );
                object_582.finish();
            }
        }
        array_580.finish();
    }
}

pub fn serialize_structure_urls(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) {
    if let Some(var_583) = &input.seed_url_configuration {
        let mut object_584 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_seed_url_configuration(&mut object_584, var_583);
        object_584.finish();
    }
    if let Some(var_585) = &input.site_maps_configuration {
        let mut object_586 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_site_maps_configuration(&mut object_586, var_585);
        object_586.finish();
    }
}

pub fn serialize_structure_proxy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) {
    if let Some(var_587) = &input.host {
        object.key("Host").string(var_587);
    }
    if let Some(var_588) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_588).into()),
        );
    }
    if let Some(var_589) = &input.credentials {
        object.key("Credentials").string(var_589);
    }
}

pub fn serialize_structure_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) {
    if let Some(var_590) = &input.basic_authentication {
        let mut array_591 = object.key("BasicAuthentication").start_array();
        for item_592 in var_590 {
            {
                let mut object_593 = array_591.value().start_object();
                crate::json_ser::serialize_structure_basic_authentication_configuration(
                    &mut object_593,
                    item_592,
                );
                object_593.finish();
            }
        }
        array_591.finish();
    }
}

pub fn serialize_structure_salesforce_standard_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_594) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_594);
    }
    if let Some(var_595) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_595);
    }
    if let Some(var_596) = &input.field_mappings {
        let mut array_597 = object.key("FieldMappings").start_array();
        for item_598 in var_596 {
            {
                let mut object_599 = array_597.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_599,
                    item_598,
                );
                object_599.finish();
            }
        }
        array_597.finish();
    }
}

pub fn serialize_structure_salesforce_custom_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_600) = &input.name {
        object.key("Name").string(var_600);
    }
    if let Some(var_601) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_601);
    }
    if let Some(var_602) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_602);
    }
    if let Some(var_603) = &input.field_mappings {
        let mut array_604 = object.key("FieldMappings").start_array();
        for item_605 in var_603 {
            {
                let mut object_606 = array_604.value().start_object();
                crate::json_ser::serialize_structure_data_source_to_index_field_mapping(
                    &mut object_606,
                    item_605,
                );
                object_606.finish();
            }
        }
        array_604.finish();
    }
}

pub fn serialize_structure_confluence_space_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) {
    if let Some(var_607) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_607.as_str());
    }
    if let Some(var_608) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_608);
    }
    if let Some(var_609) = &input.index_field_name {
        object.key("IndexFieldName").string(var_609);
    }
}

pub fn serialize_structure_confluence_page_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) {
    if let Some(var_610) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_610.as_str());
    }
    if let Some(var_611) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_611);
    }
    if let Some(var_612) = &input.index_field_name {
        object.key("IndexFieldName").string(var_612);
    }
}

pub fn serialize_structure_confluence_blog_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) {
    if let Some(var_613) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_613.as_str());
    }
    if let Some(var_614) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_614);
    }
    if let Some(var_615) = &input.index_field_name {
        object.key("IndexFieldName").string(var_615);
    }
}

pub fn serialize_structure_confluence_attachment_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) {
    if let Some(var_616) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_616.as_str());
    }
    if let Some(var_617) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_617);
    }
    if let Some(var_618) = &input.index_field_name {
        object.key("IndexFieldName").string(var_618);
    }
}

pub fn serialize_structure_seed_url_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) {
    if let Some(var_619) = &input.seed_urls {
        let mut array_620 = object.key("SeedUrls").start_array();
        for item_621 in var_619 {
            {
                array_620.value().string(item_621);
            }
        }
        array_620.finish();
    }
    if let Some(var_622) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_622.as_str());
    }
}

pub fn serialize_structure_site_maps_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) {
    if let Some(var_623) = &input.site_maps {
        let mut array_624 = object.key("SiteMaps").start_array();
        for item_625 in var_623 {
            {
                array_624.value().string(item_625);
            }
        }
        array_624.finish();
    }
}

pub fn serialize_structure_basic_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) {
    if let Some(var_626) = &input.host {
        object.key("Host").string(var_626);
    }
    if let Some(var_627) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_627).into()),
        );
    }
    if let Some(var_628) = &input.credentials {
        object.key("Credentials").string(var_628);
    }
}
