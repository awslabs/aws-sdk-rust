// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) {
    if let Some(var_1) = &input.index_id {
        object.key("IndexId").string(var_1);
    }
    if let Some(var_2) = &input.document_id_list {
        let mut array_3 = object.key("DocumentIdList").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4);
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.data_source_sync_job_metric_target {
        let mut object_6 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_6,
            var_5,
        );
        object_6.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) {
    if let Some(var_7) = &input.index_id {
        object.key("IndexId").string(var_7);
    }
    if let Some(var_8) = &input.document_info_list {
        let mut array_9 = object.key("DocumentInfoList").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_11,
                    item_10,
                );
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) {
    if let Some(var_12) = &input.index_id {
        object.key("IndexId").string(var_12);
    }
    if let Some(var_13) = &input.role_arn {
        object.key("RoleArn").string(var_13);
    }
    if let Some(var_14) = &input.documents {
        let mut array_15 = object.key("Documents").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_17, item_16);
                object_17.finish();
            }
        }
        array_15.finish();
    }
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) {
    if let Some(var_18) = &input.index_id {
        object.key("IndexId").string(var_18);
    }
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.index_id {
        object.key("IndexId").string(var_20);
    }
    if let Some(var_21) = &input.r#type {
        object.key("Type").string(var_21.as_str());
    }
    if let Some(var_22) = &input.configuration {
        let mut object_23 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_23,
            var_22,
        );
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("Description").string(var_24);
    }
    if let Some(var_25) = &input.schedule {
        object.key("Schedule").string(var_25);
    }
    if let Some(var_26) = &input.role_arn {
        object.key("RoleArn").string(var_26);
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29);
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.client_token {
        object.key("ClientToken").string(var_31);
    }
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32);
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33);
    }
    if let Some(var_34) = &input.description {
        object.key("Description").string(var_34);
    }
    if let Some(var_35) = &input.s3_path {
        let mut object_36 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_36, var_35);
        object_36.finish();
    }
    if let Some(var_37) = &input.role_arn {
        object.key("RoleArn").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.file_format {
        object.key("FileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.client_token {
        object.key("ClientToken").string(var_43);
    }
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) {
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
    if let Some(var_45) = &input.edition {
        object.key("Edition").string(var_45.as_str());
    }
    if let Some(var_46) = &input.role_arn {
        object.key("RoleArn").string(var_46);
    }
    if let Some(var_47) = &input.server_side_encryption_configuration {
        let mut object_48 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_48,
            var_47,
        );
        object_48.finish();
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49);
    }
    if let Some(var_50) = &input.client_token {
        object.key("ClientToken").string(var_50);
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53);
                object_54.finish();
            }
        }
        array_52.finish();
    }
    if let Some(var_55) = &input.user_token_configurations {
        let mut array_56 = object.key("UserTokenConfigurations").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_58,
                    item_57,
                );
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_59.as_str());
    }
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) {
    if let Some(var_60) = &input.index_id {
        object.key("IndexId").string(var_60);
    }
    if let Some(var_61) = &input.name {
        object.key("Name").string(var_61);
    }
    if let Some(var_62) = &input.description {
        object.key("Description").string(var_62);
    }
    if let Some(var_63) = &input.source_s3_path {
        let mut object_64 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.client_token {
        object.key("ClientToken").string(var_65);
    }
    if let Some(var_66) = &input.role_arn {
        object.key("RoleArn").string(var_66);
    }
    if let Some(var_67) = &input.tags {
        let mut array_68 = object.key("Tags").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_70, item_69);
                object_70.finish();
            }
        }
        array_68.finish();
    }
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) {
    if let Some(var_71) = &input.index_id {
        object.key("IndexId").string(var_71);
    }
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72);
    }
    if let Some(var_73) = &input.description {
        object.key("Description").string(var_73);
    }
    if let Some(var_74) = &input.role_arn {
        object.key("RoleArn").string(var_74);
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("Tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_78, item_77);
                object_78.finish();
            }
        }
        array_76.finish();
    }
    if let Some(var_79) = &input.source_s3_path {
        let mut object_80 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_80, var_79);
        object_80.finish();
    }
    if let Some(var_81) = &input.client_token {
        object.key("ClientToken").string(var_81);
    }
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) {
    if let Some(var_82) = &input.id {
        object.key("Id").string(var_82);
    }
    if let Some(var_83) = &input.index_id {
        object.key("IndexId").string(var_83);
    }
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) {
    if let Some(var_84) = &input.id {
        object.key("Id").string(var_84);
    }
    if let Some(var_85) = &input.index_id {
        object.key("IndexId").string(var_85);
    }
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) {
    if let Some(var_86) = &input.id {
        object.key("Id").string(var_86);
    }
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) {
    if let Some(var_87) = &input.index_id {
        object.key("IndexId").string(var_87);
    }
    if let Some(var_88) = &input.data_source_id {
        object.key("DataSourceId").string(var_88);
    }
    if let Some(var_89) = &input.group_id {
        object.key("GroupId").string(var_89);
    }
    if let Some(var_90) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) {
    if let Some(var_91) = &input.index_id {
        object.key("IndexId").string(var_91);
    }
    if let Some(var_92) = &input.id {
        object.key("Id").string(var_92);
    }
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) {
    if let Some(var_93) = &input.id {
        object.key("Id").string(var_93);
    }
    if let Some(var_94) = &input.index_id {
        object.key("IndexId").string(var_94);
    }
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) {
    if let Some(var_95) = &input.id {
        object.key("Id").string(var_95);
    }
    if let Some(var_96) = &input.index_id {
        object.key("IndexId").string(var_96);
    }
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) {
    if let Some(var_97) = &input.id {
        object.key("Id").string(var_97);
    }
    if let Some(var_98) = &input.index_id {
        object.key("IndexId").string(var_98);
    }
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) {
    if let Some(var_99) = &input.id {
        object.key("Id").string(var_99);
    }
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) {
    if let Some(var_100) = &input.index_id {
        object.key("IndexId").string(var_100);
    }
    if let Some(var_101) = &input.data_source_id {
        object.key("DataSourceId").string(var_101);
    }
    if let Some(var_102) = &input.group_id {
        object.key("GroupId").string(var_102);
    }
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) {
    if let Some(var_103) = &input.index_id {
        object.key("IndexId").string(var_103);
    }
    if let Some(var_104) = &input.id {
        object.key("Id").string(var_104);
    }
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) {
    if let Some(var_105) = &input.index_id {
        object.key("IndexId").string(var_105);
    }
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) {
    if let Some(var_106) = &input.id {
        object.key("Id").string(var_106);
    }
    if let Some(var_107) = &input.index_id {
        object.key("IndexId").string(var_107);
    }
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) {
    if let Some(var_108) = &input.index_id {
        object.key("IndexId").string(var_108);
    }
    if let Some(var_109) = &input.query_text {
        object.key("QueryText").string(var_109);
    }
    if let Some(var_110) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_110).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) {
    if let Some(var_111) = &input.index_id {
        object.key("IndexId").string(var_111);
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
    if let Some(var_113) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) {
    if let Some(var_114) = &input.id {
        object.key("Id").string(var_114);
    }
    if let Some(var_115) = &input.index_id {
        object.key("IndexId").string(var_115);
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116);
    }
    if let Some(var_117) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.start_time_filter {
        let mut object_119 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_119, var_118);
        object_119.finish();
    }
    if let Some(var_120) = &input.status_filter {
        object.key("StatusFilter").string(var_120.as_str());
    }
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) {
    if let Some(var_121) = &input.index_id {
        object.key("IndexId").string(var_121);
    }
    if let Some(var_122) = &input.next_token {
        object.key("NextToken").string(var_122);
    }
    if let Some(var_123) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_123).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) {
    if let Some(var_124) = &input.index_id {
        object.key("IndexId").string(var_124);
    }
    if let Some(var_125) = &input.data_source_id {
        object.key("DataSourceId").string(var_125);
    }
    if let Some(var_126) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_126).into()),
        );
    }
    if let Some(var_127) = &input.next_token {
        object.key("NextToken").string(var_127);
    }
    if let Some(var_128) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) {
    if let Some(var_129) = &input.next_token {
        object.key("NextToken").string(var_129);
    }
    if let Some(var_130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_130).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) {
    if let Some(var_131) = &input.index_id {
        object.key("IndexId").string(var_131);
    }
    if let Some(var_132) = &input.next_token {
        object.key("NextToken").string(var_132);
    }
    if let Some(var_133) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_133).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_134) = &input.resource_arn {
        object.key("ResourceARN").string(var_134);
    }
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) {
    if let Some(var_135) = &input.index_id {
        object.key("IndexId").string(var_135);
    }
    if let Some(var_136) = &input.next_token {
        object.key("NextToken").string(var_136);
    }
    if let Some(var_137) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_137).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) {
    if let Some(var_138) = &input.index_id {
        object.key("IndexId").string(var_138);
    }
    if let Some(var_139) = &input.data_source_id {
        object.key("DataSourceId").string(var_139);
    }
    if let Some(var_140) = &input.group_id {
        object.key("GroupId").string(var_140);
    }
    if let Some(var_141) = &input.group_members {
        let mut object_142 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_142, var_141);
        object_142.finish();
    }
    if let Some(var_143) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.role_arn {
        object.key("RoleArn").string(var_144);
    }
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) {
    if let Some(var_145) = &input.index_id {
        object.key("IndexId").string(var_145);
    }
    if let Some(var_146) = &input.query_text {
        object.key("QueryText").string(var_146);
    }
    if let Some(var_147) = &input.attribute_filter {
        let mut object_148 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(&mut object_148, var_147);
        object_148.finish();
    }
    if let Some(var_149) = &input.facets {
        let mut array_150 = object.key("Facets").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_152, item_151);
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.requested_document_attributes {
        let mut array_154 = object.key("RequestedDocumentAttributes").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155);
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_156.as_str());
    }
    if let Some(var_157) = &input.document_relevance_override_configurations {
        let mut array_158 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_160,
                    item_159,
                );
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    if let Some(var_163) = &input.sorting_configuration {
        let mut object_164 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_164,
            var_163,
        );
        object_164.finish();
    }
    if let Some(var_165) = &input.user_context {
        let mut object_166 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_166, var_165);
        object_166.finish();
    }
    if let Some(var_167) = &input.visitor_id {
        object.key("VisitorId").string(var_167);
    }
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) {
    if let Some(var_168) = &input.id {
        object.key("Id").string(var_168);
    }
    if let Some(var_169) = &input.index_id {
        object.key("IndexId").string(var_169);
    }
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) {
    if let Some(var_170) = &input.id {
        object.key("Id").string(var_170);
    }
    if let Some(var_171) = &input.index_id {
        object.key("IndexId").string(var_171);
    }
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) {
    if let Some(var_172) = &input.index_id {
        object.key("IndexId").string(var_172);
    }
    if let Some(var_173) = &input.query_id {
        object.key("QueryId").string(var_173);
    }
    if let Some(var_174) = &input.click_feedback_items {
        let mut array_175 = object.key("ClickFeedbackItems").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_177,
                    item_176,
                );
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.relevance_feedback_items {
        let mut array_179 = object.key("RelevanceFeedbackItems").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_181,
                    item_180,
                );
                object_181.finish();
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_182) = &input.resource_arn {
        object.key("ResourceARN").string(var_182);
    }
    if let Some(var_183) = &input.tags {
        let mut array_184 = object.key("Tags").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_187) = &input.resource_arn {
        object.key("ResourceARN").string(var_187);
    }
    if let Some(var_188) = &input.tag_keys {
        let mut array_189 = object.key("TagKeys").start_array();
        for item_190 in var_188 {
            {
                array_189.value().string(item_190);
            }
        }
        array_189.finish();
    }
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_191) = &input.id {
        object.key("Id").string(var_191);
    }
    if let Some(var_192) = &input.name {
        object.key("Name").string(var_192);
    }
    if let Some(var_193) = &input.index_id {
        object.key("IndexId").string(var_193);
    }
    if let Some(var_194) = &input.configuration {
        let mut object_195 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_195,
            var_194,
        );
        object_195.finish();
    }
    if let Some(var_196) = &input.description {
        object.key("Description").string(var_196);
    }
    if let Some(var_197) = &input.schedule {
        object.key("Schedule").string(var_197);
    }
    if let Some(var_198) = &input.role_arn {
        object.key("RoleArn").string(var_198);
    }
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) {
    if let Some(var_199) = &input.id {
        object.key("Id").string(var_199);
    }
    if let Some(var_200) = &input.name {
        object.key("Name").string(var_200);
    }
    if let Some(var_201) = &input.role_arn {
        object.key("RoleArn").string(var_201);
    }
    if let Some(var_202) = &input.description {
        object.key("Description").string(var_202);
    }
    if let Some(var_203) = &input.document_metadata_configuration_updates {
        let mut array_204 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_206,
                    item_205,
                );
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.capacity_units {
        let mut object_208 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_208,
            var_207,
        );
        object_208.finish();
    }
    if let Some(var_209) = &input.user_token_configurations {
        let mut array_210 = object.key("UserTokenConfigurations").start_array();
        for item_211 in var_209 {
            {
                let mut object_212 = array_210.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_212,
                    item_211,
                );
                object_212.finish();
            }
        }
        array_210.finish();
    }
    if let Some(var_213) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_213.as_str());
    }
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) {
    if let Some(var_214) = &input.index_id {
        object.key("IndexId").string(var_214);
    }
    if let Some(var_215) = &input.id {
        object.key("Id").string(var_215);
    }
    if let Some(var_216) = &input.name {
        object.key("Name").string(var_216);
    }
    if let Some(var_217) = &input.description {
        object.key("Description").string(var_217);
    }
    if let Some(var_218) = &input.source_s3_path {
        let mut object_219 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_219, var_218);
        object_219.finish();
    }
    if let Some(var_220) = &input.role_arn {
        object.key("RoleArn").string(var_220);
    }
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) {
    if let Some(var_221) = &input.index_id {
        object.key("IndexId").string(var_221);
    }
    if let Some(var_222) = &input.mode {
        object.key("Mode").string(var_222.as_str());
    }
    if let Some(var_223) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_223).into()),
        );
    }
    if let Some(var_224) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_224);
    }
    if let Some(var_225) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    if let Some(var_226) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_226).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) {
    if let Some(var_227) = &input.id {
        object.key("Id").string(var_227);
    }
    if let Some(var_228) = &input.name {
        object.key("Name").string(var_228);
    }
    if let Some(var_229) = &input.index_id {
        object.key("IndexId").string(var_229);
    }
    if let Some(var_230) = &input.description {
        object.key("Description").string(var_230);
    }
    if let Some(var_231) = &input.role_arn {
        object.key("RoleArn").string(var_231);
    }
    if let Some(var_232) = &input.source_s3_path {
        let mut object_233 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_233, var_232);
        object_233.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) {
    if let Some(var_234) = &input.data_source_id {
        object.key("DataSourceId").string(var_234);
    }
    if let Some(var_235) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_235);
    }
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) {
    if let Some(var_236) = &input.document_id {
        object.key("DocumentId").string(var_236);
    }
    if let Some(var_237) = &input.attributes {
        let mut array_238 = object.key("Attributes").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_240,
                    item_239,
                );
                object_240.finish();
            }
        }
        array_238.finish();
    }
}

pub fn serialize_structure_crate_model_document(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) {
    if let Some(var_241) = &input.id {
        object.key("Id").string(var_241);
    }
    if let Some(var_242) = &input.title {
        object.key("Title").string(var_242);
    }
    if let Some(var_243) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&smithy_types::base64::encode(var_243));
    }
    if let Some(var_244) = &input.s3_path {
        let mut object_245 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_245, var_244);
        object_245.finish();
    }
    if let Some(var_246) = &input.attributes {
        let mut array_247 = object.key("Attributes").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_249,
                    item_248,
                );
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.access_control_list {
        let mut array_251 = object.key("AccessControlList").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_253,
                    item_252,
                );
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.hierarchical_access_control_list {
        let mut array_255 = object.key("HierarchicalAccessControlList").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_257,
                    item_256,
                );
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.content_type {
        object.key("ContentType").string(var_258.as_str());
    }
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) {
    if let Some(var_259) = &input.s3_configuration {
        let mut object_260 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_260,
            var_259,
        );
        object_260.finish();
    }
    if let Some(var_261) = &input.share_point_configuration {
        let mut object_262 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_262,
            var_261,
        );
        object_262.finish();
    }
    if let Some(var_263) = &input.database_configuration {
        let mut object_264 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_264,
            var_263,
        );
        object_264.finish();
    }
    if let Some(var_265) = &input.salesforce_configuration {
        let mut object_266 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_266,
            var_265,
        );
        object_266.finish();
    }
    if let Some(var_267) = &input.one_drive_configuration {
        let mut object_268 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_268,
            var_267,
        );
        object_268.finish();
    }
    if let Some(var_269) = &input.service_now_configuration {
        let mut object_270 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_270,
            var_269,
        );
        object_270.finish();
    }
    if let Some(var_271) = &input.confluence_configuration {
        let mut object_272 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_272,
            var_271,
        );
        object_272.finish();
    }
    if let Some(var_273) = &input.google_drive_configuration {
        let mut object_274 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_274,
            var_273,
        );
        object_274.finish();
    }
    if let Some(var_275) = &input.web_crawler_configuration {
        let mut object_276 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_276,
            var_275,
        );
        object_276.finish();
    }
    if let Some(var_277) = &input.work_docs_configuration {
        let mut object_278 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_278,
            var_277,
        );
        object_278.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_279) = &input.key {
        object.key("Key").string(var_279);
    }
    if let Some(var_280) = &input.value {
        object.key("Value").string(var_280);
    }
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) {
    if let Some(var_281) = &input.bucket {
        object.key("Bucket").string(var_281);
    }
    if let Some(var_282) = &input.key {
        object.key("Key").string(var_282);
    }
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) {
    if let Some(var_283) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_283);
    }
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) {
    if let Some(var_284) = &input.jwt_token_type_configuration {
        let mut object_285 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_285,
            var_284,
        );
        object_285.finish();
    }
    if let Some(var_286) = &input.json_token_type_configuration {
        let mut object_287 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_287,
            var_286,
        );
        object_287.finish();
    }
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) {
    if let Some(var_288) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_288, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_289) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_289, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) {
    if let Some(var_290) = &input.member_groups {
        let mut array_291 = object.key("MemberGroups").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_293,
                    item_292,
                );
                object_293.finish();
            }
        }
        array_291.finish();
    }
    if let Some(var_294) = &input.member_users {
        let mut array_295 = object.key("MemberUsers").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_297,
                    item_296,
                );
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.s3_pathfor_group_members {
        let mut object_299 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_299, var_298);
        object_299.finish();
    }
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) {
    if let Some(var_300) = &input.and_all_filters {
        let mut array_301 = object.key("AndAllFilters").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_303,
                    item_302,
                );
                object_303.finish();
            }
        }
        array_301.finish();
    }
    if let Some(var_304) = &input.or_all_filters {
        let mut array_305 = object.key("OrAllFilters").start_array();
        for item_306 in var_304 {
            {
                let mut object_307 = array_305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_307,
                    item_306,
                );
                object_307.finish();
            }
        }
        array_305.finish();
    }
    if let Some(var_308) = &input.not_filter {
        let mut object_309 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(&mut object_309, var_308);
        object_309.finish();
    }
    if let Some(var_310) = &input.equals_to {
        let mut object_311 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_311,
            var_310,
        );
        object_311.finish();
    }
    if let Some(var_312) = &input.contains_all {
        let mut object_313 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_313,
            var_312,
        );
        object_313.finish();
    }
    if let Some(var_314) = &input.contains_any {
        let mut object_315 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_315,
            var_314,
        );
        object_315.finish();
    }
    if let Some(var_316) = &input.greater_than {
        let mut object_317 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_317,
            var_316,
        );
        object_317.finish();
    }
    if let Some(var_318) = &input.greater_than_or_equals {
        let mut object_319 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_319,
            var_318,
        );
        object_319.finish();
    }
    if let Some(var_320) = &input.less_than {
        let mut object_321 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_321,
            var_320,
        );
        object_321.finish();
    }
    if let Some(var_322) = &input.less_than_or_equals {
        let mut object_323 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_323,
            var_322,
        );
        object_323.finish();
    }
}

pub fn serialize_structure_crate_model_facet(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) {
    if let Some(var_324) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_324);
    }
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) {
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325);
    }
    if let Some(var_326) = &input.relevance {
        let mut object_327 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_327, var_326);
        object_327.finish();
    }
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) {
    if let Some(var_328) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_328);
    }
    if let Some(var_329) = &input.sort_order {
        object.key("SortOrder").string(var_329.as_str());
    }
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) {
    if let Some(var_330) = &input.token {
        object.key("Token").string(var_330);
    }
    if let Some(var_331) = &input.user_id {
        object.key("UserId").string(var_331);
    }
    if let Some(var_332) = &input.groups {
        let mut array_333 = object.key("Groups").start_array();
        for item_334 in var_332 {
            {
                array_333.value().string(item_334);
            }
        }
        array_333.finish();
    }
    if let Some(var_335) = &input.data_source_groups {
        let mut array_336 = object.key("DataSourceGroups").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_338,
                    item_337,
                );
                object_338.finish();
            }
        }
        array_336.finish();
    }
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) {
    if let Some(var_339) = &input.result_id {
        object.key("ResultId").string(var_339);
    }
    if let Some(var_340) = &input.click_time {
        object
            .key("ClickTime")
            .instant(var_340, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) {
    if let Some(var_341) = &input.result_id {
        object.key("ResultId").string(var_341);
    }
    if let Some(var_342) = &input.relevance_value {
        object.key("RelevanceValue").string(var_342.as_str());
    }
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) {
    if let Some(var_343) = &input.name {
        object.key("Name").string(var_343);
    }
    if let Some(var_344) = &input.r#type {
        object.key("Type").string(var_344.as_str());
    }
    if let Some(var_345) = &input.relevance {
        let mut object_346 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_346, var_345);
        object_346.finish();
    }
    if let Some(var_347) = &input.search {
        let mut object_348 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_348, var_347);
        object_348.finish();
    }
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) {
    if let Some(var_349) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_349).into()),
        );
    }
    if let Some(var_350) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_350).into()),
        );
    }
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) {
    if let Some(var_351) = &input.key {
        object.key("Key").string(var_351);
    }
    if let Some(var_352) = &input.value {
        let mut object_353 = object.key("Value").start_object();
        crate::json_ser::serialize_union_crate_model_document_attribute_value(
            &mut object_353,
            var_352,
        );
        object_353.finish();
    }
}

pub fn serialize_structure_crate_model_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) {
    if let Some(var_354) = &input.name {
        object.key("Name").string(var_354);
    }
    if let Some(var_355) = &input.r#type {
        object.key("Type").string(var_355.as_str());
    }
    if let Some(var_356) = &input.access {
        object.key("Access").string(var_356.as_str());
    }
    if let Some(var_357) = &input.data_source_id {
        object.key("DataSourceId").string(var_357);
    }
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) {
    if let Some(var_358) = &input.principal_list {
        let mut array_359 = object.key("PrincipalList").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_361,
                    item_360,
                );
                object_361.finish();
            }
        }
        array_359.finish();
    }
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) {
    if let Some(var_362) = &input.bucket_name {
        object.key("BucketName").string(var_362);
    }
    if let Some(var_363) = &input.inclusion_prefixes {
        let mut array_364 = object.key("InclusionPrefixes").start_array();
        for item_365 in var_363 {
            {
                array_364.value().string(item_365);
            }
        }
        array_364.finish();
    }
    if let Some(var_366) = &input.inclusion_patterns {
        let mut array_367 = object.key("InclusionPatterns").start_array();
        for item_368 in var_366 {
            {
                array_367.value().string(item_368);
            }
        }
        array_367.finish();
    }
    if let Some(var_369) = &input.exclusion_patterns {
        let mut array_370 = object.key("ExclusionPatterns").start_array();
        for item_371 in var_369 {
            {
                array_370.value().string(item_371);
            }
        }
        array_370.finish();
    }
    if let Some(var_372) = &input.documents_metadata_configuration {
        let mut object_373 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_373,
            var_372,
        );
        object_373.finish();
    }
    if let Some(var_374) = &input.access_control_list_configuration {
        let mut object_375 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_375,
            var_374,
        );
        object_375.finish();
    }
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) {
    if let Some(var_376) = &input.share_point_version {
        object.key("SharePointVersion").string(var_376.as_str());
    }
    if let Some(var_377) = &input.urls {
        let mut array_378 = object.key("Urls").start_array();
        for item_379 in var_377 {
            {
                array_378.value().string(item_379);
            }
        }
        array_378.finish();
    }
    if let Some(var_380) = &input.secret_arn {
        object.key("SecretArn").string(var_380);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_381) = &input.inclusion_patterns {
        let mut array_382 = object.key("InclusionPatterns").start_array();
        for item_383 in var_381 {
            {
                array_382.value().string(item_383);
            }
        }
        array_382.finish();
    }
    if let Some(var_384) = &input.exclusion_patterns {
        let mut array_385 = object.key("ExclusionPatterns").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386);
            }
        }
        array_385.finish();
    }
    if let Some(var_387) = &input.vpc_configuration {
        let mut object_388 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_388,
            var_387,
        );
        object_388.finish();
    }
    if let Some(var_389) = &input.field_mappings {
        let mut array_390 = object.key("FieldMappings").start_array();
        for item_391 in var_389 {
            {
                let mut object_392 = array_390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_392,
                    item_391,
                );
                object_392.finish();
            }
        }
        array_390.finish();
    }
    if let Some(var_393) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_393);
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_394) = &input.ssl_certificate_s3_path {
        let mut object_395 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_395, var_394);
        object_395.finish();
    }
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) {
    if let Some(var_396) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_396.as_str());
    }
    if let Some(var_397) = &input.connection_configuration {
        let mut object_398 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_398,
            var_397,
        );
        object_398.finish();
    }
    if let Some(var_399) = &input.vpc_configuration {
        let mut object_400 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_400,
            var_399,
        );
        object_400.finish();
    }
    if let Some(var_401) = &input.column_configuration {
        let mut object_402 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_402,
            var_401,
        );
        object_402.finish();
    }
    if let Some(var_403) = &input.acl_configuration {
        let mut object_404 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_404,
            var_403,
        );
        object_404.finish();
    }
    if let Some(var_405) = &input.sql_configuration {
        let mut object_406 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_406,
            var_405,
        );
        object_406.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) {
    if let Some(var_407) = &input.server_url {
        object.key("ServerUrl").string(var_407);
    }
    if let Some(var_408) = &input.secret_arn {
        object.key("SecretArn").string(var_408);
    }
    if let Some(var_409) = &input.standard_object_configurations {
        let mut array_410 = object.key("StandardObjectConfigurations").start_array();
        for item_411 in var_409 {
            {
                let mut object_412 = array_410.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_412, item_411);
                object_412.finish();
            }
        }
        array_410.finish();
    }
    if let Some(var_413) = &input.knowledge_article_configuration {
        let mut object_414 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(
            &mut object_414,
            var_413,
        );
        object_414.finish();
    }
    if let Some(var_415) = &input.chatter_feed_configuration {
        let mut object_416 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_416,
            var_415,
        );
        object_416.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_417) = &input.standard_object_attachment_configuration {
        let mut object_418 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_418, var_417);
        object_418.finish();
    }
    if let Some(var_419) = &input.include_attachment_file_patterns {
        let mut array_420 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_421 in var_419 {
            {
                array_420.value().string(item_421);
            }
        }
        array_420.finish();
    }
    if let Some(var_422) = &input.exclude_attachment_file_patterns {
        let mut array_423 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) {
    if let Some(var_425) = &input.tenant_domain {
        object.key("TenantDomain").string(var_425);
    }
    if let Some(var_426) = &input.secret_arn {
        object.key("SecretArn").string(var_426);
    }
    if let Some(var_427) = &input.one_drive_users {
        let mut object_428 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_428, var_427);
        object_428.finish();
    }
    if let Some(var_429) = &input.inclusion_patterns {
        let mut array_430 = object.key("InclusionPatterns").start_array();
        for item_431 in var_429 {
            {
                array_430.value().string(item_431);
            }
        }
        array_430.finish();
    }
    if let Some(var_432) = &input.exclusion_patterns {
        let mut array_433 = object.key("ExclusionPatterns").start_array();
        for item_434 in var_432 {
            {
                array_433.value().string(item_434);
            }
        }
        array_433.finish();
    }
    if let Some(var_435) = &input.field_mappings {
        let mut array_436 = object.key("FieldMappings").start_array();
        for item_437 in var_435 {
            {
                let mut object_438 = array_436.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_438,
                    item_437,
                );
                object_438.finish();
            }
        }
        array_436.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) {
    if let Some(var_439) = &input.host_url {
        object.key("HostUrl").string(var_439);
    }
    if let Some(var_440) = &input.secret_arn {
        object.key("SecretArn").string(var_440);
    }
    if let Some(var_441) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_441.as_str());
    }
    if let Some(var_442) = &input.knowledge_article_configuration {
        let mut object_443 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_443, var_442);
        object_443.finish();
    }
    if let Some(var_444) = &input.service_catalog_configuration {
        let mut object_445 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_445,
            var_444,
        );
        object_445.finish();
    }
    if let Some(var_446) = &input.authentication_type {
        object.key("AuthenticationType").string(var_446.as_str());
    }
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) {
    if let Some(var_447) = &input.server_url {
        object.key("ServerUrl").string(var_447);
    }
    if let Some(var_448) = &input.secret_arn {
        object.key("SecretArn").string(var_448);
    }
    if let Some(var_449) = &input.version {
        object.key("Version").string(var_449.as_str());
    }
    if let Some(var_450) = &input.space_configuration {
        let mut object_451 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_451,
            var_450,
        );
        object_451.finish();
    }
    if let Some(var_452) = &input.page_configuration {
        let mut object_453 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_453,
            var_452,
        );
        object_453.finish();
    }
    if let Some(var_454) = &input.blog_configuration {
        let mut object_455 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_455,
            var_454,
        );
        object_455.finish();
    }
    if let Some(var_456) = &input.attachment_configuration {
        let mut object_457 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_457,
            var_456,
        );
        object_457.finish();
    }
    if let Some(var_458) = &input.vpc_configuration {
        let mut object_459 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_459,
            var_458,
        );
        object_459.finish();
    }
    if let Some(var_460) = &input.inclusion_patterns {
        let mut array_461 = object.key("InclusionPatterns").start_array();
        for item_462 in var_460 {
            {
                array_461.value().string(item_462);
            }
        }
        array_461.finish();
    }
    if let Some(var_463) = &input.exclusion_patterns {
        let mut array_464 = object.key("ExclusionPatterns").start_array();
        for item_465 in var_463 {
            {
                array_464.value().string(item_465);
            }
        }
        array_464.finish();
    }
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) {
    if let Some(var_466) = &input.secret_arn {
        object.key("SecretArn").string(var_466);
    }
    if let Some(var_467) = &input.inclusion_patterns {
        let mut array_468 = object.key("InclusionPatterns").start_array();
        for item_469 in var_467 {
            {
                array_468.value().string(item_469);
            }
        }
        array_468.finish();
    }
    if let Some(var_470) = &input.exclusion_patterns {
        let mut array_471 = object.key("ExclusionPatterns").start_array();
        for item_472 in var_470 {
            {
                array_471.value().string(item_472);
            }
        }
        array_471.finish();
    }
    if let Some(var_473) = &input.field_mappings {
        let mut array_474 = object.key("FieldMappings").start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_476,
                    item_475,
                );
                object_476.finish();
            }
        }
        array_474.finish();
    }
    if let Some(var_477) = &input.exclude_mime_types {
        let mut array_478 = object.key("ExcludeMimeTypes").start_array();
        for item_479 in var_477 {
            {
                array_478.value().string(item_479);
            }
        }
        array_478.finish();
    }
    if let Some(var_480) = &input.exclude_user_accounts {
        let mut array_481 = object.key("ExcludeUserAccounts").start_array();
        for item_482 in var_480 {
            {
                array_481.value().string(item_482);
            }
        }
        array_481.finish();
    }
    if let Some(var_483) = &input.exclude_shared_drives {
        let mut array_484 = object.key("ExcludeSharedDrives").start_array();
        for item_485 in var_483 {
            {
                array_484.value().string(item_485);
            }
        }
        array_484.finish();
    }
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) {
    if let Some(var_486) = &input.urls {
        let mut object_487 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_487, var_486);
        object_487.finish();
    }
    if let Some(var_488) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    if let Some(var_489) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    if let Some(var_490) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_490).into()),
        );
    }
    if let Some(var_491) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.url_inclusion_patterns {
        let mut array_493 = object.key("UrlInclusionPatterns").start_array();
        for item_494 in var_492 {
            {
                array_493.value().string(item_494);
            }
        }
        array_493.finish();
    }
    if let Some(var_495) = &input.url_exclusion_patterns {
        let mut array_496 = object.key("UrlExclusionPatterns").start_array();
        for item_497 in var_495 {
            {
                array_496.value().string(item_497);
            }
        }
        array_496.finish();
    }
    if let Some(var_498) = &input.proxy_configuration {
        let mut object_499 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_499,
            var_498,
        );
        object_499.finish();
    }
    if let Some(var_500) = &input.authentication_configuration {
        let mut object_501 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_501,
            var_500,
        );
        object_501.finish();
    }
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) {
    if let Some(var_502) = &input.organization_id {
        object.key("OrganizationId").string(var_502);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_503) = &input.inclusion_patterns {
        let mut array_504 = object.key("InclusionPatterns").start_array();
        for item_505 in var_503 {
            {
                array_504.value().string(item_505);
            }
        }
        array_504.finish();
    }
    if let Some(var_506) = &input.exclusion_patterns {
        let mut array_507 = object.key("ExclusionPatterns").start_array();
        for item_508 in var_506 {
            {
                array_507.value().string(item_508);
            }
        }
        array_507.finish();
    }
    if let Some(var_509) = &input.field_mappings {
        let mut array_510 = object.key("FieldMappings").start_array();
        for item_511 in var_509 {
            {
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_512,
                    item_511,
                );
                object_512.finish();
            }
        }
        array_510.finish();
    }
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) {
    if let Some(var_513) = &input.key_location {
        object.key("KeyLocation").string(var_513.as_str());
    }
    if let Some(var_514) = &input.url {
        object.key("URL").string(var_514);
    }
    if let Some(var_515) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_515);
    }
    if let Some(var_516) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_516);
    }
    if let Some(var_517) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_517);
    }
    if let Some(var_518) = &input.issuer {
        object.key("Issuer").string(var_518);
    }
    if let Some(var_519) = &input.claim_regex {
        object.key("ClaimRegex").string(var_519);
    }
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) {
    if let Some(var_520) = &input.user_name_attribute_field {
        object.key("UserNameAttributeField").string(var_520);
    }
    if let Some(var_521) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_521);
    }
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) {
    if let Some(var_522) = &input.group_id {
        object.key("GroupId").string(var_522);
    }
    if let Some(var_523) = &input.data_source_id {
        object.key("DataSourceId").string(var_523);
    }
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) {
    if let Some(var_524) = &input.user_id {
        object.key("UserId").string(var_524);
    }
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) {
    if let Some(var_525) = &input.freshness {
        object.key("Freshness").boolean(*var_525);
    }
    if let Some(var_526) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_526).into()),
        );
    }
    if let Some(var_527) = &input.duration {
        object.key("Duration").string(var_527);
    }
    if let Some(var_528) = &input.rank_order {
        object.key("RankOrder").string(var_528.as_str());
    }
    if let Some(var_529) = &input.value_importance_map {
        let mut object_530 = object.key("ValueImportanceMap").start_object();
        for (key_531, value_532) in var_529 {
            {
                object_530.key(key_531).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*value_532).into()),
                );
            }
        }
        object_530.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) {
    if let Some(var_533) = &input.group_id {
        object.key("GroupId").string(var_533);
    }
    if let Some(var_534) = &input.data_source_id {
        object.key("DataSourceId").string(var_534);
    }
}

pub fn serialize_structure_crate_model_search(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
}

pub fn serialize_union_crate_model_document_attribute_value(
    object_353: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) {
    match input {
        crate::model::DocumentAttributeValue::StringValue(inner) => {
            object_353.key("StringValue").string(inner);
        }
        crate::model::DocumentAttributeValue::StringListValue(inner) => {
            let mut array_535 = object_353.key("StringListValue").start_array();
            for item_536 in inner {
                {
                    array_535.value().string(item_536);
                }
            }
            array_535.finish();
        }
        crate::model::DocumentAttributeValue::LongValue(inner) => {
            object_353.key("LongValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::model::DocumentAttributeValue::DateValue(inner) => {
            object_353
                .key("DateValue")
                .instant(inner, smithy_types::instant::Format::EpochSeconds);
        }
    }
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) {
    if let Some(var_537) = &input.s3_prefix {
        object.key("S3Prefix").string(var_537);
    }
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) {
    if let Some(var_538) = &input.key_path {
        object.key("KeyPath").string(var_538);
    }
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) {
    if let Some(var_539) = &input.subnet_ids {
        let mut array_540 = object.key("SubnetIds").start_array();
        for item_541 in var_539 {
            {
                array_540.value().string(item_541);
            }
        }
        array_540.finish();
    }
    if let Some(var_542) = &input.security_group_ids {
        let mut array_543 = object.key("SecurityGroupIds").start_array();
        for item_544 in var_542 {
            {
                array_543.value().string(item_544);
            }
        }
        array_543.finish();
    }
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) {
    if let Some(var_545) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_545);
    }
    if let Some(var_546) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_546);
    }
    if let Some(var_547) = &input.index_field_name {
        object.key("IndexFieldName").string(var_547);
    }
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) {
    if let Some(var_548) = &input.database_host {
        object.key("DatabaseHost").string(var_548);
    }
    if let Some(var_549) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    if let Some(var_550) = &input.database_name {
        object.key("DatabaseName").string(var_550);
    }
    if let Some(var_551) = &input.table_name {
        object.key("TableName").string(var_551);
    }
    if let Some(var_552) = &input.secret_arn {
        object.key("SecretArn").string(var_552);
    }
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) {
    if let Some(var_553) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_553);
    }
    if let Some(var_554) = &input.document_data_column_name {
        object.key("DocumentDataColumnName").string(var_554);
    }
    if let Some(var_555) = &input.document_title_column_name {
        object.key("DocumentTitleColumnName").string(var_555);
    }
    if let Some(var_556) = &input.field_mappings {
        let mut array_557 = object.key("FieldMappings").start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_559,
                    item_558,
                );
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.change_detecting_columns {
        let mut array_561 = object.key("ChangeDetectingColumns").start_array();
        for item_562 in var_560 {
            {
                array_561.value().string(item_562);
            }
        }
        array_561.finish();
    }
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) {
    if let Some(var_563) = &input.allowed_groups_column_name {
        object.key("AllowedGroupsColumnName").string(var_563);
    }
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) {
    if let Some(var_564) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_564.as_str());
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) {
    if let Some(var_565) = &input.name {
        object.key("Name").string(var_565.as_str());
    }
    if let Some(var_566) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_566);
    }
    if let Some(var_567) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_567);
    }
    if let Some(var_568) = &input.field_mappings {
        let mut array_569 = object.key("FieldMappings").start_array();
        for item_570 in var_568 {
            {
                let mut object_571 = array_569.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_571,
                    item_570,
                );
                object_571.finish();
            }
        }
        array_569.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) {
    if let Some(var_572) = &input.included_states {
        let mut array_573 = object.key("IncludedStates").start_array();
        for item_574 in var_572 {
            {
                array_573.value().string(item_574.as_str());
            }
        }
        array_573.finish();
    }
    if let Some(var_575) = &input.standard_knowledge_article_type_configuration {
        let mut object_576 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_576, var_575);
        object_576.finish();
    }
    if let Some(var_577) = &input.custom_knowledge_article_type_configurations {
        let mut array_578 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_579 in var_577 {
            {
                let mut object_580 = array_578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_580, item_579);
                object_580.finish();
            }
        }
        array_578.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) {
    if let Some(var_581) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_581);
    }
    if let Some(var_582) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_582);
    }
    if let Some(var_583) = &input.field_mappings {
        let mut array_584 = object.key("FieldMappings").start_array();
        for item_585 in var_583 {
            {
                let mut object_586 = array_584.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_586,
                    item_585,
                );
                object_586.finish();
            }
        }
        array_584.finish();
    }
    if let Some(var_587) = &input.include_filter_types {
        let mut array_588 = object.key("IncludeFilterTypes").start_array();
        for item_589 in var_587 {
            {
                array_588.value().string(item_589.as_str());
            }
        }
        array_588.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) {
    if let Some(var_590) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_590);
    }
    if let Some(var_591) = &input.field_mappings {
        let mut array_592 = object.key("FieldMappings").start_array();
        for item_593 in var_591 {
            {
                let mut object_594 = array_592.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_594,
                    item_593,
                );
                object_594.finish();
            }
        }
        array_592.finish();
    }
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) {
    if let Some(var_595) = &input.one_drive_user_list {
        let mut array_596 = object.key("OneDriveUserList").start_array();
        for item_597 in var_595 {
            {
                array_596.value().string(item_597);
            }
        }
        array_596.finish();
    }
    if let Some(var_598) = &input.one_drive_user_s3_path {
        let mut object_599 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_599, var_598);
        object_599.finish();
    }
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_600) = &input.include_attachment_file_patterns {
        let mut array_601 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_602 in var_600 {
            {
                array_601.value().string(item_602);
            }
        }
        array_601.finish();
    }
    if let Some(var_603) = &input.exclude_attachment_file_patterns {
        let mut array_604 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_605 in var_603 {
            {
                array_604.value().string(item_605);
            }
        }
        array_604.finish();
    }
    if let Some(var_606) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_606);
    }
    if let Some(var_607) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_607);
    }
    if let Some(var_608) = &input.field_mappings {
        let mut array_609 = object.key("FieldMappings").start_array();
        for item_610 in var_608 {
            {
                let mut object_611 = array_609.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_611,
                    item_610,
                );
                object_611.finish();
            }
        }
        array_609.finish();
    }
    if let Some(var_612) = &input.filter_query {
        object.key("FilterQuery").string(var_612);
    }
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_613) = &input.include_attachment_file_patterns {
        let mut array_614 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_615 in var_613 {
            {
                array_614.value().string(item_615);
            }
        }
        array_614.finish();
    }
    if let Some(var_616) = &input.exclude_attachment_file_patterns {
        let mut array_617 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_618 in var_616 {
            {
                array_617.value().string(item_618);
            }
        }
        array_617.finish();
    }
    if let Some(var_619) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_619);
    }
    if let Some(var_620) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_620);
    }
    if let Some(var_621) = &input.field_mappings {
        let mut array_622 = object.key("FieldMappings").start_array();
        for item_623 in var_621 {
            {
                let mut object_624 = array_622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_624,
                    item_623,
                );
                object_624.finish();
            }
        }
        array_622.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_625) = &input.include_spaces {
        let mut array_626 = object.key("IncludeSpaces").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627);
            }
        }
        array_626.finish();
    }
    if let Some(var_628) = &input.exclude_spaces {
        let mut array_629 = object.key("ExcludeSpaces").start_array();
        for item_630 in var_628 {
            {
                array_629.value().string(item_630);
            }
        }
        array_629.finish();
    }
    if let Some(var_631) = &input.space_field_mappings {
        let mut array_632 = object.key("SpaceFieldMappings").start_array();
        for item_633 in var_631 {
            {
                let mut object_634 = array_632.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_634, item_633);
                object_634.finish();
            }
        }
        array_632.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) {
    if let Some(var_635) = &input.page_field_mappings {
        let mut array_636 = object.key("PageFieldMappings").start_array();
        for item_637 in var_635 {
            {
                let mut object_638 = array_636.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_638, item_637);
                object_638.finish();
            }
        }
        array_636.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) {
    if let Some(var_639) = &input.blog_field_mappings {
        let mut array_640 = object.key("BlogFieldMappings").start_array();
        for item_641 in var_639 {
            {
                let mut object_642 = array_640.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_642, item_641);
                object_642.finish();
            }
        }
        array_640.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_643) = &input.attachment_field_mappings {
        let mut array_644 = object.key("AttachmentFieldMappings").start_array();
        for item_645 in var_643 {
            {
                let mut object_646 = array_644.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_646, item_645);
                object_646.finish();
            }
        }
        array_644.finish();
    }
}

pub fn serialize_structure_crate_model_urls(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) {
    if let Some(var_647) = &input.seed_url_configuration {
        let mut object_648 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_648,
            var_647,
        );
        object_648.finish();
    }
    if let Some(var_649) = &input.site_maps_configuration {
        let mut object_650 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_650,
            var_649,
        );
        object_650.finish();
    }
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) {
    if let Some(var_651) = &input.host {
        object.key("Host").string(var_651);
    }
    if let Some(var_652) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    if let Some(var_653) = &input.credentials {
        object.key("Credentials").string(var_653);
    }
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) {
    if let Some(var_654) = &input.basic_authentication {
        let mut array_655 = object.key("BasicAuthentication").start_array();
        for item_656 in var_654 {
            {
                let mut object_657 = array_655.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(
                    &mut object_657,
                    item_656,
                );
                object_657.finish();
            }
        }
        array_655.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_658) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_658);
    }
    if let Some(var_659) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_659);
    }
    if let Some(var_660) = &input.field_mappings {
        let mut array_661 = object.key("FieldMappings").start_array();
        for item_662 in var_660 {
            {
                let mut object_663 = array_661.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_663,
                    item_662,
                );
                object_663.finish();
            }
        }
        array_661.finish();
    }
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) {
    if let Some(var_664) = &input.name {
        object.key("Name").string(var_664);
    }
    if let Some(var_665) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_665);
    }
    if let Some(var_666) = &input.document_title_field_name {
        object.key("DocumentTitleFieldName").string(var_666);
    }
    if let Some(var_667) = &input.field_mappings {
        let mut array_668 = object.key("FieldMappings").start_array();
        for item_669 in var_667 {
            {
                let mut object_670 = array_668.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(
                    &mut object_670,
                    item_669,
                );
                object_670.finish();
            }
        }
        array_668.finish();
    }
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) {
    if let Some(var_671) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_671.as_str());
    }
    if let Some(var_672) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_672);
    }
    if let Some(var_673) = &input.index_field_name {
        object.key("IndexFieldName").string(var_673);
    }
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) {
    if let Some(var_674) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_674.as_str());
    }
    if let Some(var_675) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_675);
    }
    if let Some(var_676) = &input.index_field_name {
        object.key("IndexFieldName").string(var_676);
    }
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) {
    if let Some(var_677) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_677.as_str());
    }
    if let Some(var_678) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_678);
    }
    if let Some(var_679) = &input.index_field_name {
        object.key("IndexFieldName").string(var_679);
    }
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) {
    if let Some(var_680) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_680.as_str());
    }
    if let Some(var_681) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_681);
    }
    if let Some(var_682) = &input.index_field_name {
        object.key("IndexFieldName").string(var_682);
    }
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) {
    if let Some(var_683) = &input.seed_urls {
        let mut array_684 = object.key("SeedUrls").start_array();
        for item_685 in var_683 {
            {
                array_684.value().string(item_685);
            }
        }
        array_684.finish();
    }
    if let Some(var_686) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_686.as_str());
    }
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) {
    if let Some(var_687) = &input.site_maps {
        let mut array_688 = object.key("SiteMaps").start_array();
        for item_689 in var_687 {
            {
                array_688.value().string(item_689);
            }
        }
        array_688.finish();
    }
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) {
    if let Some(var_690) = &input.host {
        object.key("Host").string(var_690);
    }
    if let Some(var_691) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_691).into()),
        );
    }
    if let Some(var_692) = &input.credentials {
        object.key("Credentials").string(var_692);
    }
}
