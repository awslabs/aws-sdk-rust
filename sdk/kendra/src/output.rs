// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateThesaurusOutput {}
impl std::fmt::Debug for UpdateThesaurusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateThesaurusOutput");
        formatter.finish()
    }
}
/// See [`UpdateThesaurusOutput`](crate::output::UpdateThesaurusOutput)
pub mod update_thesaurus_output {
    /// A builder for [`UpdateThesaurusOutput`](crate::output::UpdateThesaurusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateThesaurusOutput`](crate::output::UpdateThesaurusOutput)
        pub fn build(self) -> crate::output::UpdateThesaurusOutput {
            crate::output::UpdateThesaurusOutput {}
        }
    }
}
impl UpdateThesaurusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateThesaurusOutput`](crate::output::UpdateThesaurusOutput)
    pub fn builder() -> crate::output::update_thesaurus_output::Builder {
        crate::output::update_thesaurus_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQuerySuggestionsConfigOutput {}
impl std::fmt::Debug for UpdateQuerySuggestionsConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQuerySuggestionsConfigOutput");
        formatter.finish()
    }
}
/// See [`UpdateQuerySuggestionsConfigOutput`](crate::output::UpdateQuerySuggestionsConfigOutput)
pub mod update_query_suggestions_config_output {
    /// A builder for [`UpdateQuerySuggestionsConfigOutput`](crate::output::UpdateQuerySuggestionsConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQuerySuggestionsConfigOutput`](crate::output::UpdateQuerySuggestionsConfigOutput)
        pub fn build(self) -> crate::output::UpdateQuerySuggestionsConfigOutput {
            crate::output::UpdateQuerySuggestionsConfigOutput {}
        }
    }
}
impl UpdateQuerySuggestionsConfigOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQuerySuggestionsConfigOutput`](crate::output::UpdateQuerySuggestionsConfigOutput)
    pub fn builder() -> crate::output::update_query_suggestions_config_output::Builder {
        crate::output::update_query_suggestions_config_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateQuerySuggestionsBlockListOutput {}
impl std::fmt::Debug for UpdateQuerySuggestionsBlockListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateQuerySuggestionsBlockListOutput");
        formatter.finish()
    }
}
/// See [`UpdateQuerySuggestionsBlockListOutput`](crate::output::UpdateQuerySuggestionsBlockListOutput)
pub mod update_query_suggestions_block_list_output {
    /// A builder for [`UpdateQuerySuggestionsBlockListOutput`](crate::output::UpdateQuerySuggestionsBlockListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateQuerySuggestionsBlockListOutput`](crate::output::UpdateQuerySuggestionsBlockListOutput)
        pub fn build(self) -> crate::output::UpdateQuerySuggestionsBlockListOutput {
            crate::output::UpdateQuerySuggestionsBlockListOutput {}
        }
    }
}
impl UpdateQuerySuggestionsBlockListOutput {
    /// Creates a new builder-style object to manufacture [`UpdateQuerySuggestionsBlockListOutput`](crate::output::UpdateQuerySuggestionsBlockListOutput)
    pub fn builder() -> crate::output::update_query_suggestions_block_list_output::Builder {
        crate::output::update_query_suggestions_block_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIndexOutput {}
impl std::fmt::Debug for UpdateIndexOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateIndexOutput");
        formatter.finish()
    }
}
/// See [`UpdateIndexOutput`](crate::output::UpdateIndexOutput)
pub mod update_index_output {
    /// A builder for [`UpdateIndexOutput`](crate::output::UpdateIndexOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateIndexOutput`](crate::output::UpdateIndexOutput)
        pub fn build(self) -> crate::output::UpdateIndexOutput {
            crate::output::UpdateIndexOutput {}
        }
    }
}
impl UpdateIndexOutput {
    /// Creates a new builder-style object to manufacture [`UpdateIndexOutput`](crate::output::UpdateIndexOutput)
    pub fn builder() -> crate::output::update_index_output::Builder {
        crate::output::update_index_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDataSourceOutput {}
impl std::fmt::Debug for UpdateDataSourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDataSourceOutput");
        formatter.finish()
    }
}
/// See [`UpdateDataSourceOutput`](crate::output::UpdateDataSourceOutput)
pub mod update_data_source_output {
    /// A builder for [`UpdateDataSourceOutput`](crate::output::UpdateDataSourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDataSourceOutput`](crate::output::UpdateDataSourceOutput)
        pub fn build(self) -> crate::output::UpdateDataSourceOutput {
            crate::output::UpdateDataSourceOutput {}
        }
    }
}
impl UpdateDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataSourceOutput`](crate::output::UpdateDataSourceOutput)
    pub fn builder() -> crate::output::update_data_source_output::Builder {
        crate::output::update_data_source_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SubmitFeedbackOutput {}
impl std::fmt::Debug for SubmitFeedbackOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SubmitFeedbackOutput");
        formatter.finish()
    }
}
/// See [`SubmitFeedbackOutput`](crate::output::SubmitFeedbackOutput)
pub mod submit_feedback_output {
    /// A builder for [`SubmitFeedbackOutput`](crate::output::SubmitFeedbackOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SubmitFeedbackOutput`](crate::output::SubmitFeedbackOutput)
        pub fn build(self) -> crate::output::SubmitFeedbackOutput {
            crate::output::SubmitFeedbackOutput {}
        }
    }
}
impl SubmitFeedbackOutput {
    /// Creates a new builder-style object to manufacture [`SubmitFeedbackOutput`](crate::output::SubmitFeedbackOutput)
    pub fn builder() -> crate::output::submit_feedback_output::Builder {
        crate::output::submit_feedback_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDataSourceSyncJobOutput {}
impl std::fmt::Debug for StopDataSourceSyncJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDataSourceSyncJobOutput");
        formatter.finish()
    }
}
/// See [`StopDataSourceSyncJobOutput`](crate::output::StopDataSourceSyncJobOutput)
pub mod stop_data_source_sync_job_output {
    /// A builder for [`StopDataSourceSyncJobOutput`](crate::output::StopDataSourceSyncJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopDataSourceSyncJobOutput`](crate::output::StopDataSourceSyncJobOutput)
        pub fn build(self) -> crate::output::StopDataSourceSyncJobOutput {
            crate::output::StopDataSourceSyncJobOutput {}
        }
    }
}
impl StopDataSourceSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`StopDataSourceSyncJobOutput`](crate::output::StopDataSourceSyncJobOutput)
    pub fn builder() -> crate::output::stop_data_source_sync_job_output::Builder {
        crate::output::stop_data_source_sync_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDataSourceSyncJobOutput {
    /// <p>Identifies a particular synchronization job.</p>
    pub execution_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartDataSourceSyncJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDataSourceSyncJobOutput");
        formatter.field("execution_id", &self.execution_id);
        formatter.finish()
    }
}
/// See [`StartDataSourceSyncJobOutput`](crate::output::StartDataSourceSyncJobOutput)
pub mod start_data_source_sync_job_output {
    /// A builder for [`StartDataSourceSyncJobOutput`](crate::output::StartDataSourceSyncJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) execution_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Identifies a particular synchronization job.</p>
        pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.execution_id = Some(input.into());
            self
        }
        pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.execution_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDataSourceSyncJobOutput`](crate::output::StartDataSourceSyncJobOutput)
        pub fn build(self) -> crate::output::StartDataSourceSyncJobOutput {
            crate::output::StartDataSourceSyncJobOutput {
                execution_id: self.execution_id,
            }
        }
    }
}
impl StartDataSourceSyncJobOutput {
    /// Creates a new builder-style object to manufacture [`StartDataSourceSyncJobOutput`](crate::output::StartDataSourceSyncJobOutput)
    pub fn builder() -> crate::output::start_data_source_sync_job_output::Builder {
        crate::output::start_data_source_sync_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueryOutput {
    /// <p>The unique identifier for the search. You use <code>QueryId</code>
    /// to identify the search when using the feedback API.</p>
    pub query_id: std::option::Option<std::string::String>,
    /// <p>The results of the search.</p>
    pub result_items: std::option::Option<std::vec::Vec<crate::model::QueryResultItem>>,
    /// <p>Contains the facet results. A <code>FacetResult</code> contains the
    /// counts for each attribute key that was specified in the
    /// <code>Facets</code> input parameter.</p>
    pub facet_results: std::option::Option<std::vec::Vec<crate::model::FacetResult>>,
    /// <p>The total number of items found by the search; however, you can only
    /// retrieve up to 100 items. For example, if the search found 192 items,
    /// you can only retrieve the first 100 of the items.</p>
    pub total_number_of_results: std::option::Option<i32>,
}
impl std::fmt::Debug for QueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueryOutput");
        formatter.field("query_id", &self.query_id);
        formatter.field("result_items", &self.result_items);
        formatter.field("facet_results", &self.facet_results);
        formatter.field("total_number_of_results", &self.total_number_of_results);
        formatter.finish()
    }
}
/// See [`QueryOutput`](crate::output::QueryOutput)
pub mod query_output {
    /// A builder for [`QueryOutput`](crate::output::QueryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_id: std::option::Option<std::string::String>,
        pub(crate) result_items: std::option::Option<std::vec::Vec<crate::model::QueryResultItem>>,
        pub(crate) facet_results: std::option::Option<std::vec::Vec<crate::model::FacetResult>>,
        pub(crate) total_number_of_results: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The unique identifier for the search. You use <code>QueryId</code>
        /// to identify the search when using the feedback API.</p>
        pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.query_id = Some(input.into());
            self
        }
        pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.query_id = input;
            self
        }
        pub fn result_items(mut self, input: impl Into<crate::model::QueryResultItem>) -> Self {
            let mut v = self.result_items.unwrap_or_default();
            v.push(input.into());
            self.result_items = Some(v);
            self
        }
        pub fn set_result_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::QueryResultItem>>,
        ) -> Self {
            self.result_items = input;
            self
        }
        pub fn facet_results(mut self, input: impl Into<crate::model::FacetResult>) -> Self {
            let mut v = self.facet_results.unwrap_or_default();
            v.push(input.into());
            self.facet_results = Some(v);
            self
        }
        pub fn set_facet_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FacetResult>>,
        ) -> Self {
            self.facet_results = input;
            self
        }
        /// <p>The total number of items found by the search; however, you can only
        /// retrieve up to 100 items. For example, if the search found 192 items,
        /// you can only retrieve the first 100 of the items.</p>
        pub fn total_number_of_results(mut self, input: i32) -> Self {
            self.total_number_of_results = Some(input);
            self
        }
        pub fn set_total_number_of_results(mut self, input: std::option::Option<i32>) -> Self {
            self.total_number_of_results = input;
            self
        }
        /// Consumes the builder and constructs a [`QueryOutput`](crate::output::QueryOutput)
        pub fn build(self) -> crate::output::QueryOutput {
            crate::output::QueryOutput {
                query_id: self.query_id,
                result_items: self.result_items,
                facet_results: self.facet_results,
                total_number_of_results: self.total_number_of_results,
            }
        }
    }
}
impl QueryOutput {
    /// Creates a new builder-style object to manufacture [`QueryOutput`](crate::output::QueryOutput)
    pub fn builder() -> crate::output::query_output::Builder {
        crate::output::query_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListThesauriOutput {
    /// <p>If the response is truncated, Amazon Kendra returns this
    /// token that you can use in the subsequent request to
    /// retrieve the next set of thesauri.
    /// </p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array of summary information for one or more thesauruses.</p>
    pub thesaurus_summary_items: std::option::Option<std::vec::Vec<crate::model::ThesaurusSummary>>,
}
impl std::fmt::Debug for ListThesauriOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListThesauriOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("thesaurus_summary_items", &self.thesaurus_summary_items);
        formatter.finish()
    }
}
/// See [`ListThesauriOutput`](crate::output::ListThesauriOutput)
pub mod list_thesauri_output {
    /// A builder for [`ListThesauriOutput`](crate::output::ListThesauriOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) thesaurus_summary_items:
            std::option::Option<std::vec::Vec<crate::model::ThesaurusSummary>>,
    }
    impl Builder {
        /// <p>If the response is truncated, Amazon Kendra returns this
        /// token that you can use in the subsequent request to
        /// retrieve the next set of thesauri.
        /// </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn thesaurus_summary_items(
            mut self,
            input: impl Into<crate::model::ThesaurusSummary>,
        ) -> Self {
            let mut v = self.thesaurus_summary_items.unwrap_or_default();
            v.push(input.into());
            self.thesaurus_summary_items = Some(v);
            self
        }
        pub fn set_thesaurus_summary_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ThesaurusSummary>>,
        ) -> Self {
            self.thesaurus_summary_items = input;
            self
        }
        /// Consumes the builder and constructs a [`ListThesauriOutput`](crate::output::ListThesauriOutput)
        pub fn build(self) -> crate::output::ListThesauriOutput {
            crate::output::ListThesauriOutput {
                next_token: self.next_token,
                thesaurus_summary_items: self.thesaurus_summary_items,
            }
        }
    }
}
impl ListThesauriOutput {
    /// Creates a new builder-style object to manufacture [`ListThesauriOutput`](crate::output::ListThesauriOutput)
    pub fn builder() -> crate::output::list_thesauri_output::Builder {
        crate::output::list_thesauri_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tags associated with the index, FAQ, or data source.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListQuerySuggestionsBlockListsOutput {
    /// <p>Summary items for a block list.</p>
    /// <p>This includes summary items on the block list ID, block list name, when the
    /// block list was created, when the block list was last updated, and the count
    /// of block words/phrases in the block list.</p>
    /// <p>For information on the current quota limits for block lists, see
    /// <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
    /// for Amazon Kendra</a>.</p>
    pub block_list_summary_items:
        std::option::Option<std::vec::Vec<crate::model::QuerySuggestionsBlockListSummary>>,
    /// <p>If the response is truncated, Amazon Kendra returns this token that you can use
    /// in the subsequent request to retrieve the next set of block lists.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListQuerySuggestionsBlockListsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListQuerySuggestionsBlockListsOutput");
        formatter.field("block_list_summary_items", &self.block_list_summary_items);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListQuerySuggestionsBlockListsOutput`](crate::output::ListQuerySuggestionsBlockListsOutput)
pub mod list_query_suggestions_block_lists_output {
    /// A builder for [`ListQuerySuggestionsBlockListsOutput`](crate::output::ListQuerySuggestionsBlockListsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) block_list_summary_items:
            std::option::Option<std::vec::Vec<crate::model::QuerySuggestionsBlockListSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn block_list_summary_items(
            mut self,
            input: impl Into<crate::model::QuerySuggestionsBlockListSummary>,
        ) -> Self {
            let mut v = self.block_list_summary_items.unwrap_or_default();
            v.push(input.into());
            self.block_list_summary_items = Some(v);
            self
        }
        pub fn set_block_list_summary_items(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::QuerySuggestionsBlockListSummary>,
            >,
        ) -> Self {
            self.block_list_summary_items = input;
            self
        }
        /// <p>If the response is truncated, Amazon Kendra returns this token that you can use
        /// in the subsequent request to retrieve the next set of block lists.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListQuerySuggestionsBlockListsOutput`](crate::output::ListQuerySuggestionsBlockListsOutput)
        pub fn build(self) -> crate::output::ListQuerySuggestionsBlockListsOutput {
            crate::output::ListQuerySuggestionsBlockListsOutput {
                block_list_summary_items: self.block_list_summary_items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListQuerySuggestionsBlockListsOutput {
    /// Creates a new builder-style object to manufacture [`ListQuerySuggestionsBlockListsOutput`](crate::output::ListQuerySuggestionsBlockListsOutput)
    pub fn builder() -> crate::output::list_query_suggestions_block_lists_output::Builder {
        crate::output::list_query_suggestions_block_lists_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListIndicesOutput {
    /// <p>An array of summary information for one or more indexes.</p>
    pub index_configuration_summary_items:
        std::option::Option<std::vec::Vec<crate::model::IndexConfigurationSummary>>,
    /// <p>If the response is truncated, Amazon Kendra returns this token that you
    /// can use in the subsequent request to retrieve the next set of
    /// indexes.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListIndicesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListIndicesOutput");
        formatter.field(
            "index_configuration_summary_items",
            &self.index_configuration_summary_items,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListIndicesOutput`](crate::output::ListIndicesOutput)
pub mod list_indices_output {
    /// A builder for [`ListIndicesOutput`](crate::output::ListIndicesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) index_configuration_summary_items:
            std::option::Option<std::vec::Vec<crate::model::IndexConfigurationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn index_configuration_summary_items(
            mut self,
            input: impl Into<crate::model::IndexConfigurationSummary>,
        ) -> Self {
            let mut v = self.index_configuration_summary_items.unwrap_or_default();
            v.push(input.into());
            self.index_configuration_summary_items = Some(v);
            self
        }
        pub fn set_index_configuration_summary_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IndexConfigurationSummary>>,
        ) -> Self {
            self.index_configuration_summary_items = input;
            self
        }
        /// <p>If the response is truncated, Amazon Kendra returns this token that you
        /// can use in the subsequent request to retrieve the next set of
        /// indexes.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListIndicesOutput`](crate::output::ListIndicesOutput)
        pub fn build(self) -> crate::output::ListIndicesOutput {
            crate::output::ListIndicesOutput {
                index_configuration_summary_items: self.index_configuration_summary_items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListIndicesOutput {
    /// Creates a new builder-style object to manufacture [`ListIndicesOutput`](crate::output::ListIndicesOutput)
    pub fn builder() -> crate::output::list_indices_output::Builder {
        crate::output::list_indices_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFaqsOutput {
    /// <p>The <code>ListFaqs</code> operation returns a page of FAQs at a time. The maximum size
    /// of the page is set by the <code>MaxResults</code> parameter. If there are more jobs in
    /// the list than the page size, Amazon Kendra returns the <code>NextPage</code> token.
    /// Include the token in the next request to the <code>ListFaqs</code> operation to return
    /// the next page of FAQs.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>information about the FAQs associated with the specified index.</p>
    pub faq_summary_items: std::option::Option<std::vec::Vec<crate::model::FaqSummary>>,
}
impl std::fmt::Debug for ListFaqsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListFaqsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("faq_summary_items", &self.faq_summary_items);
        formatter.finish()
    }
}
/// See [`ListFaqsOutput`](crate::output::ListFaqsOutput)
pub mod list_faqs_output {
    /// A builder for [`ListFaqsOutput`](crate::output::ListFaqsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) faq_summary_items: std::option::Option<std::vec::Vec<crate::model::FaqSummary>>,
    }
    impl Builder {
        /// <p>The <code>ListFaqs</code> operation returns a page of FAQs at a time. The maximum size
        /// of the page is set by the <code>MaxResults</code> parameter. If there are more jobs in
        /// the list than the page size, Amazon Kendra returns the <code>NextPage</code> token.
        /// Include the token in the next request to the <code>ListFaqs</code> operation to return
        /// the next page of FAQs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub fn faq_summary_items(mut self, input: impl Into<crate::model::FaqSummary>) -> Self {
            let mut v = self.faq_summary_items.unwrap_or_default();
            v.push(input.into());
            self.faq_summary_items = Some(v);
            self
        }
        pub fn set_faq_summary_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FaqSummary>>,
        ) -> Self {
            self.faq_summary_items = input;
            self
        }
        /// Consumes the builder and constructs a [`ListFaqsOutput`](crate::output::ListFaqsOutput)
        pub fn build(self) -> crate::output::ListFaqsOutput {
            crate::output::ListFaqsOutput {
                next_token: self.next_token,
                faq_summary_items: self.faq_summary_items,
            }
        }
    }
}
impl ListFaqsOutput {
    /// Creates a new builder-style object to manufacture [`ListFaqsOutput`](crate::output::ListFaqsOutput)
    pub fn builder() -> crate::output::list_faqs_output::Builder {
        crate::output::list_faqs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDataSourceSyncJobsOutput {
    /// <p>A history of synchronization jobs for the data source.</p>
    pub history: std::option::Option<std::vec::Vec<crate::model::DataSourceSyncJob>>,
    /// <p>The <code>GetDataSourceSyncJobHistory</code> operation returns a page
    /// of vocabularies at a time. The maximum size of the page is set by the
    /// <code>MaxResults</code> parameter. If there are more jobs in the list
    /// than the page size, Amazon Kendra returns the NextPage token. Include the
    /// token in the next request to the <code>GetDataSourceSyncJobHistory</code>
    /// operation to return in the next page of jobs.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListDataSourceSyncJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDataSourceSyncJobsOutput");
        formatter.field("history", &self.history);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDataSourceSyncJobsOutput`](crate::output::ListDataSourceSyncJobsOutput)
pub mod list_data_source_sync_jobs_output {
    /// A builder for [`ListDataSourceSyncJobsOutput`](crate::output::ListDataSourceSyncJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history: std::option::Option<std::vec::Vec<crate::model::DataSourceSyncJob>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn history(mut self, input: impl Into<crate::model::DataSourceSyncJob>) -> Self {
            let mut v = self.history.unwrap_or_default();
            v.push(input.into());
            self.history = Some(v);
            self
        }
        pub fn set_history(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataSourceSyncJob>>,
        ) -> Self {
            self.history = input;
            self
        }
        /// <p>The <code>GetDataSourceSyncJobHistory</code> operation returns a page
        /// of vocabularies at a time. The maximum size of the page is set by the
        /// <code>MaxResults</code> parameter. If there are more jobs in the list
        /// than the page size, Amazon Kendra returns the NextPage token. Include the
        /// token in the next request to the <code>GetDataSourceSyncJobHistory</code>
        /// operation to return in the next page of jobs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDataSourceSyncJobsOutput`](crate::output::ListDataSourceSyncJobsOutput)
        pub fn build(self) -> crate::output::ListDataSourceSyncJobsOutput {
            crate::output::ListDataSourceSyncJobsOutput {
                history: self.history,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDataSourceSyncJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListDataSourceSyncJobsOutput`](crate::output::ListDataSourceSyncJobsOutput)
    pub fn builder() -> crate::output::list_data_source_sync_jobs_output::Builder {
        crate::output::list_data_source_sync_jobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDataSourcesOutput {
    /// <p>An array of summary information for one or more data sources.</p>
    pub summary_items: std::option::Option<std::vec::Vec<crate::model::DataSourceSummary>>,
    /// <p>If the response is truncated, Amazon Kendra returns this token that you
    /// can use in the subsequent request to retrieve the next set of data
    /// sources. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListDataSourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDataSourcesOutput");
        formatter.field("summary_items", &self.summary_items);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDataSourcesOutput`](crate::output::ListDataSourcesOutput)
pub mod list_data_sources_output {
    /// A builder for [`ListDataSourcesOutput`](crate::output::ListDataSourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) summary_items:
            std::option::Option<std::vec::Vec<crate::model::DataSourceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn summary_items(mut self, input: impl Into<crate::model::DataSourceSummary>) -> Self {
            let mut v = self.summary_items.unwrap_or_default();
            v.push(input.into());
            self.summary_items = Some(v);
            self
        }
        pub fn set_summary_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataSourceSummary>>,
        ) -> Self {
            self.summary_items = input;
            self
        }
        /// <p>If the response is truncated, Amazon Kendra returns this token that you
        /// can use in the subsequent request to retrieve the next set of data
        /// sources. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDataSourcesOutput`](crate::output::ListDataSourcesOutput)
        pub fn build(self) -> crate::output::ListDataSourcesOutput {
            crate::output::ListDataSourcesOutput {
                summary_items: self.summary_items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDataSourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListDataSourcesOutput`](crate::output::ListDataSourcesOutput)
    pub fn builder() -> crate::output::list_data_sources_output::Builder {
        crate::output::list_data_sources_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetQuerySuggestionsOutput {
    /// <p>The unique identifier for a list of query suggestions for an index.</p>
    pub query_suggestions_id: std::option::Option<std::string::String>,
    /// <p>A list of query suggestions for an index.</p>
    pub suggestions: std::option::Option<std::vec::Vec<crate::model::Suggestion>>,
}
impl std::fmt::Debug for GetQuerySuggestionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetQuerySuggestionsOutput");
        formatter.field("query_suggestions_id", &self.query_suggestions_id);
        formatter.field("suggestions", &self.suggestions);
        formatter.finish()
    }
}
/// See [`GetQuerySuggestionsOutput`](crate::output::GetQuerySuggestionsOutput)
pub mod get_query_suggestions_output {
    /// A builder for [`GetQuerySuggestionsOutput`](crate::output::GetQuerySuggestionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) query_suggestions_id: std::option::Option<std::string::String>,
        pub(crate) suggestions: std::option::Option<std::vec::Vec<crate::model::Suggestion>>,
    }
    impl Builder {
        /// <p>The unique identifier for a list of query suggestions for an index.</p>
        pub fn query_suggestions_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.query_suggestions_id = Some(input.into());
            self
        }
        pub fn set_query_suggestions_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.query_suggestions_id = input;
            self
        }
        pub fn suggestions(mut self, input: impl Into<crate::model::Suggestion>) -> Self {
            let mut v = self.suggestions.unwrap_or_default();
            v.push(input.into());
            self.suggestions = Some(v);
            self
        }
        pub fn set_suggestions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Suggestion>>,
        ) -> Self {
            self.suggestions = input;
            self
        }
        /// Consumes the builder and constructs a [`GetQuerySuggestionsOutput`](crate::output::GetQuerySuggestionsOutput)
        pub fn build(self) -> crate::output::GetQuerySuggestionsOutput {
            crate::output::GetQuerySuggestionsOutput {
                query_suggestions_id: self.query_suggestions_id,
                suggestions: self.suggestions,
            }
        }
    }
}
impl GetQuerySuggestionsOutput {
    /// Creates a new builder-style object to manufacture [`GetQuerySuggestionsOutput`](crate::output::GetQuerySuggestionsOutput)
    pub fn builder() -> crate::output::get_query_suggestions_output::Builder {
        crate::output::get_query_suggestions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeThesaurusOutput {
    /// <p>The identifier of the thesaurus.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index associated with the thesaurus to describe.</p>
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The thesaurus name.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The thesaurus description.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>,
    /// queries are able to use the thesaurus. If the <code>Status</code> field value
    /// is <code>FAILED</code>, the <code>ErrorMessage</code> field provides
    /// more information.
    /// </p>
    /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means
    /// that Amazon Kendra could not ingest the new thesaurus file. The old
    /// thesaurus file is still active.
    /// </p>
    pub status: std::option::Option<crate::model::ThesaurusStatus>,
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the
    /// <code>ErrorMessage</code> field provides more information.
    /// </p>
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The Unix datetime that the thesaurus was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The Unix datetime that the thesaurus was last updated.</p>
    pub updated_at: std::option::Option<smithy_types::Instant>,
    /// <p>An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions
    /// to access thesaurus file specified in <code>SourceS3Path</code>.
    /// </p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Information required to find a specific file in an Amazon S3
    /// bucket.</p>
    pub source_s3_path: std::option::Option<crate::model::S3Path>,
    /// <p>The size of the thesaurus file in bytes.</p>
    pub file_size_bytes: std::option::Option<i64>,
    /// <p>The number of unique terms in the thesaurus file. For example, the
    /// synonyms <code>a,b,c</code> and <code>a=>d</code>, the term
    /// count would be 4.
    /// </p>
    pub term_count: std::option::Option<i64>,
    /// <p>The number of synonym rules in the thesaurus file.</p>
    pub synonym_rule_count: std::option::Option<i64>,
}
impl std::fmt::Debug for DescribeThesaurusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeThesaurusOutput");
        formatter.field("id", &self.id);
        formatter.field("index_id", &self.index_id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("status", &self.status);
        formatter.field("error_message", &self.error_message);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("source_s3_path", &self.source_s3_path);
        formatter.field("file_size_bytes", &self.file_size_bytes);
        formatter.field("term_count", &self.term_count);
        formatter.field("synonym_rule_count", &self.synonym_rule_count);
        formatter.finish()
    }
}
/// See [`DescribeThesaurusOutput`](crate::output::DescribeThesaurusOutput)
pub mod describe_thesaurus_output {
    /// A builder for [`DescribeThesaurusOutput`](crate::output::DescribeThesaurusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) index_id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ThesaurusStatus>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) updated_at: std::option::Option<smithy_types::Instant>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) source_s3_path: std::option::Option<crate::model::S3Path>,
        pub(crate) file_size_bytes: std::option::Option<i64>,
        pub(crate) term_count: std::option::Option<i64>,
        pub(crate) synonym_rule_count: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The identifier of the thesaurus.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The identifier of the index associated with the thesaurus to describe.</p>
        pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.index_id = Some(input.into());
            self
        }
        pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.index_id = input;
            self
        }
        /// <p>The thesaurus name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The thesaurus description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>,
        /// queries are able to use the thesaurus. If the <code>Status</code> field value
        /// is <code>FAILED</code>, the <code>ErrorMessage</code> field provides
        /// more information.
        /// </p>
        /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means
        /// that Amazon Kendra could not ingest the new thesaurus file. The old
        /// thesaurus file is still active.
        /// </p>
        pub fn status(mut self, input: crate::model::ThesaurusStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ThesaurusStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the
        /// <code>ErrorMessage</code> field provides more information.
        /// </p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>The Unix datetime that the thesaurus was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The Unix datetime that the thesaurus was last updated.</p>
        pub fn updated_at(mut self, input: smithy_types::Instant) -> Self {
            self.updated_at = Some(input);
            self
        }
        pub fn set_updated_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.updated_at = input;
            self
        }
        /// <p>An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions
        /// to access thesaurus file specified in <code>SourceS3Path</code>.
        /// </p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>Information required to find a specific file in an Amazon S3
        /// bucket.</p>
        pub fn source_s3_path(mut self, input: crate::model::S3Path) -> Self {
            self.source_s3_path = Some(input);
            self
        }
        pub fn set_source_s3_path(
            mut self,
            input: std::option::Option<crate::model::S3Path>,
        ) -> Self {
            self.source_s3_path = input;
            self
        }
        /// <p>The size of the thesaurus file in bytes.</p>
        pub fn file_size_bytes(mut self, input: i64) -> Self {
            self.file_size_bytes = Some(input);
            self
        }
        pub fn set_file_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.file_size_bytes = input;
            self
        }
        /// <p>The number of unique terms in the thesaurus file. For example, the
        /// synonyms <code>a,b,c</code> and <code>a=>d</code>, the term
        /// count would be 4.
        /// </p>
        pub fn term_count(mut self, input: i64) -> Self {
            self.term_count = Some(input);
            self
        }
        pub fn set_term_count(mut self, input: std::option::Option<i64>) -> Self {
            self.term_count = input;
            self
        }
        /// <p>The number of synonym rules in the thesaurus file.</p>
        pub fn synonym_rule_count(mut self, input: i64) -> Self {
            self.synonym_rule_count = Some(input);
            self
        }
        pub fn set_synonym_rule_count(mut self, input: std::option::Option<i64>) -> Self {
            self.synonym_rule_count = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeThesaurusOutput`](crate::output::DescribeThesaurusOutput)
        pub fn build(self) -> crate::output::DescribeThesaurusOutput {
            crate::output::DescribeThesaurusOutput {
                id: self.id,
                index_id: self.index_id,
                name: self.name,
                description: self.description,
                status: self.status,
                error_message: self.error_message,
                created_at: self.created_at,
                updated_at: self.updated_at,
                role_arn: self.role_arn,
                source_s3_path: self.source_s3_path,
                file_size_bytes: self.file_size_bytes,
                term_count: self.term_count,
                synonym_rule_count: self.synonym_rule_count,
            }
        }
    }
}
impl DescribeThesaurusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeThesaurusOutput`](crate::output::DescribeThesaurusOutput)
    pub fn builder() -> crate::output::describe_thesaurus_output::Builder {
        crate::output::describe_thesaurus_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeQuerySuggestionsConfigOutput {
    /// <p>Shows whether query suggestions are currently in
    /// <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
    /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code>
    /// turns off query suggestions for your users. You can change the mode using
    /// the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a>
    /// operation.</p>
    pub mode: std::option::Option<crate::model::Mode>,
    /// <p>Shows whether the status of query suggestions settings is currently
    /// Active or Updating.</p>
    /// <p>Active means the current settings apply and Updating means your
    /// changed settings are in the process of applying.</p>
    pub status: std::option::Option<crate::model::QuerySuggestionsStatus>,
    /// <p>Shows how recent your queries are in your query log time
    /// window (in days).</p>
    pub query_log_look_back_window_in_days: std::option::Option<i32>,
    /// <p>Shows whether Amazon Kendra uses all queries or only uses queries that
    /// include user information to generate query suggestions.</p>
    pub include_queries_without_user_information: std::option::Option<bool>,
    /// <p>Shows the minimum number of unique users who must search a query in
    /// order for the query to be eligible to suggest to your users.</p>
    pub minimum_number_of_querying_users: std::option::Option<i32>,
    /// <p>Shows the minimum number of times a query must be searched in order for
    /// the query to be eligible to suggest to your users.</p>
    pub minimum_query_count: std::option::Option<i32>,
    /// <p>Shows the date-time query suggestions for an index was last updated.</p>
    pub last_suggestions_build_time: std::option::Option<smithy_types::Instant>,
    /// <p>Shows the date-time query suggestions for an index was last cleared.</p>
    /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based
    /// on new queries added to the query log from the time you cleared suggestions.
    /// Amazon Kendra only considers re-occurences of a query from the time you cleared
    /// suggestions. </p>
    pub last_clear_time: std::option::Option<smithy_types::Instant>,
    /// <p>Shows the current total count of query suggestions for an index.</p>
    /// <p>This count can change when you update your query suggestions settings,
    /// if you filter out certain queries from suggestions using a block list,
    /// and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
    pub total_suggestions_count: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeQuerySuggestionsConfigOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeQuerySuggestionsConfigOutput");
        formatter.field("mode", &self.mode);
        formatter.field("status", &self.status);
        formatter.field(
            "query_log_look_back_window_in_days",
            &self.query_log_look_back_window_in_days,
        );
        formatter.field(
            "include_queries_without_user_information",
            &self.include_queries_without_user_information,
        );
        formatter.field(
            "minimum_number_of_querying_users",
            &self.minimum_number_of_querying_users,
        );
        formatter.field("minimum_query_count", &self.minimum_query_count);
        formatter.field(
            "last_suggestions_build_time",
            &self.last_suggestions_build_time,
        );
        formatter.field("last_clear_time", &self.last_clear_time);
        formatter.field("total_suggestions_count", &self.total_suggestions_count);
        formatter.finish()
    }
}
/// See [`DescribeQuerySuggestionsConfigOutput`](crate::output::DescribeQuerySuggestionsConfigOutput)
pub mod describe_query_suggestions_config_output {
    /// A builder for [`DescribeQuerySuggestionsConfigOutput`](crate::output::DescribeQuerySuggestionsConfigOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) mode: std::option::Option<crate::model::Mode>,
        pub(crate) status: std::option::Option<crate::model::QuerySuggestionsStatus>,
        pub(crate) query_log_look_back_window_in_days: std::option::Option<i32>,
        pub(crate) include_queries_without_user_information: std::option::Option<bool>,
        pub(crate) minimum_number_of_querying_users: std::option::Option<i32>,
        pub(crate) minimum_query_count: std::option::Option<i32>,
        pub(crate) last_suggestions_build_time: std::option::Option<smithy_types::Instant>,
        pub(crate) last_clear_time: std::option::Option<smithy_types::Instant>,
        pub(crate) total_suggestions_count: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>Shows whether query suggestions are currently in
        /// <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
        /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code>
        /// turns off query suggestions for your users. You can change the mode using
        /// the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a>
        /// operation.</p>
        pub fn mode(mut self, input: crate::model::Mode) -> Self {
            self.mode = Some(input);
            self
        }
        pub fn set_mode(mut self, input: std::option::Option<crate::model::Mode>) -> Self {
            self.mode = input;
            self
        }
        /// <p>Shows whether the status of query suggestions settings is currently
        /// Active or Updating.</p>
        /// <p>Active means the current settings apply and Updating means your
        /// changed settings are in the process of applying.</p>
        pub fn status(mut self, input: crate::model::QuerySuggestionsStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::QuerySuggestionsStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>Shows how recent your queries are in your query log time
        /// window (in days).</p>
        pub fn query_log_look_back_window_in_days(mut self, input: i32) -> Self {
            self.query_log_look_back_window_in_days = Some(input);
            self
        }
        pub fn set_query_log_look_back_window_in_days(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.query_log_look_back_window_in_days = input;
            self
        }
        /// <p>Shows whether Amazon Kendra uses all queries or only uses queries that
        /// include user information to generate query suggestions.</p>
        pub fn include_queries_without_user_information(mut self, input: bool) -> Self {
            self.include_queries_without_user_information = Some(input);
            self
        }
        pub fn set_include_queries_without_user_information(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.include_queries_without_user_information = input;
            self
        }
        /// <p>Shows the minimum number of unique users who must search a query in
        /// order for the query to be eligible to suggest to your users.</p>
        pub fn minimum_number_of_querying_users(mut self, input: i32) -> Self {
            self.minimum_number_of_querying_users = Some(input);
            self
        }
        pub fn set_minimum_number_of_querying_users(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.minimum_number_of_querying_users = input;
            self
        }
        /// <p>Shows the minimum number of times a query must be searched in order for
        /// the query to be eligible to suggest to your users.</p>
        pub fn minimum_query_count(mut self, input: i32) -> Self {
            self.minimum_query_count = Some(input);
            self
        }
        pub fn set_minimum_query_count(mut self, input: std::option::Option<i32>) -> Self {
            self.minimum_query_count = input;
            self
        }
        /// <p>Shows the date-time query suggestions for an index was last updated.</p>
        pub fn last_suggestions_build_time(mut self, input: smithy_types::Instant) -> Self {
            self.last_suggestions_build_time = Some(input);
            self
        }
        pub fn set_last_suggestions_build_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_suggestions_build_time = input;
            self
        }
        /// <p>Shows the date-time query suggestions for an index was last cleared.</p>
        /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based
        /// on new queries added to the query log from the time you cleared suggestions.
        /// Amazon Kendra only considers re-occurences of a query from the time you cleared
        /// suggestions. </p>
        pub fn last_clear_time(mut self, input: smithy_types::Instant) -> Self {
            self.last_clear_time = Some(input);
            self
        }
        pub fn set_last_clear_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_clear_time = input;
            self
        }
        /// <p>Shows the current total count of query suggestions for an index.</p>
        /// <p>This count can change when you update your query suggestions settings,
        /// if you filter out certain queries from suggestions using a block list,
        /// and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
        pub fn total_suggestions_count(mut self, input: i32) -> Self {
            self.total_suggestions_count = Some(input);
            self
        }
        pub fn set_total_suggestions_count(mut self, input: std::option::Option<i32>) -> Self {
            self.total_suggestions_count = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeQuerySuggestionsConfigOutput`](crate::output::DescribeQuerySuggestionsConfigOutput)
        pub fn build(self) -> crate::output::DescribeQuerySuggestionsConfigOutput {
            crate::output::DescribeQuerySuggestionsConfigOutput {
                mode: self.mode,
                status: self.status,
                query_log_look_back_window_in_days: self.query_log_look_back_window_in_days,
                include_queries_without_user_information: self
                    .include_queries_without_user_information,
                minimum_number_of_querying_users: self.minimum_number_of_querying_users,
                minimum_query_count: self.minimum_query_count,
                last_suggestions_build_time: self.last_suggestions_build_time,
                last_clear_time: self.last_clear_time,
                total_suggestions_count: self.total_suggestions_count,
            }
        }
    }
}
impl DescribeQuerySuggestionsConfigOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQuerySuggestionsConfigOutput`](crate::output::DescribeQuerySuggestionsConfigOutput)
    pub fn builder() -> crate::output::describe_query_suggestions_config_output::Builder {
        crate::output::describe_query_suggestions_config_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeQuerySuggestionsBlockListOutput {
    /// <p>Shows the identifier of the index for the block list.</p>
    pub index_id: std::option::Option<std::string::String>,
    /// <p>Shows the unique identifier of the block list.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>Shows the name of the block list.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>Shows the description for the block list.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Shows whether the current status of the block list is
    /// <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub status: std::option::Option<crate::model::QuerySuggestionsBlockListStatus>,
    /// <p>Shows the error message with details when there are issues in
    /// processing the block list.</p>
    pub error_message: std::option::Option<std::string::String>,
    /// <p>Shows the date-time a block list for query suggestions was last created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>Shows the date-time a block list for query suggestions was last updated.</p>
    pub updated_at: std::option::Option<smithy_types::Instant>,
    /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
    /// <p>Each block word or phrase should be on a separate line in a text file.</p>
    /// <p>For information on the current quota limits for block lists, see
    /// <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
    /// for Amazon Kendra</a>.</p>
    pub source_s3_path: std::option::Option<crate::model::S3Path>,
    /// <p>Shows the current number of valid, non-empty words or phrases in
    /// the block list text file.</p>
    pub item_count: std::option::Option<i32>,
    /// <p>Shows the current size of the block list text file in S3.</p>
    pub file_size_bytes: std::option::Option<i64>,
    /// <p>Shows the current IAM (Identity and Access Management) role used by
    /// Amazon Kendra to access the block list text file in S3.</p>
    /// <p>The role needs S3 read permissions to your file in S3 and needs to
    /// give STS (Security Token Service) assume role permissions to
    /// Amazon Kendra.</p>
    pub role_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeQuerySuggestionsBlockListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeQuerySuggestionsBlockListOutput");
        formatter.field("index_id", &self.index_id);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("status", &self.status);
        formatter.field("error_message", &self.error_message);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("source_s3_path", &self.source_s3_path);
        formatter.field("item_count", &self.item_count);
        formatter.field("file_size_bytes", &self.file_size_bytes);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
/// See [`DescribeQuerySuggestionsBlockListOutput`](crate::output::DescribeQuerySuggestionsBlockListOutput)
pub mod describe_query_suggestions_block_list_output {
    /// A builder for [`DescribeQuerySuggestionsBlockListOutput`](crate::output::DescribeQuerySuggestionsBlockListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) index_id: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::QuerySuggestionsBlockListStatus>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) updated_at: std::option::Option<smithy_types::Instant>,
        pub(crate) source_s3_path: std::option::Option<crate::model::S3Path>,
        pub(crate) item_count: std::option::Option<i32>,
        pub(crate) file_size_bytes: std::option::Option<i64>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Shows the identifier of the index for the block list.</p>
        pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.index_id = Some(input.into());
            self
        }
        pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.index_id = input;
            self
        }
        /// <p>Shows the unique identifier of the block list.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>Shows the name of the block list.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>Shows the description for the block list.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Shows whether the current status of the block list is
        /// <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
        pub fn status(mut self, input: crate::model::QuerySuggestionsBlockListStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::QuerySuggestionsBlockListStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>Shows the error message with details when there are issues in
        /// processing the block list.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>Shows the date-time a block list for query suggestions was last created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>Shows the date-time a block list for query suggestions was last updated.</p>
        pub fn updated_at(mut self, input: smithy_types::Instant) -> Self {
            self.updated_at = Some(input);
            self
        }
        pub fn set_updated_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.updated_at = input;
            self
        }
        /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
        /// <p>Each block word or phrase should be on a separate line in a text file.</p>
        /// <p>For information on the current quota limits for block lists, see
        /// <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
        /// for Amazon Kendra</a>.</p>
        pub fn source_s3_path(mut self, input: crate::model::S3Path) -> Self {
            self.source_s3_path = Some(input);
            self
        }
        pub fn set_source_s3_path(
            mut self,
            input: std::option::Option<crate::model::S3Path>,
        ) -> Self {
            self.source_s3_path = input;
            self
        }
        /// <p>Shows the current number of valid, non-empty words or phrases in
        /// the block list text file.</p>
        pub fn item_count(mut self, input: i32) -> Self {
            self.item_count = Some(input);
            self
        }
        pub fn set_item_count(mut self, input: std::option::Option<i32>) -> Self {
            self.item_count = input;
            self
        }
        /// <p>Shows the current size of the block list text file in S3.</p>
        pub fn file_size_bytes(mut self, input: i64) -> Self {
            self.file_size_bytes = Some(input);
            self
        }
        pub fn set_file_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.file_size_bytes = input;
            self
        }
        /// <p>Shows the current IAM (Identity and Access Management) role used by
        /// Amazon Kendra to access the block list text file in S3.</p>
        /// <p>The role needs S3 read permissions to your file in S3 and needs to
        /// give STS (Security Token Service) assume role permissions to
        /// Amazon Kendra.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeQuerySuggestionsBlockListOutput`](crate::output::DescribeQuerySuggestionsBlockListOutput)
        pub fn build(self) -> crate::output::DescribeQuerySuggestionsBlockListOutput {
            crate::output::DescribeQuerySuggestionsBlockListOutput {
                index_id: self.index_id,
                id: self.id,
                name: self.name,
                description: self.description,
                status: self.status,
                error_message: self.error_message,
                created_at: self.created_at,
                updated_at: self.updated_at,
                source_s3_path: self.source_s3_path,
                item_count: self.item_count,
                file_size_bytes: self.file_size_bytes,
                role_arn: self.role_arn,
            }
        }
    }
}
impl DescribeQuerySuggestionsBlockListOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQuerySuggestionsBlockListOutput`](crate::output::DescribeQuerySuggestionsBlockListOutput)
    pub fn builder() -> crate::output::describe_query_suggestions_block_list_output::Builder {
        crate::output::describe_query_suggestions_block_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeIndexOutput {
    /// <p>The name of the index.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the index.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Kendra edition used for the index. You decide the edition
    /// when you create the index.</p>
    pub edition: std::option::Option<crate::model::IndexEdition>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra
    /// permission to write to your Amazon Cloudwatch logs.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the AWS KMS customer master key (CMK) used to
    /// encrypt your data. Amazon Kendra doesn't support asymmetric CMKs.</p>
    pub server_side_encryption_configuration:
        std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
    /// <p>The current status of the index. When the value is
    /// <code>ACTIVE</code>, the index is ready for use. If the
    /// <code>Status</code> field value is <code>FAILED</code>, the
    /// <code>ErrorMessage</code> field contains a message that explains
    /// why.</p>
    pub status: std::option::Option<crate::model::IndexStatus>,
    /// <p>The description of the index.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Unix datetime that the index was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The Unix datetime that the index was last updated.</p>
    pub updated_at: std::option::Option<smithy_types::Instant>,
    /// <p>Configuration settings for any metadata applied to the documents in
    /// the index.</p>
    pub document_metadata_configurations:
        std::option::Option<std::vec::Vec<crate::model::DocumentMetadataConfiguration>>,
    /// <p>Provides information about the number of FAQ questions and answers and
    /// the number of text documents indexed.</p>
    pub index_statistics: std::option::Option<crate::model::IndexStatistics>,
    /// <p>When th e<code>Status</code> field value is <code>FAILED</code>, the
    /// <code>ErrorMessage</code> field contains a message that explains
    /// why.</p>
    pub error_message: std::option::Option<std::string::String>,
    /// <p>For Enterprise edition indexes, you can choose to use additional
    /// capacity to meet the needs of your application. This contains the capacity
    /// units used for the index. A 0 for the query capacity or the storage
    /// capacity indicates that the index is using the default capacity for the
    /// index.</p>
    pub capacity_units: std::option::Option<crate::model::CapacityUnitsConfiguration>,
    /// <p>The user token configuration for the Amazon Kendra index.</p>
    pub user_token_configurations:
        std::option::Option<std::vec::Vec<crate::model::UserTokenConfiguration>>,
    /// <p>The user context policy for the Amazon Kendra index.</p>
    pub user_context_policy: std::option::Option<crate::model::UserContextPolicy>,
}
impl std::fmt::Debug for DescribeIndexOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeIndexOutput");
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("edition", &self.edition);
        formatter.field("role_arn", &self.role_arn);
        formatter.field(
            "server_side_encryption_configuration",
            &self.server_side_encryption_configuration,
        );
        formatter.field("status", &self.status);
        formatter.field("description", &self.description);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field(
            "document_metadata_configurations",
            &self.document_metadata_configurations,
        );
        formatter.field("index_statistics", &self.index_statistics);
        formatter.field("error_message", &self.error_message);
        formatter.field("capacity_units", &self.capacity_units);
        formatter.field("user_token_configurations", &self.user_token_configurations);
        formatter.field("user_context_policy", &self.user_context_policy);
        formatter.finish()
    }
}
/// See [`DescribeIndexOutput`](crate::output::DescribeIndexOutput)
pub mod describe_index_output {
    /// A builder for [`DescribeIndexOutput`](crate::output::DescribeIndexOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) edition: std::option::Option<crate::model::IndexEdition>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) server_side_encryption_configuration:
            std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
        pub(crate) status: std::option::Option<crate::model::IndexStatus>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) updated_at: std::option::Option<smithy_types::Instant>,
        pub(crate) document_metadata_configurations:
            std::option::Option<std::vec::Vec<crate::model::DocumentMetadataConfiguration>>,
        pub(crate) index_statistics: std::option::Option<crate::model::IndexStatistics>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) capacity_units: std::option::Option<crate::model::CapacityUnitsConfiguration>,
        pub(crate) user_token_configurations:
            std::option::Option<std::vec::Vec<crate::model::UserTokenConfiguration>>,
        pub(crate) user_context_policy: std::option::Option<crate::model::UserContextPolicy>,
    }
    impl Builder {
        /// <p>The name of the index.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The name of the index.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Kendra edition used for the index. You decide the edition
        /// when you create the index.</p>
        pub fn edition(mut self, input: crate::model::IndexEdition) -> Self {
            self.edition = Some(input);
            self
        }
        pub fn set_edition(
            mut self,
            input: std::option::Option<crate::model::IndexEdition>,
        ) -> Self {
            self.edition = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra
        /// permission to write to your Amazon Cloudwatch logs.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The identifier of the AWS KMS customer master key (CMK) used to
        /// encrypt your data. Amazon Kendra doesn't support asymmetric CMKs.</p>
        pub fn server_side_encryption_configuration(
            mut self,
            input: crate::model::ServerSideEncryptionConfiguration,
        ) -> Self {
            self.server_side_encryption_configuration = Some(input);
            self
        }
        pub fn set_server_side_encryption_configuration(
            mut self,
            input: std::option::Option<crate::model::ServerSideEncryptionConfiguration>,
        ) -> Self {
            self.server_side_encryption_configuration = input;
            self
        }
        /// <p>The current status of the index. When the value is
        /// <code>ACTIVE</code>, the index is ready for use. If the
        /// <code>Status</code> field value is <code>FAILED</code>, the
        /// <code>ErrorMessage</code> field contains a message that explains
        /// why.</p>
        pub fn status(mut self, input: crate::model::IndexStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::IndexStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The description of the index.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Unix datetime that the index was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The Unix datetime that the index was last updated.</p>
        pub fn updated_at(mut self, input: smithy_types::Instant) -> Self {
            self.updated_at = Some(input);
            self
        }
        pub fn set_updated_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.updated_at = input;
            self
        }
        pub fn document_metadata_configurations(
            mut self,
            input: impl Into<crate::model::DocumentMetadataConfiguration>,
        ) -> Self {
            let mut v = self.document_metadata_configurations.unwrap_or_default();
            v.push(input.into());
            self.document_metadata_configurations = Some(v);
            self
        }
        pub fn set_document_metadata_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DocumentMetadataConfiguration>>,
        ) -> Self {
            self.document_metadata_configurations = input;
            self
        }
        /// <p>Provides information about the number of FAQ questions and answers and
        /// the number of text documents indexed.</p>
        pub fn index_statistics(mut self, input: crate::model::IndexStatistics) -> Self {
            self.index_statistics = Some(input);
            self
        }
        pub fn set_index_statistics(
            mut self,
            input: std::option::Option<crate::model::IndexStatistics>,
        ) -> Self {
            self.index_statistics = input;
            self
        }
        /// <p>When th e<code>Status</code> field value is <code>FAILED</code>, the
        /// <code>ErrorMessage</code> field contains a message that explains
        /// why.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>For Enterprise edition indexes, you can choose to use additional
        /// capacity to meet the needs of your application. This contains the capacity
        /// units used for the index. A 0 for the query capacity or the storage
        /// capacity indicates that the index is using the default capacity for the
        /// index.</p>
        pub fn capacity_units(mut self, input: crate::model::CapacityUnitsConfiguration) -> Self {
            self.capacity_units = Some(input);
            self
        }
        pub fn set_capacity_units(
            mut self,
            input: std::option::Option<crate::model::CapacityUnitsConfiguration>,
        ) -> Self {
            self.capacity_units = input;
            self
        }
        pub fn user_token_configurations(
            mut self,
            input: impl Into<crate::model::UserTokenConfiguration>,
        ) -> Self {
            let mut v = self.user_token_configurations.unwrap_or_default();
            v.push(input.into());
            self.user_token_configurations = Some(v);
            self
        }
        pub fn set_user_token_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserTokenConfiguration>>,
        ) -> Self {
            self.user_token_configurations = input;
            self
        }
        /// <p>The user context policy for the Amazon Kendra index.</p>
        pub fn user_context_policy(mut self, input: crate::model::UserContextPolicy) -> Self {
            self.user_context_policy = Some(input);
            self
        }
        pub fn set_user_context_policy(
            mut self,
            input: std::option::Option<crate::model::UserContextPolicy>,
        ) -> Self {
            self.user_context_policy = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIndexOutput`](crate::output::DescribeIndexOutput)
        pub fn build(self) -> crate::output::DescribeIndexOutput {
            crate::output::DescribeIndexOutput {
                name: self.name,
                id: self.id,
                edition: self.edition,
                role_arn: self.role_arn,
                server_side_encryption_configuration: self.server_side_encryption_configuration,
                status: self.status,
                description: self.description,
                created_at: self.created_at,
                updated_at: self.updated_at,
                document_metadata_configurations: self.document_metadata_configurations,
                index_statistics: self.index_statistics,
                error_message: self.error_message,
                capacity_units: self.capacity_units,
                user_token_configurations: self.user_token_configurations,
                user_context_policy: self.user_context_policy,
            }
        }
    }
}
impl DescribeIndexOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIndexOutput`](crate::output::DescribeIndexOutput)
    pub fn builder() -> crate::output::describe_index_output::Builder {
        crate::output::describe_index_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFaqOutput {
    /// <p>The identifier of the FAQ.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index that contains the FAQ.</p>
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The name that you gave the FAQ when it was created.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the FAQ that you provided when it was created.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The date and time that the FAQ was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The date and time that the FAQ was last updated.</p>
    pub updated_at: std::option::Option<smithy_types::Instant>,
    /// <p>Information required to find a specific file in an Amazon S3
    /// bucket.</p>
    pub s3_path: std::option::Option<crate::model::S3Path>,
    /// <p>The status of the FAQ. It is ready to use when the status is
    /// <code>ACTIVE</code>.</p>
    pub status: std::option::Option<crate::model::FaqStatus>,
    /// <p>The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket
    /// containing the input files for the FAQ.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>If the <code>Status</code> field is <code>FAILED</code>, the <code>ErrorMessage</code>
    /// field contains the reason why the FAQ failed.</p>
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The file format used by the input files for the FAQ.</p>
    pub file_format: std::option::Option<crate::model::FaqFileFormat>,
}
impl std::fmt::Debug for DescribeFaqOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFaqOutput");
        formatter.field("id", &self.id);
        formatter.field("index_id", &self.index_id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("s3_path", &self.s3_path);
        formatter.field("status", &self.status);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("error_message", &self.error_message);
        formatter.field("file_format", &self.file_format);
        formatter.finish()
    }
}
/// See [`DescribeFaqOutput`](crate::output::DescribeFaqOutput)
pub mod describe_faq_output {
    /// A builder for [`DescribeFaqOutput`](crate::output::DescribeFaqOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) index_id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) updated_at: std::option::Option<smithy_types::Instant>,
        pub(crate) s3_path: std::option::Option<crate::model::S3Path>,
        pub(crate) status: std::option::Option<crate::model::FaqStatus>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) file_format: std::option::Option<crate::model::FaqFileFormat>,
    }
    impl Builder {
        /// <p>The identifier of the FAQ.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The identifier of the index that contains the FAQ.</p>
        pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.index_id = Some(input.into());
            self
        }
        pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.index_id = input;
            self
        }
        /// <p>The name that you gave the FAQ when it was created.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the FAQ that you provided when it was created.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The date and time that the FAQ was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The date and time that the FAQ was last updated.</p>
        pub fn updated_at(mut self, input: smithy_types::Instant) -> Self {
            self.updated_at = Some(input);
            self
        }
        pub fn set_updated_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.updated_at = input;
            self
        }
        /// <p>Information required to find a specific file in an Amazon S3
        /// bucket.</p>
        pub fn s3_path(mut self, input: crate::model::S3Path) -> Self {
            self.s3_path = Some(input);
            self
        }
        pub fn set_s3_path(mut self, input: std::option::Option<crate::model::S3Path>) -> Self {
            self.s3_path = input;
            self
        }
        /// <p>The status of the FAQ. It is ready to use when the status is
        /// <code>ACTIVE</code>.</p>
        pub fn status(mut self, input: crate::model::FaqStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::FaqStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket
        /// containing the input files for the FAQ.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>If the <code>Status</code> field is <code>FAILED</code>, the <code>ErrorMessage</code>
        /// field contains the reason why the FAQ failed.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>The file format used by the input files for the FAQ.</p>
        pub fn file_format(mut self, input: crate::model::FaqFileFormat) -> Self {
            self.file_format = Some(input);
            self
        }
        pub fn set_file_format(
            mut self,
            input: std::option::Option<crate::model::FaqFileFormat>,
        ) -> Self {
            self.file_format = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFaqOutput`](crate::output::DescribeFaqOutput)
        pub fn build(self) -> crate::output::DescribeFaqOutput {
            crate::output::DescribeFaqOutput {
                id: self.id,
                index_id: self.index_id,
                name: self.name,
                description: self.description,
                created_at: self.created_at,
                updated_at: self.updated_at,
                s3_path: self.s3_path,
                status: self.status,
                role_arn: self.role_arn,
                error_message: self.error_message,
                file_format: self.file_format,
            }
        }
    }
}
impl DescribeFaqOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFaqOutput`](crate::output::DescribeFaqOutput)
    pub fn builder() -> crate::output::describe_faq_output::Builder {
        crate::output::describe_faq_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDataSourceOutput {
    /// <p>The identifier of the data source.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index that contains the data source.</p>
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The name that you gave the data source when it was created.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of the data source.</p>
    pub r#type: std::option::Option<crate::model::DataSourceType>,
    /// <p>Information that describes where the data source is located and how
    /// the data source is configured. The specific information in the description
    /// depends on the data source provider.</p>
    pub configuration: std::option::Option<crate::model::DataSourceConfiguration>,
    /// <p>The Unix timestamp of when the data source was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The Unix timestamp of when the data source was last updated.</p>
    pub updated_at: std::option::Option<smithy_types::Instant>,
    /// <p>The description of the data source.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The current status of the data source. When the status is
    /// <code>ACTIVE</code> the data source is ready to use. When the status is
    /// <code>FAILED</code>, the <code>ErrorMessage</code> field contains the
    /// reason that the data source failed.</p>
    pub status: std::option::Option<crate::model::DataSourceStatus>,
    /// <p>The schedule that Amazon Kendra will update the data source.</p>
    pub schedule: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the role that enables the data
    /// source to access its resources.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the
    /// <code>ErrorMessage</code> field contains a description of the error that
    /// caused the data source to fail.</p>
    pub error_message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDataSourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDataSourceOutput");
        formatter.field("id", &self.id);
        formatter.field("index_id", &self.index_id);
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("configuration", &self.configuration);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("description", &self.description);
        formatter.field("status", &self.status);
        formatter.field("schedule", &self.schedule);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("error_message", &self.error_message);
        formatter.finish()
    }
}
/// See [`DescribeDataSourceOutput`](crate::output::DescribeDataSourceOutput)
pub mod describe_data_source_output {
    /// A builder for [`DescribeDataSourceOutput`](crate::output::DescribeDataSourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) index_id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::DataSourceType>,
        pub(crate) configuration: std::option::Option<crate::model::DataSourceConfiguration>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) updated_at: std::option::Option<smithy_types::Instant>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::DataSourceStatus>,
        pub(crate) schedule: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) error_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the data source.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The identifier of the index that contains the data source.</p>
        pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.index_id = Some(input.into());
            self
        }
        pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.index_id = input;
            self
        }
        /// <p>The name that you gave the data source when it was created.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The type of the data source.</p>
        pub fn r#type(mut self, input: crate::model::DataSourceType) -> Self {
            self.r#type = Some(input);
            self
        }
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::DataSourceType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>Information that describes where the data source is located and how
        /// the data source is configured. The specific information in the description
        /// depends on the data source provider.</p>
        pub fn configuration(mut self, input: crate::model::DataSourceConfiguration) -> Self {
            self.configuration = Some(input);
            self
        }
        pub fn set_configuration(
            mut self,
            input: std::option::Option<crate::model::DataSourceConfiguration>,
        ) -> Self {
            self.configuration = input;
            self
        }
        /// <p>The Unix timestamp of when the data source was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The Unix timestamp of when the data source was last updated.</p>
        pub fn updated_at(mut self, input: smithy_types::Instant) -> Self {
            self.updated_at = Some(input);
            self
        }
        pub fn set_updated_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.updated_at = input;
            self
        }
        /// <p>The description of the data source.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The current status of the data source. When the status is
        /// <code>ACTIVE</code> the data source is ready to use. When the status is
        /// <code>FAILED</code>, the <code>ErrorMessage</code> field contains the
        /// reason that the data source failed.</p>
        pub fn status(mut self, input: crate::model::DataSourceStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DataSourceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The schedule that Amazon Kendra will update the data source.</p>
        pub fn schedule(mut self, input: impl Into<std::string::String>) -> Self {
            self.schedule = Some(input.into());
            self
        }
        pub fn set_schedule(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schedule = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the role that enables the data
        /// source to access its resources.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the
        /// <code>ErrorMessage</code> field contains a description of the error that
        /// caused the data source to fail.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDataSourceOutput`](crate::output::DescribeDataSourceOutput)
        pub fn build(self) -> crate::output::DescribeDataSourceOutput {
            crate::output::DescribeDataSourceOutput {
                id: self.id,
                index_id: self.index_id,
                name: self.name,
                r#type: self.r#type,
                configuration: self.configuration,
                created_at: self.created_at,
                updated_at: self.updated_at,
                description: self.description,
                status: self.status,
                schedule: self.schedule,
                role_arn: self.role_arn,
                error_message: self.error_message,
            }
        }
    }
}
impl DescribeDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDataSourceOutput`](crate::output::DescribeDataSourceOutput)
    pub fn builder() -> crate::output::describe_data_source_output::Builder {
        crate::output::describe_data_source_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteThesaurusOutput {}
impl std::fmt::Debug for DeleteThesaurusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteThesaurusOutput");
        formatter.finish()
    }
}
/// See [`DeleteThesaurusOutput`](crate::output::DeleteThesaurusOutput)
pub mod delete_thesaurus_output {
    /// A builder for [`DeleteThesaurusOutput`](crate::output::DeleteThesaurusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteThesaurusOutput`](crate::output::DeleteThesaurusOutput)
        pub fn build(self) -> crate::output::DeleteThesaurusOutput {
            crate::output::DeleteThesaurusOutput {}
        }
    }
}
impl DeleteThesaurusOutput {
    /// Creates a new builder-style object to manufacture [`DeleteThesaurusOutput`](crate::output::DeleteThesaurusOutput)
    pub fn builder() -> crate::output::delete_thesaurus_output::Builder {
        crate::output::delete_thesaurus_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteQuerySuggestionsBlockListOutput {}
impl std::fmt::Debug for DeleteQuerySuggestionsBlockListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteQuerySuggestionsBlockListOutput");
        formatter.finish()
    }
}
/// See [`DeleteQuerySuggestionsBlockListOutput`](crate::output::DeleteQuerySuggestionsBlockListOutput)
pub mod delete_query_suggestions_block_list_output {
    /// A builder for [`DeleteQuerySuggestionsBlockListOutput`](crate::output::DeleteQuerySuggestionsBlockListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteQuerySuggestionsBlockListOutput`](crate::output::DeleteQuerySuggestionsBlockListOutput)
        pub fn build(self) -> crate::output::DeleteQuerySuggestionsBlockListOutput {
            crate::output::DeleteQuerySuggestionsBlockListOutput {}
        }
    }
}
impl DeleteQuerySuggestionsBlockListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteQuerySuggestionsBlockListOutput`](crate::output::DeleteQuerySuggestionsBlockListOutput)
    pub fn builder() -> crate::output::delete_query_suggestions_block_list_output::Builder {
        crate::output::delete_query_suggestions_block_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteIndexOutput {}
impl std::fmt::Debug for DeleteIndexOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteIndexOutput");
        formatter.finish()
    }
}
/// See [`DeleteIndexOutput`](crate::output::DeleteIndexOutput)
pub mod delete_index_output {
    /// A builder for [`DeleteIndexOutput`](crate::output::DeleteIndexOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteIndexOutput`](crate::output::DeleteIndexOutput)
        pub fn build(self) -> crate::output::DeleteIndexOutput {
            crate::output::DeleteIndexOutput {}
        }
    }
}
impl DeleteIndexOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIndexOutput`](crate::output::DeleteIndexOutput)
    pub fn builder() -> crate::output::delete_index_output::Builder {
        crate::output::delete_index_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteFaqOutput {}
impl std::fmt::Debug for DeleteFaqOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteFaqOutput");
        formatter.finish()
    }
}
/// See [`DeleteFaqOutput`](crate::output::DeleteFaqOutput)
pub mod delete_faq_output {
    /// A builder for [`DeleteFaqOutput`](crate::output::DeleteFaqOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteFaqOutput`](crate::output::DeleteFaqOutput)
        pub fn build(self) -> crate::output::DeleteFaqOutput {
            crate::output::DeleteFaqOutput {}
        }
    }
}
impl DeleteFaqOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFaqOutput`](crate::output::DeleteFaqOutput)
    pub fn builder() -> crate::output::delete_faq_output::Builder {
        crate::output::delete_faq_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDataSourceOutput {}
impl std::fmt::Debug for DeleteDataSourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDataSourceOutput");
        formatter.finish()
    }
}
/// See [`DeleteDataSourceOutput`](crate::output::DeleteDataSourceOutput)
pub mod delete_data_source_output {
    /// A builder for [`DeleteDataSourceOutput`](crate::output::DeleteDataSourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDataSourceOutput`](crate::output::DeleteDataSourceOutput)
        pub fn build(self) -> crate::output::DeleteDataSourceOutput {
            crate::output::DeleteDataSourceOutput {}
        }
    }
}
impl DeleteDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDataSourceOutput`](crate::output::DeleteDataSourceOutput)
    pub fn builder() -> crate::output::delete_data_source_output::Builder {
        crate::output::delete_data_source_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateThesaurusOutput {
    /// <p>The unique identifier of the thesaurus.
    /// </p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateThesaurusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateThesaurusOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateThesaurusOutput`](crate::output::CreateThesaurusOutput)
pub mod create_thesaurus_output {
    /// A builder for [`CreateThesaurusOutput`](crate::output::CreateThesaurusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the thesaurus.
        /// </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateThesaurusOutput`](crate::output::CreateThesaurusOutput)
        pub fn build(self) -> crate::output::CreateThesaurusOutput {
            crate::output::CreateThesaurusOutput { id: self.id }
        }
    }
}
impl CreateThesaurusOutput {
    /// Creates a new builder-style object to manufacture [`CreateThesaurusOutput`](crate::output::CreateThesaurusOutput)
    pub fn builder() -> crate::output::create_thesaurus_output::Builder {
        crate::output::create_thesaurus_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateQuerySuggestionsBlockListOutput {
    /// <p>The unique identifier of the created block list.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateQuerySuggestionsBlockListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateQuerySuggestionsBlockListOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateQuerySuggestionsBlockListOutput`](crate::output::CreateQuerySuggestionsBlockListOutput)
pub mod create_query_suggestions_block_list_output {
    /// A builder for [`CreateQuerySuggestionsBlockListOutput`](crate::output::CreateQuerySuggestionsBlockListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the created block list.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateQuerySuggestionsBlockListOutput`](crate::output::CreateQuerySuggestionsBlockListOutput)
        pub fn build(self) -> crate::output::CreateQuerySuggestionsBlockListOutput {
            crate::output::CreateQuerySuggestionsBlockListOutput { id: self.id }
        }
    }
}
impl CreateQuerySuggestionsBlockListOutput {
    /// Creates a new builder-style object to manufacture [`CreateQuerySuggestionsBlockListOutput`](crate::output::CreateQuerySuggestionsBlockListOutput)
    pub fn builder() -> crate::output::create_query_suggestions_block_list_output::Builder {
        crate::output::create_query_suggestions_block_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateIndexOutput {
    /// <p>The unique identifier of the index. Use this identifier when you query
    /// an index, set up a data source, or index a document.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateIndexOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateIndexOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateIndexOutput`](crate::output::CreateIndexOutput)
pub mod create_index_output {
    /// A builder for [`CreateIndexOutput`](crate::output::CreateIndexOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the index. Use this identifier when you query
        /// an index, set up a data source, or index a document.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateIndexOutput`](crate::output::CreateIndexOutput)
        pub fn build(self) -> crate::output::CreateIndexOutput {
            crate::output::CreateIndexOutput { id: self.id }
        }
    }
}
impl CreateIndexOutput {
    /// Creates a new builder-style object to manufacture [`CreateIndexOutput`](crate::output::CreateIndexOutput)
    pub fn builder() -> crate::output::create_index_output::Builder {
        crate::output::create_index_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateFaqOutput {
    /// <p>The unique identifier of the FAQ.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateFaqOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFaqOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateFaqOutput`](crate::output::CreateFaqOutput)
pub mod create_faq_output {
    /// A builder for [`CreateFaqOutput`](crate::output::CreateFaqOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique identifier of the FAQ.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateFaqOutput`](crate::output::CreateFaqOutput)
        pub fn build(self) -> crate::output::CreateFaqOutput {
            crate::output::CreateFaqOutput { id: self.id }
        }
    }
}
impl CreateFaqOutput {
    /// Creates a new builder-style object to manufacture [`CreateFaqOutput`](crate::output::CreateFaqOutput)
    pub fn builder() -> crate::output::create_faq_output::Builder {
        crate::output::create_faq_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDataSourceOutput {
    /// <p>A unique identifier for the data source.</p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateDataSourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataSourceOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`CreateDataSourceOutput`](crate::output::CreateDataSourceOutput)
pub mod create_data_source_output {
    /// A builder for [`CreateDataSourceOutput`](crate::output::CreateDataSourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the data source.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDataSourceOutput`](crate::output::CreateDataSourceOutput)
        pub fn build(self) -> crate::output::CreateDataSourceOutput {
            crate::output::CreateDataSourceOutput { id: self.id }
        }
    }
}
impl CreateDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`CreateDataSourceOutput`](crate::output::CreateDataSourceOutput)
    pub fn builder() -> crate::output::create_data_source_output::Builder {
        crate::output::create_data_source_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ClearQuerySuggestionsOutput {}
impl std::fmt::Debug for ClearQuerySuggestionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ClearQuerySuggestionsOutput");
        formatter.finish()
    }
}
/// See [`ClearQuerySuggestionsOutput`](crate::output::ClearQuerySuggestionsOutput)
pub mod clear_query_suggestions_output {
    /// A builder for [`ClearQuerySuggestionsOutput`](crate::output::ClearQuerySuggestionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ClearQuerySuggestionsOutput`](crate::output::ClearQuerySuggestionsOutput)
        pub fn build(self) -> crate::output::ClearQuerySuggestionsOutput {
            crate::output::ClearQuerySuggestionsOutput {}
        }
    }
}
impl ClearQuerySuggestionsOutput {
    /// Creates a new builder-style object to manufacture [`ClearQuerySuggestionsOutput`](crate::output::ClearQuerySuggestionsOutput)
    pub fn builder() -> crate::output::clear_query_suggestions_output::Builder {
        crate::output::clear_query_suggestions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchPutDocumentOutput {
    /// <p>A list of documents that were not added to the index because the
    /// document failed a validation check. Each document contains an error
    /// message that indicates why the document couldn't be added to the
    /// index.</p>
    /// <p>If there was an error adding a document to an index the error is
    /// reported in your AWS CloudWatch log. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/cloudwatch-logs.html">Monitoring
    /// Amazon Kendra with Amazon CloudWatch Logs</a>
    /// </p>
    pub failed_documents:
        std::option::Option<std::vec::Vec<crate::model::BatchPutDocumentResponseFailedDocument>>,
}
impl std::fmt::Debug for BatchPutDocumentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchPutDocumentOutput");
        formatter.field("failed_documents", &self.failed_documents);
        formatter.finish()
    }
}
/// See [`BatchPutDocumentOutput`](crate::output::BatchPutDocumentOutput)
pub mod batch_put_document_output {
    /// A builder for [`BatchPutDocumentOutput`](crate::output::BatchPutDocumentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_documents: std::option::Option<
            std::vec::Vec<crate::model::BatchPutDocumentResponseFailedDocument>,
        >,
    }
    impl Builder {
        pub fn failed_documents(
            mut self,
            input: impl Into<crate::model::BatchPutDocumentResponseFailedDocument>,
        ) -> Self {
            let mut v = self.failed_documents.unwrap_or_default();
            v.push(input.into());
            self.failed_documents = Some(v);
            self
        }
        pub fn set_failed_documents(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchPutDocumentResponseFailedDocument>,
            >,
        ) -> Self {
            self.failed_documents = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchPutDocumentOutput`](crate::output::BatchPutDocumentOutput)
        pub fn build(self) -> crate::output::BatchPutDocumentOutput {
            crate::output::BatchPutDocumentOutput {
                failed_documents: self.failed_documents,
            }
        }
    }
}
impl BatchPutDocumentOutput {
    /// Creates a new builder-style object to manufacture [`BatchPutDocumentOutput`](crate::output::BatchPutDocumentOutput)
    pub fn builder() -> crate::output::batch_put_document_output::Builder {
        crate::output::batch_put_document_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGetDocumentStatusOutput {
    /// <p>A list of documents that Amazon Kendra couldn't get the status for. The
    /// list includes the ID of the document and the reason that the status
    /// couldn't be found.</p>
    pub errors:
        std::option::Option<std::vec::Vec<crate::model::BatchGetDocumentStatusResponseError>>,
    /// <p>The status of documents. The status indicates if the document is
    /// waiting to be indexed, is in the process of indexing, has completed
    /// indexing, or failed indexing. If a document failed indexing, the
    /// status provides the reason why.</p>
    pub document_status_list: std::option::Option<std::vec::Vec<crate::model::Status>>,
}
impl std::fmt::Debug for BatchGetDocumentStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetDocumentStatusOutput");
        formatter.field("errors", &self.errors);
        formatter.field("document_status_list", &self.document_status_list);
        formatter.finish()
    }
}
/// See [`BatchGetDocumentStatusOutput`](crate::output::BatchGetDocumentStatusOutput)
pub mod batch_get_document_status_output {
    /// A builder for [`BatchGetDocumentStatusOutput`](crate::output::BatchGetDocumentStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors:
            std::option::Option<std::vec::Vec<crate::model::BatchGetDocumentStatusResponseError>>,
        pub(crate) document_status_list: std::option::Option<std::vec::Vec<crate::model::Status>>,
    }
    impl Builder {
        pub fn errors(
            mut self,
            input: impl Into<crate::model::BatchGetDocumentStatusResponseError>,
        ) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input.into());
            self.errors = Some(v);
            self
        }
        pub fn set_errors(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchGetDocumentStatusResponseError>,
            >,
        ) -> Self {
            self.errors = input;
            self
        }
        pub fn document_status_list(mut self, input: impl Into<crate::model::Status>) -> Self {
            let mut v = self.document_status_list.unwrap_or_default();
            v.push(input.into());
            self.document_status_list = Some(v);
            self
        }
        pub fn set_document_status_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Status>>,
        ) -> Self {
            self.document_status_list = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetDocumentStatusOutput`](crate::output::BatchGetDocumentStatusOutput)
        pub fn build(self) -> crate::output::BatchGetDocumentStatusOutput {
            crate::output::BatchGetDocumentStatusOutput {
                errors: self.errors,
                document_status_list: self.document_status_list,
            }
        }
    }
}
impl BatchGetDocumentStatusOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetDocumentStatusOutput`](crate::output::BatchGetDocumentStatusOutput)
    pub fn builder() -> crate::output::batch_get_document_status_output::Builder {
        crate::output::batch_get_document_status_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchDeleteDocumentOutput {
    /// <p>A list of documents that could not be removed from the index. Each
    /// entry contains an error message that indicates why the document couldn't
    /// be removed from the index.</p>
    pub failed_documents:
        std::option::Option<std::vec::Vec<crate::model::BatchDeleteDocumentResponseFailedDocument>>,
}
impl std::fmt::Debug for BatchDeleteDocumentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDeleteDocumentOutput");
        formatter.field("failed_documents", &self.failed_documents);
        formatter.finish()
    }
}
/// See [`BatchDeleteDocumentOutput`](crate::output::BatchDeleteDocumentOutput)
pub mod batch_delete_document_output {
    /// A builder for [`BatchDeleteDocumentOutput`](crate::output::BatchDeleteDocumentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_documents: std::option::Option<
            std::vec::Vec<crate::model::BatchDeleteDocumentResponseFailedDocument>,
        >,
    }
    impl Builder {
        pub fn failed_documents(
            mut self,
            input: impl Into<crate::model::BatchDeleteDocumentResponseFailedDocument>,
        ) -> Self {
            let mut v = self.failed_documents.unwrap_or_default();
            v.push(input.into());
            self.failed_documents = Some(v);
            self
        }
        pub fn set_failed_documents(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchDeleteDocumentResponseFailedDocument>,
            >,
        ) -> Self {
            self.failed_documents = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeleteDocumentOutput`](crate::output::BatchDeleteDocumentOutput)
        pub fn build(self) -> crate::output::BatchDeleteDocumentOutput {
            crate::output::BatchDeleteDocumentOutput {
                failed_documents: self.failed_documents,
            }
        }
    }
}
impl BatchDeleteDocumentOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteDocumentOutput`](crate::output::BatchDeleteDocumentOutput)
    pub fn builder() -> crate::output::batch_delete_document_output::Builder {
        crate::output::batch_delete_document_output::Builder::default()
    }
}
