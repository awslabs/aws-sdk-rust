// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisassociateEntitiesFromExperience`](crate::client::fluent_builders::DisassociateEntitiesFromExperience) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::set_id): <p>The identifier of your Amazon Kendra experience.</p>
    ///   - [`index_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::index_id) / [`set_index_id(Option<String>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::set_index_id): <p>The identifier of the index for your Amazon Kendra experience.</p>
    ///   - [`entity_list(Vec<EntityConfiguration>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::entity_list) / [`set_entity_list(Option<Vec<EntityConfiguration>>)`](crate::client::fluent_builders::DisassociateEntitiesFromExperience::set_entity_list): <p>Lists users or groups in your IAM Identity Center identity source.</p>
    /// - On success, responds with [`DisassociateEntitiesFromExperienceOutput`](crate::output::DisassociateEntitiesFromExperienceOutput) with field(s):
    ///   - [`failed_entity_list(Option<Vec<FailedEntity>>)`](crate::output::DisassociateEntitiesFromExperienceOutput::failed_entity_list): <p>Lists the users or groups in your IAM Identity Center identity source that failed to properly remove access to your Amazon Kendra experience.</p>
    /// - On failure, responds with [`SdkError<DisassociateEntitiesFromExperienceError>`](crate::error::DisassociateEntitiesFromExperienceError)
    pub fn disassociate_entities_from_experience(
        &self,
    ) -> crate::client::fluent_builders::DisassociateEntitiesFromExperience {
        crate::client::fluent_builders::DisassociateEntitiesFromExperience::new(self.handle.clone())
    }
}
