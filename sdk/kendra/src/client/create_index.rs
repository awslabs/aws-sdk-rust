// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIndex`](crate::operation::create_index::builders::CreateIndexFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_name): <p>A name for the index.</p>
    ///   - [`edition(IndexEdition)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::edition) / [`set_edition(Option<IndexEdition>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_edition): <p>The Amazon Kendra edition to use for the index. Choose <code>DEVELOPER_EDITION</code> for indexes intended for development, testing, or proof of concept. Use <code>ENTERPRISE_EDITION</code> for your production databases. Once you set the edition for an index, it can't be changed.</p>  <p>The <code>Edition</code> parameter is optional. If you don't supply a value, the default is <code>ENTERPRISE_EDITION</code>.</p>  <p>For more information on quota limits for enterprise and developer editions, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas</a>.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_role_arn): <p>An Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the <code>BatchPutDocument</code> API to index documents from an Amazon S3 bucket.</p>
    ///   - [`server_side_encryption_configuration(ServerSideEncryptionConfiguration)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::server_side_encryption_configuration) / [`set_server_side_encryption_configuration(Option<ServerSideEncryptionConfiguration>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_server_side_encryption_configuration): <p>The identifier of the KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_description): <p>A description for the index.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_client_token): <p>A token that you provide to identify the request to create an index. Multiple calls to the <code>CreateIndex</code> API with the same client token will create only one index.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_tags): <p>A list of key-value pairs that identify the index. You can use the tags to identify and organize your resources and to control access to resources.</p>
    ///   - [`user_token_configurations(Vec<UserTokenConfiguration>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::user_token_configurations) / [`set_user_token_configurations(Option<Vec<UserTokenConfiguration>>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_user_token_configurations): <p>The user token configuration.</p>
    ///   - [`user_context_policy(UserContextPolicy)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::user_context_policy) / [`set_user_context_policy(Option<UserContextPolicy>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_user_context_policy): <p>The user context policy.</p>  <dl>   <dt>   ATTRIBUTE_FILTER  </dt>   <dd>    <p>All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of <code>_user_id</code> and <code>_group_ids</code> or you can provide user and group information in <code>UserContext</code>. </p>   </dd>   <dt>   USER_TOKEN  </dt>   <dd>    <p>Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable. </p>   </dd>  </dl>
    ///   - [`user_group_resolution_configuration(UserGroupResolutionConfiguration)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::user_group_resolution_configuration) / [`set_user_group_resolution_configuration(Option<UserGroupResolutionConfiguration>)`](crate::operation::create_index::builders::CreateIndexFluentBuilder::set_user_group_resolution_configuration): <p>Enables fetching access levels of groups and users from an IAM Identity Center (successor to Single Sign-On) identity source. To configure this, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html">UserGroupResolutionConfiguration</a>.</p>
    /// - On success, responds with [`CreateIndexOutput`](crate::operation::create_index::CreateIndexOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::create_index::CreateIndexOutput::id): <p>The identifier of the index. Use this identifier when you query an index, set up a data source, or index a document.</p>
    /// - On failure, responds with [`SdkError<CreateIndexError>`](crate::operation::create_index::CreateIndexError)
    pub fn create_index(
        &self,
    ) -> crate::operation::create_index::builders::CreateIndexFluentBuilder {
        crate::operation::create_index::builders::CreateIndexFluentBuilder::new(self.handle.clone())
    }
}
