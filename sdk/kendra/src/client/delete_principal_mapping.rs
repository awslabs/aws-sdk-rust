// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeletePrincipalMapping`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`index_id(impl Into<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::index_id) / [`set_index_id(Option<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::set_index_id):<br>required: **true**<br><p>The identifier of the index you want to delete a group from.</p><br>
    ///   - [`data_source_id(impl Into<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::data_source_id) / [`set_data_source_id(Option<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::set_data_source_id):<br>required: **false**<br><p>The identifier of the data source you want to delete a group from.</p>  <p>A group can be tied to multiple data sources. You can delete a group from accessing documents in a certain data source. For example, the groups "Research", "Engineering", and "Sales and Marketing" are all tied to the company's documents stored in the data sources Confluence and Salesforce. You want to delete "Research" and "Engineering" groups from Salesforce, so that these groups cannot access customer-related documents stored in Salesforce. Only "Sales and Marketing" should access documents in the Salesforce data source.</p><br>
    ///   - [`group_id(impl Into<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::group_id) / [`set_group_id(Option<String>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::set_group_id):<br>required: **true**<br><p>The identifier of the group you want to delete.</p><br>
    ///   - [`ordering_id(i64)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::ordering_id) / [`set_ordering_id(Option<i64>)`](crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::set_ordering_id):<br>required: **false**<br><p>The timestamp identifier you specify to ensure Amazon Kendra does not override the latest <code>DELETE</code> action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action.</p>  <p>The ordering ID can be the Unix time of the last update you made to a group members list. You would then provide this list when calling <code>PutPrincipalMapping</code>. This ensures your <code>DELETE</code> action for that updated group with the latest members list doesn't get overwritten by earlier <code>DELETE</code> actions for the same group which are yet to be processed.</p>  <p>The default ordering ID is the current Unix time in milliseconds that the action was received by Amazon Kendra. </p><br>
    /// - On success, responds with [`DeletePrincipalMappingOutput`](crate::operation::delete_principal_mapping::DeletePrincipalMappingOutput)
    /// - On failure, responds with [`SdkError<DeletePrincipalMappingError>`](crate::operation::delete_principal_mapping::DeletePrincipalMappingError)
    pub fn delete_principal_mapping(&self) -> crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder {
        crate::operation::delete_principal_mapping::builders::DeletePrincipalMappingFluentBuilder::new(self.handle.clone())
    }
}
