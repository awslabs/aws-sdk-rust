// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDataSourceSyncJobsInput {
    /// <p>The identifier of the data source connector.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index used with the data source connector.</p>
    #[doc(hidden)]
    pub index_id: std::option::Option<std::string::String>,
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.</p>
    #[doc(hidden)]
    pub start_time_filter: std::option::Option<crate::types::TimeRange>,
    /// <p>Only returns synchronization jobs with the <code>Status</code> field equal to the specified status.</p>
    #[doc(hidden)]
    pub status_filter: std::option::Option<crate::types::DataSourceSyncJobStatus>,
}
impl ListDataSourceSyncJobsInput {
    /// <p>The identifier of the data source connector.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the index used with the data source connector.</p>
    pub fn index_id(&self) -> std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.</p>
    pub fn start_time_filter(&self) -> std::option::Option<&crate::types::TimeRange> {
        self.start_time_filter.as_ref()
    }
    /// <p>Only returns synchronization jobs with the <code>Status</code> field equal to the specified status.</p>
    pub fn status_filter(&self) -> std::option::Option<&crate::types::DataSourceSyncJobStatus> {
        self.status_filter.as_ref()
    }
}
impl ListDataSourceSyncJobsInput {
    /// Creates a new builder-style object to manufacture [`ListDataSourceSyncJobsInput`](crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsInput).
    pub fn builder(
    ) -> crate::operation::list_data_source_sync_jobs::builders::ListDataSourceSyncJobsInputBuilder
    {
        crate::operation::list_data_source_sync_jobs::builders::ListDataSourceSyncJobsInputBuilder::default()
    }
}

/// A builder for [`ListDataSourceSyncJobsInput`](crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDataSourceSyncJobsInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) index_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) start_time_filter: std::option::Option<crate::types::TimeRange>,
    pub(crate) status_filter: std::option::Option<crate::types::DataSourceSyncJobStatus>,
}
impl ListDataSourceSyncJobsInputBuilder {
    /// <p>The identifier of the data source connector.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the data source connector.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the index used with the data source connector.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_id = Some(input.into());
        self
    }
    /// <p>The identifier of the index used with the data source connector.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of jobs.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.</p>
    pub fn start_time_filter(mut self, input: crate::types::TimeRange) -> Self {
        self.start_time_filter = Some(input);
        self
    }
    /// <p>When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates.</p>
    pub fn set_start_time_filter(
        mut self,
        input: std::option::Option<crate::types::TimeRange>,
    ) -> Self {
        self.start_time_filter = input;
        self
    }
    /// <p>Only returns synchronization jobs with the <code>Status</code> field equal to the specified status.</p>
    pub fn status_filter(mut self, input: crate::types::DataSourceSyncJobStatus) -> Self {
        self.status_filter = Some(input);
        self
    }
    /// <p>Only returns synchronization jobs with the <code>Status</code> field equal to the specified status.</p>
    pub fn set_status_filter(
        mut self,
        input: std::option::Option<crate::types::DataSourceSyncJobStatus>,
    ) -> Self {
        self.status_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDataSourceSyncJobsInput`](crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsInput {
                id: self.id,
                index_id: self.index_id,
                next_token: self.next_token,
                max_results: self.max_results,
                start_time_filter: self.start_time_filter,
                status_filter: self.status_filter,
            },
        )
    }
}
