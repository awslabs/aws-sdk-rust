// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_personas_to_entities::_associate_personas_to_entities_output::AssociatePersonasToEntitiesOutputBuilder;

pub use crate::operation::associate_personas_to_entities::_associate_personas_to_entities_input::AssociatePersonasToEntitiesInputBuilder;

/// Fluent builder constructing a request to `AssociatePersonasToEntities`.
///
/// <p>Defines the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a search application. For more information on creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a search experience with no code</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePersonasToEntitiesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::associate_personas_to_entities::builders::AssociatePersonasToEntitiesInputBuilder
            }
impl AssociatePersonasToEntitiesFluentBuilder {
    /// Creates a new `AssociatePersonasToEntities`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntities,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.index_id(input.into());
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_index_id(input);
        self
    }
    /// Appends an item to `Personas`.
    ///
    /// To override the contents of this collection use [`set_personas`](Self::set_personas).
    ///
    /// <p>The personas that define the specific permissions of users or groups in your IAM Identity Center identity source. The available personas or access roles are <code>Owner</code> and <code>Viewer</code>. For more information on these personas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience">Providing access to your search page</a>.</p>
    pub fn personas(mut self, input: crate::types::EntityPersonaConfiguration) -> Self {
        self.inner = self.inner.personas(input);
        self
    }
    /// <p>The personas that define the specific permissions of users or groups in your IAM Identity Center identity source. The available personas or access roles are <code>Owner</code> and <code>Viewer</code>. For more information on these personas, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html#access-search-experience">Providing access to your search page</a>.</p>
    pub fn set_personas(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntityPersonaConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_personas(input);
        self
    }
}
