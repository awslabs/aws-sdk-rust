// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_document::_batch_delete_document_output::BatchDeleteDocumentOutputBuilder;

pub use crate::operation::batch_delete_document::_batch_delete_document_input::BatchDeleteDocumentInputBuilder;

/// Fluent builder constructing a request to `BatchDeleteDocument`.
///
/// <p>Removes one or more documents from an index. The documents must have been added with the <code>BatchPutDocument</code> API.</p>
/// <p>The documents are deleted asynchronously. You can see the progress of the deletion by using Amazon Web Services CloudWatch. Any error messages related to the processing of the batch are sent to you CloudWatch log.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteDocumentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_delete_document::builders::BatchDeleteDocumentInputBuilder,
}
impl BatchDeleteDocumentFluentBuilder {
    /// Creates a new `BatchDeleteDocument`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::batch_delete_document::BatchDeleteDocument,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_document::BatchDeleteDocumentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::batch_delete_document::BatchDeleteDocumentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_document::BatchDeleteDocumentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the index that contains the documents to delete.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.index_id(input.into());
        self
    }
    /// <p>The identifier of the index that contains the documents to delete.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_index_id(input);
        self
    }
    /// Appends an item to `DocumentIdList`.
    ///
    /// To override the contents of this collection use [`set_document_id_list`](Self::set_document_id_list).
    ///
    /// <p>One or more identifiers for documents to delete from the index.</p>
    pub fn document_id_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.document_id_list(input.into());
        self
    }
    /// <p>One or more identifiers for documents to delete from the index.</p>
    pub fn set_document_id_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_document_id_list(input);
        self
    }
    /// <p>Maps a particular data source sync job to a particular data source.</p>
    pub fn data_source_sync_job_metric_target(
        mut self,
        input: crate::types::DataSourceSyncJobMetricTarget,
    ) -> Self {
        self.inner = self.inner.data_source_sync_job_metric_target(input);
        self
    }
    /// <p>Maps a particular data source sync job to a particular data source.</p>
    pub fn set_data_source_sync_job_metric_target(
        mut self,
        input: std::option::Option<crate::types::DataSourceSyncJobMetricTarget>,
    ) -> Self {
        self.inner = self.inner.set_data_source_sync_job_metric_target(input);
        self
    }
}
