// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAccessControlConfigurationInput {
    /// <p>The identifier of the index for an access control configuration.</p>
    #[doc(hidden)]
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the access control configuration you want to update.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A new name for the access control configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A new description for the access control configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information you want to update on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p>
    #[doc(hidden)]
    pub access_control_list: std::option::Option<std::vec::Vec<crate::types::Principal>>,
    /// <p>The updated list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that define the hierarchy for which documents users should have access to.</p>
    #[doc(hidden)]
    pub hierarchical_access_control_list:
        std::option::Option<std::vec::Vec<crate::types::HierarchicalPrincipal>>,
}
impl UpdateAccessControlConfigurationInput {
    /// <p>The identifier of the index for an access control configuration.</p>
    pub fn index_id(&self) -> std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifier of the access control configuration you want to update.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A new name for the access control configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A new description for the access control configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information you want to update on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p>
    pub fn access_control_list(&self) -> std::option::Option<&[crate::types::Principal]> {
        self.access_control_list.as_deref()
    }
    /// <p>The updated list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that define the hierarchy for which documents users should have access to.</p>
    pub fn hierarchical_access_control_list(
        &self,
    ) -> std::option::Option<&[crate::types::HierarchicalPrincipal]> {
        self.hierarchical_access_control_list.as_deref()
    }
}
impl UpdateAccessControlConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateAccessControlConfigurationInput`](crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationInput).
    pub fn builder() -> crate::operation::update_access_control_configuration::builders::UpdateAccessControlConfigurationInputBuilder{
        crate::operation::update_access_control_configuration::builders::UpdateAccessControlConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateAccessControlConfigurationInput`](crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAccessControlConfigurationInputBuilder {
    pub(crate) index_id: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) access_control_list: std::option::Option<std::vec::Vec<crate::types::Principal>>,
    pub(crate) hierarchical_access_control_list:
        std::option::Option<std::vec::Vec<crate::types::HierarchicalPrincipal>>,
}
impl UpdateAccessControlConfigurationInputBuilder {
    /// <p>The identifier of the index for an access control configuration.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_id = Some(input.into());
        self
    }
    /// <p>The identifier of the index for an access control configuration.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the access control configuration you want to update.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the access control configuration you want to update.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A new name for the access control configuration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A new name for the access control configuration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new description for the access control configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A new description for the access control configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `access_control_list`.
    ///
    /// To override the contents of this collection use [`set_access_control_list`](Self::set_access_control_list).
    ///
    /// <p>Information you want to update on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p>
    pub fn access_control_list(mut self, input: crate::types::Principal) -> Self {
        let mut v = self.access_control_list.unwrap_or_default();
        v.push(input);
        self.access_control_list = Some(v);
        self
    }
    /// <p>Information you want to update on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.</p>
    pub fn set_access_control_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Principal>>,
    ) -> Self {
        self.access_control_list = input;
        self
    }
    /// Appends an item to `hierarchical_access_control_list`.
    ///
    /// To override the contents of this collection use [`set_hierarchical_access_control_list`](Self::set_hierarchical_access_control_list).
    ///
    /// <p>The updated list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that define the hierarchy for which documents users should have access to.</p>
    pub fn hierarchical_access_control_list(
        mut self,
        input: crate::types::HierarchicalPrincipal,
    ) -> Self {
        let mut v = self.hierarchical_access_control_list.unwrap_or_default();
        v.push(input);
        self.hierarchical_access_control_list = Some(v);
        self
    }
    /// <p>The updated list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that define the hierarchy for which documents users should have access to.</p>
    pub fn set_hierarchical_access_control_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HierarchicalPrincipal>>,
    ) -> Self {
        self.hierarchical_access_control_list = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAccessControlConfigurationInput`](crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationInput).
    pub fn build(self) -> Result<crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationInput {
                index_id: self.index_id
                ,
                id: self.id
                ,
                name: self.name
                ,
                description: self.description
                ,
                access_control_list: self.access_control_list
                ,
                hierarchical_access_control_list: self.hierarchical_access_control_list
                ,
            }
        )
    }
}
