// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeThesaurusOutput {
    /// <p>The identifier of the thesaurus.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index for the thesaurus.</p>
    #[doc(hidden)]
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The thesaurus name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The thesaurus description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>, queries are able to use the thesaurus. If the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ThesaurusStatus>,
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The Unix datetime that the thesaurus was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Unix datetime that the thesaurus was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in <code>SourceS3Path</code>. </p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Information required to find a specific file in an Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub source_s3_path: std::option::Option<crate::types::S3Path>,
    /// <p>The size of the thesaurus file in bytes.</p>
    #[doc(hidden)]
    pub file_size_bytes: std::option::Option<i64>,
    /// <p>The number of unique terms in the thesaurus file. For example, the synonyms <code>a,b,c</code> and <code>a=&gt;d</code>, the term count would be 4. </p>
    #[doc(hidden)]
    pub term_count: std::option::Option<i64>,
    /// <p>The number of synonym rules in the thesaurus file.</p>
    #[doc(hidden)]
    pub synonym_rule_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeThesaurusOutput {
    /// <p>The identifier of the thesaurus.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the index for the thesaurus.</p>
    pub fn index_id(&self) -> std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The thesaurus name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The thesaurus description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>, queries are able to use the thesaurus. If the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::ThesaurusStatus> {
        self.status.as_ref()
    }
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The Unix datetime that the thesaurus was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix datetime that the thesaurus was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in <code>SourceS3Path</code>. </p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Information required to find a specific file in an Amazon S3 bucket.</p>
    pub fn source_s3_path(&self) -> std::option::Option<&crate::types::S3Path> {
        self.source_s3_path.as_ref()
    }
    /// <p>The size of the thesaurus file in bytes.</p>
    pub fn file_size_bytes(&self) -> std::option::Option<i64> {
        self.file_size_bytes
    }
    /// <p>The number of unique terms in the thesaurus file. For example, the synonyms <code>a,b,c</code> and <code>a=&gt;d</code>, the term count would be 4. </p>
    pub fn term_count(&self) -> std::option::Option<i64> {
        self.term_count
    }
    /// <p>The number of synonym rules in the thesaurus file.</p>
    pub fn synonym_rule_count(&self) -> std::option::Option<i64> {
        self.synonym_rule_count
    }
}
impl aws_http::request_id::RequestId for DescribeThesaurusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeThesaurusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeThesaurusOutput`](crate::operation::describe_thesaurus::DescribeThesaurusOutput).
    pub fn builder(
    ) -> crate::operation::describe_thesaurus::builders::DescribeThesaurusOutputBuilder {
        crate::operation::describe_thesaurus::builders::DescribeThesaurusOutputBuilder::default()
    }
}

/// A builder for [`DescribeThesaurusOutput`](crate::operation::describe_thesaurus::DescribeThesaurusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeThesaurusOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) index_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ThesaurusStatus>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) source_s3_path: std::option::Option<crate::types::S3Path>,
    pub(crate) file_size_bytes: std::option::Option<i64>,
    pub(crate) term_count: std::option::Option<i64>,
    pub(crate) synonym_rule_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeThesaurusOutputBuilder {
    /// <p>The identifier of the thesaurus.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the thesaurus.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the index for the thesaurus.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_id = Some(input.into());
        self
    }
    /// <p>The identifier of the index for the thesaurus.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The thesaurus name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The thesaurus name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The thesaurus description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The thesaurus description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>, queries are able to use the thesaurus. If the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active. </p>
    pub fn status(mut self, input: crate::types::ThesaurusStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the thesaurus. When the value is <code>ACTIVE</code>, queries are able to use the thesaurus. If the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    /// <p>If the status is <code>ACTIVE_BUT_UPDATE_FAILED</code>, it means that Amazon Kendra could not ingest the new thesaurus file. The old thesaurus file is still active. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ThesaurusStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>When the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field provides more information. </p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The Unix datetime that the thesaurus was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The Unix datetime that the thesaurus was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix datetime that the thesaurus was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The Unix datetime that the thesaurus was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in <code>SourceS3Path</code>. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>An IAM role that gives Amazon Kendra permissions to access thesaurus file specified in <code>SourceS3Path</code>. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Information required to find a specific file in an Amazon S3 bucket.</p>
    pub fn source_s3_path(mut self, input: crate::types::S3Path) -> Self {
        self.source_s3_path = Some(input);
        self
    }
    /// <p>Information required to find a specific file in an Amazon S3 bucket.</p>
    pub fn set_source_s3_path(mut self, input: std::option::Option<crate::types::S3Path>) -> Self {
        self.source_s3_path = input;
        self
    }
    /// <p>The size of the thesaurus file in bytes.</p>
    pub fn file_size_bytes(mut self, input: i64) -> Self {
        self.file_size_bytes = Some(input);
        self
    }
    /// <p>The size of the thesaurus file in bytes.</p>
    pub fn set_file_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.file_size_bytes = input;
        self
    }
    /// <p>The number of unique terms in the thesaurus file. For example, the synonyms <code>a,b,c</code> and <code>a=&gt;d</code>, the term count would be 4. </p>
    pub fn term_count(mut self, input: i64) -> Self {
        self.term_count = Some(input);
        self
    }
    /// <p>The number of unique terms in the thesaurus file. For example, the synonyms <code>a,b,c</code> and <code>a=&gt;d</code>, the term count would be 4. </p>
    pub fn set_term_count(mut self, input: std::option::Option<i64>) -> Self {
        self.term_count = input;
        self
    }
    /// <p>The number of synonym rules in the thesaurus file.</p>
    pub fn synonym_rule_count(mut self, input: i64) -> Self {
        self.synonym_rule_count = Some(input);
        self
    }
    /// <p>The number of synonym rules in the thesaurus file.</p>
    pub fn set_synonym_rule_count(mut self, input: std::option::Option<i64>) -> Self {
        self.synonym_rule_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeThesaurusOutput`](crate::operation::describe_thesaurus::DescribeThesaurusOutput).
    pub fn build(self) -> crate::operation::describe_thesaurus::DescribeThesaurusOutput {
        crate::operation::describe_thesaurus::DescribeThesaurusOutput {
            id: self.id,
            index_id: self.index_id,
            name: self.name,
            description: self.description,
            status: self.status,
            error_message: self.error_message,
            created_at: self.created_at,
            updated_at: self.updated_at,
            role_arn: self.role_arn,
            source_s3_path: self.source_s3_path,
            file_size_bytes: self.file_size_bytes,
            term_count: self.term_count,
            synonym_rule_count: self.synonym_rule_count,
            _request_id: self._request_id,
        }
    }
}
