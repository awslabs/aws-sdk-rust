// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeQuerySuggestionsConfigOutput {
    /// <p>Whether query suggestions are currently in <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
    /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code> turns off query suggestions for your users. You can change the mode using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a> API.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::Mode>,
    /// <p>Whether the status of query suggestions settings is currently <code>ACTIVE</code> or <code>UPDATING</code>.</p>
    /// <p>Active means the current settings apply and Updating means your changed settings are in the process of applying.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::QuerySuggestionsStatus>,
    /// <p>How recent your queries are in your query log time window (in days).</p>
    #[doc(hidden)]
    pub query_log_look_back_window_in_days: std::option::Option<i32>,
    /// <p> <code>TRUE</code> to use all queries, otherwise use only queries that include user information to generate the query suggestions.</p>
    #[doc(hidden)]
    pub include_queries_without_user_information: std::option::Option<bool>,
    /// <p>The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.</p>
    #[doc(hidden)]
    pub minimum_number_of_querying_users: std::option::Option<i32>,
    /// <p>The minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.</p>
    #[doc(hidden)]
    pub minimum_query_count: std::option::Option<i32>,
    /// <p>The date-time query suggestions for an index was last updated.</p>
    #[doc(hidden)]
    pub last_suggestions_build_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date-time query suggestions for an index was last cleared.</p>
    /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions. </p>
    #[doc(hidden)]
    pub last_clear_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current total count of query suggestions for an index.</p>
    /// <p>This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
    #[doc(hidden)]
    pub total_suggestions_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeQuerySuggestionsConfigOutput {
    /// <p>Whether query suggestions are currently in <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
    /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code> turns off query suggestions for your users. You can change the mode using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a> API.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::Mode> {
        self.mode.as_ref()
    }
    /// <p>Whether the status of query suggestions settings is currently <code>ACTIVE</code> or <code>UPDATING</code>.</p>
    /// <p>Active means the current settings apply and Updating means your changed settings are in the process of applying.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::QuerySuggestionsStatus> {
        self.status.as_ref()
    }
    /// <p>How recent your queries are in your query log time window (in days).</p>
    pub fn query_log_look_back_window_in_days(&self) -> std::option::Option<i32> {
        self.query_log_look_back_window_in_days
    }
    /// <p> <code>TRUE</code> to use all queries, otherwise use only queries that include user information to generate the query suggestions.</p>
    pub fn include_queries_without_user_information(&self) -> std::option::Option<bool> {
        self.include_queries_without_user_information
    }
    /// <p>The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.</p>
    pub fn minimum_number_of_querying_users(&self) -> std::option::Option<i32> {
        self.minimum_number_of_querying_users
    }
    /// <p>The minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.</p>
    pub fn minimum_query_count(&self) -> std::option::Option<i32> {
        self.minimum_query_count
    }
    /// <p>The date-time query suggestions for an index was last updated.</p>
    pub fn last_suggestions_build_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_suggestions_build_time.as_ref()
    }
    /// <p>The date-time query suggestions for an index was last cleared.</p>
    /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions. </p>
    pub fn last_clear_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_clear_time.as_ref()
    }
    /// <p>The current total count of query suggestions for an index.</p>
    /// <p>This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
    pub fn total_suggestions_count(&self) -> std::option::Option<i32> {
        self.total_suggestions_count
    }
}
impl aws_http::request_id::RequestId for DescribeQuerySuggestionsConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeQuerySuggestionsConfigOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQuerySuggestionsConfigOutput`](crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigOutput).
    pub fn builder() -> crate::operation::describe_query_suggestions_config::builders::DescribeQuerySuggestionsConfigOutputBuilder{
        crate::operation::describe_query_suggestions_config::builders::DescribeQuerySuggestionsConfigOutputBuilder::default()
    }
}

/// A builder for [`DescribeQuerySuggestionsConfigOutput`](crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeQuerySuggestionsConfigOutputBuilder {
    pub(crate) mode: std::option::Option<crate::types::Mode>,
    pub(crate) status: std::option::Option<crate::types::QuerySuggestionsStatus>,
    pub(crate) query_log_look_back_window_in_days: std::option::Option<i32>,
    pub(crate) include_queries_without_user_information: std::option::Option<bool>,
    pub(crate) minimum_number_of_querying_users: std::option::Option<i32>,
    pub(crate) minimum_query_count: std::option::Option<i32>,
    pub(crate) last_suggestions_build_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_clear_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) total_suggestions_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeQuerySuggestionsConfigOutputBuilder {
    /// <p>Whether query suggestions are currently in <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
    /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code> turns off query suggestions for your users. You can change the mode using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a> API.</p>
    pub fn mode(mut self, input: crate::types::Mode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>Whether query suggestions are currently in <code>ENABLED</code> mode or <code>LEARN_ONLY</code> mode.</p>
    /// <p>By default, Amazon Kendra enables query suggestions.<code>LEARN_ONLY</code> turns off query suggestions for your users. You can change the mode using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateQuerySuggestionsConfig.html">UpdateQuerySuggestionsConfig</a> API.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::Mode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Whether the status of query suggestions settings is currently <code>ACTIVE</code> or <code>UPDATING</code>.</p>
    /// <p>Active means the current settings apply and Updating means your changed settings are in the process of applying.</p>
    pub fn status(mut self, input: crate::types::QuerySuggestionsStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Whether the status of query suggestions settings is currently <code>ACTIVE</code> or <code>UPDATING</code>.</p>
    /// <p>Active means the current settings apply and Updating means your changed settings are in the process of applying.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::QuerySuggestionsStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>How recent your queries are in your query log time window (in days).</p>
    pub fn query_log_look_back_window_in_days(mut self, input: i32) -> Self {
        self.query_log_look_back_window_in_days = Some(input);
        self
    }
    /// <p>How recent your queries are in your query log time window (in days).</p>
    pub fn set_query_log_look_back_window_in_days(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.query_log_look_back_window_in_days = input;
        self
    }
    /// <p> <code>TRUE</code> to use all queries, otherwise use only queries that include user information to generate the query suggestions.</p>
    pub fn include_queries_without_user_information(mut self, input: bool) -> Self {
        self.include_queries_without_user_information = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to use all queries, otherwise use only queries that include user information to generate the query suggestions.</p>
    pub fn set_include_queries_without_user_information(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.include_queries_without_user_information = input;
        self
    }
    /// <p>The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.</p>
    pub fn minimum_number_of_querying_users(mut self, input: i32) -> Self {
        self.minimum_number_of_querying_users = Some(input);
        self
    }
    /// <p>The minimum number of unique users who must search a query in order for the query to be eligible to suggest to your users.</p>
    pub fn set_minimum_number_of_querying_users(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_number_of_querying_users = input;
        self
    }
    /// <p>The minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.</p>
    pub fn minimum_query_count(mut self, input: i32) -> Self {
        self.minimum_query_count = Some(input);
        self
    }
    /// <p>The minimum number of times a query must be searched in order for the query to be eligible to suggest to your users.</p>
    pub fn set_minimum_query_count(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_query_count = input;
        self
    }
    /// <p>The date-time query suggestions for an index was last updated.</p>
    pub fn last_suggestions_build_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_suggestions_build_time = Some(input);
        self
    }
    /// <p>The date-time query suggestions for an index was last updated.</p>
    pub fn set_last_suggestions_build_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_suggestions_build_time = input;
        self
    }
    /// <p>The date-time query suggestions for an index was last cleared.</p>
    /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions. </p>
    pub fn last_clear_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_clear_time = Some(input);
        self
    }
    /// <p>The date-time query suggestions for an index was last cleared.</p>
    /// <p>After you clear suggestions, Amazon Kendra learns new suggestions based on new queries added to the query log from the time you cleared suggestions. Amazon Kendra only considers re-occurences of a query from the time you cleared suggestions. </p>
    pub fn set_last_clear_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_clear_time = input;
        self
    }
    /// <p>The current total count of query suggestions for an index.</p>
    /// <p>This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
    pub fn total_suggestions_count(mut self, input: i32) -> Self {
        self.total_suggestions_count = Some(input);
        self
    }
    /// <p>The current total count of query suggestions for an index.</p>
    /// <p>This count can change when you update your query suggestions settings, if you filter out certain queries from suggestions using a block list, and as the query log accumulates more queries for Amazon Kendra to learn from.</p>
    pub fn set_total_suggestions_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_suggestions_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeQuerySuggestionsConfigOutput`](crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigOutput
    {
        crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigOutput {
            mode: self.mode,
            status: self.status,
            query_log_look_back_window_in_days: self.query_log_look_back_window_in_days,
            include_queries_without_user_information: self.include_queries_without_user_information,
            minimum_number_of_querying_users: self.minimum_number_of_querying_users,
            minimum_query_count: self.minimum_query_count,
            last_suggestions_build_time: self.last_suggestions_build_time,
            last_clear_time: self.last_clear_time,
            total_suggestions_count: self.total_suggestions_count,
            _request_id: self._request_id,
        }
    }
}
