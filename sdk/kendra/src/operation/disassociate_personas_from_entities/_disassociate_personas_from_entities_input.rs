// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociatePersonasFromEntitiesInput {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    #[doc(hidden)]
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The identifiers of users or groups in your IAM Identity Center identity source. For example, user IDs could be user emails.</p>
    #[doc(hidden)]
    pub entity_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DisassociatePersonasFromEntitiesInput {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn index_id(&self) -> std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifiers of users or groups in your IAM Identity Center identity source. For example, user IDs could be user emails.</p>
    pub fn entity_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_ids.as_deref()
    }
}
impl DisassociatePersonasFromEntitiesInput {
    /// Creates a new builder-style object to manufacture [`DisassociatePersonasFromEntitiesInput`](crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesInput).
    pub fn builder() -> crate::operation::disassociate_personas_from_entities::builders::DisassociatePersonasFromEntitiesInputBuilder{
        crate::operation::disassociate_personas_from_entities::builders::DisassociatePersonasFromEntitiesInputBuilder::default()
    }
}

/// A builder for [`DisassociatePersonasFromEntitiesInput`](crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisassociatePersonasFromEntitiesInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) index_id: std::option::Option<std::string::String>,
    pub(crate) entity_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DisassociatePersonasFromEntitiesInputBuilder {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_id = Some(input.into());
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// Appends an item to `entity_ids`.
    ///
    /// To override the contents of this collection use [`set_entity_ids`](Self::set_entity_ids).
    ///
    /// <p>The identifiers of users or groups in your IAM Identity Center identity source. For example, user IDs could be user emails.</p>
    pub fn entity_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_ids.unwrap_or_default();
        v.push(input.into());
        self.entity_ids = Some(v);
        self
    }
    /// <p>The identifiers of users or groups in your IAM Identity Center identity source. For example, user IDs could be user emails.</p>
    pub fn set_entity_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`DisassociatePersonasFromEntitiesInput`](crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesInput).
    pub fn build(self) -> Result<crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesInput {
                id: self.id
                ,
                index_id: self.index_id
                ,
                entity_ids: self.entity_ids
                ,
            }
        )
    }
}
