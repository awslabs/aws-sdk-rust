// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetQuerySuggestionsOutput {
    /// <p>The identifier for a list of query suggestions for an index.</p>
    #[doc(hidden)]
    pub query_suggestions_id: std::option::Option<std::string::String>,
    /// <p>A list of query suggestions for an index.</p>
    #[doc(hidden)]
    pub suggestions: std::option::Option<std::vec::Vec<crate::types::Suggestion>>,
    _request_id: Option<String>,
}
impl GetQuerySuggestionsOutput {
    /// <p>The identifier for a list of query suggestions for an index.</p>
    pub fn query_suggestions_id(&self) -> std::option::Option<&str> {
        self.query_suggestions_id.as_deref()
    }
    /// <p>A list of query suggestions for an index.</p>
    pub fn suggestions(&self) -> std::option::Option<&[crate::types::Suggestion]> {
        self.suggestions.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetQuerySuggestionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetQuerySuggestionsOutput {
    /// Creates a new builder-style object to manufacture [`GetQuerySuggestionsOutput`](crate::operation::get_query_suggestions::GetQuerySuggestionsOutput).
    pub fn builder(
    ) -> crate::operation::get_query_suggestions::builders::GetQuerySuggestionsOutputBuilder {
        crate::operation::get_query_suggestions::builders::GetQuerySuggestionsOutputBuilder::default(
        )
    }
}

/// A builder for [`GetQuerySuggestionsOutput`](crate::operation::get_query_suggestions::GetQuerySuggestionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetQuerySuggestionsOutputBuilder {
    pub(crate) query_suggestions_id: std::option::Option<std::string::String>,
    pub(crate) suggestions: std::option::Option<std::vec::Vec<crate::types::Suggestion>>,
    _request_id: Option<String>,
}
impl GetQuerySuggestionsOutputBuilder {
    /// <p>The identifier for a list of query suggestions for an index.</p>
    pub fn query_suggestions_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_suggestions_id = Some(input.into());
        self
    }
    /// <p>The identifier for a list of query suggestions for an index.</p>
    pub fn set_query_suggestions_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.query_suggestions_id = input;
        self
    }
    /// Appends an item to `suggestions`.
    ///
    /// To override the contents of this collection use [`set_suggestions`](Self::set_suggestions).
    ///
    /// <p>A list of query suggestions for an index.</p>
    pub fn suggestions(mut self, input: crate::types::Suggestion) -> Self {
        let mut v = self.suggestions.unwrap_or_default();
        v.push(input);
        self.suggestions = Some(v);
        self
    }
    /// <p>A list of query suggestions for an index.</p>
    pub fn set_suggestions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Suggestion>>,
    ) -> Self {
        self.suggestions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetQuerySuggestionsOutput`](crate::operation::get_query_suggestions::GetQuerySuggestionsOutput).
    pub fn build(self) -> crate::operation::get_query_suggestions::GetQuerySuggestionsOutput {
        crate::operation::get_query_suggestions::GetQuerySuggestionsOutput {
            query_suggestions_id: self.query_suggestions_id,
            suggestions: self.suggestions,
            _request_id: self._request_id,
        }
    }
}
