// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeQuerySuggestionsBlockListOutput {
    /// <p>The identifier of the index for the block list.</p>
    #[doc(hidden)]
    pub index_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the block list.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the block list.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description for the block list.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The current status of the block list. When the value is <code>ACTIVE</code>, the block list is ready for use.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::QuerySuggestionsBlockListStatus>,
    /// <p>The error message containing details if there are issues processing the block list.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The date-time a block list for query suggestions was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date-time a block list for query suggestions was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
    /// <p>Each block word or phrase should be on a separate line in a text file.</p>
    /// <p>For information on the current quota limits for block lists, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas for Amazon Kendra</a>.</p>
    #[doc(hidden)]
    pub source_s3_path: std::option::Option<crate::types::S3Path>,
    /// <p>The current number of valid, non-empty words or phrases in the block list text file.</p>
    #[doc(hidden)]
    pub item_count: std::option::Option<i32>,
    /// <p>The current size of the block list text file in S3.</p>
    #[doc(hidden)]
    pub file_size_bytes: std::option::Option<i64>,
    /// <p>The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3.</p>
    /// <p>The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeQuerySuggestionsBlockListOutput {
    /// <p>The identifier of the index for the block list.</p>
    pub fn index_id(&self) -> std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifier of the block list.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the block list.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description for the block list.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the block list. When the value is <code>ACTIVE</code>, the block list is ready for use.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::QuerySuggestionsBlockListStatus> {
        self.status.as_ref()
    }
    /// <p>The error message containing details if there are issues processing the block list.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The date-time a block list for query suggestions was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date-time a block list for query suggestions was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
    /// <p>Each block word or phrase should be on a separate line in a text file.</p>
    /// <p>For information on the current quota limits for block lists, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas for Amazon Kendra</a>.</p>
    pub fn source_s3_path(&self) -> std::option::Option<&crate::types::S3Path> {
        self.source_s3_path.as_ref()
    }
    /// <p>The current number of valid, non-empty words or phrases in the block list text file.</p>
    pub fn item_count(&self) -> std::option::Option<i32> {
        self.item_count
    }
    /// <p>The current size of the block list text file in S3.</p>
    pub fn file_size_bytes(&self) -> std::option::Option<i64> {
        self.file_size_bytes
    }
    /// <p>The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3.</p>
    /// <p>The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeQuerySuggestionsBlockListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeQuerySuggestionsBlockListOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQuerySuggestionsBlockListOutput`](crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListOutput).
    pub fn builder() -> crate::operation::describe_query_suggestions_block_list::builders::DescribeQuerySuggestionsBlockListOutputBuilder{
        crate::operation::describe_query_suggestions_block_list::builders::DescribeQuerySuggestionsBlockListOutputBuilder::default()
    }
}

/// A builder for [`DescribeQuerySuggestionsBlockListOutput`](crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeQuerySuggestionsBlockListOutputBuilder {
    pub(crate) index_id: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::QuerySuggestionsBlockListStatus>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) source_s3_path: std::option::Option<crate::types::S3Path>,
    pub(crate) item_count: std::option::Option<i32>,
    pub(crate) file_size_bytes: std::option::Option<i64>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeQuerySuggestionsBlockListOutputBuilder {
    /// <p>The identifier of the index for the block list.</p>
    pub fn index_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_id = Some(input.into());
        self
    }
    /// <p>The identifier of the index for the block list.</p>
    pub fn set_index_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the block list.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the block list.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the block list.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the block list.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description for the block list.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the block list.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The current status of the block list. When the value is <code>ACTIVE</code>, the block list is ready for use.</p>
    pub fn status(mut self, input: crate::types::QuerySuggestionsBlockListStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the block list. When the value is <code>ACTIVE</code>, the block list is ready for use.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::QuerySuggestionsBlockListStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The error message containing details if there are issues processing the block list.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message containing details if there are issues processing the block list.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The date-time a block list for query suggestions was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date-time a block list for query suggestions was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date-time a block list for query suggestions was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date-time a block list for query suggestions was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
    /// <p>Each block word or phrase should be on a separate line in a text file.</p>
    /// <p>For information on the current quota limits for block lists, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas for Amazon Kendra</a>.</p>
    pub fn source_s3_path(mut self, input: crate::types::S3Path) -> Self {
        self.source_s3_path = Some(input);
        self
    }
    /// <p>Shows the current S3 path to your block list text file in your S3 bucket.</p>
    /// <p>Each block word or phrase should be on a separate line in a text file.</p>
    /// <p>For information on the current quota limits for block lists, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas for Amazon Kendra</a>.</p>
    pub fn set_source_s3_path(mut self, input: std::option::Option<crate::types::S3Path>) -> Self {
        self.source_s3_path = input;
        self
    }
    /// <p>The current number of valid, non-empty words or phrases in the block list text file.</p>
    pub fn item_count(mut self, input: i32) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>The current number of valid, non-empty words or phrases in the block list text file.</p>
    pub fn set_item_count(mut self, input: std::option::Option<i32>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>The current size of the block list text file in S3.</p>
    pub fn file_size_bytes(mut self, input: i64) -> Self {
        self.file_size_bytes = Some(input);
        self
    }
    /// <p>The current size of the block list text file in S3.</p>
    pub fn set_file_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.file_size_bytes = input;
        self
    }
    /// <p>The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3.</p>
    /// <p>The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The IAM (Identity and Access Management) role used by Amazon Kendra to access the block list text file in S3.</p>
    /// <p>The role needs S3 read permissions to your file in S3 and needs to give STS (Security Token Service) assume role permissions to Amazon Kendra.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeQuerySuggestionsBlockListOutput`](crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListOutput).
    pub fn build(self) -> crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListOutput{
        crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListOutput {
            index_id: self.index_id
            ,
            id: self.id
            ,
            name: self.name
            ,
            description: self.description
            ,
            status: self.status
            ,
            error_message: self.error_message
            ,
            created_at: self.created_at
            ,
            updated_at: self.updated_at
            ,
            source_s3_path: self.source_s3_path
            ,
            item_count: self.item_count
            ,
            file_size_bytes: self.file_size_bytes
            ,
            role_arn: self.role_arn
            ,
            _request_id: self._request_id,
        }
    }
}
