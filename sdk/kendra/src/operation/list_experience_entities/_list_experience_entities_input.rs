// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExperienceEntitiesInput {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub index_id: ::std::option::Option<::std::string::String>,
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListExperienceEntitiesInput {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn index_id(&self) -> ::std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListExperienceEntitiesInput {
    /// Creates a new builder-style object to manufacture [`ListExperienceEntitiesInput`](crate::operation::list_experience_entities::ListExperienceEntitiesInput).
    pub fn builder() -> crate::operation::list_experience_entities::builders::ListExperienceEntitiesInputBuilder {
        crate::operation::list_experience_entities::builders::ListExperienceEntitiesInputBuilder::default()
    }
}

/// A builder for [`ListExperienceEntitiesInput`](crate::operation::list_experience_entities::ListExperienceEntitiesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListExperienceEntitiesInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) index_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListExperienceEntitiesInputBuilder {
    /// <p>The identifier of your Amazon Kendra experience.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of your Amazon Kendra experience.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    /// This field is required.
    pub fn index_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn set_index_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the index for your Amazon Kendra experience.</p>
    pub fn get_index_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_id
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of users or groups.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListExperienceEntitiesInput`](crate::operation::list_experience_entities::ListExperienceEntitiesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_experience_entities::ListExperienceEntitiesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_experience_entities::ListExperienceEntitiesInput {
            id: self.id,
            index_id: self.index_id,
            next_token: self.next_token,
        })
    }
}
