// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_delete_featured_results_set_output_correct_errors(
    mut builder: crate::operation::batch_delete_featured_results_set::builders::BatchDeleteFeaturedResultsSetOutputBuilder,
) -> crate::operation::batch_delete_featured_results_set::builders::BatchDeleteFeaturedResultsSetOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn create_access_control_configuration_output_correct_errors(
    mut builder: crate::operation::create_access_control_configuration::builders::CreateAccessControlConfigurationOutputBuilder,
) -> crate::operation::create_access_control_configuration::builders::CreateAccessControlConfigurationOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_data_source_output_correct_errors(
    mut builder: crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder,
) -> crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_experience_output_correct_errors(
    mut builder: crate::operation::create_experience::builders::CreateExperienceOutputBuilder,
) -> crate::operation::create_experience::builders::CreateExperienceOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_access_control_configuration_output_correct_errors(
    mut builder: crate::operation::describe_access_control_configuration::builders::DescribeAccessControlConfigurationOutputBuilder,
) -> crate::operation::describe_access_control_configuration::builders::DescribeAccessControlConfigurationOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_access_control_configurations_output_correct_errors(
    mut builder: crate::operation::list_access_control_configurations::builders::ListAccessControlConfigurationsOutputBuilder,
) -> crate::operation::list_access_control_configurations::builders::ListAccessControlConfigurationsOutputBuilder {
    if builder.access_control_configurations.is_none() {
        builder.access_control_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_units_configuration_correct_errors(
    mut builder: crate::types::builders::CapacityUnitsConfigurationBuilder,
) -> crate::types::builders::CapacityUnitsConfigurationBuilder {
    if builder.storage_capacity_units.is_none() {
        builder.storage_capacity_units = Some(Default::default())
    }
    if builder.query_capacity_units.is_none() {
        builder.query_capacity_units = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceVpcConfigurationBuilder,
) -> crate::types::builders::DataSourceVpcConfigurationBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn index_statistics_correct_errors(
    mut builder: crate::types::builders::IndexStatisticsBuilder,
) -> crate::types::builders::IndexStatisticsBuilder {
    if builder.faq_statistics.is_none() {
        builder.faq_statistics = {
            let builder = crate::types::builders::FaqStatisticsBuilder::default();
            Some(crate::serde_util::faq_statistics_correct_errors(builder).build())
        }
    }
    if builder.text_document_statistics.is_none() {
        builder.text_document_statistics = {
            let builder = crate::types::builders::TextDocumentStatisticsBuilder::default();
            Some(crate::serde_util::text_document_statistics_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn s3_path_correct_errors(mut builder: crate::types::builders::S3PathBuilder) -> crate::types::builders::S3PathBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn user_group_resolution_configuration_correct_errors(
    mut builder: crate::types::builders::UserGroupResolutionConfigurationBuilder,
) -> crate::types::builders::UserGroupResolutionConfigurationBuilder {
    if builder.user_group_resolution_mode.is_none() {
        builder.user_group_resolution_mode = "no value was set".parse::<crate::types::UserGroupResolutionMode>().ok()
    }
    builder
}

pub(crate) fn access_control_configuration_summary_correct_errors(
    mut builder: crate::types::builders::AccessControlConfigurationSummaryBuilder,
) -> crate::types::builders::AccessControlConfigurationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn alfresco_configuration_correct_errors(
    mut builder: crate::types::builders::AlfrescoConfigurationBuilder,
) -> crate::types::builders::AlfrescoConfigurationBuilder {
    if builder.site_url.is_none() {
        builder.site_url = Some(Default::default())
    }
    if builder.site_id.is_none() {
        builder.site_id = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.ssl_certificate_s3_path.is_none() {
        builder.ssl_certificate_s3_path = {
            let builder = crate::types::builders::S3PathBuilder::default();
            crate::serde_util::s3_path_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn batch_delete_featured_results_set_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteFeaturedResultsSetErrorBuilder,
) -> crate::types::builders::BatchDeleteFeaturedResultsSetErrorBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::ErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn box_configuration_correct_errors(
    mut builder: crate::types::builders::BoxConfigurationBuilder,
) -> crate::types::builders::BoxConfigurationBuilder {
    if builder.enterprise_id.is_none() {
        builder.enterprise_id = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn confluence_configuration_correct_errors(
    mut builder: crate::types::builders::ConfluenceConfigurationBuilder,
) -> crate::types::builders::ConfluenceConfigurationBuilder {
    if builder.server_url.is_none() {
        builder.server_url = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = "no value was set".parse::<crate::types::ConfluenceVersion>().ok()
    }
    builder
}

pub(crate) fn database_configuration_correct_errors(
    mut builder: crate::types::builders::DatabaseConfigurationBuilder,
) -> crate::types::builders::DatabaseConfigurationBuilder {
    if builder.database_engine_type.is_none() {
        builder.database_engine_type = "no value was set".parse::<crate::types::DatabaseEngineType>().ok()
    }
    if builder.connection_configuration.is_none() {
        builder.connection_configuration = {
            let builder = crate::types::builders::ConnectionConfigurationBuilder::default();
            crate::serde_util::connection_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.column_configuration.is_none() {
        builder.column_configuration = {
            let builder = crate::types::builders::ColumnConfigurationBuilder::default();
            crate::serde_util::column_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn document_metadata_configuration_correct_errors(
    mut builder: crate::types::builders::DocumentMetadataConfigurationBuilder,
) -> crate::types::builders::DocumentMetadataConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DocumentAttributeValueType>().ok()
    }
    builder
}

pub(crate) fn faq_statistics_correct_errors(
    mut builder: crate::types::builders::FaqStatisticsBuilder,
) -> crate::types::builders::FaqStatisticsBuilder {
    if builder.indexed_question_answers_count.is_none() {
        builder.indexed_question_answers_count = Some(Default::default())
    }
    builder
}

pub(crate) fn fsx_configuration_correct_errors(
    mut builder: crate::types::builders::FsxConfigurationBuilder,
) -> crate::types::builders::FsxConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    if builder.file_system_type.is_none() {
        builder.file_system_type = "no value was set".parse::<crate::types::FsxFileSystemType>().ok()
    }
    if builder.vpc_configuration.is_none() {
        builder.vpc_configuration = {
            let builder = crate::types::builders::DataSourceVpcConfigurationBuilder::default();
            crate::serde_util::data_source_vpc_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn git_hub_configuration_correct_errors(
    mut builder: crate::types::builders::GitHubConfigurationBuilder,
) -> crate::types::builders::GitHubConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn google_drive_configuration_correct_errors(
    mut builder: crate::types::builders::GoogleDriveConfigurationBuilder,
) -> crate::types::builders::GoogleDriveConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn hierarchical_principal_correct_errors(
    mut builder: crate::types::builders::HierarchicalPrincipalBuilder,
) -> crate::types::builders::HierarchicalPrincipalBuilder {
    if builder.principal_list.is_none() {
        builder.principal_list = Some(Default::default())
    }
    builder
}

pub(crate) fn hook_configuration_correct_errors(
    mut builder: crate::types::builders::HookConfigurationBuilder,
) -> crate::types::builders::HookConfigurationBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn index_configuration_summary_correct_errors(
    mut builder: crate::types::builders::IndexConfigurationSummaryBuilder,
) -> crate::types::builders::IndexConfigurationSummaryBuilder {
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IndexStatus>().ok()
    }
    builder
}

pub(crate) fn jira_configuration_correct_errors(
    mut builder: crate::types::builders::JiraConfigurationBuilder,
) -> crate::types::builders::JiraConfigurationBuilder {
    if builder.jira_account_url.is_none() {
        builder.jira_account_url = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn one_drive_configuration_correct_errors(
    mut builder: crate::types::builders::OneDriveConfigurationBuilder,
) -> crate::types::builders::OneDriveConfigurationBuilder {
    if builder.tenant_domain.is_none() {
        builder.tenant_domain = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.one_drive_users.is_none() {
        builder.one_drive_users = {
            let builder = crate::types::builders::OneDriveUsersBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn principal_correct_errors(mut builder: crate::types::builders::PrincipalBuilder) -> crate::types::builders::PrincipalBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PrincipalType>().ok()
    }
    if builder.access.is_none() {
        builder.access = "no value was set".parse::<crate::types::ReadAccessType>().ok()
    }
    builder
}

pub(crate) fn quip_configuration_correct_errors(
    mut builder: crate::types::builders::QuipConfigurationBuilder,
) -> crate::types::builders::QuipConfigurationBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::S3DataSourceConfigurationBuilder,
) -> crate::types::builders::S3DataSourceConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceConfigurationBuilder,
) -> crate::types::builders::SalesforceConfigurationBuilder {
    if builder.server_url.is_none() {
        builder.server_url = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn service_now_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceNowConfigurationBuilder,
) -> crate::types::builders::ServiceNowConfigurationBuilder {
    if builder.host_url.is_none() {
        builder.host_url = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.service_now_build_version.is_none() {
        builder.service_now_build_version = "no value was set".parse::<crate::types::ServiceNowBuildVersionType>().ok()
    }
    builder
}

pub(crate) fn share_point_configuration_correct_errors(
    mut builder: crate::types::builders::SharePointConfigurationBuilder,
) -> crate::types::builders::SharePointConfigurationBuilder {
    if builder.share_point_version.is_none() {
        builder.share_point_version = "no value was set".parse::<crate::types::SharePointVersion>().ok()
    }
    if builder.urls.is_none() {
        builder.urls = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn slack_configuration_correct_errors(
    mut builder: crate::types::builders::SlackConfigurationBuilder,
) -> crate::types::builders::SlackConfigurationBuilder {
    if builder.team_id.is_none() {
        builder.team_id = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.slack_entity_list.is_none() {
        builder.slack_entity_list = Some(Default::default())
    }
    if builder.since_crawl_date.is_none() {
        builder.since_crawl_date = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn text_document_statistics_correct_errors(
    mut builder: crate::types::builders::TextDocumentStatisticsBuilder,
) -> crate::types::builders::TextDocumentStatisticsBuilder {
    if builder.indexed_text_documents_count.is_none() {
        builder.indexed_text_documents_count = Some(Default::default())
    }
    if builder.indexed_text_bytes.is_none() {
        builder.indexed_text_bytes = Some(Default::default())
    }
    builder
}

pub(crate) fn web_crawler_configuration_correct_errors(
    mut builder: crate::types::builders::WebCrawlerConfigurationBuilder,
) -> crate::types::builders::WebCrawlerConfigurationBuilder {
    if builder.urls.is_none() {
        builder.urls = {
            let builder = crate::types::builders::UrlsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn work_docs_configuration_correct_errors(
    mut builder: crate::types::builders::WorkDocsConfigurationBuilder,
) -> crate::types::builders::WorkDocsConfigurationBuilder {
    if builder.organization_id.is_none() {
        builder.organization_id = Some(Default::default())
    }
    builder
}

pub(crate) fn acl_configuration_correct_errors(
    mut builder: crate::types::builders::AclConfigurationBuilder,
) -> crate::types::builders::AclConfigurationBuilder {
    if builder.allowed_groups_column_name.is_none() {
        builder.allowed_groups_column_name = Some(Default::default())
    }
    builder
}

pub(crate) fn collapsed_result_detail_correct_errors(
    mut builder: crate::types::builders::CollapsedResultDetailBuilder,
) -> crate::types::builders::CollapsedResultDetailBuilder {
    if builder.document_attribute.is_none() {
        builder.document_attribute = {
            let builder = crate::types::builders::DocumentAttributeBuilder::default();
            crate::serde_util::document_attribute_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn column_configuration_correct_errors(
    mut builder: crate::types::builders::ColumnConfigurationBuilder,
) -> crate::types::builders::ColumnConfigurationBuilder {
    if builder.document_id_column_name.is_none() {
        builder.document_id_column_name = Some(Default::default())
    }
    if builder.document_data_column_name.is_none() {
        builder.document_data_column_name = Some(Default::default())
    }
    if builder.change_detecting_columns.is_none() {
        builder.change_detecting_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn connection_configuration_correct_errors(
    mut builder: crate::types::builders::ConnectionConfigurationBuilder,
) -> crate::types::builders::ConnectionConfigurationBuilder {
    if builder.database_host.is_none() {
        builder.database_host = Some(Default::default())
    }
    if builder.database_port.is_none() {
        builder.database_port = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn document_attribute_condition_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeConditionBuilder,
) -> crate::types::builders::DocumentAttributeConditionBuilder {
    if builder.condition_document_attribute_key.is_none() {
        builder.condition_document_attribute_key = Some(Default::default())
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::ConditionOperator>().ok()
    }
    builder
}

pub(crate) fn json_token_type_configuration_correct_errors(
    mut builder: crate::types::builders::JsonTokenTypeConfigurationBuilder,
) -> crate::types::builders::JsonTokenTypeConfigurationBuilder {
    if builder.user_name_attribute_field.is_none() {
        builder.user_name_attribute_field = Some(Default::default())
    }
    if builder.group_attribute_field.is_none() {
        builder.group_attribute_field = Some(Default::default())
    }
    builder
}

pub(crate) fn jwt_token_type_configuration_correct_errors(
    mut builder: crate::types::builders::JwtTokenTypeConfigurationBuilder,
) -> crate::types::builders::JwtTokenTypeConfigurationBuilder {
    if builder.key_location.is_none() {
        builder.key_location = "no value was set".parse::<crate::types::KeyLocation>().ok()
    }
    builder
}

pub(crate) fn on_premise_configuration_correct_errors(
    mut builder: crate::types::builders::OnPremiseConfigurationBuilder,
) -> crate::types::builders::OnPremiseConfigurationBuilder {
    if builder.host_url.is_none() {
        builder.host_url = Some(Default::default())
    }
    if builder.organization_name.is_none() {
        builder.organization_name = Some(Default::default())
    }
    if builder.ssl_certificate_s3_path.is_none() {
        builder.ssl_certificate_s3_path = {
            let builder = crate::types::builders::S3PathBuilder::default();
            crate::serde_util::s3_path_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn proxy_configuration_correct_errors(
    mut builder: crate::types::builders::ProxyConfigurationBuilder,
) -> crate::types::builders::ProxyConfigurationBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn saa_s_configuration_correct_errors(
    mut builder: crate::types::builders::SaaSConfigurationBuilder,
) -> crate::types::builders::SaaSConfigurationBuilder {
    if builder.organization_name.is_none() {
        builder.organization_name = Some(Default::default())
    }
    if builder.host_url.is_none() {
        builder.host_url = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_chatter_feed_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceChatterFeedConfigurationBuilder,
) -> crate::types::builders::SalesforceChatterFeedConfigurationBuilder {
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_knowledge_article_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceKnowledgeArticleConfigurationBuilder,
) -> crate::types::builders::SalesforceKnowledgeArticleConfigurationBuilder {
    if builder.included_states.is_none() {
        builder.included_states = Some(Default::default())
    }
    builder
}

pub(crate) fn service_now_knowledge_article_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceNowKnowledgeArticleConfigurationBuilder,
) -> crate::types::builders::ServiceNowKnowledgeArticleConfigurationBuilder {
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn service_now_service_catalog_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceNowServiceCatalogConfigurationBuilder,
) -> crate::types::builders::ServiceNowServiceCatalogConfigurationBuilder {
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn additional_result_attribute_correct_errors(
    mut builder: crate::types::builders::AdditionalResultAttributeBuilder,
) -> crate::types::builders::AdditionalResultAttributeBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::AdditionalResultAttributeValueType>().ok()
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::AdditionalResultAttributeValueBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn data_source_to_index_field_mapping_correct_errors(
    mut builder: crate::types::builders::DataSourceToIndexFieldMappingBuilder,
) -> crate::types::builders::DataSourceToIndexFieldMappingBuilder {
    if builder.data_source_field_name.is_none() {
        builder.data_source_field_name = Some(Default::default())
    }
    if builder.index_field_name.is_none() {
        builder.index_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn document_attribute_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeBuilder,
) -> crate::types::builders::DocumentAttributeBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::DocumentAttributeValueBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn salesforce_standard_knowledge_article_type_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceStandardKnowledgeArticleTypeConfigurationBuilder,
) -> crate::types::builders::SalesforceStandardKnowledgeArticleTypeConfigurationBuilder {
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_standard_object_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceStandardObjectConfigurationBuilder,
) -> crate::types::builders::SalesforceStandardObjectConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::SalesforceStandardObjectName>().ok()
    }
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn seed_url_configuration_correct_errors(
    mut builder: crate::types::builders::SeedUrlConfigurationBuilder,
) -> crate::types::builders::SeedUrlConfigurationBuilder {
    if builder.seed_urls.is_none() {
        builder.seed_urls = Some(Default::default())
    }
    builder
}

pub(crate) fn site_maps_configuration_correct_errors(
    mut builder: crate::types::builders::SiteMapsConfigurationBuilder,
) -> crate::types::builders::SiteMapsConfigurationBuilder {
    if builder.site_maps.is_none() {
        builder.site_maps = Some(Default::default())
    }
    builder
}

pub(crate) fn basic_authentication_configuration_correct_errors(
    mut builder: crate::types::builders::BasicAuthenticationConfigurationBuilder,
) -> crate::types::builders::BasicAuthenticationConfigurationBuilder {
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.credentials.is_none() {
        builder.credentials = Some(Default::default())
    }
    builder
}

pub(crate) fn highlight_correct_errors(mut builder: crate::types::builders::HighlightBuilder) -> crate::types::builders::HighlightBuilder {
    if builder.begin_offset.is_none() {
        builder.begin_offset = Some(Default::default())
    }
    if builder.end_offset.is_none() {
        builder.end_offset = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_custom_knowledge_article_type_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceCustomKnowledgeArticleTypeConfigurationBuilder,
) -> crate::types::builders::SalesforceCustomKnowledgeArticleTypeConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.document_data_field_name.is_none() {
        builder.document_data_field_name = Some(Default::default())
    }
    builder
}
