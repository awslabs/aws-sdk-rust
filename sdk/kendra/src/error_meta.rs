// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this action. Please ensure you have the required permission policies and user accounts and try again.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>A conflict occurred with the request. Please fix any inconsistences with your resources and try again.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An issue occurred with the internal server used for your Amazon Kendra service. Please wait a few minutes and try again, or contact <a href="http://aws.amazon.com/aws.amazon.com/contact-us"> Support</a> for help.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The input to the request is not valid. Please provide the correct input and try again.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The resource you want to use already exists. Please check you have provided the correct resource and try again.</p>
    ResourceAlreadyExistException(crate::types::error::ResourceAlreadyExistException),
    /// <p>The resource you want to use is currently in use. Please check you have provided the correct resource and try again.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The resource you want to use doesnâ€™t exist. Please check you have provided the correct resource and try again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The resource you want to use isn't available. Please check you have provided the correct resource and try again.</p>
    ResourceUnavailableException(crate::types::error::ResourceUnavailableException),
    /// <p>You have exceeded the set limits for your Amazon Kendra service. Please see Quotas[hyperlink Kendra Quotas pg] for more information, or contact <a href="http://aws.amazon.com/aws.amazon.com/contact-us"> Support</a> to inquire about an increase of limits.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling. Please reduce the number of requests and try again.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints set by the Amazon Kendra service. Please provide the correct input and try again.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError>
    for Error
{
    fn from(
        err: crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError,
    ) -> Self {
        match err {
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::ResourceAlreadyExistException(inner) => Error::ResourceAlreadyExistException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_entities_to_experience::AssociateEntitiesToExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError>
    for Error
{
    fn from(
        err: crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError,
    ) -> Self {
        match err {
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::ResourceAlreadyExistException(inner) => Error::ResourceAlreadyExistException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_personas_to_entities::AssociatePersonasToEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_document::BatchDeleteDocumentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_document::BatchDeleteDocumentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_document::BatchDeleteDocumentError> for Error {
    fn from(err: crate::operation::batch_delete_document::BatchDeleteDocumentError) -> Self {
        match err {
            crate::operation::batch_delete_document::BatchDeleteDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_document_status::BatchGetDocumentStatusError> for Error {
    fn from(err: crate::operation::batch_get_document_status::BatchGetDocumentStatusError) -> Self {
        match err {
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_document_status::BatchGetDocumentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_put_document::BatchPutDocumentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_put_document::BatchPutDocumentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_put_document::BatchPutDocumentError> for Error {
    fn from(err: crate::operation::batch_put_document::BatchPutDocumentError) -> Self {
        match err {
            crate::operation::batch_put_document::BatchPutDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::clear_query_suggestions::ClearQuerySuggestionsError> for Error {
    fn from(err: crate::operation::clear_query_suggestions::ClearQuerySuggestionsError) -> Self {
        match err {
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::clear_query_suggestions::ClearQuerySuggestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError> for Error {
    fn from(err: crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError) -> Self {
        match err {
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_access_control_configuration::CreateAccessControlConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_data_source::CreateDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_source::CreateDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_source::CreateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceAlreadyExistException(inner) => Error::ResourceAlreadyExistException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_experience::CreateExperienceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_experience::CreateExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_experience::CreateExperienceError> for Error {
    fn from(err: crate::operation::create_experience::CreateExperienceError) -> Self {
        match err {
            crate::operation::create_experience::CreateExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_experience::CreateExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_experience::CreateExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_experience::CreateExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_experience::CreateExperienceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_experience::CreateExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_experience::CreateExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_experience::CreateExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_faq::CreateFaqError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_faq::CreateFaqError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_faq::CreateFaqError> for Error {
    fn from(err: crate::operation::create_faq::CreateFaqError) -> Self {
        match err {
            crate::operation::create_faq::CreateFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_faq::CreateFaqError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_faq::CreateFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_faq::CreateFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_faq::CreateFaqError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_faq::CreateFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_faq::CreateFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_faq::CreateFaqError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_index::CreateIndexError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_index::CreateIndexError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_index::CreateIndexError> for Error {
    fn from(err: crate::operation::create_index::CreateIndexError) -> Self {
        match err {
            crate::operation::create_index::CreateIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_index::CreateIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_index::CreateIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_index::CreateIndexError::ResourceAlreadyExistException(
                inner,
            ) => Error::ResourceAlreadyExistException(inner),
            crate::operation::create_index::CreateIndexError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_index::CreateIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_index::CreateIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_index::CreateIndexError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError,
    > for Error
{
    fn from(
        err: crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError,
    ) -> Self {
        match err {
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_query_suggestions_block_list::CreateQuerySuggestionsBlockListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_thesaurus::CreateThesaurusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_thesaurus::CreateThesaurusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_thesaurus::CreateThesaurusError> for Error {
    fn from(err: crate::operation::create_thesaurus::CreateThesaurusError) -> Self {
        match err {
            crate::operation::create_thesaurus::CreateThesaurusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_thesaurus::CreateThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError> for Error {
    fn from(err: crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError) -> Self {
        match err {
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_access_control_configuration::DeleteAccessControlConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_data_source::DeleteDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_data_source::DeleteDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_experience::DeleteExperienceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_experience::DeleteExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_experience::DeleteExperienceError> for Error {
    fn from(err: crate::operation::delete_experience::DeleteExperienceError) -> Self {
        match err {
            crate::operation::delete_experience::DeleteExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_experience::DeleteExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_experience::DeleteExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_experience::DeleteExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_experience::DeleteExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_experience::DeleteExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_experience::DeleteExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_faq::DeleteFaqError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_faq::DeleteFaqError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_faq::DeleteFaqError> for Error {
    fn from(err: crate::operation::delete_faq::DeleteFaqError) -> Self {
        match err {
            crate::operation::delete_faq::DeleteFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_faq::DeleteFaqError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_index::DeleteIndexError> for Error {
    fn from(err: crate::operation::delete_index::DeleteIndexError) -> Self {
        match err {
            crate::operation::delete_index::DeleteIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_index::DeleteIndexError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_principal_mapping::DeletePrincipalMappingError> for Error {
    fn from(err: crate::operation::delete_principal_mapping::DeletePrincipalMappingError) -> Self {
        match err {
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_principal_mapping::DeletePrincipalMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError,
    > for Error
{
    fn from(
        err: crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError,
    ) -> Self {
        match err {
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_query_suggestions_block_list::DeleteQuerySuggestionsBlockListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_thesaurus::DeleteThesaurusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_thesaurus::DeleteThesaurusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_thesaurus::DeleteThesaurusError> for Error {
    fn from(err: crate::operation::delete_thesaurus::DeleteThesaurusError) -> Self {
        match err {
            crate::operation::delete_thesaurus::DeleteThesaurusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_thesaurus::DeleteThesaurusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_thesaurus::DeleteThesaurusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_thesaurus::DeleteThesaurusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_thesaurus::DeleteThesaurusError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_thesaurus::DeleteThesaurusError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_thesaurus::DeleteThesaurusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError> for Error {
    fn from(err: crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError) -> Self {
        match err {
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_access_control_configuration::DescribeAccessControlConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_data_source::DescribeDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_data_source::DescribeDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_data_source::DescribeDataSourceError> for Error {
    fn from(err: crate::operation::describe_data_source::DescribeDataSourceError) -> Self {
        match err {
            crate::operation::describe_data_source::DescribeDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_data_source::DescribeDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_data_source::DescribeDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_data_source::DescribeDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_data_source::DescribeDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_data_source::DescribeDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_experience::DescribeExperienceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_experience::DescribeExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_experience::DescribeExperienceError> for Error {
    fn from(err: crate::operation::describe_experience::DescribeExperienceError) -> Self {
        match err {
            crate::operation::describe_experience::DescribeExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_experience::DescribeExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_experience::DescribeExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_experience::DescribeExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_experience::DescribeExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_experience::DescribeExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_faq::DescribeFaqError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::describe_faq::DescribeFaqError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_faq::DescribeFaqError> for Error {
    fn from(err: crate::operation::describe_faq::DescribeFaqError) -> Self {
        match err {
            crate::operation::describe_faq::DescribeFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_faq::DescribeFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_faq::DescribeFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_faq::DescribeFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_faq::DescribeFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_faq::DescribeFaqError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_index::DescribeIndexError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_index::DescribeIndexError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_index::DescribeIndexError> for Error {
    fn from(err: crate::operation::describe_index::DescribeIndexError) -> Self {
        match err {
            crate::operation::describe_index::DescribeIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_index::DescribeIndexError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_index::DescribeIndexError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_index::DescribeIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_index::DescribeIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_index::DescribeIndexError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_principal_mapping::DescribePrincipalMappingError> for Error {
    fn from(
        err: crate::operation::describe_principal_mapping::DescribePrincipalMappingError,
    ) -> Self {
        match err {
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_principal_mapping::DescribePrincipalMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError> for Error {
    fn from(err: crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError) -> Self {
        match err {
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_query_suggestions_block_list::DescribeQuerySuggestionsBlockListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError>
    for Error
{
    fn from(
        err: crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError,
    ) -> Self {
        match err {
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_query_suggestions_config::DescribeQuerySuggestionsConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_thesaurus::DescribeThesaurusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_thesaurus::DescribeThesaurusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_thesaurus::DescribeThesaurusError> for Error {
    fn from(err: crate::operation::describe_thesaurus::DescribeThesaurusError) -> Self {
        match err {
            crate::operation::describe_thesaurus::DescribeThesaurusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_thesaurus::DescribeThesaurusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_thesaurus::DescribeThesaurusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_thesaurus::DescribeThesaurusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_thesaurus::DescribeThesaurusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_thesaurus::DescribeThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError> for Error {
    fn from(err: crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError) -> Self {
        match err {
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_entities_from_experience::DisassociateEntitiesFromExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError> for Error {
    fn from(err: crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError) -> Self {
        match err {
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_personas_from_entities::DisassociatePersonasFromEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_query_suggestions::GetQuerySuggestionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_query_suggestions::GetQuerySuggestionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_query_suggestions::GetQuerySuggestionsError> for Error {
    fn from(err: crate::operation::get_query_suggestions::GetQuerySuggestionsError) -> Self {
        match err {
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_suggestions::GetQuerySuggestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_snapshots::GetSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_snapshots::GetSnapshotsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_snapshots::GetSnapshotsError> for Error {
    fn from(err: crate::operation::get_snapshots::GetSnapshotsError) -> Self {
        match err {
            crate::operation::get_snapshots::GetSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_snapshots::GetSnapshotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_snapshots::GetSnapshotsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_snapshots::GetSnapshotsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_snapshots::GetSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_access_control_configurations::ListAccessControlConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_data_sources::ListDataSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_sources::ListDataSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError> for Error {
    fn from(
        err: crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError,
    ) -> Self {
        match err {
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_entity_personas::ListEntityPersonasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_entity_personas::ListEntityPersonasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_entity_personas::ListEntityPersonasError> for Error {
    fn from(err: crate::operation::list_entity_personas::ListEntityPersonasError) -> Self {
        match err {
            crate::operation::list_entity_personas::ListEntityPersonasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_entity_personas::ListEntityPersonasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_entity_personas::ListEntityPersonasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_entity_personas::ListEntityPersonasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_entity_personas::ListEntityPersonasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_entity_personas::ListEntityPersonasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_experience_entities::ListExperienceEntitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_experience_entities::ListExperienceEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_experience_entities::ListExperienceEntitiesError> for Error {
    fn from(err: crate::operation::list_experience_entities::ListExperienceEntitiesError) -> Self {
        match err {
            crate::operation::list_experience_entities::ListExperienceEntitiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_experience_entities::ListExperienceEntitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_experience_entities::ListExperienceEntitiesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_experience_entities::ListExperienceEntitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_experience_entities::ListExperienceEntitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_experience_entities::ListExperienceEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_experiences::ListExperiencesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_experiences::ListExperiencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_experiences::ListExperiencesError> for Error {
    fn from(err: crate::operation::list_experiences::ListExperiencesError) -> Self {
        match err {
            crate::operation::list_experiences::ListExperiencesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_experiences::ListExperiencesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_experiences::ListExperiencesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_experiences::ListExperiencesError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::list_experiences::ListExperiencesError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_experiences::ListExperiencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_faqs::ListFaqsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_faqs::ListFaqsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_faqs::ListFaqsError> for Error {
    fn from(err: crate::operation::list_faqs::ListFaqsError) -> Self {
        match err {
            crate::operation::list_faqs::ListFaqsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_faqs::ListFaqsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_faqs::ListFaqsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_faqs::ListFaqsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_faqs::ListFaqsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_faqs::ListFaqsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError>
    for Error
{
    fn from(
        err: crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError,
    ) -> Self {
        match err {
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_groups_older_than_ordering_id::ListGroupsOlderThanOrderingIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_indices::ListIndicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_indices::ListIndicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_indices::ListIndicesError> for Error {
    fn from(err: crate::operation::list_indices::ListIndicesError) -> Self {
        match err {
            crate::operation::list_indices::ListIndicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_indices::ListIndicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_indices::ListIndicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_indices::ListIndicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_indices::ListIndicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError>
    for Error
{
    fn from(
        err: crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError,
    ) -> Self {
        match err {
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_query_suggestions_block_lists::ListQuerySuggestionsBlockListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceUnavailableException(inner) => Error::ResourceUnavailableException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_thesauri::ListThesauriError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_thesauri::ListThesauriError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_thesauri::ListThesauriError> for Error {
    fn from(err: crate::operation::list_thesauri::ListThesauriError) -> Self {
        match err {
            crate::operation::list_thesauri::ListThesauriError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_thesauri::ListThesauriError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_thesauri::ListThesauriError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_thesauri::ListThesauriError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_thesauri::ListThesauriError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_thesauri::ListThesauriError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_principal_mapping::PutPrincipalMappingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_principal_mapping::PutPrincipalMappingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_principal_mapping::PutPrincipalMappingError> for Error {
    fn from(err: crate::operation::put_principal_mapping::PutPrincipalMappingError) -> Self {
        match err {
            crate::operation::put_principal_mapping::PutPrincipalMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_principal_mapping::PutPrincipalMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::query::QueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::query::QueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::query::QueryError> for Error {
    fn from(err: crate::operation::query::QueryError) -> Self {
        match err {
            crate::operation::query::QueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::query::QueryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::query::QueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::query::QueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::query::QueryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::query::QueryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::query::QueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::query::QueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError> for Error {
    fn from(
        err: crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError,
    ) -> Self {
        match err {
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError> for Error {
    fn from(err: crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError) -> Self {
        match err {
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::submit_feedback::SubmitFeedbackError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::submit_feedback::SubmitFeedbackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::submit_feedback::SubmitFeedbackError> for Error {
    fn from(err: crate::operation::submit_feedback::SubmitFeedbackError) -> Self {
        match err {
            crate::operation::submit_feedback::SubmitFeedbackError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::ResourceUnavailableException(inner) => Error::ResourceUnavailableException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::submit_feedback::SubmitFeedbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceUnavailableException(
                inner,
            ) => Error::ResourceUnavailableException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceUnavailableException(
                inner,
            ) => Error::ResourceUnavailableException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError> for Error {
    fn from(err: crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError) -> Self {
        match err {
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_access_control_configuration::UpdateAccessControlConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_experience::UpdateExperienceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_experience::UpdateExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_experience::UpdateExperienceError> for Error {
    fn from(err: crate::operation::update_experience::UpdateExperienceError) -> Self {
        match err {
            crate::operation::update_experience::UpdateExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_experience::UpdateExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_experience::UpdateExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_experience::UpdateExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_experience::UpdateExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_experience::UpdateExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_experience::UpdateExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_index::UpdateIndexError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_index::UpdateIndexError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_index::UpdateIndexError> for Error {
    fn from(err: crate::operation::update_index::UpdateIndexError) -> Self {
        match err {
            crate::operation::update_index::UpdateIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_index::UpdateIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_index::UpdateIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_index::UpdateIndexError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_index::UpdateIndexError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_index::UpdateIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_index::UpdateIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_index::UpdateIndexError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError,
    > for Error
{
    fn from(
        err: crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError,
    ) -> Self {
        match err {
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_query_suggestions_block_list::UpdateQuerySuggestionsBlockListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError>
    for Error
{
    fn from(
        err: crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError,
    ) -> Self {
        match err {
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_query_suggestions_config::UpdateQuerySuggestionsConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_thesaurus::UpdateThesaurusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_thesaurus::UpdateThesaurusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_thesaurus::UpdateThesaurusError> for Error {
    fn from(err: crate::operation::update_thesaurus::UpdateThesaurusError) -> Self {
        match err {
            crate::operation::update_thesaurus::UpdateThesaurusError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_thesaurus::UpdateThesaurusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_thesaurus::UpdateThesaurusError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_thesaurus::UpdateThesaurusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_thesaurus::UpdateThesaurusError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::update_thesaurus::UpdateThesaurusError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::update_thesaurus::UpdateThesaurusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::ResourceAlreadyExistException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
