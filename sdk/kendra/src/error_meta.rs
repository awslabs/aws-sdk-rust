// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this action. Please ensure you have the required permission policies and user accounts and try again.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>A conflict occurred with the request. Please fix any inconsistences with your resources and try again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An issue occurred with the internal server used for your Amazon Kendra service. Please wait a few minutes and try again, or contact <a href="http://aws.amazon.com/aws.amazon.com/contact-us"> Support</a> for help.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The input to the request is not valid. Please provide the correct input and try again.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource you want to use already exists. Please check you have provided the correct resource and try again.</p>
    ResourceAlreadyExistException(crate::error::ResourceAlreadyExistException),
    /// <p>The resource you want to use is currently in use. Please check you have provided the correct resource and try again.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The resource you want to use doesnâ€™t exist. Please check you have provided the correct resource and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The resource you want to use isn't available. Please check you have provided the correct resource and try again.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>You have exceeded the set limits for your Amazon Kendra service. Please see Quotas[hyperlink Kendra Quotas pg] for more information, or contact <a href="http://aws.amazon.com/aws.amazon.com/contact-us"> Support</a> to inquire about an increase of limits.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling. Please reduce the number of requests and try again.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints set by the Amazon Kendra service. Please provide the correct input and try again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateEntitiesToExperienceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateEntitiesToExperienceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateEntitiesToExperienceError> for Error {
    fn from(err: crate::error::AssociateEntitiesToExperienceError) -> Self {
        match err {
            crate::error::AssociateEntitiesToExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateEntitiesToExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateEntitiesToExperienceError::ResourceAlreadyExistException(
                inner,
            ) => Error::ResourceAlreadyExistException(inner),
            crate::error::AssociateEntitiesToExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateEntitiesToExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateEntitiesToExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateEntitiesToExperienceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePersonasToEntitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociatePersonasToEntitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePersonasToEntitiesError> for Error {
    fn from(err: crate::error::AssociatePersonasToEntitiesError) -> Self {
        match err {
            crate::error::AssociatePersonasToEntitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePersonasToEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociatePersonasToEntitiesError::ResourceAlreadyExistException(
                inner,
            ) => Error::ResourceAlreadyExistException(inner),
            crate::error::AssociatePersonasToEntitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociatePersonasToEntitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociatePersonasToEntitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociatePersonasToEntitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteDocumentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteDocumentError> for Error {
    fn from(err: crate::error::BatchDeleteDocumentError) -> Self {
        match err {
            crate::error::BatchDeleteDocumentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchDeleteDocumentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::BatchDeleteDocumentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDeleteDocumentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchDeleteDocumentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchDeleteDocumentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchDeleteDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetDocumentStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchGetDocumentStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetDocumentStatusError> for Error {
    fn from(err: crate::error::BatchGetDocumentStatusError) -> Self {
        match err {
            crate::error::BatchGetDocumentStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchGetDocumentStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::BatchGetDocumentStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchGetDocumentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchGetDocumentStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchGetDocumentStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchGetDocumentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchPutDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchPutDocumentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchPutDocumentError> for Error {
    fn from(err: crate::error::BatchPutDocumentError) -> Self {
        match err {
            crate::error::BatchPutDocumentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchPutDocumentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::BatchPutDocumentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchPutDocumentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchPutDocumentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::BatchPutDocumentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchPutDocumentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchPutDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ClearQuerySuggestionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ClearQuerySuggestionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ClearQuerySuggestionsError> for Error {
    fn from(err: crate::error::ClearQuerySuggestionsError) -> Self {
        match err {
            crate::error::ClearQuerySuggestionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ClearQuerySuggestionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ClearQuerySuggestionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ClearQuerySuggestionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ClearQuerySuggestionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ClearQuerySuggestionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ClearQuerySuggestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateAccessControlConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateAccessControlConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAccessControlConfigurationError> for Error {
    fn from(err: crate::error::CreateAccessControlConfigurationError) -> Self {
        match err {
            crate::error::CreateAccessControlConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAccessControlConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAccessControlConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAccessControlConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CreateAccessControlConfigurationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateAccessControlConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAccessControlConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAccessControlConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceError> for Error {
    fn from(err: crate::error::CreateDataSourceError) -> Self {
        match err {
            crate::error::CreateDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDataSourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDataSourceError::ResourceAlreadyExistException(inner) => {
                Error::ResourceAlreadyExistException(inner)
            }
            crate::error::CreateDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateExperienceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateExperienceError> for Error {
    fn from(err: crate::error::CreateExperienceError) -> Self {
        match err {
            crate::error::CreateExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateExperienceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateExperienceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFaqError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFaqError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFaqError> for Error {
    fn from(err: crate::error::CreateFaqError) -> Self {
        match err {
            crate::error::CreateFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFaqError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFaqError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFaqError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIndexError> for Error {
    fn from(err: crate::error::CreateIndexError) -> Self {
        match err {
            crate::error::CreateIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateIndexError::ResourceAlreadyExistException(inner) => {
                Error::ResourceAlreadyExistException(inner)
            }
            crate::error::CreateIndexError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateQuerySuggestionsBlockListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateQuerySuggestionsBlockListError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateQuerySuggestionsBlockListError> for Error {
    fn from(err: crate::error::CreateQuerySuggestionsBlockListError) -> Self {
        match err {
            crate::error::CreateQuerySuggestionsBlockListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateQuerySuggestionsBlockListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateQuerySuggestionsBlockListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateQuerySuggestionsBlockListError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CreateQuerySuggestionsBlockListError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateQuerySuggestionsBlockListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateQuerySuggestionsBlockListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateQuerySuggestionsBlockListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateThesaurusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateThesaurusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateThesaurusError> for Error {
    fn from(err: crate::error::CreateThesaurusError) -> Self {
        match err {
            crate::error::CreateThesaurusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateThesaurusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateThesaurusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateThesaurusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateThesaurusError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateThesaurusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateThesaurusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAccessControlConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAccessControlConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccessControlConfigurationError> for Error {
    fn from(err: crate::error::DeleteAccessControlConfigurationError) -> Self {
        match err {
            crate::error::DeleteAccessControlConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAccessControlConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAccessControlConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAccessControlConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteAccessControlConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAccessControlConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAccessControlConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataSourceError> for Error {
    fn from(err: crate::error::DeleteDataSourceError) -> Self {
        match err {
            crate::error::DeleteDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDataSourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteExperienceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteExperienceError> for Error {
    fn from(err: crate::error::DeleteExperienceError) -> Self {
        match err {
            crate::error::DeleteExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteExperienceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFaqError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFaqError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFaqError> for Error {
    fn from(err: crate::error::DeleteFaqError) -> Self {
        match err {
            crate::error::DeleteFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFaqError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteFaqError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIndexError> for Error {
    fn from(err: crate::error::DeleteIndexError) -> Self {
        match err {
            crate::error::DeleteIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteIndexError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePrincipalMappingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePrincipalMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePrincipalMappingError> for Error {
    fn from(err: crate::error::DeletePrincipalMappingError) -> Self {
        match err {
            crate::error::DeletePrincipalMappingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePrincipalMappingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePrincipalMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePrincipalMappingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePrincipalMappingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePrincipalMappingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePrincipalMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteQuerySuggestionsBlockListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteQuerySuggestionsBlockListError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteQuerySuggestionsBlockListError> for Error {
    fn from(err: crate::error::DeleteQuerySuggestionsBlockListError) -> Self {
        match err {
            crate::error::DeleteQuerySuggestionsBlockListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteQuerySuggestionsBlockListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteQuerySuggestionsBlockListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteQuerySuggestionsBlockListError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteQuerySuggestionsBlockListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteQuerySuggestionsBlockListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteQuerySuggestionsBlockListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteThesaurusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteThesaurusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteThesaurusError> for Error {
    fn from(err: crate::error::DeleteThesaurusError) -> Self {
        match err {
            crate::error::DeleteThesaurusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteThesaurusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteThesaurusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteThesaurusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteThesaurusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteThesaurusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeAccessControlConfigurationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAccessControlConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccessControlConfigurationError> for Error {
    fn from(err: crate::error::DescribeAccessControlConfigurationError) -> Self {
        match err {
            crate::error::DescribeAccessControlConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccessControlConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeAccessControlConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAccessControlConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccessControlConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeAccessControlConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSourceError> for Error {
    fn from(err: crate::error::DescribeDataSourceError) -> Self {
        match err {
            crate::error::DescribeDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExperienceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExperienceError> for Error {
    fn from(err: crate::error::DescribeExperienceError) -> Self {
        match err {
            crate::error::DescribeExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFaqError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeFaqError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFaqError> for Error {
    fn from(err: crate::error::DescribeFaqError) -> Self {
        match err {
            crate::error::DescribeFaqError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeFaqError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeFaqError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeFaqError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeFaqError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeFaqError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIndexError> for Error {
    fn from(err: crate::error::DescribeIndexError) -> Self {
        match err {
            crate::error::DescribeIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeIndexError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePrincipalMappingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePrincipalMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePrincipalMappingError> for Error {
    fn from(err: crate::error::DescribePrincipalMappingError) -> Self {
        match err {
            crate::error::DescribePrincipalMappingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePrincipalMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePrincipalMappingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePrincipalMappingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePrincipalMappingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePrincipalMappingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeQuerySuggestionsBlockListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeQuerySuggestionsBlockListError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeQuerySuggestionsBlockListError> for Error {
    fn from(err: crate::error::DescribeQuerySuggestionsBlockListError) -> Self {
        match err {
            crate::error::DescribeQuerySuggestionsBlockListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeQuerySuggestionsBlockListError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeQuerySuggestionsBlockListError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeQuerySuggestionsBlockListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeQuerySuggestionsBlockListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeQuerySuggestionsBlockListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeQuerySuggestionsConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeQuerySuggestionsConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeQuerySuggestionsConfigError> for Error {
    fn from(err: crate::error::DescribeQuerySuggestionsConfigError) -> Self {
        match err {
            crate::error::DescribeQuerySuggestionsConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeQuerySuggestionsConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeQuerySuggestionsConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeQuerySuggestionsConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeQuerySuggestionsConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeQuerySuggestionsConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeThesaurusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeThesaurusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeThesaurusError> for Error {
    fn from(err: crate::error::DescribeThesaurusError) -> Self {
        match err {
            crate::error::DescribeThesaurusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeThesaurusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeThesaurusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeThesaurusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeThesaurusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DisassociateEntitiesFromExperienceError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateEntitiesFromExperienceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateEntitiesFromExperienceError> for Error {
    fn from(err: crate::error::DisassociateEntitiesFromExperienceError) -> Self {
        match err {
            crate::error::DisassociateEntitiesFromExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateEntitiesFromExperienceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DisassociateEntitiesFromExperienceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateEntitiesFromExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateEntitiesFromExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateEntitiesFromExperienceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociatePersonasFromEntitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociatePersonasFromEntitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociatePersonasFromEntitiesError> for Error {
    fn from(err: crate::error::DisassociatePersonasFromEntitiesError) -> Self {
        match err {
            crate::error::DisassociatePersonasFromEntitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociatePersonasFromEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociatePersonasFromEntitiesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociatePersonasFromEntitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociatePersonasFromEntitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociatePersonasFromEntitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQuerySuggestionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetQuerySuggestionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQuerySuggestionsError> for Error {
    fn from(err: crate::error::GetQuerySuggestionsError) -> Self {
        match err {
            crate::error::GetQuerySuggestionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetQuerySuggestionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetQuerySuggestionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetQuerySuggestionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetQuerySuggestionsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetQuerySuggestionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetQuerySuggestionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetQuerySuggestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSnapshotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSnapshotsError> for Error {
    fn from(err: crate::error::GetSnapshotsError) -> Self {
        match err {
            crate::error::GetSnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSnapshotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSnapshotsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetSnapshotsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAccessControlConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAccessControlConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccessControlConfigurationsError> for Error {
    fn from(err: crate::error::ListAccessControlConfigurationsError) -> Self {
        match err {
            crate::error::ListAccessControlConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAccessControlConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAccessControlConfigurationsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListAccessControlConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAccessControlConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAccessControlConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataSourcesError> for Error {
    fn from(err: crate::error::ListDataSourcesError) -> Self {
        match err {
            crate::error::ListDataSourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDataSourcesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDataSourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDataSourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDataSourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataSourceSyncJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDataSourceSyncJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataSourceSyncJobsError> for Error {
    fn from(err: crate::error::ListDataSourceSyncJobsError) -> Self {
        match err {
            crate::error::ListDataSourceSyncJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDataSourceSyncJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntityPersonasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntityPersonasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntityPersonasError> for Error {
    fn from(err: crate::error::ListEntityPersonasError) -> Self {
        match err {
            crate::error::ListEntityPersonasError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEntityPersonasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEntityPersonasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListEntityPersonasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEntityPersonasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEntityPersonasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExperienceEntitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListExperienceEntitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExperienceEntitiesError> for Error {
    fn from(err: crate::error::ListExperienceEntitiesError) -> Self {
        match err {
            crate::error::ListExperienceEntitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListExperienceEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListExperienceEntitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListExperienceEntitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListExperienceEntitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListExperienceEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExperiencesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExperiencesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExperiencesError> for Error {
    fn from(err: crate::error::ListExperiencesError) -> Self {
        match err {
            crate::error::ListExperiencesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListExperiencesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListExperiencesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListExperiencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListExperiencesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListExperiencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFaqsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFaqsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFaqsError> for Error {
    fn from(err: crate::error::ListFaqsError) -> Self {
        match err {
            crate::error::ListFaqsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFaqsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFaqsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFaqsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFaqsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFaqsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsOlderThanOrderingIdError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupsOlderThanOrderingIdError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsOlderThanOrderingIdError> for Error {
    fn from(err: crate::error::ListGroupsOlderThanOrderingIdError) -> Self {
        match err {
            crate::error::ListGroupsOlderThanOrderingIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListGroupsOlderThanOrderingIdError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIndicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIndicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIndicesError> for Error {
    fn from(err: crate::error::ListIndicesError) -> Self {
        match err {
            crate::error::ListIndicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListIndicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListIndicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListIndicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListIndicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListQuerySuggestionsBlockListsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListQuerySuggestionsBlockListsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQuerySuggestionsBlockListsError> for Error {
    fn from(err: crate::error::ListQuerySuggestionsBlockListsError) -> Self {
        match err {
            crate::error::ListQuerySuggestionsBlockListsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListQuerySuggestionsBlockListsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListQuerySuggestionsBlockListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListQuerySuggestionsBlockListsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListQuerySuggestionsBlockListsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListQuerySuggestionsBlockListsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListThesauriError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListThesauriError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListThesauriError> for Error {
    fn from(err: crate::error::ListThesauriError) -> Self {
        match err {
            crate::error::ListThesauriError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListThesauriError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListThesauriError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListThesauriError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListThesauriError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListThesauriError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutPrincipalMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutPrincipalMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPrincipalMappingError> for Error {
    fn from(err: crate::error::PutPrincipalMappingError) -> Self {
        match err {
            crate::error::PutPrincipalMappingError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutPrincipalMappingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutPrincipalMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutPrincipalMappingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutPrincipalMappingError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::PutPrincipalMappingError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutPrincipalMappingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutPrincipalMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::QueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::QueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::QueryError> for Error {
    fn from(err: crate::error::QueryError) -> Self {
        match err {
            crate::error::QueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::QueryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::QueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::QueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::QueryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::QueryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::QueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::QueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDataSourceSyncJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartDataSourceSyncJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDataSourceSyncJobError> for Error {
    fn from(err: crate::error::StartDataSourceSyncJobError) -> Self {
        match err {
            crate::error::StartDataSourceSyncJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartDataSourceSyncJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartDataSourceSyncJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartDataSourceSyncJobError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StartDataSourceSyncJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartDataSourceSyncJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartDataSourceSyncJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDataSourceSyncJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopDataSourceSyncJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDataSourceSyncJobError> for Error {
    fn from(err: crate::error::StopDataSourceSyncJobError) -> Self {
        match err {
            crate::error::StopDataSourceSyncJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopDataSourceSyncJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopDataSourceSyncJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopDataSourceSyncJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StopDataSourceSyncJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StopDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SubmitFeedbackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SubmitFeedbackError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SubmitFeedbackError> for Error {
    fn from(err: crate::error::SubmitFeedbackError) -> Self {
        match err {
            crate::error::SubmitFeedbackError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SubmitFeedbackError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SubmitFeedbackError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SubmitFeedbackError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::SubmitFeedbackError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SubmitFeedbackError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SubmitFeedbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAccessControlConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAccessControlConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccessControlConfigurationError> for Error {
    fn from(err: crate::error::UpdateAccessControlConfigurationError) -> Self {
        match err {
            crate::error::UpdateAccessControlConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAccessControlConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAccessControlConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAccessControlConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateAccessControlConfigurationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateAccessControlConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAccessControlConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAccessControlConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSourceError> for Error {
    fn from(err: crate::error::UpdateDataSourceError) -> Self {
        match err {
            crate::error::UpdateDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDataSourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateExperienceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateExperienceError> for Error {
    fn from(err: crate::error::UpdateExperienceError) -> Self {
        match err {
            crate::error::UpdateExperienceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateExperienceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateExperienceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateExperienceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIndexError> for Error {
    fn from(err: crate::error::UpdateIndexError) -> Self {
        match err {
            crate::error::UpdateIndexError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateIndexError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateIndexError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateIndexError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateIndexError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateIndexError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateIndexError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateQuerySuggestionsBlockListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateQuerySuggestionsBlockListError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQuerySuggestionsBlockListError> for Error {
    fn from(err: crate::error::UpdateQuerySuggestionsBlockListError) -> Self {
        match err {
            crate::error::UpdateQuerySuggestionsBlockListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateQuerySuggestionsBlockListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateQuerySuggestionsBlockListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateQuerySuggestionsBlockListError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateQuerySuggestionsBlockListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQuerySuggestionsBlockListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateQuerySuggestionsBlockListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateQuerySuggestionsConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateQuerySuggestionsConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateQuerySuggestionsConfigError> for Error {
    fn from(err: crate::error::UpdateQuerySuggestionsConfigError) -> Self {
        match err {
            crate::error::UpdateQuerySuggestionsConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateQuerySuggestionsConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThesaurusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateThesaurusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateThesaurusError> for Error {
    fn from(err: crate::error::UpdateThesaurusError) -> Self {
        match err {
            crate::error::UpdateThesaurusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateThesaurusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateThesaurusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateThesaurusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateThesaurusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateThesaurusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateThesaurusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::ResourceAlreadyExistException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
