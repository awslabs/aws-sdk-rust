// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters the search results based on document attributes or fields.</p>
/// <p>You can filter results using attributes for your particular documents. The attributes must exist in your index. For example, if your documents include the custom attribute "Department", you can filter documents that belong to the "HR" department. You would use the <code>EqualsTo</code> operation to filter results or documents with "Department" equals to "HR".</p>
/// <p>You can use <code>AndAllFilters</code> and <code>AndOrFilters</code> in combination with each other or with other operations such as <code>EqualsTo</code>. For example:</p>
/// <p> <code>AndAllFilters</code> </p>
/// <ul>
/// <li> <p> <code>EqualsTo</code>: "Department", "HR"</p> </li>
/// <li> <p> <code>AndOrFilters</code> </p>
/// <ul>
/// <li> <p> <code>ContainsAny</code>: "Project Name", ["new hires", "new hiring"]</p> </li>
/// </ul> </li>
/// </ul>
/// <p>This example filters results or documents that belong to the HR department <i>and</i> belong to projects that contain "new hires" <i>or</i> "new hiring" in the project name (must use <code>ContainAny</code> with <code>StringListValue</code>). This example is filtering with a depth of 2.</p>
/// <p>You cannot filter more than a depth of 2, otherwise you receive a <code>ValidationException</code> exception with the message "AttributeFilter cannot have a depth of more than 2." Also, if you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message "AttributeFilter cannot have a length of more than 10".</p>
/// <p>For examples of using <code>AttributeFilter</code>, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeFilter {
    /// <p>Performs a logical <code>AND</code> operation on all filters that you specify.</p>
    pub and_all_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    /// <p>Performs a logical <code>OR</code> operation on all filters that you specify.</p>
    pub or_all_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    /// <p>Performs a logical <code>NOT</code> operation on all filters that you specify.</p>
    pub not_filter: ::std::option::Option<::std::boxed::Box<crate::types::AttributeFilter>>,
    /// <p>Performs an equals operation on document attributes/fields and their values.</p>
    pub equals_to: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub contains_all: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub contains_any: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Performs a greater than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub greater_than: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Performs a greater or equals than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub greater_than_or_equals: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Performs a less than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub less_than: ::std::option::Option<crate::types::DocumentAttribute>,
    /// <p>Performs a less than or equals operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub less_than_or_equals: ::std::option::Option<crate::types::DocumentAttribute>,
}
impl AttributeFilter {
    /// <p>Performs a logical <code>AND</code> operation on all filters that you specify.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and_all_filters.is_none()`.
    pub fn and_all_filters(&self) -> &[crate::types::AttributeFilter] {
        self.and_all_filters.as_deref().unwrap_or_default()
    }
    /// <p>Performs a logical <code>OR</code> operation on all filters that you specify.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or_all_filters.is_none()`.
    pub fn or_all_filters(&self) -> &[crate::types::AttributeFilter] {
        self.or_all_filters.as_deref().unwrap_or_default()
    }
    /// <p>Performs a logical <code>NOT</code> operation on all filters that you specify.</p>
    pub fn not_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.not_filter.as_deref()
    }
    /// <p>Performs an equals operation on document attributes/fields and their values.</p>
    pub fn equals_to(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.equals_to.as_ref()
    }
    /// <p>Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn contains_all(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.contains_all.as_ref()
    }
    /// <p>Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn contains_any(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.contains_any.as_ref()
    }
    /// <p>Performs a greater than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn greater_than(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.greater_than.as_ref()
    }
    /// <p>Performs a greater or equals than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn greater_than_or_equals(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.greater_than_or_equals.as_ref()
    }
    /// <p>Performs a less than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn less_than(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.less_than.as_ref()
    }
    /// <p>Performs a less than or equals operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn less_than_or_equals(&self) -> ::std::option::Option<&crate::types::DocumentAttribute> {
        self.less_than_or_equals.as_ref()
    }
}
impl AttributeFilter {
    /// Creates a new builder-style object to manufacture [`AttributeFilter`](crate::types::AttributeFilter).
    pub fn builder() -> crate::types::builders::AttributeFilterBuilder {
        crate::types::builders::AttributeFilterBuilder::default()
    }
}

/// A builder for [`AttributeFilter`](crate::types::AttributeFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributeFilterBuilder {
    pub(crate) and_all_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    pub(crate) or_all_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    pub(crate) not_filter: ::std::option::Option<::std::boxed::Box<crate::types::AttributeFilter>>,
    pub(crate) equals_to: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) contains_all: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) contains_any: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) greater_than: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) greater_than_or_equals: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) less_than: ::std::option::Option<crate::types::DocumentAttribute>,
    pub(crate) less_than_or_equals: ::std::option::Option<crate::types::DocumentAttribute>,
}
impl AttributeFilterBuilder {
    /// Appends an item to `and_all_filters`.
    ///
    /// To override the contents of this collection use [`set_and_all_filters`](Self::set_and_all_filters).
    ///
    /// <p>Performs a logical <code>AND</code> operation on all filters that you specify.</p>
    pub fn and_all_filters(mut self, input: crate::types::AttributeFilter) -> Self {
        let mut v = self.and_all_filters.unwrap_or_default();
        v.push(input);
        self.and_all_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Performs a logical <code>AND</code> operation on all filters that you specify.</p>
    pub fn set_and_all_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>) -> Self {
        self.and_all_filters = input;
        self
    }
    /// <p>Performs a logical <code>AND</code> operation on all filters that you specify.</p>
    pub fn get_and_all_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>> {
        &self.and_all_filters
    }
    /// Appends an item to `or_all_filters`.
    ///
    /// To override the contents of this collection use [`set_or_all_filters`](Self::set_or_all_filters).
    ///
    /// <p>Performs a logical <code>OR</code> operation on all filters that you specify.</p>
    pub fn or_all_filters(mut self, input: crate::types::AttributeFilter) -> Self {
        let mut v = self.or_all_filters.unwrap_or_default();
        v.push(input);
        self.or_all_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Performs a logical <code>OR</code> operation on all filters that you specify.</p>
    pub fn set_or_all_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>) -> Self {
        self.or_all_filters = input;
        self
    }
    /// <p>Performs a logical <code>OR</code> operation on all filters that you specify.</p>
    pub fn get_or_all_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>> {
        &self.or_all_filters
    }
    /// <p>Performs a logical <code>NOT</code> operation on all filters that you specify.</p>
    pub fn not_filter(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::AttributeFilter>>) -> Self {
        self.not_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Performs a logical <code>NOT</code> operation on all filters that you specify.</p>
    pub fn set_not_filter(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::AttributeFilter>>) -> Self {
        self.not_filter = input;
        self
    }
    /// <p>Performs a logical <code>NOT</code> operation on all filters that you specify.</p>
    pub fn get_not_filter(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::AttributeFilter>> {
        &self.not_filter
    }
    /// <p>Performs an equals operation on document attributes/fields and their values.</p>
    pub fn equals_to(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.equals_to = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs an equals operation on document attributes/fields and their values.</p>
    pub fn set_equals_to(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.equals_to = input;
        self
    }
    /// <p>Performs an equals operation on document attributes/fields and their values.</p>
    pub fn get_equals_to(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.equals_to
    }
    /// <p>Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn contains_all(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.contains_all = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn set_contains_all(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.contains_all = input;
        self
    }
    /// <p>Returns true when a document contains all of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn get_contains_all(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.contains_all
    }
    /// <p>Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn contains_any(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.contains_any = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn set_contains_any(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.contains_any = input;
        self
    }
    /// <p>Returns true when a document contains any of the specified document attributes/fields. This filter is only applicable to <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">StringListValue</a>.</p>
    pub fn get_contains_any(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.contains_any
    }
    /// <p>Performs a greater than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn greater_than(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.greater_than = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs a greater than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn set_greater_than(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.greater_than = input;
        self
    }
    /// <p>Performs a greater than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn get_greater_than(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.greater_than
    }
    /// <p>Performs a greater or equals than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn greater_than_or_equals(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.greater_than_or_equals = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs a greater or equals than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn set_greater_than_or_equals(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.greater_than_or_equals = input;
        self
    }
    /// <p>Performs a greater or equals than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn get_greater_than_or_equals(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.greater_than_or_equals
    }
    /// <p>Performs a less than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn less_than(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.less_than = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs a less than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn set_less_than(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.less_than = input;
        self
    }
    /// <p>Performs a less than operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn get_less_than(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.less_than
    }
    /// <p>Performs a less than or equals operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn less_than_or_equals(mut self, input: crate::types::DocumentAttribute) -> Self {
        self.less_than_or_equals = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs a less than or equals operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn set_less_than_or_equals(mut self, input: ::std::option::Option<crate::types::DocumentAttribute>) -> Self {
        self.less_than_or_equals = input;
        self
    }
    /// <p>Performs a less than or equals operation on document attributes/fields and their values. Use with the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_DocumentAttributeValue.html">document attribute type</a> <code>Date</code> or <code>Long</code>.</p>
    pub fn get_less_than_or_equals(&self) -> &::std::option::Option<crate::types::DocumentAttribute> {
        &self.less_than_or_equals
    }
    /// Consumes the builder and constructs a [`AttributeFilter`](crate::types::AttributeFilter).
    pub fn build(self) -> crate::types::AttributeFilter {
        crate::types::AttributeFilter {
            and_all_filters: self.and_all_filters,
            or_all_filters: self.or_all_filters,
            not_filter: self.not_filter,
            equals_to: self.equals_to,
            contains_all: self.contains_all,
            contains_any: self.contains_any,
            greater_than: self.greater_than,
            greater_than_or_equals: self.greater_than_or_equals,
            less_than: self.less_than,
            less_than_or_equals: self.less_than_or_equals,
        }
    }
}
