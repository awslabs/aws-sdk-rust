// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to websites that require user authentication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthenticationConfiguration {
    /// <p>The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.</p>
    /// <p>The list includes the name and port number of the website host.</p>
    pub basic_authentication: ::std::option::Option<::std::vec::Vec<crate::types::BasicAuthenticationConfiguration>>,
}
impl AuthenticationConfiguration {
    /// <p>The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.</p>
    /// <p>The list includes the name and port number of the website host.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.basic_authentication.is_none()`.
    pub fn basic_authentication(&self) -> &[crate::types::BasicAuthenticationConfiguration] {
        self.basic_authentication.as_deref().unwrap_or_default()
    }
}
impl AuthenticationConfiguration {
    /// Creates a new builder-style object to manufacture [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
    pub fn builder() -> crate::types::builders::AuthenticationConfigurationBuilder {
        crate::types::builders::AuthenticationConfigurationBuilder::default()
    }
}

/// A builder for [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthenticationConfigurationBuilder {
    pub(crate) basic_authentication: ::std::option::Option<::std::vec::Vec<crate::types::BasicAuthenticationConfiguration>>,
}
impl AuthenticationConfigurationBuilder {
    /// Appends an item to `basic_authentication`.
    ///
    /// To override the contents of this collection use [`set_basic_authentication`](Self::set_basic_authentication).
    ///
    /// <p>The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.</p>
    /// <p>The list includes the name and port number of the website host.</p>
    pub fn basic_authentication(mut self, input: crate::types::BasicAuthenticationConfiguration) -> Self {
        let mut v = self.basic_authentication.unwrap_or_default();
        v.push(input);
        self.basic_authentication = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.</p>
    /// <p>The list includes the name and port number of the website host.</p>
    pub fn set_basic_authentication(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BasicAuthenticationConfiguration>>) -> Self {
        self.basic_authentication = input;
        self
    }
    /// <p>The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.</p>
    /// <p>The list includes the name and port number of the website host.</p>
    pub fn get_basic_authentication(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BasicAuthenticationConfiguration>> {
        &self.basic_authentication
    }
    /// Consumes the builder and constructs a [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
    pub fn build(self) -> crate::types::AuthenticationConfiguration {
        crate::types::AuthenticationConfiguration {
            basic_authentication: self.basic_authentication,
        }
    }
}
