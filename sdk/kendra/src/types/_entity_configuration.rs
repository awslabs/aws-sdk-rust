// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for users or groups in your IAM Identity Center identity source to grant access your Amazon Kendra experience.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityConfiguration {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    #[doc(hidden)]
    pub entity_type: std::option::Option<crate::types::EntityType>,
}
impl EntityConfiguration {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn entity_type(&self) -> std::option::Option<&crate::types::EntityType> {
        self.entity_type.as_ref()
    }
}
impl EntityConfiguration {
    /// Creates a new builder-style object to manufacture [`EntityConfiguration`](crate::types::EntityConfiguration).
    pub fn builder() -> crate::types::builders::EntityConfigurationBuilder {
        crate::types::builders::EntityConfigurationBuilder::default()
    }
}

/// A builder for [`EntityConfiguration`](crate::types::EntityConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityConfigurationBuilder {
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) entity_type: std::option::Option<crate::types::EntityType>,
}
impl EntityConfigurationBuilder {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn entity_type(mut self, input: crate::types::EntityType) -> Self {
        self.entity_type = Some(input);
        self
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn set_entity_type(mut self, input: std::option::Option<crate::types::EntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityConfiguration`](crate::types::EntityConfiguration).
    pub fn build(self) -> crate::types::EntityConfiguration {
        crate::types::EntityConfiguration {
            entity_id: self.entity_id,
            entity_type: self.entity_type,
        }
    }
}
