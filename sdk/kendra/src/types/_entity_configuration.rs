// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for users or groups in your IAM Identity Center identity source to grant access your Amazon Kendra experience.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityConfiguration {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub entity_id: ::std::string::String,
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub entity_type: crate::types::EntityType,
}
impl EntityConfiguration {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn entity_id(&self) -> &str {
        use std::ops::Deref;
        self.entity_id.deref()
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn entity_type(&self) -> &crate::types::EntityType {
        &self.entity_type
    }
}
impl EntityConfiguration {
    /// Creates a new builder-style object to manufacture [`EntityConfiguration`](crate::types::EntityConfiguration).
    pub fn builder() -> crate::types::builders::EntityConfigurationBuilder {
        crate::types::builders::EntityConfigurationBuilder::default()
    }
}

/// A builder for [`EntityConfiguration`](crate::types::EntityConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntityConfigurationBuilder {
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::EntityType>,
}
impl EntityConfigurationBuilder {
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The identifier of a user or group in your IAM Identity Center identity source. For example, a user ID could be an email.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    /// This field is required.
    pub fn entity_type(mut self, input: crate::types::EntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::EntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>Specifies whether you are configuring a <code>User</code> or a <code>Group</code>.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::EntityType> {
        &self.entity_type
    }
    /// Consumes the builder and constructs a [`EntityConfiguration`](crate::types::EntityConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`entity_id`](crate::types::builders::EntityConfigurationBuilder::entity_id)
    /// - [`entity_type`](crate::types::builders::EntityConfigurationBuilder::entity_type)
    pub fn build(self) -> ::std::result::Result<crate::types::EntityConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EntityConfiguration {
            entity_id: self.entity_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_id",
                    "entity_id was not specified but it is required when building EntityConfiguration",
                )
            })?,
            entity_type: self.entity_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_type",
                    "entity_type was not specified but it is required when building EntityConfiguration",
                )
            })?,
        })
    }
}
