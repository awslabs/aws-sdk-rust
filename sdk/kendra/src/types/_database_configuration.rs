// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to a index. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatabaseConfiguration {
    /// <p>The type of database engine that runs the database.</p>
    #[doc(hidden)]
    pub database_engine_type: std::option::Option<crate::types::DatabaseEngineType>,
    /// <p>Configuration information that's required to connect to a database.</p>
    #[doc(hidden)]
    pub connection_configuration: std::option::Option<crate::types::ConnectionConfiguration>,
    /// <p>Provides the configuration information to connect to an Amazon VPC.</p>
    #[doc(hidden)]
    pub vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    /// <p>Information about where the index should get the document information from the database.</p>
    #[doc(hidden)]
    pub column_configuration: std::option::Option<crate::types::ColumnConfiguration>,
    /// <p>Information about the database column that provides information for user context filtering.</p>
    #[doc(hidden)]
    pub acl_configuration: std::option::Option<crate::types::AclConfiguration>,
    /// <p>Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.</p>
    #[doc(hidden)]
    pub sql_configuration: std::option::Option<crate::types::SqlConfiguration>,
}
impl DatabaseConfiguration {
    /// <p>The type of database engine that runs the database.</p>
    pub fn database_engine_type(&self) -> std::option::Option<&crate::types::DatabaseEngineType> {
        self.database_engine_type.as_ref()
    }
    /// <p>Configuration information that's required to connect to a database.</p>
    pub fn connection_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionConfiguration> {
        self.connection_configuration.as_ref()
    }
    /// <p>Provides the configuration information to connect to an Amazon VPC.</p>
    pub fn vpc_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DataSourceVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>Information about where the index should get the document information from the database.</p>
    pub fn column_configuration(&self) -> std::option::Option<&crate::types::ColumnConfiguration> {
        self.column_configuration.as_ref()
    }
    /// <p>Information about the database column that provides information for user context filtering.</p>
    pub fn acl_configuration(&self) -> std::option::Option<&crate::types::AclConfiguration> {
        self.acl_configuration.as_ref()
    }
    /// <p>Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.</p>
    pub fn sql_configuration(&self) -> std::option::Option<&crate::types::SqlConfiguration> {
        self.sql_configuration.as_ref()
    }
}
impl DatabaseConfiguration {
    /// Creates a new builder-style object to manufacture [`DatabaseConfiguration`](crate::types::DatabaseConfiguration).
    pub fn builder() -> crate::types::builders::DatabaseConfigurationBuilder {
        crate::types::builders::DatabaseConfigurationBuilder::default()
    }
}

/// A builder for [`DatabaseConfiguration`](crate::types::DatabaseConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatabaseConfigurationBuilder {
    pub(crate) database_engine_type: std::option::Option<crate::types::DatabaseEngineType>,
    pub(crate) connection_configuration: std::option::Option<crate::types::ConnectionConfiguration>,
    pub(crate) vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    pub(crate) column_configuration: std::option::Option<crate::types::ColumnConfiguration>,
    pub(crate) acl_configuration: std::option::Option<crate::types::AclConfiguration>,
    pub(crate) sql_configuration: std::option::Option<crate::types::SqlConfiguration>,
}
impl DatabaseConfigurationBuilder {
    /// <p>The type of database engine that runs the database.</p>
    pub fn database_engine_type(mut self, input: crate::types::DatabaseEngineType) -> Self {
        self.database_engine_type = Some(input);
        self
    }
    /// <p>The type of database engine that runs the database.</p>
    pub fn set_database_engine_type(
        mut self,
        input: std::option::Option<crate::types::DatabaseEngineType>,
    ) -> Self {
        self.database_engine_type = input;
        self
    }
    /// <p>Configuration information that's required to connect to a database.</p>
    pub fn connection_configuration(
        mut self,
        input: crate::types::ConnectionConfiguration,
    ) -> Self {
        self.connection_configuration = Some(input);
        self
    }
    /// <p>Configuration information that's required to connect to a database.</p>
    pub fn set_connection_configuration(
        mut self,
        input: std::option::Option<crate::types::ConnectionConfiguration>,
    ) -> Self {
        self.connection_configuration = input;
        self
    }
    /// <p>Provides the configuration information to connect to an Amazon VPC.</p>
    pub fn vpc_configuration(mut self, input: crate::types::DataSourceVpcConfiguration) -> Self {
        self.vpc_configuration = Some(input);
        self
    }
    /// <p>Provides the configuration information to connect to an Amazon VPC.</p>
    pub fn set_vpc_configuration(
        mut self,
        input: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    ) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>Information about where the index should get the document information from the database.</p>
    pub fn column_configuration(mut self, input: crate::types::ColumnConfiguration) -> Self {
        self.column_configuration = Some(input);
        self
    }
    /// <p>Information about where the index should get the document information from the database.</p>
    pub fn set_column_configuration(
        mut self,
        input: std::option::Option<crate::types::ColumnConfiguration>,
    ) -> Self {
        self.column_configuration = input;
        self
    }
    /// <p>Information about the database column that provides information for user context filtering.</p>
    pub fn acl_configuration(mut self, input: crate::types::AclConfiguration) -> Self {
        self.acl_configuration = Some(input);
        self
    }
    /// <p>Information about the database column that provides information for user context filtering.</p>
    pub fn set_acl_configuration(
        mut self,
        input: std::option::Option<crate::types::AclConfiguration>,
    ) -> Self {
        self.acl_configuration = input;
        self
    }
    /// <p>Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.</p>
    pub fn sql_configuration(mut self, input: crate::types::SqlConfiguration) -> Self {
        self.sql_configuration = Some(input);
        self
    }
    /// <p>Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.</p>
    pub fn set_sql_configuration(
        mut self,
        input: std::option::Option<crate::types::SqlConfiguration>,
    ) -> Self {
        self.sql_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`DatabaseConfiguration`](crate::types::DatabaseConfiguration).
    pub fn build(self) -> crate::types::DatabaseConfiguration {
        crate::types::DatabaseConfiguration {
            database_engine_type: self.database_engine_type,
            connection_configuration: self.connection_configuration,
            vpc_configuration: self.vpc_configuration,
            column_configuration: self.column_configuration,
            acl_configuration: self.acl_configuration,
            sql_configuration: self.sql_configuration,
        }
    }
}
