// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information on the configuration of an index.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexConfigurationSummary {
    /// <p>The name of the index.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A identifier for the index. Use this to identify the index when you are using APIs such as <code>Query</code>, <code>DescribeIndex</code>, <code>UpdateIndex</code>, and <code>DeleteIndex</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the index is a Enterprise Edition index or a Developer Edition index. </p>
    pub edition: ::std::option::Option<crate::types::IndexEdition>,
    /// <p>The Unix timestamp when the index was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The Unix timestamp when the index was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The current status of the index. When the status is <code>ACTIVE</code>, the index is ready to search.</p>
    pub status: crate::types::IndexStatus,
}
impl IndexConfigurationSummary {
    /// <p>The name of the index.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A identifier for the index. Use this to identify the index when you are using APIs such as <code>Query</code>, <code>DescribeIndex</code>, <code>UpdateIndex</code>, and <code>DeleteIndex</code>.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Indicates whether the index is a Enterprise Edition index or a Developer Edition index. </p>
    pub fn edition(&self) -> ::std::option::Option<&crate::types::IndexEdition> {
        self.edition.as_ref()
    }
    /// <p>The Unix timestamp when the index was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The Unix timestamp when the index was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The current status of the index. When the status is <code>ACTIVE</code>, the index is ready to search.</p>
    pub fn status(&self) -> &crate::types::IndexStatus {
        &self.status
    }
}
impl IndexConfigurationSummary {
    /// Creates a new builder-style object to manufacture [`IndexConfigurationSummary`](crate::types::IndexConfigurationSummary).
    pub fn builder() -> crate::types::builders::IndexConfigurationSummaryBuilder {
        crate::types::builders::IndexConfigurationSummaryBuilder::default()
    }
}

/// A builder for [`IndexConfigurationSummary`](crate::types::IndexConfigurationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IndexConfigurationSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) edition: ::std::option::Option<crate::types::IndexEdition>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::IndexStatus>,
}
impl IndexConfigurationSummaryBuilder {
    /// <p>The name of the index.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the index.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the index.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A identifier for the index. Use this to identify the index when you are using APIs such as <code>Query</code>, <code>DescribeIndex</code>, <code>UpdateIndex</code>, and <code>DeleteIndex</code>.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A identifier for the index. Use this to identify the index when you are using APIs such as <code>Query</code>, <code>DescribeIndex</code>, <code>UpdateIndex</code>, and <code>DeleteIndex</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A identifier for the index. Use this to identify the index when you are using APIs such as <code>Query</code>, <code>DescribeIndex</code>, <code>UpdateIndex</code>, and <code>DeleteIndex</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Indicates whether the index is a Enterprise Edition index or a Developer Edition index. </p>
    pub fn edition(mut self, input: crate::types::IndexEdition) -> Self {
        self.edition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the index is a Enterprise Edition index or a Developer Edition index. </p>
    pub fn set_edition(mut self, input: ::std::option::Option<crate::types::IndexEdition>) -> Self {
        self.edition = input;
        self
    }
    /// <p>Indicates whether the index is a Enterprise Edition index or a Developer Edition index. </p>
    pub fn get_edition(&self) -> &::std::option::Option<crate::types::IndexEdition> {
        &self.edition
    }
    /// <p>The Unix timestamp when the index was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the index was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the index was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Unix timestamp when the index was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the index was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The Unix timestamp when the index was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The current status of the index. When the status is <code>ACTIVE</code>, the index is ready to search.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::IndexStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the index. When the status is <code>ACTIVE</code>, the index is ready to search.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IndexStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the index. When the status is <code>ACTIVE</code>, the index is ready to search.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IndexStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`IndexConfigurationSummary`](crate::types::IndexConfigurationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`created_at`](crate::types::builders::IndexConfigurationSummaryBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::IndexConfigurationSummaryBuilder::updated_at)
    /// - [`status`](crate::types::builders::IndexConfigurationSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::IndexConfigurationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IndexConfigurationSummary {
            name: self.name,
            id: self.id,
            edition: self.edition,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building IndexConfigurationSummary",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building IndexConfigurationSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building IndexConfigurationSummary",
                )
            })?,
        })
    }
}
