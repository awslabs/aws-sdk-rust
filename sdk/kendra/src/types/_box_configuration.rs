// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to Box as your data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BoxConfiguration {
    /// <p>The identifier of the Box Enterprise platform. You can find the enterprise ID in the Box Developer Console settings or when you create an app in Box and download your authentication credentials. For example, <i>801234567</i>.</p>
    #[doc(hidden)]
    pub enterprise_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Box platform. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>clientID—The identifier of the client OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>clientSecret—A set of characters known only to the OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>publicKeyId—The identifier of the public key contained within an identity certificate.</p> </li>
    /// <li> <p>privateKey—A set of characters that make up an encryption key.</p> </li>
    /// <li> <p>passphrase—A set of characters that act like a password.</p> </li>
    /// </ul>
    /// <p>You create an application in Box to generate the keys or credentials required for the secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html">Using a Box data source</a>.</p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p> <code>TRUE</code> to use the Slack change log to determine which documents require updating in the index. Depending on the data source change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents.</p>
    #[doc(hidden)]
    pub use_change_log: bool,
    /// <p> <code>TRUE</code> to index comments.</p>
    #[doc(hidden)]
    pub crawl_comments: bool,
    /// <p> <code>TRUE</code> to index the contents of tasks.</p>
    #[doc(hidden)]
    pub crawl_tasks: bool,
    /// <p> <code>TRUE</code> to index web links.</p>
    #[doc(hidden)]
    pub crawl_web_links: bool,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box files to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    #[doc(hidden)]
    pub file_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box tasks to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    #[doc(hidden)]
    pub task_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    #[doc(hidden)]
    pub comment_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box web links to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    #[doc(hidden)]
    pub web_link_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of regular expression patterns to include certain files and folders in your Box platform. Files and folders that match the patterns are included in the index. Files and folders that don't match the patterns are excluded from the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    #[doc(hidden)]
    pub inclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to exclude certain files and folders from your Box platform. Files and folders that match the patterns are excluded from the index.Files and folders that don't match the patterns are included in the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    #[doc(hidden)]
    pub exclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Configuration information for an Amazon VPC to connect to your Box. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    #[doc(hidden)]
    pub vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
}
impl BoxConfiguration {
    /// <p>The identifier of the Box Enterprise platform. You can find the enterprise ID in the Box Developer Console settings or when you create an app in Box and download your authentication credentials. For example, <i>801234567</i>.</p>
    pub fn enterprise_id(&self) -> std::option::Option<&str> {
        self.enterprise_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Box platform. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>clientID—The identifier of the client OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>clientSecret—A set of characters known only to the OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>publicKeyId—The identifier of the public key contained within an identity certificate.</p> </li>
    /// <li> <p>privateKey—A set of characters that make up an encryption key.</p> </li>
    /// <li> <p>passphrase—A set of characters that act like a password.</p> </li>
    /// </ul>
    /// <p>You create an application in Box to generate the keys or credentials required for the secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html">Using a Box data source</a>.</p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p> <code>TRUE</code> to use the Slack change log to determine which documents require updating in the index. Depending on the data source change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents.</p>
    pub fn use_change_log(&self) -> bool {
        self.use_change_log
    }
    /// <p> <code>TRUE</code> to index comments.</p>
    pub fn crawl_comments(&self) -> bool {
        self.crawl_comments
    }
    /// <p> <code>TRUE</code> to index the contents of tasks.</p>
    pub fn crawl_tasks(&self) -> bool {
        self.crawl_tasks
    }
    /// <p> <code>TRUE</code> to index web links.</p>
    pub fn crawl_web_links(&self) -> bool {
        self.crawl_web_links
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box files to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn file_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.file_field_mappings.as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box tasks to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn task_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.task_field_mappings.as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn comment_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.comment_field_mappings.as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box web links to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn web_link_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.web_link_field_mappings.as_deref()
    }
    /// <p>A list of regular expression patterns to include certain files and folders in your Box platform. Files and folders that match the patterns are included in the index. Files and folders that don't match the patterns are excluded from the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn inclusion_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.inclusion_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to exclude certain files and folders from your Box platform. Files and folders that match the patterns are excluded from the index.Files and folders that don't match the patterns are included in the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn exclusion_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_patterns.as_deref()
    }
    /// <p>Configuration information for an Amazon VPC to connect to your Box. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn vpc_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DataSourceVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
}
impl BoxConfiguration {
    /// Creates a new builder-style object to manufacture [`BoxConfiguration`](crate::types::BoxConfiguration).
    pub fn builder() -> crate::types::builders::BoxConfigurationBuilder {
        crate::types::builders::BoxConfigurationBuilder::default()
    }
}

/// A builder for [`BoxConfiguration`](crate::types::BoxConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BoxConfigurationBuilder {
    pub(crate) enterprise_id: std::option::Option<std::string::String>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) use_change_log: std::option::Option<bool>,
    pub(crate) crawl_comments: std::option::Option<bool>,
    pub(crate) crawl_tasks: std::option::Option<bool>,
    pub(crate) crawl_web_links: std::option::Option<bool>,
    pub(crate) file_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) task_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) comment_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) web_link_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) inclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) exclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
}
impl BoxConfigurationBuilder {
    /// <p>The identifier of the Box Enterprise platform. You can find the enterprise ID in the Box Developer Console settings or when you create an app in Box and download your authentication credentials. For example, <i>801234567</i>.</p>
    pub fn enterprise_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.enterprise_id = Some(input.into());
        self
    }
    /// <p>The identifier of the Box Enterprise platform. You can find the enterprise ID in the Box Developer Console settings or when you create an app in Box and download your authentication credentials. For example, <i>801234567</i>.</p>
    pub fn set_enterprise_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.enterprise_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Box platform. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>clientID—The identifier of the client OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>clientSecret—A set of characters known only to the OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>publicKeyId—The identifier of the public key contained within an identity certificate.</p> </li>
    /// <li> <p>privateKey—A set of characters that make up an encryption key.</p> </li>
    /// <li> <p>passphrase—A set of characters that act like a password.</p> </li>
    /// </ul>
    /// <p>You create an application in Box to generate the keys or credentials required for the secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html">Using a Box data source</a>.</p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your Box platform. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>clientID—The identifier of the client OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>clientSecret—A set of characters known only to the OAuth 2.0 authentication application created in Box.</p> </li>
    /// <li> <p>publicKeyId—The identifier of the public key contained within an identity certificate.</p> </li>
    /// <li> <p>privateKey—A set of characters that make up an encryption key.</p> </li>
    /// <li> <p>passphrase—A set of characters that act like a password.</p> </li>
    /// </ul>
    /// <p>You create an application in Box to generate the keys or credentials required for the secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-box.html">Using a Box data source</a>.</p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p> <code>TRUE</code> to use the Slack change log to determine which documents require updating in the index. Depending on the data source change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents.</p>
    pub fn use_change_log(mut self, input: bool) -> Self {
        self.use_change_log = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to use the Slack change log to determine which documents require updating in the index. Depending on the data source change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents.</p>
    pub fn set_use_change_log(mut self, input: std::option::Option<bool>) -> Self {
        self.use_change_log = input;
        self
    }
    /// <p> <code>TRUE</code> to index comments.</p>
    pub fn crawl_comments(mut self, input: bool) -> Self {
        self.crawl_comments = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to index comments.</p>
    pub fn set_crawl_comments(mut self, input: std::option::Option<bool>) -> Self {
        self.crawl_comments = input;
        self
    }
    /// <p> <code>TRUE</code> to index the contents of tasks.</p>
    pub fn crawl_tasks(mut self, input: bool) -> Self {
        self.crawl_tasks = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to index the contents of tasks.</p>
    pub fn set_crawl_tasks(mut self, input: std::option::Option<bool>) -> Self {
        self.crawl_tasks = input;
        self
    }
    /// <p> <code>TRUE</code> to index web links.</p>
    pub fn crawl_web_links(mut self, input: bool) -> Self {
        self.crawl_web_links = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to index web links.</p>
    pub fn set_crawl_web_links(mut self, input: std::option::Option<bool>) -> Self {
        self.crawl_web_links = input;
        self
    }
    /// Appends an item to `file_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_file_field_mappings`](Self::set_file_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box files to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn file_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self.file_field_mappings.unwrap_or_default();
        v.push(input);
        self.file_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box files to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn set_file_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.file_field_mappings = input;
        self
    }
    /// Appends an item to `task_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_task_field_mappings`](Self::set_task_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box tasks to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn task_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self.task_field_mappings.unwrap_or_default();
        v.push(input);
        self.task_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box tasks to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn set_task_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.task_field_mappings = input;
        self
    }
    /// Appends an item to `comment_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_comment_field_mappings`](Self::set_comment_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn comment_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self.comment_field_mappings.unwrap_or_default();
        v.push(input);
        self.comment_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn set_comment_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.comment_field_mappings = input;
        self
    }
    /// Appends an item to `web_link_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_web_link_field_mappings`](Self::set_web_link_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box web links to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn web_link_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self.web_link_field_mappings.unwrap_or_default();
        v.push(input);
        self.web_link_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of Box web links to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Box fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Box field names must exist in your Box custom metadata.</p>
    pub fn set_web_link_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.web_link_field_mappings = input;
        self
    }
    /// Appends an item to `inclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_patterns`](Self::set_inclusion_patterns).
    ///
    /// <p>A list of regular expression patterns to include certain files and folders in your Box platform. Files and folders that match the patterns are included in the index. Files and folders that don't match the patterns are excluded from the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn inclusion_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to include certain files and folders in your Box platform. Files and folders that match the patterns are included in the index. Files and folders that don't match the patterns are excluded from the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn set_inclusion_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inclusion_patterns = input;
        self
    }
    /// Appends an item to `exclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_patterns`](Self::set_exclusion_patterns).
    ///
    /// <p>A list of regular expression patterns to exclude certain files and folders from your Box platform. Files and folders that match the patterns are excluded from the index.Files and folders that don't match the patterns are included in the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn exclusion_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.exclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to exclude certain files and folders from your Box platform. Files and folders that match the patterns are excluded from the index.Files and folders that don't match the patterns are included in the index. If a file or folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file or folder isn't included in the index.</p>
    pub fn set_exclusion_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclusion_patterns = input;
        self
    }
    /// <p>Configuration information for an Amazon VPC to connect to your Box. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn vpc_configuration(mut self, input: crate::types::DataSourceVpcConfiguration) -> Self {
        self.vpc_configuration = Some(input);
        self
    }
    /// <p>Configuration information for an Amazon VPC to connect to your Box. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn set_vpc_configuration(
        mut self,
        input: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    ) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`BoxConfiguration`](crate::types::BoxConfiguration).
    pub fn build(self) -> crate::types::BoxConfiguration {
        crate::types::BoxConfiguration {
            enterprise_id: self.enterprise_id,
            secret_arn: self.secret_arn,
            use_change_log: self.use_change_log.unwrap_or_default(),
            crawl_comments: self.crawl_comments.unwrap_or_default(),
            crawl_tasks: self.crawl_tasks.unwrap_or_default(),
            crawl_web_links: self.crawl_web_links.unwrap_or_default(),
            file_field_mappings: self.file_field_mappings,
            task_field_mappings: self.task_field_mappings,
            comment_field_mappings: self.comment_field_mappings,
            web_link_field_mappings: self.web_link_field_mappings,
            inclusion_patterns: self.inclusion_patterns,
            exclusion_patterns: self.exclusion_patterns,
            vpc_configuration: self.vpc_configuration,
        }
    }
}
