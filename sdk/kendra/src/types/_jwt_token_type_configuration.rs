// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for the JWT token type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JwtTokenTypeConfiguration {
    /// <p>The location of the key.</p>
    #[doc(hidden)]
    pub key_location: std::option::Option<crate::types::KeyLocation>,
    /// <p>The signing key URL.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (arn) of the secret.</p>
    #[doc(hidden)]
    pub secret_manager_arn: std::option::Option<std::string::String>,
    /// <p>The user name attribute field.</p>
    #[doc(hidden)]
    pub user_name_attribute_field: std::option::Option<std::string::String>,
    /// <p>The group attribute field.</p>
    #[doc(hidden)]
    pub group_attribute_field: std::option::Option<std::string::String>,
    /// <p>The issuer of the token.</p>
    #[doc(hidden)]
    pub issuer: std::option::Option<std::string::String>,
    /// <p>The regular expression that identifies the claim.</p>
    #[doc(hidden)]
    pub claim_regex: std::option::Option<std::string::String>,
}
impl JwtTokenTypeConfiguration {
    /// <p>The location of the key.</p>
    pub fn key_location(&self) -> std::option::Option<&crate::types::KeyLocation> {
        self.key_location.as_ref()
    }
    /// <p>The signing key URL.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The Amazon Resource Name (arn) of the secret.</p>
    pub fn secret_manager_arn(&self) -> std::option::Option<&str> {
        self.secret_manager_arn.as_deref()
    }
    /// <p>The user name attribute field.</p>
    pub fn user_name_attribute_field(&self) -> std::option::Option<&str> {
        self.user_name_attribute_field.as_deref()
    }
    /// <p>The group attribute field.</p>
    pub fn group_attribute_field(&self) -> std::option::Option<&str> {
        self.group_attribute_field.as_deref()
    }
    /// <p>The issuer of the token.</p>
    pub fn issuer(&self) -> std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The regular expression that identifies the claim.</p>
    pub fn claim_regex(&self) -> std::option::Option<&str> {
        self.claim_regex.as_deref()
    }
}
impl JwtTokenTypeConfiguration {
    /// Creates a new builder-style object to manufacture [`JwtTokenTypeConfiguration`](crate::types::JwtTokenTypeConfiguration).
    pub fn builder() -> crate::types::builders::JwtTokenTypeConfigurationBuilder {
        crate::types::builders::JwtTokenTypeConfigurationBuilder::default()
    }
}

/// A builder for [`JwtTokenTypeConfiguration`](crate::types::JwtTokenTypeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JwtTokenTypeConfigurationBuilder {
    pub(crate) key_location: std::option::Option<crate::types::KeyLocation>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) secret_manager_arn: std::option::Option<std::string::String>,
    pub(crate) user_name_attribute_field: std::option::Option<std::string::String>,
    pub(crate) group_attribute_field: std::option::Option<std::string::String>,
    pub(crate) issuer: std::option::Option<std::string::String>,
    pub(crate) claim_regex: std::option::Option<std::string::String>,
}
impl JwtTokenTypeConfigurationBuilder {
    /// <p>The location of the key.</p>
    pub fn key_location(mut self, input: crate::types::KeyLocation) -> Self {
        self.key_location = Some(input);
        self
    }
    /// <p>The location of the key.</p>
    pub fn set_key_location(
        mut self,
        input: std::option::Option<crate::types::KeyLocation>,
    ) -> Self {
        self.key_location = input;
        self
    }
    /// <p>The signing key URL.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The signing key URL.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The Amazon Resource Name (arn) of the secret.</p>
    pub fn secret_manager_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_manager_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (arn) of the secret.</p>
    pub fn set_secret_manager_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.secret_manager_arn = input;
        self
    }
    /// <p>The user name attribute field.</p>
    pub fn user_name_attribute_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name_attribute_field = Some(input.into());
        self
    }
    /// <p>The user name attribute field.</p>
    pub fn set_user_name_attribute_field(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_name_attribute_field = input;
        self
    }
    /// <p>The group attribute field.</p>
    pub fn group_attribute_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_attribute_field = Some(input.into());
        self
    }
    /// <p>The group attribute field.</p>
    pub fn set_group_attribute_field(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.group_attribute_field = input;
        self
    }
    /// <p>The issuer of the token.</p>
    pub fn issuer(mut self, input: impl Into<std::string::String>) -> Self {
        self.issuer = Some(input.into());
        self
    }
    /// <p>The issuer of the token.</p>
    pub fn set_issuer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The regular expression that identifies the claim.</p>
    pub fn claim_regex(mut self, input: impl Into<std::string::String>) -> Self {
        self.claim_regex = Some(input.into());
        self
    }
    /// <p>The regular expression that identifies the claim.</p>
    pub fn set_claim_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.claim_regex = input;
        self
    }
    /// Consumes the builder and constructs a [`JwtTokenTypeConfiguration`](crate::types::JwtTokenTypeConfiguration).
    pub fn build(self) -> crate::types::JwtTokenTypeConfiguration {
        crate::types::JwtTokenTypeConfiguration {
            key_location: self.key_location,
            url: self.url,
            secret_manager_arn: self.secret_manager_arn,
            user_name_attribute_field: self.user_name_attribute_field,
            group_attribute_field: self.group_attribute_field,
            issuer: self.issuer,
            claim_regex: self.claim_regex,
        }
    }
}
