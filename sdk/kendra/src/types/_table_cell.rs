// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a table cell in a table excerpt.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableCell {
    /// <p>The actual value or content within a table cell. A table cell could contain a date value of a year, or a string value of text, for example.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p> <code>TRUE</code> if the response of the table cell is the top answer. This is the cell value or content with the highest confidence score or is the most relevant to the query.</p>
    #[doc(hidden)]
    pub top_answer: bool,
    /// <p> <code>TRUE</code> means that the table cell has a high enough confidence and is relevant to the query, so the value or content should be highlighted.</p>
    #[doc(hidden)]
    pub highlighted: bool,
    /// <p> <code>TRUE</code> means that the table cell should be treated as a header.</p>
    #[doc(hidden)]
    pub header: bool,
}
impl TableCell {
    /// <p>The actual value or content within a table cell. A table cell could contain a date value of a year, or a string value of text, for example.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p> <code>TRUE</code> if the response of the table cell is the top answer. This is the cell value or content with the highest confidence score or is the most relevant to the query.</p>
    pub fn top_answer(&self) -> bool {
        self.top_answer
    }
    /// <p> <code>TRUE</code> means that the table cell has a high enough confidence and is relevant to the query, so the value or content should be highlighted.</p>
    pub fn highlighted(&self) -> bool {
        self.highlighted
    }
    /// <p> <code>TRUE</code> means that the table cell should be treated as a header.</p>
    pub fn header(&self) -> bool {
        self.header
    }
}
impl TableCell {
    /// Creates a new builder-style object to manufacture [`TableCell`](crate::types::TableCell).
    pub fn builder() -> crate::types::builders::TableCellBuilder {
        crate::types::builders::TableCellBuilder::default()
    }
}

/// A builder for [`TableCell`](crate::types::TableCell).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableCellBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) top_answer: std::option::Option<bool>,
    pub(crate) highlighted: std::option::Option<bool>,
    pub(crate) header: std::option::Option<bool>,
}
impl TableCellBuilder {
    /// <p>The actual value or content within a table cell. A table cell could contain a date value of a year, or a string value of text, for example.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The actual value or content within a table cell. A table cell could contain a date value of a year, or a string value of text, for example.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p> <code>TRUE</code> if the response of the table cell is the top answer. This is the cell value or content with the highest confidence score or is the most relevant to the query.</p>
    pub fn top_answer(mut self, input: bool) -> Self {
        self.top_answer = Some(input);
        self
    }
    /// <p> <code>TRUE</code> if the response of the table cell is the top answer. This is the cell value or content with the highest confidence score or is the most relevant to the query.</p>
    pub fn set_top_answer(mut self, input: std::option::Option<bool>) -> Self {
        self.top_answer = input;
        self
    }
    /// <p> <code>TRUE</code> means that the table cell has a high enough confidence and is relevant to the query, so the value or content should be highlighted.</p>
    pub fn highlighted(mut self, input: bool) -> Self {
        self.highlighted = Some(input);
        self
    }
    /// <p> <code>TRUE</code> means that the table cell has a high enough confidence and is relevant to the query, so the value or content should be highlighted.</p>
    pub fn set_highlighted(mut self, input: std::option::Option<bool>) -> Self {
        self.highlighted = input;
        self
    }
    /// <p> <code>TRUE</code> means that the table cell should be treated as a header.</p>
    pub fn header(mut self, input: bool) -> Self {
        self.header = Some(input);
        self
    }
    /// <p> <code>TRUE</code> means that the table cell should be treated as a header.</p>
    pub fn set_header(mut self, input: std::option::Option<bool>) -> Self {
        self.header = input;
        self
    }
    /// Consumes the builder and constructs a [`TableCell`](crate::types::TableCell).
    pub fn build(self) -> crate::types::TableCell {
        crate::types::TableCell {
            value: self.value,
            top_answer: self.top_answer.unwrap_or_default(),
            highlighted: self.highlighted.unwrap_or_default(),
            header: self.header.unwrap_or_default(),
        }
    }
}
