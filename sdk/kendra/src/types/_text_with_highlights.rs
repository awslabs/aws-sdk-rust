// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides text and information about where to highlight the text.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextWithHighlights {
    /// <p>The text to display to the user.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The beginning and end of the text that should be highlighted.</p>
    pub highlights: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl TextWithHighlights {
    /// <p>The text to display to the user.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The beginning and end of the text that should be highlighted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.highlights.is_none()`.
    pub fn highlights(&self) -> &[crate::types::Highlight] {
        self.highlights.as_deref().unwrap_or_default()
    }
}
impl TextWithHighlights {
    /// Creates a new builder-style object to manufacture [`TextWithHighlights`](crate::types::TextWithHighlights).
    pub fn builder() -> crate::types::builders::TextWithHighlightsBuilder {
        crate::types::builders::TextWithHighlightsBuilder::default()
    }
}

/// A builder for [`TextWithHighlights`](crate::types::TextWithHighlights).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TextWithHighlightsBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) highlights: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>,
}
impl TextWithHighlightsBuilder {
    /// <p>The text to display to the user.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text to display to the user.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text to display to the user.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Appends an item to `highlights`.
    ///
    /// To override the contents of this collection use [`set_highlights`](Self::set_highlights).
    ///
    /// <p>The beginning and end of the text that should be highlighted.</p>
    pub fn highlights(mut self, input: crate::types::Highlight) -> Self {
        let mut v = self.highlights.unwrap_or_default();
        v.push(input);
        self.highlights = ::std::option::Option::Some(v);
        self
    }
    /// <p>The beginning and end of the text that should be highlighted.</p>
    pub fn set_highlights(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Highlight>>) -> Self {
        self.highlights = input;
        self
    }
    /// <p>The beginning and end of the text that should be highlighted.</p>
    pub fn get_highlights(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Highlight>> {
        &self.highlights
    }
    /// Consumes the builder and constructs a [`TextWithHighlights`](crate::types::TextWithHighlights).
    pub fn build(self) -> crate::types::TextWithHighlights {
        crate::types::TextWithHighlights {
            text: self.text,
            highlights: self.highlights,
        }
    }
}
