// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a relative ranking that indicates how confident Amazon Kendra is that the response matches the query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScoreAttributes {
    /// <p>A relative ranking for how well the response matches the query.</p>
    #[doc(hidden)]
    pub score_confidence: std::option::Option<crate::types::ScoreConfidence>,
}
impl ScoreAttributes {
    /// <p>A relative ranking for how well the response matches the query.</p>
    pub fn score_confidence(&self) -> std::option::Option<&crate::types::ScoreConfidence> {
        self.score_confidence.as_ref()
    }
}
impl ScoreAttributes {
    /// Creates a new builder-style object to manufacture [`ScoreAttributes`](crate::types::ScoreAttributes).
    pub fn builder() -> crate::types::builders::ScoreAttributesBuilder {
        crate::types::builders::ScoreAttributesBuilder::default()
    }
}

/// A builder for [`ScoreAttributes`](crate::types::ScoreAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScoreAttributesBuilder {
    pub(crate) score_confidence: std::option::Option<crate::types::ScoreConfidence>,
}
impl ScoreAttributesBuilder {
    /// <p>A relative ranking for how well the response matches the query.</p>
    pub fn score_confidence(mut self, input: crate::types::ScoreConfidence) -> Self {
        self.score_confidence = Some(input);
        self
    }
    /// <p>A relative ranking for how well the response matches the query.</p>
    pub fn set_score_confidence(
        mut self,
        input: std::option::Option<crate::types::ScoreConfidence>,
    ) -> Self {
        self.score_confidence = input;
        self
    }
    /// Consumes the builder and constructs a [`ScoreAttributes`](crate::types::ScoreAttributes).
    pub fn build(self) -> crate::types::ScoreAttributes {
        crate::types::ScoreAttributes {
            score_confidence: self.score_confidence,
        }
    }
}
