// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A query with suggested spell corrections. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpellCorrectedQuery {
    /// <p>The query with the suggested spell corrections.</p>
    pub suggested_query_text: ::std::option::Option<::std::string::String>,
    /// <p>The corrected misspelled word or words in a query.</p>
    pub corrections: ::std::option::Option<::std::vec::Vec<crate::types::Correction>>,
}
impl SpellCorrectedQuery {
    /// <p>The query with the suggested spell corrections.</p>
    pub fn suggested_query_text(&self) -> ::std::option::Option<&str> {
        self.suggested_query_text.as_deref()
    }
    /// <p>The corrected misspelled word or words in a query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.corrections.is_none()`.
    pub fn corrections(&self) -> &[crate::types::Correction] {
        self.corrections.as_deref().unwrap_or_default()
    }
}
impl SpellCorrectedQuery {
    /// Creates a new builder-style object to manufacture [`SpellCorrectedQuery`](crate::types::SpellCorrectedQuery).
    pub fn builder() -> crate::types::builders::SpellCorrectedQueryBuilder {
        crate::types::builders::SpellCorrectedQueryBuilder::default()
    }
}

/// A builder for [`SpellCorrectedQuery`](crate::types::SpellCorrectedQuery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SpellCorrectedQueryBuilder {
    pub(crate) suggested_query_text: ::std::option::Option<::std::string::String>,
    pub(crate) corrections: ::std::option::Option<::std::vec::Vec<crate::types::Correction>>,
}
impl SpellCorrectedQueryBuilder {
    /// <p>The query with the suggested spell corrections.</p>
    pub fn suggested_query_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suggested_query_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query with the suggested spell corrections.</p>
    pub fn set_suggested_query_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suggested_query_text = input;
        self
    }
    /// <p>The query with the suggested spell corrections.</p>
    pub fn get_suggested_query_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.suggested_query_text
    }
    /// Appends an item to `corrections`.
    ///
    /// To override the contents of this collection use [`set_corrections`](Self::set_corrections).
    ///
    /// <p>The corrected misspelled word or words in a query.</p>
    pub fn corrections(mut self, input: crate::types::Correction) -> Self {
        let mut v = self.corrections.unwrap_or_default();
        v.push(input);
        self.corrections = ::std::option::Option::Some(v);
        self
    }
    /// <p>The corrected misspelled word or words in a query.</p>
    pub fn set_corrections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Correction>>) -> Self {
        self.corrections = input;
        self
    }
    /// <p>The corrected misspelled word or words in a query.</p>
    pub fn get_corrections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Correction>> {
        &self.corrections
    }
    /// Consumes the builder and constructs a [`SpellCorrectedQuery`](crate::types::SpellCorrectedQuery).
    pub fn build(self) -> crate::types::SpellCorrectedQuery {
        crate::types::SpellCorrectedQuery {
            suggested_query_text: self.suggested_query_text,
            corrections: self.corrections,
        }
    }
}
