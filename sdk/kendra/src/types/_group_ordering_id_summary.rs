// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information on the processing of <code>PUT</code> and <code>DELETE</code> actions for mapping users to their groups.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupOrderingIdSummary {
    /// <p>The current processing status of actions for mapping users to their groups. The status can be either <code>PROCESSING</code>, <code>SUCCEEDED</code>, <code>DELETING</code>, <code>DELETED</code>, or <code>FAILED</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PrincipalMappingStatus>,
    /// <p>The last date-time an action was updated. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date-time an action was received by Amazon Kendra. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    #[doc(hidden)]
    pub received_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The order in which actions should complete processing. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    #[doc(hidden)]
    pub ordering_id: std::option::Option<i64>,
    /// <p>The reason an action could not be processed. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
}
impl GroupOrderingIdSummary {
    /// <p>The current processing status of actions for mapping users to their groups. The status can be either <code>PROCESSING</code>, <code>SUCCEEDED</code>, <code>DELETING</code>, <code>DELETED</code>, or <code>FAILED</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::PrincipalMappingStatus> {
        self.status.as_ref()
    }
    /// <p>The last date-time an action was updated. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The date-time an action was received by Amazon Kendra. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn received_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.received_at.as_ref()
    }
    /// <p>The order in which actions should complete processing. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn ordering_id(&self) -> std::option::Option<i64> {
        self.ordering_id
    }
    /// <p>The reason an action could not be processed. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl GroupOrderingIdSummary {
    /// Creates a new builder-style object to manufacture [`GroupOrderingIdSummary`](crate::types::GroupOrderingIdSummary).
    pub fn builder() -> crate::types::builders::GroupOrderingIdSummaryBuilder {
        crate::types::builders::GroupOrderingIdSummaryBuilder::default()
    }
}

/// A builder for [`GroupOrderingIdSummary`](crate::types::GroupOrderingIdSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupOrderingIdSummaryBuilder {
    pub(crate) status: std::option::Option<crate::types::PrincipalMappingStatus>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) received_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ordering_id: std::option::Option<i64>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
}
impl GroupOrderingIdSummaryBuilder {
    /// <p>The current processing status of actions for mapping users to their groups. The status can be either <code>PROCESSING</code>, <code>SUCCEEDED</code>, <code>DELETING</code>, <code>DELETED</code>, or <code>FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::PrincipalMappingStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current processing status of actions for mapping users to their groups. The status can be either <code>PROCESSING</code>, <code>SUCCEEDED</code>, <code>DELETING</code>, <code>DELETED</code>, or <code>FAILED</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::PrincipalMappingStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The last date-time an action was updated. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>The last date-time an action was updated. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date-time an action was received by Amazon Kendra. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn received_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.received_at = Some(input);
        self
    }
    /// <p>The date-time an action was received by Amazon Kendra. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn set_received_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.received_at = input;
        self
    }
    /// <p>The order in which actions should complete processing. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn ordering_id(mut self, input: i64) -> Self {
        self.ordering_id = Some(input);
        self
    }
    /// <p>The order in which actions should complete processing. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn set_ordering_id(mut self, input: std::option::Option<i64>) -> Self {
        self.ordering_id = input;
        self
    }
    /// <p>The reason an action could not be processed. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The reason an action could not be processed. An action can be a <code>PUT</code> or <code>DELETE</code> action for mapping users to their groups.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupOrderingIdSummary`](crate::types::GroupOrderingIdSummary).
    pub fn build(self) -> crate::types::GroupOrderingIdSummary {
        crate::types::GroupOrderingIdSummary {
            status: self.status,
            last_updated_at: self.last_updated_at,
            received_at: self.received_at,
            ordering_id: self.ordering_id,
            failure_reason: self.failure_reason,
        }
    }
}
