// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An attribute returned from an index query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdditionalResultAttribute {
    /// <p>The key that identifies the attribute.</p>
    pub key: ::std::string::String,
    /// <p>The data type of the <code>Value</code> property.</p>
    pub value_type: crate::types::AdditionalResultAttributeValueType,
    /// <p>An object that contains the attribute value.</p>
    pub value: ::std::option::Option<crate::types::AdditionalResultAttributeValue>,
}
impl AdditionalResultAttribute {
    /// <p>The key that identifies the attribute.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn value_type(&self) -> &crate::types::AdditionalResultAttributeValueType {
        &self.value_type
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::AdditionalResultAttributeValue> {
        self.value.as_ref()
    }
}
impl AdditionalResultAttribute {
    /// Creates a new builder-style object to manufacture [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
    pub fn builder() -> crate::types::builders::AdditionalResultAttributeBuilder {
        crate::types::builders::AdditionalResultAttributeBuilder::default()
    }
}

/// A builder for [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AdditionalResultAttributeBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value_type: ::std::option::Option<crate::types::AdditionalResultAttributeValueType>,
    pub(crate) value: ::std::option::Option<crate::types::AdditionalResultAttributeValue>,
}
impl AdditionalResultAttributeBuilder {
    /// <p>The key that identifies the attribute.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key that identifies the attribute.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key that identifies the attribute.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    /// This field is required.
    pub fn value_type(mut self, input: crate::types::AdditionalResultAttributeValueType) -> Self {
        self.value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn set_value_type(mut self, input: ::std::option::Option<crate::types::AdditionalResultAttributeValueType>) -> Self {
        self.value_type = input;
        self
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn get_value_type(&self) -> &::std::option::Option<crate::types::AdditionalResultAttributeValueType> {
        &self.value_type
    }
    /// <p>An object that contains the attribute value.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::AdditionalResultAttributeValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::AdditionalResultAttributeValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::AdditionalResultAttributeValue> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::AdditionalResultAttributeBuilder::key)
    /// - [`value_type`](crate::types::builders::AdditionalResultAttributeBuilder::value_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AdditionalResultAttribute, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AdditionalResultAttribute {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building AdditionalResultAttribute",
                )
            })?,
            value_type: self.value_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value_type",
                    "value_type was not specified but it is required when building AdditionalResultAttribute",
                )
            })?,
            value: self.value,
        })
    }
}
