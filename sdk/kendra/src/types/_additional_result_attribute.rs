// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An attribute returned from an index query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdditionalResultAttribute {
    /// <p>The key that identifies the attribute.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The data type of the <code>Value</code> property.</p>
    #[doc(hidden)]
    pub value_type: std::option::Option<crate::types::AdditionalResultAttributeValueType>,
    /// <p>An object that contains the attribute value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::AdditionalResultAttributeValue>,
}
impl AdditionalResultAttribute {
    /// <p>The key that identifies the attribute.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn value_type(
        &self,
    ) -> std::option::Option<&crate::types::AdditionalResultAttributeValueType> {
        self.value_type.as_ref()
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::AdditionalResultAttributeValue> {
        self.value.as_ref()
    }
}
impl AdditionalResultAttribute {
    /// Creates a new builder-style object to manufacture [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
    pub fn builder() -> crate::types::builders::AdditionalResultAttributeBuilder {
        crate::types::builders::AdditionalResultAttributeBuilder::default()
    }
}

/// A builder for [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdditionalResultAttributeBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value_type: std::option::Option<crate::types::AdditionalResultAttributeValueType>,
    pub(crate) value: std::option::Option<crate::types::AdditionalResultAttributeValue>,
}
impl AdditionalResultAttributeBuilder {
    /// <p>The key that identifies the attribute.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key that identifies the attribute.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn value_type(mut self, input: crate::types::AdditionalResultAttributeValueType) -> Self {
        self.value_type = Some(input);
        self
    }
    /// <p>The data type of the <code>Value</code> property.</p>
    pub fn set_value_type(
        mut self,
        input: std::option::Option<crate::types::AdditionalResultAttributeValueType>,
    ) -> Self {
        self.value_type = input;
        self
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn value(mut self, input: crate::types::AdditionalResultAttributeValue) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>An object that contains the attribute value.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::AdditionalResultAttributeValue>,
    ) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`AdditionalResultAttribute`](crate::types::AdditionalResultAttribute).
    pub fn build(self) -> crate::types::AdditionalResultAttribute {
        crate::types::AdditionalResultAttribute {
            key: self.key,
            value_type: self.value_type,
            value: self.value,
        }
    }
}
