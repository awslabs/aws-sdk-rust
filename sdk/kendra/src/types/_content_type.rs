// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ContentType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let contenttype = unimplemented!();
/// match contenttype {
///     ContentType::Csv => { /* ... */ },
///     ContentType::Html => { /* ... */ },
///     ContentType::Json => { /* ... */ },
///     ContentType::Md => { /* ... */ },
///     ContentType::MsExcel => { /* ... */ },
///     ContentType::MsWord => { /* ... */ },
///     ContentType::Pdf => { /* ... */ },
///     ContentType::PlainText => { /* ... */ },
///     ContentType::Ppt => { /* ... */ },
///     ContentType::Rtf => { /* ... */ },
///     ContentType::Xml => { /* ... */ },
///     ContentType::Xslt => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `contenttype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ContentType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ContentType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ContentType::NewFeature` is defined.
/// Specifically, when `contenttype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ContentType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ContentType {
    #[allow(missing_docs)] // documentation missing in model
    Csv,
    #[allow(missing_docs)] // documentation missing in model
    Html,
    #[allow(missing_docs)] // documentation missing in model
    Json,
    #[allow(missing_docs)] // documentation missing in model
    Md,
    #[allow(missing_docs)] // documentation missing in model
    MsExcel,
    #[allow(missing_docs)] // documentation missing in model
    MsWord,
    #[allow(missing_docs)] // documentation missing in model
    Pdf,
    #[allow(missing_docs)] // documentation missing in model
    PlainText,
    #[allow(missing_docs)] // documentation missing in model
    Ppt,
    #[allow(missing_docs)] // documentation missing in model
    Rtf,
    #[allow(missing_docs)] // documentation missing in model
    Xml,
    #[allow(missing_docs)] // documentation missing in model
    Xslt,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ContentType {
    fn from(s: &str) -> Self {
        match s {
            "CSV" => ContentType::Csv,
            "HTML" => ContentType::Html,
            "JSON" => ContentType::Json,
            "MD" => ContentType::Md,
            "MS_EXCEL" => ContentType::MsExcel,
            "MS_WORD" => ContentType::MsWord,
            "PDF" => ContentType::Pdf,
            "PLAIN_TEXT" => ContentType::PlainText,
            "PPT" => ContentType::Ppt,
            "RTF" => ContentType::Rtf,
            "XML" => ContentType::Xml,
            "XSLT" => ContentType::Xslt,
            other => ContentType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ContentType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ContentType::from(s))
    }
}
impl ContentType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ContentType::Csv => "CSV",
            ContentType::Html => "HTML",
            ContentType::Json => "JSON",
            ContentType::Md => "MD",
            ContentType::MsExcel => "MS_EXCEL",
            ContentType::MsWord => "MS_WORD",
            ContentType::Pdf => "PDF",
            ContentType::PlainText => "PLAIN_TEXT",
            ContentType::Ppt => "PPT",
            ContentType::Rtf => "RTF",
            ContentType::Xml => "XML",
            ContentType::Xslt => "XSLT",
            ContentType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CSV",
            "HTML",
            "JSON",
            "MD",
            "MS_EXCEL",
            "MS_WORD",
            "PDF",
            "PLAIN_TEXT",
            "PPT",
            "RTF",
            "XML",
            "XSLT",
        ]
    }
}
impl ::std::convert::AsRef<str> for ContentType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ContentType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ContentType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ContentType::Csv => write!(f, "CSV"),
            ContentType::Html => write!(f, "HTML"),
            ContentType::Json => write!(f, "JSON"),
            ContentType::Md => write!(f, "MD"),
            ContentType::MsExcel => write!(f, "MS_EXCEL"),
            ContentType::MsWord => write!(f, "MS_WORD"),
            ContentType::Pdf => write!(f, "PDF"),
            ContentType::PlainText => write!(f, "PLAIN_TEXT"),
            ContentType::Ppt => write!(f, "PPT"),
            ContentType::Rtf => write!(f, "RTF"),
            ContentType::Xml => write!(f, "XML"),
            ContentType::Xslt => write!(f, "XSLT"),
            ContentType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
