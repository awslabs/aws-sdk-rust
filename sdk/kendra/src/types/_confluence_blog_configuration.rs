// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration of blog settings for the Confluence data source. Blogs are always indexed unless filtered from the index by the <code>ExclusionPatterns</code> or <code>InclusionPatterns</code> fields in the <code>ConfluenceConfiguration</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfluenceBlogConfiguration {
    /// <p>Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Confluence fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Confluence data source field names must exist in your Confluence custom metadata.</p>
    /// <p>If you specify the <code>BlogFieldMappings</code> parameter, you must specify at least one field mapping.</p>
    #[doc(hidden)]
    pub blog_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::ConfluenceBlogToIndexFieldMapping>>,
}
impl ConfluenceBlogConfiguration {
    /// <p>Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Confluence fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Confluence data source field names must exist in your Confluence custom metadata.</p>
    /// <p>If you specify the <code>BlogFieldMappings</code> parameter, you must specify at least one field mapping.</p>
    pub fn blog_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::ConfluenceBlogToIndexFieldMapping]> {
        self.blog_field_mappings.as_deref()
    }
}
impl ConfluenceBlogConfiguration {
    /// Creates a new builder-style object to manufacture [`ConfluenceBlogConfiguration`](crate::types::ConfluenceBlogConfiguration).
    pub fn builder() -> crate::types::builders::ConfluenceBlogConfigurationBuilder {
        crate::types::builders::ConfluenceBlogConfigurationBuilder::default()
    }
}

/// A builder for [`ConfluenceBlogConfiguration`](crate::types::ConfluenceBlogConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfluenceBlogConfigurationBuilder {
    pub(crate) blog_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::ConfluenceBlogToIndexFieldMapping>>,
}
impl ConfluenceBlogConfigurationBuilder {
    /// Appends an item to `blog_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_blog_field_mappings`](Self::set_blog_field_mappings).
    ///
    /// <p>Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Confluence fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Confluence data source field names must exist in your Confluence custom metadata.</p>
    /// <p>If you specify the <code>BlogFieldMappings</code> parameter, you must specify at least one field mapping.</p>
    pub fn blog_field_mappings(
        mut self,
        input: crate::types::ConfluenceBlogToIndexFieldMapping,
    ) -> Self {
        let mut v = self.blog_field_mappings.unwrap_or_default();
        v.push(input);
        self.blog_field_mappings = Some(v);
        self
    }
    /// <p>Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to Confluence fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The Confluence data source field names must exist in your Confluence custom metadata.</p>
    /// <p>If you specify the <code>BlogFieldMappings</code> parameter, you must specify at least one field mapping.</p>
    pub fn set_blog_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConfluenceBlogToIndexFieldMapping>>,
    ) -> Self {
        self.blog_field_mappings = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfluenceBlogConfiguration`](crate::types::ConfluenceBlogConfiguration).
    pub fn build(self) -> crate::types::ConfluenceBlogConfiguration {
        crate::types::ConfluenceBlogConfiguration {
            blog_field_mappings: self.blog_field_mappings,
        }
    }
}
