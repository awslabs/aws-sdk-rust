// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Gathers information about when a particular result was clicked by a user. Your application uses the <code>SubmitFeedback</code> API to provide click information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClickFeedback {
    /// <p>The identifier of the search result that was clicked.</p>
    #[doc(hidden)]
    pub result_id: std::option::Option<std::string::String>,
    /// <p>The Unix timestamp of the date and time that the result was clicked.</p>
    #[doc(hidden)]
    pub click_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ClickFeedback {
    /// <p>The identifier of the search result that was clicked.</p>
    pub fn result_id(&self) -> std::option::Option<&str> {
        self.result_id.as_deref()
    }
    /// <p>The Unix timestamp of the date and time that the result was clicked.</p>
    pub fn click_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.click_time.as_ref()
    }
}
impl ClickFeedback {
    /// Creates a new builder-style object to manufacture [`ClickFeedback`](crate::types::ClickFeedback).
    pub fn builder() -> crate::types::builders::ClickFeedbackBuilder {
        crate::types::builders::ClickFeedbackBuilder::default()
    }
}

/// A builder for [`ClickFeedback`](crate::types::ClickFeedback).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClickFeedbackBuilder {
    pub(crate) result_id: std::option::Option<std::string::String>,
    pub(crate) click_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ClickFeedbackBuilder {
    /// <p>The identifier of the search result that was clicked.</p>
    pub fn result_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.result_id = Some(input.into());
        self
    }
    /// <p>The identifier of the search result that was clicked.</p>
    pub fn set_result_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.result_id = input;
        self
    }
    /// <p>The Unix timestamp of the date and time that the result was clicked.</p>
    pub fn click_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.click_time = Some(input);
        self
    }
    /// <p>The Unix timestamp of the date and time that the result was clicked.</p>
    pub fn set_click_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.click_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ClickFeedback`](crate::types::ClickFeedback).
    pub fn build(self) -> crate::types::ClickFeedback {
        crate::types::ClickFeedback {
            result_id: self.result_id,
            click_time: self.click_time,
        }
    }
}
