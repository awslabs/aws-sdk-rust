// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for the seed or starting point URLs to crawl.</p>
/// <p> <i>When selecting websites to index, you must adhere to the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a> and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.</i> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SeedUrlConfiguration {
    /// <p>The list of seed or starting point URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of 100 seed URLs.</p>
    #[doc(hidden)]
    pub seed_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>You can choose one of the following modes:</p>
    /// <ul>
    /// <li> <p> <code>HOST_ONLY</code> – crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.</p> </li>
    /// <li> <p> <code>SUBDOMAINS</code> – crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.</p> </li>
    /// <li> <p> <code>EVERYTHING</code> – crawl the website host names with subdomains and other domains that the webpages link to.</p> </li>
    /// </ul>
    /// <p>The default mode is set to <code>HOST_ONLY</code>.</p>
    #[doc(hidden)]
    pub web_crawler_mode: std::option::Option<crate::types::WebCrawlerMode>,
}
impl SeedUrlConfiguration {
    /// <p>The list of seed or starting point URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of 100 seed URLs.</p>
    pub fn seed_urls(&self) -> std::option::Option<&[std::string::String]> {
        self.seed_urls.as_deref()
    }
    /// <p>You can choose one of the following modes:</p>
    /// <ul>
    /// <li> <p> <code>HOST_ONLY</code> – crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.</p> </li>
    /// <li> <p> <code>SUBDOMAINS</code> – crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.</p> </li>
    /// <li> <p> <code>EVERYTHING</code> – crawl the website host names with subdomains and other domains that the webpages link to.</p> </li>
    /// </ul>
    /// <p>The default mode is set to <code>HOST_ONLY</code>.</p>
    pub fn web_crawler_mode(&self) -> std::option::Option<&crate::types::WebCrawlerMode> {
        self.web_crawler_mode.as_ref()
    }
}
impl SeedUrlConfiguration {
    /// Creates a new builder-style object to manufacture [`SeedUrlConfiguration`](crate::types::SeedUrlConfiguration).
    pub fn builder() -> crate::types::builders::SeedUrlConfigurationBuilder {
        crate::types::builders::SeedUrlConfigurationBuilder::default()
    }
}

/// A builder for [`SeedUrlConfiguration`](crate::types::SeedUrlConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SeedUrlConfigurationBuilder {
    pub(crate) seed_urls: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) web_crawler_mode: std::option::Option<crate::types::WebCrawlerMode>,
}
impl SeedUrlConfigurationBuilder {
    /// Appends an item to `seed_urls`.
    ///
    /// To override the contents of this collection use [`set_seed_urls`](Self::set_seed_urls).
    ///
    /// <p>The list of seed or starting point URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of 100 seed URLs.</p>
    pub fn seed_urls(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.seed_urls.unwrap_or_default();
        v.push(input.into());
        self.seed_urls = Some(v);
        self
    }
    /// <p>The list of seed or starting point URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of 100 seed URLs.</p>
    pub fn set_seed_urls(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.seed_urls = input;
        self
    }
    /// <p>You can choose one of the following modes:</p>
    /// <ul>
    /// <li> <p> <code>HOST_ONLY</code> – crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.</p> </li>
    /// <li> <p> <code>SUBDOMAINS</code> – crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.</p> </li>
    /// <li> <p> <code>EVERYTHING</code> – crawl the website host names with subdomains and other domains that the webpages link to.</p> </li>
    /// </ul>
    /// <p>The default mode is set to <code>HOST_ONLY</code>.</p>
    pub fn web_crawler_mode(mut self, input: crate::types::WebCrawlerMode) -> Self {
        self.web_crawler_mode = Some(input);
        self
    }
    /// <p>You can choose one of the following modes:</p>
    /// <ul>
    /// <li> <p> <code>HOST_ONLY</code> – crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.</p> </li>
    /// <li> <p> <code>SUBDOMAINS</code> – crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.</p> </li>
    /// <li> <p> <code>EVERYTHING</code> – crawl the website host names with subdomains and other domains that the webpages link to.</p> </li>
    /// </ul>
    /// <p>The default mode is set to <code>HOST_ONLY</code>.</p>
    pub fn set_web_crawler_mode(
        mut self,
        input: std::option::Option<crate::types::WebCrawlerMode>,
    ) -> Self {
        self.web_crawler_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`SeedUrlConfiguration`](crate::types::SeedUrlConfiguration).
    pub fn build(self) -> crate::types::SeedUrlConfiguration {
        crate::types::SeedUrlConfiguration {
            seed_urls: self.seed_urls,
            web_crawler_mode: self.web_crawler_mode,
        }
    }
}
