// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html">PreExtractionHookConfiguration</a> if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html">PostExtractionHookConfiguration</a>. You can only invoke one Lambda function. However, this function can invoke other functions it requires.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html">Customizing document metadata during the ingestion process</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HookConfiguration {
    /// <p>The condition used for when a Lambda function should be invoked.</p>
    /// <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
    pub invocation_condition: ::std::option::Option<crate::types::DocumentAttributeCondition>,
    /// <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
    pub lambda_arn: ::std::string::String,
    /// <p>Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data contracts for Lambda functions</a>.</p>
    pub s3_bucket: ::std::string::String,
}
impl HookConfiguration {
    /// <p>The condition used for when a Lambda function should be invoked.</p>
    /// <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
    pub fn invocation_condition(&self) -> ::std::option::Option<&crate::types::DocumentAttributeCondition> {
        self.invocation_condition.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
    pub fn lambda_arn(&self) -> &str {
        use std::ops::Deref;
        self.lambda_arn.deref()
    }
    /// <p>Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data contracts for Lambda functions</a>.</p>
    pub fn s3_bucket(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket.deref()
    }
}
impl HookConfiguration {
    /// Creates a new builder-style object to manufacture [`HookConfiguration`](crate::types::HookConfiguration).
    pub fn builder() -> crate::types::builders::HookConfigurationBuilder {
        crate::types::builders::HookConfigurationBuilder::default()
    }
}

/// A builder for [`HookConfiguration`](crate::types::HookConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HookConfigurationBuilder {
    pub(crate) invocation_condition: ::std::option::Option<crate::types::DocumentAttributeCondition>,
    pub(crate) lambda_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
}
impl HookConfigurationBuilder {
    /// <p>The condition used for when a Lambda function should be invoked.</p>
    /// <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
    pub fn invocation_condition(mut self, input: crate::types::DocumentAttributeCondition) -> Self {
        self.invocation_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The condition used for when a Lambda function should be invoked.</p>
    /// <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
    pub fn set_invocation_condition(mut self, input: ::std::option::Option<crate::types::DocumentAttributeCondition>) -> Self {
        self.invocation_condition = input;
        self
    }
    /// <p>The condition used for when a Lambda function should be invoked.</p>
    /// <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>
    pub fn get_invocation_condition(&self) -> &::std::option::Option<crate::types::DocumentAttributeCondition> {
        &self.invocation_condition
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
    /// This field is required.
    pub fn lambda_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
    pub fn set_lambda_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html">IAM roles for Amazon Kendra</a>.</p>
    pub fn get_lambda_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_arn
    }
    /// <p>Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data contracts for Lambda functions</a>.</p>
    /// This field is required.
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data contracts for Lambda functions</a>.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda">Data contracts for Lambda functions</a>.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// Consumes the builder and constructs a [`HookConfiguration`](crate::types::HookConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`lambda_arn`](crate::types::builders::HookConfigurationBuilder::lambda_arn)
    /// - [`s3_bucket`](crate::types::builders::HookConfigurationBuilder::s3_bucket)
    pub fn build(self) -> ::std::result::Result<crate::types::HookConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HookConfiguration {
            invocation_condition: self.invocation_condition,
            lambda_arn: self.lambda_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lambda_arn",
                    "lambda_arn was not specified but it is required when building HookConfiguration",
                )
            })?,
            s3_bucket: self.s3_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket",
                    "s3_bucket was not specified but it is required when building HookConfiguration",
                )
            })?,
        })
    }
}
