// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target document attribute or metadata field you want to alter when ingesting documents into Amazon Kendra.</p>
/// <p>For example, you can delete customer identification numbers associated with the documents, stored in the document metadata field called 'Customer_ID'. You set the target key as 'Customer_ID' and the deletion flag to <code>TRUE</code>. This removes all customer ID values in the field 'Customer_ID'. This would scrub personally identifiable information from each document's metadata.</p>
/// <p>Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using <code>DocumentAttributeTarget</code>. Amazon Kendra then will map your newly created metadata field to your index field.</p>
/// <p>You can also use this with <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html">DocumentAttributeCondition</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentAttributeTarget {
    /// <p>The identifier of the target document attribute or metadata field.</p>
    /// <p>For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    #[doc(hidden)]
    pub target_document_attribute_key: std::option::Option<std::string::String>,
    /// <p> <code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>. To create a target value (<code>TargetDocumentAttributeValue</code>), set this to <code>FALSE</code>.</p>
    #[doc(hidden)]
    pub target_document_attribute_value_deletion: bool,
    /// <p>The target value you want to create for the target attribute.</p>
    /// <p>For example, 'Finance' could be the target value for the target attribute key 'Department'.</p>
    #[doc(hidden)]
    pub target_document_attribute_value: std::option::Option<crate::types::DocumentAttributeValue>,
}
impl DocumentAttributeTarget {
    /// <p>The identifier of the target document attribute or metadata field.</p>
    /// <p>For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn target_document_attribute_key(&self) -> std::option::Option<&str> {
        self.target_document_attribute_key.as_deref()
    }
    /// <p> <code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>. To create a target value (<code>TargetDocumentAttributeValue</code>), set this to <code>FALSE</code>.</p>
    pub fn target_document_attribute_value_deletion(&self) -> bool {
        self.target_document_attribute_value_deletion
    }
    /// <p>The target value you want to create for the target attribute.</p>
    /// <p>For example, 'Finance' could be the target value for the target attribute key 'Department'.</p>
    pub fn target_document_attribute_value(
        &self,
    ) -> std::option::Option<&crate::types::DocumentAttributeValue> {
        self.target_document_attribute_value.as_ref()
    }
}
impl DocumentAttributeTarget {
    /// Creates a new builder-style object to manufacture [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
    pub fn builder() -> crate::types::builders::DocumentAttributeTargetBuilder {
        crate::types::builders::DocumentAttributeTargetBuilder::default()
    }
}

/// A builder for [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentAttributeTargetBuilder {
    pub(crate) target_document_attribute_key: std::option::Option<std::string::String>,
    pub(crate) target_document_attribute_value_deletion: std::option::Option<bool>,
    pub(crate) target_document_attribute_value:
        std::option::Option<crate::types::DocumentAttributeValue>,
}
impl DocumentAttributeTargetBuilder {
    /// <p>The identifier of the target document attribute or metadata field.</p>
    /// <p>For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn target_document_attribute_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_document_attribute_key = Some(input.into());
        self
    }
    /// <p>The identifier of the target document attribute or metadata field.</p>
    /// <p>For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn set_target_document_attribute_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_document_attribute_key = input;
        self
    }
    /// <p> <code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>. To create a target value (<code>TargetDocumentAttributeValue</code>), set this to <code>FALSE</code>.</p>
    pub fn target_document_attribute_value_deletion(mut self, input: bool) -> Self {
        self.target_document_attribute_value_deletion = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>. To create a target value (<code>TargetDocumentAttributeValue</code>), set this to <code>FALSE</code>.</p>
    pub fn set_target_document_attribute_value_deletion(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.target_document_attribute_value_deletion = input;
        self
    }
    /// <p>The target value you want to create for the target attribute.</p>
    /// <p>For example, 'Finance' could be the target value for the target attribute key 'Department'.</p>
    pub fn target_document_attribute_value(
        mut self,
        input: crate::types::DocumentAttributeValue,
    ) -> Self {
        self.target_document_attribute_value = Some(input);
        self
    }
    /// <p>The target value you want to create for the target attribute.</p>
    /// <p>For example, 'Finance' could be the target value for the target attribute key 'Department'.</p>
    pub fn set_target_document_attribute_value(
        mut self,
        input: std::option::Option<crate::types::DocumentAttributeValue>,
    ) -> Self {
        self.target_document_attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
    pub fn build(self) -> crate::types::DocumentAttributeTarget {
        crate::types::DocumentAttributeTarget {
            target_document_attribute_key: self.target_document_attribute_key,
            target_document_attribute_value_deletion: self
                .target_document_attribute_value_deletion
                .unwrap_or_default(),
            target_document_attribute_value: self.target_document_attribute_value,
        }
    }
}
