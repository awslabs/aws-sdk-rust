// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sub groups that belong to a group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MemberGroup {
    /// <p>The identifier of the sub group you want to map to a group.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the data source for the sub group you want to map to a group.</p>
    #[doc(hidden)]
    pub data_source_id: std::option::Option<std::string::String>,
}
impl MemberGroup {
    /// <p>The identifier of the sub group you want to map to a group.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The identifier of the data source for the sub group you want to map to a group.</p>
    pub fn data_source_id(&self) -> std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl MemberGroup {
    /// Creates a new builder-style object to manufacture [`MemberGroup`](crate::types::MemberGroup).
    pub fn builder() -> crate::types::builders::MemberGroupBuilder {
        crate::types::builders::MemberGroupBuilder::default()
    }
}

/// A builder for [`MemberGroup`](crate::types::MemberGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MemberGroupBuilder {
    pub(crate) group_id: std::option::Option<std::string::String>,
    pub(crate) data_source_id: std::option::Option<std::string::String>,
}
impl MemberGroupBuilder {
    /// <p>The identifier of the sub group you want to map to a group.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>The identifier of the sub group you want to map to a group.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The identifier of the data source for the sub group you want to map to a group.</p>
    pub fn data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_id = Some(input.into());
        self
    }
    /// <p>The identifier of the data source for the sub group you want to map to a group.</p>
    pub fn set_data_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MemberGroup`](crate::types::MemberGroup).
    pub fn build(self) -> crate::types::MemberGroup {
        crate::types::MemberGroup {
            group_id: self.group_id,
            data_source_id: self.data_source_id,
        }
    }
}
