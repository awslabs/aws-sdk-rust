// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the document attribute to use to sort the response to a Amazon Kendra query. You can specify a single attribute for sorting. The attribute must have the <code>Sortable</code> flag set to <code>true</code>, otherwise Amazon Kendra returns an exception.</p>
/// <p>You can sort attributes of the following types.</p>
/// <ul>
/// <li> <p>Date value</p> </li>
/// <li> <p>Long value</p> </li>
/// <li> <p>String value</p> </li>
/// </ul>
/// <p>You can't sort attributes of the following type.</p>
/// <ul>
/// <li> <p>String list value</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SortingConfiguration {
    /// <p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p>
    /// <p>You can also sort by any of the following built-in attributes:</p>
    /// <ul>
    /// <li> <p>_category</p> </li>
    /// <li> <p>_created_at</p> </li>
    /// <li> <p>_last_updated_at</p> </li>
    /// <li> <p>_version</p> </li>
    /// <li> <p>_view_count</p> </li>
    /// </ul>
    pub document_attribute_key: ::std::string::String,
    /// <p>The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.</p>
    pub sort_order: crate::types::SortOrder,
}
impl SortingConfiguration {
    /// <p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p>
    /// <p>You can also sort by any of the following built-in attributes:</p>
    /// <ul>
    /// <li> <p>_category</p> </li>
    /// <li> <p>_created_at</p> </li>
    /// <li> <p>_last_updated_at</p> </li>
    /// <li> <p>_version</p> </li>
    /// <li> <p>_view_count</p> </li>
    /// </ul>
    pub fn document_attribute_key(&self) -> &str {
        use std::ops::Deref;
        self.document_attribute_key.deref()
    }
    /// <p>The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.</p>
    pub fn sort_order(&self) -> &crate::types::SortOrder {
        &self.sort_order
    }
}
impl SortingConfiguration {
    /// Creates a new builder-style object to manufacture [`SortingConfiguration`](crate::types::SortingConfiguration).
    pub fn builder() -> crate::types::builders::SortingConfigurationBuilder {
        crate::types::builders::SortingConfigurationBuilder::default()
    }
}

/// A builder for [`SortingConfiguration`](crate::types::SortingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SortingConfigurationBuilder {
    pub(crate) document_attribute_key: ::std::option::Option<::std::string::String>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl SortingConfigurationBuilder {
    /// <p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p>
    /// <p>You can also sort by any of the following built-in attributes:</p>
    /// <ul>
    /// <li> <p>_category</p> </li>
    /// <li> <p>_created_at</p> </li>
    /// <li> <p>_last_updated_at</p> </li>
    /// <li> <p>_version</p> </li>
    /// <li> <p>_view_count</p> </li>
    /// </ul>
    /// This field is required.
    pub fn document_attribute_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_attribute_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p>
    /// <p>You can also sort by any of the following built-in attributes:</p>
    /// <ul>
    /// <li> <p>_category</p> </li>
    /// <li> <p>_created_at</p> </li>
    /// <li> <p>_last_updated_at</p> </li>
    /// <li> <p>_version</p> </li>
    /// <li> <p>_view_count</p> </li>
    /// </ul>
    pub fn set_document_attribute_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_attribute_key = input;
        self
    }
    /// <p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p>
    /// <p>You can also sort by any of the following built-in attributes:</p>
    /// <ul>
    /// <li> <p>_category</p> </li>
    /// <li> <p>_created_at</p> </li>
    /// <li> <p>_last_updated_at</p> </li>
    /// <li> <p>_version</p> </li>
    /// <li> <p>_view_count</p> </li>
    /// </ul>
    pub fn get_document_attribute_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_attribute_key
    }
    /// <p>The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.</p>
    /// This field is required.
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`SortingConfiguration`](crate::types::SortingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`document_attribute_key`](crate::types::builders::SortingConfigurationBuilder::document_attribute_key)
    /// - [`sort_order`](crate::types::builders::SortingConfigurationBuilder::sort_order)
    pub fn build(self) -> ::std::result::Result<crate::types::SortingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SortingConfiguration {
            document_attribute_key: self.document_attribute_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document_attribute_key",
                    "document_attribute_key was not specified but it is required when building SortingConfiguration",
                )
            })?,
            sort_order: self.sort_order.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sort_order",
                    "sort_order was not specified but it is required when building SortingConfiguration",
                )
            })?,
        })
    }
}
