// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentAttributeValue {
    /// <p>A string, such as "department".</p>
    #[doc(hidden)]
    pub string_value: std::option::Option<std::string::String>,
    /// <p>A list of strings. The default maximum length or number of strings is 10.</p>
    #[doc(hidden)]
    pub string_list_value: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A long integer value.</p>
    #[doc(hidden)]
    pub long_value: std::option::Option<i64>,
    /// <p>A date expressed as an ISO 8601 string.</p>
    /// <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>
    #[doc(hidden)]
    pub date_value: std::option::Option<aws_smithy_types::DateTime>,
}
impl DocumentAttributeValue {
    /// <p>A string, such as "department".</p>
    pub fn string_value(&self) -> std::option::Option<&str> {
        self.string_value.as_deref()
    }
    /// <p>A list of strings. The default maximum length or number of strings is 10.</p>
    pub fn string_list_value(&self) -> std::option::Option<&[std::string::String]> {
        self.string_list_value.as_deref()
    }
    /// <p>A long integer value.</p>
    pub fn long_value(&self) -> std::option::Option<i64> {
        self.long_value
    }
    /// <p>A date expressed as an ISO 8601 string.</p>
    /// <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>
    pub fn date_value(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.date_value.as_ref()
    }
}
impl DocumentAttributeValue {
    /// Creates a new builder-style object to manufacture [`DocumentAttributeValue`](crate::types::DocumentAttributeValue).
    pub fn builder() -> crate::types::builders::DocumentAttributeValueBuilder {
        crate::types::builders::DocumentAttributeValueBuilder::default()
    }
}

/// A builder for [`DocumentAttributeValue`](crate::types::DocumentAttributeValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentAttributeValueBuilder {
    pub(crate) string_value: std::option::Option<std::string::String>,
    pub(crate) string_list_value: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) long_value: std::option::Option<i64>,
    pub(crate) date_value: std::option::Option<aws_smithy_types::DateTime>,
}
impl DocumentAttributeValueBuilder {
    /// <p>A string, such as "department".</p>
    pub fn string_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.string_value = Some(input.into());
        self
    }
    /// <p>A string, such as "department".</p>
    pub fn set_string_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// Appends an item to `string_list_value`.
    ///
    /// To override the contents of this collection use [`set_string_list_value`](Self::set_string_list_value).
    ///
    /// <p>A list of strings. The default maximum length or number of strings is 10.</p>
    pub fn string_list_value(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.string_list_value.unwrap_or_default();
        v.push(input.into());
        self.string_list_value = Some(v);
        self
    }
    /// <p>A list of strings. The default maximum length or number of strings is 10.</p>
    pub fn set_string_list_value(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.string_list_value = input;
        self
    }
    /// <p>A long integer value.</p>
    pub fn long_value(mut self, input: i64) -> Self {
        self.long_value = Some(input);
        self
    }
    /// <p>A long integer value.</p>
    pub fn set_long_value(mut self, input: std::option::Option<i64>) -> Self {
        self.long_value = input;
        self
    }
    /// <p>A date expressed as an ISO 8601 string.</p>
    /// <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>
    pub fn date_value(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.date_value = Some(input);
        self
    }
    /// <p>A date expressed as an ISO 8601 string.</p>
    /// <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>
    pub fn set_date_value(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.date_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentAttributeValue`](crate::types::DocumentAttributeValue).
    pub fn build(self) -> crate::types::DocumentAttributeValue {
        crate::types::DocumentAttributeValue {
            string_value: self.string_value,
            string_list_value: self.string_list_value,
            long_value: self.long_value,
            date_value: self.date_value,
        }
    }
}
