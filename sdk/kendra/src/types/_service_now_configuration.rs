// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to ServiceNow as your data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceNowConfiguration {
    /// <p>The ServiceNow instance that the data source connects to. The host endpoint should look like the following: <i>{instance}.service-now.com.</i> </p>
    #[doc(hidden)]
    pub host_url: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p>The identifier of the release that the ServiceNow host is running. If the host is not running the <code>LONDON</code> release, use <code>OTHERS</code>.</p>
    #[doc(hidden)]
    pub service_now_build_version: std::option::Option<crate::types::ServiceNowBuildVersionType>,
    /// <p>Configuration information for crawling knowledge articles in the ServiceNow site.</p>
    #[doc(hidden)]
    pub knowledge_article_configuration:
        std::option::Option<crate::types::ServiceNowKnowledgeArticleConfiguration>,
    /// <p>Configuration information for crawling service catalogs in the ServiceNow site.</p>
    #[doc(hidden)]
    pub service_catalog_configuration:
        std::option::Option<crate::types::ServiceNowServiceCatalogConfiguration>,
    /// <p>The type of authentication used to connect to the ServiceNow instance. If you choose <code>HTTP_BASIC</code>, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the <code>SecretArn</code> field. If you choose <code>OAUTH2</code>, Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password.</p>
    /// <p>When you use <code>OAUTH2</code> authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    #[doc(hidden)]
    pub authentication_type: std::option::Option<crate::types::ServiceNowAuthenticationType>,
}
impl ServiceNowConfiguration {
    /// <p>The ServiceNow instance that the data source connects to. The host endpoint should look like the following: <i>{instance}.service-now.com.</i> </p>
    pub fn host_url(&self) -> std::option::Option<&str> {
        self.host_url.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The identifier of the release that the ServiceNow host is running. If the host is not running the <code>LONDON</code> release, use <code>OTHERS</code>.</p>
    pub fn service_now_build_version(
        &self,
    ) -> std::option::Option<&crate::types::ServiceNowBuildVersionType> {
        self.service_now_build_version.as_ref()
    }
    /// <p>Configuration information for crawling knowledge articles in the ServiceNow site.</p>
    pub fn knowledge_article_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ServiceNowKnowledgeArticleConfiguration> {
        self.knowledge_article_configuration.as_ref()
    }
    /// <p>Configuration information for crawling service catalogs in the ServiceNow site.</p>
    pub fn service_catalog_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ServiceNowServiceCatalogConfiguration> {
        self.service_catalog_configuration.as_ref()
    }
    /// <p>The type of authentication used to connect to the ServiceNow instance. If you choose <code>HTTP_BASIC</code>, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the <code>SecretArn</code> field. If you choose <code>OAUTH2</code>, Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password.</p>
    /// <p>When you use <code>OAUTH2</code> authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn authentication_type(
        &self,
    ) -> std::option::Option<&crate::types::ServiceNowAuthenticationType> {
        self.authentication_type.as_ref()
    }
}
impl ServiceNowConfiguration {
    /// Creates a new builder-style object to manufacture [`ServiceNowConfiguration`](crate::types::ServiceNowConfiguration).
    pub fn builder() -> crate::types::builders::ServiceNowConfigurationBuilder {
        crate::types::builders::ServiceNowConfigurationBuilder::default()
    }
}

/// A builder for [`ServiceNowConfiguration`](crate::types::ServiceNowConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceNowConfigurationBuilder {
    pub(crate) host_url: std::option::Option<std::string::String>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) service_now_build_version:
        std::option::Option<crate::types::ServiceNowBuildVersionType>,
    pub(crate) knowledge_article_configuration:
        std::option::Option<crate::types::ServiceNowKnowledgeArticleConfiguration>,
    pub(crate) service_catalog_configuration:
        std::option::Option<crate::types::ServiceNowServiceCatalogConfiguration>,
    pub(crate) authentication_type: std::option::Option<crate::types::ServiceNowAuthenticationType>,
}
impl ServiceNowConfigurationBuilder {
    /// <p>The ServiceNow instance that the data source connects to. The host endpoint should look like the following: <i>{instance}.service-now.com.</i> </p>
    pub fn host_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.host_url = Some(input.into());
        self
    }
    /// <p>The ServiceNow instance that the data source connects to. The host endpoint should look like the following: <i>{instance}.service-now.com.</i> </p>
    pub fn set_host_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.host_url = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The identifier of the release that the ServiceNow host is running. If the host is not running the <code>LONDON</code> release, use <code>OTHERS</code>.</p>
    pub fn service_now_build_version(
        mut self,
        input: crate::types::ServiceNowBuildVersionType,
    ) -> Self {
        self.service_now_build_version = Some(input);
        self
    }
    /// <p>The identifier of the release that the ServiceNow host is running. If the host is not running the <code>LONDON</code> release, use <code>OTHERS</code>.</p>
    pub fn set_service_now_build_version(
        mut self,
        input: std::option::Option<crate::types::ServiceNowBuildVersionType>,
    ) -> Self {
        self.service_now_build_version = input;
        self
    }
    /// <p>Configuration information for crawling knowledge articles in the ServiceNow site.</p>
    pub fn knowledge_article_configuration(
        mut self,
        input: crate::types::ServiceNowKnowledgeArticleConfiguration,
    ) -> Self {
        self.knowledge_article_configuration = Some(input);
        self
    }
    /// <p>Configuration information for crawling knowledge articles in the ServiceNow site.</p>
    pub fn set_knowledge_article_configuration(
        mut self,
        input: std::option::Option<crate::types::ServiceNowKnowledgeArticleConfiguration>,
    ) -> Self {
        self.knowledge_article_configuration = input;
        self
    }
    /// <p>Configuration information for crawling service catalogs in the ServiceNow site.</p>
    pub fn service_catalog_configuration(
        mut self,
        input: crate::types::ServiceNowServiceCatalogConfiguration,
    ) -> Self {
        self.service_catalog_configuration = Some(input);
        self
    }
    /// <p>Configuration information for crawling service catalogs in the ServiceNow site.</p>
    pub fn set_service_catalog_configuration(
        mut self,
        input: std::option::Option<crate::types::ServiceNowServiceCatalogConfiguration>,
    ) -> Self {
        self.service_catalog_configuration = input;
        self
    }
    /// <p>The type of authentication used to connect to the ServiceNow instance. If you choose <code>HTTP_BASIC</code>, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the <code>SecretArn</code> field. If you choose <code>OAUTH2</code>, Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password.</p>
    /// <p>When you use <code>OAUTH2</code> authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn authentication_type(
        mut self,
        input: crate::types::ServiceNowAuthenticationType,
    ) -> Self {
        self.authentication_type = Some(input);
        self
    }
    /// <p>The type of authentication used to connect to the ServiceNow instance. If you choose <code>HTTP_BASIC</code>, Amazon Kendra is authenticated using the user name and password provided in the Secrets Manager secret in the <code>SecretArn</code> field. If you choose <code>OAUTH2</code>, Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password.</p>
    /// <p>When you use <code>OAUTH2</code> authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html">Using a ServiceNow data source</a>.</p>
    pub fn set_authentication_type(
        mut self,
        input: std::option::Option<crate::types::ServiceNowAuthenticationType>,
    ) -> Self {
        self.authentication_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceNowConfiguration`](crate::types::ServiceNowConfiguration).
    pub fn build(self) -> crate::types::ServiceNowConfiguration {
        crate::types::ServiceNowConfiguration {
            host_url: self.host_url,
            secret_arn: self.secret_arn,
            service_now_build_version: self.service_now_build_version,
            knowledge_article_configuration: self.knowledge_article_configuration,
            service_catalog_configuration: self.service_catalog_configuration,
            authentication_type: self.authentication_type,
        }
    }
}
