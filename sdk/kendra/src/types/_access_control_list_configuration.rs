// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Access Control List files for the documents in a data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessControlListConfiguration {
    /// <p>Path to the Amazon S3 bucket that contains the ACL files.</p>
    #[doc(hidden)]
    pub key_path: std::option::Option<std::string::String>,
}
impl AccessControlListConfiguration {
    /// <p>Path to the Amazon S3 bucket that contains the ACL files.</p>
    pub fn key_path(&self) -> std::option::Option<&str> {
        self.key_path.as_deref()
    }
}
impl AccessControlListConfiguration {
    /// Creates a new builder-style object to manufacture [`AccessControlListConfiguration`](crate::types::AccessControlListConfiguration).
    pub fn builder() -> crate::types::builders::AccessControlListConfigurationBuilder {
        crate::types::builders::AccessControlListConfigurationBuilder::default()
    }
}

/// A builder for [`AccessControlListConfiguration`](crate::types::AccessControlListConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccessControlListConfigurationBuilder {
    pub(crate) key_path: std::option::Option<std::string::String>,
}
impl AccessControlListConfigurationBuilder {
    /// <p>Path to the Amazon S3 bucket that contains the ACL files.</p>
    pub fn key_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_path = Some(input.into());
        self
    }
    /// <p>Path to the Amazon S3 bucket that contains the ACL files.</p>
    pub fn set_key_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_path = input;
        self
    }
    /// Consumes the builder and constructs a [`AccessControlListConfiguration`](crate::types::AccessControlListConfiguration).
    pub fn build(self) -> crate::types::AccessControlListConfiguration {
        crate::types::AccessControlListConfiguration {
            key_path: self.key_path,
        }
    }
}
