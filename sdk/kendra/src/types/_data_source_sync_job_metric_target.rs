// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Maps a particular data source sync job to a particular data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceSyncJobMetricTarget {
    /// <p>The ID of the data source that is running the sync job.</p>
    pub data_source_id: ::std::string::String,
    /// <p>The ID of the sync job that is running on the data source.</p>
    /// <p>If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job.</p>
    /// <p>If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.</p>
    pub data_source_sync_job_id: ::std::option::Option<::std::string::String>,
}
impl DataSourceSyncJobMetricTarget {
    /// <p>The ID of the data source that is running the sync job.</p>
    pub fn data_source_id(&self) -> &str {
        use std::ops::Deref;
        self.data_source_id.deref()
    }
    /// <p>The ID of the sync job that is running on the data source.</p>
    /// <p>If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job.</p>
    /// <p>If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.</p>
    pub fn data_source_sync_job_id(&self) -> ::std::option::Option<&str> {
        self.data_source_sync_job_id.as_deref()
    }
}
impl DataSourceSyncJobMetricTarget {
    /// Creates a new builder-style object to manufacture [`DataSourceSyncJobMetricTarget`](crate::types::DataSourceSyncJobMetricTarget).
    pub fn builder() -> crate::types::builders::DataSourceSyncJobMetricTargetBuilder {
        crate::types::builders::DataSourceSyncJobMetricTargetBuilder::default()
    }
}

/// A builder for [`DataSourceSyncJobMetricTarget`](crate::types::DataSourceSyncJobMetricTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSourceSyncJobMetricTargetBuilder {
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_sync_job_id: ::std::option::Option<::std::string::String>,
}
impl DataSourceSyncJobMetricTargetBuilder {
    /// <p>The ID of the data source that is running the sync job.</p>
    /// This field is required.
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data source that is running the sync job.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The ID of the data source that is running the sync job.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>The ID of the sync job that is running on the data source.</p>
    /// <p>If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job.</p>
    /// <p>If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.</p>
    pub fn data_source_sync_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_sync_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sync job that is running on the data source.</p>
    /// <p>If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job.</p>
    /// <p>If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.</p>
    pub fn set_data_source_sync_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_sync_job_id = input;
        self
    }
    /// <p>The ID of the sync job that is running on the data source.</p>
    /// <p>If the ID of a sync job is not provided and there is a sync job running, then the ID of this sync job is used and metrics are generated for this sync job.</p>
    /// <p>If the ID of a sync job is not provided and there is no sync job running, then no metrics are generated and documents are indexed/deleted at the index level without sync job metrics included.</p>
    pub fn get_data_source_sync_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_sync_job_id
    }
    /// Consumes the builder and constructs a [`DataSourceSyncJobMetricTarget`](crate::types::DataSourceSyncJobMetricTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`data_source_id`](crate::types::builders::DataSourceSyncJobMetricTargetBuilder::data_source_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DataSourceSyncJobMetricTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataSourceSyncJobMetricTarget {
            data_source_id: self.data_source_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_id",
                    "data_source_id was not specified but it is required when building DataSourceSyncJobMetricTarget",
                )
            })?,
            data_source_sync_job_id: self.data_source_sync_job_id,
        })
    }
}
