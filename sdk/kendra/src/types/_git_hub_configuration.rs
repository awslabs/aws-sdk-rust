// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to GitHub as your data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GitHubConfiguration {
    /// <p>Configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
    #[doc(hidden)]
    pub saa_s_configuration: std::option::Option<crate::types::SaaSConfiguration>,
    /// <p>Configuration information to connect to GitHub Enterprise Server (on premises).</p>
    #[doc(hidden)]
    pub on_premise_configuration: std::option::Option<crate::types::OnPremiseConfiguration>,
    /// <p>The type of GitHub service you want to connect to—GitHub Enterprise Cloud (SaaS) or GitHub Enterprise Server (on premises).</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your GitHub. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>personalToken—The access token created in GitHub. For more information on creating a token in GitHub, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html">Using a GitHub data source</a>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p> <code>TRUE</code> to use the GitHub change log to determine which documents require updating in the index. Depending on the GitHub change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in GitHub.</p>
    #[doc(hidden)]
    pub use_change_log: bool,
    /// <p>Configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.</p>
    #[doc(hidden)]
    pub git_hub_document_crawl_properties:
        std::option::Option<crate::types::GitHubDocumentCrawlProperties>,
    /// <p>A list of names of the specific repositories you want to index.</p>
    #[doc(hidden)]
    pub repository_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to include certain folder names in your GitHub repository or repositories. Folder names that match the patterns are included in the index. Folder names that don't match the patterns are excluded from the index. If a folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    #[doc(hidden)]
    pub inclusion_folder_name_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to include certain file types in your GitHub repository or repositories. File types that match the patterns are included in the index. File types that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    #[doc(hidden)]
    pub inclusion_file_type_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to include certain file names in your GitHub repository or repositories. File names that match the patterns are included in the index. File names that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    #[doc(hidden)]
    pub inclusion_file_name_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to exclude certain folder names in your GitHub repository or repositories. Folder names that match the patterns are excluded from the index. Folder names that don't match the patterns are included in the index. If a folder matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    #[doc(hidden)]
    pub exclusion_folder_name_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to exclude certain file types in your GitHub repository or repositories. File types that match the patterns are excluded from the index. File types that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    #[doc(hidden)]
    pub exclusion_file_type_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to exclude certain file names in your GitHub repository or repositories. File names that match the patterns are excluded from the index. File names that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    #[doc(hidden)]
    pub exclusion_file_name_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Configuration information of an Amazon Virtual Private Cloud to connect to your GitHub. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    #[doc(hidden)]
    pub vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map GitHub repository attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_repository_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub commits to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_commit_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issues to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_issue_document_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_issue_comment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_issue_attachment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_pull_request_comment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull requests to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_pull_request_document_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    #[doc(hidden)]
    pub git_hub_pull_request_document_attachment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
}
impl GitHubConfiguration {
    /// <p>Configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
    pub fn saa_s_configuration(&self) -> std::option::Option<&crate::types::SaaSConfiguration> {
        self.saa_s_configuration.as_ref()
    }
    /// <p>Configuration information to connect to GitHub Enterprise Server (on premises).</p>
    pub fn on_premise_configuration(
        &self,
    ) -> std::option::Option<&crate::types::OnPremiseConfiguration> {
        self.on_premise_configuration.as_ref()
    }
    /// <p>The type of GitHub service you want to connect to—GitHub Enterprise Cloud (SaaS) or GitHub Enterprise Server (on premises).</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your GitHub. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>personalToken—The access token created in GitHub. For more information on creating a token in GitHub, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html">Using a GitHub data source</a>.</p> </li>
    /// </ul>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p> <code>TRUE</code> to use the GitHub change log to determine which documents require updating in the index. Depending on the GitHub change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in GitHub.</p>
    pub fn use_change_log(&self) -> bool {
        self.use_change_log
    }
    /// <p>Configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.</p>
    pub fn git_hub_document_crawl_properties(
        &self,
    ) -> std::option::Option<&crate::types::GitHubDocumentCrawlProperties> {
        self.git_hub_document_crawl_properties.as_ref()
    }
    /// <p>A list of names of the specific repositories you want to index.</p>
    pub fn repository_filter(&self) -> std::option::Option<&[std::string::String]> {
        self.repository_filter.as_deref()
    }
    /// <p>A list of regular expression patterns to include certain folder names in your GitHub repository or repositories. Folder names that match the patterns are included in the index. Folder names that don't match the patterns are excluded from the index. If a folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn inclusion_folder_name_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.inclusion_folder_name_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to include certain file types in your GitHub repository or repositories. File types that match the patterns are included in the index. File types that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn inclusion_file_type_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.inclusion_file_type_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to include certain file names in your GitHub repository or repositories. File names that match the patterns are included in the index. File names that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn inclusion_file_name_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.inclusion_file_name_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to exclude certain folder names in your GitHub repository or repositories. Folder names that match the patterns are excluded from the index. Folder names that don't match the patterns are included in the index. If a folder matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn exclusion_folder_name_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_folder_name_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to exclude certain file types in your GitHub repository or repositories. File types that match the patterns are excluded from the index. File types that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn exclusion_file_type_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_file_type_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to exclude certain file names in your GitHub repository or repositories. File names that match the patterns are excluded from the index. File names that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn exclusion_file_name_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_file_name_patterns.as_deref()
    }
    /// <p>Configuration information of an Amazon Virtual Private Cloud to connect to your GitHub. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn vpc_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DataSourceVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map GitHub repository attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_repository_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_repository_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub commits to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_commit_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_commit_configuration_field_mappings.as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issues to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_document_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_issue_document_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_comment_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_issue_comment_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_attachment_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_issue_attachment_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_comment_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_pull_request_comment_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull requests to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_document_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_pull_request_document_configuration_field_mappings
            .as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_document_attachment_configuration_field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.git_hub_pull_request_document_attachment_configuration_field_mappings
            .as_deref()
    }
}
impl GitHubConfiguration {
    /// Creates a new builder-style object to manufacture [`GitHubConfiguration`](crate::types::GitHubConfiguration).
    pub fn builder() -> crate::types::builders::GitHubConfigurationBuilder {
        crate::types::builders::GitHubConfigurationBuilder::default()
    }
}

/// A builder for [`GitHubConfiguration`](crate::types::GitHubConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GitHubConfigurationBuilder {
    pub(crate) saa_s_configuration: std::option::Option<crate::types::SaaSConfiguration>,
    pub(crate) on_premise_configuration: std::option::Option<crate::types::OnPremiseConfiguration>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) use_change_log: std::option::Option<bool>,
    pub(crate) git_hub_document_crawl_properties:
        std::option::Option<crate::types::GitHubDocumentCrawlProperties>,
    pub(crate) repository_filter: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) inclusion_folder_name_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) inclusion_file_type_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) inclusion_file_name_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) exclusion_folder_name_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) exclusion_file_type_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) exclusion_file_name_patterns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) vpc_configuration: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    pub(crate) git_hub_repository_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_commit_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_issue_document_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_issue_comment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_issue_attachment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_pull_request_comment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_pull_request_document_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) git_hub_pull_request_document_attachment_configuration_field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
}
impl GitHubConfigurationBuilder {
    /// <p>Configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
    pub fn saa_s_configuration(mut self, input: crate::types::SaaSConfiguration) -> Self {
        self.saa_s_configuration = Some(input);
        self
    }
    /// <p>Configuration information to connect to GitHub Enterprise Cloud (SaaS).</p>
    pub fn set_saa_s_configuration(
        mut self,
        input: std::option::Option<crate::types::SaaSConfiguration>,
    ) -> Self {
        self.saa_s_configuration = input;
        self
    }
    /// <p>Configuration information to connect to GitHub Enterprise Server (on premises).</p>
    pub fn on_premise_configuration(mut self, input: crate::types::OnPremiseConfiguration) -> Self {
        self.on_premise_configuration = Some(input);
        self
    }
    /// <p>Configuration information to connect to GitHub Enterprise Server (on premises).</p>
    pub fn set_on_premise_configuration(
        mut self,
        input: std::option::Option<crate::types::OnPremiseConfiguration>,
    ) -> Self {
        self.on_premise_configuration = input;
        self
    }
    /// <p>The type of GitHub service you want to connect to—GitHub Enterprise Cloud (SaaS) or GitHub Enterprise Server (on premises).</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of GitHub service you want to connect to—GitHub Enterprise Cloud (SaaS) or GitHub Enterprise Server (on premises).</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your GitHub. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>personalToken—The access token created in GitHub. For more information on creating a token in GitHub, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html">Using a GitHub data source</a>.</p> </li>
    /// </ul>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Manager secret that contains the key-value pairs required to connect to your GitHub. The secret must contain a JSON structure with the following keys:</p>
    /// <ul>
    /// <li> <p>personalToken—The access token created in GitHub. For more information on creating a token in GitHub, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-github.html">Using a GitHub data source</a>.</p> </li>
    /// </ul>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p> <code>TRUE</code> to use the GitHub change log to determine which documents require updating in the index. Depending on the GitHub change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in GitHub.</p>
    pub fn use_change_log(mut self, input: bool) -> Self {
        self.use_change_log = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to use the GitHub change log to determine which documents require updating in the index. Depending on the GitHub change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in GitHub.</p>
    pub fn set_use_change_log(mut self, input: std::option::Option<bool>) -> Self {
        self.use_change_log = input;
        self
    }
    /// <p>Configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.</p>
    pub fn git_hub_document_crawl_properties(
        mut self,
        input: crate::types::GitHubDocumentCrawlProperties,
    ) -> Self {
        self.git_hub_document_crawl_properties = Some(input);
        self
    }
    /// <p>Configuration information to include certain types of GitHub content. You can configure to index repository files only, or also include issues and pull requests, comments, and comment attachments.</p>
    pub fn set_git_hub_document_crawl_properties(
        mut self,
        input: std::option::Option<crate::types::GitHubDocumentCrawlProperties>,
    ) -> Self {
        self.git_hub_document_crawl_properties = input;
        self
    }
    /// Appends an item to `repository_filter`.
    ///
    /// To override the contents of this collection use [`set_repository_filter`](Self::set_repository_filter).
    ///
    /// <p>A list of names of the specific repositories you want to index.</p>
    pub fn repository_filter(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.repository_filter.unwrap_or_default();
        v.push(input.into());
        self.repository_filter = Some(v);
        self
    }
    /// <p>A list of names of the specific repositories you want to index.</p>
    pub fn set_repository_filter(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.repository_filter = input;
        self
    }
    /// Appends an item to `inclusion_folder_name_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_folder_name_patterns`](Self::set_inclusion_folder_name_patterns).
    ///
    /// <p>A list of regular expression patterns to include certain folder names in your GitHub repository or repositories. Folder names that match the patterns are included in the index. Folder names that don't match the patterns are excluded from the index. If a folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn inclusion_folder_name_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inclusion_folder_name_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_folder_name_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to include certain folder names in your GitHub repository or repositories. Folder names that match the patterns are included in the index. Folder names that don't match the patterns are excluded from the index. If a folder matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn set_inclusion_folder_name_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inclusion_folder_name_patterns = input;
        self
    }
    /// Appends an item to `inclusion_file_type_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_file_type_patterns`](Self::set_inclusion_file_type_patterns).
    ///
    /// <p>A list of regular expression patterns to include certain file types in your GitHub repository or repositories. File types that match the patterns are included in the index. File types that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn inclusion_file_type_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inclusion_file_type_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_file_type_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to include certain file types in your GitHub repository or repositories. File types that match the patterns are included in the index. File types that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn set_inclusion_file_type_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inclusion_file_type_patterns = input;
        self
    }
    /// Appends an item to `inclusion_file_name_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_file_name_patterns`](Self::set_inclusion_file_name_patterns).
    ///
    /// <p>A list of regular expression patterns to include certain file names in your GitHub repository or repositories. File names that match the patterns are included in the index. File names that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn inclusion_file_name_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inclusion_file_name_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_file_name_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to include certain file names in your GitHub repository or repositories. File names that match the patterns are included in the index. File names that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn set_inclusion_file_name_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inclusion_file_name_patterns = input;
        self
    }
    /// Appends an item to `exclusion_folder_name_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_folder_name_patterns`](Self::set_exclusion_folder_name_patterns).
    ///
    /// <p>A list of regular expression patterns to exclude certain folder names in your GitHub repository or repositories. Folder names that match the patterns are excluded from the index. Folder names that don't match the patterns are included in the index. If a folder matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn exclusion_folder_name_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.exclusion_folder_name_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_folder_name_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to exclude certain folder names in your GitHub repository or repositories. Folder names that match the patterns are excluded from the index. Folder names that don't match the patterns are included in the index. If a folder matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the folder isn't included in the index.</p>
    pub fn set_exclusion_folder_name_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclusion_folder_name_patterns = input;
        self
    }
    /// Appends an item to `exclusion_file_type_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_file_type_patterns`](Self::set_exclusion_file_type_patterns).
    ///
    /// <p>A list of regular expression patterns to exclude certain file types in your GitHub repository or repositories. File types that match the patterns are excluded from the index. File types that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn exclusion_file_type_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.exclusion_file_type_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_file_type_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to exclude certain file types in your GitHub repository or repositories. File types that match the patterns are excluded from the index. File types that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn set_exclusion_file_type_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclusion_file_type_patterns = input;
        self
    }
    /// Appends an item to `exclusion_file_name_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_file_name_patterns`](Self::set_exclusion_file_name_patterns).
    ///
    /// <p>A list of regular expression patterns to exclude certain file names in your GitHub repository or repositories. File names that match the patterns are excluded from the index. File names that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn exclusion_file_name_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.exclusion_file_name_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_file_name_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to exclude certain file names in your GitHub repository or repositories. File names that match the patterns are excluded from the index. File names that don't match the patterns are included in the index. If a file matches both an exclusion and inclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.</p>
    pub fn set_exclusion_file_name_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclusion_file_name_patterns = input;
        self
    }
    /// <p>Configuration information of an Amazon Virtual Private Cloud to connect to your GitHub. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn vpc_configuration(mut self, input: crate::types::DataSourceVpcConfiguration) -> Self {
        self.vpc_configuration = Some(input);
        self
    }
    /// <p>Configuration information of an Amazon Virtual Private Cloud to connect to your GitHub. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html">Configuring a VPC</a>.</p>
    pub fn set_vpc_configuration(
        mut self,
        input: std::option::Option<crate::types::DataSourceVpcConfiguration>,
    ) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// Appends an item to `git_hub_repository_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_repository_configuration_field_mappings`](Self::set_git_hub_repository_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map GitHub repository attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_repository_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_repository_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_repository_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map GitHub repository attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_repository_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_repository_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_commit_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_commit_configuration_field_mappings`](Self::set_git_hub_commit_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub commits to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_commit_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_commit_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_commit_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub commits to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_commit_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_commit_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_issue_document_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_issue_document_configuration_field_mappings`](Self::set_git_hub_issue_document_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issues to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_document_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_issue_document_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_issue_document_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issues to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_issue_document_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_issue_document_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_issue_comment_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_issue_comment_configuration_field_mappings`](Self::set_git_hub_issue_comment_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_comment_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_issue_comment_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_issue_comment_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_issue_comment_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_issue_comment_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_issue_attachment_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_issue_attachment_configuration_field_mappings`](Self::set_git_hub_issue_attachment_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_issue_attachment_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_issue_attachment_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_issue_attachment_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub issue attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_issue_attachment_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_issue_attachment_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_pull_request_comment_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_pull_request_comment_configuration_field_mappings`](Self::set_git_hub_pull_request_comment_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_comment_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_pull_request_comment_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_pull_request_comment_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request comments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_pull_request_comment_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_pull_request_comment_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_pull_request_document_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_pull_request_document_configuration_field_mappings`](Self::set_git_hub_pull_request_document_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull requests to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_document_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_pull_request_document_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_pull_request_document_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull requests to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_pull_request_document_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_pull_request_document_configuration_field_mappings = input;
        self
    }
    /// Appends an item to `git_hub_pull_request_document_attachment_configuration_field_mappings`.
    ///
    /// To override the contents of this collection use [`set_git_hub_pull_request_document_attachment_configuration_field_mappings`](Self::set_git_hub_pull_request_document_attachment_configuration_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn git_hub_pull_request_document_attachment_configuration_field_mappings(
        mut self,
        input: crate::types::DataSourceToIndexFieldMapping,
    ) -> Self {
        let mut v = self
            .git_hub_pull_request_document_attachment_configuration_field_mappings
            .unwrap_or_default();
        v.push(input);
        self.git_hub_pull_request_document_attachment_configuration_field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map attributes or field names of GitHub pull request attachments to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to GitHub fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The GitHub data source field names must exist in your GitHub custom metadata.</p>
    pub fn set_git_hub_pull_request_document_attachment_configuration_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.git_hub_pull_request_document_attachment_configuration_field_mappings = input;
        self
    }
    /// Consumes the builder and constructs a [`GitHubConfiguration`](crate::types::GitHubConfiguration).
    pub fn build(self) -> crate::types::GitHubConfiguration {
        crate::types::GitHubConfiguration {
            saa_s_configuration: self.saa_s_configuration,
            on_premise_configuration: self.on_premise_configuration,
            r#type: self.r#type,
            secret_arn: self.secret_arn,
            use_change_log: self.use_change_log.unwrap_or_default(),
            git_hub_document_crawl_properties: self.git_hub_document_crawl_properties,
            repository_filter: self.repository_filter,
            inclusion_folder_name_patterns: self.inclusion_folder_name_patterns,
            inclusion_file_type_patterns: self.inclusion_file_type_patterns,
            inclusion_file_name_patterns: self.inclusion_file_name_patterns,
            exclusion_folder_name_patterns: self.exclusion_folder_name_patterns,
            exclusion_file_type_patterns: self.exclusion_file_type_patterns,
            exclusion_file_name_patterns: self.exclusion_file_name_patterns,
            vpc_configuration: self.vpc_configuration,
            git_hub_repository_configuration_field_mappings: self
                .git_hub_repository_configuration_field_mappings,
            git_hub_commit_configuration_field_mappings: self
                .git_hub_commit_configuration_field_mappings,
            git_hub_issue_document_configuration_field_mappings: self
                .git_hub_issue_document_configuration_field_mappings,
            git_hub_issue_comment_configuration_field_mappings: self
                .git_hub_issue_comment_configuration_field_mappings,
            git_hub_issue_attachment_configuration_field_mappings: self
                .git_hub_issue_attachment_configuration_field_mappings,
            git_hub_pull_request_comment_configuration_field_mappings: self
                .git_hub_pull_request_comment_configuration_field_mappings,
            git_hub_pull_request_document_configuration_field_mappings: self
                .git_hub_pull_request_document_configuration_field_mappings,
            git_hub_pull_request_document_attachment_configuration_field_mappings: self
                .git_hub_pull_request_document_attachment_configuration_field_mappings,
        }
    }
}
