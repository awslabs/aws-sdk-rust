// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single query result.</p>
/// <p>A query result contains information about a document returned by the query. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryResultItem {
    /// <p>The identifier for the query result.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of document within the response. For example, a response could include a question-answer that's relevant to the query.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::QueryResultType>,
    /// <p>If the <code>Type</code> of document within the response is <code>ANSWER</code>, then it is either a <code>TABLE</code> answer or <code>TEXT</code> answer. If it's a table answer, a table excerpt is returned in <code>TableExcerpt</code>. If it's a text answer, a text excerpt is returned in <code>DocumentExcerpt</code>.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::QueryResultFormat>,
    /// <p>One or more additional attributes associated with the query result.</p>
    #[doc(hidden)]
    pub additional_attributes:
        std::option::Option<std::vec::Vec<crate::types::AdditionalResultAttribute>>,
    /// <p>The identifier for the document.</p>
    #[doc(hidden)]
    pub document_id: std::option::Option<std::string::String>,
    /// <p>The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.</p>
    #[doc(hidden)]
    pub document_title: std::option::Option<crate::types::TextWithHighlights>,
    /// <p>An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.</p>
    #[doc(hidden)]
    pub document_excerpt: std::option::Option<crate::types::TextWithHighlights>,
    /// <p>The URI of the original location of the document.</p>
    #[doc(hidden)]
    pub document_uri: std::option::Option<std::string::String>,
    /// <p>An array of document attributes assigned to a document in the search results. For example, the document author (<code>_author</code>) or the source URI (<code>_source_uri</code>) of the document.</p>
    #[doc(hidden)]
    pub document_attributes: std::option::Option<std::vec::Vec<crate::types::DocumentAttribute>>,
    /// <p>Indicates the confidence that Amazon Kendra has that a result matches the query that you provided. Each result is placed into a bin that indicates the confidence, <code>VERY_HIGH</code>, <code>HIGH</code>, <code>MEDIUM</code> and <code>LOW</code>. You can use the score to determine if a response meets the confidence needed for your application.</p>
    /// <p>The field is only set to <code>LOW</code> when the <code>Type</code> field is set to <code>DOCUMENT</code> and Amazon Kendra is not confident that the result matches the query.</p>
    #[doc(hidden)]
    pub score_attributes: std::option::Option<crate::types::ScoreAttributes>,
    /// <p>A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html">Submitting feedback </a>.</p>
    #[doc(hidden)]
    pub feedback_token: std::option::Option<std::string::String>,
    /// <p>An excerpt from a table within a document.</p>
    #[doc(hidden)]
    pub table_excerpt: std::option::Option<crate::types::TableExcerpt>,
}
impl QueryResultItem {
    /// <p>The identifier for the query result.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of document within the response. For example, a response could include a question-answer that's relevant to the query.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::QueryResultType> {
        self.r#type.as_ref()
    }
    /// <p>If the <code>Type</code> of document within the response is <code>ANSWER</code>, then it is either a <code>TABLE</code> answer or <code>TEXT</code> answer. If it's a table answer, a table excerpt is returned in <code>TableExcerpt</code>. If it's a text answer, a text excerpt is returned in <code>DocumentExcerpt</code>.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::QueryResultFormat> {
        self.format.as_ref()
    }
    /// <p>One or more additional attributes associated with the query result.</p>
    pub fn additional_attributes(
        &self,
    ) -> std::option::Option<&[crate::types::AdditionalResultAttribute]> {
        self.additional_attributes.as_deref()
    }
    /// <p>The identifier for the document.</p>
    pub fn document_id(&self) -> std::option::Option<&str> {
        self.document_id.as_deref()
    }
    /// <p>The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.</p>
    pub fn document_title(&self) -> std::option::Option<&crate::types::TextWithHighlights> {
        self.document_title.as_ref()
    }
    /// <p>An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.</p>
    pub fn document_excerpt(&self) -> std::option::Option<&crate::types::TextWithHighlights> {
        self.document_excerpt.as_ref()
    }
    /// <p>The URI of the original location of the document.</p>
    pub fn document_uri(&self) -> std::option::Option<&str> {
        self.document_uri.as_deref()
    }
    /// <p>An array of document attributes assigned to a document in the search results. For example, the document author (<code>_author</code>) or the source URI (<code>_source_uri</code>) of the document.</p>
    pub fn document_attributes(&self) -> std::option::Option<&[crate::types::DocumentAttribute]> {
        self.document_attributes.as_deref()
    }
    /// <p>Indicates the confidence that Amazon Kendra has that a result matches the query that you provided. Each result is placed into a bin that indicates the confidence, <code>VERY_HIGH</code>, <code>HIGH</code>, <code>MEDIUM</code> and <code>LOW</code>. You can use the score to determine if a response meets the confidence needed for your application.</p>
    /// <p>The field is only set to <code>LOW</code> when the <code>Type</code> field is set to <code>DOCUMENT</code> and Amazon Kendra is not confident that the result matches the query.</p>
    pub fn score_attributes(&self) -> std::option::Option<&crate::types::ScoreAttributes> {
        self.score_attributes.as_ref()
    }
    /// <p>A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html">Submitting feedback </a>.</p>
    pub fn feedback_token(&self) -> std::option::Option<&str> {
        self.feedback_token.as_deref()
    }
    /// <p>An excerpt from a table within a document.</p>
    pub fn table_excerpt(&self) -> std::option::Option<&crate::types::TableExcerpt> {
        self.table_excerpt.as_ref()
    }
}
impl QueryResultItem {
    /// Creates a new builder-style object to manufacture [`QueryResultItem`](crate::types::QueryResultItem).
    pub fn builder() -> crate::types::builders::QueryResultItemBuilder {
        crate::types::builders::QueryResultItemBuilder::default()
    }
}

/// A builder for [`QueryResultItem`](crate::types::QueryResultItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryResultItemBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::QueryResultType>,
    pub(crate) format: std::option::Option<crate::types::QueryResultFormat>,
    pub(crate) additional_attributes:
        std::option::Option<std::vec::Vec<crate::types::AdditionalResultAttribute>>,
    pub(crate) document_id: std::option::Option<std::string::String>,
    pub(crate) document_title: std::option::Option<crate::types::TextWithHighlights>,
    pub(crate) document_excerpt: std::option::Option<crate::types::TextWithHighlights>,
    pub(crate) document_uri: std::option::Option<std::string::String>,
    pub(crate) document_attributes:
        std::option::Option<std::vec::Vec<crate::types::DocumentAttribute>>,
    pub(crate) score_attributes: std::option::Option<crate::types::ScoreAttributes>,
    pub(crate) feedback_token: std::option::Option<std::string::String>,
    pub(crate) table_excerpt: std::option::Option<crate::types::TableExcerpt>,
}
impl QueryResultItemBuilder {
    /// <p>The identifier for the query result.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier for the query result.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of document within the response. For example, a response could include a question-answer that's relevant to the query.</p>
    pub fn r#type(mut self, input: crate::types::QueryResultType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of document within the response. For example, a response could include a question-answer that's relevant to the query.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::QueryResultType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>If the <code>Type</code> of document within the response is <code>ANSWER</code>, then it is either a <code>TABLE</code> answer or <code>TEXT</code> answer. If it's a table answer, a table excerpt is returned in <code>TableExcerpt</code>. If it's a text answer, a text excerpt is returned in <code>DocumentExcerpt</code>.</p>
    pub fn format(mut self, input: crate::types::QueryResultFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>If the <code>Type</code> of document within the response is <code>ANSWER</code>, then it is either a <code>TABLE</code> answer or <code>TEXT</code> answer. If it's a table answer, a table excerpt is returned in <code>TableExcerpt</code>. If it's a text answer, a text excerpt is returned in <code>DocumentExcerpt</code>.</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::QueryResultFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// Appends an item to `additional_attributes`.
    ///
    /// To override the contents of this collection use [`set_additional_attributes`](Self::set_additional_attributes).
    ///
    /// <p>One or more additional attributes associated with the query result.</p>
    pub fn additional_attributes(mut self, input: crate::types::AdditionalResultAttribute) -> Self {
        let mut v = self.additional_attributes.unwrap_or_default();
        v.push(input);
        self.additional_attributes = Some(v);
        self
    }
    /// <p>One or more additional attributes associated with the query result.</p>
    pub fn set_additional_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdditionalResultAttribute>>,
    ) -> Self {
        self.additional_attributes = input;
        self
    }
    /// <p>The identifier for the document.</p>
    pub fn document_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_id = Some(input.into());
        self
    }
    /// <p>The identifier for the document.</p>
    pub fn set_document_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_id = input;
        self
    }
    /// <p>The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.</p>
    pub fn document_title(mut self, input: crate::types::TextWithHighlights) -> Self {
        self.document_title = Some(input);
        self
    }
    /// <p>The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.</p>
    pub fn set_document_title(
        mut self,
        input: std::option::Option<crate::types::TextWithHighlights>,
    ) -> Self {
        self.document_title = input;
        self
    }
    /// <p>An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.</p>
    pub fn document_excerpt(mut self, input: crate::types::TextWithHighlights) -> Self {
        self.document_excerpt = Some(input);
        self
    }
    /// <p>An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.</p>
    pub fn set_document_excerpt(
        mut self,
        input: std::option::Option<crate::types::TextWithHighlights>,
    ) -> Self {
        self.document_excerpt = input;
        self
    }
    /// <p>The URI of the original location of the document.</p>
    pub fn document_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_uri = Some(input.into());
        self
    }
    /// <p>The URI of the original location of the document.</p>
    pub fn set_document_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_uri = input;
        self
    }
    /// Appends an item to `document_attributes`.
    ///
    /// To override the contents of this collection use [`set_document_attributes`](Self::set_document_attributes).
    ///
    /// <p>An array of document attributes assigned to a document in the search results. For example, the document author (<code>_author</code>) or the source URI (<code>_source_uri</code>) of the document.</p>
    pub fn document_attributes(mut self, input: crate::types::DocumentAttribute) -> Self {
        let mut v = self.document_attributes.unwrap_or_default();
        v.push(input);
        self.document_attributes = Some(v);
        self
    }
    /// <p>An array of document attributes assigned to a document in the search results. For example, the document author (<code>_author</code>) or the source URI (<code>_source_uri</code>) of the document.</p>
    pub fn set_document_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentAttribute>>,
    ) -> Self {
        self.document_attributes = input;
        self
    }
    /// <p>Indicates the confidence that Amazon Kendra has that a result matches the query that you provided. Each result is placed into a bin that indicates the confidence, <code>VERY_HIGH</code>, <code>HIGH</code>, <code>MEDIUM</code> and <code>LOW</code>. You can use the score to determine if a response meets the confidence needed for your application.</p>
    /// <p>The field is only set to <code>LOW</code> when the <code>Type</code> field is set to <code>DOCUMENT</code> and Amazon Kendra is not confident that the result matches the query.</p>
    pub fn score_attributes(mut self, input: crate::types::ScoreAttributes) -> Self {
        self.score_attributes = Some(input);
        self
    }
    /// <p>Indicates the confidence that Amazon Kendra has that a result matches the query that you provided. Each result is placed into a bin that indicates the confidence, <code>VERY_HIGH</code>, <code>HIGH</code>, <code>MEDIUM</code> and <code>LOW</code>. You can use the score to determine if a response meets the confidence needed for your application.</p>
    /// <p>The field is only set to <code>LOW</code> when the <code>Type</code> field is set to <code>DOCUMENT</code> and Amazon Kendra is not confident that the result matches the query.</p>
    pub fn set_score_attributes(
        mut self,
        input: std::option::Option<crate::types::ScoreAttributes>,
    ) -> Self {
        self.score_attributes = input;
        self
    }
    /// <p>A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html">Submitting feedback </a>.</p>
    pub fn feedback_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.feedback_token = Some(input.into());
        self
    }
    /// <p>A token that identifies a particular result from a particular query. Use this token to provide click-through feedback for the result. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/submitting-feedback.html">Submitting feedback </a>.</p>
    pub fn set_feedback_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feedback_token = input;
        self
    }
    /// <p>An excerpt from a table within a document.</p>
    pub fn table_excerpt(mut self, input: crate::types::TableExcerpt) -> Self {
        self.table_excerpt = Some(input);
        self
    }
    /// <p>An excerpt from a table within a document.</p>
    pub fn set_table_excerpt(
        mut self,
        input: std::option::Option<crate::types::TableExcerpt>,
    ) -> Self {
        self.table_excerpt = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryResultItem`](crate::types::QueryResultItem).
    pub fn build(self) -> crate::types::QueryResultItem {
        crate::types::QueryResultItem {
            id: self.id,
            r#type: self.r#type,
            format: self.format,
            additional_attributes: self.additional_attributes,
            document_id: self.document_id,
            document_title: self.document_title,
            document_excerpt: self.document_excerpt,
            document_uri: self.document_uri,
            document_attributes: self.document_attributes,
            score_attributes: self.score_attributes,
            feedback_token: self.feedback_token,
            table_excerpt: self.table_excerpt,
        }
    }
}
