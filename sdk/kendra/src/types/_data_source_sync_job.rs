// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a data source synchronization job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSourceSyncJob {
    /// <p>A identifier for the synchronization job.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The UNIX datetime that the synchronization job started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The UNIX datetime that the synchronization job completed.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The execution status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is set to <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DataSourceSyncJobStatus>,
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::ErrorCode>,
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    #[doc(hidden)]
    pub data_source_error_code: std::option::Option<std::string::String>,
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<crate::types::DataSourceSyncJobMetrics>,
}
impl DataSourceSyncJob {
    /// <p>A identifier for the synchronization job.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The UNIX datetime that the synchronization job started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The UNIX datetime that the synchronization job completed.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The execution status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is set to <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DataSourceSyncJobStatus> {
        self.status.as_ref()
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::ErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn data_source_error_code(&self) -> std::option::Option<&str> {
        self.data_source_error_code.as_deref()
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn metrics(&self) -> std::option::Option<&crate::types::DataSourceSyncJobMetrics> {
        self.metrics.as_ref()
    }
}
impl DataSourceSyncJob {
    /// Creates a new builder-style object to manufacture [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
    pub fn builder() -> crate::types::builders::DataSourceSyncJobBuilder {
        crate::types::builders::DataSourceSyncJobBuilder::default()
    }
}

/// A builder for [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSourceSyncJobBuilder {
    pub(crate) execution_id: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::DataSourceSyncJobStatus>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<crate::types::ErrorCode>,
    pub(crate) data_source_error_code: std::option::Option<std::string::String>,
    pub(crate) metrics: std::option::Option<crate::types::DataSourceSyncJobMetrics>,
}
impl DataSourceSyncJobBuilder {
    /// <p>A identifier for the synchronization job.</p>
    pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_id = Some(input.into());
        self
    }
    /// <p>A identifier for the synchronization job.</p>
    pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The UNIX datetime that the synchronization job started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The UNIX datetime that the synchronization job started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The UNIX datetime that the synchronization job completed.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The UNIX datetime that the synchronization job completed.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The execution status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is set to <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn status(mut self, input: crate::types::DataSourceSyncJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The execution status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is set to <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DataSourceSyncJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn set_error_code(mut self, input: std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn data_source_error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_error_code = Some(input.into());
        self
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn set_data_source_error_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.data_source_error_code = input;
        self
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn metrics(mut self, input: crate::types::DataSourceSyncJobMetrics) -> Self {
        self.metrics = Some(input);
        self
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<crate::types::DataSourceSyncJobMetrics>,
    ) -> Self {
        self.metrics = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
    pub fn build(self) -> crate::types::DataSourceSyncJob {
        crate::types::DataSourceSyncJob {
            execution_id: self.execution_id,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            error_message: self.error_message,
            error_code: self.error_code,
            data_source_error_code: self.data_source_error_code,
            metrics: self.metrics,
        }
    }
}
