// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to OneDrive as your data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OneDriveConfiguration {
    /// <p>The Azure Active Directory domain of the organization. </p>
    #[doc(hidden)]
    pub tenant_domain: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.</p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p>A list of user accounts whose documents should be indexed.</p>
    #[doc(hidden)]
    pub one_drive_users: std::option::Option<crate::types::OneDriveUsers>,
    /// <p>A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    #[doc(hidden)]
    pub inclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    #[doc(hidden)]
    pub exclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to OneDrive fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The OneDrive data source field names must exist in your OneDrive custom metadata.</p>
    #[doc(hidden)]
    pub field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    /// <p> <code>TRUE</code> to disable local groups information.</p>
    #[doc(hidden)]
    pub disable_local_groups: bool,
}
impl OneDriveConfiguration {
    /// <p>The Azure Active Directory domain of the organization. </p>
    pub fn tenant_domain(&self) -> std::option::Option<&str> {
        self.tenant_domain.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.</p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>A list of user accounts whose documents should be indexed.</p>
    pub fn one_drive_users(&self) -> std::option::Option<&crate::types::OneDriveUsers> {
        self.one_drive_users.as_ref()
    }
    /// <p>A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn inclusion_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.inclusion_patterns.as_deref()
    }
    /// <p>A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn exclusion_patterns(&self) -> std::option::Option<&[std::string::String]> {
        self.exclusion_patterns.as_deref()
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to OneDrive fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The OneDrive data source field names must exist in your OneDrive custom metadata.</p>
    pub fn field_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::DataSourceToIndexFieldMapping]> {
        self.field_mappings.as_deref()
    }
    /// <p> <code>TRUE</code> to disable local groups information.</p>
    pub fn disable_local_groups(&self) -> bool {
        self.disable_local_groups
    }
}
impl OneDriveConfiguration {
    /// Creates a new builder-style object to manufacture [`OneDriveConfiguration`](crate::types::OneDriveConfiguration).
    pub fn builder() -> crate::types::builders::OneDriveConfigurationBuilder {
        crate::types::builders::OneDriveConfigurationBuilder::default()
    }
}

/// A builder for [`OneDriveConfiguration`](crate::types::OneDriveConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OneDriveConfigurationBuilder {
    pub(crate) tenant_domain: std::option::Option<std::string::String>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) one_drive_users: std::option::Option<crate::types::OneDriveUsers>,
    pub(crate) inclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) exclusion_patterns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) field_mappings:
        std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    pub(crate) disable_local_groups: std::option::Option<bool>,
}
impl OneDriveConfigurationBuilder {
    /// <p>The Azure Active Directory domain of the organization. </p>
    pub fn tenant_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.tenant_domain = Some(input.into());
        self
    }
    /// <p>The Azure Active Directory domain of the organization. </p>
    pub fn set_tenant_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tenant_domain = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.</p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Secrets Managersecret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.</p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>A list of user accounts whose documents should be indexed.</p>
    pub fn one_drive_users(mut self, input: crate::types::OneDriveUsers) -> Self {
        self.one_drive_users = Some(input);
        self
    }
    /// <p>A list of user accounts whose documents should be indexed.</p>
    pub fn set_one_drive_users(
        mut self,
        input: std::option::Option<crate::types::OneDriveUsers>,
    ) -> Self {
        self.one_drive_users = input;
        self
    }
    /// Appends an item to `inclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_patterns`](Self::set_inclusion_patterns).
    ///
    /// <p>A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn inclusion_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn set_inclusion_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inclusion_patterns = input;
        self
    }
    /// Appends an item to `exclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_patterns`](Self::set_exclusion_patterns).
    ///
    /// <p>A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn exclusion_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.exclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_patterns = Some(v);
        self
    }
    /// <p>A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.</p>
    /// <p>The pattern is applied to the file name.</p>
    pub fn set_exclusion_patterns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.exclusion_patterns = input;
        self
    }
    /// Appends an item to `field_mappings`.
    ///
    /// To override the contents of this collection use [`set_field_mappings`](Self::set_field_mappings).
    ///
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to OneDrive fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The OneDrive data source field names must exist in your OneDrive custom metadata.</p>
    pub fn field_mappings(mut self, input: crate::types::DataSourceToIndexFieldMapping) -> Self {
        let mut v = self.field_mappings.unwrap_or_default();
        v.push(input);
        self.field_mappings = Some(v);
        self
    }
    /// <p>A list of <code>DataSourceToIndexFieldMapping</code> objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the <code>UpdateIndex</code> API before you map to OneDrive fields. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html">Mapping data source fields</a>. The OneDrive data source field names must exist in your OneDrive custom metadata.</p>
    pub fn set_field_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceToIndexFieldMapping>>,
    ) -> Self {
        self.field_mappings = input;
        self
    }
    /// <p> <code>TRUE</code> to disable local groups information.</p>
    pub fn disable_local_groups(mut self, input: bool) -> Self {
        self.disable_local_groups = Some(input);
        self
    }
    /// <p> <code>TRUE</code> to disable local groups information.</p>
    pub fn set_disable_local_groups(mut self, input: std::option::Option<bool>) -> Self {
        self.disable_local_groups = input;
        self
    }
    /// Consumes the builder and constructs a [`OneDriveConfiguration`](crate::types::OneDriveConfiguration).
    pub fn build(self) -> crate::types::OneDriveConfiguration {
        crate::types::OneDriveConfiguration {
            tenant_domain: self.tenant_domain,
            secret_arn: self.secret_arn,
            one_drive_users: self.one_drive_users,
            inclusion_patterns: self.inclusion_patterns,
            exclusion_patterns: self.exclusion_patterns,
            field_mappings: self.field_mappings,
            disable_local_groups: self.disable_local_groups.unwrap_or_default(),
        }
    }
}
