// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the count of documents that match a particular document attribute or field when doing a faceted search.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAttributeValueCountPair {
    /// <p>The value of the attribute/field. For example, "HR".</p>
    pub document_attribute_value: ::std::option::Option<crate::types::DocumentAttributeValue>,
    /// <p>The number of documents in the response that have the attribute/field value for the key.</p>
    pub count: ::std::option::Option<i32>,
    /// <p>Contains the results of a document attribute/field that is a nested facet. A <code>FacetResult</code> contains the counts for each facet nested within a facet.</p>
    /// <p>For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.</p>
    /// <p></p>
    /// <p></p>
    pub facet_results: ::std::option::Option<::std::vec::Vec<crate::types::FacetResult>>,
}
impl DocumentAttributeValueCountPair {
    /// <p>The value of the attribute/field. For example, "HR".</p>
    pub fn document_attribute_value(&self) -> ::std::option::Option<&crate::types::DocumentAttributeValue> {
        self.document_attribute_value.as_ref()
    }
    /// <p>The number of documents in the response that have the attribute/field value for the key.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// <p>Contains the results of a document attribute/field that is a nested facet. A <code>FacetResult</code> contains the counts for each facet nested within a facet.</p>
    /// <p>For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.</p>
    /// <p></p>
    /// <p></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.facet_results.is_none()`.
    pub fn facet_results(&self) -> &[crate::types::FacetResult] {
        self.facet_results.as_deref().unwrap_or_default()
    }
}
impl DocumentAttributeValueCountPair {
    /// Creates a new builder-style object to manufacture [`DocumentAttributeValueCountPair`](crate::types::DocumentAttributeValueCountPair).
    pub fn builder() -> crate::types::builders::DocumentAttributeValueCountPairBuilder {
        crate::types::builders::DocumentAttributeValueCountPairBuilder::default()
    }
}

/// A builder for [`DocumentAttributeValueCountPair`](crate::types::DocumentAttributeValueCountPair).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentAttributeValueCountPairBuilder {
    pub(crate) document_attribute_value: ::std::option::Option<crate::types::DocumentAttributeValue>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) facet_results: ::std::option::Option<::std::vec::Vec<crate::types::FacetResult>>,
}
impl DocumentAttributeValueCountPairBuilder {
    /// <p>The value of the attribute/field. For example, "HR".</p>
    pub fn document_attribute_value(mut self, input: crate::types::DocumentAttributeValue) -> Self {
        self.document_attribute_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the attribute/field. For example, "HR".</p>
    pub fn set_document_attribute_value(mut self, input: ::std::option::Option<crate::types::DocumentAttributeValue>) -> Self {
        self.document_attribute_value = input;
        self
    }
    /// <p>The value of the attribute/field. For example, "HR".</p>
    pub fn get_document_attribute_value(&self) -> &::std::option::Option<crate::types::DocumentAttributeValue> {
        &self.document_attribute_value
    }
    /// <p>The number of documents in the response that have the attribute/field value for the key.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of documents in the response that have the attribute/field value for the key.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of documents in the response that have the attribute/field value for the key.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Appends an item to `facet_results`.
    ///
    /// To override the contents of this collection use [`set_facet_results`](Self::set_facet_results).
    ///
    /// <p>Contains the results of a document attribute/field that is a nested facet. A <code>FacetResult</code> contains the counts for each facet nested within a facet.</p>
    /// <p>For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.</p>
    /// <p></p>
    /// <p></p>
    pub fn facet_results(mut self, input: crate::types::FacetResult) -> Self {
        let mut v = self.facet_results.unwrap_or_default();
        v.push(input);
        self.facet_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the results of a document attribute/field that is a nested facet. A <code>FacetResult</code> contains the counts for each facet nested within a facet.</p>
    /// <p>For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.</p>
    /// <p></p>
    /// <p></p>
    pub fn set_facet_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FacetResult>>) -> Self {
        self.facet_results = input;
        self
    }
    /// <p>Contains the results of a document attribute/field that is a nested facet. A <code>FacetResult</code> contains the counts for each facet nested within a facet.</p>
    /// <p>For example, the document attribute or facet "Department" includes a value called "Engineering". In addition, the document attribute or facet "SubDepartment" includes the values "Frontend" and "Backend" for documents assigned to "Engineering". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. The counts for documents that belong to "Frontend" and "Backend" within "Engineering" are returned for a query.</p>
    /// <p></p>
    /// <p></p>
    pub fn get_facet_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FacetResult>> {
        &self.facet_results
    }
    /// Consumes the builder and constructs a [`DocumentAttributeValueCountPair`](crate::types::DocumentAttributeValueCountPair).
    pub fn build(self) -> crate::types::DocumentAttributeValueCountPair {
        crate::types::DocumentAttributeValueCountPair {
            document_attribute_value: self.document_attribute_value,
            count: self.count,
            facet_results: self.facet_results,
        }
    }
}
