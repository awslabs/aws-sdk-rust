// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ConfluenceAttachmentFieldName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let confluenceattachmentfieldname = unimplemented!();
/// match confluenceattachmentfieldname {
///     ConfluenceAttachmentFieldName::Author => { /* ... */ },
///     ConfluenceAttachmentFieldName::ContentType => { /* ... */ },
///     ConfluenceAttachmentFieldName::CreatedDate => { /* ... */ },
///     ConfluenceAttachmentFieldName::DisplayUrl => { /* ... */ },
///     ConfluenceAttachmentFieldName::FileSize => { /* ... */ },
///     ConfluenceAttachmentFieldName::ItemType => { /* ... */ },
///     ConfluenceAttachmentFieldName::ParentId => { /* ... */ },
///     ConfluenceAttachmentFieldName::SpaceKey => { /* ... */ },
///     ConfluenceAttachmentFieldName::SpaceName => { /* ... */ },
///     ConfluenceAttachmentFieldName::Url => { /* ... */ },
///     ConfluenceAttachmentFieldName::Version => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `confluenceattachmentfieldname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ConfluenceAttachmentFieldName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ConfluenceAttachmentFieldName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ConfluenceAttachmentFieldName::NewFeature` is defined.
/// Specifically, when `confluenceattachmentfieldname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ConfluenceAttachmentFieldName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ConfluenceAttachmentFieldName {
    #[allow(missing_docs)] // documentation missing in model
    Author,
    #[allow(missing_docs)] // documentation missing in model
    ContentType,
    #[allow(missing_docs)] // documentation missing in model
    CreatedDate,
    #[allow(missing_docs)] // documentation missing in model
    DisplayUrl,
    #[allow(missing_docs)] // documentation missing in model
    FileSize,
    #[allow(missing_docs)] // documentation missing in model
    ItemType,
    #[allow(missing_docs)] // documentation missing in model
    ParentId,
    #[allow(missing_docs)] // documentation missing in model
    SpaceKey,
    #[allow(missing_docs)] // documentation missing in model
    SpaceName,
    #[allow(missing_docs)] // documentation missing in model
    Url,
    #[allow(missing_docs)] // documentation missing in model
    Version,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ConfluenceAttachmentFieldName {
    fn from(s: &str) -> Self {
        match s {
            "AUTHOR" => ConfluenceAttachmentFieldName::Author,
            "CONTENT_TYPE" => ConfluenceAttachmentFieldName::ContentType,
            "CREATED_DATE" => ConfluenceAttachmentFieldName::CreatedDate,
            "DISPLAY_URL" => ConfluenceAttachmentFieldName::DisplayUrl,
            "FILE_SIZE" => ConfluenceAttachmentFieldName::FileSize,
            "ITEM_TYPE" => ConfluenceAttachmentFieldName::ItemType,
            "PARENT_ID" => ConfluenceAttachmentFieldName::ParentId,
            "SPACE_KEY" => ConfluenceAttachmentFieldName::SpaceKey,
            "SPACE_NAME" => ConfluenceAttachmentFieldName::SpaceName,
            "URL" => ConfluenceAttachmentFieldName::Url,
            "VERSION" => ConfluenceAttachmentFieldName::Version,
            other => ConfluenceAttachmentFieldName::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for ConfluenceAttachmentFieldName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ConfluenceAttachmentFieldName::from(s))
    }
}
impl ConfluenceAttachmentFieldName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ConfluenceAttachmentFieldName::Author => "AUTHOR",
            ConfluenceAttachmentFieldName::ContentType => "CONTENT_TYPE",
            ConfluenceAttachmentFieldName::CreatedDate => "CREATED_DATE",
            ConfluenceAttachmentFieldName::DisplayUrl => "DISPLAY_URL",
            ConfluenceAttachmentFieldName::FileSize => "FILE_SIZE",
            ConfluenceAttachmentFieldName::ItemType => "ITEM_TYPE",
            ConfluenceAttachmentFieldName::ParentId => "PARENT_ID",
            ConfluenceAttachmentFieldName::SpaceKey => "SPACE_KEY",
            ConfluenceAttachmentFieldName::SpaceName => "SPACE_NAME",
            ConfluenceAttachmentFieldName::Url => "URL",
            ConfluenceAttachmentFieldName::Version => "VERSION",
            ConfluenceAttachmentFieldName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTHOR",
            "CONTENT_TYPE",
            "CREATED_DATE",
            "DISPLAY_URL",
            "FILE_SIZE",
            "ITEM_TYPE",
            "PARENT_ID",
            "SPACE_KEY",
            "SPACE_NAME",
            "URL",
            "VERSION",
        ]
    }
}
impl AsRef<str> for ConfluenceAttachmentFieldName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
