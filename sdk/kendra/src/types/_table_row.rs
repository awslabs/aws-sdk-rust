// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a row in a table excerpt.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableRow {
    /// <p>A list of table cells in a row.</p>
    pub cells: ::std::option::Option<::std::vec::Vec<crate::types::TableCell>>,
}
impl TableRow {
    /// <p>A list of table cells in a row.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cells.is_none()`.
    pub fn cells(&self) -> &[crate::types::TableCell] {
        self.cells.as_deref().unwrap_or_default()
    }
}
impl TableRow {
    /// Creates a new builder-style object to manufacture [`TableRow`](crate::types::TableRow).
    pub fn builder() -> crate::types::builders::TableRowBuilder {
        crate::types::builders::TableRowBuilder::default()
    }
}

/// A builder for [`TableRow`](crate::types::TableRow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TableRowBuilder {
    pub(crate) cells: ::std::option::Option<::std::vec::Vec<crate::types::TableCell>>,
}
impl TableRowBuilder {
    /// Appends an item to `cells`.
    ///
    /// To override the contents of this collection use [`set_cells`](Self::set_cells).
    ///
    /// <p>A list of table cells in a row.</p>
    pub fn cells(mut self, input: crate::types::TableCell) -> Self {
        let mut v = self.cells.unwrap_or_default();
        v.push(input);
        self.cells = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of table cells in a row.</p>
    pub fn set_cells(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TableCell>>) -> Self {
        self.cells = input;
        self
    }
    /// <p>A list of table cells in a row.</p>
    pub fn get_cells(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TableCell>> {
        &self.cells
    }
    /// Consumes the builder and constructs a [`TableRow`](crate::types::TableRow).
    pub fn build(self) -> crate::types::TableRow {
        crate::types::TableRow { cells: self.cells }
    }
}
