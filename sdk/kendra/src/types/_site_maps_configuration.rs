// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for the sitemap URLs to crawl.</p>
/// <p> <i>When selecting websites to index, you must adhere to the <a href="https://aws.amazon.com/aup/">Amazon Acceptable Use Policy</a> and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.</i> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SiteMapsConfiguration {
    /// <p>The list of sitemap URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of three sitemap URLs.</p>
    #[doc(hidden)]
    pub site_maps: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SiteMapsConfiguration {
    /// <p>The list of sitemap URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of three sitemap URLs.</p>
    pub fn site_maps(&self) -> std::option::Option<&[std::string::String]> {
        self.site_maps.as_deref()
    }
}
impl SiteMapsConfiguration {
    /// Creates a new builder-style object to manufacture [`SiteMapsConfiguration`](crate::types::SiteMapsConfiguration).
    pub fn builder() -> crate::types::builders::SiteMapsConfigurationBuilder {
        crate::types::builders::SiteMapsConfigurationBuilder::default()
    }
}

/// A builder for [`SiteMapsConfiguration`](crate::types::SiteMapsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SiteMapsConfigurationBuilder {
    pub(crate) site_maps: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl SiteMapsConfigurationBuilder {
    /// Appends an item to `site_maps`.
    ///
    /// To override the contents of this collection use [`set_site_maps`](Self::set_site_maps).
    ///
    /// <p>The list of sitemap URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of three sitemap URLs.</p>
    pub fn site_maps(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.site_maps.unwrap_or_default();
        v.push(input.into());
        self.site_maps = Some(v);
        self
    }
    /// <p>The list of sitemap URLs of the websites you want to crawl.</p>
    /// <p>The list can include a maximum of three sitemap URLs.</p>
    pub fn set_site_maps(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.site_maps = input;
        self
    }
    /// Consumes the builder and constructs a [`SiteMapsConfiguration`](crate::types::SiteMapsConfiguration).
    pub fn build(self) -> crate::types::SiteMapsConfiguration {
        crate::types::SiteMapsConfiguration {
            site_maps: self.site_maps,
        }
    }
}
