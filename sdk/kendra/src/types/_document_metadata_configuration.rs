// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the properties, such as relevance tuning and searchability, of an index field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentMetadataConfiguration {
    /// <p>The name of the index field.</p>
    pub name: ::std::string::String,
    /// <p>The data type of the index field. </p>
    pub r#type: crate::types::DocumentAttributeValueType,
    /// <p>Provides tuning parameters to determine how the field affects the search results.</p>
    pub relevance: ::std::option::Option<crate::types::Relevance>,
    /// <p>Provides information about how the field is used during a search.</p>
    pub search: ::std::option::Option<crate::types::Search>,
}
impl DocumentMetadataConfiguration {
    /// <p>The name of the index field.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data type of the index field. </p>
    pub fn r#type(&self) -> &crate::types::DocumentAttributeValueType {
        &self.r#type
    }
    /// <p>Provides tuning parameters to determine how the field affects the search results.</p>
    pub fn relevance(&self) -> ::std::option::Option<&crate::types::Relevance> {
        self.relevance.as_ref()
    }
    /// <p>Provides information about how the field is used during a search.</p>
    pub fn search(&self) -> ::std::option::Option<&crate::types::Search> {
        self.search.as_ref()
    }
}
impl DocumentMetadataConfiguration {
    /// Creates a new builder-style object to manufacture [`DocumentMetadataConfiguration`](crate::types::DocumentMetadataConfiguration).
    pub fn builder() -> crate::types::builders::DocumentMetadataConfigurationBuilder {
        crate::types::builders::DocumentMetadataConfigurationBuilder::default()
    }
}

/// A builder for [`DocumentMetadataConfiguration`](crate::types::DocumentMetadataConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentMetadataConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DocumentAttributeValueType>,
    pub(crate) relevance: ::std::option::Option<crate::types::Relevance>,
    pub(crate) search: ::std::option::Option<crate::types::Search>,
}
impl DocumentMetadataConfigurationBuilder {
    /// <p>The name of the index field.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the index field.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the index field.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data type of the index field. </p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DocumentAttributeValueType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the index field. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DocumentAttributeValueType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the index field. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DocumentAttributeValueType> {
        &self.r#type
    }
    /// <p>Provides tuning parameters to determine how the field affects the search results.</p>
    pub fn relevance(mut self, input: crate::types::Relevance) -> Self {
        self.relevance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides tuning parameters to determine how the field affects the search results.</p>
    pub fn set_relevance(mut self, input: ::std::option::Option<crate::types::Relevance>) -> Self {
        self.relevance = input;
        self
    }
    /// <p>Provides tuning parameters to determine how the field affects the search results.</p>
    pub fn get_relevance(&self) -> &::std::option::Option<crate::types::Relevance> {
        &self.relevance
    }
    /// <p>Provides information about how the field is used during a search.</p>
    pub fn search(mut self, input: crate::types::Search) -> Self {
        self.search = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about how the field is used during a search.</p>
    pub fn set_search(mut self, input: ::std::option::Option<crate::types::Search>) -> Self {
        self.search = input;
        self
    }
    /// <p>Provides information about how the field is used during a search.</p>
    pub fn get_search(&self) -> &::std::option::Option<crate::types::Search> {
        &self.search
    }
    /// Consumes the builder and constructs a [`DocumentMetadataConfiguration`](crate::types::DocumentMetadataConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DocumentMetadataConfigurationBuilder::name)
    /// - [`r#type`](crate::types::builders::DocumentMetadataConfigurationBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::DocumentMetadataConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocumentMetadataConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DocumentMetadataConfiguration",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DocumentMetadataConfiguration",
                )
            })?,
            relevance: self.relevance,
            search: self.search,
        })
    }
}
