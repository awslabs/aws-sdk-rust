// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Accepts an offer to share the specified portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptPortfolioShare {
    _private: (),
}
impl AcceptPortfolioShare {
    /// Creates a new builder-style object to manufacture [`AcceptPortfolioShareInput`](crate::input::AcceptPortfolioShareInput)
    pub fn builder() -> crate::input::accept_portfolio_share_input::Builder {
        crate::input::accept_portfolio_share_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptPortfolioShare {
    type Output = std::result::Result<
        crate::output::AcceptPortfolioShareOutput,
        crate::error::AcceptPortfolioShareError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_portfolio_share_error(response)
        } else {
            crate::operation_deser::parse_accept_portfolio_share_response(response)
        }
    }
}

/// <p>Associates the specified budget with the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateBudgetWithResource {
    _private: (),
}
impl AssociateBudgetWithResource {
    /// Creates a new builder-style object to manufacture [`AssociateBudgetWithResourceInput`](crate::input::AssociateBudgetWithResourceInput)
    pub fn builder() -> crate::input::associate_budget_with_resource_input::Builder {
        crate::input::associate_budget_with_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateBudgetWithResource {
    type Output = std::result::Result<
        crate::output::AssociateBudgetWithResourceOutput,
        crate::error::AssociateBudgetWithResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_budget_with_resource_error(response)
        } else {
            crate::operation_deser::parse_associate_budget_with_resource_response(response)
        }
    }
}

/// <p>Associates the specified principal ARN with the specified portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociatePrincipalWithPortfolio {
    _private: (),
}
impl AssociatePrincipalWithPortfolio {
    /// Creates a new builder-style object to manufacture [`AssociatePrincipalWithPortfolioInput`](crate::input::AssociatePrincipalWithPortfolioInput)
    pub fn builder() -> crate::input::associate_principal_with_portfolio_input::Builder {
        crate::input::associate_principal_with_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociatePrincipalWithPortfolio {
    type Output = std::result::Result<
        crate::output::AssociatePrincipalWithPortfolioOutput,
        crate::error::AssociatePrincipalWithPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_principal_with_portfolio_error(response)
        } else {
            crate::operation_deser::parse_associate_principal_with_portfolio_response(response)
        }
    }
}

/// <p>Associates the specified product with the specified portfolio.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateProductWithPortfolio {
    _private: (),
}
impl AssociateProductWithPortfolio {
    /// Creates a new builder-style object to manufacture [`AssociateProductWithPortfolioInput`](crate::input::AssociateProductWithPortfolioInput)
    pub fn builder() -> crate::input::associate_product_with_portfolio_input::Builder {
        crate::input::associate_product_with_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateProductWithPortfolio {
    type Output = std::result::Result<
        crate::output::AssociateProductWithPortfolioOutput,
        crate::error::AssociateProductWithPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_product_with_portfolio_error(response)
        } else {
            crate::operation_deser::parse_associate_product_with_portfolio_response(response)
        }
    }
}

/// <p>Associates a self-service action with a provisioning artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateServiceActionWithProvisioningArtifact {
    _private: (),
}
impl AssociateServiceActionWithProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`AssociateServiceActionWithProvisioningArtifactInput`](crate::input::AssociateServiceActionWithProvisioningArtifactInput)
    pub fn builder(
    ) -> crate::input::associate_service_action_with_provisioning_artifact_input::Builder {
        crate::input::associate_service_action_with_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateServiceActionWithProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::AssociateServiceActionWithProvisioningArtifactOutput,
        crate::error::AssociateServiceActionWithProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_service_action_with_provisioning_artifact_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_service_action_with_provisioning_artifact_response(response)
        }
    }
}

/// <p>Associate the specified TagOption with the specified portfolio or product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTagOptionWithResource {
    _private: (),
}
impl AssociateTagOptionWithResource {
    /// Creates a new builder-style object to manufacture [`AssociateTagOptionWithResourceInput`](crate::input::AssociateTagOptionWithResourceInput)
    pub fn builder() -> crate::input::associate_tag_option_with_resource_input::Builder {
        crate::input::associate_tag_option_with_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateTagOptionWithResource {
    type Output = std::result::Result<
        crate::output::AssociateTagOptionWithResourceOutput,
        crate::error::AssociateTagOptionWithResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_tag_option_with_resource_error(response)
        } else {
            crate::operation_deser::parse_associate_tag_option_with_resource_response(response)
        }
    }
}

/// <p>Associates multiple self-service actions with provisioning artifacts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchAssociateServiceActionWithProvisioningArtifact {
    _private: (),
}
impl BatchAssociateServiceActionWithProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`BatchAssociateServiceActionWithProvisioningArtifactInput`](crate::input::BatchAssociateServiceActionWithProvisioningArtifactInput)
    pub fn builder(
    ) -> crate::input::batch_associate_service_action_with_provisioning_artifact_input::Builder
    {
        crate::input::batch_associate_service_action_with_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for BatchAssociateServiceActionWithProvisioningArtifact
{
    type Output = std::result::Result<
        crate::output::BatchAssociateServiceActionWithProvisioningArtifactOutput,
        crate::error::BatchAssociateServiceActionWithProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_associate_service_action_with_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_batch_associate_service_action_with_provisioning_artifact_response(response)
        }
    }
}

/// <p>Disassociates a batch of self-service actions from the specified provisioning artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisassociateServiceActionFromProvisioningArtifact {
    _private: (),
}
impl BatchDisassociateServiceActionFromProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateServiceActionFromProvisioningArtifactInput`](crate::input::BatchDisassociateServiceActionFromProvisioningArtifactInput)
    pub fn builder(
    ) -> crate::input::batch_disassociate_service_action_from_provisioning_artifact_input::Builder
    {
        crate::input::batch_disassociate_service_action_from_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for BatchDisassociateServiceActionFromProvisioningArtifact
{
    type Output = std::result::Result<
        crate::output::BatchDisassociateServiceActionFromProvisioningArtifactOutput,
        crate::error::BatchDisassociateServiceActionFromProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_disassociate_service_action_from_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_batch_disassociate_service_action_from_provisioning_artifact_response(response)
        }
    }
}

/// <p>Copies the specified source product to the specified target product or a new product.</p>
/// <p>You can copy a product to the same account or another account.
/// You can copy a product to the same region or another region.</p>
/// <p>This operation is performed asynchronously. To track the progress of the
/// operation, use <a>DescribeCopyProductStatus</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyProduct {
    _private: (),
}
impl CopyProduct {
    /// Creates a new builder-style object to manufacture [`CopyProductInput`](crate::input::CopyProductInput)
    pub fn builder() -> crate::input::copy_product_input::Builder {
        crate::input::copy_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyProduct {
    type Output =
        std::result::Result<crate::output::CopyProductOutput, crate::error::CopyProductError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_product_error(response)
        } else {
            crate::operation_deser::parse_copy_product_response(response)
        }
    }
}

/// <p>Creates a constraint.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConstraint {
    _private: (),
}
impl CreateConstraint {
    /// Creates a new builder-style object to manufacture [`CreateConstraintInput`](crate::input::CreateConstraintInput)
    pub fn builder() -> crate::input::create_constraint_input::Builder {
        crate::input::create_constraint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConstraint {
    type Output = std::result::Result<
        crate::output::CreateConstraintOutput,
        crate::error::CreateConstraintError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_constraint_error(response)
        } else {
            crate::operation_deser::parse_create_constraint_response(response)
        }
    }
}

/// <p>Creates a portfolio.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePortfolio {
    _private: (),
}
impl CreatePortfolio {
    /// Creates a new builder-style object to manufacture [`CreatePortfolioInput`](crate::input::CreatePortfolioInput)
    pub fn builder() -> crate::input::create_portfolio_input::Builder {
        crate::input::create_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePortfolio {
    type Output = std::result::Result<
        crate::output::CreatePortfolioOutput,
        crate::error::CreatePortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_portfolio_error(response)
        } else {
            crate::operation_deser::parse_create_portfolio_response(response)
        }
    }
}

/// <p>Shares the specified portfolio with the specified account or organization node.
/// Shares to an organization node can only be created by the management account of an
/// organization or by a delegated administrator. You can share portfolios to an organization,
/// an organizational unit, or a specific account.</p>
/// <p>Note that if a delegated admin is de-registered, they can no longer create portfolio shares.</p>
/// <p>
/// <code>AWSOrganizationsAccess</code> must be enabled in order to create a portfolio share to an organization node.</p>
/// <p>You can't share a shared resource, including portfolios that contain a shared product.</p>
/// <p>If the portfolio share with the specified account or organization node already exists, this action will have no effect and will not return an error. To update an existing share, you must use the <code> UpdatePortfolioShare</code> API instead.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePortfolioShare {
    _private: (),
}
impl CreatePortfolioShare {
    /// Creates a new builder-style object to manufacture [`CreatePortfolioShareInput`](crate::input::CreatePortfolioShareInput)
    pub fn builder() -> crate::input::create_portfolio_share_input::Builder {
        crate::input::create_portfolio_share_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePortfolioShare {
    type Output = std::result::Result<
        crate::output::CreatePortfolioShareOutput,
        crate::error::CreatePortfolioShareError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_portfolio_share_error(response)
        } else {
            crate::operation_deser::parse_create_portfolio_share_response(response)
        }
    }
}

/// <p>Creates a product.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
/// <p>The user or role that performs this operation must have the
/// <code>cloudformation:GetTemplate</code> IAM policy permission. This policy permission is
/// required when using the <code>ImportFromPhysicalId</code> template source in the
/// information data section.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProduct {
    _private: (),
}
impl CreateProduct {
    /// Creates a new builder-style object to manufacture [`CreateProductInput`](crate::input::CreateProductInput)
    pub fn builder() -> crate::input::create_product_input::Builder {
        crate::input::create_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProduct {
    type Output =
        std::result::Result<crate::output::CreateProductOutput, crate::error::CreateProductError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_product_error(response)
        } else {
            crate::operation_deser::parse_create_product_response(response)
        }
    }
}

/// <p>Creates a plan. A plan includes the list of resources to be  
/// created (when provisioning a new product) or modified (when updating a provisioned product)
/// when the plan is executed.</p>
/// <p>You can create one plan per provisioned product. To create a plan for an existing
/// provisioned product, the product status must be AVAILBLE or TAINTED.</p>
/// <p>To view the resource changes in the change set, use <a>DescribeProvisionedProductPlan</a>.
/// To create or modify the provisioned product, use <a>ExecuteProvisionedProductPlan</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProvisionedProductPlan {
    _private: (),
}
impl CreateProvisionedProductPlan {
    /// Creates a new builder-style object to manufacture [`CreateProvisionedProductPlanInput`](crate::input::CreateProvisionedProductPlanInput)
    pub fn builder() -> crate::input::create_provisioned_product_plan_input::Builder {
        crate::input::create_provisioned_product_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProvisionedProductPlan {
    type Output = std::result::Result<
        crate::output::CreateProvisionedProductPlanOutput,
        crate::error::CreateProvisionedProductPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_provisioned_product_plan_error(response)
        } else {
            crate::operation_deser::parse_create_provisioned_product_plan_response(response)
        }
    }
}

/// <p>Creates a provisioning artifact (also known as a version) for the specified product.</p>
/// <p>You cannot create a provisioning artifact for a product that was shared with you.</p>
/// <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code>
/// IAM policy permission. This policy permission is required when using the
/// <code>ImportFromPhysicalId</code> template source in the information data section.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProvisioningArtifact {
    _private: (),
}
impl CreateProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`CreateProvisioningArtifactInput`](crate::input::CreateProvisioningArtifactInput)
    pub fn builder() -> crate::input::create_provisioning_artifact_input::Builder {
        crate::input::create_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::CreateProvisioningArtifactOutput,
        crate::error::CreateProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_create_provisioning_artifact_response(response)
        }
    }
}

/// <p>Creates a self-service action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateServiceAction {
    _private: (),
}
impl CreateServiceAction {
    /// Creates a new builder-style object to manufacture [`CreateServiceActionInput`](crate::input::CreateServiceActionInput)
    pub fn builder() -> crate::input::create_service_action_input::Builder {
        crate::input::create_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateServiceAction {
    type Output = std::result::Result<
        crate::output::CreateServiceActionOutput,
        crate::error::CreateServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_service_action_error(response)
        } else {
            crate::operation_deser::parse_create_service_action_response(response)
        }
    }
}

/// <p>Creates a TagOption.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTagOption {
    _private: (),
}
impl CreateTagOption {
    /// Creates a new builder-style object to manufacture [`CreateTagOptionInput`](crate::input::CreateTagOptionInput)
    pub fn builder() -> crate::input::create_tag_option_input::Builder {
        crate::input::create_tag_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTagOption {
    type Output = std::result::Result<
        crate::output::CreateTagOptionOutput,
        crate::error::CreateTagOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_tag_option_error(response)
        } else {
            crate::operation_deser::parse_create_tag_option_response(response)
        }
    }
}

/// <p>Deletes the specified constraint.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConstraint {
    _private: (),
}
impl DeleteConstraint {
    /// Creates a new builder-style object to manufacture [`DeleteConstraintInput`](crate::input::DeleteConstraintInput)
    pub fn builder() -> crate::input::delete_constraint_input::Builder {
        crate::input::delete_constraint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConstraint {
    type Output = std::result::Result<
        crate::output::DeleteConstraintOutput,
        crate::error::DeleteConstraintError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_constraint_error(response)
        } else {
            crate::operation_deser::parse_delete_constraint_response(response)
        }
    }
}

/// <p>Deletes the specified portfolio.</p>
/// <p>You cannot delete a portfolio if it was shared with you or if it has associated
/// products, users, constraints, or shared accounts.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePortfolio {
    _private: (),
}
impl DeletePortfolio {
    /// Creates a new builder-style object to manufacture [`DeletePortfolioInput`](crate::input::DeletePortfolioInput)
    pub fn builder() -> crate::input::delete_portfolio_input::Builder {
        crate::input::delete_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePortfolio {
    type Output = std::result::Result<
        crate::output::DeletePortfolioOutput,
        crate::error::DeletePortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_portfolio_error(response)
        } else {
            crate::operation_deser::parse_delete_portfolio_response(response)
        }
    }
}

/// <p>Stops sharing the specified portfolio with the specified account or organization
/// node. Shares to an organization node can only be deleted by the management account of an
/// organization or by a delegated administrator.</p>
/// <p>Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePortfolioShare {
    _private: (),
}
impl DeletePortfolioShare {
    /// Creates a new builder-style object to manufacture [`DeletePortfolioShareInput`](crate::input::DeletePortfolioShareInput)
    pub fn builder() -> crate::input::delete_portfolio_share_input::Builder {
        crate::input::delete_portfolio_share_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePortfolioShare {
    type Output = std::result::Result<
        crate::output::DeletePortfolioShareOutput,
        crate::error::DeletePortfolioShareError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_portfolio_share_error(response)
        } else {
            crate::operation_deser::parse_delete_portfolio_share_response(response)
        }
    }
}

/// <p>Deletes the specified product.</p>
/// <p>You cannot delete a product if it was shared with you or is associated with a portfolio.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProduct {
    _private: (),
}
impl DeleteProduct {
    /// Creates a new builder-style object to manufacture [`DeleteProductInput`](crate::input::DeleteProductInput)
    pub fn builder() -> crate::input::delete_product_input::Builder {
        crate::input::delete_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProduct {
    type Output =
        std::result::Result<crate::output::DeleteProductOutput, crate::error::DeleteProductError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_product_error(response)
        } else {
            crate::operation_deser::parse_delete_product_response(response)
        }
    }
}

/// <p>Deletes the specified plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProvisionedProductPlan {
    _private: (),
}
impl DeleteProvisionedProductPlan {
    /// Creates a new builder-style object to manufacture [`DeleteProvisionedProductPlanInput`](crate::input::DeleteProvisionedProductPlanInput)
    pub fn builder() -> crate::input::delete_provisioned_product_plan_input::Builder {
        crate::input::delete_provisioned_product_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProvisionedProductPlan {
    type Output = std::result::Result<
        crate::output::DeleteProvisionedProductPlanOutput,
        crate::error::DeleteProvisionedProductPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_provisioned_product_plan_error(response)
        } else {
            crate::operation_deser::parse_delete_provisioned_product_plan_response(response)
        }
    }
}

/// <p>Deletes the specified provisioning artifact (also known as a version) for the specified product.</p>
/// <p>You cannot delete a provisioning artifact associated with a product that was shared with you.
/// You cannot delete the last provisioning artifact for a product, because a product must have at
/// least one provisioning artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProvisioningArtifact {
    _private: (),
}
impl DeleteProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`DeleteProvisioningArtifactInput`](crate::input::DeleteProvisioningArtifactInput)
    pub fn builder() -> crate::input::delete_provisioning_artifact_input::Builder {
        crate::input::delete_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::DeleteProvisioningArtifactOutput,
        crate::error::DeleteProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_delete_provisioning_artifact_response(response)
        }
    }
}

/// <p>Deletes a self-service action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServiceAction {
    _private: (),
}
impl DeleteServiceAction {
    /// Creates a new builder-style object to manufacture [`DeleteServiceActionInput`](crate::input::DeleteServiceActionInput)
    pub fn builder() -> crate::input::delete_service_action_input::Builder {
        crate::input::delete_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServiceAction {
    type Output = std::result::Result<
        crate::output::DeleteServiceActionOutput,
        crate::error::DeleteServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_service_action_error(response)
        } else {
            crate::operation_deser::parse_delete_service_action_response(response)
        }
    }
}

/// <p>Deletes the specified TagOption.</p>
/// <p>You cannot delete a TagOption if it is associated with a product or portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTagOption {
    _private: (),
}
impl DeleteTagOption {
    /// Creates a new builder-style object to manufacture [`DeleteTagOptionInput`](crate::input::DeleteTagOptionInput)
    pub fn builder() -> crate::input::delete_tag_option_input::Builder {
        crate::input::delete_tag_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTagOption {
    type Output = std::result::Result<
        crate::output::DeleteTagOptionOutput,
        crate::error::DeleteTagOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_tag_option_error(response)
        } else {
            crate::operation_deser::parse_delete_tag_option_response(response)
        }
    }
}

/// <p>Gets information about the specified constraint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConstraint {
    _private: (),
}
impl DescribeConstraint {
    /// Creates a new builder-style object to manufacture [`DescribeConstraintInput`](crate::input::DescribeConstraintInput)
    pub fn builder() -> crate::input::describe_constraint_input::Builder {
        crate::input::describe_constraint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConstraint {
    type Output = std::result::Result<
        crate::output::DescribeConstraintOutput,
        crate::error::DescribeConstraintError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_constraint_error(response)
        } else {
            crate::operation_deser::parse_describe_constraint_response(response)
        }
    }
}

/// <p>Gets the status of the specified copy product operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCopyProductStatus {
    _private: (),
}
impl DescribeCopyProductStatus {
    /// Creates a new builder-style object to manufacture [`DescribeCopyProductStatusInput`](crate::input::DescribeCopyProductStatusInput)
    pub fn builder() -> crate::input::describe_copy_product_status_input::Builder {
        crate::input::describe_copy_product_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCopyProductStatus {
    type Output = std::result::Result<
        crate::output::DescribeCopyProductStatusOutput,
        crate::error::DescribeCopyProductStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_copy_product_status_error(response)
        } else {
            crate::operation_deser::parse_describe_copy_product_status_response(response)
        }
    }
}

/// <p>Gets information about the specified portfolio.</p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePortfolio {
    _private: (),
}
impl DescribePortfolio {
    /// Creates a new builder-style object to manufacture [`DescribePortfolioInput`](crate::input::DescribePortfolioInput)
    pub fn builder() -> crate::input::describe_portfolio_input::Builder {
        crate::input::describe_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePortfolio {
    type Output = std::result::Result<
        crate::output::DescribePortfolioOutput,
        crate::error::DescribePortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_portfolio_error(response)
        } else {
            crate::operation_deser::parse_describe_portfolio_response(response)
        }
    }
}

/// <p>Returns a summary of each of the portfolio shares that were created for the specified portfolio.</p>
/// <p>You can use this API to determine which accounts or organizational nodes this
/// portfolio have been shared, whether the recipient entity has imported the share, and
/// whether TagOptions are included with the share.</p>
/// <p>The <code>PortfolioId</code> and <code>Type</code> parameters are both required.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePortfolioShares {
    _private: (),
}
impl DescribePortfolioShares {
    /// Creates a new builder-style object to manufacture [`DescribePortfolioSharesInput`](crate::input::DescribePortfolioSharesInput)
    pub fn builder() -> crate::input::describe_portfolio_shares_input::Builder {
        crate::input::describe_portfolio_shares_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePortfolioShares {
    type Output = std::result::Result<
        crate::output::DescribePortfolioSharesOutput,
        crate::error::DescribePortfolioSharesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_portfolio_shares_error(response)
        } else {
            crate::operation_deser::parse_describe_portfolio_shares_response(response)
        }
    }
}

/// <p>Gets the status of the specified portfolio share operation. This API can only be called
/// by the management account in the organization or by a delegated admin.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePortfolioShareStatus {
    _private: (),
}
impl DescribePortfolioShareStatus {
    /// Creates a new builder-style object to manufacture [`DescribePortfolioShareStatusInput`](crate::input::DescribePortfolioShareStatusInput)
    pub fn builder() -> crate::input::describe_portfolio_share_status_input::Builder {
        crate::input::describe_portfolio_share_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePortfolioShareStatus {
    type Output = std::result::Result<
        crate::output::DescribePortfolioShareStatusOutput,
        crate::error::DescribePortfolioShareStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_portfolio_share_status_error(response)
        } else {
            crate::operation_deser::parse_describe_portfolio_share_status_response(response)
        }
    }
}

/// <p>Gets information about the specified product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProduct {
    _private: (),
}
impl DescribeProduct {
    /// Creates a new builder-style object to manufacture [`DescribeProductInput`](crate::input::DescribeProductInput)
    pub fn builder() -> crate::input::describe_product_input::Builder {
        crate::input::describe_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProduct {
    type Output = std::result::Result<
        crate::output::DescribeProductOutput,
        crate::error::DescribeProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_product_error(response)
        } else {
            crate::operation_deser::parse_describe_product_response(response)
        }
    }
}

/// <p>Gets information about the specified product. This operation is run with administrator access.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProductAsAdmin {
    _private: (),
}
impl DescribeProductAsAdmin {
    /// Creates a new builder-style object to manufacture [`DescribeProductAsAdminInput`](crate::input::DescribeProductAsAdminInput)
    pub fn builder() -> crate::input::describe_product_as_admin_input::Builder {
        crate::input::describe_product_as_admin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProductAsAdmin {
    type Output = std::result::Result<
        crate::output::DescribeProductAsAdminOutput,
        crate::error::DescribeProductAsAdminError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_product_as_admin_error(response)
        } else {
            crate::operation_deser::parse_describe_product_as_admin_response(response)
        }
    }
}

/// <p>Gets information about the specified product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProductView {
    _private: (),
}
impl DescribeProductView {
    /// Creates a new builder-style object to manufacture [`DescribeProductViewInput`](crate::input::DescribeProductViewInput)
    pub fn builder() -> crate::input::describe_product_view_input::Builder {
        crate::input::describe_product_view_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProductView {
    type Output = std::result::Result<
        crate::output::DescribeProductViewOutput,
        crate::error::DescribeProductViewError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_product_view_error(response)
        } else {
            crate::operation_deser::parse_describe_product_view_response(response)
        }
    }
}

/// <p>Gets information about the specified provisioned product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProvisionedProduct {
    _private: (),
}
impl DescribeProvisionedProduct {
    /// Creates a new builder-style object to manufacture [`DescribeProvisionedProductInput`](crate::input::DescribeProvisionedProductInput)
    pub fn builder() -> crate::input::describe_provisioned_product_input::Builder {
        crate::input::describe_provisioned_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProvisionedProduct {
    type Output = std::result::Result<
        crate::output::DescribeProvisionedProductOutput,
        crate::error::DescribeProvisionedProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_provisioned_product_error(response)
        } else {
            crate::operation_deser::parse_describe_provisioned_product_response(response)
        }
    }
}

/// <p>Gets information about the resource changes for the specified plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProvisionedProductPlan {
    _private: (),
}
impl DescribeProvisionedProductPlan {
    /// Creates a new builder-style object to manufacture [`DescribeProvisionedProductPlanInput`](crate::input::DescribeProvisionedProductPlanInput)
    pub fn builder() -> crate::input::describe_provisioned_product_plan_input::Builder {
        crate::input::describe_provisioned_product_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProvisionedProductPlan {
    type Output = std::result::Result<
        crate::output::DescribeProvisionedProductPlanOutput,
        crate::error::DescribeProvisionedProductPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_provisioned_product_plan_error(response)
        } else {
            crate::operation_deser::parse_describe_provisioned_product_plan_response(response)
        }
    }
}

/// <p>Gets information about the specified provisioning artifact (also known as a version) for the specified product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProvisioningArtifact {
    _private: (),
}
impl DescribeProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`DescribeProvisioningArtifactInput`](crate::input::DescribeProvisioningArtifactInput)
    pub fn builder() -> crate::input::describe_provisioning_artifact_input::Builder {
        crate::input::describe_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::DescribeProvisioningArtifactOutput,
        crate::error::DescribeProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_describe_provisioning_artifact_response(response)
        }
    }
}

/// <p>Gets information about the configuration required to provision the specified product using
/// the specified provisioning artifact.</p>
/// <p>If the output contains a TagOption key with an empty list of values, there is a
/// TagOption conflict for that key. The end user cannot take action to fix the conflict, and
/// launch is not blocked. In subsequent calls to <a>ProvisionProduct</a>,
/// do not include conflicted TagOption keys as tags, or this causes the error
/// "Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>".
/// Tag the provisioned product with the value <code>sc-tagoption-conflict-portfolioId-productId</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProvisioningParameters {
    _private: (),
}
impl DescribeProvisioningParameters {
    /// Creates a new builder-style object to manufacture [`DescribeProvisioningParametersInput`](crate::input::DescribeProvisioningParametersInput)
    pub fn builder() -> crate::input::describe_provisioning_parameters_input::Builder {
        crate::input::describe_provisioning_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProvisioningParameters {
    type Output = std::result::Result<
        crate::output::DescribeProvisioningParametersOutput,
        crate::error::DescribeProvisioningParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_provisioning_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_provisioning_parameters_response(response)
        }
    }
}

/// <p>Gets information about the specified request operation.</p>
/// <p>Use this operation after calling a request operation (for example, <a>ProvisionProduct</a>,
/// <a>TerminateProvisionedProduct</a>, or <a>UpdateProvisionedProduct</a>).
/// </p>
/// <note>
/// <p>If a provisioned product was transferred to a new owner using <a>UpdateProvisionedProductProperties</a>, the new owner
/// will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to
/// use <a>ListRecordHistory</a> to see the product's history from when he was the owner.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRecord {
    _private: (),
}
impl DescribeRecord {
    /// Creates a new builder-style object to manufacture [`DescribeRecordInput`](crate::input::DescribeRecordInput)
    pub fn builder() -> crate::input::describe_record_input::Builder {
        crate::input::describe_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRecord {
    type Output =
        std::result::Result<crate::output::DescribeRecordOutput, crate::error::DescribeRecordError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_record_error(response)
        } else {
            crate::operation_deser::parse_describe_record_response(response)
        }
    }
}

/// <p>Describes a self-service action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeServiceAction {
    _private: (),
}
impl DescribeServiceAction {
    /// Creates a new builder-style object to manufacture [`DescribeServiceActionInput`](crate::input::DescribeServiceActionInput)
    pub fn builder() -> crate::input::describe_service_action_input::Builder {
        crate::input::describe_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeServiceAction {
    type Output = std::result::Result<
        crate::output::DescribeServiceActionOutput,
        crate::error::DescribeServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_service_action_error(response)
        } else {
            crate::operation_deser::parse_describe_service_action_response(response)
        }
    }
}

/// <p>Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeServiceActionExecutionParameters {
    _private: (),
}
impl DescribeServiceActionExecutionParameters {
    /// Creates a new builder-style object to manufacture [`DescribeServiceActionExecutionParametersInput`](crate::input::DescribeServiceActionExecutionParametersInput)
    pub fn builder() -> crate::input::describe_service_action_execution_parameters_input::Builder {
        crate::input::describe_service_action_execution_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeServiceActionExecutionParameters {
    type Output = std::result::Result<
        crate::output::DescribeServiceActionExecutionParametersOutput,
        crate::error::DescribeServiceActionExecutionParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_service_action_execution_parameters_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_service_action_execution_parameters_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the specified TagOption.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTagOption {
    _private: (),
}
impl DescribeTagOption {
    /// Creates a new builder-style object to manufacture [`DescribeTagOptionInput`](crate::input::DescribeTagOptionInput)
    pub fn builder() -> crate::input::describe_tag_option_input::Builder {
        crate::input::describe_tag_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTagOption {
    type Output = std::result::Result<
        crate::output::DescribeTagOptionOutput,
        crate::error::DescribeTagOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_tag_option_error(response)
        } else {
            crate::operation_deser::parse_describe_tag_option_response(response)
        }
    }
}

/// <p>Disable portfolio sharing through AWS Organizations feature. This feature will not
/// delete your current shares but it will prevent you from creating new shares throughout your
/// organization. Current shares will not be in sync with your organization structure if it
/// changes after calling this API. This API can only be called by the management  account in
/// the organization.</p>
/// <p>This API can't be invoked if there are active delegated administrators in the organization.</p>
/// <p>Note that a delegated administrator is not authorized to invoke <code>DisableAWSOrganizationsAccess</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableAWSOrganizationsAccess {
    _private: (),
}
impl DisableAWSOrganizationsAccess {
    /// Creates a new builder-style object to manufacture [`DisableAwsOrganizationsAccessInput`](crate::input::DisableAwsOrganizationsAccessInput)
    pub fn builder() -> crate::input::disable_aws_organizations_access_input::Builder {
        crate::input::disable_aws_organizations_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableAWSOrganizationsAccess {
    type Output = std::result::Result<
        crate::output::DisableAwsOrganizationsAccessOutput,
        crate::error::DisableAWSOrganizationsAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_aws_organizations_access_error(response)
        } else {
            crate::operation_deser::parse_disable_aws_organizations_access_response(response)
        }
    }
}

/// <p>Disassociates the specified budget from the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateBudgetFromResource {
    _private: (),
}
impl DisassociateBudgetFromResource {
    /// Creates a new builder-style object to manufacture [`DisassociateBudgetFromResourceInput`](crate::input::DisassociateBudgetFromResourceInput)
    pub fn builder() -> crate::input::disassociate_budget_from_resource_input::Builder {
        crate::input::disassociate_budget_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateBudgetFromResource {
    type Output = std::result::Result<
        crate::output::DisassociateBudgetFromResourceOutput,
        crate::error::DisassociateBudgetFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_budget_from_resource_error(response)
        } else {
            crate::operation_deser::parse_disassociate_budget_from_resource_response(response)
        }
    }
}

/// <p>Disassociates a previously associated principal ARN from a specified
/// portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociatePrincipalFromPortfolio {
    _private: (),
}
impl DisassociatePrincipalFromPortfolio {
    /// Creates a new builder-style object to manufacture [`DisassociatePrincipalFromPortfolioInput`](crate::input::DisassociatePrincipalFromPortfolioInput)
    pub fn builder() -> crate::input::disassociate_principal_from_portfolio_input::Builder {
        crate::input::disassociate_principal_from_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociatePrincipalFromPortfolio {
    type Output = std::result::Result<
        crate::output::DisassociatePrincipalFromPortfolioOutput,
        crate::error::DisassociatePrincipalFromPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_principal_from_portfolio_error(response)
        } else {
            crate::operation_deser::parse_disassociate_principal_from_portfolio_response(response)
        }
    }
}

/// <p>Disassociates the specified product from the specified portfolio. </p>
/// <p>A delegated admin is authorized to invoke this command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateProductFromPortfolio {
    _private: (),
}
impl DisassociateProductFromPortfolio {
    /// Creates a new builder-style object to manufacture [`DisassociateProductFromPortfolioInput`](crate::input::DisassociateProductFromPortfolioInput)
    pub fn builder() -> crate::input::disassociate_product_from_portfolio_input::Builder {
        crate::input::disassociate_product_from_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateProductFromPortfolio {
    type Output = std::result::Result<
        crate::output::DisassociateProductFromPortfolioOutput,
        crate::error::DisassociateProductFromPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_product_from_portfolio_error(response)
        } else {
            crate::operation_deser::parse_disassociate_product_from_portfolio_response(response)
        }
    }
}

/// <p>Disassociates the specified self-service action association from the specified provisioning artifact.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateServiceActionFromProvisioningArtifact {
    _private: (),
}
impl DisassociateServiceActionFromProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`DisassociateServiceActionFromProvisioningArtifactInput`](crate::input::DisassociateServiceActionFromProvisioningArtifactInput)
    pub fn builder(
    ) -> crate::input::disassociate_service_action_from_provisioning_artifact_input::Builder {
        crate::input::disassociate_service_action_from_provisioning_artifact_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DisassociateServiceActionFromProvisioningArtifact
{
    type Output = std::result::Result<
        crate::output::DisassociateServiceActionFromProvisioningArtifactOutput,
        crate::error::DisassociateServiceActionFromProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_service_action_from_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_disassociate_service_action_from_provisioning_artifact_response(response)
        }
    }
}

/// <p>Disassociates the specified TagOption from the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTagOptionFromResource {
    _private: (),
}
impl DisassociateTagOptionFromResource {
    /// Creates a new builder-style object to manufacture [`DisassociateTagOptionFromResourceInput`](crate::input::DisassociateTagOptionFromResourceInput)
    pub fn builder() -> crate::input::disassociate_tag_option_from_resource_input::Builder {
        crate::input::disassociate_tag_option_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateTagOptionFromResource {
    type Output = std::result::Result<
        crate::output::DisassociateTagOptionFromResourceOutput,
        crate::error::DisassociateTagOptionFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_tag_option_from_resource_error(response)
        } else {
            crate::operation_deser::parse_disassociate_tag_option_from_resource_response(response)
        }
    }
}

/// <p>Enable portfolio sharing feature through AWS Organizations. This API will allow Service
/// Catalog to receive updates on your organization in order to sync your shares with the
/// current structure. This API can only be called by the management  account in the
/// organization.</p>
/// <p>By calling this API Service Catalog will make a call to organizations:EnableAWSServiceAccess on your behalf so that your shares can be in sync with any changes in your AWS Organizations structure.</p>
/// <p>Note that a delegated administrator is not authorized to invoke <code>EnableAWSOrganizationsAccess</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableAWSOrganizationsAccess {
    _private: (),
}
impl EnableAWSOrganizationsAccess {
    /// Creates a new builder-style object to manufacture [`EnableAwsOrganizationsAccessInput`](crate::input::EnableAwsOrganizationsAccessInput)
    pub fn builder() -> crate::input::enable_aws_organizations_access_input::Builder {
        crate::input::enable_aws_organizations_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableAWSOrganizationsAccess {
    type Output = std::result::Result<
        crate::output::EnableAwsOrganizationsAccessOutput,
        crate::error::EnableAWSOrganizationsAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_aws_organizations_access_error(response)
        } else {
            crate::operation_deser::parse_enable_aws_organizations_access_response(response)
        }
    }
}

/// <p>Provisions or modifies a product based on the resource changes for the specified plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExecuteProvisionedProductPlan {
    _private: (),
}
impl ExecuteProvisionedProductPlan {
    /// Creates a new builder-style object to manufacture [`ExecuteProvisionedProductPlanInput`](crate::input::ExecuteProvisionedProductPlanInput)
    pub fn builder() -> crate::input::execute_provisioned_product_plan_input::Builder {
        crate::input::execute_provisioned_product_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExecuteProvisionedProductPlan {
    type Output = std::result::Result<
        crate::output::ExecuteProvisionedProductPlanOutput,
        crate::error::ExecuteProvisionedProductPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_execute_provisioned_product_plan_error(response)
        } else {
            crate::operation_deser::parse_execute_provisioned_product_plan_response(response)
        }
    }
}

/// <p>Executes a self-service action against a provisioned product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExecuteProvisionedProductServiceAction {
    _private: (),
}
impl ExecuteProvisionedProductServiceAction {
    /// Creates a new builder-style object to manufacture [`ExecuteProvisionedProductServiceActionInput`](crate::input::ExecuteProvisionedProductServiceActionInput)
    pub fn builder() -> crate::input::execute_provisioned_product_service_action_input::Builder {
        crate::input::execute_provisioned_product_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExecuteProvisionedProductServiceAction {
    type Output = std::result::Result<
        crate::output::ExecuteProvisionedProductServiceActionOutput,
        crate::error::ExecuteProvisionedProductServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_execute_provisioned_product_service_action_error(response)
        } else {
            crate::operation_deser::parse_execute_provisioned_product_service_action_response(
                response,
            )
        }
    }
}

/// <p>Get the Access Status for AWS Organization portfolio share feature. This API can only be
/// called by the management account in the organization or by a delegated admin.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAWSOrganizationsAccessStatus {
    _private: (),
}
impl GetAWSOrganizationsAccessStatus {
    /// Creates a new builder-style object to manufacture [`GetAwsOrganizationsAccessStatusInput`](crate::input::GetAwsOrganizationsAccessStatusInput)
    pub fn builder() -> crate::input::get_aws_organizations_access_status_input::Builder {
        crate::input::get_aws_organizations_access_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAWSOrganizationsAccessStatus {
    type Output = std::result::Result<
        crate::output::GetAwsOrganizationsAccessStatusOutput,
        crate::error::GetAWSOrganizationsAccessStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_aws_organizations_access_status_error(response)
        } else {
            crate::operation_deser::parse_get_aws_organizations_access_status_response(response)
        }
    }
}

/// <p>This API takes either a <code>ProvisonedProductId</code> or a <code>ProvisionedProductName</code>, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetProvisionedProductOutputs {
    _private: (),
}
impl GetProvisionedProductOutputs {
    /// Creates a new builder-style object to manufacture [`GetProvisionedProductOutputsInput`](crate::input::GetProvisionedProductOutputsInput)
    pub fn builder() -> crate::input::get_provisioned_product_outputs_input::Builder {
        crate::input::get_provisioned_product_outputs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetProvisionedProductOutputs {
    type Output = std::result::Result<
        crate::output::GetProvisionedProductOutputsOutput,
        crate::error::GetProvisionedProductOutputsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_provisioned_product_outputs_error(response)
        } else {
            crate::operation_deser::parse_get_provisioned_product_outputs_response(response)
        }
    }
}

/// <p>Requests the import of a resource as a Service Catalog provisioned product that is
/// associated to a Service Catalog product and provisioning artifact. Once imported, all
/// supported Service Catalog governance actions are supported on the provisioned
/// product.</p>
/// <p>Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets and
/// non-root nested stacks are not supported.</p>
/// <p>The CloudFormation stack must have one of the following statuses to be imported:
/// <code>CREATE_COMPLETE</code>, <code>UPDATE_COMPLETE</code>, <code>UPDATE_ROLLBACK_COMPLETE</code>, <code>IMPORT_COMPLETE</code>,
/// <code>IMPORT_ROLLBACK_COMPLETE</code>.</p>
/// <p>Import of the resource requires that the CloudFormation stack template matches the
/// associated Service Catalog product provisioning artifact. </p>
/// <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code>
/// and <code>cloudformation:DescribeStacks</code> IAM policy permissions. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportAsProvisionedProduct {
    _private: (),
}
impl ImportAsProvisionedProduct {
    /// Creates a new builder-style object to manufacture [`ImportAsProvisionedProductInput`](crate::input::ImportAsProvisionedProductInput)
    pub fn builder() -> crate::input::import_as_provisioned_product_input::Builder {
        crate::input::import_as_provisioned_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportAsProvisionedProduct {
    type Output = std::result::Result<
        crate::output::ImportAsProvisionedProductOutput,
        crate::error::ImportAsProvisionedProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_as_provisioned_product_error(response)
        } else {
            crate::operation_deser::parse_import_as_provisioned_product_response(response)
        }
    }
}

/// <p>Lists all portfolios for which sharing was accepted by this account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAcceptedPortfolioShares {
    _private: (),
}
impl ListAcceptedPortfolioShares {
    /// Creates a new builder-style object to manufacture [`ListAcceptedPortfolioSharesInput`](crate::input::ListAcceptedPortfolioSharesInput)
    pub fn builder() -> crate::input::list_accepted_portfolio_shares_input::Builder {
        crate::input::list_accepted_portfolio_shares_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAcceptedPortfolioShares {
    type Output = std::result::Result<
        crate::output::ListAcceptedPortfolioSharesOutput,
        crate::error::ListAcceptedPortfolioSharesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accepted_portfolio_shares_error(response)
        } else {
            crate::operation_deser::parse_list_accepted_portfolio_shares_response(response)
        }
    }
}

/// <p>Lists all the budgets associated to the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListBudgetsForResource {
    _private: (),
}
impl ListBudgetsForResource {
    /// Creates a new builder-style object to manufacture [`ListBudgetsForResourceInput`](crate::input::ListBudgetsForResourceInput)
    pub fn builder() -> crate::input::list_budgets_for_resource_input::Builder {
        crate::input::list_budgets_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListBudgetsForResource {
    type Output = std::result::Result<
        crate::output::ListBudgetsForResourceOutput,
        crate::error::ListBudgetsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_budgets_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_budgets_for_resource_response(response)
        }
    }
}

/// <p>Lists the constraints for the specified portfolio and product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListConstraintsForPortfolio {
    _private: (),
}
impl ListConstraintsForPortfolio {
    /// Creates a new builder-style object to manufacture [`ListConstraintsForPortfolioInput`](crate::input::ListConstraintsForPortfolioInput)
    pub fn builder() -> crate::input::list_constraints_for_portfolio_input::Builder {
        crate::input::list_constraints_for_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListConstraintsForPortfolio {
    type Output = std::result::Result<
        crate::output::ListConstraintsForPortfolioOutput,
        crate::error::ListConstraintsForPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_constraints_for_portfolio_error(response)
        } else {
            crate::operation_deser::parse_list_constraints_for_portfolio_response(response)
        }
    }
}

/// <p>Lists the paths to the specified product. A path is how the user
/// has access to a specified product, and is necessary when provisioning a product. A path
/// also determines the constraints put on the product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLaunchPaths {
    _private: (),
}
impl ListLaunchPaths {
    /// Creates a new builder-style object to manufacture [`ListLaunchPathsInput`](crate::input::ListLaunchPathsInput)
    pub fn builder() -> crate::input::list_launch_paths_input::Builder {
        crate::input::list_launch_paths_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLaunchPaths {
    type Output = std::result::Result<
        crate::output::ListLaunchPathsOutput,
        crate::error::ListLaunchPathsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_launch_paths_error(response)
        } else {
            crate::operation_deser::parse_list_launch_paths_response(response)
        }
    }
}

/// <p>Lists the organization nodes that have access to the specified portfolio. This API can
/// only be called by the management account in the organization or by a delegated
/// admin.</p>
/// <p>If a delegated admin is de-registered, they can no longer perform this operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOrganizationPortfolioAccess {
    _private: (),
}
impl ListOrganizationPortfolioAccess {
    /// Creates a new builder-style object to manufacture [`ListOrganizationPortfolioAccessInput`](crate::input::ListOrganizationPortfolioAccessInput)
    pub fn builder() -> crate::input::list_organization_portfolio_access_input::Builder {
        crate::input::list_organization_portfolio_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOrganizationPortfolioAccess {
    type Output = std::result::Result<
        crate::output::ListOrganizationPortfolioAccessOutput,
        crate::error::ListOrganizationPortfolioAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_organization_portfolio_access_error(response)
        } else {
            crate::operation_deser::parse_list_organization_portfolio_access_response(response)
        }
    }
}

/// <p>Lists the account IDs that have access to the specified portfolio.</p>
/// <p>A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPortfolioAccess {
    _private: (),
}
impl ListPortfolioAccess {
    /// Creates a new builder-style object to manufacture [`ListPortfolioAccessInput`](crate::input::ListPortfolioAccessInput)
    pub fn builder() -> crate::input::list_portfolio_access_input::Builder {
        crate::input::list_portfolio_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPortfolioAccess {
    type Output = std::result::Result<
        crate::output::ListPortfolioAccessOutput,
        crate::error::ListPortfolioAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_portfolio_access_error(response)
        } else {
            crate::operation_deser::parse_list_portfolio_access_response(response)
        }
    }
}

/// <p>Lists all portfolios in the catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPortfolios {
    _private: (),
}
impl ListPortfolios {
    /// Creates a new builder-style object to manufacture [`ListPortfoliosInput`](crate::input::ListPortfoliosInput)
    pub fn builder() -> crate::input::list_portfolios_input::Builder {
        crate::input::list_portfolios_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPortfolios {
    type Output =
        std::result::Result<crate::output::ListPortfoliosOutput, crate::error::ListPortfoliosError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_portfolios_error(response)
        } else {
            crate::operation_deser::parse_list_portfolios_response(response)
        }
    }
}

/// <p>Lists all portfolios that the specified product is associated with.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPortfoliosForProduct {
    _private: (),
}
impl ListPortfoliosForProduct {
    /// Creates a new builder-style object to manufacture [`ListPortfoliosForProductInput`](crate::input::ListPortfoliosForProductInput)
    pub fn builder() -> crate::input::list_portfolios_for_product_input::Builder {
        crate::input::list_portfolios_for_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPortfoliosForProduct {
    type Output = std::result::Result<
        crate::output::ListPortfoliosForProductOutput,
        crate::error::ListPortfoliosForProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_portfolios_for_product_error(response)
        } else {
            crate::operation_deser::parse_list_portfolios_for_product_response(response)
        }
    }
}

/// <p>Lists all principal ARNs associated with the specified portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPrincipalsForPortfolio {
    _private: (),
}
impl ListPrincipalsForPortfolio {
    /// Creates a new builder-style object to manufacture [`ListPrincipalsForPortfolioInput`](crate::input::ListPrincipalsForPortfolioInput)
    pub fn builder() -> crate::input::list_principals_for_portfolio_input::Builder {
        crate::input::list_principals_for_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListPrincipalsForPortfolio {
    type Output = std::result::Result<
        crate::output::ListPrincipalsForPortfolioOutput,
        crate::error::ListPrincipalsForPortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_principals_for_portfolio_error(response)
        } else {
            crate::operation_deser::parse_list_principals_for_portfolio_response(response)
        }
    }
}

/// <p>Lists the plans for the specified provisioned product or all plans to which the user has access.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProvisionedProductPlans {
    _private: (),
}
impl ListProvisionedProductPlans {
    /// Creates a new builder-style object to manufacture [`ListProvisionedProductPlansInput`](crate::input::ListProvisionedProductPlansInput)
    pub fn builder() -> crate::input::list_provisioned_product_plans_input::Builder {
        crate::input::list_provisioned_product_plans_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProvisionedProductPlans {
    type Output = std::result::Result<
        crate::output::ListProvisionedProductPlansOutput,
        crate::error::ListProvisionedProductPlansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_provisioned_product_plans_error(response)
        } else {
            crate::operation_deser::parse_list_provisioned_product_plans_response(response)
        }
    }
}

/// <p>Lists all provisioning artifacts (also known as versions) for the specified product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProvisioningArtifacts {
    _private: (),
}
impl ListProvisioningArtifacts {
    /// Creates a new builder-style object to manufacture [`ListProvisioningArtifactsInput`](crate::input::ListProvisioningArtifactsInput)
    pub fn builder() -> crate::input::list_provisioning_artifacts_input::Builder {
        crate::input::list_provisioning_artifacts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProvisioningArtifacts {
    type Output = std::result::Result<
        crate::output::ListProvisioningArtifactsOutput,
        crate::error::ListProvisioningArtifactsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_provisioning_artifacts_error(response)
        } else {
            crate::operation_deser::parse_list_provisioning_artifacts_response(response)
        }
    }
}

/// <p>Lists all provisioning artifacts (also known as versions) for the specified self-service action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProvisioningArtifactsForServiceAction {
    _private: (),
}
impl ListProvisioningArtifactsForServiceAction {
    /// Creates a new builder-style object to manufacture [`ListProvisioningArtifactsForServiceActionInput`](crate::input::ListProvisioningArtifactsForServiceActionInput)
    pub fn builder() -> crate::input::list_provisioning_artifacts_for_service_action_input::Builder
    {
        crate::input::list_provisioning_artifacts_for_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProvisioningArtifactsForServiceAction {
    type Output = std::result::Result<
        crate::output::ListProvisioningArtifactsForServiceActionOutput,
        crate::error::ListProvisioningArtifactsForServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_provisioning_artifacts_for_service_action_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_provisioning_artifacts_for_service_action_response(
                response,
            )
        }
    }
}

/// <p>Lists the specified requests or all performed requests.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRecordHistory {
    _private: (),
}
impl ListRecordHistory {
    /// Creates a new builder-style object to manufacture [`ListRecordHistoryInput`](crate::input::ListRecordHistoryInput)
    pub fn builder() -> crate::input::list_record_history_input::Builder {
        crate::input::list_record_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRecordHistory {
    type Output = std::result::Result<
        crate::output::ListRecordHistoryOutput,
        crate::error::ListRecordHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_record_history_error(response)
        } else {
            crate::operation_deser::parse_list_record_history_response(response)
        }
    }
}

/// <p>Lists the resources associated with the specified TagOption.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResourcesForTagOption {
    _private: (),
}
impl ListResourcesForTagOption {
    /// Creates a new builder-style object to manufacture [`ListResourcesForTagOptionInput`](crate::input::ListResourcesForTagOptionInput)
    pub fn builder() -> crate::input::list_resources_for_tag_option_input::Builder {
        crate::input::list_resources_for_tag_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResourcesForTagOption {
    type Output = std::result::Result<
        crate::output::ListResourcesForTagOptionOutput,
        crate::error::ListResourcesForTagOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_resources_for_tag_option_error(response)
        } else {
            crate::operation_deser::parse_list_resources_for_tag_option_response(response)
        }
    }
}

/// <p>Lists all self-service actions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceActions {
    _private: (),
}
impl ListServiceActions {
    /// Creates a new builder-style object to manufacture [`ListServiceActionsInput`](crate::input::ListServiceActionsInput)
    pub fn builder() -> crate::input::list_service_actions_input::Builder {
        crate::input::list_service_actions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceActions {
    type Output = std::result::Result<
        crate::output::ListServiceActionsOutput,
        crate::error::ListServiceActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_actions_error(response)
        } else {
            crate::operation_deser::parse_list_service_actions_response(response)
        }
    }
}

/// <p>Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceActionsForProvisioningArtifact {
    _private: (),
}
impl ListServiceActionsForProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`ListServiceActionsForProvisioningArtifactInput`](crate::input::ListServiceActionsForProvisioningArtifactInput)
    pub fn builder() -> crate::input::list_service_actions_for_provisioning_artifact_input::Builder
    {
        crate::input::list_service_actions_for_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceActionsForProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::ListServiceActionsForProvisioningArtifactOutput,
        crate::error::ListServiceActionsForProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_actions_for_provisioning_artifact_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_service_actions_for_provisioning_artifact_response(
                response,
            )
        }
    }
}

/// <p>Returns summary information about stack instances that are associated with the specified <code>CFN_STACKSET</code> type provisioned product. You can filter for stack instances that are associated with a specific AWS account name or region. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListStackInstancesForProvisionedProduct {
    _private: (),
}
impl ListStackInstancesForProvisionedProduct {
    /// Creates a new builder-style object to manufacture [`ListStackInstancesForProvisionedProductInput`](crate::input::ListStackInstancesForProvisionedProductInput)
    pub fn builder() -> crate::input::list_stack_instances_for_provisioned_product_input::Builder {
        crate::input::list_stack_instances_for_provisioned_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListStackInstancesForProvisionedProduct {
    type Output = std::result::Result<
        crate::output::ListStackInstancesForProvisionedProductOutput,
        crate::error::ListStackInstancesForProvisionedProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_stack_instances_for_provisioned_product_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_stack_instances_for_provisioned_product_response(
                response,
            )
        }
    }
}

/// <p>Lists the specified TagOptions or all TagOptions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagOptions {
    _private: (),
}
impl ListTagOptions {
    /// Creates a new builder-style object to manufacture [`ListTagOptionsInput`](crate::input::ListTagOptionsInput)
    pub fn builder() -> crate::input::list_tag_options_input::Builder {
        crate::input::list_tag_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagOptions {
    type Output =
        std::result::Result<crate::output::ListTagOptionsOutput, crate::error::ListTagOptionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tag_options_error(response)
        } else {
            crate::operation_deser::parse_list_tag_options_response(response)
        }
    }
}

/// <p>Provisions the specified product.</p>
/// <p>A provisioned product is a resourced instance of a product.
/// For example, provisioning a product based on a CloudFormation template launches a
/// CloudFormation stack and its underlying resources.
/// You can check the status of this request using <a>DescribeRecord</a>.</p>
/// <p>If the request contains a tag key with an empty list of values, there is a
/// tag conflict for that key. Do not include conflicted keys as tags, or this causes
/// the error "Parameter validation failed: Missing required parameter in
/// Tags[<i>N</i>]:<i>Value</i>".</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ProvisionProduct {
    _private: (),
}
impl ProvisionProduct {
    /// Creates a new builder-style object to manufacture [`ProvisionProductInput`](crate::input::ProvisionProductInput)
    pub fn builder() -> crate::input::provision_product_input::Builder {
        crate::input::provision_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ProvisionProduct {
    type Output = std::result::Result<
        crate::output::ProvisionProductOutput,
        crate::error::ProvisionProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_provision_product_error(response)
        } else {
            crate::operation_deser::parse_provision_product_response(response)
        }
    }
}

/// <p>Rejects an offer to share the specified portfolio.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectPortfolioShare {
    _private: (),
}
impl RejectPortfolioShare {
    /// Creates a new builder-style object to manufacture [`RejectPortfolioShareInput`](crate::input::RejectPortfolioShareInput)
    pub fn builder() -> crate::input::reject_portfolio_share_input::Builder {
        crate::input::reject_portfolio_share_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectPortfolioShare {
    type Output = std::result::Result<
        crate::output::RejectPortfolioShareOutput,
        crate::error::RejectPortfolioShareError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_portfolio_share_error(response)
        } else {
            crate::operation_deser::parse_reject_portfolio_share_response(response)
        }
    }
}

/// <p>Lists the provisioned products that are available (not terminated).</p>
/// <p>To use additional filtering, see <a>SearchProvisionedProducts</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ScanProvisionedProducts {
    _private: (),
}
impl ScanProvisionedProducts {
    /// Creates a new builder-style object to manufacture [`ScanProvisionedProductsInput`](crate::input::ScanProvisionedProductsInput)
    pub fn builder() -> crate::input::scan_provisioned_products_input::Builder {
        crate::input::scan_provisioned_products_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ScanProvisionedProducts {
    type Output = std::result::Result<
        crate::output::ScanProvisionedProductsOutput,
        crate::error::ScanProvisionedProductsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_scan_provisioned_products_error(response)
        } else {
            crate::operation_deser::parse_scan_provisioned_products_response(response)
        }
    }
}

/// <p>Gets information about the products to which the caller has access.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchProducts {
    _private: (),
}
impl SearchProducts {
    /// Creates a new builder-style object to manufacture [`SearchProductsInput`](crate::input::SearchProductsInput)
    pub fn builder() -> crate::input::search_products_input::Builder {
        crate::input::search_products_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchProducts {
    type Output =
        std::result::Result<crate::output::SearchProductsOutput, crate::error::SearchProductsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_products_error(response)
        } else {
            crate::operation_deser::parse_search_products_response(response)
        }
    }
}

/// <p>Gets information about the products for the specified portfolio or all products.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchProductsAsAdmin {
    _private: (),
}
impl SearchProductsAsAdmin {
    /// Creates a new builder-style object to manufacture [`SearchProductsAsAdminInput`](crate::input::SearchProductsAsAdminInput)
    pub fn builder() -> crate::input::search_products_as_admin_input::Builder {
        crate::input::search_products_as_admin_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchProductsAsAdmin {
    type Output = std::result::Result<
        crate::output::SearchProductsAsAdminOutput,
        crate::error::SearchProductsAsAdminError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_products_as_admin_error(response)
        } else {
            crate::operation_deser::parse_search_products_as_admin_response(response)
        }
    }
}

/// <p>Gets information about the provisioned products that meet the specified criteria.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchProvisionedProducts {
    _private: (),
}
impl SearchProvisionedProducts {
    /// Creates a new builder-style object to manufacture [`SearchProvisionedProductsInput`](crate::input::SearchProvisionedProductsInput)
    pub fn builder() -> crate::input::search_provisioned_products_input::Builder {
        crate::input::search_provisioned_products_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchProvisionedProducts {
    type Output = std::result::Result<
        crate::output::SearchProvisionedProductsOutput,
        crate::error::SearchProvisionedProductsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_provisioned_products_error(response)
        } else {
            crate::operation_deser::parse_search_provisioned_products_response(response)
        }
    }
}

/// <p>Terminates the specified provisioned product.</p>
/// <p>This operation does not delete any records associated with the provisioned product.</p>
/// <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateProvisionedProduct {
    _private: (),
}
impl TerminateProvisionedProduct {
    /// Creates a new builder-style object to manufacture [`TerminateProvisionedProductInput`](crate::input::TerminateProvisionedProductInput)
    pub fn builder() -> crate::input::terminate_provisioned_product_input::Builder {
        crate::input::terminate_provisioned_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateProvisionedProduct {
    type Output = std::result::Result<
        crate::output::TerminateProvisionedProductOutput,
        crate::error::TerminateProvisionedProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_provisioned_product_error(response)
        } else {
            crate::operation_deser::parse_terminate_provisioned_product_response(response)
        }
    }
}

/// <p>Updates the specified constraint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConstraint {
    _private: (),
}
impl UpdateConstraint {
    /// Creates a new builder-style object to manufacture [`UpdateConstraintInput`](crate::input::UpdateConstraintInput)
    pub fn builder() -> crate::input::update_constraint_input::Builder {
        crate::input::update_constraint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConstraint {
    type Output = std::result::Result<
        crate::output::UpdateConstraintOutput,
        crate::error::UpdateConstraintError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_constraint_error(response)
        } else {
            crate::operation_deser::parse_update_constraint_response(response)
        }
    }
}

/// <p>Updates the specified portfolio.</p>
/// <p>You cannot update a product that was shared with you.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePortfolio {
    _private: (),
}
impl UpdatePortfolio {
    /// Creates a new builder-style object to manufacture [`UpdatePortfolioInput`](crate::input::UpdatePortfolioInput)
    pub fn builder() -> crate::input::update_portfolio_input::Builder {
        crate::input::update_portfolio_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePortfolio {
    type Output = std::result::Result<
        crate::output::UpdatePortfolioOutput,
        crate::error::UpdatePortfolioError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_portfolio_error(response)
        } else {
            crate::operation_deser::parse_update_portfolio_response(response)
        }
    }
}

/// <p>Updates the specified portfolio share. You can use this API to enable or disable TagOptions sharing for an existing portfolio share. </p>
/// <p>The portfolio share cannot be updated if the <code> CreatePortfolioShare</code> operation is <code>IN_PROGRESS</code>, as the share is not available to recipient entities. In this case, you must wait for the portfolio share to be COMPLETED.</p>
/// <p>You must provide the <code>accountId</code> or organization node in the input, but not both.</p>
/// <p>If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke <code>UpdatePortfolioShare</code> separately for each share type. </p>
/// <p>This API cannot be used for removing the portfolio share. You must use <code>DeletePortfolioShare</code> API for that action. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePortfolioShare {
    _private: (),
}
impl UpdatePortfolioShare {
    /// Creates a new builder-style object to manufacture [`UpdatePortfolioShareInput`](crate::input::UpdatePortfolioShareInput)
    pub fn builder() -> crate::input::update_portfolio_share_input::Builder {
        crate::input::update_portfolio_share_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePortfolioShare {
    type Output = std::result::Result<
        crate::output::UpdatePortfolioShareOutput,
        crate::error::UpdatePortfolioShareError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_portfolio_share_error(response)
        } else {
            crate::operation_deser::parse_update_portfolio_share_response(response)
        }
    }
}

/// <p>Updates the specified product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProduct {
    _private: (),
}
impl UpdateProduct {
    /// Creates a new builder-style object to manufacture [`UpdateProductInput`](crate::input::UpdateProductInput)
    pub fn builder() -> crate::input::update_product_input::Builder {
        crate::input::update_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProduct {
    type Output =
        std::result::Result<crate::output::UpdateProductOutput, crate::error::UpdateProductError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_product_error(response)
        } else {
            crate::operation_deser::parse_update_product_response(response)
        }
    }
}

/// <p>Requests updates to the configuration of the specified provisioned product.</p>
/// <p>If there are tags associated with the object, they cannot be updated or added.
/// Depending on the specific updates requested, this operation can update with no
/// interruption, with some interruption, or replace the provisioned product entirely.</p>
/// <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProvisionedProduct {
    _private: (),
}
impl UpdateProvisionedProduct {
    /// Creates a new builder-style object to manufacture [`UpdateProvisionedProductInput`](crate::input::UpdateProvisionedProductInput)
    pub fn builder() -> crate::input::update_provisioned_product_input::Builder {
        crate::input::update_provisioned_product_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProvisionedProduct {
    type Output = std::result::Result<
        crate::output::UpdateProvisionedProductOutput,
        crate::error::UpdateProvisionedProductError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_provisioned_product_error(response)
        } else {
            crate::operation_deser::parse_update_provisioned_product_response(response)
        }
    }
}

/// <p>Requests updates to the properties of the specified provisioned product.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProvisionedProductProperties {
    _private: (),
}
impl UpdateProvisionedProductProperties {
    /// Creates a new builder-style object to manufacture [`UpdateProvisionedProductPropertiesInput`](crate::input::UpdateProvisionedProductPropertiesInput)
    pub fn builder() -> crate::input::update_provisioned_product_properties_input::Builder {
        crate::input::update_provisioned_product_properties_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProvisionedProductProperties {
    type Output = std::result::Result<
        crate::output::UpdateProvisionedProductPropertiesOutput,
        crate::error::UpdateProvisionedProductPropertiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_provisioned_product_properties_error(response)
        } else {
            crate::operation_deser::parse_update_provisioned_product_properties_response(response)
        }
    }
}

/// <p>Updates the specified provisioning artifact (also known as a version) for the specified product.</p>
/// <p>You cannot update a provisioning artifact for a product that was shared with you.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProvisioningArtifact {
    _private: (),
}
impl UpdateProvisioningArtifact {
    /// Creates a new builder-style object to manufacture [`UpdateProvisioningArtifactInput`](crate::input::UpdateProvisioningArtifactInput)
    pub fn builder() -> crate::input::update_provisioning_artifact_input::Builder {
        crate::input::update_provisioning_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateProvisioningArtifact {
    type Output = std::result::Result<
        crate::output::UpdateProvisioningArtifactOutput,
        crate::error::UpdateProvisioningArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_provisioning_artifact_error(response)
        } else {
            crate::operation_deser::parse_update_provisioning_artifact_response(response)
        }
    }
}

/// <p>Updates a self-service action.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceAction {
    _private: (),
}
impl UpdateServiceAction {
    /// Creates a new builder-style object to manufacture [`UpdateServiceActionInput`](crate::input::UpdateServiceActionInput)
    pub fn builder() -> crate::input::update_service_action_input::Builder {
        crate::input::update_service_action_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceAction {
    type Output = std::result::Result<
        crate::output::UpdateServiceActionOutput,
        crate::error::UpdateServiceActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_action_error(response)
        } else {
            crate::operation_deser::parse_update_service_action_response(response)
        }
    }
}

/// <p>Updates the specified TagOption.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTagOption {
    _private: (),
}
impl UpdateTagOption {
    /// Creates a new builder-style object to manufacture [`UpdateTagOptionInput`](crate::input::UpdateTagOptionInput)
    pub fn builder() -> crate::input::update_tag_option_input::Builder {
        crate::input::update_tag_option_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTagOption {
    type Output = std::result::Result<
        crate::output::UpdateTagOptionOutput,
        crate::error::UpdateTagOptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_tag_option_error(response)
        } else {
            crate::operation_deser::parse_update_tag_option_response(response)
        }
    }
}
