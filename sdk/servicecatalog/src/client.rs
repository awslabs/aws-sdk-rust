// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn accept_portfolio_share(&self) -> fluent_builders::AcceptPortfolioShare<C> {
        fluent_builders::AcceptPortfolioShare::new(self.handle.clone())
    }
    pub fn associate_budget_with_resource(
        &self,
    ) -> fluent_builders::AssociateBudgetWithResource<C> {
        fluent_builders::AssociateBudgetWithResource::new(self.handle.clone())
    }
    pub fn associate_principal_with_portfolio(
        &self,
    ) -> fluent_builders::AssociatePrincipalWithPortfolio<C> {
        fluent_builders::AssociatePrincipalWithPortfolio::new(self.handle.clone())
    }
    pub fn associate_product_with_portfolio(
        &self,
    ) -> fluent_builders::AssociateProductWithPortfolio<C> {
        fluent_builders::AssociateProductWithPortfolio::new(self.handle.clone())
    }
    pub fn associate_service_action_with_provisioning_artifact(
        &self,
    ) -> fluent_builders::AssociateServiceActionWithProvisioningArtifact<C> {
        fluent_builders::AssociateServiceActionWithProvisioningArtifact::new(self.handle.clone())
    }
    pub fn associate_tag_option_with_resource(
        &self,
    ) -> fluent_builders::AssociateTagOptionWithResource<C> {
        fluent_builders::AssociateTagOptionWithResource::new(self.handle.clone())
    }
    pub fn batch_associate_service_action_with_provisioning_artifact(
        &self,
    ) -> fluent_builders::BatchAssociateServiceActionWithProvisioningArtifact<C> {
        fluent_builders::BatchAssociateServiceActionWithProvisioningArtifact::new(
            self.handle.clone(),
        )
    }
    pub fn batch_disassociate_service_action_from_provisioning_artifact(
        &self,
    ) -> fluent_builders::BatchDisassociateServiceActionFromProvisioningArtifact<C> {
        fluent_builders::BatchDisassociateServiceActionFromProvisioningArtifact::new(
            self.handle.clone(),
        )
    }
    pub fn copy_product(&self) -> fluent_builders::CopyProduct<C> {
        fluent_builders::CopyProduct::new(self.handle.clone())
    }
    pub fn create_constraint(&self) -> fluent_builders::CreateConstraint<C> {
        fluent_builders::CreateConstraint::new(self.handle.clone())
    }
    pub fn create_portfolio(&self) -> fluent_builders::CreatePortfolio<C> {
        fluent_builders::CreatePortfolio::new(self.handle.clone())
    }
    pub fn create_portfolio_share(&self) -> fluent_builders::CreatePortfolioShare<C> {
        fluent_builders::CreatePortfolioShare::new(self.handle.clone())
    }
    pub fn create_product(&self) -> fluent_builders::CreateProduct<C> {
        fluent_builders::CreateProduct::new(self.handle.clone())
    }
    pub fn create_provisioned_product_plan(
        &self,
    ) -> fluent_builders::CreateProvisionedProductPlan<C> {
        fluent_builders::CreateProvisionedProductPlan::new(self.handle.clone())
    }
    pub fn create_provisioning_artifact(&self) -> fluent_builders::CreateProvisioningArtifact<C> {
        fluent_builders::CreateProvisioningArtifact::new(self.handle.clone())
    }
    pub fn create_service_action(&self) -> fluent_builders::CreateServiceAction<C> {
        fluent_builders::CreateServiceAction::new(self.handle.clone())
    }
    pub fn create_tag_option(&self) -> fluent_builders::CreateTagOption<C> {
        fluent_builders::CreateTagOption::new(self.handle.clone())
    }
    pub fn delete_constraint(&self) -> fluent_builders::DeleteConstraint<C> {
        fluent_builders::DeleteConstraint::new(self.handle.clone())
    }
    pub fn delete_portfolio(&self) -> fluent_builders::DeletePortfolio<C> {
        fluent_builders::DeletePortfolio::new(self.handle.clone())
    }
    pub fn delete_portfolio_share(&self) -> fluent_builders::DeletePortfolioShare<C> {
        fluent_builders::DeletePortfolioShare::new(self.handle.clone())
    }
    pub fn delete_product(&self) -> fluent_builders::DeleteProduct<C> {
        fluent_builders::DeleteProduct::new(self.handle.clone())
    }
    pub fn delete_provisioned_product_plan(
        &self,
    ) -> fluent_builders::DeleteProvisionedProductPlan<C> {
        fluent_builders::DeleteProvisionedProductPlan::new(self.handle.clone())
    }
    pub fn delete_provisioning_artifact(&self) -> fluent_builders::DeleteProvisioningArtifact<C> {
        fluent_builders::DeleteProvisioningArtifact::new(self.handle.clone())
    }
    pub fn delete_service_action(&self) -> fluent_builders::DeleteServiceAction<C> {
        fluent_builders::DeleteServiceAction::new(self.handle.clone())
    }
    pub fn delete_tag_option(&self) -> fluent_builders::DeleteTagOption<C> {
        fluent_builders::DeleteTagOption::new(self.handle.clone())
    }
    pub fn describe_constraint(&self) -> fluent_builders::DescribeConstraint<C> {
        fluent_builders::DescribeConstraint::new(self.handle.clone())
    }
    pub fn describe_copy_product_status(&self) -> fluent_builders::DescribeCopyProductStatus<C> {
        fluent_builders::DescribeCopyProductStatus::new(self.handle.clone())
    }
    pub fn describe_portfolio(&self) -> fluent_builders::DescribePortfolio<C> {
        fluent_builders::DescribePortfolio::new(self.handle.clone())
    }
    pub fn describe_portfolio_shares(&self) -> fluent_builders::DescribePortfolioShares<C> {
        fluent_builders::DescribePortfolioShares::new(self.handle.clone())
    }
    pub fn describe_portfolio_share_status(
        &self,
    ) -> fluent_builders::DescribePortfolioShareStatus<C> {
        fluent_builders::DescribePortfolioShareStatus::new(self.handle.clone())
    }
    pub fn describe_product(&self) -> fluent_builders::DescribeProduct<C> {
        fluent_builders::DescribeProduct::new(self.handle.clone())
    }
    pub fn describe_product_as_admin(&self) -> fluent_builders::DescribeProductAsAdmin<C> {
        fluent_builders::DescribeProductAsAdmin::new(self.handle.clone())
    }
    pub fn describe_product_view(&self) -> fluent_builders::DescribeProductView<C> {
        fluent_builders::DescribeProductView::new(self.handle.clone())
    }
    pub fn describe_provisioned_product(&self) -> fluent_builders::DescribeProvisionedProduct<C> {
        fluent_builders::DescribeProvisionedProduct::new(self.handle.clone())
    }
    pub fn describe_provisioned_product_plan(
        &self,
    ) -> fluent_builders::DescribeProvisionedProductPlan<C> {
        fluent_builders::DescribeProvisionedProductPlan::new(self.handle.clone())
    }
    pub fn describe_provisioning_artifact(
        &self,
    ) -> fluent_builders::DescribeProvisioningArtifact<C> {
        fluent_builders::DescribeProvisioningArtifact::new(self.handle.clone())
    }
    pub fn describe_provisioning_parameters(
        &self,
    ) -> fluent_builders::DescribeProvisioningParameters<C> {
        fluent_builders::DescribeProvisioningParameters::new(self.handle.clone())
    }
    pub fn describe_record(&self) -> fluent_builders::DescribeRecord<C> {
        fluent_builders::DescribeRecord::new(self.handle.clone())
    }
    pub fn describe_service_action(&self) -> fluent_builders::DescribeServiceAction<C> {
        fluent_builders::DescribeServiceAction::new(self.handle.clone())
    }
    pub fn describe_service_action_execution_parameters(
        &self,
    ) -> fluent_builders::DescribeServiceActionExecutionParameters<C> {
        fluent_builders::DescribeServiceActionExecutionParameters::new(self.handle.clone())
    }
    pub fn describe_tag_option(&self) -> fluent_builders::DescribeTagOption<C> {
        fluent_builders::DescribeTagOption::new(self.handle.clone())
    }
    pub fn disable_aws_organizations_access(
        &self,
    ) -> fluent_builders::DisableAWSOrganizationsAccess<C> {
        fluent_builders::DisableAWSOrganizationsAccess::new(self.handle.clone())
    }
    pub fn disassociate_budget_from_resource(
        &self,
    ) -> fluent_builders::DisassociateBudgetFromResource<C> {
        fluent_builders::DisassociateBudgetFromResource::new(self.handle.clone())
    }
    pub fn disassociate_principal_from_portfolio(
        &self,
    ) -> fluent_builders::DisassociatePrincipalFromPortfolio<C> {
        fluent_builders::DisassociatePrincipalFromPortfolio::new(self.handle.clone())
    }
    pub fn disassociate_product_from_portfolio(
        &self,
    ) -> fluent_builders::DisassociateProductFromPortfolio<C> {
        fluent_builders::DisassociateProductFromPortfolio::new(self.handle.clone())
    }
    pub fn disassociate_service_action_from_provisioning_artifact(
        &self,
    ) -> fluent_builders::DisassociateServiceActionFromProvisioningArtifact<C> {
        fluent_builders::DisassociateServiceActionFromProvisioningArtifact::new(self.handle.clone())
    }
    pub fn disassociate_tag_option_from_resource(
        &self,
    ) -> fluent_builders::DisassociateTagOptionFromResource<C> {
        fluent_builders::DisassociateTagOptionFromResource::new(self.handle.clone())
    }
    pub fn enable_aws_organizations_access(
        &self,
    ) -> fluent_builders::EnableAWSOrganizationsAccess<C> {
        fluent_builders::EnableAWSOrganizationsAccess::new(self.handle.clone())
    }
    pub fn execute_provisioned_product_plan(
        &self,
    ) -> fluent_builders::ExecuteProvisionedProductPlan<C> {
        fluent_builders::ExecuteProvisionedProductPlan::new(self.handle.clone())
    }
    pub fn execute_provisioned_product_service_action(
        &self,
    ) -> fluent_builders::ExecuteProvisionedProductServiceAction<C> {
        fluent_builders::ExecuteProvisionedProductServiceAction::new(self.handle.clone())
    }
    pub fn get_aws_organizations_access_status(
        &self,
    ) -> fluent_builders::GetAWSOrganizationsAccessStatus<C> {
        fluent_builders::GetAWSOrganizationsAccessStatus::new(self.handle.clone())
    }
    pub fn get_provisioned_product_outputs(
        &self,
    ) -> fluent_builders::GetProvisionedProductOutputs<C> {
        fluent_builders::GetProvisionedProductOutputs::new(self.handle.clone())
    }
    pub fn import_as_provisioned_product(&self) -> fluent_builders::ImportAsProvisionedProduct<C> {
        fluent_builders::ImportAsProvisionedProduct::new(self.handle.clone())
    }
    pub fn list_accepted_portfolio_shares(
        &self,
    ) -> fluent_builders::ListAcceptedPortfolioShares<C> {
        fluent_builders::ListAcceptedPortfolioShares::new(self.handle.clone())
    }
    pub fn list_budgets_for_resource(&self) -> fluent_builders::ListBudgetsForResource<C> {
        fluent_builders::ListBudgetsForResource::new(self.handle.clone())
    }
    pub fn list_constraints_for_portfolio(
        &self,
    ) -> fluent_builders::ListConstraintsForPortfolio<C> {
        fluent_builders::ListConstraintsForPortfolio::new(self.handle.clone())
    }
    pub fn list_launch_paths(&self) -> fluent_builders::ListLaunchPaths<C> {
        fluent_builders::ListLaunchPaths::new(self.handle.clone())
    }
    pub fn list_organization_portfolio_access(
        &self,
    ) -> fluent_builders::ListOrganizationPortfolioAccess<C> {
        fluent_builders::ListOrganizationPortfolioAccess::new(self.handle.clone())
    }
    pub fn list_portfolio_access(&self) -> fluent_builders::ListPortfolioAccess<C> {
        fluent_builders::ListPortfolioAccess::new(self.handle.clone())
    }
    pub fn list_portfolios(&self) -> fluent_builders::ListPortfolios<C> {
        fluent_builders::ListPortfolios::new(self.handle.clone())
    }
    pub fn list_portfolios_for_product(&self) -> fluent_builders::ListPortfoliosForProduct<C> {
        fluent_builders::ListPortfoliosForProduct::new(self.handle.clone())
    }
    pub fn list_principals_for_portfolio(&self) -> fluent_builders::ListPrincipalsForPortfolio<C> {
        fluent_builders::ListPrincipalsForPortfolio::new(self.handle.clone())
    }
    pub fn list_provisioned_product_plans(
        &self,
    ) -> fluent_builders::ListProvisionedProductPlans<C> {
        fluent_builders::ListProvisionedProductPlans::new(self.handle.clone())
    }
    pub fn list_provisioning_artifacts(&self) -> fluent_builders::ListProvisioningArtifacts<C> {
        fluent_builders::ListProvisioningArtifacts::new(self.handle.clone())
    }
    pub fn list_provisioning_artifacts_for_service_action(
        &self,
    ) -> fluent_builders::ListProvisioningArtifactsForServiceAction<C> {
        fluent_builders::ListProvisioningArtifactsForServiceAction::new(self.handle.clone())
    }
    pub fn list_record_history(&self) -> fluent_builders::ListRecordHistory<C> {
        fluent_builders::ListRecordHistory::new(self.handle.clone())
    }
    pub fn list_resources_for_tag_option(&self) -> fluent_builders::ListResourcesForTagOption<C> {
        fluent_builders::ListResourcesForTagOption::new(self.handle.clone())
    }
    pub fn list_service_actions(&self) -> fluent_builders::ListServiceActions<C> {
        fluent_builders::ListServiceActions::new(self.handle.clone())
    }
    pub fn list_service_actions_for_provisioning_artifact(
        &self,
    ) -> fluent_builders::ListServiceActionsForProvisioningArtifact<C> {
        fluent_builders::ListServiceActionsForProvisioningArtifact::new(self.handle.clone())
    }
    pub fn list_stack_instances_for_provisioned_product(
        &self,
    ) -> fluent_builders::ListStackInstancesForProvisionedProduct<C> {
        fluent_builders::ListStackInstancesForProvisionedProduct::new(self.handle.clone())
    }
    pub fn list_tag_options(&self) -> fluent_builders::ListTagOptions<C> {
        fluent_builders::ListTagOptions::new(self.handle.clone())
    }
    pub fn provision_product(&self) -> fluent_builders::ProvisionProduct<C> {
        fluent_builders::ProvisionProduct::new(self.handle.clone())
    }
    pub fn reject_portfolio_share(&self) -> fluent_builders::RejectPortfolioShare<C> {
        fluent_builders::RejectPortfolioShare::new(self.handle.clone())
    }
    pub fn scan_provisioned_products(&self) -> fluent_builders::ScanProvisionedProducts<C> {
        fluent_builders::ScanProvisionedProducts::new(self.handle.clone())
    }
    pub fn search_products(&self) -> fluent_builders::SearchProducts<C> {
        fluent_builders::SearchProducts::new(self.handle.clone())
    }
    pub fn search_products_as_admin(&self) -> fluent_builders::SearchProductsAsAdmin<C> {
        fluent_builders::SearchProductsAsAdmin::new(self.handle.clone())
    }
    pub fn search_provisioned_products(&self) -> fluent_builders::SearchProvisionedProducts<C> {
        fluent_builders::SearchProvisionedProducts::new(self.handle.clone())
    }
    pub fn terminate_provisioned_product(&self) -> fluent_builders::TerminateProvisionedProduct<C> {
        fluent_builders::TerminateProvisionedProduct::new(self.handle.clone())
    }
    pub fn update_constraint(&self) -> fluent_builders::UpdateConstraint<C> {
        fluent_builders::UpdateConstraint::new(self.handle.clone())
    }
    pub fn update_portfolio(&self) -> fluent_builders::UpdatePortfolio<C> {
        fluent_builders::UpdatePortfolio::new(self.handle.clone())
    }
    pub fn update_portfolio_share(&self) -> fluent_builders::UpdatePortfolioShare<C> {
        fluent_builders::UpdatePortfolioShare::new(self.handle.clone())
    }
    pub fn update_product(&self) -> fluent_builders::UpdateProduct<C> {
        fluent_builders::UpdateProduct::new(self.handle.clone())
    }
    pub fn update_provisioned_product(&self) -> fluent_builders::UpdateProvisionedProduct<C> {
        fluent_builders::UpdateProvisionedProduct::new(self.handle.clone())
    }
    pub fn update_provisioned_product_properties(
        &self,
    ) -> fluent_builders::UpdateProvisionedProductProperties<C> {
        fluent_builders::UpdateProvisionedProductProperties::new(self.handle.clone())
    }
    pub fn update_provisioning_artifact(&self) -> fluent_builders::UpdateProvisioningArtifact<C> {
        fluent_builders::UpdateProvisioningArtifact::new(self.handle.clone())
    }
    pub fn update_service_action(&self) -> fluent_builders::UpdateServiceAction<C> {
        fluent_builders::UpdateServiceAction::new(self.handle.clone())
    }
    pub fn update_tag_option(&self) -> fluent_builders::UpdateTagOption<C> {
        fluent_builders::UpdateTagOption::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AcceptPortfolioShare<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::accept_portfolio_share_input::Builder,
    }
    impl<C> AcceptPortfolioShare<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AcceptPortfolioShareOutput,
            smithy_http::result::SdkError<crate::error::AcceptPortfolioShareError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The type of shared portfolios to accept. The default is to accept imported portfolios.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AWS_ORGANIZATIONS</code> - Accept portfolios shared by the management account of your
        /// organization.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>IMPORTED</code> - Accept imported portfolios.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AWS_SERVICECATALOG</code> - Not supported. (Throws ResourceNotFoundException.)</p>
        /// </li>
        /// </ul>
        /// <p>For example, <code>aws servicecatalog accept-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS</code>
        /// </p>
        pub fn portfolio_share_type(mut self, input: crate::model::PortfolioShareType) -> Self {
            self.inner = self.inner.portfolio_share_type(input);
            self
        }
        pub fn set_portfolio_share_type(
            mut self,
            input: std::option::Option<crate::model::PortfolioShareType>,
        ) -> Self {
            self.inner = self.inner.set_portfolio_share_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateBudgetWithResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_budget_with_resource_input::Builder,
    }
    impl<C> AssociateBudgetWithResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateBudgetWithResourceOutput,
            smithy_http::result::SdkError<crate::error::AssociateBudgetWithResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the budget you want to associate.</p>
        pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(input);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p> The resource identifier. Either a portfolio-id or a product-id.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociatePrincipalWithPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_principal_with_portfolio_input::Builder,
    }
    impl<C> AssociatePrincipalWithPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociatePrincipalWithPortfolioOutput,
            smithy_http::result::SdkError<crate::error::AssociatePrincipalWithPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The ARN of the principal (IAM user, role, or group).</p>
        pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.principal_arn(input);
            self
        }
        pub fn set_principal_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_principal_arn(input);
            self
        }
        /// <p>The principal type. The supported value is <code>IAM</code>.</p>
        pub fn principal_type(mut self, input: crate::model::PrincipalType) -> Self {
            self.inner = self.inner.principal_type(input);
            self
        }
        pub fn set_principal_type(
            mut self,
            input: std::option::Option<crate::model::PrincipalType>,
        ) -> Self {
            self.inner = self.inner.set_principal_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateProductWithPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_product_with_portfolio_input::Builder,
    }
    impl<C> AssociateProductWithPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateProductWithPortfolioOutput,
            smithy_http::result::SdkError<crate::error::AssociateProductWithPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The identifier of the source portfolio.</p>
        pub fn source_portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_portfolio_id(input);
            self
        }
        pub fn set_source_portfolio_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_portfolio_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateServiceActionWithProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_service_action_with_provisioning_artifact_input::Builder,
    }
    impl<C> AssociateServiceActionWithProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateServiceActionWithProvisioningArtifactOutput,
            smithy_http::result::SdkError<
                crate::error::AssociateServiceActionWithProvisioningArtifactError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The product identifier. For example, <code>prod-abcdzk7xy33qa</code>.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact. For example, <code>pa-4abcdjnxjj6ne</code>.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
        pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_action_id(input);
            self
        }
        pub fn set_service_action_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_action_id(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateTagOptionWithResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_tag_option_with_resource_input::Builder,
    }
    impl<C> AssociateTagOptionWithResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateTagOptionWithResourceOutput,
            smithy_http::result::SdkError<crate::error::AssociateTagOptionWithResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The resource identifier.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The TagOption identifier.</p>
        pub fn tag_option_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_option_id(input);
            self
        }
        pub fn set_tag_option_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_tag_option_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct BatchAssociateServiceActionWithProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner:
            crate::input::batch_associate_service_action_with_provisioning_artifact_input::Builder,
    }
    impl<C> BatchAssociateServiceActionWithProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchAssociateServiceActionWithProvisioningArtifactOutput,
            smithy_http::result::SdkError<
                crate::error::BatchAssociateServiceActionWithProvisioningArtifactError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
        pub fn service_action_associations(
            mut self,
            inp: impl Into<crate::model::ServiceActionAssociation>,
        ) -> Self {
            self.inner = self.inner.service_action_associations(inp);
            self
        }
        pub fn set_service_action_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceActionAssociation>>,
        ) -> Self {
            self.inner = self.inner.set_service_action_associations(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct BatchDisassociateServiceActionFromProvisioningArtifact<C = aws_hyper::DynConnector> {
                            handle: std::sync::Arc<super::Handle<C>>,
                            inner: crate::input::batch_disassociate_service_action_from_provisioning_artifact_input::Builder
                        }
    impl<C> BatchDisassociateServiceActionFromProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchDisassociateServiceActionFromProvisioningArtifactOutput,
            smithy_http::result::SdkError<
                crate::error::BatchDisassociateServiceActionFromProvisioningArtifactError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
        pub fn service_action_associations(
            mut self,
            inp: impl Into<crate::model::ServiceActionAssociation>,
        ) -> Self {
            self.inner = self.inner.service_action_associations(inp);
            self
        }
        pub fn set_service_action_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceActionAssociation>>,
        ) -> Self {
            self.inner = self.inner.set_service_action_associations(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CopyProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::copy_product_input::Builder,
    }
    impl<C> CopyProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CopyProductOutput,
            smithy_http::result::SdkError<crate::error::CopyProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the source product.</p>
        pub fn source_product_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_product_arn(input);
            self
        }
        pub fn set_source_product_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_product_arn(input);
            self
        }
        /// <p>The identifier of the target product. By default, a new product is created.</p>
        pub fn target_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_product_id(input);
            self
        }
        pub fn set_target_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_target_product_id(input);
            self
        }
        /// <p>A name for the target product. The default is the name of the source product.</p>
        pub fn target_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_product_name(input);
            self
        }
        pub fn set_target_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_target_product_name(input);
            self
        }
        /// <p>The identifiers of the provisioning artifacts (also known as versions) of the product to copy.
        /// By default, all provisioning artifacts are copied.</p>
        pub fn source_provisioning_artifact_identifiers(
            mut self,
            inp: impl Into<
                std::collections::HashMap<
                    crate::model::ProvisioningArtifactPropertyName,
                    std::string::String,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.source_provisioning_artifact_identifiers(inp);
            self
        }
        pub fn set_source_provisioning_artifact_identifiers(
            mut self,
            input: std::option::Option<
                std::vec::Vec<
                    std::collections::HashMap<
                        crate::model::ProvisioningArtifactPropertyName,
                        std::string::String,
                    >,
                >,
            >,
        ) -> Self {
            self.inner = self
                .inner
                .set_source_provisioning_artifact_identifiers(input);
            self
        }
        /// <p>The copy options. If the value is <code>CopyTags</code>, the tags from the source
        /// product are copied to the target product.</p>
        pub fn copy_options(mut self, inp: impl Into<crate::model::CopyOption>) -> Self {
            self.inner = self.inner.copy_options(inp);
            self
        }
        pub fn set_copy_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CopyOption>>,
        ) -> Self {
            self.inner = self.inner.set_copy_options(input);
            self
        }
        /// <p> A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request. </p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateConstraint<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_constraint_input::Builder,
    }
    impl<C> CreateConstraint<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConstraintOutput,
            smithy_http::result::SdkError<crate::error::CreateConstraintError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:</p>
        /// <dl>
        /// <dt>LAUNCH</dt>
        /// <dd>
        /// <p>You are required to specify either the <code>RoleArn</code> or the <code>LocalRoleName</code> but can't use both.</p>
        /// <p>Specify the <code>RoleArn</code> property as follows:</p>
        /// <p>
        /// <code>{"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}</code>
        /// </p>
        /// <p>Specify the <code>LocalRoleName</code> property as follows:</p>
        /// <p>
        /// <code>{"LocalRoleName": "SCBasicLaunchRole"}</code>
        /// </p>
        /// <p>If you specify the <code>LocalRoleName</code> property, when an account uses the launch constraint, the IAM role with that name in the account will be used. This allows launch-role constraints to be
        /// account-agnostic so the administrator can create fewer resources per shared account.</p>
        /// <note>
        /// <p>The given role name must exist in the account used to create the launch constraint and the account of the user who launches a product with this launch constraint.</p>
        /// </note>
        /// <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>
        /// <p>You also cannot have more than one <code>LAUNCH</code> constraint on a product and portfolio.</p>
        /// </dd>
        /// <dt>NOTIFICATION</dt>
        /// <dd>
        /// <p>Specify the <code>NotificationArns</code> property as follows:</p>
        /// <p>
        /// <code>{"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}</code>
        /// </p>
        /// </dd>
        /// <dt>RESOURCE_UPDATE</dt>
        /// <dd>
        /// <p>Specify the <code>TagUpdatesOnProvisionedProduct</code> property as follows:</p>
        /// <p>
        /// <code>{"Version":"2.0","Properties":{"TagUpdateOnProvisionedProduct":"String"}}</code>
        /// </p>
        /// <p>The <code>TagUpdatesOnProvisionedProduct</code> property accepts a string value of <code>ALLOWED</code> or <code>NOT_ALLOWED</code>.</p>
        /// </dd>
        /// <dt>STACKSET</dt>
        /// <dd>
        /// <p>Specify the <code>Parameters</code> property as follows:</p>
        /// <p>
        /// <code>{"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}</code>
        /// </p>
        /// <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>
        /// <p>You also cannot have more than one <code>STACKSET</code> constraint on a product and portfolio.</p>
        /// <p>Products with a <code>STACKSET</code> constraint will launch an AWS CloudFormation stack set.</p>
        /// </dd>
        /// <dt>TEMPLATE</dt>
        /// <dd>
        /// <p>Specify the <code>Rules</code> property. For more information, see
        /// <a href="http://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html">Template Constraint Rules</a>.</p>
        /// </dd>
        /// </dl>
        pub fn parameters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parameters(input);
            self
        }
        pub fn set_parameters(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parameters(input);
            self
        }
        /// <p>The type of constraint.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>LAUNCH</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NOTIFICATION</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RESOURCE_UPDATE</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STACKSET</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TEMPLATE</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.r#type(input);
            self
        }
        pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>The description of the constraint.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreatePortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_portfolio_input::Builder,
    }
    impl<C> CreatePortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePortfolioOutput,
            smithy_http::result::SdkError<crate::error::CreatePortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The name to use for display purposes.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.display_name(input);
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_display_name(input);
            self
        }
        /// <p>The description of the portfolio.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The name of the portfolio provider.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>One or more tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreatePortfolioShare<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_portfolio_share_input::Builder,
    }
    impl<C> CreatePortfolioShare<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePortfolioShareOutput,
            smithy_http::result::SdkError<crate::error::CreatePortfolioShareError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The AWS account ID. For example, <code>123456789012</code>.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The organization node to whom you are going to share. If <code>OrganizationNode</code>
        /// is passed in, <code>PortfolioShare</code> will be created for the node an
        /// ListOrganizationPortfolioAccessd its children (when applies), and a
        /// <code>PortfolioShareToken</code> will be returned in the output in order for the
        /// administrator to monitor the status of the <code>PortfolioShare</code> creation
        /// process.</p>
        pub fn organization_node(mut self, input: crate::model::OrganizationNode) -> Self {
            self.inner = self.inner.organization_node(input);
            self
        }
        pub fn set_organization_node(
            mut self,
            input: std::option::Option<crate::model::OrganizationNode>,
        ) -> Self {
            self.inner = self.inner.set_organization_node(input);
            self
        }
        /// <p>Enables or disables <code>TagOptions </code> sharing when creating the portfolio share. If this flag is not provided, TagOptions sharing is disabled.</p>
        pub fn share_tag_options(mut self, input: bool) -> Self {
            self.inner = self.inner.share_tag_options(input);
            self
        }
        pub fn set_share_tag_options(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_share_tag_options(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_product_input::Builder,
    }
    impl<C> CreateProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateProductOutput,
            smithy_http::result::SdkError<crate::error::CreateProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The name of the product.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The owner of the product.</p>
        pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner(input);
            self
        }
        pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_owner(input);
            self
        }
        /// <p>The description of the product.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The distributor of the product.</p>
        pub fn distributor(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.distributor(input);
            self
        }
        pub fn set_distributor(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_distributor(input);
            self
        }
        /// <p>The support information about the product.</p>
        pub fn support_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_description(input);
            self
        }
        pub fn set_support_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_support_description(input);
            self
        }
        /// <p>The contact email for product support.</p>
        pub fn support_email(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_email(input);
            self
        }
        pub fn set_support_email(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_support_email(input);
            self
        }
        /// <p>The contact URL for product support.</p>
        /// <p>
        /// <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
        pub fn support_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_url(input);
            self
        }
        pub fn set_support_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_support_url(input);
            self
        }
        /// <p>The type of product.</p>
        pub fn product_type(mut self, input: crate::model::ProductType) -> Self {
            self.inner = self.inner.product_type(input);
            self
        }
        pub fn set_product_type(
            mut self,
            input: std::option::Option<crate::model::ProductType>,
        ) -> Self {
            self.inner = self.inner.set_product_type(input);
            self
        }
        /// <p>One or more tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The configuration of the provisioning artifact. </p>
        pub fn provisioning_artifact_parameters(
            mut self,
            input: crate::model::ProvisioningArtifactProperties,
        ) -> Self {
            self.inner = self.inner.provisioning_artifact_parameters(input);
            self
        }
        pub fn set_provisioning_artifact_parameters(
            mut self,
            input: std::option::Option<crate::model::ProvisioningArtifactProperties>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_parameters(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateProvisionedProductPlan<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_provisioned_product_plan_input::Builder,
    }
    impl<C> CreateProvisionedProductPlan<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateProvisionedProductPlanOutput,
            smithy_http::result::SdkError<crate::error::CreateProvisionedProductPlanError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The name of the plan.</p>
        pub fn plan_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.plan_name(input);
            self
        }
        pub fn set_plan_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_plan_name(input);
            self
        }
        /// <p>The plan type.</p>
        pub fn plan_type(mut self, input: crate::model::ProvisionedProductPlanType) -> Self {
            self.inner = self.inner.plan_type(input);
            self
        }
        pub fn set_plan_type(
            mut self,
            input: std::option::Option<crate::model::ProvisionedProductPlanType>,
        ) -> Self {
            self.inner = self.inner.set_plan_type(input);
            self
        }
        /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related
        /// events.</p>
        pub fn notification_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notification_arns(inp);
            self
        }
        pub fn set_notification_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_notification_arns(input);
            self
        }
        /// <p>The path identifier of the product. This value is optional if the product
        /// has a default path, and required if the product has more than one path.
        /// To list the paths for a product, use <a>ListLaunchPaths</a>.</p>
        pub fn path_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_id(input);
            self
        }
        pub fn set_path_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_id(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>A user-friendly name for the provisioned product. This value must be
        /// unique for the AWS account and cannot be updated after the product is provisioned.</p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>Parameters specified by the administrator that are required for provisioning the
        /// product.</p>
        pub fn provisioning_parameters(
            mut self,
            inp: impl Into<crate::model::UpdateProvisioningParameter>,
        ) -> Self {
            self.inner = self.inner.provisioning_parameters(inp);
            self
        }
        pub fn set_provisioning_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UpdateProvisioningParameter>>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_parameters(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
        /// <p>One or more tags.</p>
        /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_provisioning_artifact_input::Builder,
    }
    impl<C> CreateProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateProvisioningArtifactOutput,
            smithy_http::result::SdkError<crate::error::CreateProvisioningArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The configuration for the provisioning artifact.</p>
        pub fn parameters(mut self, input: crate::model::ProvisioningArtifactProperties) -> Self {
            self.inner = self.inner.parameters(input);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<crate::model::ProvisioningArtifactProperties>,
        ) -> Self {
            self.inner = self.inner.set_parameters(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_service_action_input::Builder,
    }
    impl<C> CreateServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateServiceActionOutput,
            smithy_http::result::SdkError<crate::error::CreateServiceActionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The self-service action name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The service action definition type. For example, <code>SSM_AUTOMATION</code>.</p>
        pub fn definition_type(mut self, input: crate::model::ServiceActionDefinitionType) -> Self {
            self.inner = self.inner.definition_type(input);
            self
        }
        pub fn set_definition_type(
            mut self,
            input: std::option::Option<crate::model::ServiceActionDefinitionType>,
        ) -> Self {
            self.inner = self.inner.set_definition_type(input);
            self
        }
        /// <p>The self-service action definition. Can be one of the following:</p>
        /// <dl>
        /// <dt>Name</dt>
        /// <dd>
        /// <p>The name of the AWS Systems Manager document (SSM document). For example, <code>AWS-RestartEC2Instance</code>.</p>
        /// <p>If you are using a shared SSM document, you must provide the ARN instead of the name.</p>
        /// </dd>
        /// <dt>Version</dt>
        /// <dd>
        /// <p>The AWS Systems Manager automation document version. For example, <code>"Version": "1"</code>
        /// </p>
        /// </dd>
        /// <dt>AssumeRole</dt>
        /// <dd>
        /// <p>The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, <code>"AssumeRole": "arn:aws:iam::12345678910:role/ActionRole"</code>.</p>
        /// <p>To reuse the provisioned product launch role, set to <code>"AssumeRole": "LAUNCH_ROLE"</code>.</p>
        /// </dd>
        /// <dt>Parameters</dt>
        /// <dd>
        /// <p>The list of parameters in JSON format.</p>
        /// <p>For example: <code>[{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}]</code> or <code>[{\"Name\":\"InstanceId\",\"Type\":\"TEXT_VALUE\"}]</code>.</p>
        /// </dd>
        /// </dl>
        pub fn definition(
            mut self,
            k: impl Into<crate::model::ServiceActionDefinitionKey>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.definition(k, v);
            self
        }
        pub fn set_definition(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::ServiceActionDefinitionKey,
                    std::string::String,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_definition(input);
            self
        }
        /// <p>The self-service action description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateTagOption<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_tag_option_input::Builder,
    }
    impl<C> CreateTagOption<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateTagOptionOutput,
            smithy_http::result::SdkError<crate::error::CreateTagOptionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The TagOption key.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.key(input);
            self
        }
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_key(input);
            self
        }
        /// <p>The TagOption value.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.value(input);
            self
        }
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_value(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteConstraint<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_constraint_input::Builder,
    }
    impl<C> DeleteConstraint<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConstraintOutput,
            smithy_http::result::SdkError<crate::error::DeleteConstraintError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the constraint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeletePortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_portfolio_input::Builder,
    }
    impl<C> DeletePortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePortfolioOutput,
            smithy_http::result::SdkError<crate::error::DeletePortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeletePortfolioShare<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_portfolio_share_input::Builder,
    }
    impl<C> DeletePortfolioShare<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeletePortfolioShareOutput,
            smithy_http::result::SdkError<crate::error::DeletePortfolioShareError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The AWS account ID.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The organization node to whom you are going to stop sharing.</p>
        pub fn organization_node(mut self, input: crate::model::OrganizationNode) -> Self {
            self.inner = self.inner.organization_node(input);
            self
        }
        pub fn set_organization_node(
            mut self,
            input: std::option::Option<crate::model::OrganizationNode>,
        ) -> Self {
            self.inner = self.inner.set_organization_node(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_product_input::Builder,
    }
    impl<C> DeleteProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteProductOutput,
            smithy_http::result::SdkError<crate::error::DeleteProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteProvisionedProductPlan<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_provisioned_product_plan_input::Builder,
    }
    impl<C> DeleteProvisionedProductPlan<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteProvisionedProductPlanOutput,
            smithy_http::result::SdkError<crate::error::DeleteProvisionedProductPlanError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The plan identifier.</p>
        pub fn plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.plan_id(input);
            self
        }
        pub fn set_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_plan_id(input);
            self
        }
        /// <p>If set to true, AWS Service Catalog stops managing the specified provisioned product even
        /// if it cannot delete the underlying resources.</p>
        pub fn ignore_errors(mut self, input: bool) -> Self {
            self.inner = self.inner.ignore_errors(input);
            self
        }
        pub fn set_ignore_errors(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ignore_errors(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_provisioning_artifact_input::Builder,
    }
    impl<C> DeleteProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteProvisioningArtifactOutput,
            smithy_http::result::SdkError<crate::error::DeleteProvisioningArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_service_action_input::Builder,
    }
    impl<C> DeleteServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteServiceActionOutput,
            smithy_http::result::SdkError<crate::error::DeleteServiceActionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteTagOption<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_tag_option_input::Builder,
    }
    impl<C> DeleteTagOption<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteTagOptionOutput,
            smithy_http::result::SdkError<crate::error::DeleteTagOptionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The TagOption identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConstraint<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_constraint_input::Builder,
    }
    impl<C> DescribeConstraint<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConstraintOutput,
            smithy_http::result::SdkError<crate::error::DescribeConstraintError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the constraint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCopyProductStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_copy_product_status_input::Builder,
    }
    impl<C> DescribeCopyProductStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeCopyProductStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribeCopyProductStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The token for the copy product operation. This token is returned by <a>CopyProduct</a>.</p>
        pub fn copy_product_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.copy_product_token(input);
            self
        }
        pub fn set_copy_product_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_copy_product_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribePortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_portfolio_input::Builder,
    }
    impl<C> DescribePortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePortfolioOutput,
            smithy_http::result::SdkError<crate::error::DescribePortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribePortfolioShares<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_portfolio_shares_input::Builder,
    }
    impl<C> DescribePortfolioShares<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePortfolioSharesOutput,
            smithy_http::result::SdkError<crate::error::DescribePortfolioSharesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the portfolio for which shares will be retrieved.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The type of portfolio share to summarize. This field acts as a filter on the type of portfolio share, which can be one of the following:</p>
        /// <p>1. <code>ACCOUNT</code> - Represents an external account to account share.</p>
        /// <p>2. <code>ORGANIZATION</code> - Represents a share to an organization. This share is available to every account in the organization.</p>
        /// <p>3. <code>ORGANIZATIONAL_UNIT</code> - Represents a share to an organizational unit.</p>
        /// <p>4. <code>ORGANIZATION_MEMBER_ACCOUNT</code> - Represents a share to an account in the organization.</p>
        pub fn r#type(mut self, input: crate::model::DescribePortfolioShareType) -> Self {
            self.inner = self.inner.r#type(input);
            self
        }
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::DescribePortfolioShareType>,
        ) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribePortfolioShareStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_portfolio_share_status_input::Builder,
    }
    impl<C> DescribePortfolioShareStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePortfolioShareStatusOutput,
            smithy_http::result::SdkError<crate::error::DescribePortfolioShareStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The token for the portfolio share operation. This token is returned either by CreatePortfolioShare or by DeletePortfolioShare.</p>
        pub fn portfolio_share_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_share_token(input);
            self
        }
        pub fn set_portfolio_share_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_portfolio_share_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_product_input::Builder,
    }
    impl<C> DescribeProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProductOutput,
            smithy_http::result::SdkError<crate::error::DescribeProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The product name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProductAsAdmin<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_product_as_admin_input::Builder,
    }
    impl<C> DescribeProductAsAdmin<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProductAsAdminOutput,
            smithy_http::result::SdkError<crate::error::DescribeProductAsAdminError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The product name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The unique identifier of the shared portfolio that the specified product is associated
        /// with.</p>
        /// <p>You can provide this parameter to retrieve the shared TagOptions associated with the
        /// product. If this parameter is provided and if TagOptions sharing is enabled in the
        /// portfolio share, the API returns both local and shared TagOptions associated with the
        /// product. Otherwise only local TagOptions will be returned. </p>
        pub fn source_portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_portfolio_id(input);
            self
        }
        pub fn set_source_portfolio_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_portfolio_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProductView<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_product_view_input::Builder,
    }
    impl<C> DescribeProductView<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProductViewOutput,
            smithy_http::result::SdkError<crate::error::DescribeProductViewError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product view identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProvisionedProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_provisioned_product_input::Builder,
    }
    impl<C> DescribeProvisionedProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProvisionedProductOutput,
            smithy_http::result::SdkError<crate::error::DescribeProvisionedProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The provisioned product identifier. You must provide the name or ID, but not both.</p>
        /// <p>If you do not provide a name or ID, or you provide both name and ID, an <code>InvalidParametersException</code> will occur.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The name of the provisioned product. You must provide the name or ID, but not both.</p>
        /// <p>If you do not provide a name or ID, or you provide both name and ID, an <code>InvalidParametersException</code> will occur.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProvisionedProductPlan<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_provisioned_product_plan_input::Builder,
    }
    impl<C> DescribeProvisionedProductPlan<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProvisionedProductPlanOutput,
            smithy_http::result::SdkError<crate::error::DescribeProvisionedProductPlanError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The plan identifier.</p>
        pub fn plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.plan_id(input);
            self
        }
        pub fn set_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_plan_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_provisioning_artifact_input::Builder,
    }
    impl<C> DescribeProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProvisioningArtifactOutput,
            smithy_http::result::SdkError<crate::error::DescribeProvisioningArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The provisioning artifact name.</p>
        pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_name(input);
            self
        }
        pub fn set_provisioning_artifact_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_name(input);
            self
        }
        /// <p>The product name.</p>
        pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_name(input);
            self
        }
        pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_name(input);
            self
        }
        /// <p>Indicates whether a verbose level of detail is enabled.</p>
        pub fn verbose(mut self, input: bool) -> Self {
            self.inner = self.inner.verbose(input);
            self
        }
        pub fn set_verbose(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_verbose(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeProvisioningParameters<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_provisioning_parameters_input::Builder,
    }
    impl<C> DescribeProvisioningParameters<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeProvisioningParametersOutput,
            smithy_http::result::SdkError<crate::error::DescribeProvisioningParametersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier. You must provide the product name or ID, but not both.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The name of the product. You must provide the name or ID, but not both.</p>
        pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_name(input);
            self
        }
        pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_name(input);
            self
        }
        /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
        pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_name(input);
            self
        }
        pub fn set_provisioning_artifact_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_name(input);
            self
        }
        /// <p>The path identifier of the product. This value is optional if the product
        /// has a default path, and required if the product has more than one path.
        /// To list the paths for a product, use <a>ListLaunchPaths</a>. You must provide the name or ID, but not both.</p>
        pub fn path_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_id(input);
            self
        }
        pub fn set_path_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_id(input);
            self
        }
        /// <p>The name of the path. You must provide the name or ID, but not both.</p>
        pub fn path_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_name(input);
            self
        }
        pub fn set_path_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeRecord<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_record_input::Builder,
    }
    impl<C> DescribeRecord<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRecordOutput,
            smithy_http::result::SdkError<crate::error::DescribeRecordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The record identifier of the provisioned product. This identifier is returned by the
        /// request operation.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_service_action_input::Builder,
    }
    impl<C> DescribeServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServiceActionOutput,
            smithy_http::result::SdkError<crate::error::DescribeServiceActionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The self-service action identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeServiceActionExecutionParameters<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_service_action_execution_parameters_input::Builder,
    }
    impl<C> DescribeServiceActionExecutionParameters<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServiceActionExecutionParametersOutput,
            smithy_http::result::SdkError<
                crate::error::DescribeServiceActionExecutionParametersError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the provisioned product.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>The self-service action identifier.</p>
        pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_action_id(input);
            self
        }
        pub fn set_service_action_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_action_id(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTagOption<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_tag_option_input::Builder,
    }
    impl<C> DescribeTagOption<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTagOptionOutput,
            smithy_http::result::SdkError<crate::error::DescribeTagOptionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The TagOption identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisableAWSOrganizationsAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disable_aws_organizations_access_input::Builder,
    }
    impl<C> DisableAWSOrganizationsAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableAwsOrganizationsAccessOutput,
            smithy_http::result::SdkError<crate::error::DisableAWSOrganizationsAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateBudgetFromResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_budget_from_resource_input::Builder,
    }
    impl<C> DisassociateBudgetFromResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateBudgetFromResourceOutput,
            smithy_http::result::SdkError<crate::error::DisassociateBudgetFromResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the budget you want to disassociate.</p>
        pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(input);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The resource identifier you want to disassociate from. Either a portfolio-id or a product-id.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociatePrincipalFromPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_principal_from_portfolio_input::Builder,
    }
    impl<C> DisassociatePrincipalFromPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociatePrincipalFromPortfolioOutput,
            smithy_http::result::SdkError<crate::error::DisassociatePrincipalFromPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The ARN of the principal (IAM user, role, or group).</p>
        pub fn principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.principal_arn(input);
            self
        }
        pub fn set_principal_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_principal_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateProductFromPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_product_from_portfolio_input::Builder,
    }
    impl<C> DisassociateProductFromPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateProductFromPortfolioOutput,
            smithy_http::result::SdkError<crate::error::DisassociateProductFromPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateServiceActionFromProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_service_action_from_provisioning_artifact_input::Builder,
    }
    impl<C> DisassociateServiceActionFromProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateServiceActionFromProvisioningArtifactOutput,
            smithy_http::result::SdkError<
                crate::error::DisassociateServiceActionFromProvisioningArtifactError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The product identifier. For example, <code>prod-abcdzk7xy33qa</code>.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact. For example, <code>pa-4abcdjnxjj6ne</code>.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
        pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_action_id(input);
            self
        }
        pub fn set_service_action_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_action_id(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateTagOptionFromResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_tag_option_from_resource_input::Builder,
    }
    impl<C> DisassociateTagOptionFromResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateTagOptionFromResourceOutput,
            smithy_http::result::SdkError<crate::error::DisassociateTagOptionFromResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The resource identifier.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The TagOption identifier.</p>
        pub fn tag_option_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_option_id(input);
            self
        }
        pub fn set_tag_option_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_tag_option_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct EnableAWSOrganizationsAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::enable_aws_organizations_access_input::Builder,
    }
    impl<C> EnableAWSOrganizationsAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableAwsOrganizationsAccessOutput,
            smithy_http::result::SdkError<crate::error::EnableAWSOrganizationsAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteProvisionedProductPlan<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_provisioned_product_plan_input::Builder,
    }
    impl<C> ExecuteProvisionedProductPlan<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExecuteProvisionedProductPlanOutput,
            smithy_http::result::SdkError<crate::error::ExecuteProvisionedProductPlanError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The plan identifier.</p>
        pub fn plan_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.plan_id(input);
            self
        }
        pub fn set_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_plan_id(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteProvisionedProductServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_provisioned_product_service_action_input::Builder,
    }
    impl<C> ExecuteProvisionedProductServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExecuteProvisionedProductServiceActionOutput,
            smithy_http::result::SdkError<
                crate::error::ExecuteProvisionedProductServiceActionError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the provisioned product.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
        pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_action_id(input);
            self
        }
        pub fn set_service_action_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_action_id(input);
            self
        }
        /// <p>An idempotency token that uniquely identifies the execute request.</p>
        pub fn execute_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execute_token(input);
            self
        }
        pub fn set_execute_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execute_token(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as <code>TARGET</code>, the provided value will
        /// override the default value generated by AWS Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for
        /// any special parameters such as <code>TARGET</code>.</p>
        pub fn parameters(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.parameters(k, v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
            >,
        ) -> Self {
            self.inner = self.inner.set_parameters(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAWSOrganizationsAccessStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_aws_organizations_access_status_input::Builder,
    }
    impl<C> GetAWSOrganizationsAccessStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAwsOrganizationsAccessStatusOutput,
            smithy_http::result::SdkError<crate::error::GetAWSOrganizationsAccessStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetProvisionedProductOutputs<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_provisioned_product_outputs_input::Builder,
    }
    impl<C> GetProvisionedProductOutputs<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetProvisionedProductOutputsOutput,
            smithy_http::result::SdkError<crate::error::GetProvisionedProductOutputsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the provisioned product that you want the outputs from.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>The name of the provisioned product that you want the outputs from.</p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>The list of keys that the API should return with their values. If none are provided, the API will return all outputs of the provisioned product.</p>
        pub fn output_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_keys(inp);
            self
        }
        pub fn set_output_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_output_keys(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ImportAsProvisionedProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::import_as_provisioned_product_input::Builder,
    }
    impl<C> ImportAsProvisionedProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportAsProvisionedProductOutput,
            smithy_http::result::SdkError<crate::error::ImportAsProvisionedProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The user-friendly name of the provisioned product. The value must be unique for the AWS
        /// account. The name cannot be updated after the product is provisioned. </p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>The unique identifier of the resource to be imported. It only currently supports
        /// CloudFormation stack IDs.</p>
        pub fn physical_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.physical_id(input);
            self
        }
        pub fn set_physical_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_physical_id(input);
            self
        }
        /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token,
        /// the same response is returned for each repeated request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListAcceptedPortfolioShares<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_accepted_portfolio_shares_input::Builder,
    }
    impl<C> ListAcceptedPortfolioShares<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAcceptedPortfolioSharesOutput,
            smithy_http::result::SdkError<crate::error::ListAcceptedPortfolioSharesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The type of shared portfolios to list. The default is to list imported portfolios.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AWS_ORGANIZATIONS</code> - List portfolios shared by the management
        /// account of your organization</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AWS_SERVICECATALOG</code> - List default portfolios</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>IMPORTED</code> - List imported portfolios</p>
        /// </li>
        /// </ul>
        pub fn portfolio_share_type(mut self, input: crate::model::PortfolioShareType) -> Self {
            self.inner = self.inner.portfolio_share_type(input);
            self
        }
        pub fn set_portfolio_share_type(
            mut self,
            input: std::option::Option<crate::model::PortfolioShareType>,
        ) -> Self {
            self.inner = self.inner.set_portfolio_share_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListBudgetsForResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_budgets_for_resource_input::Builder,
    }
    impl<C> ListBudgetsForResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListBudgetsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListBudgetsForResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The resource identifier.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(input);
            self
        }
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListConstraintsForPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_constraints_for_portfolio_input::Builder,
    }
    impl<C> ListConstraintsForPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListConstraintsForPortfolioOutput,
            smithy_http::result::SdkError<crate::error::ListConstraintsForPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListLaunchPaths<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_launch_paths_input::Builder,
    }
    impl<C> ListLaunchPaths<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListLaunchPathsOutput,
            smithy_http::result::SdkError<crate::error::ListLaunchPathsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListOrganizationPortfolioAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_organization_portfolio_access_input::Builder,
    }
    impl<C> ListOrganizationPortfolioAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListOrganizationPortfolioAccessOutput,
            smithy_http::result::SdkError<crate::error::ListOrganizationPortfolioAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier. For example, <code>port-2abcdext3y5fk</code>.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The organization node type that will be returned in the output.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ORGANIZATION</code> - Organization that has access to the portfolio. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ORGANIZATIONAL_UNIT</code> - Organizational unit that has access to the portfolio within your organization.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ACCOUNT</code> - Account that has access to the portfolio within your organization.</p>
        /// </li>
        /// </ul>
        pub fn organization_node_type(mut self, input: crate::model::OrganizationNodeType) -> Self {
            self.inner = self.inner.organization_node_type(input);
            self
        }
        pub fn set_organization_node_type(
            mut self,
            input: std::option::Option<crate::model::OrganizationNodeType>,
        ) -> Self {
            self.inner = self.inner.set_organization_node_type(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPortfolioAccess<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_portfolio_access_input::Builder,
    }
    impl<C> ListPortfolioAccess<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPortfolioAccessOutput,
            smithy_http::result::SdkError<crate::error::ListPortfolioAccessError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The ID of an organization node the portfolio is shared with. All children of this node with an inherited portfolio share will be returned.</p>
        pub fn organization_parent_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.organization_parent_id(input);
            self
        }
        pub fn set_organization_parent_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_organization_parent_id(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPortfolios<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_portfolios_input::Builder,
    }
    impl<C> ListPortfolios<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPortfoliosOutput,
            smithy_http::result::SdkError<crate::error::ListPortfoliosError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPortfoliosForProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_portfolios_for_product_input::Builder,
    }
    impl<C> ListPortfoliosForProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPortfoliosForProductOutput,
            smithy_http::result::SdkError<crate::error::ListPortfoliosForProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListPrincipalsForPortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_principals_for_portfolio_input::Builder,
    }
    impl<C> ListPrincipalsForPortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPrincipalsForPortfolioOutput,
            smithy_http::result::SdkError<crate::error::ListPrincipalsForPortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListProvisionedProductPlans<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_provisioned_product_plans_input::Builder,
    }
    impl<C> ListProvisionedProductPlans<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProvisionedProductPlansOutput,
            smithy_http::result::SdkError<crate::error::ListProvisionedProductPlansError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn provision_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provision_product_id(input);
            self
        }
        pub fn set_provision_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provision_product_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
        pub fn access_level_filter(mut self, input: crate::model::AccessLevelFilter) -> Self {
            self.inner = self.inner.access_level_filter(input);
            self
        }
        pub fn set_access_level_filter(
            mut self,
            input: std::option::Option<crate::model::AccessLevelFilter>,
        ) -> Self {
            self.inner = self.inner.set_access_level_filter(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListProvisioningArtifacts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_provisioning_artifacts_input::Builder,
    }
    impl<C> ListProvisioningArtifacts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProvisioningArtifactsOutput,
            smithy_http::result::SdkError<crate::error::ListProvisioningArtifactsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListProvisioningArtifactsForServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_provisioning_artifacts_for_service_action_input::Builder,
    }
    impl<C> ListProvisioningArtifactsForServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProvisioningArtifactsForServiceActionOutput,
            smithy_http::result::SdkError<
                crate::error::ListProvisioningArtifactsForServiceActionError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
        pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_action_id(input);
            self
        }
        pub fn set_service_action_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_action_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRecordHistory<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_record_history_input::Builder,
    }
    impl<C> ListRecordHistory<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRecordHistoryOutput,
            smithy_http::result::SdkError<crate::error::ListRecordHistoryError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
        pub fn access_level_filter(mut self, input: crate::model::AccessLevelFilter) -> Self {
            self.inner = self.inner.access_level_filter(input);
            self
        }
        pub fn set_access_level_filter(
            mut self,
            input: std::option::Option<crate::model::AccessLevelFilter>,
        ) -> Self {
            self.inner = self.inner.set_access_level_filter(input);
            self
        }
        /// <p>The search filter to scope the results.</p>
        pub fn search_filter(mut self, input: crate::model::ListRecordHistorySearchFilter) -> Self {
            self.inner = self.inner.search_filter(input);
            self
        }
        pub fn set_search_filter(
            mut self,
            input: std::option::Option<crate::model::ListRecordHistorySearchFilter>,
        ) -> Self {
            self.inner = self.inner.set_search_filter(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListResourcesForTagOption<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_resources_for_tag_option_input::Builder,
    }
    impl<C> ListResourcesForTagOption<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListResourcesForTagOptionOutput,
            smithy_http::result::SdkError<crate::error::ListResourcesForTagOptionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The TagOption identifier.</p>
        pub fn tag_option_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_option_id(input);
            self
        }
        pub fn set_tag_option_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_tag_option_id(input);
            self
        }
        /// <p>The resource type.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Portfolio</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Product</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_type(input);
            self
        }
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_resource_type(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListServiceActions<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_service_actions_input::Builder,
    }
    impl<C> ListServiceActions<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListServiceActionsOutput,
            smithy_http::result::SdkError<crate::error::ListServiceActionsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListServiceActionsForProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_service_actions_for_provisioning_artifact_input::Builder,
    }
    impl<C> ListServiceActionsForProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListServiceActionsForProvisioningArtifactOutput,
            smithy_http::result::SdkError<
                crate::error::ListServiceActionsForProvisioningArtifactError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The product identifier. For example, <code>prod-abcdzk7xy33qa</code>.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact. For example, <code>pa-4abcdjnxjj6ne</code>.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListStackInstancesForProvisionedProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_stack_instances_for_provisioned_product_input::Builder,
    }
    impl<C> ListStackInstancesForProvisionedProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStackInstancesForProvisionedProductOutput,
            smithy_http::result::SdkError<
                crate::error::ListStackInstancesForProvisionedProductError,
            >,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the provisioned product.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagOptions<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tag_options_input::Builder,
    }
    impl<C> ListTagOptions<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagOptionsOutput,
            smithy_http::result::SdkError<crate::error::ListTagOptionsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The search filters. If no search filters are specified, the output includes all TagOptions.</p>
        pub fn filters(mut self, input: crate::model::ListTagOptionsFilters) -> Self {
            self.inner = self.inner.filters(input);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<crate::model::ListTagOptionsFilters>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ProvisionProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::provision_product_input::Builder,
    }
    impl<C> ProvisionProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ProvisionProductOutput,
            smithy_http::result::SdkError<crate::error::ProvisionProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier. You must provide the name or ID, but not both.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The name of the product. You must provide the name or ID, but not both.</p>
        pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_name(input);
            self
        }
        pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_name(input);
            self
        }
        /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
        pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_name(input);
            self
        }
        pub fn set_provisioning_artifact_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_name(input);
            self
        }
        /// <p>The path identifier of the product. This value is optional if the product
        /// has a default path, and required if the product has more than one path.
        /// To list the paths for a product, use <a>ListLaunchPaths</a>. You must provide the name or ID, but not both.</p>
        pub fn path_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_id(input);
            self
        }
        pub fn set_path_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_id(input);
            self
        }
        /// <p>The name of the path. You must provide the name or ID, but not both.</p>
        pub fn path_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_name(input);
            self
        }
        pub fn set_path_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_name(input);
            self
        }
        /// <p>A user-friendly name for the provisioned product. This value must be
        /// unique for the AWS account and cannot be updated after the product is provisioned.</p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>Parameters specified by the administrator that are required for provisioning the
        /// product.</p>
        pub fn provisioning_parameters(
            mut self,
            inp: impl Into<crate::model::ProvisioningParameter>,
        ) -> Self {
            self.inner = self.inner.provisioning_parameters(inp);
            self
        }
        pub fn set_provisioning_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProvisioningParameter>>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_parameters(input);
            self
        }
        /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
        pub fn provisioning_preferences(
            mut self,
            input: crate::model::ProvisioningPreferences,
        ) -> Self {
            self.inner = self.inner.provisioning_preferences(input);
            self
        }
        pub fn set_provisioning_preferences(
            mut self,
            input: std::option::Option<crate::model::ProvisioningPreferences>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_preferences(input);
            self
        }
        /// <p>One or more tags.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related
        /// events.</p>
        pub fn notification_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notification_arns(inp);
            self
        }
        pub fn set_notification_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_notification_arns(input);
            self
        }
        /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
        pub fn provision_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provision_token(input);
            self
        }
        pub fn set_provision_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provision_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RejectPortfolioShare<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::reject_portfolio_share_input::Builder,
    }
    impl<C> RejectPortfolioShare<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RejectPortfolioShareOutput,
            smithy_http::result::SdkError<crate::error::RejectPortfolioShareError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The type of shared portfolios to reject. The default is to reject imported portfolios.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AWS_ORGANIZATIONS</code> - Reject portfolios shared by the management account of your
        /// organization.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>IMPORTED</code> - Reject imported portfolios.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>AWS_SERVICECATALOG</code> - Not supported. (Throws ResourceNotFoundException.)</p>
        /// </li>
        /// </ul>
        /// <p>For example, <code>aws servicecatalog reject-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS</code>
        /// </p>
        pub fn portfolio_share_type(mut self, input: crate::model::PortfolioShareType) -> Self {
            self.inner = self.inner.portfolio_share_type(input);
            self
        }
        pub fn set_portfolio_share_type(
            mut self,
            input: std::option::Option<crate::model::PortfolioShareType>,
        ) -> Self {
            self.inner = self.inner.set_portfolio_share_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ScanProvisionedProducts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::scan_provisioned_products_input::Builder,
    }
    impl<C> ScanProvisionedProducts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ScanProvisionedProductsOutput,
            smithy_http::result::SdkError<crate::error::ScanProvisionedProductsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
        pub fn access_level_filter(mut self, input: crate::model::AccessLevelFilter) -> Self {
            self.inner = self.inner.access_level_filter(input);
            self
        }
        pub fn set_access_level_filter(
            mut self,
            input: std::option::Option<crate::model::AccessLevelFilter>,
        ) -> Self {
            self.inner = self.inner.set_access_level_filter(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SearchProducts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::search_products_input::Builder,
    }
    impl<C> SearchProducts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SearchProductsOutput,
            smithy_http::result::SdkError<crate::error::SearchProductsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The search filters. If no search filters are specified, the output includes
        /// all products to which the caller has access.</p>
        pub fn filters(
            mut self,
            k: impl Into<crate::model::ProductViewFilterBy>,
            v: impl Into<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.filters(k, v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::ProductViewFilterBy,
                    std::vec::Vec<std::string::String>,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The sort field. If no value is specified, the results are not sorted.</p>
        pub fn sort_by(mut self, input: crate::model::ProductViewSortBy) -> Self {
            self.inner = self.inner.sort_by(input);
            self
        }
        pub fn set_sort_by(
            mut self,
            input: std::option::Option<crate::model::ProductViewSortBy>,
        ) -> Self {
            self.inner = self.inner.set_sort_by(input);
            self
        }
        /// <p>The sort order. If no value is specified, the results are not sorted.</p>
        pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
            self.inner = self.inner.sort_order(input);
            self
        }
        pub fn set_sort_order(
            mut self,
            input: std::option::Option<crate::model::SortOrder>,
        ) -> Self {
            self.inner = self.inner.set_sort_order(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SearchProductsAsAdmin<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::search_products_as_admin_input::Builder,
    }
    impl<C> SearchProductsAsAdmin<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SearchProductsAsAdminOutput,
            smithy_http::result::SdkError<crate::error::SearchProductsAsAdminError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The search filters. If no search filters are specified, the output includes all products
        /// to which the administrator has access.</p>
        pub fn filters(
            mut self,
            k: impl Into<crate::model::ProductViewFilterBy>,
            v: impl Into<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.filters(k, v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::ProductViewFilterBy,
                    std::vec::Vec<std::string::String>,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The sort field. If no value is specified, the results are not sorted.</p>
        pub fn sort_by(mut self, input: crate::model::ProductViewSortBy) -> Self {
            self.inner = self.inner.sort_by(input);
            self
        }
        pub fn set_sort_by(
            mut self,
            input: std::option::Option<crate::model::ProductViewSortBy>,
        ) -> Self {
            self.inner = self.inner.set_sort_by(input);
            self
        }
        /// <p>The sort order. If no value is specified, the results are not sorted.</p>
        pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
            self.inner = self.inner.sort_order(input);
            self
        }
        pub fn set_sort_order(
            mut self,
            input: std::option::Option<crate::model::SortOrder>,
        ) -> Self {
            self.inner = self.inner.set_sort_order(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>Access level of the source of the product.</p>
        pub fn product_source(mut self, input: crate::model::ProductSource) -> Self {
            self.inner = self.inner.product_source(input);
            self
        }
        pub fn set_product_source(
            mut self,
            input: std::option::Option<crate::model::ProductSource>,
        ) -> Self {
            self.inner = self.inner.set_product_source(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SearchProvisionedProducts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::search_provisioned_products_input::Builder,
    }
    impl<C> SearchProvisionedProducts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SearchProvisionedProductsOutput,
            smithy_http::result::SdkError<crate::error::SearchProvisionedProductsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
        pub fn access_level_filter(mut self, input: crate::model::AccessLevelFilter) -> Self {
            self.inner = self.inner.access_level_filter(input);
            self
        }
        pub fn set_access_level_filter(
            mut self,
            input: std::option::Option<crate::model::AccessLevelFilter>,
        ) -> Self {
            self.inner = self.inner.set_access_level_filter(input);
            self
        }
        /// <p>The search filters.</p>
        /// <p>When the key is <code>SearchQuery</code>, the searchable fields are <code>arn</code>,
        /// <code>createdTime</code>, <code>id</code>, <code>lastRecordId</code>,
        /// <code>idempotencyToken</code>, <code>name</code>, <code>physicalId</code>, <code>productId</code>,
        /// <code>provisioningArtifact</code>, <code>type</code>, <code>status</code>,
        /// <code>tags</code>, <code>userArn</code>, <code>userArnSession</code>, <code>lastProvisioningRecordId</code>, <code>lastSuccessfulProvisioningRecordId</code>,
        /// <code>productName</code>, and <code>provisioningArtifactName</code>.</p>
        /// <p>Example: <code>"SearchQuery":["status:AVAILABLE"]</code>
        /// </p>
        pub fn filters(
            mut self,
            k: impl Into<crate::model::ProvisionedProductViewFilterBy>,
            v: impl Into<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.filters(k, v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::ProvisionedProductViewFilterBy,
                    std::vec::Vec<std::string::String>,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>The sort field. If no value is specified, the results are not sorted. The valid values are <code>arn</code>, <code>id</code>, <code>name</code>,
        /// and <code>lastRecordId</code>.</p>
        pub fn sort_by(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sort_by(input);
            self
        }
        pub fn set_sort_by(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_sort_by(input);
            self
        }
        /// <p>The sort order. If no value is specified, the results are not sorted.</p>
        pub fn sort_order(mut self, input: crate::model::SortOrder) -> Self {
            self.inner = self.inner.sort_order(input);
            self
        }
        pub fn set_sort_order(
            mut self,
            input: std::option::Option<crate::model::SortOrder>,
        ) -> Self {
            self.inner = self.inner.set_sort_order(input);
            self
        }
        /// <p>The maximum number of items to return with this call.</p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
        /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
        pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.page_token(input);
            self
        }
        pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_page_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TerminateProvisionedProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::terminate_provisioned_product_input::Builder,
    }
    impl<C> TerminateProvisionedProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TerminateProvisionedProductOutput,
            smithy_http::result::SdkError<crate::error::TerminateProvisionedProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the provisioned product. You cannot specify both
        /// <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>The identifier of the provisioned product. You cannot specify both
        /// <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>An idempotency token that uniquely identifies the termination request. This token is
        /// only valid during the termination process. After the provisioned product is terminated,
        /// subsequent requests to terminate the same provisioned product always return
        /// <b>ResourceNotFound</b>.</p>
        pub fn terminate_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.terminate_token(input);
            self
        }
        pub fn set_terminate_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_terminate_token(input);
            self
        }
        /// <p>If set to true, AWS Service Catalog stops managing the specified provisioned product even
        /// if it cannot delete the underlying resources.</p>
        pub fn ignore_errors(mut self, input: bool) -> Self {
            self.inner = self.inner.ignore_errors(input);
            self
        }
        pub fn set_ignore_errors(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ignore_errors(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>When this boolean parameter is set to true, the <code>TerminateProvisionedProduct</code> API deletes
        /// the Service Catalog provisioned product. However, it does not remove the CloudFormation
        /// stack, stack set, or the underlying resources of the deleted provisioned product. The
        /// default value is false.</p>
        pub fn retain_physical_resources(mut self, input: bool) -> Self {
            self.inner = self.inner.retain_physical_resources(input);
            self
        }
        pub fn set_retain_physical_resources(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_retain_physical_resources(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateConstraint<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_constraint_input::Builder,
    }
    impl<C> UpdateConstraint<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConstraintOutput,
            smithy_http::result::SdkError<crate::error::UpdateConstraintError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the constraint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The updated description of the constraint.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:</p>
        /// <dl>
        /// <dt>LAUNCH</dt>
        /// <dd>
        /// <p>You are required to specify either the <code>RoleArn</code> or the <code>LocalRoleName</code> but can't use both.</p>
        /// <p>Specify the <code>RoleArn</code> property as follows:</p>
        /// <p>
        /// <code>{"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}</code>
        /// </p>
        /// <p>Specify the <code>LocalRoleName</code> property as follows:</p>
        /// <p>
        /// <code>{"LocalRoleName": "SCBasicLaunchRole"}</code>
        /// </p>
        /// <p>If you specify the <code>LocalRoleName</code> property, when an account uses the launch constraint, the IAM role with that name in the account will be used. This allows launch-role constraints to be
        /// account-agnostic so the administrator can create fewer resources per shared account.</p>
        /// <note>
        /// <p>The given role name must exist in the account used to create the launch constraint and the account of the user who launches a product with this launch constraint.</p>
        /// </note>
        /// <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>
        /// <p>You also cannot have more than one <code>LAUNCH</code> constraint on a product and portfolio.</p>
        /// </dd>
        /// <dt>NOTIFICATION</dt>
        /// <dd>
        /// <p>Specify the <code>NotificationArns</code> property as follows:</p>
        /// <p>
        /// <code>{"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}</code>
        /// </p>
        /// </dd>
        /// <dt>RESOURCE_UPDATE</dt>
        /// <dd>
        /// <p>Specify the <code>TagUpdatesOnProvisionedProduct</code> property as follows:</p>
        /// <p>
        /// <code>{"Version":"2.0","Properties":{"TagUpdateOnProvisionedProduct":"String"}}</code>
        /// </p>
        /// <p>The <code>TagUpdatesOnProvisionedProduct</code> property accepts a string value of <code>ALLOWED</code> or <code>NOT_ALLOWED</code>.</p>
        /// </dd>
        /// <dt>STACKSET</dt>
        /// <dd>
        /// <p>Specify the <code>Parameters</code> property as follows:</p>
        /// <p>
        /// <code>{"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}</code>
        /// </p>
        /// <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>
        /// <p>You also cannot have more than one <code>STACKSET</code> constraint on a product and portfolio.</p>
        /// <p>Products with a <code>STACKSET</code> constraint will launch an AWS CloudFormation stack set.</p>
        /// </dd>
        /// <dt>TEMPLATE</dt>
        /// <dd>
        /// <p>Specify the <code>Rules</code> property. For more information, see
        /// <a href="http://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html">Template Constraint Rules</a>.</p>
        /// </dd>
        /// </dl>
        pub fn parameters(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parameters(input);
            self
        }
        pub fn set_parameters(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_parameters(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdatePortfolio<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_portfolio_input::Builder,
    }
    impl<C> UpdatePortfolio<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdatePortfolioOutput,
            smithy_http::result::SdkError<crate::error::UpdatePortfolioError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The portfolio identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The name to use for display purposes.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.display_name(input);
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_display_name(input);
            self
        }
        /// <p>The updated description of the portfolio.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The updated name of the portfolio provider.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The tags to add.</p>
        pub fn add_tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.add_tags(inp);
            self
        }
        pub fn set_add_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_add_tags(input);
            self
        }
        /// <p>The tags to remove.</p>
        pub fn remove_tags(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.remove_tags(inp);
            self
        }
        pub fn set_remove_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_remove_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdatePortfolioShare<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_portfolio_share_input::Builder,
    }
    impl<C> UpdatePortfolioShare<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdatePortfolioShareOutput,
            smithy_http::result::SdkError<crate::error::UpdatePortfolioShareError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The unique identifier of the portfolio for which the share will be updated.</p>
        pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.portfolio_id(input);
            self
        }
        pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_portfolio_id(input);
            self
        }
        /// <p>The AWS Account Id of the recipient account. This field is required when updating an external account to account type share.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(input);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>Information about the organization node.</p>
        pub fn organization_node(mut self, input: crate::model::OrganizationNode) -> Self {
            self.inner = self.inner.organization_node(input);
            self
        }
        pub fn set_organization_node(
            mut self,
            input: std::option::Option<crate::model::OrganizationNode>,
        ) -> Self {
            self.inner = self.inner.set_organization_node(input);
            self
        }
        /// <p>A flag to enable or disable TagOptions sharing for the portfolio share. If this field is not provided, the current state of TagOptions sharing on the portfolio share will not be modified.</p>
        pub fn share_tag_options(mut self, input: bool) -> Self {
            self.inner = self.inner.share_tag_options(input);
            self
        }
        pub fn set_share_tag_options(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_share_tag_options(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_product_input::Builder,
    }
    impl<C> UpdateProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateProductOutput,
            smithy_http::result::SdkError<crate::error::UpdateProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The updated product name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The updated owner of the product.</p>
        pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner(input);
            self
        }
        pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_owner(input);
            self
        }
        /// <p>The updated description of the product.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The updated distributor of the product.</p>
        pub fn distributor(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.distributor(input);
            self
        }
        pub fn set_distributor(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_distributor(input);
            self
        }
        /// <p>The updated support description for the product.</p>
        pub fn support_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_description(input);
            self
        }
        pub fn set_support_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_support_description(input);
            self
        }
        /// <p>The updated support email for the product.</p>
        pub fn support_email(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_email(input);
            self
        }
        pub fn set_support_email(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_support_email(input);
            self
        }
        /// <p>The updated support URL for the product.</p>
        pub fn support_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.support_url(input);
            self
        }
        pub fn set_support_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_support_url(input);
            self
        }
        /// <p>The tags to add to the product.</p>
        pub fn add_tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.add_tags(inp);
            self
        }
        pub fn set_add_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_add_tags(input);
            self
        }
        /// <p>The tags to remove from the product.</p>
        pub fn remove_tags(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.remove_tags(inp);
            self
        }
        pub fn set_remove_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_remove_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateProvisionedProduct<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_provisioned_product_input::Builder,
    }
    impl<C> UpdateProvisionedProduct<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateProvisionedProductOutput,
            smithy_http::result::SdkError<crate::error::UpdateProvisionedProductError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The name of the provisioned product. You cannot specify both
        /// <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
        pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_name(input);
            self
        }
        pub fn set_provisioned_product_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_name(input);
            self
        }
        /// <p>The identifier of the provisioned product. You must provide the name or ID, but not both.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>The identifier of the product. You must provide the name or ID, but not both.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The name of the product. You must provide the name or ID, but not both.</p>
        pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_name(input);
            self
        }
        pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_name(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
        pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_name(input);
            self
        }
        pub fn set_provisioning_artifact_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_name(input);
            self
        }
        /// <p>The path identifier. This value is optional if the product
        /// has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.</p>
        pub fn path_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_id(input);
            self
        }
        pub fn set_path_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_id(input);
            self
        }
        /// <p>The name of the path. You must provide the name or ID, but not both.</p>
        pub fn path_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.path_name(input);
            self
        }
        pub fn set_path_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_path_name(input);
            self
        }
        /// <p>The new parameters.</p>
        pub fn provisioning_parameters(
            mut self,
            inp: impl Into<crate::model::UpdateProvisioningParameter>,
        ) -> Self {
            self.inner = self.inner.provisioning_parameters(inp);
            self
        }
        pub fn set_provisioning_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UpdateProvisioningParameter>>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_parameters(input);
            self
        }
        /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
        pub fn provisioning_preferences(
            mut self,
            input: crate::model::UpdateProvisioningPreferences,
        ) -> Self {
            self.inner = self.inner.provisioning_preferences(input);
            self
        }
        pub fn set_provisioning_preferences(
            mut self,
            input: std::option::Option<crate::model::UpdateProvisioningPreferences>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_preferences(input);
            self
        }
        /// <p>One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The idempotency token that uniquely identifies the provisioning update request.</p>
        pub fn update_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.update_token(input);
            self
        }
        pub fn set_update_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_update_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateProvisionedProductProperties<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_provisioned_product_properties_input::Builder,
    }
    impl<C> UpdateProvisionedProductProperties<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateProvisionedProductPropertiesOutput,
            smithy_http::result::SdkError<crate::error::UpdateProvisionedProductPropertiesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The identifier of the provisioned product.</p>
        pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioned_product_id(input);
            self
        }
        pub fn set_provisioned_product_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_id(input);
            self
        }
        /// <p>A map that contains the provisioned product properties to be updated.</p>
        /// <p>The <code>LAUNCH_ROLE</code> key accepts role ARNs. This key allows an
        /// administrator to call <code>UpdateProvisionedProductProperties</code> to update the launch
        /// role that is associated with a provisioned product. This role is used when an end user
        /// calls a provisioning operation such as <code>UpdateProvisionedProduct</code>,
        /// <code>TerminateProvisionedProduct</code>, or
        /// <code>ExecuteProvisionedProductServiceAction</code>. Only a role ARN is valid. A user ARN is invalid. </p>
        /// <p>The <code>OWNER</code> key accepts user ARNs and role ARNs. The owner is the user
        /// that has permission to see, update, terminate, and execute service actions in the
        /// provisioned product.</p>
        /// <p>The administrator can change the owner of a provisioned product to another IAM user within the same account. Both end user owners and
        /// administrators can see ownership history of the provisioned product using the <code>ListRecordHistory</code> API. The new owner can
        /// describe all past records for the provisioned product using the <code>DescribeRecord</code> API. The previous owner can no longer use <code>DescribeRecord</code>,
        /// but can still see the product's history from when he was an owner using <code>ListRecordHistory</code>.</p>
        /// <p>If a provisioned product ownership is assigned to an end user, they can see and perform any action through the API or
        /// Service Catalog console such as update, terminate, and execute service actions.
        /// If an end user provisions a product and the owner is updated to someone else, they will no longer be able to see or perform any actions through
        /// API or the Service Catalog console on that provisioned product.</p>
        pub fn provisioned_product_properties(
            mut self,
            k: impl Into<crate::model::PropertyKey>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.provisioned_product_properties(k, v);
            self
        }
        pub fn set_provisioned_product_properties(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::PropertyKey, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_provisioned_product_properties(input);
            self
        }
        /// <p>The idempotency token that uniquely identifies the provisioning product update request.</p>
        pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idempotency_token(input);
            self
        }
        pub fn set_idempotency_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idempotency_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateProvisioningArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_provisioning_artifact_input::Builder,
    }
    impl<C> UpdateProvisioningArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateProvisioningArtifactOutput,
            smithy_http::result::SdkError<crate::error::UpdateProvisioningArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
        /// <p>The product identifier.</p>
        pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.product_id(input);
            self
        }
        pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_product_id(input);
            self
        }
        /// <p>The identifier of the provisioning artifact.</p>
        pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provisioning_artifact_id(input);
            self
        }
        pub fn set_provisioning_artifact_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provisioning_artifact_id(input);
            self
        }
        /// <p>The updated name of the provisioning artifact.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The updated description of the provisioning artifact.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Indicates whether the product version is active.</p>
        /// <p>Inactive provisioning artifacts are invisible to end users. End users cannot launch or update a provisioned product from an inactive provisioning artifact.</p>
        pub fn active(mut self, input: bool) -> Self {
            self.inner = self.inner.active(input);
            self
        }
        pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_active(input);
            self
        }
        /// <p>Information set by the administrator to provide guidance to end users about which provisioning artifacts to use.</p>
        /// <p>The <code>DEFAULT</code> value indicates that the product version is active.</p>
        /// <p>The administrator can set the guidance to <code>DEPRECATED</code> to inform
        /// users that the product version is deprecated. Users are able to make updates to a provisioned product
        /// of a deprecated version but cannot launch new provisioned products using a deprecated version.</p>
        pub fn guidance(mut self, input: crate::model::ProvisioningArtifactGuidance) -> Self {
            self.inner = self.inner.guidance(input);
            self
        }
        pub fn set_guidance(
            mut self,
            input: std::option::Option<crate::model::ProvisioningArtifactGuidance>,
        ) -> Self {
            self.inner = self.inner.set_guidance(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateServiceAction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_service_action_input::Builder,
    }
    impl<C> UpdateServiceAction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateServiceActionOutput,
            smithy_http::result::SdkError<crate::error::UpdateServiceActionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The self-service action identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The self-service action name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A map that defines the self-service action.</p>
        pub fn definition(
            mut self,
            k: impl Into<crate::model::ServiceActionDefinitionKey>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.definition(k, v);
            self
        }
        pub fn set_definition(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::ServiceActionDefinitionKey,
                    std::string::String,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_definition(input);
            self
        }
        /// <p>The self-service action description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The language code.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>en</code> - English (default)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>jp</code> - Japanese</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>zh</code> - Chinese</p>
        /// </li>
        /// </ul>
        pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept_language(input);
            self
        }
        pub fn set_accept_language(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_accept_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateTagOption<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_tag_option_input::Builder,
    }
    impl<C> UpdateTagOption<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateTagOptionOutput,
            smithy_http::result::SdkError<crate::error::UpdateTagOptionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The TagOption identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(input);
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(input);
            self
        }
        /// <p>The updated value.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.value(input);
            self
        }
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_value(input);
            self
        }
        /// <p>The updated active state.</p>
        pub fn active(mut self, input: bool) -> Self {
            self.inner = self.inner.active(input);
            self
        }
        pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_active(input);
            self
        }
    }
}
