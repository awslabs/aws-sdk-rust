// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_portfolio_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptPortfolioShareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.portfolio_id {
        object.key("PortfolioId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_budget_with_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateBudgetWithResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.budget_name {
        object.key("BudgetName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.resource_id {
        object.key("ResourceId").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_principal_with_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePrincipalWithPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.accept_language {
        object.key("AcceptLanguage").string(var_6.as_str());
    }
    if let Some(var_7) = &input.portfolio_id {
        object.key("PortfolioId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.principal_arn {
        object.key("PrincipalARN").string(var_8.as_str());
    }
    if let Some(var_9) = &input.principal_type {
        object.key("PrincipalType").string(var_9.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_product_with_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateProductWithPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.accept_language {
        object.key("AcceptLanguage").string(var_10.as_str());
    }
    if let Some(var_11) = &input.product_id {
        object.key("ProductId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.portfolio_id {
        object.key("PortfolioId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.source_portfolio_id {
        object.key("SourcePortfolioId").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_service_action_with_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateServiceActionWithProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.product_id {
        object.key("ProductId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.service_action_id {
        object.key("ServiceActionId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.accept_language {
        object.key("AcceptLanguage").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_tag_option_with_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTagOptionWithResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.resource_id {
        object.key("ResourceId").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tag_option_id {
        object.key("TagOptionId").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_service_action_with_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateServiceActionWithProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.service_action_associations {
        let mut array_21 = object.key("ServiceActionAssociations").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_action_association(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.accept_language {
        object.key("AcceptLanguage").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_service_action_from_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateServiceActionFromProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.service_action_associations {
        let mut array_26 = object.key("ServiceActionAssociations").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_service_action_association(
                    &mut object_28,
                    item_27,
                )?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.accept_language {
        object.key("AcceptLanguage").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.accept_language {
        object.key("AcceptLanguage").string(var_30.as_str());
    }
    if let Some(var_31) = &input.source_product_arn {
        object.key("SourceProductArn").string(var_31.as_str());
    }
    if let Some(var_32) = &input.target_product_id {
        object.key("TargetProductId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.target_product_name {
        object.key("TargetProductName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.source_provisioning_artifact_identifiers {
        let mut array_35 = object
            .key("SourceProvisioningArtifactIdentifiers")
            .start_array();
        for item_36 in var_34 {
            {
                let mut object_37 = array_35.value().start_object();
                for (key_38, value_39) in item_36 {
                    {
                        object_37.key(key_38.as_str()).string(value_39.as_str());
                    }
                }
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_40) = &input.copy_options {
        let mut array_41 = object.key("CopyOptions").start_array();
        for item_42 in var_40 {
            {
                array_41.value().string(item_42.as_str());
            }
        }
        array_41.finish();
    }
    if let Some(var_43) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_constraint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConstraintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.accept_language {
        object.key("AcceptLanguage").string(var_44.as_str());
    }
    if let Some(var_45) = &input.portfolio_id {
        object.key("PortfolioId").string(var_45.as_str());
    }
    if let Some(var_46) = &input.product_id {
        object.key("ProductId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.parameters {
        object.key("Parameters").string(var_47.as_str());
    }
    if let Some(var_48) = &input.r#type {
        object.key("Type").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.accept_language {
        object.key("AcceptLanguage").string(var_51.as_str());
    }
    if let Some(var_52) = &input.display_name {
        object.key("DisplayName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53.as_str());
    }
    if let Some(var_54) = &input.provider_name {
        object.key("ProviderName").string(var_54.as_str());
    }
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_portfolio_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePortfolioShareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.accept_language {
        object.key("AcceptLanguage").string(var_60.as_str());
    }
    if let Some(var_61) = &input.portfolio_id {
        object.key("PortfolioId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.account_id {
        object.key("AccountId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.organization_node {
        let mut object_64 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(&mut object_64, var_63)?;
        object_64.finish();
    }
    if input.share_tag_options {
        object
            .key("ShareTagOptions")
            .boolean(input.share_tag_options);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.accept_language {
        object.key("AcceptLanguage").string(var_65.as_str());
    }
    if let Some(var_66) = &input.name {
        object.key("Name").string(var_66.as_str());
    }
    if let Some(var_67) = &input.owner {
        object.key("Owner").string(var_67.as_str());
    }
    if let Some(var_68) = &input.description {
        object.key("Description").string(var_68.as_str());
    }
    if let Some(var_69) = &input.distributor {
        object.key("Distributor").string(var_69.as_str());
    }
    if let Some(var_70) = &input.support_description {
        object.key("SupportDescription").string(var_70.as_str());
    }
    if let Some(var_71) = &input.support_email {
        object.key("SupportEmail").string(var_71.as_str());
    }
    if let Some(var_72) = &input.support_url {
        object.key("SupportUrl").string(var_72.as_str());
    }
    if let Some(var_73) = &input.product_type {
        object.key("ProductType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.tags {
        let mut array_75 = object.key("Tags").start_array();
        for item_76 in var_74 {
            {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_77, item_76)?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.provisioning_artifact_parameters {
        let mut object_79 = object.key("ProvisioningArtifactParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_artifact_properties(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_80.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioned_product_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisionedProductPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.accept_language {
        object.key("AcceptLanguage").string(var_81.as_str());
    }
    if let Some(var_82) = &input.plan_name {
        object.key("PlanName").string(var_82.as_str());
    }
    if let Some(var_83) = &input.plan_type {
        object.key("PlanType").string(var_83.as_str());
    }
    if let Some(var_84) = &input.notification_arns {
        let mut array_85 = object.key("NotificationArns").start_array();
        for item_86 in var_84 {
            {
                array_85.value().string(item_86.as_str());
            }
        }
        array_85.finish();
    }
    if let Some(var_87) = &input.path_id {
        object.key("PathId").string(var_87.as_str());
    }
    if let Some(var_88) = &input.product_id {
        object.key("ProductId").string(var_88.as_str());
    }
    if let Some(var_89) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_89.as_str());
    }
    if let Some(var_90) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_90.as_str());
    }
    if let Some(var_91) = &input.provisioning_parameters {
        let mut array_92 = object.key("ProvisioningParameters").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_provisioning_parameter(
                    &mut object_94,
                    item_93,
                )?;
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_95.as_str());
    }
    if let Some(var_96) = &input.tags {
        let mut array_97 = object.key("Tags").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_99, item_98)?;
                object_99.finish();
            }
        }
        array_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.accept_language {
        object.key("AcceptLanguage").string(var_100.as_str());
    }
    if let Some(var_101) = &input.product_id {
        object.key("ProductId").string(var_101.as_str());
    }
    if let Some(var_102) = &input.parameters {
        let mut object_103 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_artifact_properties(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    if let Some(var_104) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.name {
        object.key("Name").string(var_105.as_str());
    }
    if let Some(var_106) = &input.definition_type {
        object.key("DefinitionType").string(var_106.as_str());
    }
    if let Some(var_107) = &input.definition {
        let mut object_108 = object.key("Definition").start_object();
        for (key_109, value_110) in var_107 {
            {
                object_108.key(key_109.as_str()).string(value_110.as_str());
            }
        }
        object_108.finish();
    }
    if let Some(var_111) = &input.description {
        object.key("Description").string(var_111.as_str());
    }
    if let Some(var_112) = &input.accept_language {
        object.key("AcceptLanguage").string(var_112.as_str());
    }
    if let Some(var_113) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_tag_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTagOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.key {
        object.key("Key").string(var_114.as_str());
    }
    if let Some(var_115) = &input.value {
        object.key("Value").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_constraint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConstraintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.accept_language {
        object.key("AcceptLanguage").string(var_116.as_str());
    }
    if let Some(var_117) = &input.id {
        object.key("Id").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.accept_language {
        object.key("AcceptLanguage").string(var_118.as_str());
    }
    if let Some(var_119) = &input.id {
        object.key("Id").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_portfolio_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePortfolioShareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.accept_language {
        object.key("AcceptLanguage").string(var_120.as_str());
    }
    if let Some(var_121) = &input.portfolio_id {
        object.key("PortfolioId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.account_id {
        object.key("AccountId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.organization_node {
        let mut object_124 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(
            &mut object_124,
            var_123,
        )?;
        object_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.accept_language {
        object.key("AcceptLanguage").string(var_125.as_str());
    }
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_provisioned_product_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProvisionedProductPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.accept_language {
        object.key("AcceptLanguage").string(var_127.as_str());
    }
    if let Some(var_128) = &input.plan_id {
        object.key("PlanId").string(var_128.as_str());
    }
    if input.ignore_errors {
        object.key("IgnoreErrors").boolean(input.ignore_errors);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.accept_language {
        object.key("AcceptLanguage").string(var_129.as_str());
    }
    if let Some(var_130) = &input.product_id {
        object.key("ProductId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.id {
        object.key("Id").string(var_132.as_str());
    }
    if let Some(var_133) = &input.accept_language {
        object.key("AcceptLanguage").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tag_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.id {
        object.key("Id").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_constraint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConstraintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.accept_language {
        object.key("AcceptLanguage").string(var_135.as_str());
    }
    if let Some(var_136) = &input.id {
        object.key("Id").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_copy_product_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCopyProductStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.accept_language {
        object.key("AcceptLanguage").string(var_137.as_str());
    }
    if let Some(var_138) = &input.copy_product_token {
        object.key("CopyProductToken").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.accept_language {
        object.key("AcceptLanguage").string(var_139.as_str());
    }
    if let Some(var_140) = &input.id {
        object.key("Id").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_shares_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePortfolioSharesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.portfolio_id {
        object.key("PortfolioId").string(var_141.as_str());
    }
    if let Some(var_142) = &input.r#type {
        object.key("Type").string(var_142.as_str());
    }
    if let Some(var_143) = &input.page_token {
        object.key("PageToken").string(var_143.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_portfolio_share_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePortfolioShareStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.portfolio_share_token {
        object.key("PortfolioShareToken").string(var_144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.accept_language {
        object.key("AcceptLanguage").string(var_145.as_str());
    }
    if let Some(var_146) = &input.id {
        object.key("Id").string(var_146.as_str());
    }
    if let Some(var_147) = &input.name {
        object.key("Name").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_as_admin_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProductAsAdminInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.accept_language {
        object.key("AcceptLanguage").string(var_148.as_str());
    }
    if let Some(var_149) = &input.id {
        object.key("Id").string(var_149.as_str());
    }
    if let Some(var_150) = &input.name {
        object.key("Name").string(var_150.as_str());
    }
    if let Some(var_151) = &input.source_portfolio_id {
        object.key("SourcePortfolioId").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_product_view_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProductViewInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.accept_language {
        object.key("AcceptLanguage").string(var_152.as_str());
    }
    if let Some(var_153) = &input.id {
        object.key("Id").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioned_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProvisionedProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.accept_language {
        object.key("AcceptLanguage").string(var_154.as_str());
    }
    if let Some(var_155) = &input.id {
        object.key("Id").string(var_155.as_str());
    }
    if let Some(var_156) = &input.name {
        object.key("Name").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioned_product_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProvisionedProductPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.accept_language {
        object.key("AcceptLanguage").string(var_157.as_str());
    }
    if let Some(var_158) = &input.plan_id {
        object.key("PlanId").string(var_158.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_159) = &input.page_token {
        object.key("PageToken").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.accept_language {
        object.key("AcceptLanguage").string(var_160.as_str());
    }
    if let Some(var_161) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_161.as_str());
    }
    if let Some(var_162) = &input.product_id {
        object.key("ProductId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.provisioning_artifact_name {
        object
            .key("ProvisioningArtifactName")
            .string(var_163.as_str());
    }
    if let Some(var_164) = &input.product_name {
        object.key("ProductName").string(var_164.as_str());
    }
    if input.verbose {
        object.key("Verbose").boolean(input.verbose);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_provisioning_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProvisioningParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.accept_language {
        object.key("AcceptLanguage").string(var_165.as_str());
    }
    if let Some(var_166) = &input.product_id {
        object.key("ProductId").string(var_166.as_str());
    }
    if let Some(var_167) = &input.product_name {
        object.key("ProductName").string(var_167.as_str());
    }
    if let Some(var_168) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_168.as_str());
    }
    if let Some(var_169) = &input.provisioning_artifact_name {
        object
            .key("ProvisioningArtifactName")
            .string(var_169.as_str());
    }
    if let Some(var_170) = &input.path_id {
        object.key("PathId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.path_name {
        object.key("PathName").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_record_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.accept_language {
        object.key("AcceptLanguage").string(var_172.as_str());
    }
    if let Some(var_173) = &input.id {
        object.key("Id").string(var_173.as_str());
    }
    if let Some(var_174) = &input.page_token {
        object.key("PageToken").string(var_174.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.id {
        object.key("Id").string(var_175.as_str());
    }
    if let Some(var_176) = &input.accept_language {
        object.key("AcceptLanguage").string(var_176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_service_action_execution_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServiceActionExecutionParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_177.as_str());
    }
    if let Some(var_178) = &input.service_action_id {
        object.key("ServiceActionId").string(var_178.as_str());
    }
    if let Some(var_179) = &input.accept_language {
        object.key("AcceptLanguage").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_tag_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTagOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.id {
        object.key("Id").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_budget_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateBudgetFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.budget_name {
        object.key("BudgetName").string(var_181.as_str());
    }
    if let Some(var_182) = &input.resource_id {
        object.key("ResourceId").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_principal_from_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePrincipalFromPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.accept_language {
        object.key("AcceptLanguage").string(var_183.as_str());
    }
    if let Some(var_184) = &input.portfolio_id {
        object.key("PortfolioId").string(var_184.as_str());
    }
    if let Some(var_185) = &input.principal_arn {
        object.key("PrincipalARN").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_product_from_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateProductFromPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.accept_language {
        object.key("AcceptLanguage").string(var_186.as_str());
    }
    if let Some(var_187) = &input.product_id {
        object.key("ProductId").string(var_187.as_str());
    }
    if let Some(var_188) = &input.portfolio_id {
        object.key("PortfolioId").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_service_action_from_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateServiceActionFromProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.product_id {
        object.key("ProductId").string(var_189.as_str());
    }
    if let Some(var_190) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_190.as_str());
    }
    if let Some(var_191) = &input.service_action_id {
        object.key("ServiceActionId").string(var_191.as_str());
    }
    if let Some(var_192) = &input.accept_language {
        object.key("AcceptLanguage").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_tag_option_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTagOptionFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.resource_id {
        object.key("ResourceId").string(var_193.as_str());
    }
    if let Some(var_194) = &input.tag_option_id {
        object.key("TagOptionId").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_provisioned_product_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteProvisionedProductPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.accept_language {
        object.key("AcceptLanguage").string(var_195.as_str());
    }
    if let Some(var_196) = &input.plan_id {
        object.key("PlanId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_provisioned_product_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteProvisionedProductServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_198.as_str());
    }
    if let Some(var_199) = &input.service_action_id {
        object.key("ServiceActionId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.execute_token {
        object.key("ExecuteToken").string(var_200.as_str());
    }
    if let Some(var_201) = &input.accept_language {
        object.key("AcceptLanguage").string(var_201.as_str());
    }
    if let Some(var_202) = &input.parameters {
        let mut object_203 = object.key("Parameters").start_object();
        for (key_204, value_205) in var_202 {
            {
                let mut array_206 = object_203.key(key_204).start_array();
                for item_207 in value_205 {
                    {
                        array_206.value().string(item_207.as_str());
                    }
                }
                array_206.finish();
            }
        }
        object_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_provisioned_product_outputs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetProvisionedProductOutputsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.accept_language {
        object.key("AcceptLanguage").string(var_208.as_str());
    }
    if let Some(var_209) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.provisioned_product_name {
        object
            .key("ProvisionedProductName")
            .string(var_210.as_str());
    }
    if let Some(var_211) = &input.output_keys {
        let mut array_212 = object.key("OutputKeys").start_array();
        for item_213 in var_211 {
            {
                array_212.value().string(item_213.as_str());
            }
        }
        array_212.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_214) = &input.page_token {
        object.key("PageToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_as_provisioned_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportAsProvisionedProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.accept_language {
        object.key("AcceptLanguage").string(var_215.as_str());
    }
    if let Some(var_216) = &input.product_id {
        object.key("ProductId").string(var_216.as_str());
    }
    if let Some(var_217) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_217.as_str());
    }
    if let Some(var_218) = &input.provisioned_product_name {
        object
            .key("ProvisionedProductName")
            .string(var_218.as_str());
    }
    if let Some(var_219) = &input.physical_id {
        object.key("PhysicalId").string(var_219.as_str());
    }
    if let Some(var_220) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_accepted_portfolio_shares_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAcceptedPortfolioSharesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.accept_language {
        object.key("AcceptLanguage").string(var_221.as_str());
    }
    if let Some(var_222) = &input.page_token {
        object.key("PageToken").string(var_222.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_223) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_budgets_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBudgetsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.accept_language {
        object.key("AcceptLanguage").string(var_224.as_str());
    }
    if let Some(var_225) = &input.resource_id {
        object.key("ResourceId").string(var_225.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_226) = &input.page_token {
        object.key("PageToken").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_constraints_for_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConstraintsForPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.accept_language {
        object.key("AcceptLanguage").string(var_227.as_str());
    }
    if let Some(var_228) = &input.portfolio_id {
        object.key("PortfolioId").string(var_228.as_str());
    }
    if let Some(var_229) = &input.product_id {
        object.key("ProductId").string(var_229.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_230) = &input.page_token {
        object.key("PageToken").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_launch_paths_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLaunchPathsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.accept_language {
        object.key("AcceptLanguage").string(var_231.as_str());
    }
    if let Some(var_232) = &input.product_id {
        object.key("ProductId").string(var_232.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_233) = &input.page_token {
        object.key("PageToken").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_organization_portfolio_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOrganizationPortfolioAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.accept_language {
        object.key("AcceptLanguage").string(var_234.as_str());
    }
    if let Some(var_235) = &input.portfolio_id {
        object.key("PortfolioId").string(var_235.as_str());
    }
    if let Some(var_236) = &input.organization_node_type {
        object.key("OrganizationNodeType").string(var_236.as_str());
    }
    if let Some(var_237) = &input.page_token {
        object.key("PageToken").string(var_237.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolio_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPortfolioAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.accept_language {
        object.key("AcceptLanguage").string(var_238.as_str());
    }
    if let Some(var_239) = &input.portfolio_id {
        object.key("PortfolioId").string(var_239.as_str());
    }
    if let Some(var_240) = &input.organization_parent_id {
        object.key("OrganizationParentId").string(var_240.as_str());
    }
    if let Some(var_241) = &input.page_token {
        object.key("PageToken").string(var_241.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolios_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPortfoliosInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.accept_language {
        object.key("AcceptLanguage").string(var_242.as_str());
    }
    if let Some(var_243) = &input.page_token {
        object.key("PageToken").string(var_243.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_portfolios_for_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPortfoliosForProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.accept_language {
        object.key("AcceptLanguage").string(var_244.as_str());
    }
    if let Some(var_245) = &input.product_id {
        object.key("ProductId").string(var_245.as_str());
    }
    if let Some(var_246) = &input.page_token {
        object.key("PageToken").string(var_246.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_principals_for_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPrincipalsForPortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.accept_language {
        object.key("AcceptLanguage").string(var_247.as_str());
    }
    if let Some(var_248) = &input.portfolio_id {
        object.key("PortfolioId").string(var_248.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_249) = &input.page_token {
        object.key("PageToken").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioned_product_plans_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProvisionedProductPlansInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.accept_language {
        object.key("AcceptLanguage").string(var_250.as_str());
    }
    if let Some(var_251) = &input.provision_product_id {
        object.key("ProvisionProductId").string(var_251.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_252) = &input.page_token {
        object.key("PageToken").string(var_252.as_str());
    }
    if let Some(var_253) = &input.access_level_filter {
        let mut object_254 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioning_artifacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProvisioningArtifactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.accept_language {
        object.key("AcceptLanguage").string(var_255.as_str());
    }
    if let Some(var_256) = &input.product_id {
        object.key("ProductId").string(var_256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_provisioning_artifacts_for_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProvisioningArtifactsForServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.service_action_id {
        object.key("ServiceActionId").string(var_257.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_258) = &input.page_token {
        object.key("PageToken").string(var_258.as_str());
    }
    if let Some(var_259) = &input.accept_language {
        object.key("AcceptLanguage").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_record_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecordHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.accept_language {
        object.key("AcceptLanguage").string(var_260.as_str());
    }
    if let Some(var_261) = &input.access_level_filter {
        let mut object_262 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    if let Some(var_263) = &input.search_filter {
        let mut object_264 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_list_record_history_search_filter(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_265) = &input.page_token {
        object.key("PageToken").string(var_265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_for_tag_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesForTagOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.tag_option_id {
        object.key("TagOptionId").string(var_266.as_str());
    }
    if let Some(var_267) = &input.resource_type {
        object.key("ResourceType").string(var_267.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_268) = &input.page_token {
        object.key("PageToken").string(var_268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.accept_language {
        object.key("AcceptLanguage").string(var_269.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_270) = &input.page_token {
        object.key("PageToken").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_actions_for_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceActionsForProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.product_id {
        object.key("ProductId").string(var_271.as_str());
    }
    if let Some(var_272) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_272.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_273) = &input.page_token {
        object.key("PageToken").string(var_273.as_str());
    }
    if let Some(var_274) = &input.accept_language {
        object.key("AcceptLanguage").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stack_instances_for_provisioned_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStackInstancesForProvisionedProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.accept_language {
        object.key("AcceptLanguage").string(var_275.as_str());
    }
    if let Some(var_276) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_276.as_str());
    }
    if let Some(var_277) = &input.page_token {
        object.key("PageToken").string(var_277.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tag_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.filters {
        let mut object_279 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_list_tag_options_filters(
            &mut object_279,
            var_278,
        )?;
        object_279.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_280) = &input.page_token {
        object.key("PageToken").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_provision_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ProvisionProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.accept_language {
        object.key("AcceptLanguage").string(var_281.as_str());
    }
    if let Some(var_282) = &input.product_id {
        object.key("ProductId").string(var_282.as_str());
    }
    if let Some(var_283) = &input.product_name {
        object.key("ProductName").string(var_283.as_str());
    }
    if let Some(var_284) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_284.as_str());
    }
    if let Some(var_285) = &input.provisioning_artifact_name {
        object
            .key("ProvisioningArtifactName")
            .string(var_285.as_str());
    }
    if let Some(var_286) = &input.path_id {
        object.key("PathId").string(var_286.as_str());
    }
    if let Some(var_287) = &input.path_name {
        object.key("PathName").string(var_287.as_str());
    }
    if let Some(var_288) = &input.provisioned_product_name {
        object
            .key("ProvisionedProductName")
            .string(var_288.as_str());
    }
    if let Some(var_289) = &input.provisioning_parameters {
        let mut array_290 = object.key("ProvisioningParameters").start_array();
        for item_291 in var_289 {
            {
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(
                    &mut object_292,
                    item_291,
                )?;
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.provisioning_preferences {
        let mut object_294 = object.key("ProvisioningPreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_preferences(
            &mut object_294,
            var_293,
        )?;
        object_294.finish();
    }
    if let Some(var_295) = &input.tags {
        let mut array_296 = object.key("Tags").start_array();
        for item_297 in var_295 {
            {
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_298, item_297)?;
                object_298.finish();
            }
        }
        array_296.finish();
    }
    if let Some(var_299) = &input.notification_arns {
        let mut array_300 = object.key("NotificationArns").start_array();
        for item_301 in var_299 {
            {
                array_300.value().string(item_301.as_str());
            }
        }
        array_300.finish();
    }
    if let Some(var_302) = &input.provision_token {
        object.key("ProvisionToken").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reject_portfolio_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectPortfolioShareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.accept_language {
        object.key("AcceptLanguage").string(var_303.as_str());
    }
    if let Some(var_304) = &input.portfolio_id {
        object.key("PortfolioId").string(var_304.as_str());
    }
    if let Some(var_305) = &input.portfolio_share_type {
        object.key("PortfolioShareType").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_scan_provisioned_products_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ScanProvisionedProductsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.accept_language {
        object.key("AcceptLanguage").string(var_306.as_str());
    }
    if let Some(var_307) = &input.access_level_filter {
        let mut object_308 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(
            &mut object_308,
            var_307,
        )?;
        object_308.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_309) = &input.page_token {
        object.key("PageToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_products_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProductsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.accept_language {
        object.key("AcceptLanguage").string(var_310.as_str());
    }
    if let Some(var_311) = &input.filters {
        let mut object_312 = object.key("Filters").start_object();
        for (key_313, value_314) in var_311 {
            {
                let mut array_315 = object_312.key(key_313.as_str()).start_array();
                for item_316 in value_314 {
                    {
                        array_315.value().string(item_316.as_str());
                    }
                }
                array_315.finish();
            }
        }
        object_312.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_317) = &input.sort_by {
        object.key("SortBy").string(var_317.as_str());
    }
    if let Some(var_318) = &input.sort_order {
        object.key("SortOrder").string(var_318.as_str());
    }
    if let Some(var_319) = &input.page_token {
        object.key("PageToken").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_products_as_admin_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProductsAsAdminInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.accept_language {
        object.key("AcceptLanguage").string(var_320.as_str());
    }
    if let Some(var_321) = &input.portfolio_id {
        object.key("PortfolioId").string(var_321.as_str());
    }
    if let Some(var_322) = &input.filters {
        let mut object_323 = object.key("Filters").start_object();
        for (key_324, value_325) in var_322 {
            {
                let mut array_326 = object_323.key(key_324.as_str()).start_array();
                for item_327 in value_325 {
                    {
                        array_326.value().string(item_327.as_str());
                    }
                }
                array_326.finish();
            }
        }
        object_323.finish();
    }
    if let Some(var_328) = &input.sort_by {
        object.key("SortBy").string(var_328.as_str());
    }
    if let Some(var_329) = &input.sort_order {
        object.key("SortOrder").string(var_329.as_str());
    }
    if let Some(var_330) = &input.page_token {
        object.key("PageToken").string(var_330.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_331) = &input.product_source {
        object.key("ProductSource").string(var_331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_provisioned_products_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchProvisionedProductsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.accept_language {
        object.key("AcceptLanguage").string(var_332.as_str());
    }
    if let Some(var_333) = &input.access_level_filter {
        let mut object_334 = object.key("AccessLevelFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_access_level_filter(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.filters {
        let mut object_336 = object.key("Filters").start_object();
        for (key_337, value_338) in var_335 {
            {
                let mut array_339 = object_336.key(key_337.as_str()).start_array();
                for item_340 in value_338 {
                    {
                        array_339.value().string(item_340.as_str());
                    }
                }
                array_339.finish();
            }
        }
        object_336.finish();
    }
    if let Some(var_341) = &input.sort_by {
        object.key("SortBy").string(var_341.as_str());
    }
    if let Some(var_342) = &input.sort_order {
        object.key("SortOrder").string(var_342.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_343) = &input.page_token {
        object.key("PageToken").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_provisioned_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateProvisionedProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.provisioned_product_name {
        object
            .key("ProvisionedProductName")
            .string(var_344.as_str());
    }
    if let Some(var_345) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_345.as_str());
    }
    if let Some(var_346) = &input.terminate_token {
        object.key("TerminateToken").string(var_346.as_str());
    }
    if input.ignore_errors {
        object.key("IgnoreErrors").boolean(input.ignore_errors);
    }
    if let Some(var_347) = &input.accept_language {
        object.key("AcceptLanguage").string(var_347.as_str());
    }
    if input.retain_physical_resources {
        object
            .key("RetainPhysicalResources")
            .boolean(input.retain_physical_resources);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_constraint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConstraintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.accept_language {
        object.key("AcceptLanguage").string(var_348.as_str());
    }
    if let Some(var_349) = &input.id {
        object.key("Id").string(var_349.as_str());
    }
    if let Some(var_350) = &input.description {
        object.key("Description").string(var_350.as_str());
    }
    if let Some(var_351) = &input.parameters {
        object.key("Parameters").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_portfolio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePortfolioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.accept_language {
        object.key("AcceptLanguage").string(var_352.as_str());
    }
    if let Some(var_353) = &input.id {
        object.key("Id").string(var_353.as_str());
    }
    if let Some(var_354) = &input.display_name {
        object.key("DisplayName").string(var_354.as_str());
    }
    if let Some(var_355) = &input.description {
        object.key("Description").string(var_355.as_str());
    }
    if let Some(var_356) = &input.provider_name {
        object.key("ProviderName").string(var_356.as_str());
    }
    if let Some(var_357) = &input.add_tags {
        let mut array_358 = object.key("AddTags").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_360, item_359)?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.remove_tags {
        let mut array_362 = object.key("RemoveTags").start_array();
        for item_363 in var_361 {
            {
                array_362.value().string(item_363.as_str());
            }
        }
        array_362.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_portfolio_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePortfolioShareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.accept_language {
        object.key("AcceptLanguage").string(var_364.as_str());
    }
    if let Some(var_365) = &input.portfolio_id {
        object.key("PortfolioId").string(var_365.as_str());
    }
    if let Some(var_366) = &input.account_id {
        object.key("AccountId").string(var_366.as_str());
    }
    if let Some(var_367) = &input.organization_node {
        let mut object_368 = object.key("OrganizationNode").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_node(
            &mut object_368,
            var_367,
        )?;
        object_368.finish();
    }
    if let Some(var_369) = &input.share_tag_options {
        object.key("ShareTagOptions").boolean(*var_369);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.accept_language {
        object.key("AcceptLanguage").string(var_370.as_str());
    }
    if let Some(var_371) = &input.id {
        object.key("Id").string(var_371.as_str());
    }
    if let Some(var_372) = &input.name {
        object.key("Name").string(var_372.as_str());
    }
    if let Some(var_373) = &input.owner {
        object.key("Owner").string(var_373.as_str());
    }
    if let Some(var_374) = &input.description {
        object.key("Description").string(var_374.as_str());
    }
    if let Some(var_375) = &input.distributor {
        object.key("Distributor").string(var_375.as_str());
    }
    if let Some(var_376) = &input.support_description {
        object.key("SupportDescription").string(var_376.as_str());
    }
    if let Some(var_377) = &input.support_email {
        object.key("SupportEmail").string(var_377.as_str());
    }
    if let Some(var_378) = &input.support_url {
        object.key("SupportUrl").string(var_378.as_str());
    }
    if let Some(var_379) = &input.add_tags {
        let mut array_380 = object.key("AddTags").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_382, item_381)?;
                object_382.finish();
            }
        }
        array_380.finish();
    }
    if let Some(var_383) = &input.remove_tags {
        let mut array_384 = object.key("RemoveTags").start_array();
        for item_385 in var_383 {
            {
                array_384.value().string(item_385.as_str());
            }
        }
        array_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioned_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisionedProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.accept_language {
        object.key("AcceptLanguage").string(var_386.as_str());
    }
    if let Some(var_387) = &input.provisioned_product_name {
        object
            .key("ProvisionedProductName")
            .string(var_387.as_str());
    }
    if let Some(var_388) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_388.as_str());
    }
    if let Some(var_389) = &input.product_id {
        object.key("ProductId").string(var_389.as_str());
    }
    if let Some(var_390) = &input.product_name {
        object.key("ProductName").string(var_390.as_str());
    }
    if let Some(var_391) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_391.as_str());
    }
    if let Some(var_392) = &input.provisioning_artifact_name {
        object
            .key("ProvisioningArtifactName")
            .string(var_392.as_str());
    }
    if let Some(var_393) = &input.path_id {
        object.key("PathId").string(var_393.as_str());
    }
    if let Some(var_394) = &input.path_name {
        object.key("PathName").string(var_394.as_str());
    }
    if let Some(var_395) = &input.provisioning_parameters {
        let mut array_396 = object.key("ProvisioningParameters").start_array();
        for item_397 in var_395 {
            {
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_provisioning_parameter(
                    &mut object_398,
                    item_397,
                )?;
                object_398.finish();
            }
        }
        array_396.finish();
    }
    if let Some(var_399) = &input.provisioning_preferences {
        let mut object_400 = object.key("ProvisioningPreferences").start_object();
        crate::json_ser::serialize_structure_crate_model_update_provisioning_preferences(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if let Some(var_401) = &input.tags {
        let mut array_402 = object.key("Tags").start_array();
        for item_403 in var_401 {
            {
                let mut object_404 = array_402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_404, item_403)?;
                object_404.finish();
            }
        }
        array_402.finish();
    }
    if let Some(var_405) = &input.update_token {
        object.key("UpdateToken").string(var_405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioned_product_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisionedProductPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.accept_language {
        object.key("AcceptLanguage").string(var_406.as_str());
    }
    if let Some(var_407) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_407.as_str());
    }
    if let Some(var_408) = &input.provisioned_product_properties {
        let mut object_409 = object.key("ProvisionedProductProperties").start_object();
        for (key_410, value_411) in var_408 {
            {
                object_409.key(key_410.as_str()).string(value_411.as_str());
            }
        }
        object_409.finish();
    }
    if let Some(var_412) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_412.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioning_artifact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisioningArtifactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.accept_language {
        object.key("AcceptLanguage").string(var_413.as_str());
    }
    if let Some(var_414) = &input.product_id {
        object.key("ProductId").string(var_414.as_str());
    }
    if let Some(var_415) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_415.as_str());
    }
    if let Some(var_416) = &input.name {
        object.key("Name").string(var_416.as_str());
    }
    if let Some(var_417) = &input.description {
        object.key("Description").string(var_417.as_str());
    }
    if let Some(var_418) = &input.active {
        object.key("Active").boolean(*var_418);
    }
    if let Some(var_419) = &input.guidance {
        object.key("Guidance").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.id {
        object.key("Id").string(var_420.as_str());
    }
    if let Some(var_421) = &input.name {
        object.key("Name").string(var_421.as_str());
    }
    if let Some(var_422) = &input.definition {
        let mut object_423 = object.key("Definition").start_object();
        for (key_424, value_425) in var_422 {
            {
                object_423.key(key_424.as_str()).string(value_425.as_str());
            }
        }
        object_423.finish();
    }
    if let Some(var_426) = &input.description {
        object.key("Description").string(var_426.as_str());
    }
    if let Some(var_427) = &input.accept_language {
        object.key("AcceptLanguage").string(var_427.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_tag_option_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTagOptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.id {
        object.key("Id").string(var_428.as_str());
    }
    if let Some(var_429) = &input.value {
        object.key("Value").string(var_429.as_str());
    }
    if let Some(var_430) = &input.active {
        object.key("Active").boolean(*var_430);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_action_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceActionAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.service_action_id {
        object.key("ServiceActionId").string(var_431.as_str());
    }
    if let Some(var_432) = &input.product_id {
        object.key("ProductId").string(var_432.as_str());
    }
    if let Some(var_433) = &input.provisioning_artifact_id {
        object
            .key("ProvisioningArtifactId")
            .string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.key {
        object.key("Key").string(var_434.as_str());
    }
    if let Some(var_435) = &input.value {
        object.key("Value").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.r#type {
        object.key("Type").string(var_436.as_str());
    }
    if let Some(var_437) = &input.value {
        object.key("Value").string(var_437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_artifact_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningArtifactProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.name {
        object.key("Name").string(var_438.as_str());
    }
    if let Some(var_439) = &input.description {
        object.key("Description").string(var_439.as_str());
    }
    if let Some(var_440) = &input.info {
        let mut object_441 = object.key("Info").start_object();
        for (key_442, value_443) in var_440 {
            {
                object_441.key(key_442).string(value_443.as_str());
            }
        }
        object_441.finish();
    }
    if let Some(var_444) = &input.r#type {
        object.key("Type").string(var_444.as_str());
    }
    if input.disable_template_validation {
        object
            .key("DisableTemplateValidation")
            .boolean(input.disable_template_validation);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_provisioning_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateProvisioningParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.key {
        object.key("Key").string(var_445.as_str());
    }
    if let Some(var_446) = &input.value {
        object.key("Value").string(var_446.as_str());
    }
    if input.use_previous_value {
        object
            .key("UsePreviousValue")
            .boolean(input.use_previous_value);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_level_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessLevelFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.key {
        object.key("Key").string(var_447.as_str());
    }
    if let Some(var_448) = &input.value {
        object.key("Value").string(var_448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_record_history_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListRecordHistorySearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.key {
        object.key("Key").string(var_449.as_str());
    }
    if let Some(var_450) = &input.value {
        object.key("Value").string(var_450.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_tag_options_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListTagOptionsFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.key {
        object.key("Key").string(var_451.as_str());
    }
    if let Some(var_452) = &input.value {
        object.key("Value").string(var_452.as_str());
    }
    if let Some(var_453) = &input.active {
        object.key("Active").boolean(*var_453);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.key {
        object.key("Key").string(var_454.as_str());
    }
    if let Some(var_455) = &input.value {
        object.key("Value").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_preferences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningPreferences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.stack_set_accounts {
        let mut array_457 = object.key("StackSetAccounts").start_array();
        for item_458 in var_456 {
            {
                array_457.value().string(item_458.as_str());
            }
        }
        array_457.finish();
    }
    if let Some(var_459) = &input.stack_set_regions {
        let mut array_460 = object.key("StackSetRegions").start_array();
        for item_461 in var_459 {
            {
                array_460.value().string(item_461.as_str());
            }
        }
        array_460.finish();
    }
    if let Some(var_462) = &input.stack_set_failure_tolerance_count {
        object.key("StackSetFailureToleranceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    if let Some(var_463) = &input.stack_set_failure_tolerance_percentage {
        object.key("StackSetFailureTolerancePercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_463).into()),
        );
    }
    if let Some(var_464) = &input.stack_set_max_concurrency_count {
        object.key("StackSetMaxConcurrencyCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.stack_set_max_concurrency_percentage {
        object.key("StackSetMaxConcurrencyPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_465).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_provisioning_preferences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateProvisioningPreferences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.stack_set_accounts {
        let mut array_467 = object.key("StackSetAccounts").start_array();
        for item_468 in var_466 {
            {
                array_467.value().string(item_468.as_str());
            }
        }
        array_467.finish();
    }
    if let Some(var_469) = &input.stack_set_regions {
        let mut array_470 = object.key("StackSetRegions").start_array();
        for item_471 in var_469 {
            {
                array_470.value().string(item_471.as_str());
            }
        }
        array_470.finish();
    }
    if let Some(var_472) = &input.stack_set_failure_tolerance_count {
        object.key("StackSetFailureToleranceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_472).into()),
        );
    }
    if let Some(var_473) = &input.stack_set_failure_tolerance_percentage {
        object.key("StackSetFailureTolerancePercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    if let Some(var_474) = &input.stack_set_max_concurrency_count {
        object.key("StackSetMaxConcurrencyCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    if let Some(var_475) = &input.stack_set_max_concurrency_percentage {
        object.key("StackSetMaxConcurrencyPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.stack_set_operation_type {
        object.key("StackSetOperationType").string(var_476.as_str());
    }
    Ok(())
}
