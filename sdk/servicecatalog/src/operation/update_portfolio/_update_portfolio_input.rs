// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePortfolioInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The portfolio identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name to use for display purposes.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The updated description of the portfolio.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated name of the portfolio provider.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The tags to add.</p>
    #[doc(hidden)]
    pub add_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The tags to remove.</p>
    #[doc(hidden)]
    pub remove_tags: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdatePortfolioInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The portfolio identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name to use for display purposes.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The updated description of the portfolio.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated name of the portfolio provider.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The tags to add.</p>
    pub fn add_tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.add_tags.as_deref()
    }
    /// <p>The tags to remove.</p>
    pub fn remove_tags(&self) -> std::option::Option<&[std::string::String]> {
        self.remove_tags.as_deref()
    }
}
impl UpdatePortfolioInput {
    /// Creates a new builder-style object to manufacture [`UpdatePortfolioInput`](crate::operation::update_portfolio::UpdatePortfolioInput).
    pub fn builder() -> crate::operation::update_portfolio::builders::UpdatePortfolioInputBuilder {
        crate::operation::update_portfolio::builders::UpdatePortfolioInputBuilder::default()
    }
}

/// A builder for [`UpdatePortfolioInput`](crate::operation::update_portfolio::UpdatePortfolioInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePortfolioInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) add_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) remove_tags: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdatePortfolioInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name to use for display purposes.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name to use for display purposes.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The updated description of the portfolio.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated description of the portfolio.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated name of the portfolio provider.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The updated name of the portfolio provider.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// Appends an item to `add_tags`.
    ///
    /// To override the contents of this collection use [`set_add_tags`](Self::set_add_tags).
    ///
    /// <p>The tags to add.</p>
    pub fn add_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.add_tags.unwrap_or_default();
        v.push(input);
        self.add_tags = Some(v);
        self
    }
    /// <p>The tags to add.</p>
    pub fn set_add_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.add_tags = input;
        self
    }
    /// Appends an item to `remove_tags`.
    ///
    /// To override the contents of this collection use [`set_remove_tags`](Self::set_remove_tags).
    ///
    /// <p>The tags to remove.</p>
    pub fn remove_tags(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.remove_tags.unwrap_or_default();
        v.push(input.into());
        self.remove_tags = Some(v);
        self
    }
    /// <p>The tags to remove.</p>
    pub fn set_remove_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.remove_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePortfolioInput`](crate::operation::update_portfolio::UpdatePortfolioInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_portfolio::UpdatePortfolioInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_portfolio::UpdatePortfolioInput {
            accept_language: self.accept_language,
            id: self.id,
            display_name: self.display_name,
            description: self.description,
            provider_name: self.provider_name,
            add_tags: self.add_tags,
            remove_tags: self.remove_tags,
        })
    }
}
