// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProvisioningArtifactInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The identifier of the provisioning artifact.</p>
    #[doc(hidden)]
    pub provisioning_artifact_id: std::option::Option<std::string::String>,
    /// <p>The product identifier.</p>
    #[doc(hidden)]
    pub product_id: std::option::Option<std::string::String>,
    /// <p>The provisioning artifact name.</p>
    #[doc(hidden)]
    pub provisioning_artifact_name: std::option::Option<std::string::String>,
    /// <p>The product name.</p>
    #[doc(hidden)]
    pub product_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether a verbose level of detail is enabled.</p>
    #[doc(hidden)]
    pub verbose: bool,
}
impl DescribeProvisioningArtifactInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn provisioning_artifact_id(&self) -> std::option::Option<&str> {
        self.provisioning_artifact_id.as_deref()
    }
    /// <p>The product identifier.</p>
    pub fn product_id(&self) -> std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The provisioning artifact name.</p>
    pub fn provisioning_artifact_name(&self) -> std::option::Option<&str> {
        self.provisioning_artifact_name.as_deref()
    }
    /// <p>The product name.</p>
    pub fn product_name(&self) -> std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>Indicates whether a verbose level of detail is enabled.</p>
    pub fn verbose(&self) -> bool {
        self.verbose
    }
}
impl DescribeProvisioningArtifactInput {
    /// Creates a new builder-style object to manufacture [`DescribeProvisioningArtifactInput`](crate::operation::describe_provisioning_artifact::DescribeProvisioningArtifactInput).
    pub fn builder() -> crate::operation::describe_provisioning_artifact::builders::DescribeProvisioningArtifactInputBuilder{
        crate::operation::describe_provisioning_artifact::builders::DescribeProvisioningArtifactInputBuilder::default()
    }
}

/// A builder for [`DescribeProvisioningArtifactInput`](crate::operation::describe_provisioning_artifact::DescribeProvisioningArtifactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeProvisioningArtifactInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) provisioning_artifact_id: std::option::Option<std::string::String>,
    pub(crate) product_id: std::option::Option<std::string::String>,
    pub(crate) provisioning_artifact_name: std::option::Option<std::string::String>,
    pub(crate) product_name: std::option::Option<std::string::String>,
    pub(crate) verbose: std::option::Option<bool>,
}
impl DescribeProvisioningArtifactInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioning_artifact_id = Some(input.into());
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn set_provisioning_artifact_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioning_artifact_id = input;
        self
    }
    /// <p>The product identifier.</p>
    pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_id = Some(input.into());
        self
    }
    /// <p>The product identifier.</p>
    pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The provisioning artifact name.</p>
    pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioning_artifact_name = Some(input.into());
        self
    }
    /// <p>The provisioning artifact name.</p>
    pub fn set_provisioning_artifact_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioning_artifact_name = input;
        self
    }
    /// <p>The product name.</p>
    pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_name = Some(input.into());
        self
    }
    /// <p>The product name.</p>
    pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>Indicates whether a verbose level of detail is enabled.</p>
    pub fn verbose(mut self, input: bool) -> Self {
        self.verbose = Some(input);
        self
    }
    /// <p>Indicates whether a verbose level of detail is enabled.</p>
    pub fn set_verbose(mut self, input: std::option::Option<bool>) -> Self {
        self.verbose = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProvisioningArtifactInput`](crate::operation::describe_provisioning_artifact::DescribeProvisioningArtifactInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_provisioning_artifact::DescribeProvisioningArtifactInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_provisioning_artifact::DescribeProvisioningArtifactInput {
                accept_language: self.accept_language,
                provisioning_artifact_id: self.provisioning_artifact_id,
                product_id: self.product_id,
                provisioning_artifact_name: self.provisioning_artifact_name,
                product_name: self.product_name,
                verbose: self.verbose.unwrap_or_default(),
            },
        )
    }
}
