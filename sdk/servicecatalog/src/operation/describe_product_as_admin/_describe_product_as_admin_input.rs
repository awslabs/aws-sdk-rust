// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProductAsAdminInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The product identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The product name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the shared portfolio that the specified product is associated with.</p>
    /// <p>You can provide this parameter to retrieve the shared TagOptions associated with the product. If this parameter is provided and if TagOptions sharing is enabled in the portfolio share, the API returns both local and shared TagOptions associated with the product. Otherwise only local TagOptions will be returned. </p>
    #[doc(hidden)]
    pub source_portfolio_id: std::option::Option<std::string::String>,
}
impl DescribeProductAsAdminInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The product identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The product name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier of the shared portfolio that the specified product is associated with.</p>
    /// <p>You can provide this parameter to retrieve the shared TagOptions associated with the product. If this parameter is provided and if TagOptions sharing is enabled in the portfolio share, the API returns both local and shared TagOptions associated with the product. Otherwise only local TagOptions will be returned. </p>
    pub fn source_portfolio_id(&self) -> std::option::Option<&str> {
        self.source_portfolio_id.as_deref()
    }
}
impl DescribeProductAsAdminInput {
    /// Creates a new builder-style object to manufacture [`DescribeProductAsAdminInput`](crate::operation::describe_product_as_admin::DescribeProductAsAdminInput).
    pub fn builder(
    ) -> crate::operation::describe_product_as_admin::builders::DescribeProductAsAdminInputBuilder
    {
        crate::operation::describe_product_as_admin::builders::DescribeProductAsAdminInputBuilder::default()
    }
}

/// A builder for [`DescribeProductAsAdminInput`](crate::operation::describe_product_as_admin::DescribeProductAsAdminInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeProductAsAdminInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) source_portfolio_id: std::option::Option<std::string::String>,
}
impl DescribeProductAsAdminInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The product identifier.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The product identifier.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The product name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The product name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique identifier of the shared portfolio that the specified product is associated with.</p>
    /// <p>You can provide this parameter to retrieve the shared TagOptions associated with the product. If this parameter is provided and if TagOptions sharing is enabled in the portfolio share, the API returns both local and shared TagOptions associated with the product. Otherwise only local TagOptions will be returned. </p>
    pub fn source_portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_portfolio_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the shared portfolio that the specified product is associated with.</p>
    /// <p>You can provide this parameter to retrieve the shared TagOptions associated with the product. If this parameter is provided and if TagOptions sharing is enabled in the portfolio share, the API returns both local and shared TagOptions associated with the product. Otherwise only local TagOptions will be returned. </p>
    pub fn set_source_portfolio_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_portfolio_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProductAsAdminInput`](crate::operation::describe_product_as_admin::DescribeProductAsAdminInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_product_as_admin::DescribeProductAsAdminInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_product_as_admin::DescribeProductAsAdminInput {
                accept_language: self.accept_language,
                id: self.id,
                name: self.name,
                source_portfolio_id: self.source_portfolio_id,
            },
        )
    }
}
