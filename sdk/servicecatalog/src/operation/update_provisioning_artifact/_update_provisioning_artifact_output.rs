// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProvisioningArtifactOutput {
    /// <p>Information about the provisioning artifact.</p>
    #[doc(hidden)]
    pub provisioning_artifact_detail: std::option::Option<crate::types::ProvisioningArtifactDetail>,
    /// <p>The URL of the CloudFormation template in Amazon S3 or GitHub in JSON format.</p>
    #[doc(hidden)]
    pub info:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The status of the current request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl UpdateProvisioningArtifactOutput {
    /// <p>Information about the provisioning artifact.</p>
    pub fn provisioning_artifact_detail(
        &self,
    ) -> std::option::Option<&crate::types::ProvisioningArtifactDetail> {
        self.provisioning_artifact_detail.as_ref()
    }
    /// <p>The URL of the CloudFormation template in Amazon S3 or GitHub in JSON format.</p>
    pub fn info(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.info.as_ref()
    }
    /// <p>The status of the current request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateProvisioningArtifactOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProvisioningArtifactOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProvisioningArtifactOutput`](crate::operation::update_provisioning_artifact::UpdateProvisioningArtifactOutput).
    pub fn builder() -> crate::operation::update_provisioning_artifact::builders::UpdateProvisioningArtifactOutputBuilder{
        crate::operation::update_provisioning_artifact::builders::UpdateProvisioningArtifactOutputBuilder::default()
    }
}

/// A builder for [`UpdateProvisioningArtifactOutput`](crate::operation::update_provisioning_artifact::UpdateProvisioningArtifactOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProvisioningArtifactOutputBuilder {
    pub(crate) provisioning_artifact_detail:
        std::option::Option<crate::types::ProvisioningArtifactDetail>,
    pub(crate) info:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl UpdateProvisioningArtifactOutputBuilder {
    /// <p>Information about the provisioning artifact.</p>
    pub fn provisioning_artifact_detail(
        mut self,
        input: crate::types::ProvisioningArtifactDetail,
    ) -> Self {
        self.provisioning_artifact_detail = Some(input);
        self
    }
    /// <p>Information about the provisioning artifact.</p>
    pub fn set_provisioning_artifact_detail(
        mut self,
        input: std::option::Option<crate::types::ProvisioningArtifactDetail>,
    ) -> Self {
        self.provisioning_artifact_detail = input;
        self
    }
    /// Adds a key-value pair to `info`.
    ///
    /// To override the contents of this collection use [`set_info`](Self::set_info).
    ///
    /// <p>The URL of the CloudFormation template in Amazon S3 or GitHub in JSON format.</p>
    pub fn info(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.info.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.info = Some(hash_map);
        self
    }
    /// <p>The URL of the CloudFormation template in Amazon S3 or GitHub in JSON format.</p>
    pub fn set_info(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.info = input;
        self
    }
    /// <p>The status of the current request.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the current request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProvisioningArtifactOutput`](crate::operation::update_provisioning_artifact::UpdateProvisioningArtifactOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_provisioning_artifact::UpdateProvisioningArtifactOutput {
        crate::operation::update_provisioning_artifact::UpdateProvisioningArtifactOutput {
            provisioning_artifact_detail: self.provisioning_artifact_detail,
            info: self.info,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
