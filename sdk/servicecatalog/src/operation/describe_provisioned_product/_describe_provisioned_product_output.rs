// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeProvisionedProductOutput {
    /// <p>Information about the provisioned product.</p>
    pub provisioned_product_detail: ::std::option::Option<crate::types::ProvisionedProductDetail>,
    /// <p>Any CloudWatch dashboards that were created when provisioning the product.</p>
    pub cloud_watch_dashboards: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchDashboard>>,
    _request_id: Option<String>,
}
impl DescribeProvisionedProductOutput {
    /// <p>Information about the provisioned product.</p>
    pub fn provisioned_product_detail(&self) -> ::std::option::Option<&crate::types::ProvisionedProductDetail> {
        self.provisioned_product_detail.as_ref()
    }
    /// <p>Any CloudWatch dashboards that were created when provisioning the product.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cloud_watch_dashboards.is_none()`.
    pub fn cloud_watch_dashboards(&self) -> &[crate::types::CloudWatchDashboard] {
        self.cloud_watch_dashboards.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeProvisionedProductOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProvisionedProductOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProvisionedProductOutput`](crate::operation::describe_provisioned_product::DescribeProvisionedProductOutput).
    pub fn builder() -> crate::operation::describe_provisioned_product::builders::DescribeProvisionedProductOutputBuilder {
        crate::operation::describe_provisioned_product::builders::DescribeProvisionedProductOutputBuilder::default()
    }
}

/// A builder for [`DescribeProvisionedProductOutput`](crate::operation::describe_provisioned_product::DescribeProvisionedProductOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeProvisionedProductOutputBuilder {
    pub(crate) provisioned_product_detail: ::std::option::Option<crate::types::ProvisionedProductDetail>,
    pub(crate) cloud_watch_dashboards: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchDashboard>>,
    _request_id: Option<String>,
}
impl DescribeProvisionedProductOutputBuilder {
    /// <p>Information about the provisioned product.</p>
    pub fn provisioned_product_detail(mut self, input: crate::types::ProvisionedProductDetail) -> Self {
        self.provisioned_product_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the provisioned product.</p>
    pub fn set_provisioned_product_detail(mut self, input: ::std::option::Option<crate::types::ProvisionedProductDetail>) -> Self {
        self.provisioned_product_detail = input;
        self
    }
    /// <p>Information about the provisioned product.</p>
    pub fn get_provisioned_product_detail(&self) -> &::std::option::Option<crate::types::ProvisionedProductDetail> {
        &self.provisioned_product_detail
    }
    /// Appends an item to `cloud_watch_dashboards`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_dashboards`](Self::set_cloud_watch_dashboards).
    ///
    /// <p>Any CloudWatch dashboards that were created when provisioning the product.</p>
    pub fn cloud_watch_dashboards(mut self, input: crate::types::CloudWatchDashboard) -> Self {
        let mut v = self.cloud_watch_dashboards.unwrap_or_default();
        v.push(input);
        self.cloud_watch_dashboards = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any CloudWatch dashboards that were created when provisioning the product.</p>
    pub fn set_cloud_watch_dashboards(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchDashboard>>) -> Self {
        self.cloud_watch_dashboards = input;
        self
    }
    /// <p>Any CloudWatch dashboards that were created when provisioning the product.</p>
    pub fn get_cloud_watch_dashboards(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CloudWatchDashboard>> {
        &self.cloud_watch_dashboards
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProvisionedProductOutput`](crate::operation::describe_provisioned_product::DescribeProvisionedProductOutput).
    pub fn build(self) -> crate::operation::describe_provisioned_product::DescribeProvisionedProductOutput {
        crate::operation::describe_provisioned_product::DescribeProvisionedProductOutput {
            provisioned_product_detail: self.provisioned_product_detail,
            cloud_watch_dashboards: self.cloud_watch_dashboards,
            _request_id: self._request_id,
        }
    }
}
