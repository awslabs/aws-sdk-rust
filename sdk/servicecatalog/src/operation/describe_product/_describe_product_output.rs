// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeProductOutput {
    /// <p>Summary information about the product view.</p>
    pub product_view_summary: ::std::option::Option<crate::types::ProductViewSummary>,
    /// <p>Information about the provisioning artifacts for the specified product.</p>
    pub provisioning_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::ProvisioningArtifact>>,
    /// <p>Information about the associated budgets.</p>
    pub budgets: ::std::option::Option<::std::vec::Vec<crate::types::BudgetDetail>>,
    /// <p>Information about the associated launch paths.</p>
    pub launch_paths: ::std::option::Option<::std::vec::Vec<crate::types::LaunchPath>>,
    _request_id: Option<String>,
}
impl DescribeProductOutput {
    /// <p>Summary information about the product view.</p>
    pub fn product_view_summary(&self) -> ::std::option::Option<&crate::types::ProductViewSummary> {
        self.product_view_summary.as_ref()
    }
    /// <p>Information about the provisioning artifacts for the specified product.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provisioning_artifacts.is_none()`.
    pub fn provisioning_artifacts(&self) -> &[crate::types::ProvisioningArtifact] {
        self.provisioning_artifacts.as_deref().unwrap_or_default()
    }
    /// <p>Information about the associated budgets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.budgets.is_none()`.
    pub fn budgets(&self) -> &[crate::types::BudgetDetail] {
        self.budgets.as_deref().unwrap_or_default()
    }
    /// <p>Information about the associated launch paths.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.launch_paths.is_none()`.
    pub fn launch_paths(&self) -> &[crate::types::LaunchPath] {
        self.launch_paths.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeProductOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProductOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProductOutput`](crate::operation::describe_product::DescribeProductOutput).
    pub fn builder() -> crate::operation::describe_product::builders::DescribeProductOutputBuilder {
        crate::operation::describe_product::builders::DescribeProductOutputBuilder::default()
    }
}

/// A builder for [`DescribeProductOutput`](crate::operation::describe_product::DescribeProductOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeProductOutputBuilder {
    pub(crate) product_view_summary: ::std::option::Option<crate::types::ProductViewSummary>,
    pub(crate) provisioning_artifacts: ::std::option::Option<::std::vec::Vec<crate::types::ProvisioningArtifact>>,
    pub(crate) budgets: ::std::option::Option<::std::vec::Vec<crate::types::BudgetDetail>>,
    pub(crate) launch_paths: ::std::option::Option<::std::vec::Vec<crate::types::LaunchPath>>,
    _request_id: Option<String>,
}
impl DescribeProductOutputBuilder {
    /// <p>Summary information about the product view.</p>
    pub fn product_view_summary(mut self, input: crate::types::ProductViewSummary) -> Self {
        self.product_view_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summary information about the product view.</p>
    pub fn set_product_view_summary(mut self, input: ::std::option::Option<crate::types::ProductViewSummary>) -> Self {
        self.product_view_summary = input;
        self
    }
    /// <p>Summary information about the product view.</p>
    pub fn get_product_view_summary(&self) -> &::std::option::Option<crate::types::ProductViewSummary> {
        &self.product_view_summary
    }
    /// Appends an item to `provisioning_artifacts`.
    ///
    /// To override the contents of this collection use [`set_provisioning_artifacts`](Self::set_provisioning_artifacts).
    ///
    /// <p>Information about the provisioning artifacts for the specified product.</p>
    pub fn provisioning_artifacts(mut self, input: crate::types::ProvisioningArtifact) -> Self {
        let mut v = self.provisioning_artifacts.unwrap_or_default();
        v.push(input);
        self.provisioning_artifacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the provisioning artifacts for the specified product.</p>
    pub fn set_provisioning_artifacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProvisioningArtifact>>) -> Self {
        self.provisioning_artifacts = input;
        self
    }
    /// <p>Information about the provisioning artifacts for the specified product.</p>
    pub fn get_provisioning_artifacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProvisioningArtifact>> {
        &self.provisioning_artifacts
    }
    /// Appends an item to `budgets`.
    ///
    /// To override the contents of this collection use [`set_budgets`](Self::set_budgets).
    ///
    /// <p>Information about the associated budgets.</p>
    pub fn budgets(mut self, input: crate::types::BudgetDetail) -> Self {
        let mut v = self.budgets.unwrap_or_default();
        v.push(input);
        self.budgets = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the associated budgets.</p>
    pub fn set_budgets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BudgetDetail>>) -> Self {
        self.budgets = input;
        self
    }
    /// <p>Information about the associated budgets.</p>
    pub fn get_budgets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BudgetDetail>> {
        &self.budgets
    }
    /// Appends an item to `launch_paths`.
    ///
    /// To override the contents of this collection use [`set_launch_paths`](Self::set_launch_paths).
    ///
    /// <p>Information about the associated launch paths.</p>
    pub fn launch_paths(mut self, input: crate::types::LaunchPath) -> Self {
        let mut v = self.launch_paths.unwrap_or_default();
        v.push(input);
        self.launch_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the associated launch paths.</p>
    pub fn set_launch_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LaunchPath>>) -> Self {
        self.launch_paths = input;
        self
    }
    /// <p>Information about the associated launch paths.</p>
    pub fn get_launch_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LaunchPath>> {
        &self.launch_paths
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProductOutput`](crate::operation::describe_product::DescribeProductOutput).
    pub fn build(self) -> crate::operation::describe_product::DescribeProductOutput {
        crate::operation::describe_product::DescribeProductOutput {
            product_view_summary: self.product_view_summary,
            provisioning_artifacts: self.provisioning_artifacts,
            budgets: self.budgets,
            launch_paths: self.launch_paths,
            _request_id: self._request_id,
        }
    }
}
