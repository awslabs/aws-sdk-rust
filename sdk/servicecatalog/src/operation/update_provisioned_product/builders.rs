// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_provisioned_product::_update_provisioned_product_output::UpdateProvisionedProductOutputBuilder;

pub use crate::operation::update_provisioned_product::_update_provisioned_product_input::UpdateProvisionedProductInputBuilder;

impl crate::operation::update_provisioned_product::builders::UpdateProvisionedProductInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_provisioned_product::UpdateProvisionedProductOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_provisioned_product::UpdateProvisionedProductError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_provisioned_product();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateProvisionedProduct`.
///
/// <p>Requests updates to the configuration of the specified provisioned product.</p>
/// <p>If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.</p>
/// <p>You can check the status of this request using <code>DescribeRecord</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateProvisionedProductFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_provisioned_product::builders::UpdateProvisionedProductInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_provisioned_product::UpdateProvisionedProductOutput,
        crate::operation::update_provisioned_product::UpdateProvisionedProductError,
    > for UpdateProvisionedProductFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_provisioned_product::UpdateProvisionedProductOutput,
            crate::operation::update_provisioned_product::UpdateProvisionedProductError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateProvisionedProductFluentBuilder {
    /// Creates a new `UpdateProvisionedProduct`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateProvisionedProduct as a reference.
    pub fn as_input(&self) -> &crate::operation::update_provisioned_product::builders::UpdateProvisionedProductInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_provisioned_product::UpdateProvisionedProductOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_provisioned_product::UpdateProvisionedProductError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_provisioned_product::UpdateProvisionedProduct::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_provisioned_product::UpdateProvisionedProduct::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_provisioned_product::UpdateProvisionedProductOutput,
        crate::operation::update_provisioned_product::UpdateProvisionedProductError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li>
    /// <p><code>jp</code> - Japanese</p></li>
    /// <li>
    /// <p><code>zh</code> - Chinese</p></li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.accept_language(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li>
    /// <p><code>jp</code> - Japanese</p></li>
    /// <li>
    /// <p><code>zh</code> - Chinese</p></li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_accept_language(input);
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li>
    /// <p><code>jp</code> - Japanese</p></li>
    /// <li>
    /// <p><code>zh</code> - Chinese</p></li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_accept_language()
    }
    /// <p>The name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    pub fn provisioned_product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provisioned_product_name(input.into());
        self
    }
    /// <p>The name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    pub fn set_provisioned_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provisioned_product_name(input);
        self
    }
    /// <p>The name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>.</p>
    pub fn get_provisioned_product_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provisioned_product_name()
    }
    /// <p>The identifier of the provisioned product. You must provide the name or ID, but not both.</p>
    pub fn provisioned_product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provisioned_product_id(input.into());
        self
    }
    /// <p>The identifier of the provisioned product. You must provide the name or ID, but not both.</p>
    pub fn set_provisioned_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provisioned_product_id(input);
        self
    }
    /// <p>The identifier of the provisioned product. You must provide the name or ID, but not both.</p>
    pub fn get_provisioned_product_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provisioned_product_id()
    }
    /// <p>The identifier of the product. You must provide the name or ID, but not both.</p>
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.product_id(input.into());
        self
    }
    /// <p>The identifier of the product. You must provide the name or ID, but not both.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_product_id(input);
        self
    }
    /// <p>The identifier of the product. You must provide the name or ID, but not both.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_product_id()
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.product_name(input.into());
        self
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn set_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_product_name(input);
        self
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn get_product_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_product_name()
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn provisioning_artifact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provisioning_artifact_id(input.into());
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn set_provisioning_artifact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provisioning_artifact_id(input);
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn get_provisioning_artifact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provisioning_artifact_id()
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn provisioning_artifact_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provisioning_artifact_name(input.into());
        self
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn set_provisioning_artifact_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provisioning_artifact_name(input);
        self
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn get_provisioning_artifact_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provisioning_artifact_name()
    }
    /// <p>The path identifier. This value is optional if the product has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.</p>
    pub fn path_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.path_id(input.into());
        self
    }
    /// <p>The path identifier. This value is optional if the product has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.</p>
    pub fn set_path_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_path_id(input);
        self
    }
    /// <p>The path identifier. This value is optional if the product has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.</p>
    pub fn get_path_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_path_id()
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn path_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.path_name(input.into());
        self
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn set_path_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_path_name(input);
        self
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn get_path_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_path_name()
    }
    ///
    /// Appends an item to `ProvisioningParameters`.
    ///
    /// To override the contents of this collection use [`set_provisioning_parameters`](Self::set_provisioning_parameters).
    ///
    /// <p>The new parameters.</p>
    pub fn provisioning_parameters(mut self, input: crate::types::UpdateProvisioningParameter) -> Self {
        self.inner = self.inner.provisioning_parameters(input);
        self
    }
    /// <p>The new parameters.</p>
    pub fn set_provisioning_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>>) -> Self {
        self.inner = self.inner.set_provisioning_parameters(input);
        self
    }
    /// <p>The new parameters.</p>
    pub fn get_provisioning_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>> {
        self.inner.get_provisioning_parameters()
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn provisioning_preferences(mut self, input: crate::types::UpdateProvisioningPreferences) -> Self {
        self.inner = self.inner.provisioning_preferences(input);
        self
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn set_provisioning_preferences(mut self, input: ::std::option::Option<crate::types::UpdateProvisioningPreferences>) -> Self {
        self.inner = self.inner.set_provisioning_preferences(input);
        self
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn get_provisioning_preferences(&self) -> &::std::option::Option<crate::types::UpdateProvisioningPreferences> {
        self.inner.get_provisioning_preferences()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The idempotency token that uniquely identifies the provisioning update request.</p>
    pub fn update_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.update_token(input.into());
        self
    }
    /// <p>The idempotency token that uniquely identifies the provisioning update request.</p>
    pub fn set_update_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_update_token(input);
        self
    }
    /// <p>The idempotency token that uniquely identifies the provisioning update request.</p>
    pub fn get_update_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_update_token()
    }
}
