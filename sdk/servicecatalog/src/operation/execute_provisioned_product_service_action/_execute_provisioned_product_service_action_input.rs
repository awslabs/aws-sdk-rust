// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecuteProvisionedProductServiceActionInput {
    /// <p>The identifier of the provisioned product.</p>
    #[doc(hidden)]
    pub provisioned_product_id: std::option::Option<std::string::String>,
    /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
    #[doc(hidden)]
    pub service_action_id: std::option::Option<std::string::String>,
    /// <p>An idempotency token that uniquely identifies the execute request.</p>
    #[doc(hidden)]
    pub execute_token: std::option::Option<std::string::String>,
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as <code>TARGET</code>, the provided value will override the default value generated by Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as <code>TARGET</code>.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl ExecuteProvisionedProductServiceActionInput {
    /// <p>The identifier of the provisioned product.</p>
    pub fn provisioned_product_id(&self) -> std::option::Option<&str> {
        self.provisioned_product_id.as_deref()
    }
    /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
    pub fn service_action_id(&self) -> std::option::Option<&str> {
        self.service_action_id.as_deref()
    }
    /// <p>An idempotency token that uniquely identifies the execute request.</p>
    pub fn execute_token(&self) -> std::option::Option<&str> {
        self.execute_token.as_deref()
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as <code>TARGET</code>, the provided value will override the default value generated by Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as <code>TARGET</code>.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.parameters.as_ref()
    }
}
impl ExecuteProvisionedProductServiceActionInput {
    /// Creates a new builder-style object to manufacture [`ExecuteProvisionedProductServiceActionInput`](crate::operation::execute_provisioned_product_service_action::ExecuteProvisionedProductServiceActionInput).
    pub fn builder() -> crate::operation::execute_provisioned_product_service_action::builders::ExecuteProvisionedProductServiceActionInputBuilder{
        crate::operation::execute_provisioned_product_service_action::builders::ExecuteProvisionedProductServiceActionInputBuilder::default()
    }
}

/// A builder for [`ExecuteProvisionedProductServiceActionInput`](crate::operation::execute_provisioned_product_service_action::ExecuteProvisionedProductServiceActionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecuteProvisionedProductServiceActionInputBuilder {
    pub(crate) provisioned_product_id: std::option::Option<std::string::String>,
    pub(crate) service_action_id: std::option::Option<std::string::String>,
    pub(crate) execute_token: std::option::Option<std::string::String>,
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl ExecuteProvisionedProductServiceActionInputBuilder {
    /// <p>The identifier of the provisioned product.</p>
    pub fn provisioned_product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioned_product_id = Some(input.into());
        self
    }
    /// <p>The identifier of the provisioned product.</p>
    pub fn set_provisioned_product_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioned_product_id = input;
        self
    }
    /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
    pub fn service_action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_action_id = Some(input.into());
        self
    }
    /// <p>The self-service action identifier. For example, <code>act-fs7abcd89wxyz</code>.</p>
    pub fn set_service_action_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_action_id = input;
        self
    }
    /// <p>An idempotency token that uniquely identifies the execute request.</p>
    pub fn execute_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.execute_token = Some(input.into());
        self
    }
    /// <p>An idempotency token that uniquely identifies the execute request.</p>
    pub fn set_execute_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execute_token = input;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as <code>TARGET</code>, the provided value will override the default value generated by Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as <code>TARGET</code>.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as <code>TARGET</code>, the provided value will override the default value generated by Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for any special parameters such as <code>TARGET</code>.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecuteProvisionedProductServiceActionInput`](crate::operation::execute_provisioned_product_service_action::ExecuteProvisionedProductServiceActionInput).
    pub fn build(self) -> Result<crate::operation::execute_provisioned_product_service_action::ExecuteProvisionedProductServiceActionInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::execute_provisioned_product_service_action::ExecuteProvisionedProductServiceActionInput {
                provisioned_product_id: self.provisioned_product_id
                ,
                service_action_id: self.service_action_id
                ,
                execute_token: self.execute_token
                ,
                accept_language: self.accept_language
                ,
                parameters: self.parameters
                ,
            }
        )
    }
}
