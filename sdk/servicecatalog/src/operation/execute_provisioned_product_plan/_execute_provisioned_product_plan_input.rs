// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecuteProvisionedProductPlanInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The plan identifier.</p>
    #[doc(hidden)]
    pub plan_id: std::option::Option<std::string::String>,
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    #[doc(hidden)]
    pub idempotency_token: std::option::Option<std::string::String>,
}
impl ExecuteProvisionedProductPlanInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The plan identifier.</p>
    pub fn plan_id(&self) -> std::option::Option<&str> {
        self.plan_id.as_deref()
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(&self) -> std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
}
impl ExecuteProvisionedProductPlanInput {
    /// Creates a new builder-style object to manufacture [`ExecuteProvisionedProductPlanInput`](crate::operation::execute_provisioned_product_plan::ExecuteProvisionedProductPlanInput).
    pub fn builder() -> crate::operation::execute_provisioned_product_plan::builders::ExecuteProvisionedProductPlanInputBuilder{
        crate::operation::execute_provisioned_product_plan::builders::ExecuteProvisionedProductPlanInputBuilder::default()
    }
}

/// A builder for [`ExecuteProvisionedProductPlanInput`](crate::operation::execute_provisioned_product_plan::ExecuteProvisionedProductPlanInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecuteProvisionedProductPlanInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) plan_id: std::option::Option<std::string::String>,
    pub(crate) idempotency_token: std::option::Option<std::string::String>,
}
impl ExecuteProvisionedProductPlanInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The plan identifier.</p>
    pub fn plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.plan_id = Some(input.into());
        self
    }
    /// <p>The plan identifier.</p>
    pub fn set_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.plan_id = input;
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.idempotency_token = Some(input.into());
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.idempotency_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecuteProvisionedProductPlanInput`](crate::operation::execute_provisioned_product_plan::ExecuteProvisionedProductPlanInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::execute_provisioned_product_plan::ExecuteProvisionedProductPlanInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::execute_provisioned_product_plan::ExecuteProvisionedProductPlanInput {
                accept_language: self.accept_language
                ,
                plan_id: self.plan_id
                ,
                idempotency_token: self.idempotency_token
                ,
            }
        )
    }
}
