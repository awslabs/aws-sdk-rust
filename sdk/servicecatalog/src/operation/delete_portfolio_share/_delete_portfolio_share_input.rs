// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePortfolioShareInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The portfolio identifier.</p>
    #[doc(hidden)]
    pub portfolio_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The organization node to whom you are going to stop sharing.</p>
    #[doc(hidden)]
    pub organization_node: std::option::Option<crate::types::OrganizationNode>,
}
impl DeletePortfolioShareInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The portfolio identifier.</p>
    pub fn portfolio_id(&self) -> std::option::Option<&str> {
        self.portfolio_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The organization node to whom you are going to stop sharing.</p>
    pub fn organization_node(&self) -> std::option::Option<&crate::types::OrganizationNode> {
        self.organization_node.as_ref()
    }
}
impl DeletePortfolioShareInput {
    /// Creates a new builder-style object to manufacture [`DeletePortfolioShareInput`](crate::operation::delete_portfolio_share::DeletePortfolioShareInput).
    pub fn builder(
    ) -> crate::operation::delete_portfolio_share::builders::DeletePortfolioShareInputBuilder {
        crate::operation::delete_portfolio_share::builders::DeletePortfolioShareInputBuilder::default()
    }
}

/// A builder for [`DeletePortfolioShareInput`](crate::operation::delete_portfolio_share::DeletePortfolioShareInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeletePortfolioShareInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) portfolio_id: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) organization_node: std::option::Option<crate::types::OrganizationNode>,
}
impl DeletePortfolioShareInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.portfolio_id = Some(input.into());
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.portfolio_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The organization node to whom you are going to stop sharing.</p>
    pub fn organization_node(mut self, input: crate::types::OrganizationNode) -> Self {
        self.organization_node = Some(input);
        self
    }
    /// <p>The organization node to whom you are going to stop sharing.</p>
    pub fn set_organization_node(
        mut self,
        input: std::option::Option<crate::types::OrganizationNode>,
    ) -> Self {
        self.organization_node = input;
        self
    }
    /// Consumes the builder and constructs a [`DeletePortfolioShareInput`](crate::operation::delete_portfolio_share::DeletePortfolioShareInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_portfolio_share::DeletePortfolioShareInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_portfolio_share::DeletePortfolioShareInput {
                accept_language: self.accept_language,
                portfolio_id: self.portfolio_id,
                account_id: self.account_id,
                organization_node: self.organization_node,
            },
        )
    }
}
