// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_service_action::_create_service_action_output::CreateServiceActionOutputBuilder;

pub use crate::operation::create_service_action::_create_service_action_input::CreateServiceActionInputBuilder;

impl CreateServiceActionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_service_action::CreateServiceActionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_action::CreateServiceActionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_service_action();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateServiceAction`.
///
/// <p>Creates a self-service action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateServiceActionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_service_action::builders::CreateServiceActionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_service_action::CreateServiceActionOutput,
        crate::operation::create_service_action::CreateServiceActionError,
    > for CreateServiceActionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_service_action::CreateServiceActionOutput,
            crate::operation::create_service_action::CreateServiceActionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateServiceActionFluentBuilder {
    /// Creates a new `CreateServiceAction`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateServiceAction as a reference.
    pub fn as_input(&self) -> &crate::operation::create_service_action::builders::CreateServiceActionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_service_action::CreateServiceActionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_action::CreateServiceActionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_service_action::CreateServiceAction::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_service_action::CreateServiceAction::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_service_action::CreateServiceActionOutput,
        crate::operation::create_service_action::CreateServiceActionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The self-service action name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The self-service action name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The self-service action name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The service action definition type. For example, <code>SSM_AUTOMATION</code>.</p>
    pub fn definition_type(mut self, input: crate::types::ServiceActionDefinitionType) -> Self {
        self.inner = self.inner.definition_type(input);
        self
    }
    /// <p>The service action definition type. For example, <code>SSM_AUTOMATION</code>.</p>
    pub fn set_definition_type(mut self, input: ::std::option::Option<crate::types::ServiceActionDefinitionType>) -> Self {
        self.inner = self.inner.set_definition_type(input);
        self
    }
    /// <p>The service action definition type. For example, <code>SSM_AUTOMATION</code>.</p>
    pub fn get_definition_type(&self) -> &::std::option::Option<crate::types::ServiceActionDefinitionType> {
        self.inner.get_definition_type()
    }
    /// Adds a key-value pair to `Definition`.
    ///
    /// To override the contents of this collection use [`set_definition`](Self::set_definition).
    ///
    /// <p>The self-service action definition. Can be one of the following:</p>
    /// <dl>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The name of the Amazon Web Services Systems Manager document (SSM document). For example, <code>AWS-RestartEC2Instance</code>.</p>
    /// <p>If you are using a shared SSM document, you must provide the ARN instead of the name.</p>
    /// </dd>
    /// <dt>
    /// Version
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services Systems Manager automation document version. For example, <code>"Version": "1"</code> </p>
    /// </dd>
    /// <dt>
    /// AssumeRole
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, <code>"AssumeRole": "arn:aws:iam::12345678910:role/ActionRole"</code>.</p>
    /// <p>To reuse the provisioned product launch role, set to <code>"AssumeRole": "LAUNCH_ROLE"</code>.</p>
    /// </dd>
    /// <dt>
    /// Parameters
    /// </dt>
    /// <dd>
    /// <p>The list of parameters in JSON format.</p>
    /// <p>For example: <code>[{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}]</code> or <code>[{\"Name\":\"InstanceId\",\"Type\":\"TEXT_VALUE\"}]</code>.</p>
    /// </dd>
    /// </dl>
    pub fn definition(mut self, k: crate::types::ServiceActionDefinitionKey, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.definition(k, v.into());
        self
    }
    /// <p>The self-service action definition. Can be one of the following:</p>
    /// <dl>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The name of the Amazon Web Services Systems Manager document (SSM document). For example, <code>AWS-RestartEC2Instance</code>.</p>
    /// <p>If you are using a shared SSM document, you must provide the ARN instead of the name.</p>
    /// </dd>
    /// <dt>
    /// Version
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services Systems Manager automation document version. For example, <code>"Version": "1"</code> </p>
    /// </dd>
    /// <dt>
    /// AssumeRole
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, <code>"AssumeRole": "arn:aws:iam::12345678910:role/ActionRole"</code>.</p>
    /// <p>To reuse the provisioned product launch role, set to <code>"AssumeRole": "LAUNCH_ROLE"</code>.</p>
    /// </dd>
    /// <dt>
    /// Parameters
    /// </dt>
    /// <dd>
    /// <p>The list of parameters in JSON format.</p>
    /// <p>For example: <code>[{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}]</code> or <code>[{\"Name\":\"InstanceId\",\"Type\":\"TEXT_VALUE\"}]</code>.</p>
    /// </dd>
    /// </dl>
    pub fn set_definition(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ServiceActionDefinitionKey, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p>The self-service action definition. Can be one of the following:</p>
    /// <dl>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The name of the Amazon Web Services Systems Manager document (SSM document). For example, <code>AWS-RestartEC2Instance</code>.</p>
    /// <p>If you are using a shared SSM document, you must provide the ARN instead of the name.</p>
    /// </dd>
    /// <dt>
    /// Version
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services Systems Manager automation document version. For example, <code>"Version": "1"</code> </p>
    /// </dd>
    /// <dt>
    /// AssumeRole
    /// </dt>
    /// <dd>
    /// <p>The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, <code>"AssumeRole": "arn:aws:iam::12345678910:role/ActionRole"</code>.</p>
    /// <p>To reuse the provisioned product launch role, set to <code>"AssumeRole": "LAUNCH_ROLE"</code>.</p>
    /// </dd>
    /// <dt>
    /// Parameters
    /// </dt>
    /// <dd>
    /// <p>The list of parameters in JSON format.</p>
    /// <p>For example: <code>[{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}]</code> or <code>[{\"Name\":\"InstanceId\",\"Type\":\"TEXT_VALUE\"}]</code>.</p>
    /// </dd>
    /// </dl>
    pub fn get_definition(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ServiceActionDefinitionKey, ::std::string::String>> {
        self.inner.get_definition()
    }
    /// <p>The self-service action description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The self-service action description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The self-service action description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.accept_language(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_accept_language(input);
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_accept_language()
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.idempotency_token(input.into());
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn set_idempotency_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_idempotency_token(input);
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn get_idempotency_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_idempotency_token()
    }
}
