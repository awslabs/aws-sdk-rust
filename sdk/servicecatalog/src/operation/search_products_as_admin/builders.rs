// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_products_as_admin::_search_products_as_admin_output::SearchProductsAsAdminOutputBuilder;

pub use crate::operation::search_products_as_admin::_search_products_as_admin_input::SearchProductsAsAdminInputBuilder;

/// Fluent builder constructing a request to `SearchProductsAsAdmin`.
///
/// <p>Gets information about the products for the specified portfolio or all products.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SearchProductsAsAdminFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::search_products_as_admin::builders::SearchProductsAsAdminInputBuilder,
}
impl SearchProductsAsAdminFluentBuilder {
    /// Creates a new `SearchProductsAsAdmin`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::search_products_as_admin::SearchProductsAsAdmin,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::search_products_as_admin::SearchProductsAsAdminError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::search_products_as_admin::SearchProductsAsAdminOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::search_products_as_admin::SearchProductsAsAdminError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::search_products_as_admin::paginator::SearchProductsAsAdminPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::search_products_as_admin::paginator::SearchProductsAsAdminPaginator {
        crate::operation::search_products_as_admin::paginator::SearchProductsAsAdminPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accept_language(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accept_language(input);
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portfolio_id(input.into());
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_portfolio_id(input);
        self
    }
    /// Adds a key-value pair to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn filters(
        mut self,
        k: crate::types::ProductViewFilterBy,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.filters(k, v);
        self
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::ProductViewFilterBy,
                std::vec::Vec<std::string::String>,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn sort_by(mut self, input: crate::types::ProductViewSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::ProductViewSortBy>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_token(input.into());
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_token(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.inner = self.inner.page_size(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_page_size(input);
        self
    }
    /// <p>Access level of the source of the product.</p>
    pub fn product_source(mut self, input: crate::types::ProductSource) -> Self {
        self.inner = self.inner.product_source(input);
        self
    }
    /// <p>Access level of the source of the product.</p>
    pub fn set_product_source(
        mut self,
        input: std::option::Option<crate::types::ProductSource>,
    ) -> Self {
        self.inner = self.inner.set_product_source(input);
        self
    }
}
