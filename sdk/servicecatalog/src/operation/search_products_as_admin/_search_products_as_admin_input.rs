// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchProductsAsAdminInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub accept_language: ::std::option::Option<::std::string::String>,
    /// <p>The portfolio identifier.</p>
    pub portfolio_id: ::std::option::Option<::std::string::String>,
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub filters: ::std::option::Option<::std::collections::HashMap<crate::types::ProductViewFilterBy, ::std::vec::Vec<::std::string::String>>>,
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub sort_by: ::std::option::Option<crate::types::ProductViewSortBy>,
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub page_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return with this call.</p>
    pub page_size: ::std::option::Option<i32>,
    /// <p>Access level of the source of the product.</p>
    pub product_source: ::std::option::Option<crate::types::ProductSource>,
}
impl SearchProductsAsAdminInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> ::std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The portfolio identifier.</p>
    pub fn portfolio_id(&self) -> ::std::option::Option<&str> {
        self.portfolio_id.as_deref()
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn filters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ProductViewFilterBy, ::std::vec::Vec<::std::string::String>>> {
        self.filters.as_ref()
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ProductViewSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(&self) -> ::std::option::Option<&str> {
        self.page_token.as_deref()
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
    /// <p>Access level of the source of the product.</p>
    pub fn product_source(&self) -> ::std::option::Option<&crate::types::ProductSource> {
        self.product_source.as_ref()
    }
}
impl SearchProductsAsAdminInput {
    /// Creates a new builder-style object to manufacture [`SearchProductsAsAdminInput`](crate::operation::search_products_as_admin::SearchProductsAsAdminInput).
    pub fn builder() -> crate::operation::search_products_as_admin::builders::SearchProductsAsAdminInputBuilder {
        crate::operation::search_products_as_admin::builders::SearchProductsAsAdminInputBuilder::default()
    }
}

/// A builder for [`SearchProductsAsAdminInput`](crate::operation::search_products_as_admin::SearchProductsAsAdminInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchProductsAsAdminInputBuilder {
    pub(crate) accept_language: ::std::option::Option<::std::string::String>,
    pub(crate) portfolio_id: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::collections::HashMap<crate::types::ProductViewFilterBy, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) sort_by: ::std::option::Option<crate::types::ProductViewSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) page_token: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<i32>,
    pub(crate) product_source: ::std::option::Option<crate::types::ProductSource>,
}
impl SearchProductsAsAdminInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accept_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.accept_language
    }
    /// <p>The portfolio identifier.</p>
    pub fn portfolio_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.portfolio_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn set_portfolio_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.portfolio_id = input;
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn get_portfolio_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.portfolio_id
    }
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn filters(mut self, k: crate::types::ProductViewFilterBy, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k, v);
        self.filters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn set_filters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ProductViewFilterBy, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the administrator has access.</p>
    pub fn get_filters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ProductViewFilterBy, ::std::vec::Vec<::std::string::String>>> {
        &self.filters
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn sort_by(mut self, input: crate::types::ProductViewSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ProductViewSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ProductViewSortBy> {
        &self.sort_by
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn set_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.page_token = input;
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn get_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.page_token
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// <p>Access level of the source of the product.</p>
    pub fn product_source(mut self, input: crate::types::ProductSource) -> Self {
        self.product_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Access level of the source of the product.</p>
    pub fn set_product_source(mut self, input: ::std::option::Option<crate::types::ProductSource>) -> Self {
        self.product_source = input;
        self
    }
    /// <p>Access level of the source of the product.</p>
    pub fn get_product_source(&self) -> &::std::option::Option<crate::types::ProductSource> {
        &self.product_source
    }
    /// Consumes the builder and constructs a [`SearchProductsAsAdminInput`](crate::operation::search_products_as_admin::SearchProductsAsAdminInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_products_as_admin::SearchProductsAsAdminInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::search_products_as_admin::SearchProductsAsAdminInput {
            accept_language: self.accept_language,
            portfolio_id: self.portfolio_id,
            filters: self.filters,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            page_token: self.page_token,
            page_size: self.page_size,
            product_source: self.product_source,
        })
    }
}
