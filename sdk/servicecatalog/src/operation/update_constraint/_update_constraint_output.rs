// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConstraintOutput {
    /// <p>Information about the constraint.</p>
    #[doc(hidden)]
    pub constraint_detail: std::option::Option<crate::types::ConstraintDetail>,
    /// <p>The constraint parameters.</p>
    #[doc(hidden)]
    pub constraint_parameters: std::option::Option<std::string::String>,
    /// <p>The status of the current request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl UpdateConstraintOutput {
    /// <p>Information about the constraint.</p>
    pub fn constraint_detail(&self) -> std::option::Option<&crate::types::ConstraintDetail> {
        self.constraint_detail.as_ref()
    }
    /// <p>The constraint parameters.</p>
    pub fn constraint_parameters(&self) -> std::option::Option<&str> {
        self.constraint_parameters.as_deref()
    }
    /// <p>The status of the current request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateConstraintOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConstraintOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConstraintOutput`](crate::operation::update_constraint::UpdateConstraintOutput).
    pub fn builder() -> crate::operation::update_constraint::builders::UpdateConstraintOutputBuilder
    {
        crate::operation::update_constraint::builders::UpdateConstraintOutputBuilder::default()
    }
}

/// A builder for [`UpdateConstraintOutput`](crate::operation::update_constraint::UpdateConstraintOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateConstraintOutputBuilder {
    pub(crate) constraint_detail: std::option::Option<crate::types::ConstraintDetail>,
    pub(crate) constraint_parameters: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl UpdateConstraintOutputBuilder {
    /// <p>Information about the constraint.</p>
    pub fn constraint_detail(mut self, input: crate::types::ConstraintDetail) -> Self {
        self.constraint_detail = Some(input);
        self
    }
    /// <p>Information about the constraint.</p>
    pub fn set_constraint_detail(
        mut self,
        input: std::option::Option<crate::types::ConstraintDetail>,
    ) -> Self {
        self.constraint_detail = input;
        self
    }
    /// <p>The constraint parameters.</p>
    pub fn constraint_parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.constraint_parameters = Some(input.into());
        self
    }
    /// <p>The constraint parameters.</p>
    pub fn set_constraint_parameters(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.constraint_parameters = input;
        self
    }
    /// <p>The status of the current request.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the current request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateConstraintOutput`](crate::operation::update_constraint::UpdateConstraintOutput).
    pub fn build(self) -> crate::operation::update_constraint::UpdateConstraintOutput {
        crate::operation::update_constraint::UpdateConstraintOutput {
            constraint_detail: self.constraint_detail,
            constraint_parameters: self.constraint_parameters,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
