// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchAssociateServiceActionWithProvisioningArtifactInput {
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub service_action_associations: ::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>>,
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub accept_language: ::std::option::Option<::std::string::String>,
}
impl BatchAssociateServiceActionWithProvisioningArtifactInput {
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_action_associations.is_none()`.
    pub fn service_action_associations(&self) -> &[crate::types::ServiceActionAssociation] {
        self.service_action_associations.as_deref().unwrap_or_default()
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> ::std::option::Option<&str> {
        self.accept_language.as_deref()
    }
}
impl BatchAssociateServiceActionWithProvisioningArtifactInput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateServiceActionWithProvisioningArtifactInput`](crate::operation::batch_associate_service_action_with_provisioning_artifact::BatchAssociateServiceActionWithProvisioningArtifactInput).
    pub fn builder() -> crate::operation::batch_associate_service_action_with_provisioning_artifact::builders::BatchAssociateServiceActionWithProvisioningArtifactInputBuilder{
        crate::operation::batch_associate_service_action_with_provisioning_artifact::builders::BatchAssociateServiceActionWithProvisioningArtifactInputBuilder::default()
    }
}

/// A builder for [`BatchAssociateServiceActionWithProvisioningArtifactInput`](crate::operation::batch_associate_service_action_with_provisioning_artifact::BatchAssociateServiceActionWithProvisioningArtifactInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchAssociateServiceActionWithProvisioningArtifactInputBuilder {
    pub(crate) service_action_associations: ::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>>,
    pub(crate) accept_language: ::std::option::Option<::std::string::String>,
}
impl BatchAssociateServiceActionWithProvisioningArtifactInputBuilder {
    /// Appends an item to `service_action_associations`.
    ///
    /// To override the contents of this collection use [`set_service_action_associations`](Self::set_service_action_associations).
    ///
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn service_action_associations(mut self, input: crate::types::ServiceActionAssociation) -> Self {
        let mut v = self.service_action_associations.unwrap_or_default();
        v.push(input);
        self.service_action_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn set_service_action_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>>) -> Self {
        self.service_action_associations = input;
        self
    }
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn get_service_action_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>> {
        &self.service_action_associations
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accept_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.accept_language
    }
    /// Consumes the builder and constructs a [`BatchAssociateServiceActionWithProvisioningArtifactInput`](crate::operation::batch_associate_service_action_with_provisioning_artifact::BatchAssociateServiceActionWithProvisioningArtifactInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_associate_service_action_with_provisioning_artifact::BatchAssociateServiceActionWithProvisioningArtifactInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_associate_service_action_with_provisioning_artifact::BatchAssociateServiceActionWithProvisioningArtifactInput {
                service_action_associations: self.service_action_associations,
                accept_language: self.accept_language,
            },
        )
    }
}
