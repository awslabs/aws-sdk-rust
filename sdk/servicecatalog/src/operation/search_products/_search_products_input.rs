// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchProductsInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the caller has access.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<
        std::collections::HashMap<
            crate::types::ProductViewFilterBy,
            std::vec::Vec<std::string::String>,
        >,
    >,
    /// <p>The maximum number of items to return with this call.</p>
    #[doc(hidden)]
    pub page_size: i32,
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::ProductViewSortBy>,
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    #[doc(hidden)]
    pub page_token: std::option::Option<std::string::String>,
}
impl SearchProductsInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the caller has access.</p>
    pub fn filters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::ProductViewFilterBy,
            std::vec::Vec<std::string::String>,
        >,
    > {
        self.filters.as_ref()
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(&self) -> i32 {
        self.page_size
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::ProductViewSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(&self) -> std::option::Option<&str> {
        self.page_token.as_deref()
    }
}
impl SearchProductsInput {
    /// Creates a new builder-style object to manufacture [`SearchProductsInput`](crate::operation::search_products::SearchProductsInput).
    pub fn builder() -> crate::operation::search_products::builders::SearchProductsInputBuilder {
        crate::operation::search_products::builders::SearchProductsInputBuilder::default()
    }
}

/// A builder for [`SearchProductsInput`](crate::operation::search_products::SearchProductsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchProductsInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<
        std::collections::HashMap<
            crate::types::ProductViewFilterBy,
            std::vec::Vec<std::string::String>,
        >,
    >,
    pub(crate) page_size: std::option::Option<i32>,
    pub(crate) sort_by: std::option::Option<crate::types::ProductViewSortBy>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) page_token: std::option::Option<std::string::String>,
}
impl SearchProductsInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the caller has access.</p>
    pub fn filters(
        mut self,
        k: crate::types::ProductViewFilterBy,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k, v);
        self.filters = Some(hash_map);
        self
    }
    /// <p>The search filters. If no search filters are specified, the output includes all products to which the caller has access.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::ProductViewFilterBy,
                std::vec::Vec<std::string::String>,
            >,
        >,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn sort_by(mut self, input: crate::types::ProductViewSortBy) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The sort field. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::ProductViewSortBy>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The sort order. If no value is specified, the results are not sorted.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_token = Some(input.into());
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_token = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchProductsInput`](crate::operation::search_products::SearchProductsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_products::SearchProductsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::search_products::SearchProductsInput {
            accept_language: self.accept_language,
            filters: self.filters,
            page_size: self.page_size.unwrap_or_default(),
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            page_token: self.page_token,
        })
    }
}
