// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_product::_copy_product_output::CopyProductOutputBuilder;

pub use crate::operation::copy_product::_copy_product_input::CopyProductInputBuilder;

/// Fluent builder constructing a request to `CopyProduct`.
///
/// <p>Copies the specified source product to the specified target product or a new product.</p>
/// <p>You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using <code>CreatePortfolioShare</code>.</p>
/// <p>This operation is performed asynchronously. To track the progress of the operation, use <code>DescribeCopyProductStatus</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CopyProductFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_product::builders::CopyProductInputBuilder,
}
impl CopyProductFluentBuilder {
    /// Creates a new `CopyProduct`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::copy_product::CopyProduct,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::copy_product::CopyProductError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::copy_product::CopyProductOutput,
        aws_smithy_http::result::SdkError<crate::operation::copy_product::CopyProductError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accept_language(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accept_language(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source product.</p>
    pub fn source_product_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_product_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source product.</p>
    pub fn set_source_product_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_product_arn(input);
        self
    }
    /// <p>The identifier of the target product. By default, a new product is created.</p>
    pub fn target_product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_product_id(input.into());
        self
    }
    /// <p>The identifier of the target product. By default, a new product is created.</p>
    pub fn set_target_product_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_product_id(input);
        self
    }
    /// <p>A name for the target product. The default is the name of the source product.</p>
    pub fn target_product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_product_name(input.into());
        self
    }
    /// <p>A name for the target product. The default is the name of the source product.</p>
    pub fn set_target_product_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_product_name(input);
        self
    }
    /// Appends an item to `SourceProvisioningArtifactIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_source_provisioning_artifact_identifiers`](Self::set_source_provisioning_artifact_identifiers).
    ///
    /// <p>The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied.</p>
    pub fn source_provisioning_artifact_identifiers(
        mut self,
        input: std::collections::HashMap<
            crate::types::ProvisioningArtifactPropertyName,
            std::string::String,
        >,
    ) -> Self {
        self.inner = self.inner.source_provisioning_artifact_identifiers(input);
        self
    }
    /// <p>The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied.</p>
    pub fn set_source_provisioning_artifact_identifiers(
        mut self,
        input: std::option::Option<
            std::vec::Vec<
                std::collections::HashMap<
                    crate::types::ProvisioningArtifactPropertyName,
                    std::string::String,
                >,
            >,
        >,
    ) -> Self {
        self.inner = self
            .inner
            .set_source_provisioning_artifact_identifiers(input);
        self
    }
    /// Appends an item to `CopyOptions`.
    ///
    /// To override the contents of this collection use [`set_copy_options`](Self::set_copy_options).
    ///
    /// <p>The copy options. If the value is <code>CopyTags</code>, the tags from the source product are copied to the target product.</p>
    pub fn copy_options(mut self, input: crate::types::CopyOption) -> Self {
        self.inner = self.inner.copy_options(input);
        self
    }
    /// <p>The copy options. If the value is <code>CopyTags</code>, the tags from the source product are copied to the target product.</p>
    pub fn set_copy_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CopyOption>>,
    ) -> Self {
        self.inner = self.inner.set_copy_options(input);
        self
    }
    /// <p> A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. </p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.idempotency_token(input.into());
        self
    }
    /// <p> A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. </p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_idempotency_token(input);
        self
    }
}
