// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeProductViewOutput {
    /// <p>Summary information about the product.</p>
    #[doc(hidden)]
    pub product_view_summary: std::option::Option<crate::types::ProductViewSummary>,
    /// <p>Information about the provisioning artifacts for the product.</p>
    #[doc(hidden)]
    pub provisioning_artifacts:
        std::option::Option<std::vec::Vec<crate::types::ProvisioningArtifact>>,
    _request_id: Option<String>,
}
impl DescribeProductViewOutput {
    /// <p>Summary information about the product.</p>
    pub fn product_view_summary(&self) -> std::option::Option<&crate::types::ProductViewSummary> {
        self.product_view_summary.as_ref()
    }
    /// <p>Information about the provisioning artifacts for the product.</p>
    pub fn provisioning_artifacts(
        &self,
    ) -> std::option::Option<&[crate::types::ProvisioningArtifact]> {
        self.provisioning_artifacts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeProductViewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeProductViewOutput {
    /// Creates a new builder-style object to manufacture [`DescribeProductViewOutput`](crate::operation::describe_product_view::DescribeProductViewOutput).
    pub fn builder(
    ) -> crate::operation::describe_product_view::builders::DescribeProductViewOutputBuilder {
        crate::operation::describe_product_view::builders::DescribeProductViewOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribeProductViewOutput`](crate::operation::describe_product_view::DescribeProductViewOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeProductViewOutputBuilder {
    pub(crate) product_view_summary: std::option::Option<crate::types::ProductViewSummary>,
    pub(crate) provisioning_artifacts:
        std::option::Option<std::vec::Vec<crate::types::ProvisioningArtifact>>,
    _request_id: Option<String>,
}
impl DescribeProductViewOutputBuilder {
    /// <p>Summary information about the product.</p>
    pub fn product_view_summary(mut self, input: crate::types::ProductViewSummary) -> Self {
        self.product_view_summary = Some(input);
        self
    }
    /// <p>Summary information about the product.</p>
    pub fn set_product_view_summary(
        mut self,
        input: std::option::Option<crate::types::ProductViewSummary>,
    ) -> Self {
        self.product_view_summary = input;
        self
    }
    /// Appends an item to `provisioning_artifacts`.
    ///
    /// To override the contents of this collection use [`set_provisioning_artifacts`](Self::set_provisioning_artifacts).
    ///
    /// <p>Information about the provisioning artifacts for the product.</p>
    pub fn provisioning_artifacts(mut self, input: crate::types::ProvisioningArtifact) -> Self {
        let mut v = self.provisioning_artifacts.unwrap_or_default();
        v.push(input);
        self.provisioning_artifacts = Some(v);
        self
    }
    /// <p>Information about the provisioning artifacts for the product.</p>
    pub fn set_provisioning_artifacts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProvisioningArtifact>>,
    ) -> Self {
        self.provisioning_artifacts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeProductViewOutput`](crate::operation::describe_product_view::DescribeProductViewOutput).
    pub fn build(self) -> crate::operation::describe_product_view::DescribeProductViewOutput {
        crate::operation::describe_product_view::DescribeProductViewOutput {
            product_view_summary: self.product_view_summary,
            provisioning_artifacts: self.provisioning_artifacts,
            _request_id: self._request_id,
        }
    }
}
