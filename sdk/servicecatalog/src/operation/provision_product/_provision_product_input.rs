// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The product identifier. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub product_id: std::option::Option<std::string::String>,
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub product_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub provisioning_artifact_id: std::option::Option<std::string::String>,
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub provisioning_artifact_name: std::option::Option<std::string::String>,
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub path_id: std::option::Option<std::string::String>,
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    #[doc(hidden)]
    pub path_name: std::option::Option<std::string::String>,
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    #[doc(hidden)]
    pub provisioned_product_name: std::option::Option<std::string::String>,
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    #[doc(hidden)]
    pub provisioning_parameters:
        std::option::Option<std::vec::Vec<crate::types::ProvisioningParameter>>,
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    #[doc(hidden)]
    pub provisioning_preferences: std::option::Option<crate::types::ProvisioningPreferences>,
    /// <p>One or more tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    #[doc(hidden)]
    pub notification_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
    #[doc(hidden)]
    pub provision_token: std::option::Option<std::string::String>,
}
impl ProvisionProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The product identifier. You must provide the name or ID, but not both.</p>
    pub fn product_id(&self) -> std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn product_name(&self) -> std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn provisioning_artifact_id(&self) -> std::option::Option<&str> {
        self.provisioning_artifact_id.as_deref()
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn provisioning_artifact_name(&self) -> std::option::Option<&str> {
        self.provisioning_artifact_name.as_deref()
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>. You must provide the name or ID, but not both.</p>
    pub fn path_id(&self) -> std::option::Option<&str> {
        self.path_id.as_deref()
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn path_name(&self) -> std::option::Option<&str> {
        self.path_name.as_deref()
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn provisioned_product_name(&self) -> std::option::Option<&str> {
        self.provisioned_product_name.as_deref()
    }
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn provisioning_parameters(
        &self,
    ) -> std::option::Option<&[crate::types::ProvisioningParameter]> {
        self.provisioning_parameters.as_deref()
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn provisioning_preferences(
        &self,
    ) -> std::option::Option<&crate::types::ProvisioningPreferences> {
        self.provisioning_preferences.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn notification_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.notification_arns.as_deref()
    }
    /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
    pub fn provision_token(&self) -> std::option::Option<&str> {
        self.provision_token.as_deref()
    }
}
impl ProvisionProductInput {
    /// Creates a new builder-style object to manufacture [`ProvisionProductInput`](crate::operation::provision_product::ProvisionProductInput).
    pub fn builder() -> crate::operation::provision_product::builders::ProvisionProductInputBuilder
    {
        crate::operation::provision_product::builders::ProvisionProductInputBuilder::default()
    }
}

/// A builder for [`ProvisionProductInput`](crate::operation::provision_product::ProvisionProductInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProvisionProductInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) product_id: std::option::Option<std::string::String>,
    pub(crate) product_name: std::option::Option<std::string::String>,
    pub(crate) provisioning_artifact_id: std::option::Option<std::string::String>,
    pub(crate) provisioning_artifact_name: std::option::Option<std::string::String>,
    pub(crate) path_id: std::option::Option<std::string::String>,
    pub(crate) path_name: std::option::Option<std::string::String>,
    pub(crate) provisioned_product_name: std::option::Option<std::string::String>,
    pub(crate) provisioning_parameters:
        std::option::Option<std::vec::Vec<crate::types::ProvisioningParameter>>,
    pub(crate) provisioning_preferences: std::option::Option<crate::types::ProvisioningPreferences>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) notification_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) provision_token: std::option::Option<std::string::String>,
}
impl ProvisionProductInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The product identifier. You must provide the name or ID, but not both.</p>
    pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_id = Some(input.into());
        self
    }
    /// <p>The product identifier. You must provide the name or ID, but not both.</p>
    pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_name = Some(input.into());
        self
    }
    /// <p>The name of the product. You must provide the name or ID, but not both.</p>
    pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn provisioning_artifact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioning_artifact_id = Some(input.into());
        self
    }
    /// <p>The identifier of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn set_provisioning_artifact_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioning_artifact_id = input;
        self
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn provisioning_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioning_artifact_name = Some(input.into());
        self
    }
    /// <p>The name of the provisioning artifact. You must provide the name or ID, but not both.</p>
    pub fn set_provisioning_artifact_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioning_artifact_name = input;
        self
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>. You must provide the name or ID, but not both.</p>
    pub fn path_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.path_id = Some(input.into());
        self
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>. You must provide the name or ID, but not both.</p>
    pub fn set_path_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path_id = input;
        self
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn path_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.path_name = Some(input.into());
        self
    }
    /// <p>The name of the path. You must provide the name or ID, but not both.</p>
    pub fn set_path_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path_name = input;
        self
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn provisioned_product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provisioned_product_name = Some(input.into());
        self
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn set_provisioned_product_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provisioned_product_name = input;
        self
    }
    /// Appends an item to `provisioning_parameters`.
    ///
    /// To override the contents of this collection use [`set_provisioning_parameters`](Self::set_provisioning_parameters).
    ///
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn provisioning_parameters(mut self, input: crate::types::ProvisioningParameter) -> Self {
        let mut v = self.provisioning_parameters.unwrap_or_default();
        v.push(input);
        self.provisioning_parameters = Some(v);
        self
    }
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn set_provisioning_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProvisioningParameter>>,
    ) -> Self {
        self.provisioning_parameters = input;
        self
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn provisioning_preferences(
        mut self,
        input: crate::types::ProvisioningPreferences,
    ) -> Self {
        self.provisioning_preferences = Some(input);
        self
    }
    /// <p>An object that contains information about the provisioning preferences for a stack set.</p>
    pub fn set_provisioning_preferences(
        mut self,
        input: std::option::Option<crate::types::ProvisioningPreferences>,
    ) -> Self {
        self.provisioning_preferences = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>One or more tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `notification_arns`.
    ///
    /// To override the contents of this collection use [`set_notification_arns`](Self::set_notification_arns).
    ///
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn notification_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.notification_arns.unwrap_or_default();
        v.push(input.into());
        self.notification_arns = Some(v);
        self
    }
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn set_notification_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.notification_arns = input;
        self
    }
    /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
    pub fn provision_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.provision_token = Some(input.into());
        self
    }
    /// <p>An idempotency token that uniquely identifies the provisioning request.</p>
    pub fn set_provision_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provision_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ProvisionProductInput`](crate::operation::provision_product::ProvisionProductInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::provision_product::ProvisionProductInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::provision_product::ProvisionProductInput {
            accept_language: self.accept_language,
            product_id: self.product_id,
            product_name: self.product_name,
            provisioning_artifact_id: self.provisioning_artifact_id,
            provisioning_artifact_name: self.provisioning_artifact_name,
            path_id: self.path_id,
            path_name: self.path_name,
            provisioned_product_name: self.provisioned_product_name,
            provisioning_parameters: self.provisioning_parameters,
            provisioning_preferences: self.provisioning_preferences,
            tags: self.tags,
            notification_arns: self.notification_arns,
            provision_token: self.provision_token,
        })
    }
}
