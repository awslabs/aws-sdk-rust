// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateProvisionedProductPlanInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub accept_language: ::std::option::Option<::std::string::String>,
    /// <p>The name of the plan.</p>
    pub plan_name: ::std::option::Option<::std::string::String>,
    /// <p>The plan type.</p>
    pub plan_type: ::std::option::Option<crate::types::ProvisionedProductPlanType>,
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>.</p>
    pub path_id: ::std::option::Option<::std::string::String>,
    /// <p>The product identifier.</p>
    pub product_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub provisioned_product_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the provisioning artifact.</p>
    pub provisioning_artifact_id: ::std::option::Option<::std::string::String>,
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub provisioning_parameters: ::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>>,
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub idempotency_token: ::std::option::Option<::std::string::String>,
    /// <p>One or more tags.</p>
    /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateProvisionedProductPlanInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> ::std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The name of the plan.</p>
    pub fn plan_name(&self) -> ::std::option::Option<&str> {
        self.plan_name.as_deref()
    }
    /// <p>The plan type.</p>
    pub fn plan_type(&self) -> ::std::option::Option<&crate::types::ProvisionedProductPlanType> {
        self.plan_type.as_ref()
    }
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_arns.is_none()`.
    pub fn notification_arns(&self) -> &[::std::string::String] {
        self.notification_arns.as_deref().unwrap_or_default()
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>.</p>
    pub fn path_id(&self) -> ::std::option::Option<&str> {
        self.path_id.as_deref()
    }
    /// <p>The product identifier.</p>
    pub fn product_id(&self) -> ::std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn provisioned_product_name(&self) -> ::std::option::Option<&str> {
        self.provisioned_product_name.as_deref()
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn provisioning_artifact_id(&self) -> ::std::option::Option<&str> {
        self.provisioning_artifact_id.as_deref()
    }
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provisioning_parameters.is_none()`.
    pub fn provisioning_parameters(&self) -> &[crate::types::UpdateProvisioningParameter] {
        self.provisioning_parameters.as_deref().unwrap_or_default()
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(&self) -> ::std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
    /// <p>One or more tags.</p>
    /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateProvisionedProductPlanInput {
    /// Creates a new builder-style object to manufacture [`CreateProvisionedProductPlanInput`](crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput).
    pub fn builder() -> crate::operation::create_provisioned_product_plan::builders::CreateProvisionedProductPlanInputBuilder {
        crate::operation::create_provisioned_product_plan::builders::CreateProvisionedProductPlanInputBuilder::default()
    }
}

/// A builder for [`CreateProvisionedProductPlanInput`](crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateProvisionedProductPlanInputBuilder {
    pub(crate) accept_language: ::std::option::Option<::std::string::String>,
    pub(crate) plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) plan_type: ::std::option::Option<crate::types::ProvisionedProductPlanType>,
    pub(crate) notification_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) path_id: ::std::option::Option<::std::string::String>,
    pub(crate) product_id: ::std::option::Option<::std::string::String>,
    pub(crate) provisioned_product_name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_artifact_id: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_parameters: ::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>>,
    pub(crate) idempotency_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateProvisionedProductPlanInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accept_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.accept_language
    }
    /// <p>The name of the plan.</p>
    /// This field is required.
    pub fn plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the plan.</p>
    pub fn set_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plan_name = input;
        self
    }
    /// <p>The name of the plan.</p>
    pub fn get_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.plan_name
    }
    /// <p>The plan type.</p>
    /// This field is required.
    pub fn plan_type(mut self, input: crate::types::ProvisionedProductPlanType) -> Self {
        self.plan_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plan type.</p>
    pub fn set_plan_type(mut self, input: ::std::option::Option<crate::types::ProvisionedProductPlanType>) -> Self {
        self.plan_type = input;
        self
    }
    /// <p>The plan type.</p>
    pub fn get_plan_type(&self) -> &::std::option::Option<crate::types::ProvisionedProductPlanType> {
        &self.plan_type
    }
    /// Appends an item to `notification_arns`.
    ///
    /// To override the contents of this collection use [`set_notification_arns`](Self::set_notification_arns).
    ///
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn notification_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.notification_arns.unwrap_or_default();
        v.push(input.into());
        self.notification_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn set_notification_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.notification_arns = input;
        self
    }
    /// <p>Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.</p>
    pub fn get_notification_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.notification_arns
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>.</p>
    pub fn path_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>.</p>
    pub fn set_path_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path_id = input;
        self
    }
    /// <p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use <code>ListLaunchPaths</code>.</p>
    pub fn get_path_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.path_id
    }
    /// <p>The product identifier.</p>
    /// This field is required.
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product identifier.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The product identifier.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_id
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    /// This field is required.
    pub fn provisioned_product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn set_provisioned_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_product_name = input;
        self
    }
    /// <p>A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.</p>
    pub fn get_provisioned_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_product_name
    }
    /// <p>The identifier of the provisioning artifact.</p>
    /// This field is required.
    pub fn provisioning_artifact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioning_artifact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn set_provisioning_artifact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioning_artifact_id = input;
        self
    }
    /// <p>The identifier of the provisioning artifact.</p>
    pub fn get_provisioning_artifact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioning_artifact_id
    }
    /// Appends an item to `provisioning_parameters`.
    ///
    /// To override the contents of this collection use [`set_provisioning_parameters`](Self::set_provisioning_parameters).
    ///
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn provisioning_parameters(mut self, input: crate::types::UpdateProvisioningParameter) -> Self {
        let mut v = self.provisioning_parameters.unwrap_or_default();
        v.push(input);
        self.provisioning_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn set_provisioning_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>>) -> Self {
        self.provisioning_parameters = input;
        self
    }
    /// <p>Parameters specified by the administrator that are required for provisioning the product.</p>
    pub fn get_provisioning_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateProvisioningParameter>> {
        &self.provisioning_parameters
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    /// This field is required.
    pub fn idempotency_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idempotency_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn set_idempotency_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idempotency_token = input;
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn get_idempotency_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.idempotency_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more tags.</p>
    /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>One or more tags.</p>
    /// <p>If the plan is for an existing provisioned product, the product must have a <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateProvisionedProductPlanInput`](crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput {
            accept_language: self.accept_language,
            plan_name: self.plan_name,
            plan_type: self.plan_type,
            notification_arns: self.notification_arns,
            path_id: self.path_id,
            product_id: self.product_id,
            provisioned_product_name: self.provisioned_product_name,
            provisioning_artifact_id: self.provisioning_artifact_id,
            provisioning_parameters: self.provisioning_parameters,
            idempotency_token: self.idempotency_token,
            tags: self.tags,
        })
    }
}
