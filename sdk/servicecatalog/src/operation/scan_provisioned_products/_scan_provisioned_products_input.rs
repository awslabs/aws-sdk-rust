// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanProvisionedProductsInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
    #[doc(hidden)]
    pub access_level_filter: std::option::Option<crate::types::AccessLevelFilter>,
    /// <p>The maximum number of items to return with this call.</p>
    #[doc(hidden)]
    pub page_size: i32,
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    #[doc(hidden)]
    pub page_token: std::option::Option<std::string::String>,
}
impl ScanProvisionedProductsInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
    pub fn access_level_filter(&self) -> std::option::Option<&crate::types::AccessLevelFilter> {
        self.access_level_filter.as_ref()
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(&self) -> i32 {
        self.page_size
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(&self) -> std::option::Option<&str> {
        self.page_token.as_deref()
    }
}
impl ScanProvisionedProductsInput {
    /// Creates a new builder-style object to manufacture [`ScanProvisionedProductsInput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsInput).
    pub fn builder(
    ) -> crate::operation::scan_provisioned_products::builders::ScanProvisionedProductsInputBuilder
    {
        crate::operation::scan_provisioned_products::builders::ScanProvisionedProductsInputBuilder::default()
    }
}

/// A builder for [`ScanProvisionedProductsInput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanProvisionedProductsInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) access_level_filter: std::option::Option<crate::types::AccessLevelFilter>,
    pub(crate) page_size: std::option::Option<i32>,
    pub(crate) page_token: std::option::Option<std::string::String>,
}
impl ScanProvisionedProductsInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
    pub fn access_level_filter(mut self, input: crate::types::AccessLevelFilter) -> Self {
        self.access_level_filter = Some(input);
        self
    }
    /// <p>The access level to use to obtain results. The default is <code>User</code>.</p>
    pub fn set_access_level_filter(
        mut self,
        input: std::option::Option<crate::types::AccessLevelFilter>,
    ) -> Self {
        self.access_level_filter = input;
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = Some(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_token = Some(input.into());
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ScanProvisionedProductsInput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::scan_provisioned_products::ScanProvisionedProductsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::scan_provisioned_products::ScanProvisionedProductsInput {
                accept_language: self.accept_language,
                access_level_filter: self.access_level_filter,
                page_size: self.page_size.unwrap_or_default(),
                page_token: self.page_token,
            },
        )
    }
}
