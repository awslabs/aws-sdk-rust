// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanProvisionedProductsOutput {
    /// <p>Information about the provisioned products.</p>
    #[doc(hidden)]
    pub provisioned_products:
        std::option::Option<std::vec::Vec<crate::types::ProvisionedProductDetail>>,
    /// <p>The page token to use to retrieve the next set of results. If there are no additional results, this value is null.</p>
    #[doc(hidden)]
    pub next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ScanProvisionedProductsOutput {
    /// <p>Information about the provisioned products.</p>
    pub fn provisioned_products(
        &self,
    ) -> std::option::Option<&[crate::types::ProvisionedProductDetail]> {
        self.provisioned_products.as_deref()
    }
    /// <p>The page token to use to retrieve the next set of results. If there are no additional results, this value is null.</p>
    pub fn next_page_token(&self) -> std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ScanProvisionedProductsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ScanProvisionedProductsOutput {
    /// Creates a new builder-style object to manufacture [`ScanProvisionedProductsOutput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsOutput).
    pub fn builder(
    ) -> crate::operation::scan_provisioned_products::builders::ScanProvisionedProductsOutputBuilder
    {
        crate::operation::scan_provisioned_products::builders::ScanProvisionedProductsOutputBuilder::default()
    }
}

/// A builder for [`ScanProvisionedProductsOutput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanProvisionedProductsOutputBuilder {
    pub(crate) provisioned_products:
        std::option::Option<std::vec::Vec<crate::types::ProvisionedProductDetail>>,
    pub(crate) next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ScanProvisionedProductsOutputBuilder {
    /// Appends an item to `provisioned_products`.
    ///
    /// To override the contents of this collection use [`set_provisioned_products`](Self::set_provisioned_products).
    ///
    /// <p>Information about the provisioned products.</p>
    pub fn provisioned_products(mut self, input: crate::types::ProvisionedProductDetail) -> Self {
        let mut v = self.provisioned_products.unwrap_or_default();
        v.push(input);
        self.provisioned_products = Some(v);
        self
    }
    /// <p>Information about the provisioned products.</p>
    pub fn set_provisioned_products(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProvisionedProductDetail>>,
    ) -> Self {
        self.provisioned_products = input;
        self
    }
    /// <p>The page token to use to retrieve the next set of results. If there are no additional results, this value is null.</p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_token = Some(input.into());
        self
    }
    /// <p>The page token to use to retrieve the next set of results. If there are no additional results, this value is null.</p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ScanProvisionedProductsOutput`](crate::operation::scan_provisioned_products::ScanProvisionedProductsOutput).
    pub fn build(
        self,
    ) -> crate::operation::scan_provisioned_products::ScanProvisionedProductsOutput {
        crate::operation::scan_provisioned_products::ScanProvisionedProductsOutput {
            provisioned_products: self.provisioned_products,
            next_page_token: self.next_page_token,
            _request_id: self._request_id,
        }
    }
}
