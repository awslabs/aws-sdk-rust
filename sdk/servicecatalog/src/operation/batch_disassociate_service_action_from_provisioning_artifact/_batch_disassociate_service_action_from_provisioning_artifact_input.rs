// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDisassociateServiceActionFromProvisioningArtifactInput {
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    #[doc(hidden)]
    pub service_action_associations:
        std::option::Option<std::vec::Vec<crate::types::ServiceActionAssociation>>,
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
}
impl BatchDisassociateServiceActionFromProvisioningArtifactInput {
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn service_action_associations(
        &self,
    ) -> std::option::Option<&[crate::types::ServiceActionAssociation]> {
        self.service_action_associations.as_deref()
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
}
impl BatchDisassociateServiceActionFromProvisioningArtifactInput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateServiceActionFromProvisioningArtifactInput`](crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactInput).
    pub fn builder() -> crate::operation::batch_disassociate_service_action_from_provisioning_artifact::builders::BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder{
        crate::operation::batch_disassociate_service_action_from_provisioning_artifact::builders::BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder::default()
    }
}

/// A builder for [`BatchDisassociateServiceActionFromProvisioningArtifactInput`](crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder {
    pub(crate) service_action_associations:
        std::option::Option<std::vec::Vec<crate::types::ServiceActionAssociation>>,
    pub(crate) accept_language: std::option::Option<std::string::String>,
}
impl BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder {
    /// Appends an item to `service_action_associations`.
    ///
    /// To override the contents of this collection use [`set_service_action_associations`](Self::set_service_action_associations).
    ///
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn service_action_associations(
        mut self,
        input: crate::types::ServiceActionAssociation,
    ) -> Self {
        let mut v = self.service_action_associations.unwrap_or_default();
        v.push(input);
        self.service_action_associations = Some(v);
        self
    }
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn set_service_action_associations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ServiceActionAssociation>>,
    ) -> Self {
        self.service_action_associations = input;
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDisassociateServiceActionFromProvisioningArtifactInput`](crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactInput).
    pub fn build(self) -> Result<crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactInput {
                service_action_associations: self.service_action_associations
                ,
                accept_language: self.accept_language
                ,
            }
        )
    }
}
