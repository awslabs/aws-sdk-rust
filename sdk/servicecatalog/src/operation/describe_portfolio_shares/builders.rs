// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_portfolio_shares::_describe_portfolio_shares_output::DescribePortfolioSharesOutputBuilder;

pub use crate::operation::describe_portfolio_shares::_describe_portfolio_shares_input::DescribePortfolioSharesInputBuilder;

/// Fluent builder constructing a request to `DescribePortfolioShares`.
///
/// <p>Returns a summary of each of the portfolio shares that were created for the specified portfolio.</p>
/// <p>You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share.</p>
/// <p>The <code>PortfolioId</code> and <code>Type</code> parameters are both required.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePortfolioSharesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::describe_portfolio_shares::builders::DescribePortfolioSharesInputBuilder,
}
impl DescribePortfolioSharesFluentBuilder {
    /// Creates a new `DescribePortfolioShares`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_portfolio_shares::DescribePortfolioShares,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_portfolio_shares::DescribePortfolioSharesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_portfolio_shares::DescribePortfolioSharesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_portfolio_shares::DescribePortfolioSharesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_portfolio_shares::paginator::DescribePortfolioSharesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_portfolio_shares::paginator::DescribePortfolioSharesPaginator
    {
        crate::operation::describe_portfolio_shares::paginator::DescribePortfolioSharesPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier of the portfolio for which shares will be retrieved.</p>
    pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.portfolio_id(input.into());
        self
    }
    /// <p>The unique identifier of the portfolio for which shares will be retrieved.</p>
    pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_portfolio_id(input);
        self
    }
    /// <p>The type of portfolio share to summarize. This field acts as a filter on the type of portfolio share, which can be one of the following:</p>
    /// <p>1. <code>ACCOUNT</code> - Represents an external account to account share.</p>
    /// <p>2. <code>ORGANIZATION</code> - Represents a share to an organization. This share is available to every account in the organization.</p>
    /// <p>3. <code>ORGANIZATIONAL_UNIT</code> - Represents a share to an organizational unit.</p>
    /// <p>4. <code>ORGANIZATION_MEMBER_ACCOUNT</code> - Represents a share to an account in the organization.</p>
    pub fn r#type(mut self, input: crate::types::DescribePortfolioShareType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of portfolio share to summarize. This field acts as a filter on the type of portfolio share, which can be one of the following:</p>
    /// <p>1. <code>ACCOUNT</code> - Represents an external account to account share.</p>
    /// <p>2. <code>ORGANIZATION</code> - Represents a share to an organization. This share is available to every account in the organization.</p>
    /// <p>3. <code>ORGANIZATIONAL_UNIT</code> - Represents a share to an organizational unit.</p>
    /// <p>4. <code>ORGANIZATION_MEMBER_ACCOUNT</code> - Represents a share to an account in the organization.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::DescribePortfolioShareType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_token(input.into());
        self
    }
    /// <p>The page token for the next set of results. To retrieve the first set of results, use null.</p>
    pub fn set_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_token(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.inner = self.inner.page_size(input);
        self
    }
    /// <p>The maximum number of items to return with this call.</p>
    pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_page_size(input);
        self
    }
}
