// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProductOutput {
    /// <p>Information about the product view.</p>
    #[doc(hidden)]
    pub product_view_detail: std::option::Option<crate::types::ProductViewDetail>,
    /// <p>Information about the tags associated with the product.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl UpdateProductOutput {
    /// <p>Information about the product view.</p>
    pub fn product_view_detail(&self) -> std::option::Option<&crate::types::ProductViewDetail> {
        self.product_view_detail.as_ref()
    }
    /// <p>Information about the tags associated with the product.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateProductOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProductOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProductOutput`](crate::operation::update_product::UpdateProductOutput).
    pub fn builder() -> crate::operation::update_product::builders::UpdateProductOutputBuilder {
        crate::operation::update_product::builders::UpdateProductOutputBuilder::default()
    }
}

/// A builder for [`UpdateProductOutput`](crate::operation::update_product::UpdateProductOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProductOutputBuilder {
    pub(crate) product_view_detail: std::option::Option<crate::types::ProductViewDetail>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl UpdateProductOutputBuilder {
    /// <p>Information about the product view.</p>
    pub fn product_view_detail(mut self, input: crate::types::ProductViewDetail) -> Self {
        self.product_view_detail = Some(input);
        self
    }
    /// <p>Information about the product view.</p>
    pub fn set_product_view_detail(
        mut self,
        input: std::option::Option<crate::types::ProductViewDetail>,
    ) -> Self {
        self.product_view_detail = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Information about the tags associated with the product.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Information about the tags associated with the product.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProductOutput`](crate::operation::update_product::UpdateProductOutput).
    pub fn build(self) -> crate::operation::update_product::UpdateProductOutput {
        crate::operation::update_product::UpdateProductOutput {
            product_view_detail: self.product_view_detail,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
