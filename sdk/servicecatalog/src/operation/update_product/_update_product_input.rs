// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The product identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The updated product name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated owner of the product.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The updated description of the product.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated distributor of the product.</p>
    #[doc(hidden)]
    pub distributor: std::option::Option<std::string::String>,
    /// <p>The updated support description for the product.</p>
    #[doc(hidden)]
    pub support_description: std::option::Option<std::string::String>,
    /// <p>The updated support email for the product.</p>
    #[doc(hidden)]
    pub support_email: std::option::Option<std::string::String>,
    /// <p>The updated support URL for the product.</p>
    #[doc(hidden)]
    pub support_url: std::option::Option<std::string::String>,
    /// <p>The tags to add to the product.</p>
    #[doc(hidden)]
    pub add_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The tags to remove from the product.</p>
    #[doc(hidden)]
    pub remove_tags: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies connection details for the updated product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub source_connection: std::option::Option<crate::types::SourceConnection>,
}
impl UpdateProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The product identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The updated product name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated owner of the product.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The updated description of the product.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated distributor of the product.</p>
    pub fn distributor(&self) -> std::option::Option<&str> {
        self.distributor.as_deref()
    }
    /// <p>The updated support description for the product.</p>
    pub fn support_description(&self) -> std::option::Option<&str> {
        self.support_description.as_deref()
    }
    /// <p>The updated support email for the product.</p>
    pub fn support_email(&self) -> std::option::Option<&str> {
        self.support_email.as_deref()
    }
    /// <p>The updated support URL for the product.</p>
    pub fn support_url(&self) -> std::option::Option<&str> {
        self.support_url.as_deref()
    }
    /// <p>The tags to add to the product.</p>
    pub fn add_tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.add_tags.as_deref()
    }
    /// <p>The tags to remove from the product.</p>
    pub fn remove_tags(&self) -> std::option::Option<&[std::string::String]> {
        self.remove_tags.as_deref()
    }
    /// <p>Specifies connection details for the updated product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn source_connection(&self) -> std::option::Option<&crate::types::SourceConnection> {
        self.source_connection.as_ref()
    }
}
impl UpdateProductInput {
    /// Creates a new builder-style object to manufacture [`UpdateProductInput`](crate::operation::update_product::UpdateProductInput).
    pub fn builder() -> crate::operation::update_product::builders::UpdateProductInputBuilder {
        crate::operation::update_product::builders::UpdateProductInputBuilder::default()
    }
}

/// A builder for [`UpdateProductInput`](crate::operation::update_product::UpdateProductInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProductInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) distributor: std::option::Option<std::string::String>,
    pub(crate) support_description: std::option::Option<std::string::String>,
    pub(crate) support_email: std::option::Option<std::string::String>,
    pub(crate) support_url: std::option::Option<std::string::String>,
    pub(crate) add_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) remove_tags: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) source_connection: std::option::Option<crate::types::SourceConnection>,
}
impl UpdateProductInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The product identifier.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The product identifier.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The updated product name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated product name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated owner of the product.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The updated owner of the product.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The updated description of the product.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated description of the product.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated distributor of the product.</p>
    pub fn distributor(mut self, input: impl Into<std::string::String>) -> Self {
        self.distributor = Some(input.into());
        self
    }
    /// <p>The updated distributor of the product.</p>
    pub fn set_distributor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.distributor = input;
        self
    }
    /// <p>The updated support description for the product.</p>
    pub fn support_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_description = Some(input.into());
        self
    }
    /// <p>The updated support description for the product.</p>
    pub fn set_support_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.support_description = input;
        self
    }
    /// <p>The updated support email for the product.</p>
    pub fn support_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_email = Some(input.into());
        self
    }
    /// <p>The updated support email for the product.</p>
    pub fn set_support_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_email = input;
        self
    }
    /// <p>The updated support URL for the product.</p>
    pub fn support_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_url = Some(input.into());
        self
    }
    /// <p>The updated support URL for the product.</p>
    pub fn set_support_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_url = input;
        self
    }
    /// Appends an item to `add_tags`.
    ///
    /// To override the contents of this collection use [`set_add_tags`](Self::set_add_tags).
    ///
    /// <p>The tags to add to the product.</p>
    pub fn add_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.add_tags.unwrap_or_default();
        v.push(input);
        self.add_tags = Some(v);
        self
    }
    /// <p>The tags to add to the product.</p>
    pub fn set_add_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.add_tags = input;
        self
    }
    /// Appends an item to `remove_tags`.
    ///
    /// To override the contents of this collection use [`set_remove_tags`](Self::set_remove_tags).
    ///
    /// <p>The tags to remove from the product.</p>
    pub fn remove_tags(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.remove_tags.unwrap_or_default();
        v.push(input.into());
        self.remove_tags = Some(v);
        self
    }
    /// <p>The tags to remove from the product.</p>
    pub fn set_remove_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.remove_tags = input;
        self
    }
    /// <p>Specifies connection details for the updated product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn source_connection(mut self, input: crate::types::SourceConnection) -> Self {
        self.source_connection = Some(input);
        self
    }
    /// <p>Specifies connection details for the updated product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn set_source_connection(
        mut self,
        input: std::option::Option<crate::types::SourceConnection>,
    ) -> Self {
        self.source_connection = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProductInput`](crate::operation::update_product::UpdateProductInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_product::UpdateProductInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_product::UpdateProductInput {
            accept_language: self.accept_language,
            id: self.id,
            name: self.name,
            owner: self.owner,
            description: self.description,
            distributor: self.distributor,
            support_description: self.support_description,
            support_email: self.support_email,
            support_url: self.support_url,
            add_tags: self.add_tags,
            remove_tags: self.remove_tags,
            source_connection: self.source_connection,
        })
    }
}
