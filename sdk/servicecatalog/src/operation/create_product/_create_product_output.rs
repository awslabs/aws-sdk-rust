// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateProductOutput {
    /// <p>Information about the product view.</p>
    pub product_view_detail: ::std::option::Option<crate::types::ProductViewDetail>,
    /// <p>Information about the provisioning artifact. </p>
    pub provisioning_artifact_detail: ::std::option::Option<crate::types::ProvisioningArtifactDetail>,
    /// <p>Information about the tags associated with the product.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl CreateProductOutput {
    /// <p>Information about the product view.</p>
    pub fn product_view_detail(&self) -> ::std::option::Option<&crate::types::ProductViewDetail> {
        self.product_view_detail.as_ref()
    }
    /// <p>Information about the provisioning artifact. </p>
    pub fn provisioning_artifact_detail(&self) -> ::std::option::Option<&crate::types::ProvisioningArtifactDetail> {
        self.provisioning_artifact_detail.as_ref()
    }
    /// <p>Information about the tags associated with the product.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for CreateProductOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProductOutput {
    /// Creates a new builder-style object to manufacture [`CreateProductOutput`](crate::operation::create_product::CreateProductOutput).
    pub fn builder() -> crate::operation::create_product::builders::CreateProductOutputBuilder {
        crate::operation::create_product::builders::CreateProductOutputBuilder::default()
    }
}

/// A builder for [`CreateProductOutput`](crate::operation::create_product::CreateProductOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateProductOutputBuilder {
    pub(crate) product_view_detail: ::std::option::Option<crate::types::ProductViewDetail>,
    pub(crate) provisioning_artifact_detail: ::std::option::Option<crate::types::ProvisioningArtifactDetail>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl CreateProductOutputBuilder {
    /// <p>Information about the product view.</p>
    pub fn product_view_detail(mut self, input: crate::types::ProductViewDetail) -> Self {
        self.product_view_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the product view.</p>
    pub fn set_product_view_detail(mut self, input: ::std::option::Option<crate::types::ProductViewDetail>) -> Self {
        self.product_view_detail = input;
        self
    }
    /// <p>Information about the product view.</p>
    pub fn get_product_view_detail(&self) -> &::std::option::Option<crate::types::ProductViewDetail> {
        &self.product_view_detail
    }
    /// <p>Information about the provisioning artifact. </p>
    pub fn provisioning_artifact_detail(mut self, input: crate::types::ProvisioningArtifactDetail) -> Self {
        self.provisioning_artifact_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the provisioning artifact. </p>
    pub fn set_provisioning_artifact_detail(mut self, input: ::std::option::Option<crate::types::ProvisioningArtifactDetail>) -> Self {
        self.provisioning_artifact_detail = input;
        self
    }
    /// <p>Information about the provisioning artifact. </p>
    pub fn get_provisioning_artifact_detail(&self) -> &::std::option::Option<crate::types::ProvisioningArtifactDetail> {
        &self.provisioning_artifact_detail
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Information about the tags associated with the product.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the tags associated with the product.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Information about the tags associated with the product.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateProductOutput`](crate::operation::create_product::CreateProductOutput).
    pub fn build(self) -> crate::operation::create_product::CreateProductOutput {
        crate::operation::create_product::CreateProductOutput {
            product_view_detail: self.product_view_detail,
            provisioning_artifact_detail: self.provisioning_artifact_detail,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
