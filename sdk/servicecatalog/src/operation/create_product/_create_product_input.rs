// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub accept_language: std::option::Option<std::string::String>,
    /// <p>The name of the product.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The owner of the product.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The description of the product.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The distributor of the product.</p>
    #[doc(hidden)]
    pub distributor: std::option::Option<std::string::String>,
    /// <p>The support information about the product.</p>
    #[doc(hidden)]
    pub support_description: std::option::Option<std::string::String>,
    /// <p>The contact email for product support.</p>
    #[doc(hidden)]
    pub support_email: std::option::Option<std::string::String>,
    /// <p>The contact URL for product support.</p>
    /// <p> <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
    #[doc(hidden)]
    pub support_url: std::option::Option<std::string::String>,
    /// <p>The type of product.</p>
    #[doc(hidden)]
    pub product_type: std::option::Option<crate::types::ProductType>,
    /// <p>One or more tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The configuration of the provisioning artifact. </p>
    #[doc(hidden)]
    pub provisioning_artifact_parameters:
        std::option::Option<crate::types::ProvisioningArtifactProperties>,
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    #[doc(hidden)]
    pub idempotency_token: std::option::Option<std::string::String>,
    /// <p>Specifies connection details for the created product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub source_connection: std::option::Option<crate::types::SourceConnection>,
}
impl CreateProductInput {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(&self) -> std::option::Option<&str> {
        self.accept_language.as_deref()
    }
    /// <p>The name of the product.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The owner of the product.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The description of the product.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The distributor of the product.</p>
    pub fn distributor(&self) -> std::option::Option<&str> {
        self.distributor.as_deref()
    }
    /// <p>The support information about the product.</p>
    pub fn support_description(&self) -> std::option::Option<&str> {
        self.support_description.as_deref()
    }
    /// <p>The contact email for product support.</p>
    pub fn support_email(&self) -> std::option::Option<&str> {
        self.support_email.as_deref()
    }
    /// <p>The contact URL for product support.</p>
    /// <p> <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
    pub fn support_url(&self) -> std::option::Option<&str> {
        self.support_url.as_deref()
    }
    /// <p>The type of product.</p>
    pub fn product_type(&self) -> std::option::Option<&crate::types::ProductType> {
        self.product_type.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The configuration of the provisioning artifact. </p>
    pub fn provisioning_artifact_parameters(
        &self,
    ) -> std::option::Option<&crate::types::ProvisioningArtifactProperties> {
        self.provisioning_artifact_parameters.as_ref()
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(&self) -> std::option::Option<&str> {
        self.idempotency_token.as_deref()
    }
    /// <p>Specifies connection details for the created product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn source_connection(&self) -> std::option::Option<&crate::types::SourceConnection> {
        self.source_connection.as_ref()
    }
}
impl CreateProductInput {
    /// Creates a new builder-style object to manufacture [`CreateProductInput`](crate::operation::create_product::CreateProductInput).
    pub fn builder() -> crate::operation::create_product::builders::CreateProductInputBuilder {
        crate::operation::create_product::builders::CreateProductInputBuilder::default()
    }
}

/// A builder for [`CreateProductInput`](crate::operation::create_product::CreateProductInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateProductInputBuilder {
    pub(crate) accept_language: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) distributor: std::option::Option<std::string::String>,
    pub(crate) support_description: std::option::Option<std::string::String>,
    pub(crate) support_email: std::option::Option<std::string::String>,
    pub(crate) support_url: std::option::Option<std::string::String>,
    pub(crate) product_type: std::option::Option<crate::types::ProductType>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) provisioning_artifact_parameters:
        std::option::Option<crate::types::ProvisioningArtifactProperties>,
    pub(crate) idempotency_token: std::option::Option<std::string::String>,
    pub(crate) source_connection: std::option::Option<crate::types::SourceConnection>,
}
impl CreateProductInputBuilder {
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.accept_language = Some(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>en</code> - English (default)</p> </li>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accept_language = input;
        self
    }
    /// <p>The name of the product.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the product.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The owner of the product.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The owner of the product.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The description of the product.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the product.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The distributor of the product.</p>
    pub fn distributor(mut self, input: impl Into<std::string::String>) -> Self {
        self.distributor = Some(input.into());
        self
    }
    /// <p>The distributor of the product.</p>
    pub fn set_distributor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.distributor = input;
        self
    }
    /// <p>The support information about the product.</p>
    pub fn support_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_description = Some(input.into());
        self
    }
    /// <p>The support information about the product.</p>
    pub fn set_support_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.support_description = input;
        self
    }
    /// <p>The contact email for product support.</p>
    pub fn support_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_email = Some(input.into());
        self
    }
    /// <p>The contact email for product support.</p>
    pub fn set_support_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_email = input;
        self
    }
    /// <p>The contact URL for product support.</p>
    /// <p> <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
    pub fn support_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.support_url = Some(input.into());
        self
    }
    /// <p>The contact URL for product support.</p>
    /// <p> <code>^https?:\/\// </code>/ is the pattern used to validate SupportUrl.</p>
    pub fn set_support_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.support_url = input;
        self
    }
    /// <p>The type of product.</p>
    pub fn product_type(mut self, input: crate::types::ProductType) -> Self {
        self.product_type = Some(input);
        self
    }
    /// <p>The type of product.</p>
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::types::ProductType>,
    ) -> Self {
        self.product_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>One or more tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The configuration of the provisioning artifact. </p>
    pub fn provisioning_artifact_parameters(
        mut self,
        input: crate::types::ProvisioningArtifactProperties,
    ) -> Self {
        self.provisioning_artifact_parameters = Some(input);
        self
    }
    /// <p>The configuration of the provisioning artifact. </p>
    pub fn set_provisioning_artifact_parameters(
        mut self,
        input: std::option::Option<crate::types::ProvisioningArtifactProperties>,
    ) -> Self {
        self.provisioning_artifact_parameters = input;
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.idempotency_token = Some(input.into());
        self
    }
    /// <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.idempotency_token = input;
        self
    }
    /// <p>Specifies connection details for the created product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn source_connection(mut self, input: crate::types::SourceConnection) -> Self {
        self.source_connection = Some(input);
        self
    }
    /// <p>Specifies connection details for the created product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The <code>SourceConnection</code> parameter consists of the following sub-fields.</p>
    /// <ul>
    /// <li> <p> <code>Type</code> </p> </li>
    /// <li> <p> <code>ConnectionParamters</code> </p> </li>
    /// </ul>
    pub fn set_source_connection(
        mut self,
        input: std::option::Option<crate::types::SourceConnection>,
    ) -> Self {
        self.source_connection = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateProductInput`](crate::operation::create_product::CreateProductInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_product::CreateProductInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_product::CreateProductInput {
            accept_language: self.accept_language,
            name: self.name,
            owner: self.owner,
            description: self.description,
            distributor: self.distributor,
            support_description: self.support_description,
            support_email: self.support_email,
            support_url: self.support_url,
            product_type: self.product_type,
            tags: self.tags,
            provisioning_artifact_parameters: self.provisioning_artifact_parameters,
            idempotency_token: self.idempotency_token,
            source_connection: self.source_connection,
        })
    }
}
