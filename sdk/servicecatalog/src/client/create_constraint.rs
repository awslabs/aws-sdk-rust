// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateConstraint`](crate::client::fluent_builders::CreateConstraint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`accept_language(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::accept_language) / [`set_accept_language(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_accept_language): <p>The language code.</p>  <ul>   <li> <p> <code>en</code> - English (default)</p> </li>   <li> <p> <code>jp</code> - Japanese</p> </li>   <li> <p> <code>zh</code> - Chinese</p> </li>  </ul>
    ///   - [`portfolio_id(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::portfolio_id) / [`set_portfolio_id(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_portfolio_id): <p>The portfolio identifier.</p>
    ///   - [`product_id(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::product_id) / [`set_product_id(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_product_id): <p>The product identifier.</p>
    ///   - [`parameters(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::parameters) / [`set_parameters(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_parameters): <p>The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:</p>  <dl>   <dt>   LAUNCH  </dt>   <dd>    <p>You are required to specify either the <code>RoleArn</code> or the <code>LocalRoleName</code> but can't use both.</p>    <p>Specify the <code>RoleArn</code> property as follows:</p>    <p> <code>{"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}</code> </p>    <p>Specify the <code>LocalRoleName</code> property as follows:</p>    <p> <code>{"LocalRoleName": "SCBasicLaunchRole"}</code> </p>    <p>If you specify the <code>LocalRoleName</code> property, when an account uses the launch constraint, the IAM role with that name in the account will be used. This allows launch-role constraints to be account-agnostic so the administrator can create fewer resources per shared account.</p> <note>     <p>The given role name must exist in the account used to create the launch constraint and the account of the user who launches a product with this launch constraint.</p>    </note>    <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>    <p>You also cannot have more than one <code>LAUNCH</code> constraint on a product and portfolio.</p>   </dd>   <dt>   NOTIFICATION  </dt>   <dd>    <p>Specify the <code>NotificationArns</code> property as follows:</p>    <p> <code>{"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}</code> </p>   </dd>   <dt>   RESOURCE_UPDATE  </dt>   <dd>    <p>Specify the <code>TagUpdatesOnProvisionedProduct</code> property as follows:</p>    <p> <code>{"Version":"2.0","Properties":{"TagUpdateOnProvisionedProduct":"String"}}</code> </p>    <p>The <code>TagUpdatesOnProvisionedProduct</code> property accepts a string value of <code>ALLOWED</code> or <code>NOT_ALLOWED</code>.</p>   </dd>   <dt>   STACKSET  </dt>   <dd>    <p>Specify the <code>Parameters</code> property as follows:</p>    <p> <code>{"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}</code> </p>    <p>You cannot have both a <code>LAUNCH</code> and a <code>STACKSET</code> constraint.</p>    <p>You also cannot have more than one <code>STACKSET</code> constraint on a product and portfolio.</p>    <p>Products with a <code>STACKSET</code> constraint will launch an CloudFormation stack set.</p>   </dd>   <dt>   TEMPLATE  </dt>   <dd>    <p>Specify the <code>Rules</code> property. For more information, see <a href="http://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html">Template Constraint Rules</a>.</p>   </dd>  </dl>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_type): <p>The type of constraint.</p>  <ul>   <li> <p> <code>LAUNCH</code> </p> </li>   <li> <p> <code>NOTIFICATION</code> </p> </li>   <li> <p> <code>RESOURCE_UPDATE</code> </p> </li>   <li> <p> <code>STACKSET</code> </p> </li>   <li> <p> <code>TEMPLATE</code> </p> </li>  </ul>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_description): <p>The description of the constraint.</p>
    ///   - [`idempotency_token(impl Into<String>)`](crate::client::fluent_builders::CreateConstraint::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::client::fluent_builders::CreateConstraint::set_idempotency_token): <p>A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.</p>
    /// - On success, responds with [`CreateConstraintOutput`](crate::output::CreateConstraintOutput) with field(s):
    ///   - [`constraint_detail(Option<ConstraintDetail>)`](crate::output::CreateConstraintOutput::constraint_detail): <p>Information about the constraint.</p>
    ///   - [`constraint_parameters(Option<String>)`](crate::output::CreateConstraintOutput::constraint_parameters): <p>The constraint parameters.</p>
    ///   - [`status(Option<Status>)`](crate::output::CreateConstraintOutput::status): <p>The status of the current request.</p>
    /// - On failure, responds with [`SdkError<CreateConstraintError>`](crate::error::CreateConstraintError)
    pub fn create_constraint(&self) -> crate::client::fluent_builders::CreateConstraint {
        crate::client::fluent_builders::CreateConstraint::new(self.handle.clone())
    }
}
