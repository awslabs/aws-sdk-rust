// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisassociatePrincipalFromPortfolio`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`accept_language(impl Into<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::accept_language) / [`set_accept_language(Option<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::set_accept_language): <p>The language code.</p>  <ul>   <li> <p> <code>en</code> - English (default)</p> </li>   <li> <p> <code>jp</code> - Japanese</p> </li>   <li> <p> <code>zh</code> - Chinese</p> </li>  </ul>
    ///   - [`portfolio_id(impl Into<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::portfolio_id) / [`set_portfolio_id(Option<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::set_portfolio_id): <p>The portfolio identifier.</p>
    ///   - [`principal_arn(impl Into<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::principal_arn) / [`set_principal_arn(Option<String>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::set_principal_arn): <p>The ARN of the principal (IAM user, role, or group). This field allows an ARN with no <code>accountID</code> if <code>PrincipalType</code> is <code>IAM_PATTERN</code>.</p>
    ///   - [`principal_type(PrincipalType)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::principal_type) / [`set_principal_type(Option<PrincipalType>)`](crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::set_principal_type): <p>The supported value is <code>IAM</code> if you use a fully defined ARN, or <code>IAM_PATTERN</code> if you use no <code>accountID</code>. </p>
    /// - On success, responds with [`DisassociatePrincipalFromPortfolioOutput`](crate::output::DisassociatePrincipalFromPortfolioOutput)
    /// - On failure, responds with [`SdkError<DisassociatePrincipalFromPortfolioError>`](crate::error::DisassociatePrincipalFromPortfolioError)
    pub fn disassociate_principal_from_portfolio(
        &self,
    ) -> crate::client::fluent_builders::DisassociatePrincipalFromPortfolio {
        crate::client::fluent_builders::DisassociatePrincipalFromPortfolio::new(self.handle.clone())
    }
}
