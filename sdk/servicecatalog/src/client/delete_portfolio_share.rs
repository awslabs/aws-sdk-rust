// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeletePortfolioShare`](crate::client::fluent_builders::DeletePortfolioShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`accept_language(impl Into<String>)`](crate::client::fluent_builders::DeletePortfolioShare::accept_language) / [`set_accept_language(Option<String>)`](crate::client::fluent_builders::DeletePortfolioShare::set_accept_language): <p>The language code.</p>  <ul>   <li> <p> <code>en</code> - English (default)</p> </li>   <li> <p> <code>jp</code> - Japanese</p> </li>   <li> <p> <code>zh</code> - Chinese</p> </li>  </ul>
    ///   - [`portfolio_id(impl Into<String>)`](crate::client::fluent_builders::DeletePortfolioShare::portfolio_id) / [`set_portfolio_id(Option<String>)`](crate::client::fluent_builders::DeletePortfolioShare::set_portfolio_id): <p>The portfolio identifier.</p>
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DeletePortfolioShare::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DeletePortfolioShare::set_account_id): <p>The Amazon Web Services account ID.</p>
    ///   - [`organization_node(OrganizationNode)`](crate::client::fluent_builders::DeletePortfolioShare::organization_node) / [`set_organization_node(Option<OrganizationNode>)`](crate::client::fluent_builders::DeletePortfolioShare::set_organization_node): <p>The organization node to whom you are going to stop sharing.</p>
    /// - On success, responds with [`DeletePortfolioShareOutput`](crate::output::DeletePortfolioShareOutput) with field(s):
    ///   - [`portfolio_share_token(Option<String>)`](crate::output::DeletePortfolioShareOutput::portfolio_share_token): <p>The portfolio share unique identifier. This will only be returned if delete is made to an organization node.</p>
    /// - On failure, responds with [`SdkError<DeletePortfolioShareError>`](crate::error::DeletePortfolioShareError)
    pub fn delete_portfolio_share(&self) -> crate::client::fluent_builders::DeletePortfolioShare {
        crate::client::fluent_builders::DeletePortfolioShare::new(self.handle.clone())
    }
}
