// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePortfolioShare`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`accept_language(impl Into<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::accept_language) / [`set_accept_language(Option<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_accept_language): <p>The language code.</p>  <ul>   <li> <p> <code>en</code> - English (default)</p> </li>   <li> <p> <code>jp</code> - Japanese</p> </li>   <li> <p> <code>zh</code> - Chinese</p> </li>  </ul>
    ///   - [`portfolio_id(impl Into<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::portfolio_id) / [`set_portfolio_id(Option<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_portfolio_id): <p>The portfolio identifier.</p>
    ///   - [`account_id(impl Into<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_account_id): <p>The Amazon Web Services account ID. For example, <code>123456789012</code>.</p>
    ///   - [`organization_node(OrganizationNode)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::organization_node) / [`set_organization_node(Option<OrganizationNode>)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_organization_node): <p>The organization node to whom you are going to share. When you pass <code>OrganizationNode</code>, it creates <code>PortfolioShare</code> for all of the Amazon Web Services accounts that are associated to the <code>OrganizationNode</code>. The output returns a <code>PortfolioShareToken</code>, which enables the administrator to monitor the status of the <code>PortfolioShare</code> creation process.</p>
    ///   - [`share_tag_options(bool)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::share_tag_options) / [`set_share_tag_options(bool)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_share_tag_options): <p>Enables or disables <code>TagOptions </code> sharing when creating the portfolio share. If this flag is not provided, TagOptions sharing is disabled.</p>
    ///   - [`share_principals(bool)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::share_principals) / [`set_share_principals(bool)`](crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::set_share_principals): <p>Enables or disables <code>Principal</code> sharing when creating the portfolio share. If this flag is not provided, principal sharing is disabled. </p>  <p>When you enable Principal Name Sharing for a portfolio share, the share recipient account end users with a principal that matches any of the associated IAM patterns can provision products from the portfolio. Once shared, the share recipient can view associations of <code>PrincipalType</code>: <code>IAM_PATTERN</code> on their portfolio. You can create the principals in the recipient account before or after creating the share. </p>
    /// - On success, responds with [`CreatePortfolioShareOutput`](crate::operation::create_portfolio_share::CreatePortfolioShareOutput) with field(s):
    ///   - [`portfolio_share_token(Option<String>)`](crate::operation::create_portfolio_share::CreatePortfolioShareOutput::portfolio_share_token): <p>The portfolio shares a unique identifier that only returns if the portfolio is shared to an organization node.</p>
    /// - On failure, responds with [`SdkError<CreatePortfolioShareError>`](crate::operation::create_portfolio_share::CreatePortfolioShareError)
    pub fn create_portfolio_share(
        &self,
    ) -> crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder {
        crate::operation::create_portfolio_share::builders::CreatePortfolioShareFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
