// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_product::CreateProductInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.owner {
        object.key("Owner").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.distributor {
        object.key("Distributor").string(var_5.as_str());
    }
    if let Some(var_6) = &input.support_description {
        object.key("SupportDescription").string(var_6.as_str());
    }
    if let Some(var_7) = &input.support_email {
        object.key("SupportEmail").string(var_7.as_str());
    }
    if let Some(var_8) = &input.support_url {
        object.key("SupportUrl").string(var_8.as_str());
    }
    if let Some(var_9) = &input.product_type {
        object.key("ProductType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.provisioning_artifact_parameters {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ProvisioningArtifactParameters").start_object();
        crate::protocol_serde::shape_provisioning_artifact_properties::ser_provisioning_artifact_properties(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_16.as_str());
    }
    if let Some(var_17) = &input.source_connection {
        #[allow(unused_mut)]
        let mut object_18 = object.key("SourceConnection").start_object();
        crate::protocol_serde::shape_source_connection::ser_source_connection(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}
