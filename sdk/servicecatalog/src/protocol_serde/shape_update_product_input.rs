// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_product_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_product::UpdateProductInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.id {
        object.key("Id").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.owner {
        object.key("Owner").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("Description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.distributor {
        object.key("Distributor").string(var_6.as_str());
    }
    if let Some(var_7) = &input.support_description {
        object.key("SupportDescription").string(var_7.as_str());
    }
    if let Some(var_8) = &input.support_email {
        object.key("SupportEmail").string(var_8.as_str());
    }
    if let Some(var_9) = &input.support_url {
        object.key("SupportUrl").string(var_9.as_str());
    }
    if let Some(var_10) = &input.add_tags {
        let mut array_11 = object.key("AddTags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.remove_tags {
        let mut array_15 = object.key("RemoveTags").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.source_connection {
        #[allow(unused_mut)]
        let mut object_18 = object.key("SourceConnection").start_object();
        crate::protocol_serde::shape_source_connection::ser_source_connection(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
