// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_provisioned_product_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_provisioned_product::UpdateProvisionedProductInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.provisioned_product_id {
        object.key("ProvisionedProductId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.product_id {
        object.key("ProductId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.product_name {
        object.key("ProductName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.path_id {
        object.key("PathId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.path_name {
        object.key("PathName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.provisioning_parameters {
        let mut array_11 = object.key("ProvisioningParameters").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_update_provisioning_parameter::ser_update_provisioning_parameter(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.provisioning_preferences {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ProvisioningPreferences").start_object();
        crate::protocol_serde::shape_update_provisioning_preferences::ser_update_provisioning_preferences(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.update_token {
        object.key("UpdateToken").string(var_20.as_str());
    }
    Ok(())
}
