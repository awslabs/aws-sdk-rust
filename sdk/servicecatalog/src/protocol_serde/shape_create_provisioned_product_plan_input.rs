// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_provisioned_product_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_provisioned_product_plan::CreateProvisionedProductPlanInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.plan_name {
        object.key("PlanName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.plan_type {
        object.key("PlanType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.notification_arns {
        let mut array_5 = object.key("NotificationArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.path_id {
        object.key("PathId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.product_id {
        object.key("ProductId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.provisioning_parameters {
        let mut array_12 = object.key("ProvisioningParameters").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_update_provisioning_parameter::ser_update_provisioning_parameter(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
