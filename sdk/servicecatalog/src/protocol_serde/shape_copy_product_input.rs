// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_copy_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::copy_product::CopyProductInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_product_arn {
        object.key("SourceProductArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.target_product_id {
        object.key("TargetProductId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.target_product_name {
        object.key("TargetProductName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.source_provisioning_artifact_identifiers {
        let mut array_6 = object
            .key("SourceProvisioningArtifactIdentifiers")
            .start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                for (key_9, value_10) in item_7 {
                    {
                        object_8.key(key_9.as_str()).string(value_10.as_str());
                    }
                }
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_11) = &input.copy_options {
        let mut array_12 = object.key("CopyOptions").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_14.as_str());
    }
    Ok(())
}
