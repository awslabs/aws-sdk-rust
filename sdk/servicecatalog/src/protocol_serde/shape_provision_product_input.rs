// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_provision_product_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::provision_product::ProvisionProductInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.accept_language {
        object.key("AcceptLanguage").string(var_1.as_str());
    }
    if let Some(var_2) = &input.product_id {
        object.key("ProductId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.product_name {
        object.key("ProductName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.provisioning_artifact_name {
        object.key("ProvisioningArtifactName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.path_id {
        object.key("PathId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.path_name {
        object.key("PathName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.provisioned_product_name {
        object.key("ProvisionedProductName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.provisioning_parameters {
        let mut array_10 = object.key("ProvisioningParameters").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_provisioning_parameter::ser_provisioning_parameter(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.provisioning_preferences {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ProvisioningPreferences").start_object();
        crate::protocol_serde::shape_provisioning_preferences::ser_provisioning_preferences(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.notification_arns {
        let mut array_20 = object.key("NotificationArns").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.provision_token {
        object.key("ProvisionToken").string(var_22.as_str());
    }
    Ok(())
}
