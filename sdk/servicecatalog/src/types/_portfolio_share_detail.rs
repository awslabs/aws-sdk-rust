// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the portfolio share.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortfolioShareDetail {
    /// <p>The identifier of the recipient entity that received the portfolio share. The recipient entity can be one of the following:</p>
    /// <p>1. An external account.</p>
    /// <p>2. An organziation member account.</p>
    /// <p>3. An organzational unit (OU).</p>
    /// <p>4. The organization itself. (This shares with every account in the organization).</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The type of the portfolio share.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DescribePortfolioShareType>,
    /// <p>Indicates whether the shared portfolio is imported by the recipient account. If the recipient is in an organization node, the share is automatically imported, and the field is always set to true.</p>
    #[doc(hidden)]
    pub accepted: bool,
    /// <p>Indicates whether TagOptions sharing is enabled or disabled for the portfolio share.</p>
    #[doc(hidden)]
    pub share_tag_options: bool,
    /// <p>Indicates if <code>Principal</code> sharing is enabled or disabled for the portfolio share. </p>
    #[doc(hidden)]
    pub share_principals: bool,
}
impl PortfolioShareDetail {
    /// <p>The identifier of the recipient entity that received the portfolio share. The recipient entity can be one of the following:</p>
    /// <p>1. An external account.</p>
    /// <p>2. An organziation member account.</p>
    /// <p>3. An organzational unit (OU).</p>
    /// <p>4. The organization itself. (This shares with every account in the organization).</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The type of the portfolio share.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DescribePortfolioShareType> {
        self.r#type.as_ref()
    }
    /// <p>Indicates whether the shared portfolio is imported by the recipient account. If the recipient is in an organization node, the share is automatically imported, and the field is always set to true.</p>
    pub fn accepted(&self) -> bool {
        self.accepted
    }
    /// <p>Indicates whether TagOptions sharing is enabled or disabled for the portfolio share.</p>
    pub fn share_tag_options(&self) -> bool {
        self.share_tag_options
    }
    /// <p>Indicates if <code>Principal</code> sharing is enabled or disabled for the portfolio share. </p>
    pub fn share_principals(&self) -> bool {
        self.share_principals
    }
}
impl PortfolioShareDetail {
    /// Creates a new builder-style object to manufacture [`PortfolioShareDetail`](crate::types::PortfolioShareDetail).
    pub fn builder() -> crate::types::builders::PortfolioShareDetailBuilder {
        crate::types::builders::PortfolioShareDetailBuilder::default()
    }
}

/// A builder for [`PortfolioShareDetail`](crate::types::PortfolioShareDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortfolioShareDetailBuilder {
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DescribePortfolioShareType>,
    pub(crate) accepted: std::option::Option<bool>,
    pub(crate) share_tag_options: std::option::Option<bool>,
    pub(crate) share_principals: std::option::Option<bool>,
}
impl PortfolioShareDetailBuilder {
    /// <p>The identifier of the recipient entity that received the portfolio share. The recipient entity can be one of the following:</p>
    /// <p>1. An external account.</p>
    /// <p>2. An organziation member account.</p>
    /// <p>3. An organzational unit (OU).</p>
    /// <p>4. The organization itself. (This shares with every account in the organization).</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The identifier of the recipient entity that received the portfolio share. The recipient entity can be one of the following:</p>
    /// <p>1. An external account.</p>
    /// <p>2. An organziation member account.</p>
    /// <p>3. An organzational unit (OU).</p>
    /// <p>4. The organization itself. (This shares with every account in the organization).</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The type of the portfolio share.</p>
    pub fn r#type(mut self, input: crate::types::DescribePortfolioShareType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the portfolio share.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::DescribePortfolioShareType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates whether the shared portfolio is imported by the recipient account. If the recipient is in an organization node, the share is automatically imported, and the field is always set to true.</p>
    pub fn accepted(mut self, input: bool) -> Self {
        self.accepted = Some(input);
        self
    }
    /// <p>Indicates whether the shared portfolio is imported by the recipient account. If the recipient is in an organization node, the share is automatically imported, and the field is always set to true.</p>
    pub fn set_accepted(mut self, input: std::option::Option<bool>) -> Self {
        self.accepted = input;
        self
    }
    /// <p>Indicates whether TagOptions sharing is enabled or disabled for the portfolio share.</p>
    pub fn share_tag_options(mut self, input: bool) -> Self {
        self.share_tag_options = Some(input);
        self
    }
    /// <p>Indicates whether TagOptions sharing is enabled or disabled for the portfolio share.</p>
    pub fn set_share_tag_options(mut self, input: std::option::Option<bool>) -> Self {
        self.share_tag_options = input;
        self
    }
    /// <p>Indicates if <code>Principal</code> sharing is enabled or disabled for the portfolio share. </p>
    pub fn share_principals(mut self, input: bool) -> Self {
        self.share_principals = Some(input);
        self
    }
    /// <p>Indicates if <code>Principal</code> sharing is enabled or disabled for the portfolio share. </p>
    pub fn set_share_principals(mut self, input: std::option::Option<bool>) -> Self {
        self.share_principals = input;
        self
    }
    /// Consumes the builder and constructs a [`PortfolioShareDetail`](crate::types::PortfolioShareDetail).
    pub fn build(self) -> crate::types::PortfolioShareDetail {
        crate::types::PortfolioShareDetail {
            principal_id: self.principal_id,
            r#type: self.r#type,
            accepted: self.accepted.unwrap_or_default(),
            share_tag_options: self.share_tag_options.unwrap_or_default(),
            share_principals: self.share_principals.unwrap_or_default(),
        }
    }
}
