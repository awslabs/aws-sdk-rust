// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a portfolio.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortfolioDetail {
    /// <p>The portfolio identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ARN assigned to the portfolio.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name to use for display purposes.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The description of the portfolio.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The UTC time stamp of the creation time.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the portfolio provider.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
}
impl PortfolioDetail {
    /// <p>The portfolio identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN assigned to the portfolio.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name to use for display purposes.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the portfolio.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The UTC time stamp of the creation time.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The name of the portfolio provider.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
}
impl PortfolioDetail {
    /// Creates a new builder-style object to manufacture [`PortfolioDetail`](crate::types::PortfolioDetail).
    pub fn builder() -> crate::types::builders::PortfolioDetailBuilder {
        crate::types::builders::PortfolioDetailBuilder::default()
    }
}

/// A builder for [`PortfolioDetail`](crate::types::PortfolioDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortfolioDetailBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
}
impl PortfolioDetailBuilder {
    /// <p>The portfolio identifier.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The portfolio identifier.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ARN assigned to the portfolio.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN assigned to the portfolio.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name to use for display purposes.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name to use for display purposes.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The description of the portfolio.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the portfolio.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The UTC time stamp of the creation time.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The UTC time stamp of the creation time.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The name of the portfolio provider.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the portfolio provider.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// Consumes the builder and constructs a [`PortfolioDetail`](crate::types::PortfolioDetail).
    pub fn build(self) -> crate::types::PortfolioDetail {
        crate::types::PortfolioDetail {
            id: self.id,
            arn: self.arn,
            display_name: self.display_name,
            description: self.description,
            created_time: self.created_time,
            provider_name: self.provider_name,
        }
    }
}
