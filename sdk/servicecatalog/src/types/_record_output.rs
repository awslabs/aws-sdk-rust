// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output for the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordOutput {
    /// <p>The output key.</p>
    #[doc(hidden)]
    pub output_key: std::option::Option<std::string::String>,
    /// <p>The output value.</p>
    #[doc(hidden)]
    pub output_value: std::option::Option<std::string::String>,
    /// <p>The description of the output.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl RecordOutput {
    /// <p>The output key.</p>
    pub fn output_key(&self) -> std::option::Option<&str> {
        self.output_key.as_deref()
    }
    /// <p>The output value.</p>
    pub fn output_value(&self) -> std::option::Option<&str> {
        self.output_value.as_deref()
    }
    /// <p>The description of the output.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl RecordOutput {
    /// Creates a new builder-style object to manufacture [`RecordOutput`](crate::types::RecordOutput).
    pub fn builder() -> crate::types::builders::RecordOutputBuilder {
        crate::types::builders::RecordOutputBuilder::default()
    }
}

/// A builder for [`RecordOutput`](crate::types::RecordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordOutputBuilder {
    pub(crate) output_key: std::option::Option<std::string::String>,
    pub(crate) output_value: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl RecordOutputBuilder {
    /// <p>The output key.</p>
    pub fn output_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_key = Some(input.into());
        self
    }
    /// <p>The output key.</p>
    pub fn set_output_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_key = input;
        self
    }
    /// <p>The output value.</p>
    pub fn output_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_value = Some(input.into());
        self
    }
    /// <p>The output value.</p>
    pub fn set_output_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_value = input;
        self
    }
    /// <p>The description of the output.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the output.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`RecordOutput`](crate::types::RecordOutput).
    pub fn build(self) -> crate::types::RecordOutput {
        crate::types::RecordOutput {
            output_key: self.output_key,
            output_value: self.output_value,
            description: self.description,
        }
    }
}
