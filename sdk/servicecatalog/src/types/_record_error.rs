// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error code and description resulting from an operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordError {
    /// <p>The numeric value of the error.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The description of the error.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl RecordError {
    /// <p>The numeric value of the error.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The description of the error.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl RecordError {
    /// Creates a new builder-style object to manufacture [`RecordError`](crate::types::RecordError).
    pub fn builder() -> crate::types::builders::RecordErrorBuilder {
        crate::types::builders::RecordErrorBuilder::default()
    }
}

/// A builder for [`RecordError`](crate::types::RecordError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordErrorBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl RecordErrorBuilder {
    /// <p>The numeric value of the error.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The numeric value of the error.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The description of the error.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the error.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`RecordError`](crate::types::RecordError).
    pub fn build(self) -> crate::types::RecordError {
        crate::types::RecordError {
            code: self.code,
            description: self.description,
        }
    }
}
