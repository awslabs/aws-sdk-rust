// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameter key-value pair used to update a provisioned product.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProvisioningParameter {
    /// <p>The parameter key.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The parameter value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>If set to true, <code>Value</code> is ignored and the previous parameter value is kept.</p>
    #[doc(hidden)]
    pub use_previous_value: bool,
}
impl UpdateProvisioningParameter {
    /// <p>The parameter key.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The parameter value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>If set to true, <code>Value</code> is ignored and the previous parameter value is kept.</p>
    pub fn use_previous_value(&self) -> bool {
        self.use_previous_value
    }
}
impl UpdateProvisioningParameter {
    /// Creates a new builder-style object to manufacture [`UpdateProvisioningParameter`](crate::types::UpdateProvisioningParameter).
    pub fn builder() -> crate::types::builders::UpdateProvisioningParameterBuilder {
        crate::types::builders::UpdateProvisioningParameterBuilder::default()
    }
}

/// A builder for [`UpdateProvisioningParameter`](crate::types::UpdateProvisioningParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProvisioningParameterBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) use_previous_value: std::option::Option<bool>,
}
impl UpdateProvisioningParameterBuilder {
    /// <p>The parameter key.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The parameter key.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The parameter value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The parameter value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>If set to true, <code>Value</code> is ignored and the previous parameter value is kept.</p>
    pub fn use_previous_value(mut self, input: bool) -> Self {
        self.use_previous_value = Some(input);
        self
    }
    /// <p>If set to true, <code>Value</code> is ignored and the previous parameter value is kept.</p>
    pub fn set_use_previous_value(mut self, input: std::option::Option<bool>) -> Self {
        self.use_previous_value = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProvisioningParameter`](crate::types::UpdateProvisioningParameter).
    pub fn build(self) -> crate::types::UpdateProvisioningParameter {
        crate::types::UpdateProvisioningParameter {
            key: self.key,
            value: self.value,
            use_previous_value: self.use_previous_value.unwrap_or_default(),
        }
    }
}
