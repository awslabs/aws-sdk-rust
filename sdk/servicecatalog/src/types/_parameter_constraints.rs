// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The constraints that the administrator has put on the parameter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParameterConstraints {
    /// <p>The values that the administrator has allowed for the parameter.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A regular expression that represents the patterns that allow for <code>String</code> types. The pattern must match the entire parameter value provided.</p>
    #[doc(hidden)]
    pub allowed_pattern: std::option::Option<std::string::String>,
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of <code>[A-Za-z0-9]+</code> displays the following error message when the user specifies an invalid value:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+</code> </p>
    /// <p>By adding a constraint description, such as must only contain letters (uppercase and lowercase) and numbers, you can display the following customized error message:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers.</code> </p>
    #[doc(hidden)]
    pub constraint_description: std::option::Option<std::string::String>,
    /// <p>An integer value that determines the largest number of characters you want to allow for <code>String</code> types. </p>
    #[doc(hidden)]
    pub max_length: std::option::Option<std::string::String>,
    /// <p>An integer value that determines the smallest number of characters you want to allow for <code>String</code> types.</p>
    #[doc(hidden)]
    pub min_length: std::option::Option<std::string::String>,
    /// <p>A numeric value that determines the largest numeric value you want to allow for <code>Number</code> types.</p>
    #[doc(hidden)]
    pub max_value: std::option::Option<std::string::String>,
    /// <p>A numeric value that determines the smallest numeric value you want to allow for <code>Number</code> types. </p>
    #[doc(hidden)]
    pub min_value: std::option::Option<std::string::String>,
}
impl ParameterConstraints {
    /// <p>The values that the administrator has allowed for the parameter.</p>
    pub fn allowed_values(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_values.as_deref()
    }
    /// <p>A regular expression that represents the patterns that allow for <code>String</code> types. The pattern must match the entire parameter value provided.</p>
    pub fn allowed_pattern(&self) -> std::option::Option<&str> {
        self.allowed_pattern.as_deref()
    }
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of <code>[A-Za-z0-9]+</code> displays the following error message when the user specifies an invalid value:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+</code> </p>
    /// <p>By adding a constraint description, such as must only contain letters (uppercase and lowercase) and numbers, you can display the following customized error message:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers.</code> </p>
    pub fn constraint_description(&self) -> std::option::Option<&str> {
        self.constraint_description.as_deref()
    }
    /// <p>An integer value that determines the largest number of characters you want to allow for <code>String</code> types. </p>
    pub fn max_length(&self) -> std::option::Option<&str> {
        self.max_length.as_deref()
    }
    /// <p>An integer value that determines the smallest number of characters you want to allow for <code>String</code> types.</p>
    pub fn min_length(&self) -> std::option::Option<&str> {
        self.min_length.as_deref()
    }
    /// <p>A numeric value that determines the largest numeric value you want to allow for <code>Number</code> types.</p>
    pub fn max_value(&self) -> std::option::Option<&str> {
        self.max_value.as_deref()
    }
    /// <p>A numeric value that determines the smallest numeric value you want to allow for <code>Number</code> types. </p>
    pub fn min_value(&self) -> std::option::Option<&str> {
        self.min_value.as_deref()
    }
}
impl ParameterConstraints {
    /// Creates a new builder-style object to manufacture [`ParameterConstraints`](crate::types::ParameterConstraints).
    pub fn builder() -> crate::types::builders::ParameterConstraintsBuilder {
        crate::types::builders::ParameterConstraintsBuilder::default()
    }
}

/// A builder for [`ParameterConstraints`](crate::types::ParameterConstraints).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterConstraintsBuilder {
    pub(crate) allowed_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) allowed_pattern: std::option::Option<std::string::String>,
    pub(crate) constraint_description: std::option::Option<std::string::String>,
    pub(crate) max_length: std::option::Option<std::string::String>,
    pub(crate) min_length: std::option::Option<std::string::String>,
    pub(crate) max_value: std::option::Option<std::string::String>,
    pub(crate) min_value: std::option::Option<std::string::String>,
}
impl ParameterConstraintsBuilder {
    /// Appends an item to `allowed_values`.
    ///
    /// To override the contents of this collection use [`set_allowed_values`](Self::set_allowed_values).
    ///
    /// <p>The values that the administrator has allowed for the parameter.</p>
    pub fn allowed_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_values.unwrap_or_default();
        v.push(input.into());
        self.allowed_values = Some(v);
        self
    }
    /// <p>The values that the administrator has allowed for the parameter.</p>
    pub fn set_allowed_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>A regular expression that represents the patterns that allow for <code>String</code> types. The pattern must match the entire parameter value provided.</p>
    pub fn allowed_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.allowed_pattern = Some(input.into());
        self
    }
    /// <p>A regular expression that represents the patterns that allow for <code>String</code> types. The pattern must match the entire parameter value provided.</p>
    pub fn set_allowed_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allowed_pattern = input;
        self
    }
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of <code>[A-Za-z0-9]+</code> displays the following error message when the user specifies an invalid value:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+</code> </p>
    /// <p>By adding a constraint description, such as must only contain letters (uppercase and lowercase) and numbers, you can display the following customized error message:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers.</code> </p>
    pub fn constraint_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.constraint_description = Some(input.into());
        self
    }
    /// <p>A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of <code>[A-Za-z0-9]+</code> displays the following error message when the user specifies an invalid value:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must match pattern [A-Za-z0-9]+</code> </p>
    /// <p>By adding a constraint description, such as must only contain letters (uppercase and lowercase) and numbers, you can display the following customized error message:</p>
    /// <p> <code>Malformed input-Parameter MyParameter must only contain uppercase and lowercase letters and numbers.</code> </p>
    pub fn set_constraint_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.constraint_description = input;
        self
    }
    /// <p>An integer value that determines the largest number of characters you want to allow for <code>String</code> types. </p>
    pub fn max_length(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_length = Some(input.into());
        self
    }
    /// <p>An integer value that determines the largest number of characters you want to allow for <code>String</code> types. </p>
    pub fn set_max_length(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_length = input;
        self
    }
    /// <p>An integer value that determines the smallest number of characters you want to allow for <code>String</code> types.</p>
    pub fn min_length(mut self, input: impl Into<std::string::String>) -> Self {
        self.min_length = Some(input.into());
        self
    }
    /// <p>An integer value that determines the smallest number of characters you want to allow for <code>String</code> types.</p>
    pub fn set_min_length(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.min_length = input;
        self
    }
    /// <p>A numeric value that determines the largest numeric value you want to allow for <code>Number</code> types.</p>
    pub fn max_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_value = Some(input.into());
        self
    }
    /// <p>A numeric value that determines the largest numeric value you want to allow for <code>Number</code> types.</p>
    pub fn set_max_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>A numeric value that determines the smallest numeric value you want to allow for <code>Number</code> types. </p>
    pub fn min_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.min_value = Some(input.into());
        self
    }
    /// <p>A numeric value that determines the smallest numeric value you want to allow for <code>Number</code> types. </p>
    pub fn set_min_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.min_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterConstraints`](crate::types::ParameterConstraints).
    pub fn build(self) -> crate::types::ParameterConstraints {
        crate::types::ParameterConstraints {
            allowed_values: self.allowed_values,
            allowed_pattern: self.allowed_pattern,
            constraint_description: self.constraint_description,
            max_length: self.max_length,
            min_length: self.min_length,
            max_value: self.max_value,
            min_value: self.min_value,
        }
    }
}
