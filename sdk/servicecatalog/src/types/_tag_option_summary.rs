// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a TagOption.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagOptionSummary {
    /// <p>The TagOption key.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The TagOption value.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TagOptionSummary {
    /// <p>The TagOption key.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The TagOption value.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
}
impl TagOptionSummary {
    /// Creates a new builder-style object to manufacture [`TagOptionSummary`](crate::types::TagOptionSummary).
    pub fn builder() -> crate::types::builders::TagOptionSummaryBuilder {
        crate::types::builders::TagOptionSummaryBuilder::default()
    }
}

/// A builder for [`TagOptionSummary`](crate::types::TagOptionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagOptionSummaryBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TagOptionSummaryBuilder {
    /// <p>The TagOption key.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The TagOption key.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The TagOption value.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The TagOption value.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`TagOptionSummary`](crate::types::TagOptionSummary).
    pub fn build(self) -> crate::types::TagOptionSummary {
        crate::types::TagOptionSummary {
            key: self.key,
            values: self.values,
        }
    }
}
