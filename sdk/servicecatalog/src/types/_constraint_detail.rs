// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a constraint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConstraintDetail {
    /// <p>The identifier of the constraint.</p>
    #[doc(hidden)]
    pub constraint_id: std::option::Option<std::string::String>,
    /// <p>The type of constraint.</p>
    /// <ul>
    /// <li> <p> <code>LAUNCH</code> </p> </li>
    /// <li> <p> <code>NOTIFICATION</code> </p> </li>
    /// <li> <p>STACKSET</p> </li>
    /// <li> <p> <code>TEMPLATE</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The description of the constraint.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The owner of the constraint.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The identifier of the product the constraint applies to. Note that a constraint applies to a specific instance of a product within a certain portfolio.</p>
    #[doc(hidden)]
    pub product_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the portfolio the product resides in. The constraint applies only to the instance of the product that lives within this portfolio.</p>
    #[doc(hidden)]
    pub portfolio_id: std::option::Option<std::string::String>,
}
impl ConstraintDetail {
    /// <p>The identifier of the constraint.</p>
    pub fn constraint_id(&self) -> std::option::Option<&str> {
        self.constraint_id.as_deref()
    }
    /// <p>The type of constraint.</p>
    /// <ul>
    /// <li> <p> <code>LAUNCH</code> </p> </li>
    /// <li> <p> <code>NOTIFICATION</code> </p> </li>
    /// <li> <p>STACKSET</p> </li>
    /// <li> <p> <code>TEMPLATE</code> </p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The description of the constraint.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The owner of the constraint.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The identifier of the product the constraint applies to. Note that a constraint applies to a specific instance of a product within a certain portfolio.</p>
    pub fn product_id(&self) -> std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The identifier of the portfolio the product resides in. The constraint applies only to the instance of the product that lives within this portfolio.</p>
    pub fn portfolio_id(&self) -> std::option::Option<&str> {
        self.portfolio_id.as_deref()
    }
}
impl ConstraintDetail {
    /// Creates a new builder-style object to manufacture [`ConstraintDetail`](crate::types::ConstraintDetail).
    pub fn builder() -> crate::types::builders::ConstraintDetailBuilder {
        crate::types::builders::ConstraintDetailBuilder::default()
    }
}

/// A builder for [`ConstraintDetail`](crate::types::ConstraintDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConstraintDetailBuilder {
    pub(crate) constraint_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) product_id: std::option::Option<std::string::String>,
    pub(crate) portfolio_id: std::option::Option<std::string::String>,
}
impl ConstraintDetailBuilder {
    /// <p>The identifier of the constraint.</p>
    pub fn constraint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.constraint_id = Some(input.into());
        self
    }
    /// <p>The identifier of the constraint.</p>
    pub fn set_constraint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.constraint_id = input;
        self
    }
    /// <p>The type of constraint.</p>
    /// <ul>
    /// <li> <p> <code>LAUNCH</code> </p> </li>
    /// <li> <p> <code>NOTIFICATION</code> </p> </li>
    /// <li> <p>STACKSET</p> </li>
    /// <li> <p> <code>TEMPLATE</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of constraint.</p>
    /// <ul>
    /// <li> <p> <code>LAUNCH</code> </p> </li>
    /// <li> <p> <code>NOTIFICATION</code> </p> </li>
    /// <li> <p>STACKSET</p> </li>
    /// <li> <p> <code>TEMPLATE</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The description of the constraint.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the constraint.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The owner of the constraint.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The owner of the constraint.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The identifier of the product the constraint applies to. Note that a constraint applies to a specific instance of a product within a certain portfolio.</p>
    pub fn product_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_id = Some(input.into());
        self
    }
    /// <p>The identifier of the product the constraint applies to. Note that a constraint applies to a specific instance of a product within a certain portfolio.</p>
    pub fn set_product_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The identifier of the portfolio the product resides in. The constraint applies only to the instance of the product that lives within this portfolio.</p>
    pub fn portfolio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.portfolio_id = Some(input.into());
        self
    }
    /// <p>The identifier of the portfolio the product resides in. The constraint applies only to the instance of the product that lives within this portfolio.</p>
    pub fn set_portfolio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.portfolio_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ConstraintDetail`](crate::types::ConstraintDetail).
    pub fn build(self) -> crate::types::ConstraintDetail {
        crate::types::ConstraintDetail {
            constraint_id: self.constraint_id,
            r#type: self.r#type,
            description: self.description,
            owner: self.owner,
            product_id: self.product_id,
            portfolio_id: self.portfolio_id,
        }
    }
}
