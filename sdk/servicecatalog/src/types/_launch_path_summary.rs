// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a product path for a user.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchPathSummary {
    /// <p>The identifier of the product path.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The constraints on the portfolio-product relationship.</p>
    pub constraint_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ConstraintSummary>>,
    /// <p>The tags associated with this product path.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The name of the portfolio that contains the product. </p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl LaunchPathSummary {
    /// <p>The identifier of the product path.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The constraints on the portfolio-product relationship.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.constraint_summaries.is_none()`.
    pub fn constraint_summaries(&self) -> &[crate::types::ConstraintSummary] {
        self.constraint_summaries.as_deref().unwrap_or_default()
    }
    /// <p>The tags associated with this product path.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The name of the portfolio that contains the product. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl LaunchPathSummary {
    /// Creates a new builder-style object to manufacture [`LaunchPathSummary`](crate::types::LaunchPathSummary).
    pub fn builder() -> crate::types::builders::LaunchPathSummaryBuilder {
        crate::types::builders::LaunchPathSummaryBuilder::default()
    }
}

/// A builder for [`LaunchPathSummary`](crate::types::LaunchPathSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchPathSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) constraint_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ConstraintSummary>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl LaunchPathSummaryBuilder {
    /// <p>The identifier of the product path.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the product path.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the product path.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `constraint_summaries`.
    ///
    /// To override the contents of this collection use [`set_constraint_summaries`](Self::set_constraint_summaries).
    ///
    /// <p>The constraints on the portfolio-product relationship.</p>
    pub fn constraint_summaries(mut self, input: crate::types::ConstraintSummary) -> Self {
        let mut v = self.constraint_summaries.unwrap_or_default();
        v.push(input);
        self.constraint_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The constraints on the portfolio-product relationship.</p>
    pub fn set_constraint_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConstraintSummary>>) -> Self {
        self.constraint_summaries = input;
        self
    }
    /// <p>The constraints on the portfolio-product relationship.</p>
    pub fn get_constraint_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConstraintSummary>> {
        &self.constraint_summaries
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with this product path.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with this product path.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with this product path.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The name of the portfolio that contains the product. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the portfolio that contains the product. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the portfolio that contains the product. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`LaunchPathSummary`](crate::types::LaunchPathSummary).
    pub fn build(self) -> crate::types::LaunchPathSummary {
        crate::types::LaunchPathSummary {
            id: self.id,
            constraint_summaries: self.constraint_summaries,
            tags: self.tags,
            name: self.name,
        }
    }
}
