// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a TagOption.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagOptionDetail {
    /// <p>The TagOption key.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The TagOption value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The TagOption active state.</p>
    #[doc(hidden)]
    pub active: std::option::Option<bool>,
    /// <p>The TagOption identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account Id of the owner account that created the TagOption.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
}
impl TagOptionDetail {
    /// <p>The TagOption key.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The TagOption value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The TagOption active state.</p>
    pub fn active(&self) -> std::option::Option<bool> {
        self.active
    }
    /// <p>The TagOption identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Web Services account Id of the owner account that created the TagOption.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
}
impl TagOptionDetail {
    /// Creates a new builder-style object to manufacture [`TagOptionDetail`](crate::types::TagOptionDetail).
    pub fn builder() -> crate::types::builders::TagOptionDetailBuilder {
        crate::types::builders::TagOptionDetailBuilder::default()
    }
}

/// A builder for [`TagOptionDetail`](crate::types::TagOptionDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagOptionDetailBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) active: std::option::Option<bool>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
}
impl TagOptionDetailBuilder {
    /// <p>The TagOption key.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The TagOption key.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The TagOption value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The TagOption value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The TagOption active state.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = Some(input);
        self
    }
    /// <p>The TagOption active state.</p>
    pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// <p>The TagOption identifier.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The TagOption identifier.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Web Services account Id of the owner account that created the TagOption.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account Id of the owner account that created the TagOption.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// Consumes the builder and constructs a [`TagOptionDetail`](crate::types::TagOptionDetail).
    pub fn build(self) -> crate::types::TagOptionDetail {
        crate::types::TagOptionDetail {
            key: self.key,
            value: self.value,
            active: self.active,
            id: self.id,
            owner: self.owner,
        }
    }
}
