// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_portfolio_shares_output_next_page_token(
    input: &crate::operation::describe_portfolio_shares::DescribePortfolioSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_provisioned_product_outputs_output_next_page_token(
    input: &crate::operation::get_provisioned_product_outputs::GetProvisionedProductOutputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_accepted_portfolio_shares_output_next_page_token(
    input: &crate::operation::list_accepted_portfolio_shares::ListAcceptedPortfolioSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_budgets_for_resource_output_next_page_token(
    input: &crate::operation::list_budgets_for_resource::ListBudgetsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_constraints_for_portfolio_output_next_page_token(
    input: &crate::operation::list_constraints_for_portfolio::ListConstraintsForPortfolioOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_launch_paths_output_next_page_token(
    input: &crate::operation::list_launch_paths::ListLaunchPathsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_organization_portfolio_access_output_next_page_token(
    input: &crate::operation::list_organization_portfolio_access::ListOrganizationPortfolioAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_portfolio_access_output_next_page_token(
    input: &crate::operation::list_portfolio_access::ListPortfolioAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_portfolios_output_next_page_token(
    input: &crate::operation::list_portfolios::ListPortfoliosOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_portfolios_for_product_output_next_page_token(
    input: &crate::operation::list_portfolios_for_product::ListPortfoliosForProductOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_principals_for_portfolio_output_next_page_token(
    input: &crate::operation::list_principals_for_portfolio::ListPrincipalsForPortfolioOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_provisioning_artifacts_for_service_action_output_next_page_token(
    input: &crate::operation::list_provisioning_artifacts_for_service_action::ListProvisioningArtifactsForServiceActionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resources_for_tag_option_output_page_token(
    input: &crate::operation::list_resources_for_tag_option::ListResourcesForTagOptionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_service_actions_output_next_page_token(
    input: &crate::operation::list_service_actions::ListServiceActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_service_actions_for_provisioning_artifact_output_next_page_token(
    input: &crate::operation::list_service_actions_for_provisioning_artifact::ListServiceActionsForProvisioningArtifactOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tag_options_output_page_token(
    input: &crate::operation::list_tag_options::ListTagOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_products_output_next_page_token(
    input: &crate::operation::search_products::SearchProductsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_products_as_admin_output_next_page_token(
    input: &crate::operation::search_products_as_admin::SearchProductsAsAdminOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_provisioned_products_output_next_page_token(
    input: &crate::operation::search_provisioned_products::SearchProvisionedProductsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
