// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_portfolio_shares_output_next_page_token(
    input: &crate::output::DescribePortfolioSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_provisioned_product_outputs_output_next_page_token(
    input: &crate::output::GetProvisionedProductOutputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_accepted_portfolio_shares_output_next_page_token(
    input: &crate::output::ListAcceptedPortfolioSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_budgets_for_resource_output_next_page_token(
    input: &crate::output::ListBudgetsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_constraints_for_portfolio_output_next_page_token(
    input: &crate::output::ListConstraintsForPortfolioOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_launch_paths_output_next_page_token(
    input: &crate::output::ListLaunchPathsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_organization_portfolio_access_output_next_page_token(
    input: &crate::output::ListOrganizationPortfolioAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_portfolio_access_output_next_page_token(
    input: &crate::output::ListPortfolioAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_portfolios_output_next_page_token(
    input: &crate::output::ListPortfoliosOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_portfolios_for_product_output_next_page_token(
    input: &crate::output::ListPortfoliosForProductOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_principals_for_portfolio_output_next_page_token(
    input: &crate::output::ListPrincipalsForPortfolioOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_provisioning_artifacts_for_service_action_output_next_page_token(
    input: &crate::output::ListProvisioningArtifactsForServiceActionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_resources_for_tag_option_output_page_token(
    input: &crate::output::ListResourcesForTagOptionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_actions_output_next_page_token(
    input: &crate::output::ListServiceActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_actions_for_provisioning_artifact_output_next_page_token(
    input: &crate::output::ListServiceActionsForProvisioningArtifactOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tag_options_output_page_token(
    input: &crate::output::ListTagOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_products_output_next_page_token(
    input: &crate::output::SearchProductsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_products_as_admin_output_next_page_token(
    input: &crate::output::SearchProductsAsAdminOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_provisioned_products_output_next_page_token(
    input: &crate::output::SearchProvisionedProductsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
