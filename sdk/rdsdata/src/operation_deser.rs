// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_execute_statement_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::BatchExecuteStatementOutput,
    crate::error::BatchExecuteStatementError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchExecuteStatementError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchExecuteStatementError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::BatchExecuteStatementError {
            meta: generic,
            kind: crate::error::BatchExecuteStatementErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BatchExecuteStatementError {
            meta: generic,
            kind: crate::error::BatchExecuteStatementErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BatchExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BatchExecuteStatementError {
            meta: generic,
            kind: crate::error::BatchExecuteStatementErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::BatchExecuteStatementError {
            meta: generic,
            kind: crate::error::BatchExecuteStatementErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "StatementTimeoutException" => crate::error::BatchExecuteStatementError {
            meta: generic,
            kind: crate::error::BatchExecuteStatementErrorKind::StatementTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::statement_timeout_error::Builder::default();
                let _ = response;
                output = crate::json_deser::statement_timeout_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BatchExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchExecuteStatementError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_execute_statement_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::BatchExecuteStatementOutput,
    crate::error::BatchExecuteStatementError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_execute_statement_output::Builder::default();
        let _ = response;
        output = crate::json_deser::batch_execute_statement_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::BatchExecuteStatementError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_begin_transaction_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BeginTransactionOutput, crate::error::BeginTransactionError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BeginTransactionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BeginTransactionError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::BeginTransactionError {
            meta: generic,
            kind: crate::error::BeginTransactionErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BeginTransactionError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::BeginTransactionError {
            meta: generic,
            kind: crate::error::BeginTransactionErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::BeginTransactionError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::BeginTransactionError {
            meta: generic,
            kind: crate::error::BeginTransactionErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::BeginTransactionError {
            meta: generic,
            kind: crate::error::BeginTransactionErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "StatementTimeoutException" => crate::error::BeginTransactionError {
            meta: generic,
            kind: crate::error::BeginTransactionErrorKind::StatementTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::statement_timeout_error::Builder::default();
                let _ = response;
                output = crate::json_deser::statement_timeout_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::BeginTransactionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BeginTransactionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_begin_transaction_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::BeginTransactionOutput, crate::error::BeginTransactionError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::begin_transaction_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::begin_transaction_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::BeginTransactionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_commit_transaction_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CommitTransactionOutput, crate::error::CommitTransactionError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CommitTransactionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CommitTransactionError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CommitTransactionError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CommitTransactionError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CommitTransactionError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "StatementTimeoutException" => crate::error::CommitTransactionError {
            meta: generic,
            kind: crate::error::CommitTransactionErrorKind::StatementTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::statement_timeout_error::Builder::default();
                let _ = response;
                output = crate::json_deser::statement_timeout_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CommitTransactionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CommitTransactionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_commit_transaction_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CommitTransactionOutput, crate::error::CommitTransactionError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::commit_transaction_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::commit_transaction_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::CommitTransactionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_execute_sql_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ExecuteSqlOutput, crate::error::ExecuteSqlError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ExecuteSqlError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ExecuteSqlError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::ExecuteSqlError {
            meta: generic,
            kind: crate::error::ExecuteSqlErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ExecuteSqlError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ExecuteSqlError {
            meta: generic,
            kind: crate::error::ExecuteSqlErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ExecuteSqlError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ExecuteSqlError {
            meta: generic,
            kind: crate::error::ExecuteSqlErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::ExecuteSqlError {
            meta: generic,
            kind: crate::error::ExecuteSqlErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        _ => crate::error::ExecuteSqlError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_execute_sql_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ExecuteSqlOutput, crate::error::ExecuteSqlError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::execute_sql_output::Builder::default();
        let _ = response;
        output = crate::json_deser::execute_sql_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ExecuteSqlError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_execute_statement_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ExecuteStatementOutput, crate::error::ExecuteStatementError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ExecuteStatementError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ExecuteStatementError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::ExecuteStatementError {
            meta: generic,
            kind: crate::error::ExecuteStatementErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::ExecuteStatementError {
            meta: generic,
            kind: crate::error::ExecuteStatementErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ExecuteStatementError {
            meta: generic,
            kind: crate::error::ExecuteStatementErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::ExecuteStatementError {
            meta: generic,
            kind: crate::error::ExecuteStatementErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "StatementTimeoutException" => crate::error::ExecuteStatementError {
            meta: generic,
            kind: crate::error::ExecuteStatementErrorKind::StatementTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::statement_timeout_error::Builder::default();
                let _ = response;
                output = crate::json_deser::statement_timeout_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ExecuteStatementError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ExecuteStatementError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_execute_statement_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ExecuteStatementOutput, crate::error::ExecuteStatementError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::execute_statement_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::execute_statement_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ExecuteStatementError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rollback_transaction_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RollbackTransactionOutput,
    crate::error::RollbackTransactionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RollbackTransactionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RollbackTransactionError::unhandled(generic)),
    };
    Err(match error_code {
        "BadRequestException" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::BadRequestError({
                #[allow(unused_mut)]
                let mut output = crate::error::bad_request_error::Builder::default();
                let _ = response;
                output = crate::json_deser::bad_request_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RollbackTransactionError::unhandled)?;
                output.build()
            }),
        },
        "ForbiddenException" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RollbackTransactionError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RollbackTransactionError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableError" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output.build()
            }),
        },
        "StatementTimeoutException" => crate::error::RollbackTransactionError {
            meta: generic,
            kind: crate::error::RollbackTransactionErrorKind::StatementTimeoutError({
                #[allow(unused_mut)]
                let mut output = crate::error::statement_timeout_error::Builder::default();
                let _ = response;
                output = crate::json_deser::statement_timeout_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RollbackTransactionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::RollbackTransactionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rollback_transaction_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RollbackTransactionOutput,
    crate::error::RollbackTransactionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::rollback_transaction_output::Builder::default();
        let _ = response;
        output = crate::json_deser::rollback_transaction_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RollbackTransactionError::unhandled)?;
        output.build()
    })
}
