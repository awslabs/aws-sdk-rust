// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>There is an error in the call or in a SQL statement.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>There are insufficient privileges to make the call.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>An internal error occurred.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>The <code>resourceArn</code>, <code>secretArn</code>, or <code>transactionId</code> value can't be found.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The service specified by the <code>resourceArn</code> parameter is not available.</p>
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    /// <p>The execution of the SQL statement timed out.</p>
    StatementTimeoutException(crate::error::StatementTimeoutException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::StatementTimeoutException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchExecuteStatementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchExecuteStatementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchExecuteStatementError> for Error {
    fn from(err: crate::error::BatchExecuteStatementError) -> Self {
        match err {
            crate::error::BatchExecuteStatementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchExecuteStatementError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchExecuteStatementError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchExecuteStatementError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::BatchExecuteStatementError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::BatchExecuteStatementError::StatementTimeoutException(inner) => {
                Error::StatementTimeoutException(inner)
            }
            crate::error::BatchExecuteStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BeginTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BeginTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BeginTransactionError> for Error {
    fn from(err: crate::error::BeginTransactionError) -> Self {
        match err {
            crate::error::BeginTransactionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BeginTransactionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BeginTransactionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BeginTransactionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::BeginTransactionError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::BeginTransactionError::StatementTimeoutException(inner) => {
                Error::StatementTimeoutException(inner)
            }
            crate::error::BeginTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CommitTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CommitTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CommitTransactionError> for Error {
    fn from(err: crate::error::CommitTransactionError) -> Self {
        match err {
            crate::error::CommitTransactionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CommitTransactionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CommitTransactionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CommitTransactionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CommitTransactionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CommitTransactionError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::CommitTransactionError::StatementTimeoutException(inner) => {
                Error::StatementTimeoutException(inner)
            }
            crate::error::CommitTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecuteSqlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExecuteSqlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecuteSqlError> for Error {
    fn from(err: crate::error::ExecuteSqlError) -> Self {
        match err {
            crate::error::ExecuteSqlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExecuteSqlError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ExecuteSqlError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ExecuteSqlError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ExecuteSqlError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::ExecuteSqlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecuteStatementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExecuteStatementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecuteStatementError> for Error {
    fn from(err: crate::error::ExecuteStatementError) -> Self {
        match err {
            crate::error::ExecuteStatementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExecuteStatementError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ExecuteStatementError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ExecuteStatementError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ExecuteStatementError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::ExecuteStatementError::StatementTimeoutException(inner) => {
                Error::StatementTimeoutException(inner)
            }
            crate::error::ExecuteStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RollbackTransactionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RollbackTransactionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RollbackTransactionError> for Error {
    fn from(err: crate::error::RollbackTransactionError) -> Self {
        match err {
            crate::error::RollbackTransactionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RollbackTransactionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RollbackTransactionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RollbackTransactionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::RollbackTransactionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RollbackTransactionError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::RollbackTransactionError::StatementTimeoutException(inner) => {
                Error::StatementTimeoutException(inner)
            }
            crate::error::RollbackTransactionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableError(e) => e.request_id(),
            Self::StatementTimeoutException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
