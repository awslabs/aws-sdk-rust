// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct BatchExecuteStatementError {
    pub kind: BatchExecuteStatementErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum BatchExecuteStatementErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for BatchExecuteStatementError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            BatchExecuteStatementErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            BatchExecuteStatementErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            BatchExecuteStatementErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            BatchExecuteStatementErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            BatchExecuteStatementErrorKind::StatementTimeoutError(_inner) => _inner.fmt(f),
            BatchExecuteStatementErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for BatchExecuteStatementError {
    fn code(&self) -> Option<&str> {
        BatchExecuteStatementError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl BatchExecuteStatementError {
    pub fn new(kind: BatchExecuteStatementErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: BatchExecuteStatementErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: BatchExecuteStatementErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(
            &self.kind,
            BatchExecuteStatementErrorKind::BadRequestError(_)
        )
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(
            &self.kind,
            BatchExecuteStatementErrorKind::ForbiddenError(_)
        )
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(
            &self.kind,
            BatchExecuteStatementErrorKind::InternalServerErrorError(_)
        )
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(
            &self.kind,
            BatchExecuteStatementErrorKind::ServiceUnavailableError(_)
        )
    }
    pub fn is_statement_timeout_error(&self) -> bool {
        matches!(
            &self.kind,
            BatchExecuteStatementErrorKind::StatementTimeoutError(_)
        )
    }
}
impl std::error::Error for BatchExecuteStatementError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            BatchExecuteStatementErrorKind::BadRequestError(_inner) => Some(_inner),
            BatchExecuteStatementErrorKind::ForbiddenError(_inner) => Some(_inner),
            BatchExecuteStatementErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            BatchExecuteStatementErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            BatchExecuteStatementErrorKind::StatementTimeoutError(_inner) => Some(_inner),
            BatchExecuteStatementErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct BeginTransactionError {
    pub kind: BeginTransactionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum BeginTransactionErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for BeginTransactionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            BeginTransactionErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            BeginTransactionErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            BeginTransactionErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            BeginTransactionErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            BeginTransactionErrorKind::StatementTimeoutError(_inner) => _inner.fmt(f),
            BeginTransactionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for BeginTransactionError {
    fn code(&self) -> Option<&str> {
        BeginTransactionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl BeginTransactionError {
    pub fn new(kind: BeginTransactionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: BeginTransactionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: BeginTransactionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(&self.kind, BeginTransactionErrorKind::BadRequestError(_))
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(&self.kind, BeginTransactionErrorKind::ForbiddenError(_))
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(
            &self.kind,
            BeginTransactionErrorKind::InternalServerErrorError(_)
        )
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(
            &self.kind,
            BeginTransactionErrorKind::ServiceUnavailableError(_)
        )
    }
    pub fn is_statement_timeout_error(&self) -> bool {
        matches!(
            &self.kind,
            BeginTransactionErrorKind::StatementTimeoutError(_)
        )
    }
}
impl std::error::Error for BeginTransactionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            BeginTransactionErrorKind::BadRequestError(_inner) => Some(_inner),
            BeginTransactionErrorKind::ForbiddenError(_inner) => Some(_inner),
            BeginTransactionErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            BeginTransactionErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            BeginTransactionErrorKind::StatementTimeoutError(_inner) => Some(_inner),
            BeginTransactionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CommitTransactionError {
    pub kind: CommitTransactionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CommitTransactionErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    NotFoundError(crate::error::NotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CommitTransactionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CommitTransactionErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::NotFoundError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::StatementTimeoutError(_inner) => _inner.fmt(f),
            CommitTransactionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CommitTransactionError {
    fn code(&self) -> Option<&str> {
        CommitTransactionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CommitTransactionError {
    pub fn new(kind: CommitTransactionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CommitTransactionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CommitTransactionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(&self.kind, CommitTransactionErrorKind::BadRequestError(_))
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(&self.kind, CommitTransactionErrorKind::ForbiddenError(_))
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(
            &self.kind,
            CommitTransactionErrorKind::InternalServerErrorError(_)
        )
    }
    pub fn is_not_found_error(&self) -> bool {
        matches!(&self.kind, CommitTransactionErrorKind::NotFoundError(_))
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(
            &self.kind,
            CommitTransactionErrorKind::ServiceUnavailableError(_)
        )
    }
    pub fn is_statement_timeout_error(&self) -> bool {
        matches!(
            &self.kind,
            CommitTransactionErrorKind::StatementTimeoutError(_)
        )
    }
}
impl std::error::Error for CommitTransactionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CommitTransactionErrorKind::BadRequestError(_inner) => Some(_inner),
            CommitTransactionErrorKind::ForbiddenError(_inner) => Some(_inner),
            CommitTransactionErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            CommitTransactionErrorKind::NotFoundError(_inner) => Some(_inner),
            CommitTransactionErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            CommitTransactionErrorKind::StatementTimeoutError(_inner) => Some(_inner),
            CommitTransactionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ExecuteSqlError {
    pub kind: ExecuteSqlErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ExecuteSqlErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ExecuteSqlError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ExecuteSqlErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            ExecuteSqlErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            ExecuteSqlErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            ExecuteSqlErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            ExecuteSqlErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ExecuteSqlError {
    fn code(&self) -> Option<&str> {
        ExecuteSqlError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ExecuteSqlError {
    pub fn new(kind: ExecuteSqlErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ExecuteSqlErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ExecuteSqlErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(&self.kind, ExecuteSqlErrorKind::BadRequestError(_))
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(&self.kind, ExecuteSqlErrorKind::ForbiddenError(_))
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(&self.kind, ExecuteSqlErrorKind::InternalServerErrorError(_))
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(&self.kind, ExecuteSqlErrorKind::ServiceUnavailableError(_))
    }
}
impl std::error::Error for ExecuteSqlError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ExecuteSqlErrorKind::BadRequestError(_inner) => Some(_inner),
            ExecuteSqlErrorKind::ForbiddenError(_inner) => Some(_inner),
            ExecuteSqlErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            ExecuteSqlErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            ExecuteSqlErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ExecuteStatementError {
    pub kind: ExecuteStatementErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ExecuteStatementErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ExecuteStatementError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ExecuteStatementErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            ExecuteStatementErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            ExecuteStatementErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            ExecuteStatementErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            ExecuteStatementErrorKind::StatementTimeoutError(_inner) => _inner.fmt(f),
            ExecuteStatementErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ExecuteStatementError {
    fn code(&self) -> Option<&str> {
        ExecuteStatementError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ExecuteStatementError {
    pub fn new(kind: ExecuteStatementErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ExecuteStatementErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ExecuteStatementErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(&self.kind, ExecuteStatementErrorKind::BadRequestError(_))
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(&self.kind, ExecuteStatementErrorKind::ForbiddenError(_))
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(
            &self.kind,
            ExecuteStatementErrorKind::InternalServerErrorError(_)
        )
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(
            &self.kind,
            ExecuteStatementErrorKind::ServiceUnavailableError(_)
        )
    }
    pub fn is_statement_timeout_error(&self) -> bool {
        matches!(
            &self.kind,
            ExecuteStatementErrorKind::StatementTimeoutError(_)
        )
    }
}
impl std::error::Error for ExecuteStatementError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ExecuteStatementErrorKind::BadRequestError(_inner) => Some(_inner),
            ExecuteStatementErrorKind::ForbiddenError(_inner) => Some(_inner),
            ExecuteStatementErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            ExecuteStatementErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            ExecuteStatementErrorKind::StatementTimeoutError(_inner) => Some(_inner),
            ExecuteStatementErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RollbackTransactionError {
    pub kind: RollbackTransactionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RollbackTransactionErrorKind {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    NotFoundError(crate::error::NotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RollbackTransactionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RollbackTransactionErrorKind::BadRequestError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::ForbiddenError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::InternalServerErrorError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::NotFoundError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::ServiceUnavailableError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::StatementTimeoutError(_inner) => _inner.fmt(f),
            RollbackTransactionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RollbackTransactionError {
    fn code(&self) -> Option<&str> {
        RollbackTransactionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RollbackTransactionError {
    pub fn new(kind: RollbackTransactionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RollbackTransactionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RollbackTransactionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_bad_request_error(&self) -> bool {
        matches!(&self.kind, RollbackTransactionErrorKind::BadRequestError(_))
    }
    pub fn is_forbidden_error(&self) -> bool {
        matches!(&self.kind, RollbackTransactionErrorKind::ForbiddenError(_))
    }
    pub fn is_internal_server_error_error(&self) -> bool {
        matches!(
            &self.kind,
            RollbackTransactionErrorKind::InternalServerErrorError(_)
        )
    }
    pub fn is_not_found_error(&self) -> bool {
        matches!(&self.kind, RollbackTransactionErrorKind::NotFoundError(_))
    }
    pub fn is_service_unavailable_error(&self) -> bool {
        matches!(
            &self.kind,
            RollbackTransactionErrorKind::ServiceUnavailableError(_)
        )
    }
    pub fn is_statement_timeout_error(&self) -> bool {
        matches!(
            &self.kind,
            RollbackTransactionErrorKind::StatementTimeoutError(_)
        )
    }
}
impl std::error::Error for RollbackTransactionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RollbackTransactionErrorKind::BadRequestError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::ForbiddenError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::InternalServerErrorError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::NotFoundError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::ServiceUnavailableError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::StatementTimeoutError(_inner) => Some(_inner),
            RollbackTransactionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The execution of the SQL statement timed out.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct StatementTimeoutError {
    /// <p>The error message returned by this <code>StatementTimeoutException</code> error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The database connection ID that executed the SQL statement.</p>
    #[serde(rename = "dbConnectionId")]
    #[serde(default)]
    pub db_connection_id: i64,
}
impl std::fmt::Debug for StatementTimeoutError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StatementTimeoutError");
        formatter.field("message", &self.message);
        formatter.field("db_connection_id", &self.db_connection_id);
        formatter.finish()
    }
}
impl StatementTimeoutError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for StatementTimeoutError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "StatementTimeoutError [StatementTimeoutException]")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for StatementTimeoutError {}
/// See [`StatementTimeoutError`](crate::error::StatementTimeoutError)
pub mod statement_timeout_error {
    /// A builder for [`StatementTimeoutError`](crate::error::StatementTimeoutError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) db_connection_id: std::option::Option<i64>,
    }
    impl Builder {
        /// <p>The error message returned by this <code>StatementTimeoutException</code> error.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The database connection ID that executed the SQL statement.</p>
        pub fn db_connection_id(mut self, input: i64) -> Self {
            self.db_connection_id = Some(input);
            self
        }
        pub fn set_db_connection_id(mut self, input: std::option::Option<i64>) -> Self {
            self.db_connection_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StatementTimeoutError`](crate::error::StatementTimeoutError)
        pub fn build(self) -> crate::error::StatementTimeoutError {
            crate::error::StatementTimeoutError {
                message: self.message,
                db_connection_id: self.db_connection_id.unwrap_or_default(),
            }
        }
    }
}
impl StatementTimeoutError {
    /// Creates a new builder-style object to manufacture [`StatementTimeoutError`](crate::error::StatementTimeoutError)
    pub fn builder() -> crate::error::statement_timeout_error::Builder {
        crate::error::statement_timeout_error::Builder::default()
    }
}

/// <p>The service specified by the <code>resourceArn</code> parameter is not
/// available.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceUnavailableError {}
impl std::fmt::Debug for ServiceUnavailableError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceUnavailableError");
        formatter.finish()
    }
}
impl ServiceUnavailableError {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for ServiceUnavailableError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ServiceUnavailableError")?;
        Ok(())
    }
}
impl std::error::Error for ServiceUnavailableError {}
/// See [`ServiceUnavailableError`](crate::error::ServiceUnavailableError)
pub mod service_unavailable_error {
    /// A builder for [`ServiceUnavailableError`](crate::error::ServiceUnavailableError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ServiceUnavailableError`](crate::error::ServiceUnavailableError)
        pub fn build(self) -> crate::error::ServiceUnavailableError {
            crate::error::ServiceUnavailableError {}
        }
    }
}
impl ServiceUnavailableError {
    /// Creates a new builder-style object to manufacture [`ServiceUnavailableError`](crate::error::ServiceUnavailableError)
    pub fn builder() -> crate::error::service_unavailable_error::Builder {
        crate::error::service_unavailable_error::Builder::default()
    }
}

/// <p>The <code>resourceArn</code>, <code>secretArn</code>, or <code>transactionId</code> value can't be found.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct NotFoundError {
    /// <p>The error message returned by this <code>NotFoundException</code> error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for NotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotFoundError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl NotFoundError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for NotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "NotFoundError [NotFoundException]")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for NotFoundError {}
/// See [`NotFoundError`](crate::error::NotFoundError)
pub mod not_found_error {
    /// A builder for [`NotFoundError`](crate::error::NotFoundError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The error message returned by this <code>NotFoundException</code> error.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`NotFoundError`](crate::error::NotFoundError)
        pub fn build(self) -> crate::error::NotFoundError {
            crate::error::NotFoundError {
                message: self.message,
            }
        }
    }
}
impl NotFoundError {
    /// Creates a new builder-style object to manufacture [`NotFoundError`](crate::error::NotFoundError)
    pub fn builder() -> crate::error::not_found_error::Builder {
        crate::error::not_found_error::Builder::default()
    }
}

/// <p>An internal error occurred.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServerErrorError {}
impl std::fmt::Debug for InternalServerErrorError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServerErrorError");
        formatter.finish()
    }
}
impl InternalServerErrorError {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for InternalServerErrorError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServerErrorError [InternalServerErrorException]")?;
        Ok(())
    }
}
impl std::error::Error for InternalServerErrorError {}
/// See [`InternalServerErrorError`](crate::error::InternalServerErrorError)
pub mod internal_server_error_error {
    /// A builder for [`InternalServerErrorError`](crate::error::InternalServerErrorError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`InternalServerErrorError`](crate::error::InternalServerErrorError)
        pub fn build(self) -> crate::error::InternalServerErrorError {
            crate::error::InternalServerErrorError {}
        }
    }
}
impl InternalServerErrorError {
    /// Creates a new builder-style object to manufacture [`InternalServerErrorError`](crate::error::InternalServerErrorError)
    pub fn builder() -> crate::error::internal_server_error_error::Builder {
        crate::error::internal_server_error_error::Builder::default()
    }
}

/// <p>There are insufficient privileges to make the call.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ForbiddenError {
    /// <p>The error message returned by this <code>ForbiddenException</code> error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ForbiddenError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ForbiddenError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ForbiddenError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ForbiddenError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ForbiddenError [ForbiddenException]")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for ForbiddenError {}
/// See [`ForbiddenError`](crate::error::ForbiddenError)
pub mod forbidden_error {
    /// A builder for [`ForbiddenError`](crate::error::ForbiddenError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The error message returned by this <code>ForbiddenException</code> error.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ForbiddenError`](crate::error::ForbiddenError)
        pub fn build(self) -> crate::error::ForbiddenError {
            crate::error::ForbiddenError {
                message: self.message,
            }
        }
    }
}
impl ForbiddenError {
    /// Creates a new builder-style object to manufacture [`ForbiddenError`](crate::error::ForbiddenError)
    pub fn builder() -> crate::error::forbidden_error::Builder {
        crate::error::forbidden_error::Builder::default()
    }
}

/// <p>There is an error in the call or in a SQL statement.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct BadRequestError {
    /// <p>The error message returned by this <code>BadRequestException</code> error.</p>
    #[serde(rename = "message")]
    #[serde(default)]
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BadRequestError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BadRequestError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl BadRequestError {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for BadRequestError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "BadRequestError [BadRequestException]")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for BadRequestError {}
/// See [`BadRequestError`](crate::error::BadRequestError)
pub mod bad_request_error {
    /// A builder for [`BadRequestError`](crate::error::BadRequestError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The error message returned by this <code>BadRequestException</code> error.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`BadRequestError`](crate::error::BadRequestError)
        pub fn build(self) -> crate::error::BadRequestError {
            crate::error::BadRequestError {
                message: self.message,
            }
        }
    }
}
impl BadRequestError {
    /// Creates a new builder-style object to manufacture [`BadRequestError`](crate::error::BadRequestError)
    pub fn builder() -> crate::error::bad_request_error::Builder {
        crate::error::bad_request_error::Builder::default()
    }
}
