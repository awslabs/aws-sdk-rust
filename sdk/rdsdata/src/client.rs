// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn batch_execute_statement(&self) -> fluent_builders::BatchExecuteStatement<C> {
        fluent_builders::BatchExecuteStatement::new(self.handle.clone())
    }
    pub fn begin_transaction(&self) -> fluent_builders::BeginTransaction<C> {
        fluent_builders::BeginTransaction::new(self.handle.clone())
    }
    pub fn commit_transaction(&self) -> fluent_builders::CommitTransaction<C> {
        fluent_builders::CommitTransaction::new(self.handle.clone())
    }
    pub fn execute_sql(&self) -> fluent_builders::ExecuteSql<C> {
        fluent_builders::ExecuteSql::new(self.handle.clone())
    }
    pub fn execute_statement(&self) -> fluent_builders::ExecuteStatement<C> {
        fluent_builders::ExecuteStatement::new(self.handle.clone())
    }
    pub fn rollback_transaction(&self) -> fluent_builders::RollbackTransaction<C> {
        fluent_builders::RollbackTransaction::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct BatchExecuteStatement<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::batch_execute_statement_input::Builder,
    }
    impl<C> BatchExecuteStatement<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::BatchExecuteStatementOutput,
            smithy_http::result::SdkError<crate::error::BatchExecuteStatementError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the DB cluster.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(inp);
            self
        }
        /// <p>The SQL statement to run.</p>
        pub fn sql(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql(inp);
            self
        }
        pub fn set_sql(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_sql(inp);
            self
        }
        /// <p>The name of the database.</p>
        pub fn database(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(inp);
            self
        }
        pub fn set_database(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(inp);
            self
        }
        /// <p>The name of the database schema.</p>
        pub fn schema(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema(inp);
            self
        }
        pub fn set_schema(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schema(inp);
            self
        }
        /// <p>The parameter set for the batch operation.</p>
        /// <p>The SQL statement is executed as many times as the number of parameter sets provided.
        /// To execute a SQL statement with no parameters, use one of the following options:</p>
        /// <ul>
        /// <li>
        /// <p>Specify one or more empty parameter sets.</p>
        /// </li>
        /// <li>
        /// <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>Array parameters are not supported.</p>
        /// </note>
        pub fn parameter_sets(
            mut self,
            inp: impl Into<std::vec::Vec<crate::model::SqlParameter>>,
        ) -> Self {
            self.inner = self.inner.parameter_sets(inp);
            self
        }
        pub fn set_parameter_sets(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::vec::Vec<crate::model::SqlParameter>>>,
        ) -> Self {
            self.inner = self.inner.set_parameter_sets(inp);
            self
        }
        /// <p>The identifier of a transaction that was started by using the
        /// <code>BeginTransaction</code> operation. Specify the transaction ID of the
        /// transaction that you want to include the SQL statement in.</p>
        /// <p>If the SQL statement is not part of a transaction, don't set this
        /// parameter.</p>
        pub fn transaction_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transaction_id(inp);
            self
        }
        pub fn set_transaction_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_transaction_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct BeginTransaction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::begin_transaction_input::Builder,
    }
    impl<C> BeginTransaction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::BeginTransactionOutput,
            smithy_http::result::SdkError<crate::error::BeginTransactionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the DB cluster.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(inp);
            self
        }
        /// <p>The name of the database.</p>
        pub fn database(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(inp);
            self
        }
        pub fn set_database(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(inp);
            self
        }
        /// <p>The name of the database schema.</p>
        pub fn schema(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema(inp);
            self
        }
        pub fn set_schema(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schema(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CommitTransaction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::commit_transaction_input::Builder,
    }
    impl<C> CommitTransaction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CommitTransactionOutput,
            smithy_http::result::SdkError<crate::error::CommitTransactionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the DB cluster.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(inp);
            self
        }
        /// <p>The identifier of the transaction to end and commit.</p>
        pub fn transaction_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transaction_id(inp);
            self
        }
        pub fn set_transaction_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_transaction_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteSql<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_sql_input::Builder,
    }
    impl<C> ExecuteSql<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ExecuteSqlOutput,
            smithy_http::result::SdkError<crate::error::ExecuteSqlError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the Aurora Serverless DB cluster.</p>
        pub fn db_cluster_or_instance_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_cluster_or_instance_arn(inp);
            self
        }
        pub fn set_db_cluster_or_instance_arn(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_db_cluster_or_instance_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.</p>
        pub fn aws_secret_store_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.aws_secret_store_arn(inp);
            self
        }
        pub fn set_aws_secret_store_arn(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_aws_secret_store_arn(inp);
            self
        }
        /// <p>One or more SQL statements to run on the DB cluster.</p>
        /// <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL
        /// statement is permitted, including data definition, data manipulation, and commit
        /// statements. </p>
        pub fn sql_statements(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql_statements(inp);
            self
        }
        pub fn set_sql_statements(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_sql_statements(inp);
            self
        }
        /// <p>The name of the database.</p>
        pub fn database(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(inp);
            self
        }
        pub fn set_database(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(inp);
            self
        }
        /// <p>The name of the database schema.</p>
        pub fn schema(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema(inp);
            self
        }
        pub fn set_schema(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schema(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteStatement<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::execute_statement_input::Builder,
    }
    impl<C> ExecuteStatement<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ExecuteStatementOutput,
            smithy_http::result::SdkError<crate::error::ExecuteStatementError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the DB cluster.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(inp);
            self
        }
        /// <p>The SQL statement to run.</p>
        pub fn sql(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sql(inp);
            self
        }
        pub fn set_sql(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_sql(inp);
            self
        }
        /// <p>The name of the database.</p>
        pub fn database(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.database(inp);
            self
        }
        pub fn set_database(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_database(inp);
            self
        }
        /// <p>The name of the database schema.</p>
        /// <note>
        /// <p>Currently, the <code>schema</code> parameter isn't supported.</p>
        /// </note>
        pub fn schema(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.schema(inp);
            self
        }
        pub fn set_schema(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_schema(inp);
            self
        }
        /// <p>The parameters for the SQL statement.</p>
        /// <note>
        /// <p>Array parameters are not supported.</p>
        /// </note>
        pub fn parameters(mut self, inp: impl Into<crate::model::SqlParameter>) -> Self {
            self.inner = self.inner.parameters(inp);
            self
        }
        pub fn set_parameters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SqlParameter>>,
        ) -> Self {
            self.inner = self.inner.set_parameters(inp);
            self
        }
        /// <p>The identifier of a transaction that was started by using the
        /// <code>BeginTransaction</code> operation. Specify the transaction ID of the
        /// transaction that you want to include the SQL statement in.</p>
        /// <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
        pub fn transaction_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transaction_id(inp);
            self
        }
        pub fn set_transaction_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_transaction_id(inp);
            self
        }
        /// <p>A value that indicates whether to include metadata in the results.</p>
        pub fn include_result_metadata(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_result_metadata(inp);
            self
        }
        pub fn set_include_result_metadata(mut self, inp: bool) -> Self {
            self.inner = self.inner.set_include_result_metadata(inp);
            self
        }
        /// <p>A value that indicates whether to continue running the statement after
        /// the call times out. By default, the statement stops running when the call
        /// times out.</p>
        /// <important>
        /// <p>For DDL statements, we recommend continuing to run the statement after
        /// the call times out. When a DDL statement terminates before it is finished
        /// running, it can result in errors and possibly corrupted data structures.</p>
        /// </important>
        pub fn continue_after_timeout(mut self, inp: bool) -> Self {
            self.inner = self.inner.continue_after_timeout(inp);
            self
        }
        pub fn set_continue_after_timeout(mut self, inp: bool) -> Self {
            self.inner = self.inner.set_continue_after_timeout(inp);
            self
        }
        /// <p>Options that control how the result set is returned.</p>
        pub fn result_set_options(mut self, inp: crate::model::ResultSetOptions) -> Self {
            self.inner = self.inner.result_set_options(inp);
            self
        }
        pub fn set_result_set_options(
            mut self,
            inp: std::option::Option<crate::model::ResultSetOptions>,
        ) -> Self {
            self.inner = self.inner.set_result_set_options(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RollbackTransaction<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::rollback_transaction_input::Builder,
    }
    impl<C> RollbackTransaction<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::RollbackTransactionOutput,
            smithy_http::result::SdkError<crate::error::RollbackTransactionError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// <p>The name or ARN of the secret that enables access to the DB cluster.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(inp);
            self
        }
        /// <p>The identifier of the transaction to roll back.</p>
        pub fn transaction_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transaction_id(inp);
            self
        }
        pub fn set_transaction_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_transaction_id(inp);
            self
        }
    }
}
