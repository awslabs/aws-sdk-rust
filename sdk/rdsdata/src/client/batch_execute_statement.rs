// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchExecuteStatement`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.</p>
    ///   - [`secret_arn(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::secret_arn) / [`set_secret_arn(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_secret_arn): <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p>  <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
    ///   - [`sql(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::sql) / [`set_sql(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_sql): <p>The SQL statement to run. Don't include a semicolon (;) at the end of the SQL statement.</p>
    ///   - [`database(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::database) / [`set_database(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_database): <p>The name of the database.</p>
    ///   - [`schema(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::schema) / [`set_schema(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_schema): <p>The name of the database schema.</p> <note>   <p>Currently, the <code>schema</code> parameter isn't supported.</p>  </note>
    ///   - [`parameter_sets(Vec<Vec<SqlParameter>>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::parameter_sets) / [`set_parameter_sets(Option<Vec<Vec<SqlParameter>>>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_parameter_sets): <p>The parameter set for the batch operation.</p>  <p>The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:</p>  <ul>   <li> <p>Specify one or more empty parameter sets.</p> </li>   <li> <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p> </li>  </ul> <note>   <p>Array parameters are not supported.</p>  </note>
    ///   - [`transaction_id(impl Into<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::transaction_id) / [`set_transaction_id(Option<String>)`](crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::set_transaction_id): <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p>  <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
    /// - On success, responds with [`BatchExecuteStatementOutput`](crate::operation::batch_execute_statement::BatchExecuteStatementOutput) with field(s):
    ///   - [`update_results(Option<Vec<UpdateResult>>)`](crate::operation::batch_execute_statement::BatchExecuteStatementOutput::update_results): <p>The execution results of each batch entry.</p>
    /// - On failure, responds with [`SdkError<BatchExecuteStatementError>`](crate::operation::batch_execute_statement::BatchExecuteStatementError)
    pub fn batch_execute_statement(
        &self,
    ) -> crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder
    {
        crate::operation::batch_execute_statement::builders::BatchExecuteStatementFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
