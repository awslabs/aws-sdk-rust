// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an array.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ArrayValue {
    /// <p>An array of arrays.</p>
    ArrayValues(std::vec::Vec<crate::types::ArrayValue>),
    /// <p>An array of Boolean values.</p>
    BooleanValues(std::vec::Vec<bool>),
    /// <p>An array of floating-point numbers.</p>
    DoubleValues(std::vec::Vec<f64>),
    /// <p>An array of integers.</p>
    LongValues(std::vec::Vec<i64>),
    /// <p>An array of strings.</p>
    StringValues(std::vec::Vec<std::string::String>),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ArrayValue {
    /// Tries to convert the enum instance into [`ArrayValues`](crate::types::ArrayValue::ArrayValues), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_array_values(
        &self,
    ) -> std::result::Result<&std::vec::Vec<crate::types::ArrayValue>, &Self> {
        if let ArrayValue::ArrayValues(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ArrayValues`](crate::types::ArrayValue::ArrayValues).
    pub fn is_array_values(&self) -> bool {
        self.as_array_values().is_ok()
    }
    /// Tries to convert the enum instance into [`BooleanValues`](crate::types::ArrayValue::BooleanValues), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean_values(&self) -> std::result::Result<&std::vec::Vec<bool>, &Self> {
        if let ArrayValue::BooleanValues(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`BooleanValues`](crate::types::ArrayValue::BooleanValues).
    pub fn is_boolean_values(&self) -> bool {
        self.as_boolean_values().is_ok()
    }
    /// Tries to convert the enum instance into [`DoubleValues`](crate::types::ArrayValue::DoubleValues), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_double_values(&self) -> std::result::Result<&std::vec::Vec<f64>, &Self> {
        if let ArrayValue::DoubleValues(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`DoubleValues`](crate::types::ArrayValue::DoubleValues).
    pub fn is_double_values(&self) -> bool {
        self.as_double_values().is_ok()
    }
    /// Tries to convert the enum instance into [`LongValues`](crate::types::ArrayValue::LongValues), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_long_values(&self) -> std::result::Result<&std::vec::Vec<i64>, &Self> {
        if let ArrayValue::LongValues(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`LongValues`](crate::types::ArrayValue::LongValues).
    pub fn is_long_values(&self) -> bool {
        self.as_long_values().is_ok()
    }
    /// Tries to convert the enum instance into [`StringValues`](crate::types::ArrayValue::StringValues), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_values(
        &self,
    ) -> std::result::Result<&std::vec::Vec<std::string::String>, &Self> {
        if let ArrayValue::StringValues(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`StringValues`](crate::types::ArrayValue::StringValues).
    pub fn is_string_values(&self) -> bool {
        self.as_string_values().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
