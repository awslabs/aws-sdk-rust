// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result set returned by a SQL statement.</p> <note>
/// <p>This data structure is only used with the deprecated <code>ExecuteSql</code> operation. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation instead.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultFrame {
    /// <p>The result-set metadata in the result set.</p>
    #[doc(hidden)]
    pub result_set_metadata: std::option::Option<crate::types::ResultSetMetadata>,
    /// <p>The records in the result set.</p>
    #[doc(hidden)]
    pub records: std::option::Option<std::vec::Vec<crate::types::Record>>,
}
impl ResultFrame {
    /// <p>The result-set metadata in the result set.</p>
    pub fn result_set_metadata(&self) -> std::option::Option<&crate::types::ResultSetMetadata> {
        self.result_set_metadata.as_ref()
    }
    /// <p>The records in the result set.</p>
    pub fn records(&self) -> std::option::Option<&[crate::types::Record]> {
        self.records.as_deref()
    }
}
impl ResultFrame {
    /// Creates a new builder-style object to manufacture [`ResultFrame`](crate::types::ResultFrame).
    pub fn builder() -> crate::types::builders::ResultFrameBuilder {
        crate::types::builders::ResultFrameBuilder::default()
    }
}

/// A builder for [`ResultFrame`](crate::types::ResultFrame).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultFrameBuilder {
    pub(crate) result_set_metadata: std::option::Option<crate::types::ResultSetMetadata>,
    pub(crate) records: std::option::Option<std::vec::Vec<crate::types::Record>>,
}
impl ResultFrameBuilder {
    /// <p>The result-set metadata in the result set.</p>
    pub fn result_set_metadata(mut self, input: crate::types::ResultSetMetadata) -> Self {
        self.result_set_metadata = Some(input);
        self
    }
    /// <p>The result-set metadata in the result set.</p>
    pub fn set_result_set_metadata(
        mut self,
        input: std::option::Option<crate::types::ResultSetMetadata>,
    ) -> Self {
        self.result_set_metadata = input;
        self
    }
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>The records in the result set.</p>
    pub fn records(mut self, input: crate::types::Record) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = Some(v);
        self
    }
    /// <p>The records in the result set.</p>
    pub fn set_records(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Record>>,
    ) -> Self {
        self.records = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultFrame`](crate::types::ResultFrame).
    pub fn build(self) -> crate::types::ResultFrame {
        crate::types::ResultFrame {
            result_set_metadata: self.result_set_metadata,
            records: self.records,
        }
    }
}
