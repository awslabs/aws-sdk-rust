// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options that control how the result set is returned.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultSetOptions {
    /// <p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <note>
    /// <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p>
    /// </note>
    #[doc(hidden)]
    pub decimal_return_type: std::option::Option<crate::types::DecimalReturnType>,
    /// <p>A value that indicates how a field of <code>LONG</code> type is represented. Allowed values are <code>LONG</code> and <code>STRING</code>. The default is <code>LONG</code>. Specify <code>STRING</code> if the length or precision of numeric values might cause truncation or rounding errors. </p>
    #[doc(hidden)]
    pub long_return_type: std::option::Option<crate::types::LongReturnType>,
}
impl ResultSetOptions {
    /// <p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <note>
    /// <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p>
    /// </note>
    pub fn decimal_return_type(&self) -> std::option::Option<&crate::types::DecimalReturnType> {
        self.decimal_return_type.as_ref()
    }
    /// <p>A value that indicates how a field of <code>LONG</code> type is represented. Allowed values are <code>LONG</code> and <code>STRING</code>. The default is <code>LONG</code>. Specify <code>STRING</code> if the length or precision of numeric values might cause truncation or rounding errors. </p>
    pub fn long_return_type(&self) -> std::option::Option<&crate::types::LongReturnType> {
        self.long_return_type.as_ref()
    }
}
impl ResultSetOptions {
    /// Creates a new builder-style object to manufacture [`ResultSetOptions`](crate::types::ResultSetOptions).
    pub fn builder() -> crate::types::builders::ResultSetOptionsBuilder {
        crate::types::builders::ResultSetOptionsBuilder::default()
    }
}

/// A builder for [`ResultSetOptions`](crate::types::ResultSetOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultSetOptionsBuilder {
    pub(crate) decimal_return_type: std::option::Option<crate::types::DecimalReturnType>,
    pub(crate) long_return_type: std::option::Option<crate::types::LongReturnType>,
}
impl ResultSetOptionsBuilder {
    /// <p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <note>
    /// <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p>
    /// </note>
    pub fn decimal_return_type(mut self, input: crate::types::DecimalReturnType) -> Self {
        self.decimal_return_type = Some(input);
        self
    }
    /// <p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <note>
    /// <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p>
    /// </note>
    pub fn set_decimal_return_type(
        mut self,
        input: std::option::Option<crate::types::DecimalReturnType>,
    ) -> Self {
        self.decimal_return_type = input;
        self
    }
    /// <p>A value that indicates how a field of <code>LONG</code> type is represented. Allowed values are <code>LONG</code> and <code>STRING</code>. The default is <code>LONG</code>. Specify <code>STRING</code> if the length or precision of numeric values might cause truncation or rounding errors. </p>
    pub fn long_return_type(mut self, input: crate::types::LongReturnType) -> Self {
        self.long_return_type = Some(input);
        self
    }
    /// <p>A value that indicates how a field of <code>LONG</code> type is represented. Allowed values are <code>LONG</code> and <code>STRING</code>. The default is <code>LONG</code>. Specify <code>STRING</code> if the length or precision of numeric values might cause truncation or rounding errors. </p>
    pub fn set_long_return_type(
        mut self,
        input: std::option::Option<crate::types::LongReturnType>,
    ) -> Self {
        self.long_return_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultSetOptions`](crate::types::ResultSetOptions).
    pub fn build(self) -> crate::types::ResultSetOptions {
        crate::types::ResultSetOptions {
            decimal_return_type: self.decimal_return_type,
            long_return_type: self.long_return_type,
        }
    }
}
