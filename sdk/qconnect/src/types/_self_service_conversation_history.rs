// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conversation history data to included in conversation context data before the Amazon Q in Connect session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SelfServiceConversationHistory {
    /// <p>The number of turn of the conversation history data.</p>
    pub turn_number: i32,
    /// <p>The input transcript of the conversation history data.</p>
    pub input_transcript: ::std::option::Option<::std::string::String>,
    /// <p>The bot response of the conversation history data.</p>
    pub bot_response: ::std::option::Option<::std::string::String>,
}
impl SelfServiceConversationHistory {
    /// <p>The number of turn of the conversation history data.</p>
    pub fn turn_number(&self) -> i32 {
        self.turn_number
    }
    /// <p>The input transcript of the conversation history data.</p>
    pub fn input_transcript(&self) -> ::std::option::Option<&str> {
        self.input_transcript.as_deref()
    }
    /// <p>The bot response of the conversation history data.</p>
    pub fn bot_response(&self) -> ::std::option::Option<&str> {
        self.bot_response.as_deref()
    }
}
impl ::std::fmt::Debug for SelfServiceConversationHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SelfServiceConversationHistory");
        formatter.field("turn_number", &self.turn_number);
        formatter.field("input_transcript", &"*** Sensitive Data Redacted ***");
        formatter.field("bot_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SelfServiceConversationHistory {
    /// Creates a new builder-style object to manufacture [`SelfServiceConversationHistory`](crate::types::SelfServiceConversationHistory).
    pub fn builder() -> crate::types::builders::SelfServiceConversationHistoryBuilder {
        crate::types::builders::SelfServiceConversationHistoryBuilder::default()
    }
}

/// A builder for [`SelfServiceConversationHistory`](crate::types::SelfServiceConversationHistory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SelfServiceConversationHistoryBuilder {
    pub(crate) turn_number: ::std::option::Option<i32>,
    pub(crate) input_transcript: ::std::option::Option<::std::string::String>,
    pub(crate) bot_response: ::std::option::Option<::std::string::String>,
}
impl SelfServiceConversationHistoryBuilder {
    /// <p>The number of turn of the conversation history data.</p>
    /// This field is required.
    pub fn turn_number(mut self, input: i32) -> Self {
        self.turn_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of turn of the conversation history data.</p>
    pub fn set_turn_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.turn_number = input;
        self
    }
    /// <p>The number of turn of the conversation history data.</p>
    pub fn get_turn_number(&self) -> &::std::option::Option<i32> {
        &self.turn_number
    }
    /// <p>The input transcript of the conversation history data.</p>
    pub fn input_transcript(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_transcript = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input transcript of the conversation history data.</p>
    pub fn set_input_transcript(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_transcript = input;
        self
    }
    /// <p>The input transcript of the conversation history data.</p>
    pub fn get_input_transcript(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_transcript
    }
    /// <p>The bot response of the conversation history data.</p>
    pub fn bot_response(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_response = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bot response of the conversation history data.</p>
    pub fn set_bot_response(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_response = input;
        self
    }
    /// <p>The bot response of the conversation history data.</p>
    pub fn get_bot_response(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_response
    }
    /// Consumes the builder and constructs a [`SelfServiceConversationHistory`](crate::types::SelfServiceConversationHistory).
    /// This method will fail if any of the following fields are not set:
    /// - [`turn_number`](crate::types::builders::SelfServiceConversationHistoryBuilder::turn_number)
    pub fn build(self) -> ::std::result::Result<crate::types::SelfServiceConversationHistory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SelfServiceConversationHistory {
            turn_number: self.turn_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "turn_number",
                    "turn_number was not specified but it is required when building SelfServiceConversationHistory",
                )
            })?,
            input_transcript: self.input_transcript,
            bot_response: self.bot_response,
        })
    }
}
impl ::std::fmt::Debug for SelfServiceConversationHistoryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SelfServiceConversationHistoryBuilder");
        formatter.field("turn_number", &self.turn_number);
        formatter.field("input_transcript", &"*** Sensitive Data Redacted ***");
        formatter.field("bot_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
