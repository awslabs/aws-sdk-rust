// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the source content data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceContentDataDetails {
    /// <p>The identifier of the source content.</p>
    pub id: ::std::string::String,
    /// <p>The type of the source content.</p>
    pub r#type: crate::types::SourceContentType,
    /// <p>Details about the source content text data.</p>
    pub text_data: ::std::option::Option<crate::types::TextData>,
    /// <p>Details about the source content ranking data.</p>
    pub ranking_data: ::std::option::Option<crate::types::RankingData>,
}
impl SourceContentDataDetails {
    /// <p>The identifier of the source content.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of the source content.</p>
    pub fn r#type(&self) -> &crate::types::SourceContentType {
        &self.r#type
    }
    /// <p>Details about the source content text data.</p>
    pub fn text_data(&self) -> ::std::option::Option<&crate::types::TextData> {
        self.text_data.as_ref()
    }
    /// <p>Details about the source content ranking data.</p>
    pub fn ranking_data(&self) -> ::std::option::Option<&crate::types::RankingData> {
        self.ranking_data.as_ref()
    }
}
impl SourceContentDataDetails {
    /// Creates a new builder-style object to manufacture [`SourceContentDataDetails`](crate::types::SourceContentDataDetails).
    pub fn builder() -> crate::types::builders::SourceContentDataDetailsBuilder {
        crate::types::builders::SourceContentDataDetailsBuilder::default()
    }
}

/// A builder for [`SourceContentDataDetails`](crate::types::SourceContentDataDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceContentDataDetailsBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::SourceContentType>,
    pub(crate) text_data: ::std::option::Option<crate::types::TextData>,
    pub(crate) ranking_data: ::std::option::Option<crate::types::RankingData>,
}
impl SourceContentDataDetailsBuilder {
    /// <p>The identifier of the source content.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source content.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the source content.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of the source content.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SourceContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the source content.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SourceContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the source content.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SourceContentType> {
        &self.r#type
    }
    /// <p>Details about the source content text data.</p>
    /// This field is required.
    pub fn text_data(mut self, input: crate::types::TextData) -> Self {
        self.text_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the source content text data.</p>
    pub fn set_text_data(mut self, input: ::std::option::Option<crate::types::TextData>) -> Self {
        self.text_data = input;
        self
    }
    /// <p>Details about the source content text data.</p>
    pub fn get_text_data(&self) -> &::std::option::Option<crate::types::TextData> {
        &self.text_data
    }
    /// <p>Details about the source content ranking data.</p>
    /// This field is required.
    pub fn ranking_data(mut self, input: crate::types::RankingData) -> Self {
        self.ranking_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the source content ranking data.</p>
    pub fn set_ranking_data(mut self, input: ::std::option::Option<crate::types::RankingData>) -> Self {
        self.ranking_data = input;
        self
    }
    /// <p>Details about the source content ranking data.</p>
    pub fn get_ranking_data(&self) -> &::std::option::Option<crate::types::RankingData> {
        &self.ranking_data
    }
    /// Consumes the builder and constructs a [`SourceContentDataDetails`](crate::types::SourceContentDataDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::SourceContentDataDetailsBuilder::id)
    /// - [`r#type`](crate::types::builders::SourceContentDataDetailsBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceContentDataDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceContentDataDetails {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building SourceContentDataDetails",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SourceContentDataDetails",
                )
            })?,
            text_data: self.text_data,
            ranking_data: self.ranking_data,
        })
    }
}
