// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data for the AI Prompt</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AiPromptData {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub assistant_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub assistant_arn: ::std::string::String,
    /// <p>The identifier of the Amazon Q in Connect AI prompt.</p>
    pub ai_prompt_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the AI Prompt.</p>
    pub ai_prompt_arn: ::std::string::String,
    /// <p>The name of the AI Prompt</p>
    pub name: ::std::string::String,
    /// <p>The type of this AI Prompt.</p>
    pub r#type: crate::types::AiPromptType,
    /// <p>The type of the prompt template for this AI Prompt.</p>
    pub template_type: crate::types::AiPromptTemplateType,
    /// <p>The identifier of the model used for this AI Prompt. Model Ids supported are: <code>anthropic.claude-3-haiku-20240307-v1:0</code>.</p>
    pub model_id: ::std::string::String,
    /// <p>The API format used for this AI Prompt.</p>
    pub api_format: crate::types::AiPromptApiFormat,
    /// <p>The configuration of the prompt template for this AI Prompt.</p>
    pub template_configuration: ::std::option::Option<crate::types::AiPromptTemplateConfiguration>,
    /// <p>The time the AI Prompt was last modified.</p>
    pub modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The description of the AI Prompt.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The visibility status of the AI Prompt.</p>
    pub visibility_status: crate::types::VisibilityStatus,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The origin of the AI Prompt. <code>SYSTEM</code> for a default AI Prompt created by Q in Connect or <code>CUSTOMER</code> for an AI Prompt created by calling AI Prompt creation APIs.</p>
    pub origin: ::std::option::Option<crate::types::Origin>,
    /// <p>The status of the AI Prompt.</p>
    pub status: ::std::option::Option<crate::types::Status>,
}
impl AiPromptData {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(&self) -> &str {
        use std::ops::Deref;
        self.assistant_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn assistant_arn(&self) -> &str {
        use std::ops::Deref;
        self.assistant_arn.deref()
    }
    /// <p>The identifier of the Amazon Q in Connect AI prompt.</p>
    pub fn ai_prompt_id(&self) -> &str {
        use std::ops::Deref;
        self.ai_prompt_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Prompt.</p>
    pub fn ai_prompt_arn(&self) -> &str {
        use std::ops::Deref;
        self.ai_prompt_arn.deref()
    }
    /// <p>The name of the AI Prompt</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of this AI Prompt.</p>
    pub fn r#type(&self) -> &crate::types::AiPromptType {
        &self.r#type
    }
    /// <p>The type of the prompt template for this AI Prompt.</p>
    pub fn template_type(&self) -> &crate::types::AiPromptTemplateType {
        &self.template_type
    }
    /// <p>The identifier of the model used for this AI Prompt. Model Ids supported are: <code>anthropic.claude-3-haiku-20240307-v1:0</code>.</p>
    pub fn model_id(&self) -> &str {
        use std::ops::Deref;
        self.model_id.deref()
    }
    /// <p>The API format used for this AI Prompt.</p>
    pub fn api_format(&self) -> &crate::types::AiPromptApiFormat {
        &self.api_format
    }
    /// <p>The configuration of the prompt template for this AI Prompt.</p>
    pub fn template_configuration(&self) -> ::std::option::Option<&crate::types::AiPromptTemplateConfiguration> {
        self.template_configuration.as_ref()
    }
    /// <p>The time the AI Prompt was last modified.</p>
    pub fn modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_time.as_ref()
    }
    /// <p>The description of the AI Prompt.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The visibility status of the AI Prompt.</p>
    pub fn visibility_status(&self) -> &crate::types::VisibilityStatus {
        &self.visibility_status
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The origin of the AI Prompt. <code>SYSTEM</code> for a default AI Prompt created by Q in Connect or <code>CUSTOMER</code> for an AI Prompt created by calling AI Prompt creation APIs.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::Origin> {
        self.origin.as_ref()
    }
    /// <p>The status of the AI Prompt.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
}
impl AiPromptData {
    /// Creates a new builder-style object to manufacture [`AiPromptData`](crate::types::AiPromptData).
    pub fn builder() -> crate::types::builders::AiPromptDataBuilder {
        crate::types::builders::AiPromptDataBuilder::default()
    }
}

/// A builder for [`AiPromptData`](crate::types::AiPromptData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AiPromptDataBuilder {
    pub(crate) assistant_id: ::std::option::Option<::std::string::String>,
    pub(crate) assistant_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ai_prompt_id: ::std::option::Option<::std::string::String>,
    pub(crate) ai_prompt_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AiPromptType>,
    pub(crate) template_type: ::std::option::Option<crate::types::AiPromptTemplateType>,
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) api_format: ::std::option::Option<crate::types::AiPromptApiFormat>,
    pub(crate) template_configuration: ::std::option::Option<crate::types::AiPromptTemplateConfiguration>,
    pub(crate) modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) visibility_status: ::std::option::Option<crate::types::VisibilityStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) origin: ::std::option::Option<crate::types::Origin>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
}
impl AiPromptDataBuilder {
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    /// This field is required.
    pub fn assistant_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assistant_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn set_assistant_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assistant_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.</p>
    pub fn get_assistant_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.assistant_arn
    }
    /// <p>The identifier of the Amazon Q in Connect AI prompt.</p>
    /// This field is required.
    pub fn ai_prompt_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_prompt_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI prompt.</p>
    pub fn set_ai_prompt_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_prompt_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q in Connect AI prompt.</p>
    pub fn get_ai_prompt_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_prompt_id
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Prompt.</p>
    /// This field is required.
    pub fn ai_prompt_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ai_prompt_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Prompt.</p>
    pub fn set_ai_prompt_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ai_prompt_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AI Prompt.</p>
    pub fn get_ai_prompt_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ai_prompt_arn
    }
    /// <p>The name of the AI Prompt</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AI Prompt</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AI Prompt</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of this AI Prompt.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AiPromptType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of this AI Prompt.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AiPromptType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of this AI Prompt.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AiPromptType> {
        &self.r#type
    }
    /// <p>The type of the prompt template for this AI Prompt.</p>
    /// This field is required.
    pub fn template_type(mut self, input: crate::types::AiPromptTemplateType) -> Self {
        self.template_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the prompt template for this AI Prompt.</p>
    pub fn set_template_type(mut self, input: ::std::option::Option<crate::types::AiPromptTemplateType>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The type of the prompt template for this AI Prompt.</p>
    pub fn get_template_type(&self) -> &::std::option::Option<crate::types::AiPromptTemplateType> {
        &self.template_type
    }
    /// <p>The identifier of the model used for this AI Prompt. Model Ids supported are: <code>anthropic.claude-3-haiku-20240307-v1:0</code>.</p>
    /// This field is required.
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the model used for this AI Prompt. Model Ids supported are: <code>anthropic.claude-3-haiku-20240307-v1:0</code>.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The identifier of the model used for this AI Prompt. Model Ids supported are: <code>anthropic.claude-3-haiku-20240307-v1:0</code>.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>The API format used for this AI Prompt.</p>
    /// This field is required.
    pub fn api_format(mut self, input: crate::types::AiPromptApiFormat) -> Self {
        self.api_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The API format used for this AI Prompt.</p>
    pub fn set_api_format(mut self, input: ::std::option::Option<crate::types::AiPromptApiFormat>) -> Self {
        self.api_format = input;
        self
    }
    /// <p>The API format used for this AI Prompt.</p>
    pub fn get_api_format(&self) -> &::std::option::Option<crate::types::AiPromptApiFormat> {
        &self.api_format
    }
    /// <p>The configuration of the prompt template for this AI Prompt.</p>
    /// This field is required.
    pub fn template_configuration(mut self, input: crate::types::AiPromptTemplateConfiguration) -> Self {
        self.template_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the prompt template for this AI Prompt.</p>
    pub fn set_template_configuration(mut self, input: ::std::option::Option<crate::types::AiPromptTemplateConfiguration>) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>The configuration of the prompt template for this AI Prompt.</p>
    pub fn get_template_configuration(&self) -> &::std::option::Option<crate::types::AiPromptTemplateConfiguration> {
        &self.template_configuration
    }
    /// <p>The time the AI Prompt was last modified.</p>
    pub fn modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the AI Prompt was last modified.</p>
    pub fn set_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_time = input;
        self
    }
    /// <p>The time the AI Prompt was last modified.</p>
    pub fn get_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_time
    }
    /// <p>The description of the AI Prompt.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the AI Prompt.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the AI Prompt.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The visibility status of the AI Prompt.</p>
    /// This field is required.
    pub fn visibility_status(mut self, input: crate::types::VisibilityStatus) -> Self {
        self.visibility_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility status of the AI Prompt.</p>
    pub fn set_visibility_status(mut self, input: ::std::option::Option<crate::types::VisibilityStatus>) -> Self {
        self.visibility_status = input;
        self
    }
    /// <p>The visibility status of the AI Prompt.</p>
    pub fn get_visibility_status(&self) -> &::std::option::Option<crate::types::VisibilityStatus> {
        &self.visibility_status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The origin of the AI Prompt. <code>SYSTEM</code> for a default AI Prompt created by Q in Connect or <code>CUSTOMER</code> for an AI Prompt created by calling AI Prompt creation APIs.</p>
    pub fn origin(mut self, input: crate::types::Origin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The origin of the AI Prompt. <code>SYSTEM</code> for a default AI Prompt created by Q in Connect or <code>CUSTOMER</code> for an AI Prompt created by calling AI Prompt creation APIs.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::Origin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The origin of the AI Prompt. <code>SYSTEM</code> for a default AI Prompt created by Q in Connect or <code>CUSTOMER</code> for an AI Prompt created by calling AI Prompt creation APIs.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::Origin> {
        &self.origin
    }
    /// <p>The status of the AI Prompt.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the AI Prompt.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the AI Prompt.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AiPromptData`](crate::types::AiPromptData).
    /// This method will fail if any of the following fields are not set:
    /// - [`assistant_id`](crate::types::builders::AiPromptDataBuilder::assistant_id)
    /// - [`assistant_arn`](crate::types::builders::AiPromptDataBuilder::assistant_arn)
    /// - [`ai_prompt_id`](crate::types::builders::AiPromptDataBuilder::ai_prompt_id)
    /// - [`ai_prompt_arn`](crate::types::builders::AiPromptDataBuilder::ai_prompt_arn)
    /// - [`name`](crate::types::builders::AiPromptDataBuilder::name)
    /// - [`r#type`](crate::types::builders::AiPromptDataBuilder::type)
    /// - [`template_type`](crate::types::builders::AiPromptDataBuilder::template_type)
    /// - [`model_id`](crate::types::builders::AiPromptDataBuilder::model_id)
    /// - [`api_format`](crate::types::builders::AiPromptDataBuilder::api_format)
    /// - [`visibility_status`](crate::types::builders::AiPromptDataBuilder::visibility_status)
    pub fn build(self) -> ::std::result::Result<crate::types::AiPromptData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AiPromptData {
            assistant_id: self.assistant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_id",
                    "assistant_id was not specified but it is required when building AiPromptData",
                )
            })?,
            assistant_arn: self.assistant_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "assistant_arn",
                    "assistant_arn was not specified but it is required when building AiPromptData",
                )
            })?,
            ai_prompt_id: self.ai_prompt_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ai_prompt_id",
                    "ai_prompt_id was not specified but it is required when building AiPromptData",
                )
            })?,
            ai_prompt_arn: self.ai_prompt_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ai_prompt_arn",
                    "ai_prompt_arn was not specified but it is required when building AiPromptData",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AiPromptData",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AiPromptData",
                )
            })?,
            template_type: self.template_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_type",
                    "template_type was not specified but it is required when building AiPromptData",
                )
            })?,
            model_id: self.model_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_id",
                    "model_id was not specified but it is required when building AiPromptData",
                )
            })?,
            api_format: self.api_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "api_format",
                    "api_format was not specified but it is required when building AiPromptData",
                )
            })?,
            template_configuration: self.template_configuration,
            modified_time: self.modified_time,
            description: self.description,
            visibility_status: self.visibility_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visibility_status",
                    "visibility_status was not specified but it is required when building AiPromptData",
                )
            })?,
            tags: self.tags,
            origin: self.origin,
            status: self.status,
        })
    }
}
