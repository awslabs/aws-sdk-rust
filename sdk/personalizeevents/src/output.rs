// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutUsersOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutUsersOutput {
    /// Creates a new builder-style object to manufacture [`PutUsersOutput`](crate::output::PutUsersOutput).
    pub fn builder() -> crate::output::put_users_output::Builder {
        crate::output::put_users_output::Builder::default()
    }
}

/// See [`PutUsersOutput`](crate::output::PutUsersOutput).
pub mod put_users_output {

    /// A builder for [`PutUsersOutput`](crate::output::PutUsersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutUsersOutput`](crate::output::PutUsersOutput).
        pub fn build(self) -> crate::output::PutUsersOutput {
            crate::output::PutUsersOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutItemsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutItemsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutItemsOutput {
    /// Creates a new builder-style object to manufacture [`PutItemsOutput`](crate::output::PutItemsOutput).
    pub fn builder() -> crate::output::put_items_output::Builder {
        crate::output::put_items_output::Builder::default()
    }
}

/// See [`PutItemsOutput`](crate::output::PutItemsOutput).
pub mod put_items_output {

    /// A builder for [`PutItemsOutput`](crate::output::PutItemsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutItemsOutput`](crate::output::PutItemsOutput).
        pub fn build(self) -> crate::output::PutItemsOutput {
            crate::output::PutItemsOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEventsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutEventsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutEventsOutput {
    /// Creates a new builder-style object to manufacture [`PutEventsOutput`](crate::output::PutEventsOutput).
    pub fn builder() -> crate::output::put_events_output::Builder {
        crate::output::put_events_output::Builder::default()
    }
}

/// See [`PutEventsOutput`](crate::output::PutEventsOutput).
pub mod put_events_output {

    /// A builder for [`PutEventsOutput`](crate::output::PutEventsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutEventsOutput`](crate::output::PutEventsOutput).
        pub fn build(self) -> crate::output::PutEventsOutput {
            crate::output::PutEventsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
