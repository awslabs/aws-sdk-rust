// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutEventsInput {
    /// <p>The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    pub tracking_id: ::std::option::Option<::std::string::String>,
    /// <p>The user associated with the event.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of event data from the session.</p>
    pub event_list: ::std::option::Option<::std::vec::Vec<crate::types::Event>>,
}
impl PutEventsInput {
    /// <p>The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    pub fn tracking_id(&self) -> ::std::option::Option<&str> {
        self.tracking_id.as_deref()
    }
    /// <p>The user associated with the event.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>A list of event data from the session.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_list.is_none()`.
    pub fn event_list(&self) -> &[crate::types::Event] {
        self.event_list.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PutEventsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventsInput");
        formatter.field("tracking_id", &self.tracking_id);
        formatter.field("user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("event_list", &self.event_list);
        formatter.finish()
    }
}
impl PutEventsInput {
    /// Creates a new builder-style object to manufacture [`PutEventsInput`](crate::operation::put_events::PutEventsInput).
    pub fn builder() -> crate::operation::put_events::builders::PutEventsInputBuilder {
        crate::operation::put_events::builders::PutEventsInputBuilder::default()
    }
}

/// A builder for [`PutEventsInput`](crate::operation::put_events::PutEventsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PutEventsInputBuilder {
    pub(crate) tracking_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_list: ::std::option::Option<::std::vec::Vec<crate::types::Event>>,
}
impl PutEventsInputBuilder {
    /// <p>The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    /// This field is required.
    pub fn tracking_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracking_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    pub fn set_tracking_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracking_id = input;
        self
    }
    /// <p>The tracking ID for the event. The ID is generated by a call to the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html">CreateEventTracker</a> API.</p>
    pub fn get_tracking_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracking_id
    }
    /// <p>The user associated with the event.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user associated with the event.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The user associated with the event.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html">Recording Events</a>.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// Appends an item to `event_list`.
    ///
    /// To override the contents of this collection use [`set_event_list`](Self::set_event_list).
    ///
    /// <p>A list of event data from the session.</p>
    pub fn event_list(mut self, input: crate::types::Event) -> Self {
        let mut v = self.event_list.unwrap_or_default();
        v.push(input);
        self.event_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of event data from the session.</p>
    pub fn set_event_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Event>>) -> Self {
        self.event_list = input;
        self
    }
    /// <p>A list of event data from the session.</p>
    pub fn get_event_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Event>> {
        &self.event_list
    }
    /// Consumes the builder and constructs a [`PutEventsInput`](crate::operation::put_events::PutEventsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::put_events::PutEventsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_events::PutEventsInput {
            tracking_id: self.tracking_id,
            user_id: self.user_id,
            session_id: self.session_id,
            event_list: self.event_list,
        })
    }
}
impl ::std::fmt::Debug for PutEventsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventsInputBuilder");
        formatter.field("tracking_id", &self.tracking_id);
        formatter.field("user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &self.session_id);
        formatter.field("event_list", &self.event_list);
        formatter.finish()
    }
}
