// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a metric attribution associated with an event. For more information about metric attributions, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/measuring-recommendation-impact.html">Measuring impact of recommendations</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricAttribution {
    /// <p>The source of the event, such as a third party.</p>
    #[doc(hidden)]
    pub event_attribution_source: std::option::Option<std::string::String>,
}
impl MetricAttribution {
    /// <p>The source of the event, such as a third party.</p>
    pub fn event_attribution_source(&self) -> std::option::Option<&str> {
        self.event_attribution_source.as_deref()
    }
}
impl MetricAttribution {
    /// Creates a new builder-style object to manufacture [`MetricAttribution`](crate::types::MetricAttribution).
    pub fn builder() -> crate::types::builders::MetricAttributionBuilder {
        crate::types::builders::MetricAttributionBuilder::default()
    }
}

/// A builder for [`MetricAttribution`](crate::types::MetricAttribution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricAttributionBuilder {
    pub(crate) event_attribution_source: std::option::Option<std::string::String>,
}
impl MetricAttributionBuilder {
    /// <p>The source of the event, such as a third party.</p>
    pub fn event_attribution_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_attribution_source = Some(input.into());
        self
    }
    /// <p>The source of the event, such as a third party.</p>
    pub fn set_event_attribution_source(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.event_attribution_source = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricAttribution`](crate::types::MetricAttribution).
    pub fn build(self) -> crate::types::MetricAttribution {
        crate::types::MetricAttribution {
            event_attribution_source: self.event_attribution_source,
        }
    }
}
