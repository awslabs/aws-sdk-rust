// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_event(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Event,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.event_id {
        object.key("eventId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.event_type {
        object.key("eventType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.event_value {
        object.key("eventValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.item_id {
        object.key("itemId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.properties {
        object.key("properties").string(var_5.as_str());
    }
    if let Some(var_6) = &input.sent_at {
        object
            .key("sentAt")
            .date_time(var_6, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.recommendation_id {
        object.key("recommendationId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.impression {
        let mut array_9 = object.key("impression").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.metric_attribution {
        #[allow(unused_mut)]
        let mut object_12 = object.key("metricAttribution").start_object();
        crate::protocol_serde::shape_metric_attribution::ser_metric_attribution(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    Ok(())
}
