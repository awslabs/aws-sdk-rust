// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_execution_history_output_next_token(
    input: &crate::operation::get_execution_history::GetExecutionHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_activities_output_next_token(
    input: &crate::operation::list_activities::ListActivitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_executions_output_next_token(
    input: &crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_map_runs_output_next_token(
    input: &crate::operation::list_map_runs::ListMapRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_state_machines_output_next_token(
    input: &crate::operation::list_state_machines::ListStateMachinesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_execution_history_output_events(
    input: crate::operation::get_execution_history::GetExecutionHistoryOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::HistoryEvent>> {
    let input = input.events;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_activities_output_activities(
    input: crate::operation::list_activities::ListActivitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActivityListItem>> {
    let input = input.activities;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_executions_output_executions(
    input: crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ExecutionListItem>> {
    let input = input.executions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_map_runs_output_map_runs(
    input: crate::operation::list_map_runs::ListMapRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MapRunListItem>> {
    let input = input.map_runs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_state_machines_output_state_machines(
    input: crate::operation::list_state_machines::ListStateMachinesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StateMachineListItem>> {
    let input = input.state_machines;
    ::std::option::Option::Some(input)
}
