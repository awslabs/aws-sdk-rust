// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_activity_output_correct_errors(
    mut builder: crate::operation::create_activity::builders::CreateActivityOutputBuilder,
) -> crate::operation::create_activity::builders::CreateActivityOutputBuilder {
    if builder.activity_arn.is_none() {
        builder.activity_arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_state_machine_output_correct_errors(
    mut builder: crate::operation::create_state_machine::builders::CreateStateMachineOutputBuilder,
) -> crate::operation::create_state_machine::builders::CreateStateMachineOutputBuilder {
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_state_machine_alias_output_correct_errors(
    mut builder: crate::operation::create_state_machine_alias::builders::CreateStateMachineAliasOutputBuilder,
) -> crate::operation::create_state_machine_alias::builders::CreateStateMachineAliasOutputBuilder {
    if builder.state_machine_alias_arn.is_none() {
        builder.state_machine_alias_arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_activity_output_correct_errors(
    mut builder: crate::operation::describe_activity::builders::DescribeActivityOutputBuilder,
) -> crate::operation::describe_activity::builders::DescribeActivityOutputBuilder {
    if builder.activity_arn.is_none() {
        builder.activity_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_execution_output_correct_errors(
    mut builder: crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder,
) -> crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_map_run_output_correct_errors(
    mut builder: crate::operation::describe_map_run::builders::DescribeMapRunOutputBuilder,
) -> crate::operation::describe_map_run::builders::DescribeMapRunOutputBuilder {
    if builder.map_run_arn.is_none() {
        builder.map_run_arn = Some(Default::default())
    }
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MapRunStatus>().ok()
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.max_concurrency.is_none() {
        builder.max_concurrency = Some(Default::default())
    }
    if builder.tolerated_failure_percentage.is_none() {
        builder.tolerated_failure_percentage = Some(Default::default())
    }
    if builder.tolerated_failure_count.is_none() {
        builder.tolerated_failure_count = Some(Default::default())
    }
    if builder.item_counts.is_none() {
        builder.item_counts = {
            let builder = crate::types::builders::MapRunItemCountsBuilder::default();
            Some(crate::serde_util::map_run_item_counts_correct_errors(builder).build())
        }
    }
    if builder.execution_counts.is_none() {
        builder.execution_counts = {
            let builder = crate::types::builders::MapRunExecutionCountsBuilder::default();
            Some(crate::serde_util::map_run_execution_counts_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_state_machine_output_correct_errors(
    mut builder: crate::operation::describe_state_machine::builders::DescribeStateMachineOutputBuilder,
) -> crate::operation::describe_state_machine::builders::DescribeStateMachineOutputBuilder {
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::StateMachineType>().ok()
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_state_machine_for_execution_output_correct_errors(
    mut builder: crate::operation::describe_state_machine_for_execution::builders::DescribeStateMachineForExecutionOutputBuilder,
) -> crate::operation::describe_state_machine_for_execution::builders::DescribeStateMachineForExecutionOutputBuilder {
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.update_date.is_none() {
        builder.update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_execution_history_output_correct_errors(
    mut builder: crate::operation::get_execution_history::builders::GetExecutionHistoryOutputBuilder,
) -> crate::operation::get_execution_history::builders::GetExecutionHistoryOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_activities_output_correct_errors(
    mut builder: crate::operation::list_activities::builders::ListActivitiesOutputBuilder,
) -> crate::operation::list_activities::builders::ListActivitiesOutputBuilder {
    if builder.activities.is_none() {
        builder.activities = Some(Default::default())
    }
    builder
}

pub(crate) fn list_executions_output_correct_errors(
    mut builder: crate::operation::list_executions::builders::ListExecutionsOutputBuilder,
) -> crate::operation::list_executions::builders::ListExecutionsOutputBuilder {
    if builder.executions.is_none() {
        builder.executions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_map_runs_output_correct_errors(
    mut builder: crate::operation::list_map_runs::builders::ListMapRunsOutputBuilder,
) -> crate::operation::list_map_runs::builders::ListMapRunsOutputBuilder {
    if builder.map_runs.is_none() {
        builder.map_runs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_state_machine_aliases_output_correct_errors(
    mut builder: crate::operation::list_state_machine_aliases::builders::ListStateMachineAliasesOutputBuilder,
) -> crate::operation::list_state_machine_aliases::builders::ListStateMachineAliasesOutputBuilder {
    if builder.state_machine_aliases.is_none() {
        builder.state_machine_aliases = Some(Default::default())
    }
    builder
}

pub(crate) fn list_state_machine_versions_output_correct_errors(
    mut builder: crate::operation::list_state_machine_versions::builders::ListStateMachineVersionsOutputBuilder,
) -> crate::operation::list_state_machine_versions::builders::ListStateMachineVersionsOutputBuilder {
    if builder.state_machine_versions.is_none() {
        builder.state_machine_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_state_machines_output_correct_errors(
    mut builder: crate::operation::list_state_machines::builders::ListStateMachinesOutputBuilder,
) -> crate::operation::list_state_machines::builders::ListStateMachinesOutputBuilder {
    if builder.state_machines.is_none() {
        builder.state_machines = Some(Default::default())
    }
    builder
}

pub(crate) fn publish_state_machine_version_output_correct_errors(
    mut builder: crate::operation::publish_state_machine_version::builders::PublishStateMachineVersionOutputBuilder,
) -> crate::operation::publish_state_machine_version::builders::PublishStateMachineVersionOutputBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state_machine_version_arn.is_none() {
        builder.state_machine_version_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn start_execution_output_correct_errors(
    mut builder: crate::operation::start_execution::builders::StartExecutionOutputBuilder,
) -> crate::operation::start_execution::builders::StartExecutionOutputBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_sync_execution_output_correct_errors(
    mut builder: crate::operation::start_sync_execution::builders::StartSyncExecutionOutputBuilder,
) -> crate::operation::start_sync_execution::builders::StartSyncExecutionOutputBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.stop_date.is_none() {
        builder.stop_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SyncExecutionStatus>().ok()
    }
    builder
}

pub(crate) fn stop_execution_output_correct_errors(
    mut builder: crate::operation::stop_execution::builders::StopExecutionOutputBuilder,
) -> crate::operation::stop_execution::builders::StopExecutionOutputBuilder {
    if builder.stop_date.is_none() {
        builder.stop_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_state_machine_output_correct_errors(
    mut builder: crate::operation::update_state_machine::builders::UpdateStateMachineOutputBuilder,
) -> crate::operation::update_state_machine::builders::UpdateStateMachineOutputBuilder {
    if builder.update_date.is_none() {
        builder.update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_state_machine_alias_output_correct_errors(
    mut builder: crate::operation::update_state_machine_alias::builders::UpdateStateMachineAliasOutputBuilder,
) -> crate::operation::update_state_machine_alias::builders::UpdateStateMachineAliasOutputBuilder {
    if builder.update_date.is_none() {
        builder.update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn map_run_item_counts_correct_errors(
    mut builder: crate::types::builders::MapRunItemCountsBuilder,
) -> crate::types::builders::MapRunItemCountsBuilder {
    if builder.pending.is_none() {
        builder.pending = Some(Default::default())
    }
    if builder.running.is_none() {
        builder.running = Some(Default::default())
    }
    if builder.succeeded.is_none() {
        builder.succeeded = Some(Default::default())
    }
    if builder.failed.is_none() {
        builder.failed = Some(Default::default())
    }
    if builder.timed_out.is_none() {
        builder.timed_out = Some(Default::default())
    }
    if builder.aborted.is_none() {
        builder.aborted = Some(Default::default())
    }
    if builder.total.is_none() {
        builder.total = Some(Default::default())
    }
    if builder.results_written.is_none() {
        builder.results_written = Some(Default::default())
    }
    builder
}

pub(crate) fn map_run_execution_counts_correct_errors(
    mut builder: crate::types::builders::MapRunExecutionCountsBuilder,
) -> crate::types::builders::MapRunExecutionCountsBuilder {
    if builder.pending.is_none() {
        builder.pending = Some(Default::default())
    }
    if builder.running.is_none() {
        builder.running = Some(Default::default())
    }
    if builder.succeeded.is_none() {
        builder.succeeded = Some(Default::default())
    }
    if builder.failed.is_none() {
        builder.failed = Some(Default::default())
    }
    if builder.timed_out.is_none() {
        builder.timed_out = Some(Default::default())
    }
    if builder.aborted.is_none() {
        builder.aborted = Some(Default::default())
    }
    if builder.total.is_none() {
        builder.total = Some(Default::default())
    }
    if builder.results_written.is_none() {
        builder.results_written = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_list_item_correct_errors(
    mut builder: crate::types::builders::ActivityListItemBuilder,
) -> crate::types::builders::ActivityListItemBuilder {
    if builder.activity_arn.is_none() {
        builder.activity_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn execution_list_item_correct_errors(
    mut builder: crate::types::builders::ExecutionListItemBuilder,
) -> crate::types::builders::ExecutionListItemBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn history_event_correct_errors(mut builder: crate::types::builders::HistoryEventBuilder) -> crate::types::builders::HistoryEventBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::HistoryEventType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn map_run_list_item_correct_errors(
    mut builder: crate::types::builders::MapRunListItemBuilder,
) -> crate::types::builders::MapRunListItemBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.map_run_arn.is_none() {
        builder.map_run_arn = Some(Default::default())
    }
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.start_date.is_none() {
        builder.start_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn routing_configuration_list_item_correct_errors(
    mut builder: crate::types::builders::RoutingConfigurationListItemBuilder,
) -> crate::types::builders::RoutingConfigurationListItemBuilder {
    if builder.state_machine_version_arn.is_none() {
        builder.state_machine_version_arn = Some(Default::default())
    }
    if builder.weight.is_none() {
        builder.weight = Some(Default::default())
    }
    builder
}

pub(crate) fn state_machine_alias_list_item_correct_errors(
    mut builder: crate::types::builders::StateMachineAliasListItemBuilder,
) -> crate::types::builders::StateMachineAliasListItemBuilder {
    if builder.state_machine_alias_arn.is_none() {
        builder.state_machine_alias_arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn state_machine_list_item_correct_errors(
    mut builder: crate::types::builders::StateMachineListItemBuilder,
) -> crate::types::builders::StateMachineListItemBuilder {
    if builder.state_machine_arn.is_none() {
        builder.state_machine_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::StateMachineType>().ok()
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn state_machine_version_list_item_correct_errors(
    mut builder: crate::types::builders::StateMachineVersionListItemBuilder,
) -> crate::types::builders::StateMachineVersionListItemBuilder {
    if builder.state_machine_version_arn.is_none() {
        builder.state_machine_version_arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn activity_scheduled_event_details_correct_errors(
    mut builder: crate::types::builders::ActivityScheduledEventDetailsBuilder,
) -> crate::types::builders::ActivityScheduledEventDetailsBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_scheduled_event_details_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionScheduledEventDetailsBuilder,
) -> crate::types::builders::LambdaFunctionScheduledEventDetailsBuilder {
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn state_entered_event_details_correct_errors(
    mut builder: crate::types::builders::StateEnteredEventDetailsBuilder,
) -> crate::types::builders::StateEnteredEventDetailsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn state_exited_event_details_correct_errors(
    mut builder: crate::types::builders::StateExitedEventDetailsBuilder,
) -> crate::types::builders::StateExitedEventDetailsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn task_failed_event_details_correct_errors(
    mut builder: crate::types::builders::TaskFailedEventDetailsBuilder,
) -> crate::types::builders::TaskFailedEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_scheduled_event_details_correct_errors(
    mut builder: crate::types::builders::TaskScheduledEventDetailsBuilder,
) -> crate::types::builders::TaskScheduledEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn task_start_failed_event_details_correct_errors(
    mut builder: crate::types::builders::TaskStartFailedEventDetailsBuilder,
) -> crate::types::builders::TaskStartFailedEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_started_event_details_correct_errors(
    mut builder: crate::types::builders::TaskStartedEventDetailsBuilder,
) -> crate::types::builders::TaskStartedEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_submit_failed_event_details_correct_errors(
    mut builder: crate::types::builders::TaskSubmitFailedEventDetailsBuilder,
) -> crate::types::builders::TaskSubmitFailedEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_submitted_event_details_correct_errors(
    mut builder: crate::types::builders::TaskSubmittedEventDetailsBuilder,
) -> crate::types::builders::TaskSubmittedEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_succeeded_event_details_correct_errors(
    mut builder: crate::types::builders::TaskSucceededEventDetailsBuilder,
) -> crate::types::builders::TaskSucceededEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}

pub(crate) fn task_timed_out_event_details_correct_errors(
    mut builder: crate::types::builders::TaskTimedOutEventDetailsBuilder,
) -> crate::types::builders::TaskTimedOutEventDetailsBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = Some(Default::default())
    }
    builder
}
