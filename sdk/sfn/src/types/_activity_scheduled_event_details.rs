// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about an activity scheduled during an execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ActivityScheduledEventDetails {
    /// <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
    pub resource: ::std::string::String,
    /// <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>Contains details about the input for an execution history event.</p>
    pub input_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
    /// <p>The maximum allowed duration of the activity task.</p>
    pub timeout_in_seconds: ::std::option::Option<i64>,
    /// <p>The maximum allowed duration between two heartbeats for the activity task.</p>
    pub heartbeat_in_seconds: ::std::option::Option<i64>,
}
impl ActivityScheduledEventDetails {
    /// <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
    pub fn resource(&self) -> &str {
        use std::ops::Deref;
        self.resource.deref()
    }
    /// <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn input_details(&self) -> ::std::option::Option<&crate::types::HistoryEventExecutionDataDetails> {
        self.input_details.as_ref()
    }
    /// <p>The maximum allowed duration of the activity task.</p>
    pub fn timeout_in_seconds(&self) -> ::std::option::Option<i64> {
        self.timeout_in_seconds
    }
    /// <p>The maximum allowed duration between two heartbeats for the activity task.</p>
    pub fn heartbeat_in_seconds(&self) -> ::std::option::Option<i64> {
        self.heartbeat_in_seconds
    }
}
impl ::std::fmt::Debug for ActivityScheduledEventDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActivityScheduledEventDetails");
        formatter.field("resource", &self.resource);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("heartbeat_in_seconds", &self.heartbeat_in_seconds);
        formatter.finish()
    }
}
impl ActivityScheduledEventDetails {
    /// Creates a new builder-style object to manufacture [`ActivityScheduledEventDetails`](crate::types::ActivityScheduledEventDetails).
    pub fn builder() -> crate::types::builders::ActivityScheduledEventDetailsBuilder {
        crate::types::builders::ActivityScheduledEventDetailsBuilder::default()
    }
}

/// A builder for [`ActivityScheduledEventDetails`](crate::types::ActivityScheduledEventDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ActivityScheduledEventDetailsBuilder {
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) input_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
    pub(crate) timeout_in_seconds: ::std::option::Option<i64>,
    pub(crate) heartbeat_in_seconds: ::std::option::Option<i64>,
}
impl ActivityScheduledEventDetailsBuilder {
    /// <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
    /// This field is required.
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn input_details(mut self, input: crate::types::HistoryEventExecutionDataDetails) -> Self {
        self.input_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn set_input_details(mut self, input: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>) -> Self {
        self.input_details = input;
        self
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn get_input_details(&self) -> &::std::option::Option<crate::types::HistoryEventExecutionDataDetails> {
        &self.input_details
    }
    /// <p>The maximum allowed duration of the activity task.</p>
    pub fn timeout_in_seconds(mut self, input: i64) -> Self {
        self.timeout_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum allowed duration of the activity task.</p>
    pub fn set_timeout_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The maximum allowed duration of the activity task.</p>
    pub fn get_timeout_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.timeout_in_seconds
    }
    /// <p>The maximum allowed duration between two heartbeats for the activity task.</p>
    pub fn heartbeat_in_seconds(mut self, input: i64) -> Self {
        self.heartbeat_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum allowed duration between two heartbeats for the activity task.</p>
    pub fn set_heartbeat_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.heartbeat_in_seconds = input;
        self
    }
    /// <p>The maximum allowed duration between two heartbeats for the activity task.</p>
    pub fn get_heartbeat_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.heartbeat_in_seconds
    }
    /// Consumes the builder and constructs a [`ActivityScheduledEventDetails`](crate::types::ActivityScheduledEventDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource`](crate::types::builders::ActivityScheduledEventDetailsBuilder::resource)
    pub fn build(self) -> ::std::result::Result<crate::types::ActivityScheduledEventDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActivityScheduledEventDetails {
            resource: self.resource.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource",
                    "resource was not specified but it is required when building ActivityScheduledEventDetails",
                )
            })?,
            input: self.input,
            input_details: self.input_details,
            timeout_in_seconds: self.timeout_in_seconds,
            heartbeat_in_seconds: self.heartbeat_in_seconds,
        })
    }
}
impl ::std::fmt::Debug for ActivityScheduledEventDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActivityScheduledEventDetailsBuilder");
        formatter.field("resource", &self.resource);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("heartbeat_in_seconds", &self.heartbeat_in_seconds);
        formatter.finish()
    }
}
