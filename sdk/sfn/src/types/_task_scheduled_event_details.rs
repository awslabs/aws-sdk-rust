// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a task scheduled during an execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TaskScheduledEventDetails {
    /// <p>The service name of the resource in a task state.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The action of the resource called by a task state.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<std::string::String>,
    /// <p>The region of the scheduled task</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::string::String>,
    /// <p>The maximum allowed duration of the task.</p>
    #[doc(hidden)]
    pub timeout_in_seconds: std::option::Option<i64>,
    /// <p>The maximum allowed duration between two heartbeats for the task.</p>
    #[doc(hidden)]
    pub heartbeat_in_seconds: std::option::Option<i64>,
    /// <p>The credentials that Step Functions uses for the task.</p>
    #[doc(hidden)]
    pub task_credentials: std::option::Option<crate::types::TaskCredentials>,
}
impl TaskScheduledEventDetails {
    /// <p>The service name of the resource in a task state.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn resource(&self) -> std::option::Option<&str> {
        self.resource.as_deref()
    }
    /// <p>The region of the scheduled task</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn parameters(&self) -> std::option::Option<&str> {
        self.parameters.as_deref()
    }
    /// <p>The maximum allowed duration of the task.</p>
    pub fn timeout_in_seconds(&self) -> std::option::Option<i64> {
        self.timeout_in_seconds
    }
    /// <p>The maximum allowed duration between two heartbeats for the task.</p>
    pub fn heartbeat_in_seconds(&self) -> std::option::Option<i64> {
        self.heartbeat_in_seconds
    }
    /// <p>The credentials that Step Functions uses for the task.</p>
    pub fn task_credentials(&self) -> std::option::Option<&crate::types::TaskCredentials> {
        self.task_credentials.as_ref()
    }
}
impl std::fmt::Debug for TaskScheduledEventDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TaskScheduledEventDetails");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource", &self.resource);
        formatter.field("region", &self.region);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("heartbeat_in_seconds", &self.heartbeat_in_seconds);
        formatter.field("task_credentials", &self.task_credentials);
        formatter.finish()
    }
}
impl TaskScheduledEventDetails {
    /// Creates a new builder-style object to manufacture [`TaskScheduledEventDetails`](crate::types::TaskScheduledEventDetails).
    pub fn builder() -> crate::types::builders::TaskScheduledEventDetailsBuilder {
        crate::types::builders::TaskScheduledEventDetailsBuilder::default()
    }
}

/// A builder for [`TaskScheduledEventDetails`](crate::types::TaskScheduledEventDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct TaskScheduledEventDetailsBuilder {
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) resource: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<std::string::String>,
    pub(crate) timeout_in_seconds: std::option::Option<i64>,
    pub(crate) heartbeat_in_seconds: std::option::Option<i64>,
    pub(crate) task_credentials: std::option::Option<crate::types::TaskCredentials>,
}
impl TaskScheduledEventDetailsBuilder {
    /// <p>The service name of the resource in a task state.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The service name of the resource in a task state.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn resource(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource = Some(input.into());
        self
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn set_resource(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The region of the scheduled task</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The region of the scheduled task</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameters = Some(input.into());
        self
    }
    /// <p>The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_parameters(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The maximum allowed duration of the task.</p>
    pub fn timeout_in_seconds(mut self, input: i64) -> Self {
        self.timeout_in_seconds = Some(input);
        self
    }
    /// <p>The maximum allowed duration of the task.</p>
    pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The maximum allowed duration between two heartbeats for the task.</p>
    pub fn heartbeat_in_seconds(mut self, input: i64) -> Self {
        self.heartbeat_in_seconds = Some(input);
        self
    }
    /// <p>The maximum allowed duration between two heartbeats for the task.</p>
    pub fn set_heartbeat_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.heartbeat_in_seconds = input;
        self
    }
    /// <p>The credentials that Step Functions uses for the task.</p>
    pub fn task_credentials(mut self, input: crate::types::TaskCredentials) -> Self {
        self.task_credentials = Some(input);
        self
    }
    /// <p>The credentials that Step Functions uses for the task.</p>
    pub fn set_task_credentials(
        mut self,
        input: std::option::Option<crate::types::TaskCredentials>,
    ) -> Self {
        self.task_credentials = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskScheduledEventDetails`](crate::types::TaskScheduledEventDetails).
    pub fn build(self) -> crate::types::TaskScheduledEventDetails {
        crate::types::TaskScheduledEventDetails {
            resource_type: self.resource_type,
            resource: self.resource,
            region: self.region,
            parameters: self.parameters,
            timeout_in_seconds: self.timeout_in_seconds,
            heartbeat_in_seconds: self.heartbeat_in_seconds,
            task_credentials: self.task_credentials,
        }
    }
}
impl std::fmt::Debug for TaskScheduledEventDetailsBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TaskScheduledEventDetailsBuilder");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource", &self.resource);
        formatter.field("region", &self.region);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("timeout_in_seconds", &self.timeout_in_seconds);
        formatter.field("heartbeat_in_seconds", &self.heartbeat_in_seconds);
        formatter.field("task_credentials", &self.task_credentials);
        formatter.finish()
    }
}
