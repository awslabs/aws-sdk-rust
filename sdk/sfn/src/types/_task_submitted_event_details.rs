// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a task submitted to a resource .</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TaskSubmittedEventDetails {
    /// <p>The service name of the resource in a task state.</p>
    pub resource_type: ::std::string::String,
    /// <p>The action of the resource called by a task state.</p>
    pub resource: ::std::string::String,
    /// <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub output: ::std::option::Option<::std::string::String>,
    /// <p>Contains details about the output of an execution history event.</p>
    pub output_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
}
impl TaskSubmittedEventDetails {
    /// <p>The service name of the resource in a task state.</p>
    pub fn resource_type(&self) -> &str {
        use std::ops::Deref;
        self.resource_type.deref()
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn resource(&self) -> &str {
        use std::ops::Deref;
        self.resource.deref()
    }
    /// <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn output(&self) -> ::std::option::Option<&str> {
        self.output.as_deref()
    }
    /// <p>Contains details about the output of an execution history event.</p>
    pub fn output_details(&self) -> ::std::option::Option<&crate::types::HistoryEventExecutionDataDetails> {
        self.output_details.as_ref()
    }
}
impl ::std::fmt::Debug for TaskSubmittedEventDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSubmittedEventDetails");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource", &self.resource);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("output_details", &self.output_details);
        formatter.finish()
    }
}
impl TaskSubmittedEventDetails {
    /// Creates a new builder-style object to manufacture [`TaskSubmittedEventDetails`](crate::types::TaskSubmittedEventDetails).
    pub fn builder() -> crate::types::builders::TaskSubmittedEventDetailsBuilder {
        crate::types::builders::TaskSubmittedEventDetailsBuilder::default()
    }
}

/// A builder for [`TaskSubmittedEventDetails`](crate::types::TaskSubmittedEventDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TaskSubmittedEventDetailsBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) output: ::std::option::Option<::std::string::String>,
    pub(crate) output_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
}
impl TaskSubmittedEventDetailsBuilder {
    /// <p>The service name of the resource in a task state.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name of the resource in a task state.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The service name of the resource in a task state.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The action of the resource called by a task state.</p>
    /// This field is required.
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The action of the resource called by a task state.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output = input;
        self
    }
    /// <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.output
    }
    /// <p>Contains details about the output of an execution history event.</p>
    pub fn output_details(mut self, input: crate::types::HistoryEventExecutionDataDetails) -> Self {
        self.output_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the output of an execution history event.</p>
    pub fn set_output_details(mut self, input: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>) -> Self {
        self.output_details = input;
        self
    }
    /// <p>Contains details about the output of an execution history event.</p>
    pub fn get_output_details(&self) -> &::std::option::Option<crate::types::HistoryEventExecutionDataDetails> {
        &self.output_details
    }
    /// Consumes the builder and constructs a [`TaskSubmittedEventDetails`](crate::types::TaskSubmittedEventDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_type`](crate::types::builders::TaskSubmittedEventDetailsBuilder::resource_type)
    /// - [`resource`](crate::types::builders::TaskSubmittedEventDetailsBuilder::resource)
    pub fn build(self) -> ::std::result::Result<crate::types::TaskSubmittedEventDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaskSubmittedEventDetails {
            resource_type: self.resource_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_type",
                    "resource_type was not specified but it is required when building TaskSubmittedEventDetails",
                )
            })?,
            resource: self.resource.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource",
                    "resource was not specified but it is required when building TaskSubmittedEventDetails",
                )
            })?,
            output: self.output,
            output_details: self.output_details,
        })
    }
}
impl ::std::fmt::Debug for TaskSubmittedEventDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaskSubmittedEventDetailsBuilder");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource", &self.resource);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("output_details", &self.output_details);
        formatter.finish()
    }
}
