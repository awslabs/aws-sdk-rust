// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a state entered during an execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StateEnteredEventDetails {
    /// <p>The name of the state.</p>
    pub name: ::std::string::String,
    /// <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>Contains details about the input for an execution history event.</p>
    pub input_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
}
impl StateEnteredEventDetails {
    /// <p>The name of the state.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn input_details(&self) -> ::std::option::Option<&crate::types::HistoryEventExecutionDataDetails> {
        self.input_details.as_ref()
    }
}
impl ::std::fmt::Debug for StateEnteredEventDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StateEnteredEventDetails");
        formatter.field("name", &self.name);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.finish()
    }
}
impl StateEnteredEventDetails {
    /// Creates a new builder-style object to manufacture [`StateEnteredEventDetails`](crate::types::StateEnteredEventDetails).
    pub fn builder() -> crate::types::builders::StateEnteredEventDetailsBuilder {
        crate::types::builders::StateEnteredEventDetailsBuilder::default()
    }
}

/// A builder for [`StateEnteredEventDetails`](crate::types::StateEnteredEventDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StateEnteredEventDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) input_details: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>,
}
impl StateEnteredEventDetailsBuilder {
    /// <p>The name of the state.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the state.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the state.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn input_details(mut self, input: crate::types::HistoryEventExecutionDataDetails) -> Self {
        self.input_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn set_input_details(mut self, input: ::std::option::Option<crate::types::HistoryEventExecutionDataDetails>) -> Self {
        self.input_details = input;
        self
    }
    /// <p>Contains details about the input for an execution history event.</p>
    pub fn get_input_details(&self) -> &::std::option::Option<crate::types::HistoryEventExecutionDataDetails> {
        &self.input_details
    }
    /// Consumes the builder and constructs a [`StateEnteredEventDetails`](crate::types::StateEnteredEventDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::StateEnteredEventDetailsBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::StateEnteredEventDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StateEnteredEventDetails {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StateEnteredEventDetails",
                )
            })?,
            input: self.input,
            input_details: self.input_details,
        })
    }
}
impl ::std::fmt::Debug for StateEnteredEventDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StateEnteredEventDetailsBuilder");
        formatter.field("name", &self.name);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.finish()
    }
}
