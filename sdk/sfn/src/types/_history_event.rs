// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the events of an execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HistoryEvent {
    /// <p>The date and time the event occurred.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The type of the event.</p>
    pub r#type: crate::types::HistoryEventType,
    /// <p>The id of the event. Events are numbered sequentially, starting at one.</p>
    pub id: i64,
    /// <p>The id of the previous event.</p>
    pub previous_event_id: i64,
    /// <p>Contains details about an activity that failed during an execution.</p>
    pub activity_failed_event_details: ::std::option::Option<crate::types::ActivityFailedEventDetails>,
    /// <p>Contains details about an activity schedule event that failed during an execution.</p>
    pub activity_schedule_failed_event_details: ::std::option::Option<crate::types::ActivityScheduleFailedEventDetails>,
    /// <p>Contains details about an activity scheduled during an execution.</p>
    pub activity_scheduled_event_details: ::std::option::Option<crate::types::ActivityScheduledEventDetails>,
    /// <p>Contains details about the start of an activity during an execution.</p>
    pub activity_started_event_details: ::std::option::Option<crate::types::ActivityStartedEventDetails>,
    /// <p>Contains details about an activity that successfully terminated during an execution.</p>
    pub activity_succeeded_event_details: ::std::option::Option<crate::types::ActivitySucceededEventDetails>,
    /// <p>Contains details about an activity timeout that occurred during an execution.</p>
    pub activity_timed_out_event_details: ::std::option::Option<crate::types::ActivityTimedOutEventDetails>,
    /// <p>Contains details about the failure of a task.</p>
    pub task_failed_event_details: ::std::option::Option<crate::types::TaskFailedEventDetails>,
    /// <p>Contains details about a task that was scheduled.</p>
    pub task_scheduled_event_details: ::std::option::Option<crate::types::TaskScheduledEventDetails>,
    /// <p>Contains details about a task that failed to start.</p>
    pub task_start_failed_event_details: ::std::option::Option<crate::types::TaskStartFailedEventDetails>,
    /// <p>Contains details about a task that was started.</p>
    pub task_started_event_details: ::std::option::Option<crate::types::TaskStartedEventDetails>,
    /// <p>Contains details about a task that where the submit failed.</p>
    pub task_submit_failed_event_details: ::std::option::Option<crate::types::TaskSubmitFailedEventDetails>,
    /// <p>Contains details about a submitted task.</p>
    pub task_submitted_event_details: ::std::option::Option<crate::types::TaskSubmittedEventDetails>,
    /// <p>Contains details about a task that succeeded.</p>
    pub task_succeeded_event_details: ::std::option::Option<crate::types::TaskSucceededEventDetails>,
    /// <p>Contains details about a task that timed out.</p>
    pub task_timed_out_event_details: ::std::option::Option<crate::types::TaskTimedOutEventDetails>,
    /// <p>Contains details about an execution failure event.</p>
    pub execution_failed_event_details: ::std::option::Option<crate::types::ExecutionFailedEventDetails>,
    /// <p>Contains details about the start of the execution.</p>
    pub execution_started_event_details: ::std::option::Option<crate::types::ExecutionStartedEventDetails>,
    /// <p>Contains details about the successful termination of the execution.</p>
    pub execution_succeeded_event_details: ::std::option::Option<crate::types::ExecutionSucceededEventDetails>,
    /// <p>Contains details about an abort of an execution.</p>
    pub execution_aborted_event_details: ::std::option::Option<crate::types::ExecutionAbortedEventDetails>,
    /// <p>Contains details about the execution timeout that occurred during the execution.</p>
    pub execution_timed_out_event_details: ::std::option::Option<crate::types::ExecutionTimedOutEventDetails>,
    /// <p>Contains details about Map state that was started.</p>
    pub map_state_started_event_details: ::std::option::Option<crate::types::MapStateStartedEventDetails>,
    /// <p>Contains details about an iteration of a Map state that was started.</p>
    pub map_iteration_started_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    /// <p>Contains details about an iteration of a Map state that succeeded.</p>
    pub map_iteration_succeeded_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    /// <p>Contains details about an iteration of a Map state that failed.</p>
    pub map_iteration_failed_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    /// <p>Contains details about an iteration of a Map state that was aborted.</p>
    pub map_iteration_aborted_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    /// <p>Contains details about a Lambda function that failed during an execution.</p>
    pub lambda_function_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionFailedEventDetails>,
    /// <p>Contains details about a failed Lambda function schedule event that occurred during an execution.</p>
    pub lambda_function_schedule_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionScheduleFailedEventDetails>,
    /// <p>Contains details about a Lambda function scheduled during an execution.</p>
    pub lambda_function_scheduled_event_details: ::std::option::Option<crate::types::LambdaFunctionScheduledEventDetails>,
    /// <p>Contains details about a lambda function that failed to start during an execution.</p>
    pub lambda_function_start_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionStartFailedEventDetails>,
    /// <p>Contains details about a Lambda function that terminated successfully during an execution.</p>
    pub lambda_function_succeeded_event_details: ::std::option::Option<crate::types::LambdaFunctionSucceededEventDetails>,
    /// <p>Contains details about a Lambda function timeout that occurred during an execution.</p>
    pub lambda_function_timed_out_event_details: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventDetails>,
    /// <p>Contains details about a state entered during an execution.</p>
    pub state_entered_event_details: ::std::option::Option<crate::types::StateEnteredEventDetails>,
    /// <p>Contains details about an exit from a state during an execution.</p>
    pub state_exited_event_details: ::std::option::Option<crate::types::StateExitedEventDetails>,
    /// <p>Contains details, such as <code>mapRunArn</code>, and the start date and time of a Map Run. <code>mapRunArn</code> is the Amazon Resource Name (ARN) of the Map Run that was started.</p>
    pub map_run_started_event_details: ::std::option::Option<crate::types::MapRunStartedEventDetails>,
    /// <p>Contains error and cause details about a Map Run that failed.</p>
    pub map_run_failed_event_details: ::std::option::Option<crate::types::MapRunFailedEventDetails>,
}
impl HistoryEvent {
    /// <p>The date and time the event occurred.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The type of the event.</p>
    pub fn r#type(&self) -> &crate::types::HistoryEventType {
        &self.r#type
    }
    /// <p>The id of the event. Events are numbered sequentially, starting at one.</p>
    pub fn id(&self) -> i64 {
        self.id
    }
    /// <p>The id of the previous event.</p>
    pub fn previous_event_id(&self) -> i64 {
        self.previous_event_id
    }
    /// <p>Contains details about an activity that failed during an execution.</p>
    pub fn activity_failed_event_details(&self) -> ::std::option::Option<&crate::types::ActivityFailedEventDetails> {
        self.activity_failed_event_details.as_ref()
    }
    /// <p>Contains details about an activity schedule event that failed during an execution.</p>
    pub fn activity_schedule_failed_event_details(&self) -> ::std::option::Option<&crate::types::ActivityScheduleFailedEventDetails> {
        self.activity_schedule_failed_event_details.as_ref()
    }
    /// <p>Contains details about an activity scheduled during an execution.</p>
    pub fn activity_scheduled_event_details(&self) -> ::std::option::Option<&crate::types::ActivityScheduledEventDetails> {
        self.activity_scheduled_event_details.as_ref()
    }
    /// <p>Contains details about the start of an activity during an execution.</p>
    pub fn activity_started_event_details(&self) -> ::std::option::Option<&crate::types::ActivityStartedEventDetails> {
        self.activity_started_event_details.as_ref()
    }
    /// <p>Contains details about an activity that successfully terminated during an execution.</p>
    pub fn activity_succeeded_event_details(&self) -> ::std::option::Option<&crate::types::ActivitySucceededEventDetails> {
        self.activity_succeeded_event_details.as_ref()
    }
    /// <p>Contains details about an activity timeout that occurred during an execution.</p>
    pub fn activity_timed_out_event_details(&self) -> ::std::option::Option<&crate::types::ActivityTimedOutEventDetails> {
        self.activity_timed_out_event_details.as_ref()
    }
    /// <p>Contains details about the failure of a task.</p>
    pub fn task_failed_event_details(&self) -> ::std::option::Option<&crate::types::TaskFailedEventDetails> {
        self.task_failed_event_details.as_ref()
    }
    /// <p>Contains details about a task that was scheduled.</p>
    pub fn task_scheduled_event_details(&self) -> ::std::option::Option<&crate::types::TaskScheduledEventDetails> {
        self.task_scheduled_event_details.as_ref()
    }
    /// <p>Contains details about a task that failed to start.</p>
    pub fn task_start_failed_event_details(&self) -> ::std::option::Option<&crate::types::TaskStartFailedEventDetails> {
        self.task_start_failed_event_details.as_ref()
    }
    /// <p>Contains details about a task that was started.</p>
    pub fn task_started_event_details(&self) -> ::std::option::Option<&crate::types::TaskStartedEventDetails> {
        self.task_started_event_details.as_ref()
    }
    /// <p>Contains details about a task that where the submit failed.</p>
    pub fn task_submit_failed_event_details(&self) -> ::std::option::Option<&crate::types::TaskSubmitFailedEventDetails> {
        self.task_submit_failed_event_details.as_ref()
    }
    /// <p>Contains details about a submitted task.</p>
    pub fn task_submitted_event_details(&self) -> ::std::option::Option<&crate::types::TaskSubmittedEventDetails> {
        self.task_submitted_event_details.as_ref()
    }
    /// <p>Contains details about a task that succeeded.</p>
    pub fn task_succeeded_event_details(&self) -> ::std::option::Option<&crate::types::TaskSucceededEventDetails> {
        self.task_succeeded_event_details.as_ref()
    }
    /// <p>Contains details about a task that timed out.</p>
    pub fn task_timed_out_event_details(&self) -> ::std::option::Option<&crate::types::TaskTimedOutEventDetails> {
        self.task_timed_out_event_details.as_ref()
    }
    /// <p>Contains details about an execution failure event.</p>
    pub fn execution_failed_event_details(&self) -> ::std::option::Option<&crate::types::ExecutionFailedEventDetails> {
        self.execution_failed_event_details.as_ref()
    }
    /// <p>Contains details about the start of the execution.</p>
    pub fn execution_started_event_details(&self) -> ::std::option::Option<&crate::types::ExecutionStartedEventDetails> {
        self.execution_started_event_details.as_ref()
    }
    /// <p>Contains details about the successful termination of the execution.</p>
    pub fn execution_succeeded_event_details(&self) -> ::std::option::Option<&crate::types::ExecutionSucceededEventDetails> {
        self.execution_succeeded_event_details.as_ref()
    }
    /// <p>Contains details about an abort of an execution.</p>
    pub fn execution_aborted_event_details(&self) -> ::std::option::Option<&crate::types::ExecutionAbortedEventDetails> {
        self.execution_aborted_event_details.as_ref()
    }
    /// <p>Contains details about the execution timeout that occurred during the execution.</p>
    pub fn execution_timed_out_event_details(&self) -> ::std::option::Option<&crate::types::ExecutionTimedOutEventDetails> {
        self.execution_timed_out_event_details.as_ref()
    }
    /// <p>Contains details about Map state that was started.</p>
    pub fn map_state_started_event_details(&self) -> ::std::option::Option<&crate::types::MapStateStartedEventDetails> {
        self.map_state_started_event_details.as_ref()
    }
    /// <p>Contains details about an iteration of a Map state that was started.</p>
    pub fn map_iteration_started_event_details(&self) -> ::std::option::Option<&crate::types::MapIterationEventDetails> {
        self.map_iteration_started_event_details.as_ref()
    }
    /// <p>Contains details about an iteration of a Map state that succeeded.</p>
    pub fn map_iteration_succeeded_event_details(&self) -> ::std::option::Option<&crate::types::MapIterationEventDetails> {
        self.map_iteration_succeeded_event_details.as_ref()
    }
    /// <p>Contains details about an iteration of a Map state that failed.</p>
    pub fn map_iteration_failed_event_details(&self) -> ::std::option::Option<&crate::types::MapIterationEventDetails> {
        self.map_iteration_failed_event_details.as_ref()
    }
    /// <p>Contains details about an iteration of a Map state that was aborted.</p>
    pub fn map_iteration_aborted_event_details(&self) -> ::std::option::Option<&crate::types::MapIterationEventDetails> {
        self.map_iteration_aborted_event_details.as_ref()
    }
    /// <p>Contains details about a Lambda function that failed during an execution.</p>
    pub fn lambda_function_failed_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionFailedEventDetails> {
        self.lambda_function_failed_event_details.as_ref()
    }
    /// <p>Contains details about a failed Lambda function schedule event that occurred during an execution.</p>
    pub fn lambda_function_schedule_failed_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionScheduleFailedEventDetails> {
        self.lambda_function_schedule_failed_event_details.as_ref()
    }
    /// <p>Contains details about a Lambda function scheduled during an execution.</p>
    pub fn lambda_function_scheduled_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionScheduledEventDetails> {
        self.lambda_function_scheduled_event_details.as_ref()
    }
    /// <p>Contains details about a lambda function that failed to start during an execution.</p>
    pub fn lambda_function_start_failed_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionStartFailedEventDetails> {
        self.lambda_function_start_failed_event_details.as_ref()
    }
    /// <p>Contains details about a Lambda function that terminated successfully during an execution.</p>
    pub fn lambda_function_succeeded_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionSucceededEventDetails> {
        self.lambda_function_succeeded_event_details.as_ref()
    }
    /// <p>Contains details about a Lambda function timeout that occurred during an execution.</p>
    pub fn lambda_function_timed_out_event_details(&self) -> ::std::option::Option<&crate::types::LambdaFunctionTimedOutEventDetails> {
        self.lambda_function_timed_out_event_details.as_ref()
    }
    /// <p>Contains details about a state entered during an execution.</p>
    pub fn state_entered_event_details(&self) -> ::std::option::Option<&crate::types::StateEnteredEventDetails> {
        self.state_entered_event_details.as_ref()
    }
    /// <p>Contains details about an exit from a state during an execution.</p>
    pub fn state_exited_event_details(&self) -> ::std::option::Option<&crate::types::StateExitedEventDetails> {
        self.state_exited_event_details.as_ref()
    }
    /// <p>Contains details, such as <code>mapRunArn</code>, and the start date and time of a Map Run. <code>mapRunArn</code> is the Amazon Resource Name (ARN) of the Map Run that was started.</p>
    pub fn map_run_started_event_details(&self) -> ::std::option::Option<&crate::types::MapRunStartedEventDetails> {
        self.map_run_started_event_details.as_ref()
    }
    /// <p>Contains error and cause details about a Map Run that failed.</p>
    pub fn map_run_failed_event_details(&self) -> ::std::option::Option<&crate::types::MapRunFailedEventDetails> {
        self.map_run_failed_event_details.as_ref()
    }
}
impl HistoryEvent {
    /// Creates a new builder-style object to manufacture [`HistoryEvent`](crate::types::HistoryEvent).
    pub fn builder() -> crate::types::builders::HistoryEventBuilder {
        crate::types::builders::HistoryEventBuilder::default()
    }
}

/// A builder for [`HistoryEvent`](crate::types::HistoryEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HistoryEventBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::HistoryEventType>,
    pub(crate) id: ::std::option::Option<i64>,
    pub(crate) previous_event_id: ::std::option::Option<i64>,
    pub(crate) activity_failed_event_details: ::std::option::Option<crate::types::ActivityFailedEventDetails>,
    pub(crate) activity_schedule_failed_event_details: ::std::option::Option<crate::types::ActivityScheduleFailedEventDetails>,
    pub(crate) activity_scheduled_event_details: ::std::option::Option<crate::types::ActivityScheduledEventDetails>,
    pub(crate) activity_started_event_details: ::std::option::Option<crate::types::ActivityStartedEventDetails>,
    pub(crate) activity_succeeded_event_details: ::std::option::Option<crate::types::ActivitySucceededEventDetails>,
    pub(crate) activity_timed_out_event_details: ::std::option::Option<crate::types::ActivityTimedOutEventDetails>,
    pub(crate) task_failed_event_details: ::std::option::Option<crate::types::TaskFailedEventDetails>,
    pub(crate) task_scheduled_event_details: ::std::option::Option<crate::types::TaskScheduledEventDetails>,
    pub(crate) task_start_failed_event_details: ::std::option::Option<crate::types::TaskStartFailedEventDetails>,
    pub(crate) task_started_event_details: ::std::option::Option<crate::types::TaskStartedEventDetails>,
    pub(crate) task_submit_failed_event_details: ::std::option::Option<crate::types::TaskSubmitFailedEventDetails>,
    pub(crate) task_submitted_event_details: ::std::option::Option<crate::types::TaskSubmittedEventDetails>,
    pub(crate) task_succeeded_event_details: ::std::option::Option<crate::types::TaskSucceededEventDetails>,
    pub(crate) task_timed_out_event_details: ::std::option::Option<crate::types::TaskTimedOutEventDetails>,
    pub(crate) execution_failed_event_details: ::std::option::Option<crate::types::ExecutionFailedEventDetails>,
    pub(crate) execution_started_event_details: ::std::option::Option<crate::types::ExecutionStartedEventDetails>,
    pub(crate) execution_succeeded_event_details: ::std::option::Option<crate::types::ExecutionSucceededEventDetails>,
    pub(crate) execution_aborted_event_details: ::std::option::Option<crate::types::ExecutionAbortedEventDetails>,
    pub(crate) execution_timed_out_event_details: ::std::option::Option<crate::types::ExecutionTimedOutEventDetails>,
    pub(crate) map_state_started_event_details: ::std::option::Option<crate::types::MapStateStartedEventDetails>,
    pub(crate) map_iteration_started_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    pub(crate) map_iteration_succeeded_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    pub(crate) map_iteration_failed_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    pub(crate) map_iteration_aborted_event_details: ::std::option::Option<crate::types::MapIterationEventDetails>,
    pub(crate) lambda_function_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionFailedEventDetails>,
    pub(crate) lambda_function_schedule_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionScheduleFailedEventDetails>,
    pub(crate) lambda_function_scheduled_event_details: ::std::option::Option<crate::types::LambdaFunctionScheduledEventDetails>,
    pub(crate) lambda_function_start_failed_event_details: ::std::option::Option<crate::types::LambdaFunctionStartFailedEventDetails>,
    pub(crate) lambda_function_succeeded_event_details: ::std::option::Option<crate::types::LambdaFunctionSucceededEventDetails>,
    pub(crate) lambda_function_timed_out_event_details: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventDetails>,
    pub(crate) state_entered_event_details: ::std::option::Option<crate::types::StateEnteredEventDetails>,
    pub(crate) state_exited_event_details: ::std::option::Option<crate::types::StateExitedEventDetails>,
    pub(crate) map_run_started_event_details: ::std::option::Option<crate::types::MapRunStartedEventDetails>,
    pub(crate) map_run_failed_event_details: ::std::option::Option<crate::types::MapRunFailedEventDetails>,
}
impl HistoryEventBuilder {
    /// <p>The date and time the event occurred.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the event occurred.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time the event occurred.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The type of the event.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::HistoryEventType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the event.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::HistoryEventType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the event.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::HistoryEventType> {
        &self.r#type
    }
    /// <p>The id of the event. Events are numbered sequentially, starting at one.</p>
    /// This field is required.
    pub fn id(mut self, input: i64) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The id of the event. Events are numbered sequentially, starting at one.</p>
    pub fn set_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the event. Events are numbered sequentially, starting at one.</p>
    pub fn get_id(&self) -> &::std::option::Option<i64> {
        &self.id
    }
    /// <p>The id of the previous event.</p>
    pub fn previous_event_id(mut self, input: i64) -> Self {
        self.previous_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The id of the previous event.</p>
    pub fn set_previous_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.previous_event_id = input;
        self
    }
    /// <p>The id of the previous event.</p>
    pub fn get_previous_event_id(&self) -> &::std::option::Option<i64> {
        &self.previous_event_id
    }
    /// <p>Contains details about an activity that failed during an execution.</p>
    pub fn activity_failed_event_details(mut self, input: crate::types::ActivityFailedEventDetails) -> Self {
        self.activity_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an activity that failed during an execution.</p>
    pub fn set_activity_failed_event_details(mut self, input: ::std::option::Option<crate::types::ActivityFailedEventDetails>) -> Self {
        self.activity_failed_event_details = input;
        self
    }
    /// <p>Contains details about an activity that failed during an execution.</p>
    pub fn get_activity_failed_event_details(&self) -> &::std::option::Option<crate::types::ActivityFailedEventDetails> {
        &self.activity_failed_event_details
    }
    /// <p>Contains details about an activity schedule event that failed during an execution.</p>
    pub fn activity_schedule_failed_event_details(mut self, input: crate::types::ActivityScheduleFailedEventDetails) -> Self {
        self.activity_schedule_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an activity schedule event that failed during an execution.</p>
    pub fn set_activity_schedule_failed_event_details(
        mut self,
        input: ::std::option::Option<crate::types::ActivityScheduleFailedEventDetails>,
    ) -> Self {
        self.activity_schedule_failed_event_details = input;
        self
    }
    /// <p>Contains details about an activity schedule event that failed during an execution.</p>
    pub fn get_activity_schedule_failed_event_details(&self) -> &::std::option::Option<crate::types::ActivityScheduleFailedEventDetails> {
        &self.activity_schedule_failed_event_details
    }
    /// <p>Contains details about an activity scheduled during an execution.</p>
    pub fn activity_scheduled_event_details(mut self, input: crate::types::ActivityScheduledEventDetails) -> Self {
        self.activity_scheduled_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an activity scheduled during an execution.</p>
    pub fn set_activity_scheduled_event_details(mut self, input: ::std::option::Option<crate::types::ActivityScheduledEventDetails>) -> Self {
        self.activity_scheduled_event_details = input;
        self
    }
    /// <p>Contains details about an activity scheduled during an execution.</p>
    pub fn get_activity_scheduled_event_details(&self) -> &::std::option::Option<crate::types::ActivityScheduledEventDetails> {
        &self.activity_scheduled_event_details
    }
    /// <p>Contains details about the start of an activity during an execution.</p>
    pub fn activity_started_event_details(mut self, input: crate::types::ActivityStartedEventDetails) -> Self {
        self.activity_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the start of an activity during an execution.</p>
    pub fn set_activity_started_event_details(mut self, input: ::std::option::Option<crate::types::ActivityStartedEventDetails>) -> Self {
        self.activity_started_event_details = input;
        self
    }
    /// <p>Contains details about the start of an activity during an execution.</p>
    pub fn get_activity_started_event_details(&self) -> &::std::option::Option<crate::types::ActivityStartedEventDetails> {
        &self.activity_started_event_details
    }
    /// <p>Contains details about an activity that successfully terminated during an execution.</p>
    pub fn activity_succeeded_event_details(mut self, input: crate::types::ActivitySucceededEventDetails) -> Self {
        self.activity_succeeded_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an activity that successfully terminated during an execution.</p>
    pub fn set_activity_succeeded_event_details(mut self, input: ::std::option::Option<crate::types::ActivitySucceededEventDetails>) -> Self {
        self.activity_succeeded_event_details = input;
        self
    }
    /// <p>Contains details about an activity that successfully terminated during an execution.</p>
    pub fn get_activity_succeeded_event_details(&self) -> &::std::option::Option<crate::types::ActivitySucceededEventDetails> {
        &self.activity_succeeded_event_details
    }
    /// <p>Contains details about an activity timeout that occurred during an execution.</p>
    pub fn activity_timed_out_event_details(mut self, input: crate::types::ActivityTimedOutEventDetails) -> Self {
        self.activity_timed_out_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an activity timeout that occurred during an execution.</p>
    pub fn set_activity_timed_out_event_details(mut self, input: ::std::option::Option<crate::types::ActivityTimedOutEventDetails>) -> Self {
        self.activity_timed_out_event_details = input;
        self
    }
    /// <p>Contains details about an activity timeout that occurred during an execution.</p>
    pub fn get_activity_timed_out_event_details(&self) -> &::std::option::Option<crate::types::ActivityTimedOutEventDetails> {
        &self.activity_timed_out_event_details
    }
    /// <p>Contains details about the failure of a task.</p>
    pub fn task_failed_event_details(mut self, input: crate::types::TaskFailedEventDetails) -> Self {
        self.task_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the failure of a task.</p>
    pub fn set_task_failed_event_details(mut self, input: ::std::option::Option<crate::types::TaskFailedEventDetails>) -> Self {
        self.task_failed_event_details = input;
        self
    }
    /// <p>Contains details about the failure of a task.</p>
    pub fn get_task_failed_event_details(&self) -> &::std::option::Option<crate::types::TaskFailedEventDetails> {
        &self.task_failed_event_details
    }
    /// <p>Contains details about a task that was scheduled.</p>
    pub fn task_scheduled_event_details(mut self, input: crate::types::TaskScheduledEventDetails) -> Self {
        self.task_scheduled_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that was scheduled.</p>
    pub fn set_task_scheduled_event_details(mut self, input: ::std::option::Option<crate::types::TaskScheduledEventDetails>) -> Self {
        self.task_scheduled_event_details = input;
        self
    }
    /// <p>Contains details about a task that was scheduled.</p>
    pub fn get_task_scheduled_event_details(&self) -> &::std::option::Option<crate::types::TaskScheduledEventDetails> {
        &self.task_scheduled_event_details
    }
    /// <p>Contains details about a task that failed to start.</p>
    pub fn task_start_failed_event_details(mut self, input: crate::types::TaskStartFailedEventDetails) -> Self {
        self.task_start_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that failed to start.</p>
    pub fn set_task_start_failed_event_details(mut self, input: ::std::option::Option<crate::types::TaskStartFailedEventDetails>) -> Self {
        self.task_start_failed_event_details = input;
        self
    }
    /// <p>Contains details about a task that failed to start.</p>
    pub fn get_task_start_failed_event_details(&self) -> &::std::option::Option<crate::types::TaskStartFailedEventDetails> {
        &self.task_start_failed_event_details
    }
    /// <p>Contains details about a task that was started.</p>
    pub fn task_started_event_details(mut self, input: crate::types::TaskStartedEventDetails) -> Self {
        self.task_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that was started.</p>
    pub fn set_task_started_event_details(mut self, input: ::std::option::Option<crate::types::TaskStartedEventDetails>) -> Self {
        self.task_started_event_details = input;
        self
    }
    /// <p>Contains details about a task that was started.</p>
    pub fn get_task_started_event_details(&self) -> &::std::option::Option<crate::types::TaskStartedEventDetails> {
        &self.task_started_event_details
    }
    /// <p>Contains details about a task that where the submit failed.</p>
    pub fn task_submit_failed_event_details(mut self, input: crate::types::TaskSubmitFailedEventDetails) -> Self {
        self.task_submit_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that where the submit failed.</p>
    pub fn set_task_submit_failed_event_details(mut self, input: ::std::option::Option<crate::types::TaskSubmitFailedEventDetails>) -> Self {
        self.task_submit_failed_event_details = input;
        self
    }
    /// <p>Contains details about a task that where the submit failed.</p>
    pub fn get_task_submit_failed_event_details(&self) -> &::std::option::Option<crate::types::TaskSubmitFailedEventDetails> {
        &self.task_submit_failed_event_details
    }
    /// <p>Contains details about a submitted task.</p>
    pub fn task_submitted_event_details(mut self, input: crate::types::TaskSubmittedEventDetails) -> Self {
        self.task_submitted_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a submitted task.</p>
    pub fn set_task_submitted_event_details(mut self, input: ::std::option::Option<crate::types::TaskSubmittedEventDetails>) -> Self {
        self.task_submitted_event_details = input;
        self
    }
    /// <p>Contains details about a submitted task.</p>
    pub fn get_task_submitted_event_details(&self) -> &::std::option::Option<crate::types::TaskSubmittedEventDetails> {
        &self.task_submitted_event_details
    }
    /// <p>Contains details about a task that succeeded.</p>
    pub fn task_succeeded_event_details(mut self, input: crate::types::TaskSucceededEventDetails) -> Self {
        self.task_succeeded_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that succeeded.</p>
    pub fn set_task_succeeded_event_details(mut self, input: ::std::option::Option<crate::types::TaskSucceededEventDetails>) -> Self {
        self.task_succeeded_event_details = input;
        self
    }
    /// <p>Contains details about a task that succeeded.</p>
    pub fn get_task_succeeded_event_details(&self) -> &::std::option::Option<crate::types::TaskSucceededEventDetails> {
        &self.task_succeeded_event_details
    }
    /// <p>Contains details about a task that timed out.</p>
    pub fn task_timed_out_event_details(mut self, input: crate::types::TaskTimedOutEventDetails) -> Self {
        self.task_timed_out_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a task that timed out.</p>
    pub fn set_task_timed_out_event_details(mut self, input: ::std::option::Option<crate::types::TaskTimedOutEventDetails>) -> Self {
        self.task_timed_out_event_details = input;
        self
    }
    /// <p>Contains details about a task that timed out.</p>
    pub fn get_task_timed_out_event_details(&self) -> &::std::option::Option<crate::types::TaskTimedOutEventDetails> {
        &self.task_timed_out_event_details
    }
    /// <p>Contains details about an execution failure event.</p>
    pub fn execution_failed_event_details(mut self, input: crate::types::ExecutionFailedEventDetails) -> Self {
        self.execution_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an execution failure event.</p>
    pub fn set_execution_failed_event_details(mut self, input: ::std::option::Option<crate::types::ExecutionFailedEventDetails>) -> Self {
        self.execution_failed_event_details = input;
        self
    }
    /// <p>Contains details about an execution failure event.</p>
    pub fn get_execution_failed_event_details(&self) -> &::std::option::Option<crate::types::ExecutionFailedEventDetails> {
        &self.execution_failed_event_details
    }
    /// <p>Contains details about the start of the execution.</p>
    pub fn execution_started_event_details(mut self, input: crate::types::ExecutionStartedEventDetails) -> Self {
        self.execution_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the start of the execution.</p>
    pub fn set_execution_started_event_details(mut self, input: ::std::option::Option<crate::types::ExecutionStartedEventDetails>) -> Self {
        self.execution_started_event_details = input;
        self
    }
    /// <p>Contains details about the start of the execution.</p>
    pub fn get_execution_started_event_details(&self) -> &::std::option::Option<crate::types::ExecutionStartedEventDetails> {
        &self.execution_started_event_details
    }
    /// <p>Contains details about the successful termination of the execution.</p>
    pub fn execution_succeeded_event_details(mut self, input: crate::types::ExecutionSucceededEventDetails) -> Self {
        self.execution_succeeded_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the successful termination of the execution.</p>
    pub fn set_execution_succeeded_event_details(mut self, input: ::std::option::Option<crate::types::ExecutionSucceededEventDetails>) -> Self {
        self.execution_succeeded_event_details = input;
        self
    }
    /// <p>Contains details about the successful termination of the execution.</p>
    pub fn get_execution_succeeded_event_details(&self) -> &::std::option::Option<crate::types::ExecutionSucceededEventDetails> {
        &self.execution_succeeded_event_details
    }
    /// <p>Contains details about an abort of an execution.</p>
    pub fn execution_aborted_event_details(mut self, input: crate::types::ExecutionAbortedEventDetails) -> Self {
        self.execution_aborted_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an abort of an execution.</p>
    pub fn set_execution_aborted_event_details(mut self, input: ::std::option::Option<crate::types::ExecutionAbortedEventDetails>) -> Self {
        self.execution_aborted_event_details = input;
        self
    }
    /// <p>Contains details about an abort of an execution.</p>
    pub fn get_execution_aborted_event_details(&self) -> &::std::option::Option<crate::types::ExecutionAbortedEventDetails> {
        &self.execution_aborted_event_details
    }
    /// <p>Contains details about the execution timeout that occurred during the execution.</p>
    pub fn execution_timed_out_event_details(mut self, input: crate::types::ExecutionTimedOutEventDetails) -> Self {
        self.execution_timed_out_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the execution timeout that occurred during the execution.</p>
    pub fn set_execution_timed_out_event_details(mut self, input: ::std::option::Option<crate::types::ExecutionTimedOutEventDetails>) -> Self {
        self.execution_timed_out_event_details = input;
        self
    }
    /// <p>Contains details about the execution timeout that occurred during the execution.</p>
    pub fn get_execution_timed_out_event_details(&self) -> &::std::option::Option<crate::types::ExecutionTimedOutEventDetails> {
        &self.execution_timed_out_event_details
    }
    /// <p>Contains details about Map state that was started.</p>
    pub fn map_state_started_event_details(mut self, input: crate::types::MapStateStartedEventDetails) -> Self {
        self.map_state_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about Map state that was started.</p>
    pub fn set_map_state_started_event_details(mut self, input: ::std::option::Option<crate::types::MapStateStartedEventDetails>) -> Self {
        self.map_state_started_event_details = input;
        self
    }
    /// <p>Contains details about Map state that was started.</p>
    pub fn get_map_state_started_event_details(&self) -> &::std::option::Option<crate::types::MapStateStartedEventDetails> {
        &self.map_state_started_event_details
    }
    /// <p>Contains details about an iteration of a Map state that was started.</p>
    pub fn map_iteration_started_event_details(mut self, input: crate::types::MapIterationEventDetails) -> Self {
        self.map_iteration_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an iteration of a Map state that was started.</p>
    pub fn set_map_iteration_started_event_details(mut self, input: ::std::option::Option<crate::types::MapIterationEventDetails>) -> Self {
        self.map_iteration_started_event_details = input;
        self
    }
    /// <p>Contains details about an iteration of a Map state that was started.</p>
    pub fn get_map_iteration_started_event_details(&self) -> &::std::option::Option<crate::types::MapIterationEventDetails> {
        &self.map_iteration_started_event_details
    }
    /// <p>Contains details about an iteration of a Map state that succeeded.</p>
    pub fn map_iteration_succeeded_event_details(mut self, input: crate::types::MapIterationEventDetails) -> Self {
        self.map_iteration_succeeded_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an iteration of a Map state that succeeded.</p>
    pub fn set_map_iteration_succeeded_event_details(mut self, input: ::std::option::Option<crate::types::MapIterationEventDetails>) -> Self {
        self.map_iteration_succeeded_event_details = input;
        self
    }
    /// <p>Contains details about an iteration of a Map state that succeeded.</p>
    pub fn get_map_iteration_succeeded_event_details(&self) -> &::std::option::Option<crate::types::MapIterationEventDetails> {
        &self.map_iteration_succeeded_event_details
    }
    /// <p>Contains details about an iteration of a Map state that failed.</p>
    pub fn map_iteration_failed_event_details(mut self, input: crate::types::MapIterationEventDetails) -> Self {
        self.map_iteration_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an iteration of a Map state that failed.</p>
    pub fn set_map_iteration_failed_event_details(mut self, input: ::std::option::Option<crate::types::MapIterationEventDetails>) -> Self {
        self.map_iteration_failed_event_details = input;
        self
    }
    /// <p>Contains details about an iteration of a Map state that failed.</p>
    pub fn get_map_iteration_failed_event_details(&self) -> &::std::option::Option<crate::types::MapIterationEventDetails> {
        &self.map_iteration_failed_event_details
    }
    /// <p>Contains details about an iteration of a Map state that was aborted.</p>
    pub fn map_iteration_aborted_event_details(mut self, input: crate::types::MapIterationEventDetails) -> Self {
        self.map_iteration_aborted_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an iteration of a Map state that was aborted.</p>
    pub fn set_map_iteration_aborted_event_details(mut self, input: ::std::option::Option<crate::types::MapIterationEventDetails>) -> Self {
        self.map_iteration_aborted_event_details = input;
        self
    }
    /// <p>Contains details about an iteration of a Map state that was aborted.</p>
    pub fn get_map_iteration_aborted_event_details(&self) -> &::std::option::Option<crate::types::MapIterationEventDetails> {
        &self.map_iteration_aborted_event_details
    }
    /// <p>Contains details about a Lambda function that failed during an execution.</p>
    pub fn lambda_function_failed_event_details(mut self, input: crate::types::LambdaFunctionFailedEventDetails) -> Self {
        self.lambda_function_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a Lambda function that failed during an execution.</p>
    pub fn set_lambda_function_failed_event_details(mut self, input: ::std::option::Option<crate::types::LambdaFunctionFailedEventDetails>) -> Self {
        self.lambda_function_failed_event_details = input;
        self
    }
    /// <p>Contains details about a Lambda function that failed during an execution.</p>
    pub fn get_lambda_function_failed_event_details(&self) -> &::std::option::Option<crate::types::LambdaFunctionFailedEventDetails> {
        &self.lambda_function_failed_event_details
    }
    /// <p>Contains details about a failed Lambda function schedule event that occurred during an execution.</p>
    pub fn lambda_function_schedule_failed_event_details(mut self, input: crate::types::LambdaFunctionScheduleFailedEventDetails) -> Self {
        self.lambda_function_schedule_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a failed Lambda function schedule event that occurred during an execution.</p>
    pub fn set_lambda_function_schedule_failed_event_details(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionScheduleFailedEventDetails>,
    ) -> Self {
        self.lambda_function_schedule_failed_event_details = input;
        self
    }
    /// <p>Contains details about a failed Lambda function schedule event that occurred during an execution.</p>
    pub fn get_lambda_function_schedule_failed_event_details(
        &self,
    ) -> &::std::option::Option<crate::types::LambdaFunctionScheduleFailedEventDetails> {
        &self.lambda_function_schedule_failed_event_details
    }
    /// <p>Contains details about a Lambda function scheduled during an execution.</p>
    pub fn lambda_function_scheduled_event_details(mut self, input: crate::types::LambdaFunctionScheduledEventDetails) -> Self {
        self.lambda_function_scheduled_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a Lambda function scheduled during an execution.</p>
    pub fn set_lambda_function_scheduled_event_details(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionScheduledEventDetails>,
    ) -> Self {
        self.lambda_function_scheduled_event_details = input;
        self
    }
    /// <p>Contains details about a Lambda function scheduled during an execution.</p>
    pub fn get_lambda_function_scheduled_event_details(&self) -> &::std::option::Option<crate::types::LambdaFunctionScheduledEventDetails> {
        &self.lambda_function_scheduled_event_details
    }
    /// <p>Contains details about a lambda function that failed to start during an execution.</p>
    pub fn lambda_function_start_failed_event_details(mut self, input: crate::types::LambdaFunctionStartFailedEventDetails) -> Self {
        self.lambda_function_start_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a lambda function that failed to start during an execution.</p>
    pub fn set_lambda_function_start_failed_event_details(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionStartFailedEventDetails>,
    ) -> Self {
        self.lambda_function_start_failed_event_details = input;
        self
    }
    /// <p>Contains details about a lambda function that failed to start during an execution.</p>
    pub fn get_lambda_function_start_failed_event_details(&self) -> &::std::option::Option<crate::types::LambdaFunctionStartFailedEventDetails> {
        &self.lambda_function_start_failed_event_details
    }
    /// <p>Contains details about a Lambda function that terminated successfully during an execution.</p>
    pub fn lambda_function_succeeded_event_details(mut self, input: crate::types::LambdaFunctionSucceededEventDetails) -> Self {
        self.lambda_function_succeeded_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a Lambda function that terminated successfully during an execution.</p>
    pub fn set_lambda_function_succeeded_event_details(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionSucceededEventDetails>,
    ) -> Self {
        self.lambda_function_succeeded_event_details = input;
        self
    }
    /// <p>Contains details about a Lambda function that terminated successfully during an execution.</p>
    pub fn get_lambda_function_succeeded_event_details(&self) -> &::std::option::Option<crate::types::LambdaFunctionSucceededEventDetails> {
        &self.lambda_function_succeeded_event_details
    }
    /// <p>Contains details about a Lambda function timeout that occurred during an execution.</p>
    pub fn lambda_function_timed_out_event_details(mut self, input: crate::types::LambdaFunctionTimedOutEventDetails) -> Self {
        self.lambda_function_timed_out_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a Lambda function timeout that occurred during an execution.</p>
    pub fn set_lambda_function_timed_out_event_details(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventDetails>,
    ) -> Self {
        self.lambda_function_timed_out_event_details = input;
        self
    }
    /// <p>Contains details about a Lambda function timeout that occurred during an execution.</p>
    pub fn get_lambda_function_timed_out_event_details(&self) -> &::std::option::Option<crate::types::LambdaFunctionTimedOutEventDetails> {
        &self.lambda_function_timed_out_event_details
    }
    /// <p>Contains details about a state entered during an execution.</p>
    pub fn state_entered_event_details(mut self, input: crate::types::StateEnteredEventDetails) -> Self {
        self.state_entered_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a state entered during an execution.</p>
    pub fn set_state_entered_event_details(mut self, input: ::std::option::Option<crate::types::StateEnteredEventDetails>) -> Self {
        self.state_entered_event_details = input;
        self
    }
    /// <p>Contains details about a state entered during an execution.</p>
    pub fn get_state_entered_event_details(&self) -> &::std::option::Option<crate::types::StateEnteredEventDetails> {
        &self.state_entered_event_details
    }
    /// <p>Contains details about an exit from a state during an execution.</p>
    pub fn state_exited_event_details(mut self, input: crate::types::StateExitedEventDetails) -> Self {
        self.state_exited_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about an exit from a state during an execution.</p>
    pub fn set_state_exited_event_details(mut self, input: ::std::option::Option<crate::types::StateExitedEventDetails>) -> Self {
        self.state_exited_event_details = input;
        self
    }
    /// <p>Contains details about an exit from a state during an execution.</p>
    pub fn get_state_exited_event_details(&self) -> &::std::option::Option<crate::types::StateExitedEventDetails> {
        &self.state_exited_event_details
    }
    /// <p>Contains details, such as <code>mapRunArn</code>, and the start date and time of a Map Run. <code>mapRunArn</code> is the Amazon Resource Name (ARN) of the Map Run that was started.</p>
    pub fn map_run_started_event_details(mut self, input: crate::types::MapRunStartedEventDetails) -> Self {
        self.map_run_started_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details, such as <code>mapRunArn</code>, and the start date and time of a Map Run. <code>mapRunArn</code> is the Amazon Resource Name (ARN) of the Map Run that was started.</p>
    pub fn set_map_run_started_event_details(mut self, input: ::std::option::Option<crate::types::MapRunStartedEventDetails>) -> Self {
        self.map_run_started_event_details = input;
        self
    }
    /// <p>Contains details, such as <code>mapRunArn</code>, and the start date and time of a Map Run. <code>mapRunArn</code> is the Amazon Resource Name (ARN) of the Map Run that was started.</p>
    pub fn get_map_run_started_event_details(&self) -> &::std::option::Option<crate::types::MapRunStartedEventDetails> {
        &self.map_run_started_event_details
    }
    /// <p>Contains error and cause details about a Map Run that failed.</p>
    pub fn map_run_failed_event_details(mut self, input: crate::types::MapRunFailedEventDetails) -> Self {
        self.map_run_failed_event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains error and cause details about a Map Run that failed.</p>
    pub fn set_map_run_failed_event_details(mut self, input: ::std::option::Option<crate::types::MapRunFailedEventDetails>) -> Self {
        self.map_run_failed_event_details = input;
        self
    }
    /// <p>Contains error and cause details about a Map Run that failed.</p>
    pub fn get_map_run_failed_event_details(&self) -> &::std::option::Option<crate::types::MapRunFailedEventDetails> {
        &self.map_run_failed_event_details
    }
    /// Consumes the builder and constructs a [`HistoryEvent`](crate::types::HistoryEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::HistoryEventBuilder::timestamp)
    /// - [`r#type`](crate::types::builders::HistoryEventBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::HistoryEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HistoryEvent {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building HistoryEvent",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building HistoryEvent",
                )
            })?,
            id: self.id.unwrap_or_default(),
            previous_event_id: self.previous_event_id.unwrap_or_default(),
            activity_failed_event_details: self.activity_failed_event_details,
            activity_schedule_failed_event_details: self.activity_schedule_failed_event_details,
            activity_scheduled_event_details: self.activity_scheduled_event_details,
            activity_started_event_details: self.activity_started_event_details,
            activity_succeeded_event_details: self.activity_succeeded_event_details,
            activity_timed_out_event_details: self.activity_timed_out_event_details,
            task_failed_event_details: self.task_failed_event_details,
            task_scheduled_event_details: self.task_scheduled_event_details,
            task_start_failed_event_details: self.task_start_failed_event_details,
            task_started_event_details: self.task_started_event_details,
            task_submit_failed_event_details: self.task_submit_failed_event_details,
            task_submitted_event_details: self.task_submitted_event_details,
            task_succeeded_event_details: self.task_succeeded_event_details,
            task_timed_out_event_details: self.task_timed_out_event_details,
            execution_failed_event_details: self.execution_failed_event_details,
            execution_started_event_details: self.execution_started_event_details,
            execution_succeeded_event_details: self.execution_succeeded_event_details,
            execution_aborted_event_details: self.execution_aborted_event_details,
            execution_timed_out_event_details: self.execution_timed_out_event_details,
            map_state_started_event_details: self.map_state_started_event_details,
            map_iteration_started_event_details: self.map_iteration_started_event_details,
            map_iteration_succeeded_event_details: self.map_iteration_succeeded_event_details,
            map_iteration_failed_event_details: self.map_iteration_failed_event_details,
            map_iteration_aborted_event_details: self.map_iteration_aborted_event_details,
            lambda_function_failed_event_details: self.lambda_function_failed_event_details,
            lambda_function_schedule_failed_event_details: self.lambda_function_schedule_failed_event_details,
            lambda_function_scheduled_event_details: self.lambda_function_scheduled_event_details,
            lambda_function_start_failed_event_details: self.lambda_function_start_failed_event_details,
            lambda_function_succeeded_event_details: self.lambda_function_succeeded_event_details,
            lambda_function_timed_out_event_details: self.lambda_function_timed_out_event_details,
            state_entered_event_details: self.state_entered_event_details,
            state_exited_event_details: self.state_exited_event_details,
            map_run_started_event_details: self.map_run_started_event_details,
            map_run_failed_event_details: self.map_run_failed_event_details,
        })
    }
}
