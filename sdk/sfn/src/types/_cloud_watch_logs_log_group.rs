// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudWatchLogsLogGroup {
    /// <p>The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with <code>:*</code> </p>
    #[doc(hidden)]
    pub log_group_arn: std::option::Option<std::string::String>,
}
impl CloudWatchLogsLogGroup {
    /// <p>The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with <code>:*</code> </p>
    pub fn log_group_arn(&self) -> std::option::Option<&str> {
        self.log_group_arn.as_deref()
    }
}
impl CloudWatchLogsLogGroup {
    /// Creates a new builder-style object to manufacture [`CloudWatchLogsLogGroup`](crate::types::CloudWatchLogsLogGroup).
    pub fn builder() -> crate::types::builders::CloudWatchLogsLogGroupBuilder {
        crate::types::builders::CloudWatchLogsLogGroupBuilder::default()
    }
}

/// A builder for [`CloudWatchLogsLogGroup`](crate::types::CloudWatchLogsLogGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudWatchLogsLogGroupBuilder {
    pub(crate) log_group_arn: std::option::Option<std::string::String>,
}
impl CloudWatchLogsLogGroupBuilder {
    /// <p>The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with <code>:*</code> </p>
    pub fn log_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with <code>:*</code> </p>
    pub fn set_log_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudWatchLogsLogGroup`](crate::types::CloudWatchLogsLogGroup).
    pub fn build(self) -> crate::types::CloudWatchLogsLogGroup {
        crate::types::CloudWatchLogsLogGroup {
            log_group_arn: self.log_group_arn,
        }
    }
}
