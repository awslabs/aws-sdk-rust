// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_state_machine_for_execution::_describe_state_machine_for_execution_output::DescribeStateMachineForExecutionOutputBuilder;

pub use crate::operation::describe_state_machine_for_execution::_describe_state_machine_for_execution_input::DescribeStateMachineForExecutionInputBuilder;

impl crate::operation::describe_state_machine_for_execution::builders::DescribeStateMachineForExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_state_machine_for_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeStateMachineForExecution`.
///
/// <p>Provides information about a state machine's definition, its execution role ARN, and configuration. If a Map Run dispatched the execution, this action returns the Map Run Amazon Resource Name (ARN) in the response. The state machine returned is the state machine associated with the Map Run.</p><note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeStateMachineForExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_state_machine_for_execution::builders::DescribeStateMachineForExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionOutput,
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionError,
    > for DescribeStateMachineForExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionOutput,
            crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeStateMachineForExecutionFluentBuilder {
    /// Creates a new `DescribeStateMachineForExecution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeStateMachineForExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_state_machine_for_execution::builders::DescribeStateMachineForExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionOutput,
        crate::operation::describe_state_machine_for_execution::DescribeStateMachineForExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution you want state machine information for.</p>
    pub fn execution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution you want state machine information for.</p>
    pub fn set_execution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution you want state machine information for.</p>
    pub fn get_execution_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_arn()
    }
}
