// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the execution to stop.</p>
    #[doc(hidden)]
    pub execution_arn: std::option::Option<std::string::String>,
    /// <p>The error code of the failure.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    /// <p>A more detailed explanation of the cause of the failure.</p>
    #[doc(hidden)]
    pub cause: std::option::Option<std::string::String>,
}
impl StopExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the execution to stop.</p>
    pub fn execution_arn(&self) -> std::option::Option<&str> {
        self.execution_arn.as_deref()
    }
    /// <p>The error code of the failure.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn cause(&self) -> std::option::Option<&str> {
        self.cause.as_deref()
    }
}
impl std::fmt::Debug for StopExecutionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopExecutionInput");
        formatter.field("execution_arn", &self.execution_arn);
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StopExecutionInput {
    /// Creates a new builder-style object to manufacture [`StopExecutionInput`](crate::operation::stop_execution::StopExecutionInput).
    pub fn builder() -> crate::operation::stop_execution::builders::StopExecutionInputBuilder {
        crate::operation::stop_execution::builders::StopExecutionInputBuilder::default()
    }
}

/// A builder for [`StopExecutionInput`](crate::operation::stop_execution::StopExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct StopExecutionInputBuilder {
    pub(crate) execution_arn: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<std::string::String>,
    pub(crate) cause: std::option::Option<std::string::String>,
}
impl StopExecutionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the execution to stop.</p>
    pub fn execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution to stop.</p>
    pub fn set_execution_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_arn = input;
        self
    }
    /// <p>The error code of the failure.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>The error code of the failure.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn cause(mut self, input: impl Into<std::string::String>) -> Self {
        self.cause = Some(input.into());
        self
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn set_cause(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cause = input;
        self
    }
    /// Consumes the builder and constructs a [`StopExecutionInput`](crate::operation::stop_execution::StopExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::stop_execution::StopExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::stop_execution::StopExecutionInput {
            execution_arn: self.execution_arn,
            error: self.error,
            cause: self.cause,
        })
    }
}
impl std::fmt::Debug for StopExecutionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopExecutionInputBuilder");
        formatter.field("execution_arn", &self.execution_arn);
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
