// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateStateMachineAliasInput {
    /// <p>A description for the state machine alias.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub routing_configuration: ::std::option::Option<::std::vec::Vec<crate::types::RoutingConfigurationListItem>>,
}
impl CreateStateMachineAliasInput {
    /// <p>A description for the state machine alias.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.routing_configuration.is_none()`.
    pub fn routing_configuration(&self) -> &[crate::types::RoutingConfigurationListItem] {
        self.routing_configuration.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateStateMachineAliasInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStateMachineAliasInput");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("routing_configuration", &self.routing_configuration);
        formatter.finish()
    }
}
impl CreateStateMachineAliasInput {
    /// Creates a new builder-style object to manufacture [`CreateStateMachineAliasInput`](crate::operation::create_state_machine_alias::CreateStateMachineAliasInput).
    pub fn builder() -> crate::operation::create_state_machine_alias::builders::CreateStateMachineAliasInputBuilder {
        crate::operation::create_state_machine_alias::builders::CreateStateMachineAliasInputBuilder::default()
    }
}

/// A builder for [`CreateStateMachineAliasInput`](crate::operation::create_state_machine_alias::CreateStateMachineAliasInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateStateMachineAliasInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) routing_configuration: ::std::option::Option<::std::vec::Vec<crate::types::RoutingConfigurationListItem>>,
}
impl CreateStateMachineAliasInputBuilder {
    /// <p>A description for the state machine alias.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the state machine alias.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the state machine alias.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the state machine alias.</p>
    /// <p>To avoid conflict with version ARNs, don't use an integer in the name of the alias.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `routing_configuration`.
    ///
    /// To override the contents of this collection use [`set_routing_configuration`](Self::set_routing_configuration).
    ///
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub fn routing_configuration(mut self, input: crate::types::RoutingConfigurationListItem) -> Self {
        let mut v = self.routing_configuration.unwrap_or_default();
        v.push(input);
        self.routing_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub fn set_routing_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingConfigurationListItem>>) -> Self {
        self.routing_configuration = input;
        self
    }
    /// <p>The routing configuration of a state machine alias. The routing configuration shifts execution traffic between two state machine versions. <code>routingConfiguration</code> contains an array of <code>RoutingConfig</code> objects that specify up to two state machine versions. Step Functions then randomly choses which version to run an execution with based on the weight assigned to each <code>RoutingConfig</code>.</p>
    pub fn get_routing_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingConfigurationListItem>> {
        &self.routing_configuration
    }
    /// Consumes the builder and constructs a [`CreateStateMachineAliasInput`](crate::operation::create_state_machine_alias::CreateStateMachineAliasInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_state_machine_alias::CreateStateMachineAliasInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_state_machine_alias::CreateStateMachineAliasInput {
            description: self.description,
            name: self.name,
            routing_configuration: self.routing_configuration,
        })
    }
}
impl ::std::fmt::Debug for CreateStateMachineAliasInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStateMachineAliasInputBuilder");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("routing_configuration", &self.routing_configuration);
        formatter.finish()
    }
}
