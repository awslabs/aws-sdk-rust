// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMapRunsOutput {
    /// <p>An array that lists information related to a Map Run, such as the Amazon Resource Name (ARN) of the Map Run and the ARN of the state machine that started the Map Run.</p>
    #[doc(hidden)]
    pub map_runs: std::option::Option<std::vec::Vec<crate::types::MapRunListItem>>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMapRunsOutput {
    /// <p>An array that lists information related to a Map Run, such as the Amazon Resource Name (ARN) of the Map Run and the ARN of the state machine that started the Map Run.</p>
    pub fn map_runs(&self) -> std::option::Option<&[crate::types::MapRunListItem]> {
        self.map_runs.as_deref()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMapRunsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMapRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListMapRunsOutput`](crate::operation::list_map_runs::ListMapRunsOutput).
    pub fn builder() -> crate::operation::list_map_runs::builders::ListMapRunsOutputBuilder {
        crate::operation::list_map_runs::builders::ListMapRunsOutputBuilder::default()
    }
}

/// A builder for [`ListMapRunsOutput`](crate::operation::list_map_runs::ListMapRunsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMapRunsOutputBuilder {
    pub(crate) map_runs: std::option::Option<std::vec::Vec<crate::types::MapRunListItem>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMapRunsOutputBuilder {
    /// Appends an item to `map_runs`.
    ///
    /// To override the contents of this collection use [`set_map_runs`](Self::set_map_runs).
    ///
    /// <p>An array that lists information related to a Map Run, such as the Amazon Resource Name (ARN) of the Map Run and the ARN of the state machine that started the Map Run.</p>
    pub fn map_runs(mut self, input: crate::types::MapRunListItem) -> Self {
        let mut v = self.map_runs.unwrap_or_default();
        v.push(input);
        self.map_runs = Some(v);
        self
    }
    /// <p>An array that lists information related to a Map Run, such as the Amazon Resource Name (ARN) of the Map Run and the ARN of the state machine that started the Map Run.</p>
    pub fn set_map_runs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MapRunListItem>>,
    ) -> Self {
        self.map_runs = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMapRunsOutput`](crate::operation::list_map_runs::ListMapRunsOutput).
    pub fn build(self) -> crate::operation::list_map_runs::ListMapRunsOutput {
        crate::operation::list_map_runs::ListMapRunsOutput {
            map_runs: self.map_runs,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
