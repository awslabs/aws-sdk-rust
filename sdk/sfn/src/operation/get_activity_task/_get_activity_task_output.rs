// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetActivityTaskOutput {
    /// <p>A token that identifies the scheduled task. This token must be copied and included in subsequent calls to <code>SendTaskHeartbeat</code>, <code>SendTaskSuccess</code> or <code>SendTaskFailure</code> in order to report the progress or completion of the task.</p>
    #[doc(hidden)]
    pub task_token: std::option::Option<std::string::String>,
    /// <p>The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetActivityTaskOutput {
    /// <p>A token that identifies the scheduled task. This token must be copied and included in subsequent calls to <code>SendTaskHeartbeat</code>, <code>SendTaskSuccess</code> or <code>SendTaskFailure</code> in order to report the progress or completion of the task.</p>
    pub fn task_token(&self) -> std::option::Option<&str> {
        self.task_token.as_deref()
    }
    /// <p>The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
}
impl std::fmt::Debug for GetActivityTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetActivityTaskOutput");
        formatter.field("task_token", &self.task_token);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetActivityTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetActivityTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetActivityTaskOutput`](crate::operation::get_activity_task::GetActivityTaskOutput).
    pub fn builder() -> crate::operation::get_activity_task::builders::GetActivityTaskOutputBuilder
    {
        crate::operation::get_activity_task::builders::GetActivityTaskOutputBuilder::default()
    }
}

/// A builder for [`GetActivityTaskOutput`](crate::operation::get_activity_task::GetActivityTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetActivityTaskOutputBuilder {
    pub(crate) task_token: std::option::Option<std::string::String>,
    pub(crate) input: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetActivityTaskOutputBuilder {
    /// <p>A token that identifies the scheduled task. This token must be copied and included in subsequent calls to <code>SendTaskHeartbeat</code>, <code>SendTaskSuccess</code> or <code>SendTaskFailure</code> in order to report the progress or completion of the task.</p>
    pub fn task_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_token = Some(input.into());
        self
    }
    /// <p>A token that identifies the scheduled task. This token must be copied and included in subsequent calls to <code>SendTaskHeartbeat</code>, <code>SendTaskSuccess</code> or <code>SendTaskFailure</code> in order to report the progress or completion of the task.</p>
    pub fn set_task_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_token = input;
        self
    }
    /// <p>The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p>The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetActivityTaskOutput`](crate::operation::get_activity_task::GetActivityTaskOutput).
    pub fn build(self) -> crate::operation::get_activity_task::GetActivityTaskOutput {
        crate::operation::get_activity_task::GetActivityTaskOutput {
            task_token: self.task_token,
            input: self.input,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetActivityTaskOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetActivityTaskOutputBuilder");
        formatter.field("task_token", &self.task_token);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
