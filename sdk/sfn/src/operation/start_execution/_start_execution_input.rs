// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub state_machine_arn: ::std::option::Option<::std::string::String>,
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub trace_header: ::std::option::Option<::std::string::String>,
}
impl StartExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn state_machine_arn(&self) -> ::std::option::Option<&str> {
        self.state_machine_arn.as_deref()
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn trace_header(&self) -> ::std::option::Option<&str> {
        self.trace_header.as_deref()
    }
}
impl ::std::fmt::Debug for StartExecutionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartExecutionInput");
        formatter.field("state_machine_arn", &self.state_machine_arn);
        formatter.field("name", &self.name);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("trace_header", &self.trace_header);
        formatter.finish()
    }
}
impl StartExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartExecutionInput`](crate::operation::start_execution::StartExecutionInput).
    pub fn builder() -> crate::operation::start_execution::builders::StartExecutionInputBuilder {
        crate::operation::start_execution::builders::StartExecutionInputBuilder::default()
    }
}

/// A builder for [`StartExecutionInput`](crate::operation::start_execution::StartExecutionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StartExecutionInputBuilder {
    pub(crate) state_machine_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) trace_header: ::std::option::Option<::std::string::String>,
}
impl StartExecutionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn state_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_machine_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn set_state_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_machine_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn get_state_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_machine_arn
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn trace_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_header = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn set_trace_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_header = input;
        self
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn get_trace_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_header
    }
    /// Consumes the builder and constructs a [`StartExecutionInput`](crate::operation::start_execution::StartExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_execution::StartExecutionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_execution::StartExecutionInput {
            state_machine_arn: self.state_machine_arn,
            name: self.name,
            input: self.input,
            trace_header: self.trace_header,
        })
    }
}
impl ::std::fmt::Debug for StartExecutionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartExecutionInputBuilder");
        formatter.field("state_machine_arn", &self.state_machine_arn);
        formatter.field("name", &self.name);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("trace_header", &self.trace_header);
        formatter.finish()
    }
}
