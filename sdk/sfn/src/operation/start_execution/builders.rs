// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_execution::_start_execution_output::StartExecutionOutputBuilder;

pub use crate::operation::start_execution::_start_execution_input::StartExecutionInputBuilder;

impl StartExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_execution::StartExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_execution::StartExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartExecution`.
///
/// <p>Starts a state machine execution.</p>
/// <p>A qualified state machine ARN can either refer to a <i>Distributed Map state</i> defined within a state machine, a version ARN, or an alias ARN.</p>
/// <p>The following are some examples of qualified and unqualified state machine ARNs:</p>
/// <ul>
/// <li> <p>The following qualified state machine ARN refers to a <i>Distributed Map state</i> with a label <code>mapStateLabel</code> in a state machine named <code>myStateMachine</code>.</p> <p> <code>arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel</code> </p> <note>
/// <p>If you provide a qualified state machine ARN that refers to a <i>Distributed Map state</i>, the request fails with <code>ValidationException</code>.</p>
/// </note> </li>
/// <li> <p>The following qualified state machine ARN refers to an alias named <code>PROD</code>.</p> <p> <code>arn:
/// <partition>
/// :states:
/// <region>
/// :
/// <account-id>
/// :stateMachine:
/// <mystatemachine:prod></mystatemachine:prod>
/// </account-id>
/// </region>
/// </partition></code> </p> <note>
/// <p>If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.</p>
/// </note> </li>
/// <li> <p>The following unqualified state machine ARN refers to a state machine named <code>myStateMachine</code>.</p> <p> <code>arn:
/// <partition>
/// :states:
/// <region>
/// :
/// <account-id>
/// :stateMachine:
/// <mystatemachine></mystatemachine>
/// </account-id>
/// </region>
/// </partition></code> </p> </li>
/// </ul>
/// <p>If you start an execution with an unqualified state machine ARN, Step Functions uses the latest revision of the state machine for the execution.</p>
/// <p>To start executions of a state machine <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html">version</a>, call <code>StartExecution</code> and provide the version ARN or the ARN of an <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-alias.html">alias</a> that points to the version.</p> <note>
/// <p> <code>StartExecution</code> is idempotent for <code>STANDARD</code> workflows. For a <code>STANDARD</code> workflow, if you call <code>StartExecution</code> with the same name and input as a running execution, the call succeeds and return the same response as the original request. If the execution is closed or if the input is different, it returns a <code>400 ExecutionAlreadyExists</code> error. You can reuse names after 90 days. </p>
/// <p> <code>StartExecution</code> isn't idempotent for <code>EXPRESS</code> workflows. </p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_execution::builders::StartExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_execution::StartExecutionOutput,
        crate::operation::start_execution::StartExecutionError,
    > for StartExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_execution::StartExecutionOutput,
            crate::operation::start_execution::StartExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartExecutionFluentBuilder {
    /// Creates a new `StartExecution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::start_execution::builders::StartExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_execution::StartExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_execution::StartExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_execution::StartExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_execution::StartExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_execution::StartExecutionOutput,
        crate::operation::start_execution::StartExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn state_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.state_machine_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn set_state_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_state_machine_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
    /// <p>The <code>stateMachineArn</code> parameter accepts one of the following inputs:</p>
    /// <ul>
    /// <li> <p> <b>An unqualified state machine ARN</b> – Refers to a state machine ARN that isn't qualified with a version or alias ARN. The following is an example of an unqualified state machine ARN.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine></mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate state machine executions that you start with an unqualified ARN with a version. This is true even if that version uses the same revision that the execution used.</p> </li>
    /// <li> <p> <b>A state machine version ARN</b> – Refers to a version ARN, which is a combination of state machine ARN and the version number separated by a colon (:). The following is an example of the ARN for version 10. </p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine>
    /// :10
    /// </mystatemachine>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions doesn't associate executions that you start with a version ARN with any aliases that point to that version.</p> </li>
    /// <li> <p> <b>A state machine alias ARN</b> – Refers to an alias ARN, which is a combination of state machine ARN and the alias name separated by a colon (:). The following is an example of the ARN for an alias named <code>PROD</code>.</p> <p> <code>arn:
    /// <partition>
    /// :states:
    /// <region>
    /// :
    /// <account-id>
    /// :stateMachine:
    /// <mystatemachine:prod></mystatemachine:prod>
    /// </account-id>
    /// </region>
    /// </partition></code> </p> <p>Step Functions associates executions that you start with an alias ARN with that alias and the state machine version used for that execution.</p> </li>
    /// </ul>
    pub fn get_state_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_state_machine_arn()
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Optional name of the execution. This name must be unique for your Amazon Web Services account, Region, and state machine for 90 days. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions"> Limits Related to State Machine Executions</a> in the <i>Step Functions Developer Guide</i>.</p>
    /// <p>A name must <i>not</i> contain:</p>
    /// <ul>
    /// <li> <p>white space</p> </li>
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>
    /// <li> <p>wildcard characters <code>? *</code> </p> </li>
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>
    /// </ul>
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input(input.into());
        self
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_input(input);
        self
    }
    /// <p>The string that contains the JSON input data for the execution, for example:</p>
    /// <p> <code>"input": "{\"first_name\" : \"test\"}"</code> </p> <note>
    /// <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"input": "{}"</code> </p>
    /// </note>
    /// <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_input()
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn trace_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.trace_header(input.into());
        self
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn set_trace_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_trace_header(input);
        self
    }
    /// <p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p>
    pub fn get_trace_header(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_trace_header()
    }
}
