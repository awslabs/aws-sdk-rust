// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_task_success_input(
    input: &crate::operation::send_task_success::SendTaskSuccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_send_task_success_input::ser_send_task_success_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_send_task_success_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_task_success::SendTaskSuccessOutput,
    crate::operation::send_task_success::SendTaskSuccessError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::send_task_success::SendTaskSuccessError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::send_task_success::SendTaskSuccessError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidOutput" => {
            crate::operation::send_task_success::SendTaskSuccessError::InvalidOutput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidOutputBuilder::default();
                    let _ = response;
                    output =
                        crate::protocol_serde::shape_invalid_output::de_invalid_output_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::operation::send_task_success::SendTaskSuccessError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidToken" => {
            crate::operation::send_task_success::SendTaskSuccessError::InvalidToken({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidTokenBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_token::de_invalid_token_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::operation::send_task_success::SendTaskSuccessError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TaskDoesNotExist" => {
            crate::operation::send_task_success::SendTaskSuccessError::TaskDoesNotExist({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::TaskDoesNotExistBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_task_does_not_exist::de_task_does_not_exist_json_err(response.body().as_ref(), output).map_err(crate::operation::send_task_success::SendTaskSuccessError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TaskTimedOut" => {
            crate::operation::send_task_success::SendTaskSuccessError::TaskTimedOut({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TaskTimedOutBuilder::default();
                    let _ = response;
                    output =
                        crate::protocol_serde::shape_task_timed_out::de_task_timed_out_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::operation::send_task_success::SendTaskSuccessError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::send_task_success::SendTaskSuccessError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_send_task_success_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_task_success::SendTaskSuccessOutput,
    crate::operation::send_task_success::SendTaskSuccessError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::send_task_success::builders::SendTaskSuccessOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
