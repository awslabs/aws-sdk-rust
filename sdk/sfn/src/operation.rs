// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates an activity. An activity is a task that you write in any programming language and
/// host on any machine that has access to AWS Step Functions. Activities must poll Step Functions using the
/// <code>GetActivityTask</code> API action and respond using <code>SendTask*</code> API
/// actions. This function lets Step Functions know the existence of your activity and returns an
/// identifier for use in a state machine and when polling from the activity.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <note>
/// <p>
/// <code>CreateActivity</code> is an idempotent API. Subsequent requests won’t create a
/// duplicate resource if it was already created. <code>CreateActivity</code>'s idempotency
/// check is based on the activity <code>name</code>. If a following request has different
/// <code>tags</code> values, Step Functions will ignore these differences and treat it as an
/// idempotent request of the previous. In this case, <code>tags</code> will not be updated,
/// even if they are different.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateActivity {
    _private: (),
}
impl CreateActivity {
    /// Creates a new builder-style object to manufacture [`CreateActivityInput`](crate::input::CreateActivityInput)
    pub fn builder() -> crate::input::create_activity_input::Builder {
        crate::input::create_activity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateActivity {
    type Output =
        std::result::Result<crate::output::CreateActivityOutput, crate::error::CreateActivityError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_activity_error(response)
        } else {
            crate::operation_deser::parse_create_activity_response(response)
        }
    }
}

/// <p>Creates a state machine. A state machine consists of a collection of states that can do
/// work (<code>Task</code> states), determine to which states to transition next
/// (<code>Choice</code> states), stop an execution with an error (<code>Fail</code> states),
/// and so on. State machines are specified using a JSON-based, structured language. For more
/// information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States
/// Language</a> in the AWS Step Functions User Guide.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <note>
/// <p>
/// <code>CreateStateMachine</code> is an idempotent API. Subsequent requests won’t create a
/// duplicate resource if it was already created. <code>CreateStateMachine</code>'s idempotency
/// check is based on the state machine <code>name</code>, <code>definition</code>,
/// <code>type</code>, <code>LoggingConfiguration</code> and <code>TracingConfiguration</code>. If a following request has a
/// different <code>roleArn</code> or <code>tags</code>, Step Functions will ignore these differences and
/// treat it as an idempotent request of the previous. In this case, <code>roleArn</code> and
/// <code>tags</code> will not be updated, even if they are different.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateStateMachine {
    _private: (),
}
impl CreateStateMachine {
    /// Creates a new builder-style object to manufacture [`CreateStateMachineInput`](crate::input::CreateStateMachineInput)
    pub fn builder() -> crate::input::create_state_machine_input::Builder {
        crate::input::create_state_machine_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateStateMachine {
    type Output = std::result::Result<
        crate::output::CreateStateMachineOutput,
        crate::error::CreateStateMachineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_state_machine_error(response)
        } else {
            crate::operation_deser::parse_create_state_machine_response(response)
        }
    }
}

/// <p>Deletes an activity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteActivity {
    _private: (),
}
impl DeleteActivity {
    /// Creates a new builder-style object to manufacture [`DeleteActivityInput`](crate::input::DeleteActivityInput)
    pub fn builder() -> crate::input::delete_activity_input::Builder {
        crate::input::delete_activity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteActivity {
    type Output =
        std::result::Result<crate::output::DeleteActivityOutput, crate::error::DeleteActivityError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_activity_error(response)
        } else {
            crate::operation_deser::parse_delete_activity_response(response)
        }
    }
}

/// <p>Deletes a state machine. This is an asynchronous operation: It sets the state machine's
/// status to <code>DELETING</code> and begins the deletion process. </p>
/// <note>
/// <p>For <code>EXPRESS</code>state machines, the deletion will happen eventually (usually
/// less than a minute). Running executions may emit logs after <code>DeleteStateMachine</code>
/// API is called.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteStateMachine {
    _private: (),
}
impl DeleteStateMachine {
    /// Creates a new builder-style object to manufacture [`DeleteStateMachineInput`](crate::input::DeleteStateMachineInput)
    pub fn builder() -> crate::input::delete_state_machine_input::Builder {
        crate::input::delete_state_machine_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteStateMachine {
    type Output = std::result::Result<
        crate::output::DeleteStateMachineOutput,
        crate::error::DeleteStateMachineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_state_machine_error(response)
        } else {
            crate::operation_deser::parse_delete_state_machine_response(response)
        }
    }
}

/// <p>Describes an activity.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeActivity {
    _private: (),
}
impl DescribeActivity {
    /// Creates a new builder-style object to manufacture [`DescribeActivityInput`](crate::input::DescribeActivityInput)
    pub fn builder() -> crate::input::describe_activity_input::Builder {
        crate::input::describe_activity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeActivity {
    type Output = std::result::Result<
        crate::output::DescribeActivityOutput,
        crate::error::DescribeActivityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_activity_error(response)
        } else {
            crate::operation_deser::parse_describe_activity_response(response)
        }
    }
}

/// <p>Describes an execution.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExecution {
    _private: (),
}
impl DescribeExecution {
    /// Creates a new builder-style object to manufacture [`DescribeExecutionInput`](crate::input::DescribeExecutionInput)
    pub fn builder() -> crate::input::describe_execution_input::Builder {
        crate::input::describe_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExecution {
    type Output = std::result::Result<
        crate::output::DescribeExecutionOutput,
        crate::error::DescribeExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_execution_error(response)
        } else {
            crate::operation_deser::parse_describe_execution_response(response)
        }
    }
}

/// <p>Describes a state machine.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStateMachine {
    _private: (),
}
impl DescribeStateMachine {
    /// Creates a new builder-style object to manufacture [`DescribeStateMachineInput`](crate::input::DescribeStateMachineInput)
    pub fn builder() -> crate::input::describe_state_machine_input::Builder {
        crate::input::describe_state_machine_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStateMachine {
    type Output = std::result::Result<
        crate::output::DescribeStateMachineOutput,
        crate::error::DescribeStateMachineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_state_machine_error(response)
        } else {
            crate::operation_deser::parse_describe_state_machine_response(response)
        }
    }
}

/// <p>Describes the state machine associated with a specific execution.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStateMachineForExecution {
    _private: (),
}
impl DescribeStateMachineForExecution {
    /// Creates a new builder-style object to manufacture [`DescribeStateMachineForExecutionInput`](crate::input::DescribeStateMachineForExecutionInput)
    pub fn builder() -> crate::input::describe_state_machine_for_execution_input::Builder {
        crate::input::describe_state_machine_for_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStateMachineForExecution {
    type Output = std::result::Result<
        crate::output::DescribeStateMachineForExecutionOutput,
        crate::error::DescribeStateMachineForExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_state_machine_for_execution_error(response)
        } else {
            crate::operation_deser::parse_describe_state_machine_for_execution_response(response)
        }
    }
}

/// <p>Used by workers to retrieve a task (with the specified activity ARN) which has been
/// scheduled for execution by a running state machine. This initiates a long poll, where the
/// service holds the HTTP connection open and responds as soon as a task becomes available (i.e.
/// an execution of a task of this type is needed.) The maximum time the service holds on to the
/// request before responding is 60 seconds. If no task is available within 60 seconds, the poll
/// returns a <code>taskToken</code> with a null string.</p>
/// <important>
/// <p>Workers should set their client side socket timeout to at least 65 seconds (5 seconds
/// higher than the maximum time the service may hold the poll request).</p>
/// <p>Polling with <code>GetActivityTask</code> can cause latency in some implementations. See
/// <a href="https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html">Avoid
/// Latency When Polling for Activity Tasks</a> in the Step Functions Developer Guide.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetActivityTask {
    _private: (),
}
impl GetActivityTask {
    /// Creates a new builder-style object to manufacture [`GetActivityTaskInput`](crate::input::GetActivityTaskInput)
    pub fn builder() -> crate::input::get_activity_task_input::Builder {
        crate::input::get_activity_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetActivityTask {
    type Output = std::result::Result<
        crate::output::GetActivityTaskOutput,
        crate::error::GetActivityTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_activity_task_error(response)
        } else {
            crate::operation_deser::parse_get_activity_task_response(response)
        }
    }
}

/// <p>Returns the history of the specified execution as a list of events. By default, the
/// results are returned in ascending order of the <code>timeStamp</code> of the events. Use the
/// <code>reverseOrder</code> parameter to get the latest events first.</p>
/// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
/// Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetExecutionHistory {
    _private: (),
}
impl GetExecutionHistory {
    /// Creates a new builder-style object to manufacture [`GetExecutionHistoryInput`](crate::input::GetExecutionHistoryInput)
    pub fn builder() -> crate::input::get_execution_history_input::Builder {
        crate::input::get_execution_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetExecutionHistory {
    type Output = std::result::Result<
        crate::output::GetExecutionHistoryOutput,
        crate::error::GetExecutionHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_execution_history_error(response)
        } else {
            crate::operation_deser::parse_get_execution_history_response(response)
        }
    }
}

/// <p>Lists the existing activities.</p>
/// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
/// Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListActivities {
    _private: (),
}
impl ListActivities {
    /// Creates a new builder-style object to manufacture [`ListActivitiesInput`](crate::input::ListActivitiesInput)
    pub fn builder() -> crate::input::list_activities_input::Builder {
        crate::input::list_activities_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListActivities {
    type Output =
        std::result::Result<crate::output::ListActivitiesOutput, crate::error::ListActivitiesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_activities_error(response)
        } else {
            crate::operation_deser::parse_list_activities_response(response)
        }
    }
}

/// <p>Lists the executions of a state machine that meet the filtering criteria. Results are
/// sorted by time, with the most recent execution first.</p>
/// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
/// Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListExecutions {
    _private: (),
}
impl ListExecutions {
    /// Creates a new builder-style object to manufacture [`ListExecutionsInput`](crate::input::ListExecutionsInput)
    pub fn builder() -> crate::input::list_executions_input::Builder {
        crate::input::list_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListExecutions {
    type Output =
        std::result::Result<crate::output::ListExecutionsOutput, crate::error::ListExecutionsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_executions_error(response)
        } else {
            crate::operation_deser::parse_list_executions_response(response)
        }
    }
}

/// <p>Lists the existing state machines.</p>
/// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
/// Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
/// <note>
/// <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListStateMachines {
    _private: (),
}
impl ListStateMachines {
    /// Creates a new builder-style object to manufacture [`ListStateMachinesInput`](crate::input::ListStateMachinesInput)
    pub fn builder() -> crate::input::list_state_machines_input::Builder {
        crate::input::list_state_machines_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListStateMachines {
    type Output = std::result::Result<
        crate::output::ListStateMachinesOutput,
        crate::error::ListStateMachinesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_state_machines_error(response)
        } else {
            crate::operation_deser::parse_list_state_machines_response(response)
        }
    }
}

/// <p>List tags for a given resource.</p>
/// <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
/// pattern to report that the task identified by the <code>taskToken</code> failed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendTaskFailure {
    _private: (),
}
impl SendTaskFailure {
    /// Creates a new builder-style object to manufacture [`SendTaskFailureInput`](crate::input::SendTaskFailureInput)
    pub fn builder() -> crate::input::send_task_failure_input::Builder {
        crate::input::send_task_failure_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendTaskFailure {
    type Output = std::result::Result<
        crate::output::SendTaskFailureOutput,
        crate::error::SendTaskFailureError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_task_failure_error(response)
        } else {
            crate::operation_deser::parse_send_task_failure_response(response)
        }
    }
}

/// <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
/// pattern to report to Step Functions that the task represented by the specified
/// <code>taskToken</code> is still making progress. This action resets the
/// <code>Heartbeat</code> clock. The <code>Heartbeat</code> threshold is specified in the state
/// machine's Amazon States Language definition (<code>HeartbeatSeconds</code>). This action does not in itself
/// create an event in the execution history. However, if the task times out, the execution
/// history contains an <code>ActivityTimedOut</code> entry for activities, or a
/// <code>TaskTimedOut</code> entry for for tasks using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync">job run</a> or
/// <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
/// pattern.</p>
/// <note>
/// <p>The <code>Timeout</code> of a task, defined in the state machine's Amazon States Language definition, is
/// its maximum allowed duration, regardless of the number of <a>SendTaskHeartbeat</a> requests received. Use <code>HeartbeatSeconds</code> to configure the timeout interval
/// for heartbeats.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendTaskHeartbeat {
    _private: (),
}
impl SendTaskHeartbeat {
    /// Creates a new builder-style object to manufacture [`SendTaskHeartbeatInput`](crate::input::SendTaskHeartbeatInput)
    pub fn builder() -> crate::input::send_task_heartbeat_input::Builder {
        crate::input::send_task_heartbeat_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendTaskHeartbeat {
    type Output = std::result::Result<
        crate::output::SendTaskHeartbeatOutput,
        crate::error::SendTaskHeartbeatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_task_heartbeat_error(response)
        } else {
            crate::operation_deser::parse_send_task_heartbeat_response(response)
        }
    }
}

/// <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
/// pattern to report that the task identified by the <code>taskToken</code> completed
/// successfully.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendTaskSuccess {
    _private: (),
}
impl SendTaskSuccess {
    /// Creates a new builder-style object to manufacture [`SendTaskSuccessInput`](crate::input::SendTaskSuccessInput)
    pub fn builder() -> crate::input::send_task_success_input::Builder {
        crate::input::send_task_success_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendTaskSuccess {
    type Output = std::result::Result<
        crate::output::SendTaskSuccessOutput,
        crate::error::SendTaskSuccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_task_success_error(response)
        } else {
            crate::operation_deser::parse_send_task_success_response(response)
        }
    }
}

/// <p>Starts a state machine execution.</p>
/// <note>
/// <p>
/// <code>StartExecution</code> is idempotent. If <code>StartExecution</code> is called with
/// the same name and input as a running execution, the call will succeed and return the same
/// response as the original request. If the execution is closed or if the input is different,
/// it will return a 400 <code>ExecutionAlreadyExists</code> error. Names can be reused after 90
/// days. </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartExecution {
    _private: (),
}
impl StartExecution {
    /// Creates a new builder-style object to manufacture [`StartExecutionInput`](crate::input::StartExecutionInput)
    pub fn builder() -> crate::input::start_execution_input::Builder {
        crate::input::start_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartExecution {
    type Output =
        std::result::Result<crate::output::StartExecutionOutput, crate::error::StartExecutionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_execution_error(response)
        } else {
            crate::operation_deser::parse_start_execution_response(response)
        }
    }
}

/// <p>Starts a Synchronous Express state machine execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartSyncExecution {
    _private: (),
}
impl StartSyncExecution {
    /// Creates a new builder-style object to manufacture [`StartSyncExecutionInput`](crate::input::StartSyncExecutionInput)
    pub fn builder() -> crate::input::start_sync_execution_input::Builder {
        crate::input::start_sync_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartSyncExecution {
    type Output = std::result::Result<
        crate::output::StartSyncExecutionOutput,
        crate::error::StartSyncExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_sync_execution_error(response)
        } else {
            crate::operation_deser::parse_start_sync_execution_response(response)
        }
    }
}

/// <p>Stops an execution.</p>
/// <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopExecution {
    _private: (),
}
impl StopExecution {
    /// Creates a new builder-style object to manufacture [`StopExecutionInput`](crate::input::StopExecutionInput)
    pub fn builder() -> crate::input::stop_execution_input::Builder {
        crate::input::stop_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopExecution {
    type Output =
        std::result::Result<crate::output::StopExecutionOutput, crate::error::StopExecutionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_execution_error(response)
        } else {
            crate::operation_deser::parse_stop_execution_response(response)
        }
    }
}

/// <p>Add a tag to a Step Functions resource.</p>
/// <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
/// Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
/// Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
/// Tags</a>.</p>
/// <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Remove a tag from a Step Functions resource</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an existing state machine by modifying its <code>definition</code>,
/// <code>roleArn</code>, or <code>loggingConfiguration</code>. Running executions will continue
/// to use the previous <code>definition</code> and <code>roleArn</code>. You must include at
/// least one of <code>definition</code> or <code>roleArn</code> or you will receive a
/// <code>MissingRequiredParameter</code> error.</p>
/// <note>
/// <p>All <code>StartExecution</code> calls within a few seconds will use the updated
/// <code>definition</code> and <code>roleArn</code>. Executions started immediately after
/// calling <code>UpdateStateMachine</code> may use the previous state machine
/// <code>definition</code> and <code>roleArn</code>. </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateStateMachine {
    _private: (),
}
impl UpdateStateMachine {
    /// Creates a new builder-style object to manufacture [`UpdateStateMachineInput`](crate::input::UpdateStateMachineInput)
    pub fn builder() -> crate::input::update_state_machine_input::Builder {
        crate::input::update_state_machine_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateStateMachine {
    type Output = std::result::Result<
        crate::output::UpdateStateMachineOutput,
        crate::error::UpdateStateMachineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_state_machine_error(response)
        } else {
            crate::operation_deser::parse_update_state_machine_response(response)
        }
    }
}
