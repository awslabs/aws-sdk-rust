// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeStateMachine`](crate::operation::describe_state_machine::builders::DescribeStateMachineFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`state_machine_arn(impl Into<String>)`](crate::operation::describe_state_machine::builders::DescribeStateMachineFluentBuilder::state_machine_arn) / [`set_state_machine_arn(Option<String>)`](crate::operation::describe_state_machine::builders::DescribeStateMachineFluentBuilder::set_state_machine_arn): <p>The Amazon Resource Name (ARN) of the state machine to describe.</p>
    /// - On success, responds with [`DescribeStateMachineOutput`](crate::operation::describe_state_machine::DescribeStateMachineOutput) with field(s):
    ///   - [`state_machine_arn(Option<String>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::state_machine_arn): <p>The Amazon Resource Name (ARN) that identifies the state machine.</p>
    ///   - [`name(Option<String>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::name): <p>The name of the state machine.</p>  <p>A name must <i>not</i> contain:</p>  <ul>   <li> <p>white space</p> </li>   <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li>   <li> <p>wildcard characters <code>? *</code> </p> </li>   <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li>   <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li>  </ul>  <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    ///   - [`status(Option<StateMachineStatus>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::status): <p>The current status of the state machine.</p>
    ///   - [`definition(Option<String>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::definition): <p>The Amazon States Language definition of the state machine. See <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a>.</p>
    ///   - [`role_arn(Option<String>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::role_arn): <p>The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. (The IAM role maintains security by granting Step Functions access to Amazon Web Services resources.)</p>
    ///   - [`r#type(Option<StateMachineType>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::type): <p>The <code>type</code> of the state machine (<code>STANDARD</code> or <code>EXPRESS</code>).</p>
    ///   - [`creation_date(Option<DateTime>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::creation_date): <p>The date the state machine is created.</p>
    ///   - [`logging_configuration(Option<LoggingConfiguration>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::logging_configuration): <p>The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs options.</p>
    ///   - [`tracing_configuration(Option<TracingConfiguration>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::tracing_configuration): <p>Selects whether X-Ray tracing is enabled.</p>
    ///   - [`label(Option<String>)`](crate::operation::describe_state_machine::DescribeStateMachineOutput::label): <p>A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN.</p>
    /// - On failure, responds with [`SdkError<DescribeStateMachineError>`](crate::operation::describe_state_machine::DescribeStateMachineError)
    pub fn describe_state_machine(
        &self,
    ) -> crate::operation::describe_state_machine::builders::DescribeStateMachineFluentBuilder {
        crate::operation::describe_state_machine::builders::DescribeStateMachineFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
