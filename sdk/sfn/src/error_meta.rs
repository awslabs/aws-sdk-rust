// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ActivityDoesNotExist(crate::error::ActivityDoesNotExist),
    ActivityLimitExceeded(crate::error::ActivityLimitExceeded),
    ActivityWorkerLimitExceeded(crate::error::ActivityWorkerLimitExceeded),
    ExecutionAlreadyExists(crate::error::ExecutionAlreadyExists),
    ExecutionDoesNotExist(crate::error::ExecutionDoesNotExist),
    ExecutionLimitExceeded(crate::error::ExecutionLimitExceeded),
    InvalidArn(crate::error::InvalidArn),
    InvalidDefinition(crate::error::InvalidDefinition),
    InvalidExecutionInput(crate::error::InvalidExecutionInput),
    InvalidLoggingConfiguration(crate::error::InvalidLoggingConfiguration),
    InvalidName(crate::error::InvalidName),
    InvalidOutput(crate::error::InvalidOutput),
    InvalidToken(crate::error::InvalidToken),
    InvalidTracingConfiguration(crate::error::InvalidTracingConfiguration),
    MissingRequiredParameter(crate::error::MissingRequiredParameter),
    ResourceNotFound(crate::error::ResourceNotFound),
    StateMachineAlreadyExists(crate::error::StateMachineAlreadyExists),
    StateMachineDeleting(crate::error::StateMachineDeleting),
    StateMachineDoesNotExist(crate::error::StateMachineDoesNotExist),
    StateMachineLimitExceeded(crate::error::StateMachineLimitExceeded),
    StateMachineTypeNotSupported(crate::error::StateMachineTypeNotSupported),
    TaskDoesNotExist(crate::error::TaskDoesNotExist),
    TaskTimedOut(crate::error::TaskTimedOut),
    TooManyTags(crate::error::TooManyTags),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActivityDoesNotExist(inner) => inner.fmt(f),
            Error::ActivityLimitExceeded(inner) => inner.fmt(f),
            Error::ActivityWorkerLimitExceeded(inner) => inner.fmt(f),
            Error::ExecutionAlreadyExists(inner) => inner.fmt(f),
            Error::ExecutionDoesNotExist(inner) => inner.fmt(f),
            Error::ExecutionLimitExceeded(inner) => inner.fmt(f),
            Error::InvalidArn(inner) => inner.fmt(f),
            Error::InvalidDefinition(inner) => inner.fmt(f),
            Error::InvalidExecutionInput(inner) => inner.fmt(f),
            Error::InvalidLoggingConfiguration(inner) => inner.fmt(f),
            Error::InvalidName(inner) => inner.fmt(f),
            Error::InvalidOutput(inner) => inner.fmt(f),
            Error::InvalidToken(inner) => inner.fmt(f),
            Error::InvalidTracingConfiguration(inner) => inner.fmt(f),
            Error::MissingRequiredParameter(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::StateMachineAlreadyExists(inner) => inner.fmt(f),
            Error::StateMachineDeleting(inner) => inner.fmt(f),
            Error::StateMachineDoesNotExist(inner) => inner.fmt(f),
            Error::StateMachineLimitExceeded(inner) => inner.fmt(f),
            Error::StateMachineTypeNotSupported(inner) => inner.fmt(f),
            Error::TaskDoesNotExist(inner) => inner.fmt(f),
            Error::TaskTimedOut(inner) => inner.fmt(f),
            Error::TooManyTags(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateActivityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateActivityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateActivityErrorKind::ActivityLimitExceeded(inner) => {
                    Error::ActivityLimitExceeded(inner)
                }
                crate::error::CreateActivityErrorKind::InvalidName(inner) => {
                    Error::InvalidName(inner)
                }
                crate::error::CreateActivityErrorKind::TooManyTags(inner) => {
                    Error::TooManyTags(inner)
                }
                crate::error::CreateActivityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStateMachineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStateMachineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStateMachineErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::CreateStateMachineErrorKind::InvalidDefinition(inner) => {
                    Error::InvalidDefinition(inner)
                }
                crate::error::CreateStateMachineErrorKind::InvalidLoggingConfiguration(inner) => {
                    Error::InvalidLoggingConfiguration(inner)
                }
                crate::error::CreateStateMachineErrorKind::InvalidName(inner) => {
                    Error::InvalidName(inner)
                }
                crate::error::CreateStateMachineErrorKind::InvalidTracingConfiguration(inner) => {
                    Error::InvalidTracingConfiguration(inner)
                }
                crate::error::CreateStateMachineErrorKind::StateMachineAlreadyExists(inner) => {
                    Error::StateMachineAlreadyExists(inner)
                }
                crate::error::CreateStateMachineErrorKind::StateMachineDeleting(inner) => {
                    Error::StateMachineDeleting(inner)
                }
                crate::error::CreateStateMachineErrorKind::StateMachineLimitExceeded(inner) => {
                    Error::StateMachineLimitExceeded(inner)
                }
                crate::error::CreateStateMachineErrorKind::StateMachineTypeNotSupported(inner) => {
                    Error::StateMachineTypeNotSupported(inner)
                }
                crate::error::CreateStateMachineErrorKind::TooManyTags(inner) => {
                    Error::TooManyTags(inner)
                }
                crate::error::CreateStateMachineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteActivityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteActivityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteActivityErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DeleteActivityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStateMachineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStateMachineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStateMachineErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DeleteStateMachineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeActivityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeActivityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeActivityErrorKind::ActivityDoesNotExist(inner) => {
                    Error::ActivityDoesNotExist(inner)
                }
                crate::error::DescribeActivityErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DescribeActivityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExecutionErrorKind::ExecutionDoesNotExist(inner) => {
                    Error::ExecutionDoesNotExist(inner)
                }
                crate::error::DescribeExecutionErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DescribeExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStateMachineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeStateMachineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStateMachineErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DescribeStateMachineErrorKind::StateMachineDoesNotExist(inner) => {
                    Error::StateMachineDoesNotExist(inner)
                }
                crate::error::DescribeStateMachineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStateMachineForExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStateMachineForExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStateMachineForExecutionErrorKind::ExecutionDoesNotExist(
                    inner,
                ) => Error::ExecutionDoesNotExist(inner),
                crate::error::DescribeStateMachineForExecutionErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::DescribeStateMachineForExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetActivityTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetActivityTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetActivityTaskErrorKind::ActivityDoesNotExist(inner) => {
                    Error::ActivityDoesNotExist(inner)
                }
                crate::error::GetActivityTaskErrorKind::ActivityWorkerLimitExceeded(inner) => {
                    Error::ActivityWorkerLimitExceeded(inner)
                }
                crate::error::GetActivityTaskErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::GetActivityTaskErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetExecutionHistoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetExecutionHistoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetExecutionHistoryErrorKind::ExecutionDoesNotExist(inner) => {
                    Error::ExecutionDoesNotExist(inner)
                }
                crate::error::GetExecutionHistoryErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::GetExecutionHistoryErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::GetExecutionHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListActivitiesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListActivitiesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListActivitiesErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::ListActivitiesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListExecutionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListExecutionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListExecutionsErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::ListExecutionsErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::ListExecutionsErrorKind::StateMachineDoesNotExist(inner) => {
                    Error::StateMachineDoesNotExist(inner)
                }
                crate::error::ListExecutionsErrorKind::StateMachineTypeNotSupported(inner) => {
                    Error::StateMachineTypeNotSupported(inner)
                }
                crate::error::ListExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListStateMachinesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListStateMachinesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListStateMachinesErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::ListStateMachinesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendTaskFailureError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendTaskFailureError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendTaskFailureErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::SendTaskFailureErrorKind::TaskDoesNotExist(inner) => {
                    Error::TaskDoesNotExist(inner)
                }
                crate::error::SendTaskFailureErrorKind::TaskTimedOut(inner) => {
                    Error::TaskTimedOut(inner)
                }
                crate::error::SendTaskFailureErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendTaskHeartbeatError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendTaskHeartbeatError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendTaskHeartbeatErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::SendTaskHeartbeatErrorKind::TaskDoesNotExist(inner) => {
                    Error::TaskDoesNotExist(inner)
                }
                crate::error::SendTaskHeartbeatErrorKind::TaskTimedOut(inner) => {
                    Error::TaskTimedOut(inner)
                }
                crate::error::SendTaskHeartbeatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendTaskSuccessError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendTaskSuccessError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendTaskSuccessErrorKind::InvalidOutput(inner) => {
                    Error::InvalidOutput(inner)
                }
                crate::error::SendTaskSuccessErrorKind::InvalidToken(inner) => {
                    Error::InvalidToken(inner)
                }
                crate::error::SendTaskSuccessErrorKind::TaskDoesNotExist(inner) => {
                    Error::TaskDoesNotExist(inner)
                }
                crate::error::SendTaskSuccessErrorKind::TaskTimedOut(inner) => {
                    Error::TaskTimedOut(inner)
                }
                crate::error::SendTaskSuccessErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartExecutionErrorKind::ExecutionAlreadyExists(inner) => {
                    Error::ExecutionAlreadyExists(inner)
                }
                crate::error::StartExecutionErrorKind::ExecutionLimitExceeded(inner) => {
                    Error::ExecutionLimitExceeded(inner)
                }
                crate::error::StartExecutionErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::StartExecutionErrorKind::InvalidExecutionInput(inner) => {
                    Error::InvalidExecutionInput(inner)
                }
                crate::error::StartExecutionErrorKind::InvalidName(inner) => {
                    Error::InvalidName(inner)
                }
                crate::error::StartExecutionErrorKind::StateMachineDeleting(inner) => {
                    Error::StateMachineDeleting(inner)
                }
                crate::error::StartExecutionErrorKind::StateMachineDoesNotExist(inner) => {
                    Error::StateMachineDoesNotExist(inner)
                }
                crate::error::StartExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartSyncExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartSyncExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartSyncExecutionErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::StartSyncExecutionErrorKind::InvalidExecutionInput(inner) => {
                    Error::InvalidExecutionInput(inner)
                }
                crate::error::StartSyncExecutionErrorKind::InvalidName(inner) => {
                    Error::InvalidName(inner)
                }
                crate::error::StartSyncExecutionErrorKind::StateMachineDeleting(inner) => {
                    Error::StateMachineDeleting(inner)
                }
                crate::error::StartSyncExecutionErrorKind::StateMachineDoesNotExist(inner) => {
                    Error::StateMachineDoesNotExist(inner)
                }
                crate::error::StartSyncExecutionErrorKind::StateMachineTypeNotSupported(inner) => {
                    Error::StateMachineTypeNotSupported(inner)
                }
                crate::error::StartSyncExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopExecutionErrorKind::ExecutionDoesNotExist(inner) => {
                    Error::ExecutionDoesNotExist(inner)
                }
                crate::error::StopExecutionErrorKind::InvalidArn(inner) => Error::InvalidArn(inner),
                crate::error::StopExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InvalidArn(inner) => Error::InvalidArn(inner),
                crate::error::TagResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::TagResourceErrorKind::TooManyTags(inner) => Error::TooManyTags(inner),
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InvalidArn(inner) => Error::InvalidArn(inner),
                crate::error::UntagResourceErrorKind::ResourceNotFound(inner) => {
                    Error::ResourceNotFound(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStateMachineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStateMachineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStateMachineErrorKind::InvalidArn(inner) => {
                    Error::InvalidArn(inner)
                }
                crate::error::UpdateStateMachineErrorKind::InvalidDefinition(inner) => {
                    Error::InvalidDefinition(inner)
                }
                crate::error::UpdateStateMachineErrorKind::InvalidLoggingConfiguration(inner) => {
                    Error::InvalidLoggingConfiguration(inner)
                }
                crate::error::UpdateStateMachineErrorKind::InvalidTracingConfiguration(inner) => {
                    Error::InvalidTracingConfiguration(inner)
                }
                crate::error::UpdateStateMachineErrorKind::MissingRequiredParameter(inner) => {
                    Error::MissingRequiredParameter(inner)
                }
                crate::error::UpdateStateMachineErrorKind::StateMachineDeleting(inner) => {
                    Error::StateMachineDeleting(inner)
                }
                crate::error::UpdateStateMachineErrorKind::StateMachineDoesNotExist(inner) => {
                    Error::StateMachineDoesNotExist(inner)
                }
                crate::error::UpdateStateMachineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
