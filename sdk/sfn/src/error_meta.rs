// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified activity does not exist.</p>
    ActivityDoesNotExist(crate::error::ActivityDoesNotExist),
    /// <p>The maximum number of activities has been reached. Existing activities must be deleted before a new activity can be created.</p>
    ActivityLimitExceeded(crate::error::ActivityLimitExceeded),
    /// <p>The maximum number of workers concurrently polling for activity tasks has been reached.</p>
    ActivityWorkerLimitExceeded(crate::error::ActivityWorkerLimitExceeded),
    /// <p>The execution has the same <code>name</code> as another execution (but a different <code>input</code>).</p> <note>
    /// <p>Executions with the same <code>name</code> and <code>input</code> are considered idempotent.</p>
    /// </note>
    ExecutionAlreadyExists(crate::error::ExecutionAlreadyExists),
    /// <p>The specified execution does not exist.</p>
    ExecutionDoesNotExist(crate::error::ExecutionDoesNotExist),
    /// <p>The maximum number of running executions has been reached. Running executions must end or be stopped before a new execution can be started.</p>
    ExecutionLimitExceeded(crate::error::ExecutionLimitExceeded),
    /// <p>The provided Amazon Resource Name (ARN) is not valid.</p>
    InvalidArn(crate::error::InvalidArn),
    /// <p>The provided Amazon States Language definition is not valid.</p>
    InvalidDefinition(crate::error::InvalidDefinition),
    /// <p>The provided JSON input data is not valid.</p>
    InvalidExecutionInput(crate::error::InvalidExecutionInput),
    /// <p></p>
    InvalidLoggingConfiguration(crate::error::InvalidLoggingConfiguration),
    /// <p>The provided name is not valid.</p>
    InvalidName(crate::error::InvalidName),
    /// <p>The provided JSON output data is not valid.</p>
    InvalidOutput(crate::error::InvalidOutput),
    /// <p>The provided token is not valid.</p>
    InvalidToken(crate::error::InvalidToken),
    /// <p>Your <code>tracingConfiguration</code> key does not match, or <code>enabled</code> has not been set to <code>true</code> or <code>false</code>.</p>
    InvalidTracingConfiguration(crate::error::InvalidTracingConfiguration),
    /// <p>Request is missing a required parameter. This error occurs if both <code>definition</code> and <code>roleArn</code> are not specified.</p>
    MissingRequiredParameter(crate::error::MissingRequiredParameter),
    /// <p>Could not find the referenced resource. Only state machine and activity ARNs are supported.</p>
    ResourceNotFound(crate::error::ResourceNotFound),
    /// <p>A state machine with the same name but a different definition or role ARN already exists.</p>
    StateMachineAlreadyExists(crate::error::StateMachineAlreadyExists),
    /// <p>The specified state machine is being deleted.</p>
    StateMachineDeleting(crate::error::StateMachineDeleting),
    /// <p>The specified state machine does not exist.</p>
    StateMachineDoesNotExist(crate::error::StateMachineDoesNotExist),
    /// <p>The maximum number of state machines has been reached. Existing state machines must be deleted before a new state machine can be created.</p>
    StateMachineLimitExceeded(crate::error::StateMachineLimitExceeded),
    /// <p></p>
    StateMachineTypeNotSupported(crate::error::StateMachineTypeNotSupported),
    #[allow(missing_docs)] // documentation missing in model
    TaskDoesNotExist(crate::error::TaskDoesNotExist),
    #[allow(missing_docs)] // documentation missing in model
    TaskTimedOut(crate::error::TaskTimedOut),
    /// <p>You've exceeded the number of tags allowed for a resource. See the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html"> Limits Topic</a> in the Step Functions Developer Guide.</p>
    TooManyTags(crate::error::TooManyTags),
    /// <p>The input does not satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActivityDoesNotExist(inner) => inner.fmt(f),
            Error::ActivityLimitExceeded(inner) => inner.fmt(f),
            Error::ActivityWorkerLimitExceeded(inner) => inner.fmt(f),
            Error::ExecutionAlreadyExists(inner) => inner.fmt(f),
            Error::ExecutionDoesNotExist(inner) => inner.fmt(f),
            Error::ExecutionLimitExceeded(inner) => inner.fmt(f),
            Error::InvalidArn(inner) => inner.fmt(f),
            Error::InvalidDefinition(inner) => inner.fmt(f),
            Error::InvalidExecutionInput(inner) => inner.fmt(f),
            Error::InvalidLoggingConfiguration(inner) => inner.fmt(f),
            Error::InvalidName(inner) => inner.fmt(f),
            Error::InvalidOutput(inner) => inner.fmt(f),
            Error::InvalidToken(inner) => inner.fmt(f),
            Error::InvalidTracingConfiguration(inner) => inner.fmt(f),
            Error::MissingRequiredParameter(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::StateMachineAlreadyExists(inner) => inner.fmt(f),
            Error::StateMachineDeleting(inner) => inner.fmt(f),
            Error::StateMachineDoesNotExist(inner) => inner.fmt(f),
            Error::StateMachineLimitExceeded(inner) => inner.fmt(f),
            Error::StateMachineTypeNotSupported(inner) => inner.fmt(f),
            Error::TaskDoesNotExist(inner) => inner.fmt(f),
            Error::TaskTimedOut(inner) => inner.fmt(f),
            Error::TooManyTags(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateActivityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateActivityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateActivityError> for Error {
    fn from(err: crate::error::CreateActivityError) -> Self {
        match err {
            crate::error::CreateActivityError::ActivityLimitExceeded(inner) => {
                Error::ActivityLimitExceeded(inner)
            }
            crate::error::CreateActivityError::InvalidName(inner) => Error::InvalidName(inner),
            crate::error::CreateActivityError::TooManyTags(inner) => Error::TooManyTags(inner),
            crate::error::CreateActivityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStateMachineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateStateMachineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateStateMachineError> for Error {
    fn from(err: crate::error::CreateStateMachineError) -> Self {
        match err {
            crate::error::CreateStateMachineError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::CreateStateMachineError::InvalidDefinition(inner) => {
                Error::InvalidDefinition(inner)
            }
            crate::error::CreateStateMachineError::InvalidLoggingConfiguration(inner) => {
                Error::InvalidLoggingConfiguration(inner)
            }
            crate::error::CreateStateMachineError::InvalidName(inner) => Error::InvalidName(inner),
            crate::error::CreateStateMachineError::InvalidTracingConfiguration(inner) => {
                Error::InvalidTracingConfiguration(inner)
            }
            crate::error::CreateStateMachineError::StateMachineAlreadyExists(inner) => {
                Error::StateMachineAlreadyExists(inner)
            }
            crate::error::CreateStateMachineError::StateMachineDeleting(inner) => {
                Error::StateMachineDeleting(inner)
            }
            crate::error::CreateStateMachineError::StateMachineLimitExceeded(inner) => {
                Error::StateMachineLimitExceeded(inner)
            }
            crate::error::CreateStateMachineError::StateMachineTypeNotSupported(inner) => {
                Error::StateMachineTypeNotSupported(inner)
            }
            crate::error::CreateStateMachineError::TooManyTags(inner) => Error::TooManyTags(inner),
            crate::error::CreateStateMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteActivityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteActivityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteActivityError> for Error {
    fn from(err: crate::error::DeleteActivityError) -> Self {
        match err {
            crate::error::DeleteActivityError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DeleteActivityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStateMachineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteStateMachineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteStateMachineError> for Error {
    fn from(err: crate::error::DeleteStateMachineError) -> Self {
        match err {
            crate::error::DeleteStateMachineError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DeleteStateMachineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteStateMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeActivityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeActivityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeActivityError> for Error {
    fn from(err: crate::error::DescribeActivityError) -> Self {
        match err {
            crate::error::DescribeActivityError::ActivityDoesNotExist(inner) => {
                Error::ActivityDoesNotExist(inner)
            }
            crate::error::DescribeActivityError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DescribeActivityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExecutionError> for Error {
    fn from(err: crate::error::DescribeExecutionError) -> Self {
        match err {
            crate::error::DescribeExecutionError::ExecutionDoesNotExist(inner) => {
                Error::ExecutionDoesNotExist(inner)
            }
            crate::error::DescribeExecutionError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DescribeExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMapRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeMapRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMapRunError> for Error {
    fn from(err: crate::error::DescribeMapRunError) -> Self {
        match err {
            crate::error::DescribeMapRunError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DescribeMapRunError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::DescribeMapRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStateMachineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStateMachineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStateMachineError> for Error {
    fn from(err: crate::error::DescribeStateMachineError) -> Self {
        match err {
            crate::error::DescribeStateMachineError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::DescribeStateMachineError::StateMachineDoesNotExist(inner) => {
                Error::StateMachineDoesNotExist(inner)
            }
            crate::error::DescribeStateMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeStateMachineForExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeStateMachineForExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStateMachineForExecutionError> for Error {
    fn from(err: crate::error::DescribeStateMachineForExecutionError) -> Self {
        match err {
            crate::error::DescribeStateMachineForExecutionError::ExecutionDoesNotExist(inner) => {
                Error::ExecutionDoesNotExist(inner)
            }
            crate::error::DescribeStateMachineForExecutionError::InvalidArn(inner) => {
                Error::InvalidArn(inner)
            }
            crate::error::DescribeStateMachineForExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetActivityTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetActivityTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetActivityTaskError> for Error {
    fn from(err: crate::error::GetActivityTaskError) -> Self {
        match err {
            crate::error::GetActivityTaskError::ActivityDoesNotExist(inner) => {
                Error::ActivityDoesNotExist(inner)
            }
            crate::error::GetActivityTaskError::ActivityWorkerLimitExceeded(inner) => {
                Error::ActivityWorkerLimitExceeded(inner)
            }
            crate::error::GetActivityTaskError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::GetActivityTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExecutionHistoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetExecutionHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExecutionHistoryError> for Error {
    fn from(err: crate::error::GetExecutionHistoryError) -> Self {
        match err {
            crate::error::GetExecutionHistoryError::ExecutionDoesNotExist(inner) => {
                Error::ExecutionDoesNotExist(inner)
            }
            crate::error::GetExecutionHistoryError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::GetExecutionHistoryError::InvalidToken(inner) => {
                Error::InvalidToken(inner)
            }
            crate::error::GetExecutionHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListActivitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListActivitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListActivitiesError> for Error {
    fn from(err: crate::error::ListActivitiesError) -> Self {
        match err {
            crate::error::ListActivitiesError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::ListActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExecutionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExecutionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExecutionsError> for Error {
    fn from(err: crate::error::ListExecutionsError) -> Self {
        match err {
            crate::error::ListExecutionsError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::ListExecutionsError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::ListExecutionsError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::ListExecutionsError::StateMachineDoesNotExist(inner) => {
                Error::StateMachineDoesNotExist(inner)
            }
            crate::error::ListExecutionsError::StateMachineTypeNotSupported(inner) => {
                Error::StateMachineTypeNotSupported(inner)
            }
            crate::error::ListExecutionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMapRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMapRunsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMapRunsError> for Error {
    fn from(err: crate::error::ListMapRunsError) -> Self {
        match err {
            crate::error::ListMapRunsError::ExecutionDoesNotExist(inner) => {
                Error::ExecutionDoesNotExist(inner)
            }
            crate::error::ListMapRunsError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::ListMapRunsError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::ListMapRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStateMachinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListStateMachinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListStateMachinesError> for Error {
    fn from(err: crate::error::ListStateMachinesError) -> Self {
        match err {
            crate::error::ListStateMachinesError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::ListStateMachinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::ListTagsForResourceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendTaskFailureError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendTaskFailureError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendTaskFailureError> for Error {
    fn from(err: crate::error::SendTaskFailureError) -> Self {
        match err {
            crate::error::SendTaskFailureError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::SendTaskFailureError::TaskDoesNotExist(inner) => {
                Error::TaskDoesNotExist(inner)
            }
            crate::error::SendTaskFailureError::TaskTimedOut(inner) => Error::TaskTimedOut(inner),
            crate::error::SendTaskFailureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendTaskHeartbeatError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendTaskHeartbeatError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendTaskHeartbeatError> for Error {
    fn from(err: crate::error::SendTaskHeartbeatError) -> Self {
        match err {
            crate::error::SendTaskHeartbeatError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::SendTaskHeartbeatError::TaskDoesNotExist(inner) => {
                Error::TaskDoesNotExist(inner)
            }
            crate::error::SendTaskHeartbeatError::TaskTimedOut(inner) => Error::TaskTimedOut(inner),
            crate::error::SendTaskHeartbeatError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendTaskSuccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendTaskSuccessError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendTaskSuccessError> for Error {
    fn from(err: crate::error::SendTaskSuccessError) -> Self {
        match err {
            crate::error::SendTaskSuccessError::InvalidOutput(inner) => Error::InvalidOutput(inner),
            crate::error::SendTaskSuccessError::InvalidToken(inner) => Error::InvalidToken(inner),
            crate::error::SendTaskSuccessError::TaskDoesNotExist(inner) => {
                Error::TaskDoesNotExist(inner)
            }
            crate::error::SendTaskSuccessError::TaskTimedOut(inner) => Error::TaskTimedOut(inner),
            crate::error::SendTaskSuccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartExecutionError> for Error {
    fn from(err: crate::error::StartExecutionError) -> Self {
        match err {
            crate::error::StartExecutionError::ExecutionAlreadyExists(inner) => {
                Error::ExecutionAlreadyExists(inner)
            }
            crate::error::StartExecutionError::ExecutionLimitExceeded(inner) => {
                Error::ExecutionLimitExceeded(inner)
            }
            crate::error::StartExecutionError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::StartExecutionError::InvalidExecutionInput(inner) => {
                Error::InvalidExecutionInput(inner)
            }
            crate::error::StartExecutionError::InvalidName(inner) => Error::InvalidName(inner),
            crate::error::StartExecutionError::StateMachineDeleting(inner) => {
                Error::StateMachineDeleting(inner)
            }
            crate::error::StartExecutionError::StateMachineDoesNotExist(inner) => {
                Error::StateMachineDoesNotExist(inner)
            }
            crate::error::StartExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSyncExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartSyncExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSyncExecutionError> for Error {
    fn from(err: crate::error::StartSyncExecutionError) -> Self {
        match err {
            crate::error::StartSyncExecutionError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::StartSyncExecutionError::InvalidExecutionInput(inner) => {
                Error::InvalidExecutionInput(inner)
            }
            crate::error::StartSyncExecutionError::InvalidName(inner) => Error::InvalidName(inner),
            crate::error::StartSyncExecutionError::StateMachineDeleting(inner) => {
                Error::StateMachineDeleting(inner)
            }
            crate::error::StartSyncExecutionError::StateMachineDoesNotExist(inner) => {
                Error::StateMachineDoesNotExist(inner)
            }
            crate::error::StartSyncExecutionError::StateMachineTypeNotSupported(inner) => {
                Error::StateMachineTypeNotSupported(inner)
            }
            crate::error::StartSyncExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopExecutionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopExecutionError> for Error {
    fn from(err: crate::error::StopExecutionError) -> Self {
        match err {
            crate::error::StopExecutionError::ExecutionDoesNotExist(inner) => {
                Error::ExecutionDoesNotExist(inner)
            }
            crate::error::StopExecutionError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::StopExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StopExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::TagResourceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::TagResourceError::TooManyTags(inner) => Error::TooManyTags(inner),
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::UntagResourceError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMapRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMapRunError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMapRunError> for Error {
    fn from(err: crate::error::UpdateMapRunError) -> Self {
        match err {
            crate::error::UpdateMapRunError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::UpdateMapRunError::ResourceNotFound(inner) => {
                Error::ResourceNotFound(inner)
            }
            crate::error::UpdateMapRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateMapRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStateMachineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateStateMachineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateStateMachineError> for Error {
    fn from(err: crate::error::UpdateStateMachineError) -> Self {
        match err {
            crate::error::UpdateStateMachineError::InvalidArn(inner) => Error::InvalidArn(inner),
            crate::error::UpdateStateMachineError::InvalidDefinition(inner) => {
                Error::InvalidDefinition(inner)
            }
            crate::error::UpdateStateMachineError::InvalidLoggingConfiguration(inner) => {
                Error::InvalidLoggingConfiguration(inner)
            }
            crate::error::UpdateStateMachineError::InvalidTracingConfiguration(inner) => {
                Error::InvalidTracingConfiguration(inner)
            }
            crate::error::UpdateStateMachineError::MissingRequiredParameter(inner) => {
                Error::MissingRequiredParameter(inner)
            }
            crate::error::UpdateStateMachineError::StateMachineDeleting(inner) => {
                Error::StateMachineDeleting(inner)
            }
            crate::error::UpdateStateMachineError::StateMachineDoesNotExist(inner) => {
                Error::StateMachineDoesNotExist(inner)
            }
            crate::error::UpdateStateMachineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateStateMachineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ActivityDoesNotExist(e) => e.request_id(),
            Self::ActivityLimitExceeded(e) => e.request_id(),
            Self::ActivityWorkerLimitExceeded(e) => e.request_id(),
            Self::ExecutionAlreadyExists(e) => e.request_id(),
            Self::ExecutionDoesNotExist(e) => e.request_id(),
            Self::ExecutionLimitExceeded(e) => e.request_id(),
            Self::InvalidArn(e) => e.request_id(),
            Self::InvalidDefinition(e) => e.request_id(),
            Self::InvalidExecutionInput(e) => e.request_id(),
            Self::InvalidLoggingConfiguration(e) => e.request_id(),
            Self::InvalidName(e) => e.request_id(),
            Self::InvalidOutput(e) => e.request_id(),
            Self::InvalidToken(e) => e.request_id(),
            Self::InvalidTracingConfiguration(e) => e.request_id(),
            Self::MissingRequiredParameter(e) => e.request_id(),
            Self::ResourceNotFound(e) => e.request_id(),
            Self::StateMachineAlreadyExists(e) => e.request_id(),
            Self::StateMachineDeleting(e) => e.request_id(),
            Self::StateMachineDoesNotExist(e) => e.request_id(),
            Self::StateMachineLimitExceeded(e) => e.request_id(),
            Self::StateMachineTypeNotSupported(e) => e.request_id(),
            Self::TaskDoesNotExist(e) => e.request_id(),
            Self::TaskTimedOut(e) => e.request_id(),
            Self::TooManyTags(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
