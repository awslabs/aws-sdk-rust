// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn batch_get_collaboration_analysis_template_output_correct_errors(
    mut builder: crate::operation::batch_get_collaboration_analysis_template::builders::BatchGetCollaborationAnalysisTemplateOutputBuilder,
) -> crate::operation::batch_get_collaboration_analysis_template::builders::BatchGetCollaborationAnalysisTemplateOutputBuilder {
    if builder.collaboration_analysis_templates.is_none() {
        builder.collaboration_analysis_templates = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_schema_output_correct_errors(
    mut builder: crate::operation::batch_get_schema::builders::BatchGetSchemaOutputBuilder,
) -> crate::operation::batch_get_schema::builders::BatchGetSchemaOutputBuilder {
    if builder.schemas.is_none() {
        builder.schemas = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_name.is_none() {
        builder.quota_name = Some(Default::default())
    }
    if builder.quota_value.is_none() {
        builder.quota_value = Some(Default::default())
    }
    builder
}

pub(crate) fn create_analysis_template_output_correct_errors(
    mut builder: crate::operation::create_analysis_template::builders::CreateAnalysisTemplateOutputBuilder,
) -> crate::operation::create_analysis_template::builders::CreateAnalysisTemplateOutputBuilder {
    if builder.analysis_template.is_none() {
        builder.analysis_template = {
            let builder = crate::types::builders::AnalysisTemplateBuilder::default();
            crate::serde_util::analysis_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_collaboration_output_correct_errors(
    mut builder: crate::operation::create_collaboration::builders::CreateCollaborationOutputBuilder,
) -> crate::operation::create_collaboration::builders::CreateCollaborationOutputBuilder {
    if builder.collaboration.is_none() {
        builder.collaboration = {
            let builder = crate::types::builders::CollaborationBuilder::default();
            crate::serde_util::collaboration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_configured_table_output_correct_errors(
    mut builder: crate::operation::create_configured_table::builders::CreateConfiguredTableOutputBuilder,
) -> crate::operation::create_configured_table::builders::CreateConfiguredTableOutputBuilder {
    if builder.configured_table.is_none() {
        builder.configured_table = {
            let builder = crate::types::builders::ConfiguredTableBuilder::default();
            crate::serde_util::configured_table_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_configured_table_analysis_rule_output_correct_errors(
    mut builder: crate::operation::create_configured_table_analysis_rule::builders::CreateConfiguredTableAnalysisRuleOutputBuilder,
) -> crate::operation::create_configured_table_analysis_rule::builders::CreateConfiguredTableAnalysisRuleOutputBuilder {
    if builder.analysis_rule.is_none() {
        builder.analysis_rule = {
            let builder = crate::types::builders::ConfiguredTableAnalysisRuleBuilder::default();
            crate::serde_util::configured_table_analysis_rule_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_configured_table_association_output_correct_errors(
    mut builder: crate::operation::create_configured_table_association::builders::CreateConfiguredTableAssociationOutputBuilder,
) -> crate::operation::create_configured_table_association::builders::CreateConfiguredTableAssociationOutputBuilder {
    if builder.configured_table_association.is_none() {
        builder.configured_table_association = {
            let builder = crate::types::builders::ConfiguredTableAssociationBuilder::default();
            crate::serde_util::configured_table_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_membership_output_correct_errors(
    mut builder: crate::operation::create_membership::builders::CreateMembershipOutputBuilder,
) -> crate::operation::create_membership::builders::CreateMembershipOutputBuilder {
    if builder.membership.is_none() {
        builder.membership = {
            let builder = crate::types::builders::MembershipBuilder::default();
            crate::serde_util::membership_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_analysis_template_output_correct_errors(
    mut builder: crate::operation::get_analysis_template::builders::GetAnalysisTemplateOutputBuilder,
) -> crate::operation::get_analysis_template::builders::GetAnalysisTemplateOutputBuilder {
    if builder.analysis_template.is_none() {
        builder.analysis_template = {
            let builder = crate::types::builders::AnalysisTemplateBuilder::default();
            crate::serde_util::analysis_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_collaboration_output_correct_errors(
    mut builder: crate::operation::get_collaboration::builders::GetCollaborationOutputBuilder,
) -> crate::operation::get_collaboration::builders::GetCollaborationOutputBuilder {
    if builder.collaboration.is_none() {
        builder.collaboration = {
            let builder = crate::types::builders::CollaborationBuilder::default();
            crate::serde_util::collaboration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_collaboration_analysis_template_output_correct_errors(
    mut builder: crate::operation::get_collaboration_analysis_template::builders::GetCollaborationAnalysisTemplateOutputBuilder,
) -> crate::operation::get_collaboration_analysis_template::builders::GetCollaborationAnalysisTemplateOutputBuilder {
    if builder.collaboration_analysis_template.is_none() {
        builder.collaboration_analysis_template = {
            let builder = crate::types::builders::CollaborationAnalysisTemplateBuilder::default();
            crate::serde_util::collaboration_analysis_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_configured_table_output_correct_errors(
    mut builder: crate::operation::get_configured_table::builders::GetConfiguredTableOutputBuilder,
) -> crate::operation::get_configured_table::builders::GetConfiguredTableOutputBuilder {
    if builder.configured_table.is_none() {
        builder.configured_table = {
            let builder = crate::types::builders::ConfiguredTableBuilder::default();
            crate::serde_util::configured_table_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_configured_table_analysis_rule_output_correct_errors(
    mut builder: crate::operation::get_configured_table_analysis_rule::builders::GetConfiguredTableAnalysisRuleOutputBuilder,
) -> crate::operation::get_configured_table_analysis_rule::builders::GetConfiguredTableAnalysisRuleOutputBuilder {
    if builder.analysis_rule.is_none() {
        builder.analysis_rule = {
            let builder = crate::types::builders::ConfiguredTableAnalysisRuleBuilder::default();
            crate::serde_util::configured_table_analysis_rule_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_configured_table_association_output_correct_errors(
    mut builder: crate::operation::get_configured_table_association::builders::GetConfiguredTableAssociationOutputBuilder,
) -> crate::operation::get_configured_table_association::builders::GetConfiguredTableAssociationOutputBuilder {
    if builder.configured_table_association.is_none() {
        builder.configured_table_association = {
            let builder = crate::types::builders::ConfiguredTableAssociationBuilder::default();
            crate::serde_util::configured_table_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_membership_output_correct_errors(
    mut builder: crate::operation::get_membership::builders::GetMembershipOutputBuilder,
) -> crate::operation::get_membership::builders::GetMembershipOutputBuilder {
    if builder.membership.is_none() {
        builder.membership = {
            let builder = crate::types::builders::MembershipBuilder::default();
            crate::serde_util::membership_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_protected_query_output_correct_errors(
    mut builder: crate::operation::get_protected_query::builders::GetProtectedQueryOutputBuilder,
) -> crate::operation::get_protected_query::builders::GetProtectedQueryOutputBuilder {
    if builder.protected_query.is_none() {
        builder.protected_query = {
            let builder = crate::types::builders::ProtectedQueryBuilder::default();
            crate::serde_util::protected_query_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_schema_output_correct_errors(
    mut builder: crate::operation::get_schema::builders::GetSchemaOutputBuilder,
) -> crate::operation::get_schema::builders::GetSchemaOutputBuilder {
    if builder.schema.is_none() {
        builder.schema = {
            let builder = crate::types::builders::SchemaBuilder::default();
            crate::serde_util::schema_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_schema_analysis_rule_output_correct_errors(
    mut builder: crate::operation::get_schema_analysis_rule::builders::GetSchemaAnalysisRuleOutputBuilder,
) -> crate::operation::get_schema_analysis_rule::builders::GetSchemaAnalysisRuleOutputBuilder {
    if builder.analysis_rule.is_none() {
        builder.analysis_rule = {
            let builder = crate::types::builders::AnalysisRuleBuilder::default();
            crate::serde_util::analysis_rule_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_analysis_templates_output_correct_errors(
    mut builder: crate::operation::list_analysis_templates::builders::ListAnalysisTemplatesOutputBuilder,
) -> crate::operation::list_analysis_templates::builders::ListAnalysisTemplatesOutputBuilder {
    if builder.analysis_template_summaries.is_none() {
        builder.analysis_template_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_collaboration_analysis_templates_output_correct_errors(
    mut builder: crate::operation::list_collaboration_analysis_templates::builders::ListCollaborationAnalysisTemplatesOutputBuilder,
) -> crate::operation::list_collaboration_analysis_templates::builders::ListCollaborationAnalysisTemplatesOutputBuilder {
    if builder.collaboration_analysis_template_summaries.is_none() {
        builder.collaboration_analysis_template_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_collaborations_output_correct_errors(
    mut builder: crate::operation::list_collaborations::builders::ListCollaborationsOutputBuilder,
) -> crate::operation::list_collaborations::builders::ListCollaborationsOutputBuilder {
    if builder.collaboration_list.is_none() {
        builder.collaboration_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_configured_table_associations_output_correct_errors(
    mut builder: crate::operation::list_configured_table_associations::builders::ListConfiguredTableAssociationsOutputBuilder,
) -> crate::operation::list_configured_table_associations::builders::ListConfiguredTableAssociationsOutputBuilder {
    if builder.configured_table_association_summaries.is_none() {
        builder.configured_table_association_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_configured_tables_output_correct_errors(
    mut builder: crate::operation::list_configured_tables::builders::ListConfiguredTablesOutputBuilder,
) -> crate::operation::list_configured_tables::builders::ListConfiguredTablesOutputBuilder {
    if builder.configured_table_summaries.is_none() {
        builder.configured_table_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_members_output_correct_errors(
    mut builder: crate::operation::list_members::builders::ListMembersOutputBuilder,
) -> crate::operation::list_members::builders::ListMembersOutputBuilder {
    if builder.member_summaries.is_none() {
        builder.member_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_memberships_output_correct_errors(
    mut builder: crate::operation::list_memberships::builders::ListMembershipsOutputBuilder,
) -> crate::operation::list_memberships::builders::ListMembershipsOutputBuilder {
    if builder.membership_summaries.is_none() {
        builder.membership_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_protected_queries_output_correct_errors(
    mut builder: crate::operation::list_protected_queries::builders::ListProtectedQueriesOutputBuilder,
) -> crate::operation::list_protected_queries::builders::ListProtectedQueriesOutputBuilder {
    if builder.protected_queries.is_none() {
        builder.protected_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_schemas_output_correct_errors(
    mut builder: crate::operation::list_schemas::builders::ListSchemasOutputBuilder,
) -> crate::operation::list_schemas::builders::ListSchemasOutputBuilder {
    if builder.schema_summaries.is_none() {
        builder.schema_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn start_protected_query_output_correct_errors(
    mut builder: crate::operation::start_protected_query::builders::StartProtectedQueryOutputBuilder,
) -> crate::operation::start_protected_query::builders::StartProtectedQueryOutputBuilder {
    if builder.protected_query.is_none() {
        builder.protected_query = {
            let builder = crate::types::builders::ProtectedQueryBuilder::default();
            crate::serde_util::protected_query_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_analysis_template_output_correct_errors(
    mut builder: crate::operation::update_analysis_template::builders::UpdateAnalysisTemplateOutputBuilder,
) -> crate::operation::update_analysis_template::builders::UpdateAnalysisTemplateOutputBuilder {
    if builder.analysis_template.is_none() {
        builder.analysis_template = {
            let builder = crate::types::builders::AnalysisTemplateBuilder::default();
            crate::serde_util::analysis_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_collaboration_output_correct_errors(
    mut builder: crate::operation::update_collaboration::builders::UpdateCollaborationOutputBuilder,
) -> crate::operation::update_collaboration::builders::UpdateCollaborationOutputBuilder {
    if builder.collaboration.is_none() {
        builder.collaboration = {
            let builder = crate::types::builders::CollaborationBuilder::default();
            crate::serde_util::collaboration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_configured_table_output_correct_errors(
    mut builder: crate::operation::update_configured_table::builders::UpdateConfiguredTableOutputBuilder,
) -> crate::operation::update_configured_table::builders::UpdateConfiguredTableOutputBuilder {
    if builder.configured_table.is_none() {
        builder.configured_table = {
            let builder = crate::types::builders::ConfiguredTableBuilder::default();
            crate::serde_util::configured_table_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_configured_table_analysis_rule_output_correct_errors(
    mut builder: crate::operation::update_configured_table_analysis_rule::builders::UpdateConfiguredTableAnalysisRuleOutputBuilder,
) -> crate::operation::update_configured_table_analysis_rule::builders::UpdateConfiguredTableAnalysisRuleOutputBuilder {
    if builder.analysis_rule.is_none() {
        builder.analysis_rule = {
            let builder = crate::types::builders::ConfiguredTableAnalysisRuleBuilder::default();
            crate::serde_util::configured_table_analysis_rule_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_configured_table_association_output_correct_errors(
    mut builder: crate::operation::update_configured_table_association::builders::UpdateConfiguredTableAssociationOutputBuilder,
) -> crate::operation::update_configured_table_association::builders::UpdateConfiguredTableAssociationOutputBuilder {
    if builder.configured_table_association.is_none() {
        builder.configured_table_association = {
            let builder = crate::types::builders::ConfiguredTableAssociationBuilder::default();
            crate::serde_util::configured_table_association_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_membership_output_correct_errors(
    mut builder: crate::operation::update_membership::builders::UpdateMembershipOutputBuilder,
) -> crate::operation::update_membership::builders::UpdateMembershipOutputBuilder {
    if builder.membership.is_none() {
        builder.membership = {
            let builder = crate::types::builders::MembershipBuilder::default();
            crate::serde_util::membership_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_protected_query_output_correct_errors(
    mut builder: crate::operation::update_protected_query::builders::UpdateProtectedQueryOutputBuilder,
) -> crate::operation::update_protected_query::builders::UpdateProtectedQueryOutputBuilder {
    if builder.protected_query.is_none() {
        builder.protected_query = {
            let builder = crate::types::builders::ProtectedQueryBuilder::default();
            crate::serde_util::protected_query_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn analysis_template_correct_errors(
    mut builder: crate::types::builders::AnalysisTemplateBuilder,
) -> crate::types::builders::AnalysisTemplateBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.schema.is_none() {
        builder.schema = {
            let builder = crate::types::builders::AnalysisSchemaBuilder::default();
            Some(builder.build())
        }
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::AnalysisFormat>().ok()
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::AnalysisSource::Unknown)
    }
    builder
}

pub(crate) fn collaboration_correct_errors(
    mut builder: crate::types::builders::CollaborationBuilder,
) -> crate::types::builders::CollaborationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    if builder.creator_display_name.is_none() {
        builder.creator_display_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.member_status.is_none() {
        builder.member_status = "no value was set".parse::<crate::types::MemberStatus>().ok()
    }
    if builder.query_log_status.is_none() {
        builder.query_log_status = "no value was set".parse::<crate::types::CollaborationQueryLogStatus>().ok()
    }
    builder
}

pub(crate) fn configured_table_correct_errors(
    mut builder: crate::types::builders::ConfiguredTableBuilder,
) -> crate::types::builders::ConfiguredTableBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.table_reference.is_none() {
        builder.table_reference = Some(crate::types::TableReference::Unknown)
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.analysis_rule_types.is_none() {
        builder.analysis_rule_types = Some(Default::default())
    }
    if builder.analysis_method.is_none() {
        builder.analysis_method = "no value was set".parse::<crate::types::AnalysisMethod>().ok()
    }
    if builder.allowed_columns.is_none() {
        builder.allowed_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn configured_table_analysis_rule_correct_errors(
    mut builder: crate::types::builders::ConfiguredTableAnalysisRuleBuilder,
) -> crate::types::builders::ConfiguredTableAnalysisRuleBuilder {
    if builder.configured_table_id.is_none() {
        builder.configured_table_id = Some(Default::default())
    }
    if builder.configured_table_arn.is_none() {
        builder.configured_table_arn = Some(Default::default())
    }
    if builder.policy.is_none() {
        builder.policy = Some(crate::types::ConfiguredTableAnalysisRulePolicy::Unknown)
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ConfiguredTableAnalysisRuleType>().ok()
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn configured_table_association_correct_errors(
    mut builder: crate::types::builders::ConfiguredTableAssociationBuilder,
) -> crate::types::builders::ConfiguredTableAssociationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.configured_table_id.is_none() {
        builder.configured_table_id = Some(Default::default())
    }
    if builder.configured_table_arn.is_none() {
        builder.configured_table_arn = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn membership_correct_errors(mut builder: crate::types::builders::MembershipBuilder) -> crate::types::builders::MembershipBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_creator_account_id.is_none() {
        builder.collaboration_creator_account_id = Some(Default::default())
    }
    if builder.collaboration_creator_display_name.is_none() {
        builder.collaboration_creator_display_name = Some(Default::default())
    }
    if builder.collaboration_name.is_none() {
        builder.collaboration_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MembershipStatus>().ok()
    }
    if builder.member_abilities.is_none() {
        builder.member_abilities = Some(Default::default())
    }
    if builder.query_log_status.is_none() {
        builder.query_log_status = "no value was set".parse::<crate::types::MembershipQueryLogStatus>().ok()
    }
    builder
}

pub(crate) fn collaboration_analysis_template_correct_errors(
    mut builder: crate::types::builders::CollaborationAnalysisTemplateBuilder,
) -> crate::types::builders::CollaborationAnalysisTemplateBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.schema.is_none() {
        builder.schema = {
            let builder = crate::types::builders::AnalysisSchemaBuilder::default();
            Some(builder.build())
        }
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::AnalysisFormat>().ok()
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::AnalysisSource::Unknown)
    }
    builder
}

pub(crate) fn protected_query_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryBuilder,
) -> crate::types::builders::ProtectedQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProtectedQueryStatus>().ok()
    }
    builder
}

pub(crate) fn schema_correct_errors(mut builder: crate::types::builders::SchemaBuilder) -> crate::types::builders::SchemaBuilder {
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    if builder.partition_keys.is_none() {
        builder.partition_keys = Some(Default::default())
    }
    if builder.analysis_rule_types.is_none() {
        builder.analysis_rule_types = Some(Default::default())
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SchemaType>().ok()
    }
    builder
}

pub(crate) fn analysis_rule_correct_errors(mut builder: crate::types::builders::AnalysisRuleBuilder) -> crate::types::builders::AnalysisRuleBuilder {
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AnalysisRuleType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.policy.is_none() {
        builder.policy = Some(crate::types::AnalysisRulePolicy::Unknown)
    }
    builder
}

pub(crate) fn analysis_template_summary_correct_errors(
    mut builder: crate::types::builders::AnalysisTemplateSummaryBuilder,
) -> crate::types::builders::AnalysisTemplateSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_collaboration_analysis_template_error_correct_errors(
    mut builder: crate::types::builders::BatchGetCollaborationAnalysisTemplateErrorBuilder,
) -> crate::types::builders::BatchGetCollaborationAnalysisTemplateErrorBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_schema_error_correct_errors(
    mut builder: crate::types::builders::BatchGetSchemaErrorBuilder,
) -> crate::types::builders::BatchGetSchemaErrorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn collaboration_analysis_template_summary_correct_errors(
    mut builder: crate::types::builders::CollaborationAnalysisTemplateSummaryBuilder,
) -> crate::types::builders::CollaborationAnalysisTemplateSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn collaboration_summary_correct_errors(
    mut builder: crate::types::builders::CollaborationSummaryBuilder,
) -> crate::types::builders::CollaborationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    if builder.creator_display_name.is_none() {
        builder.creator_display_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.member_status.is_none() {
        builder.member_status = "no value was set".parse::<crate::types::MemberStatus>().ok()
    }
    builder
}

pub(crate) fn configured_table_association_summary_correct_errors(
    mut builder: crate::types::builders::ConfiguredTableAssociationSummaryBuilder,
) -> crate::types::builders::ConfiguredTableAssociationSummaryBuilder {
    if builder.configured_table_id.is_none() {
        builder.configured_table_id = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configured_table_summary_correct_errors(
    mut builder: crate::types::builders::ConfiguredTableSummaryBuilder,
) -> crate::types::builders::ConfiguredTableSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.analysis_rule_types.is_none() {
        builder.analysis_rule_types = Some(Default::default())
    }
    if builder.analysis_method.is_none() {
        builder.analysis_method = "no value was set".parse::<crate::types::AnalysisMethod>().ok()
    }
    builder
}

pub(crate) fn data_encryption_metadata_correct_errors(
    mut builder: crate::types::builders::DataEncryptionMetadataBuilder,
) -> crate::types::builders::DataEncryptionMetadataBuilder {
    if builder.allow_cleartext.is_none() {
        builder.allow_cleartext = Some(Default::default())
    }
    if builder.allow_duplicates.is_none() {
        builder.allow_duplicates = Some(Default::default())
    }
    if builder.allow_joins_on_columns_with_different_names.is_none() {
        builder.allow_joins_on_columns_with_different_names = Some(Default::default())
    }
    if builder.preserve_nulls.is_none() {
        builder.preserve_nulls = Some(Default::default())
    }
    builder
}

pub(crate) fn member_summary_correct_errors(
    mut builder: crate::types::builders::MemberSummaryBuilder,
) -> crate::types::builders::MemberSummaryBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MemberStatus>().ok()
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.abilities.is_none() {
        builder.abilities = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn membership_protected_query_result_configuration_correct_errors(
    mut builder: crate::types::builders::MembershipProtectedQueryResultConfigurationBuilder,
) -> crate::types::builders::MembershipProtectedQueryResultConfigurationBuilder {
    if builder.output_configuration.is_none() {
        builder.output_configuration = Some(crate::types::MembershipProtectedQueryOutputConfiguration::Unknown)
    }
    builder
}

pub(crate) fn membership_summary_correct_errors(
    mut builder: crate::types::builders::MembershipSummaryBuilder,
) -> crate::types::builders::MembershipSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_creator_account_id.is_none() {
        builder.collaboration_creator_account_id = Some(Default::default())
    }
    if builder.collaboration_creator_display_name.is_none() {
        builder.collaboration_creator_display_name = Some(Default::default())
    }
    if builder.collaboration_name.is_none() {
        builder.collaboration_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MembershipStatus>().ok()
    }
    if builder.member_abilities.is_none() {
        builder.member_abilities = Some(Default::default())
    }
    builder
}

pub(crate) fn protected_query_error_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryErrorBuilder,
) -> crate::types::builders::ProtectedQueryErrorBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn protected_query_result_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryResultBuilder,
) -> crate::types::builders::ProtectedQueryResultBuilder {
    if builder.output.is_none() {
        builder.output = Some(crate::types::ProtectedQueryOutput::Unknown)
    }
    builder
}

pub(crate) fn protected_query_result_configuration_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryResultConfigurationBuilder,
) -> crate::types::builders::ProtectedQueryResultConfigurationBuilder {
    if builder.output_configuration.is_none() {
        builder.output_configuration = Some(crate::types::ProtectedQueryOutputConfiguration::Unknown)
    }
    builder
}

pub(crate) fn protected_query_summary_correct_errors(
    mut builder: crate::types::builders::ProtectedQuerySummaryBuilder,
) -> crate::types::builders::ProtectedQuerySummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    if builder.membership_arn.is_none() {
        builder.membership_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProtectedQueryStatus>().ok()
    }
    builder
}

pub(crate) fn schema_summary_correct_errors(
    mut builder: crate::types::builders::SchemaSummaryBuilder,
) -> crate::types::builders::SchemaSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SchemaType>().ok()
    }
    if builder.creator_account_id.is_none() {
        builder.creator_account_id = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.collaboration_id.is_none() {
        builder.collaboration_id = Some(Default::default())
    }
    if builder.collaboration_arn.is_none() {
        builder.collaboration_arn = Some(Default::default())
    }
    if builder.analysis_rule_types.is_none() {
        builder.analysis_rule_types = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_parameter_correct_errors(
    mut builder: crate::types::builders::AnalysisParameterBuilder,
) -> crate::types::builders::AnalysisParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ParameterType>().ok()
    }
    builder
}

pub(crate) fn column_correct_errors(mut builder: crate::types::builders::ColumnBuilder) -> crate::types::builders::ColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_table_reference_correct_errors(
    mut builder: crate::types::builders::GlueTableReferenceBuilder,
) -> crate::types::builders::GlueTableReferenceBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_rule_aggregation_correct_errors(
    mut builder: crate::types::builders::AnalysisRuleAggregationBuilder,
) -> crate::types::builders::AnalysisRuleAggregationBuilder {
    if builder.aggregate_columns.is_none() {
        builder.aggregate_columns = Some(Default::default())
    }
    if builder.join_columns.is_none() {
        builder.join_columns = Some(Default::default())
    }
    if builder.dimension_columns.is_none() {
        builder.dimension_columns = Some(Default::default())
    }
    if builder.scalar_functions.is_none() {
        builder.scalar_functions = Some(Default::default())
    }
    if builder.output_constraints.is_none() {
        builder.output_constraints = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_rule_custom_correct_errors(
    mut builder: crate::types::builders::AnalysisRuleCustomBuilder,
) -> crate::types::builders::AnalysisRuleCustomBuilder {
    if builder.allowed_analyses.is_none() {
        builder.allowed_analyses = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_rule_list_correct_errors(
    mut builder: crate::types::builders::AnalysisRuleListBuilder,
) -> crate::types::builders::AnalysisRuleListBuilder {
    if builder.join_columns.is_none() {
        builder.join_columns = Some(Default::default())
    }
    if builder.list_columns.is_none() {
        builder.list_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn protected_query_s3_output_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryS3OutputBuilder,
) -> crate::types::builders::ProtectedQueryS3OutputBuilder {
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    builder
}

pub(crate) fn protected_query_s3_output_configuration_correct_errors(
    mut builder: crate::types::builders::ProtectedQueryS3OutputConfigurationBuilder,
) -> crate::types::builders::ProtectedQueryS3OutputConfigurationBuilder {
    if builder.result_format.is_none() {
        builder.result_format = "no value was set".parse::<crate::types::ResultFormat>().ok()
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn protected_query_single_member_output_correct_errors(
    mut builder: crate::types::builders::ProtectedQuerySingleMemberOutputBuilder,
) -> crate::types::builders::ProtectedQuerySingleMemberOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn aggregate_column_correct_errors(
    mut builder: crate::types::builders::AggregateColumnBuilder,
) -> crate::types::builders::AggregateColumnBuilder {
    if builder.column_names.is_none() {
        builder.column_names = Some(Default::default())
    }
    if builder.function.is_none() {
        builder.function = "no value was set".parse::<crate::types::AggregateFunctionName>().ok()
    }
    builder
}

pub(crate) fn aggregation_constraint_correct_errors(
    mut builder: crate::types::builders::AggregationConstraintBuilder,
) -> crate::types::builders::AggregationConstraintBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.minimum.is_none() {
        builder.minimum = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AggregationType>().ok()
    }
    builder
}
