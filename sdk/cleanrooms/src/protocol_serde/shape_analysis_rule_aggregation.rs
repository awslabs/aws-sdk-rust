// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_analysis_rule_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnalysisRuleAggregation,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.aggregate_columns {
        let mut array_2 = object.key("aggregateColumns").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_aggregate_column::ser_aggregate_column(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.join_columns {
        let mut array_6 = object.key("joinColumns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.join_required {
        object.key("joinRequired").string(var_8.as_str());
    }
    if let Some(var_9) = &input.dimension_columns {
        let mut array_10 = object.key("dimensionColumns").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.scalar_functions {
        let mut array_13 = object.key("scalarFunctions").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.output_constraints {
        let mut array_16 = object.key("outputConstraints").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_aggregation_constraint::ser_aggregation_constraint(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub(crate) fn de_analysis_rule_aggregation<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AnalysisRuleAggregation>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnalysisRuleAggregationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "aggregateColumns" => {
                                builder = builder.set_aggregate_columns(
                                    crate::protocol_serde::shape_aggregate_column_list::de_aggregate_column_list(tokens)?
                                );
                            }
                            "joinColumns" => {
                                builder = builder.set_join_columns(
                                    crate::protocol_serde::shape_analysis_rule_column_list::de_analysis_rule_column_list(tokens)?
                                );
                            }
                            "joinRequired" => {
                                builder = builder.set_join_required(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::JoinRequiredOption::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "dimensionColumns" => {
                                builder = builder.set_dimension_columns(
                                    crate::protocol_serde::shape_analysis_rule_column_list::de_analysis_rule_column_list(tokens)?
                                );
                            }
                            "scalarFunctions" => {
                                builder = builder.set_scalar_functions(
                                    crate::protocol_serde::shape_scalar_functions_list::de_scalar_functions_list(tokens)?
                                );
                            }
                            "outputConstraints" => {
                                builder = builder.set_output_constraints(
                                    crate::protocol_serde::shape_aggregation_constraints::de_aggregation_constraints(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
