// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_analysis_rule_aggregation(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnalysisRuleAggregation,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("aggregateColumns").start_array();
        for item_2 in &input.aggregate_columns {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_aggregate_column::ser_aggregate_column(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        let mut array_4 = object.key("joinColumns").start_array();
        for item_5 in &input.join_columns {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.join_required {
        object.key("joinRequired").string(var_6.as_str());
    }
    if let Some(var_7) = &input.allowed_join_operators {
        let mut array_8 = object.key("allowedJoinOperators").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    {
        let mut array_10 = object.key("dimensionColumns").start_array();
        for item_11 in &input.dimension_columns {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    {
        let mut array_12 = object.key("scalarFunctions").start_array();
        for item_13 in &input.scalar_functions {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    {
        let mut array_14 = object.key("outputConstraints").start_array();
        for item_15 in &input.output_constraints {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_aggregation_constraint::ser_aggregation_constraint(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub(crate) fn de_analysis_rule_aggregation<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AnalysisRuleAggregation>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnalysisRuleAggregationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "aggregateColumns" => {
                            builder =
                                builder.set_aggregate_columns(crate::protocol_serde::shape_aggregate_column_list::de_aggregate_column_list(tokens)?);
                        }
                        "joinColumns" => {
                            builder = builder.set_join_columns(crate::protocol_serde::shape_analysis_rule_column_list::de_analysis_rule_column_list(
                                tokens,
                            )?);
                        }
                        "joinRequired" => {
                            builder = builder.set_join_required(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JoinRequiredOption::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "allowedJoinOperators" => {
                            builder =
                                builder.set_allowed_join_operators(crate::protocol_serde::shape_join_operators_list::de_join_operators_list(tokens)?);
                        }
                        "dimensionColumns" => {
                            builder = builder.set_dimension_columns(
                                crate::protocol_serde::shape_analysis_rule_column_list::de_analysis_rule_column_list(tokens)?,
                            );
                        }
                        "scalarFunctions" => {
                            builder =
                                builder.set_scalar_functions(crate::protocol_serde::shape_scalar_functions_list::de_scalar_functions_list(tokens)?);
                        }
                        "outputConstraints" => {
                            builder = builder
                                .set_output_constraints(crate::protocol_serde::shape_aggregation_constraints::de_aggregation_constraints(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::analysis_rule_aggregation_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
