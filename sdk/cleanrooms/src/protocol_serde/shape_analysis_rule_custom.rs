// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_analysis_rule_custom(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnalysisRuleCustom,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("allowedAnalyses").start_array();
        for item_2 in &input.allowed_analyses {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.allowed_analysis_providers {
        let mut array_4 = object.key("allowedAnalysisProviders").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.additional_analyses {
        object.key("additionalAnalyses").string(var_6.as_str());
    }
    if let Some(var_7) = &input.disallowed_output_columns {
        let mut array_8 = object.key("disallowedOutputColumns").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.differential_privacy {
        #[allow(unused_mut)]
        let mut object_11 = object.key("differentialPrivacy").start_object();
        crate::protocol_serde::shape_differential_privacy_configuration::ser_differential_privacy_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_analysis_rule_custom<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AnalysisRuleCustom>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnalysisRuleCustomBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "allowedAnalyses" => {
                            builder =
                                builder.set_allowed_analyses(crate::protocol_serde::shape_allowed_analyses_list::de_allowed_analyses_list(tokens)?);
                        }
                        "allowedAnalysisProviders" => {
                            builder = builder.set_allowed_analysis_providers(
                                crate::protocol_serde::shape_allowed_analysis_provider_list::de_allowed_analysis_provider_list(tokens)?,
                            );
                        }
                        "additionalAnalyses" => {
                            builder = builder.set_additional_analyses(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AdditionalAnalyses::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "disallowedOutputColumns" => {
                            builder = builder.set_disallowed_output_columns(
                                crate::protocol_serde::shape_analysis_rule_column_list::de_analysis_rule_column_list(tokens)?,
                            );
                        }
                        "differentialPrivacy" => {
                            builder = builder.set_differential_privacy(
                                crate::protocol_serde::shape_differential_privacy_configuration::de_differential_privacy_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::analysis_rule_custom_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
