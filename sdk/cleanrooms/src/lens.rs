// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_analysis_templates_output_next_token(
    input: &crate::operation::list_analysis_templates::ListAnalysisTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_collaboration_analysis_templates_output_next_token(
    input: &crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_collaborations_output_next_token(
    input: &crate::operation::list_collaborations::ListCollaborationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_configured_table_associations_output_next_token(
    input: &crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_configured_tables_output_next_token(
    input: &crate::operation::list_configured_tables::ListConfiguredTablesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_members_output_next_token(
    input: &crate::operation::list_members::ListMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_memberships_output_next_token(
    input: &crate::operation::list_memberships::ListMembershipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_protected_queries_output_next_token(
    input: &crate::operation::list_protected_queries::ListProtectedQueriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_schemas_output_next_token(
    input: &crate::operation::list_schemas::ListSchemasOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_analysis_templates_output_analysis_template_summaries(
    input: crate::operation::list_analysis_templates::ListAnalysisTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateSummary>> {
    let input = input.analysis_template_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_collaboration_analysis_templates_output_collaboration_analysis_template_summaries(
    input: crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CollaborationAnalysisTemplateSummary>> {
    let input = input.collaboration_analysis_template_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_collaborations_output_collaboration_list(
    input: crate::operation::list_collaborations::ListCollaborationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CollaborationSummary>> {
    let input = input.collaboration_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_configured_table_associations_output_configured_table_association_summaries(
    input: crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ConfiguredTableAssociationSummary>> {
    let input = input.configured_table_association_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_configured_tables_output_configured_table_summaries(
    input: crate::operation::list_configured_tables::ListConfiguredTablesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ConfiguredTableSummary>> {
    let input = input.configured_table_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_members_output_member_summaries(
    input: crate::operation::list_members::ListMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MemberSummary>> {
    let input = input.member_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_memberships_output_membership_summaries(
    input: crate::operation::list_memberships::ListMembershipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MembershipSummary>> {
    let input = input.membership_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_protected_queries_output_protected_queries(
    input: crate::operation::list_protected_queries::ListProtectedQueriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProtectedQuerySummary>> {
    let input = input.protected_queries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_schemas_output_schema_summaries(
    input: crate::operation::list_schemas::ListSchemasOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SchemaSummary>> {
    let input = input.schema_summaries;
    ::std::option::Option::Some(input)
}
