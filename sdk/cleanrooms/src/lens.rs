// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_collaborations_output_next_token(
    input: &crate::operation::list_collaborations::ListCollaborationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_configured_table_associations_output_next_token(
    input: &crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_configured_tables_output_next_token(
    input: &crate::operation::list_configured_tables::ListConfiguredTablesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_members_output_next_token(
    input: &crate::operation::list_members::ListMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_memberships_output_next_token(
    input: &crate::operation::list_memberships::ListMembershipsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_protected_queries_output_next_token(
    input: &crate::operation::list_protected_queries::ListProtectedQueriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_schemas_output_next_token(
    input: &crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_collaborations_output_collaboration_list(
    input: crate::operation::list_collaborations::ListCollaborationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CollaborationSummary>> {
    let input = match input.collaboration_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_configured_table_associations_output_configured_table_association_summaries(
    input: crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfiguredTableAssociationSummary>> {
    let input = match input.configured_table_association_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_configured_tables_output_configured_table_summaries(
    input: crate::operation::list_configured_tables::ListConfiguredTablesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfiguredTableSummary>> {
    let input = match input.configured_table_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_members_output_member_summaries(
    input: crate::operation::list_members::ListMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MemberSummary>> {
    let input = match input.member_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_memberships_output_membership_summaries(
    input: crate::operation::list_memberships::ListMembershipsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MembershipSummary>> {
    let input = match input.membership_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_protected_queries_output_protected_queries(
    input: crate::operation::list_protected_queries::ListProtectedQueriesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProtectedQuerySummary>> {
    let input = match input.protected_queries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_schemas_output_schema_summaries(
    input: crate::operation::list_schemas::ListSchemasOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SchemaSummary>> {
    let input = match input.schema_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
