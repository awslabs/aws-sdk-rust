// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProtectedQueryOutput {
    /// <p>The protected query output.</p>
    #[doc(hidden)]
    pub protected_query: std::option::Option<crate::model::ProtectedQuery>,
    _request_id: Option<String>,
}
impl UpdateProtectedQueryOutput {
    /// <p>The protected query output.</p>
    pub fn protected_query(&self) -> std::option::Option<&crate::model::ProtectedQuery> {
        self.protected_query.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateProtectedQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateProtectedQueryOutput {
    /// Creates a new builder-style object to manufacture [`UpdateProtectedQueryOutput`](crate::output::UpdateProtectedQueryOutput).
    pub fn builder() -> crate::output::update_protected_query_output::Builder {
        crate::output::update_protected_query_output::Builder::default()
    }
}

/// See [`UpdateProtectedQueryOutput`](crate::output::UpdateProtectedQueryOutput).
pub mod update_protected_query_output {

    /// A builder for [`UpdateProtectedQueryOutput`](crate::output::UpdateProtectedQueryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protected_query: std::option::Option<crate::model::ProtectedQuery>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The protected query output.</p>
        pub fn protected_query(mut self, input: crate::model::ProtectedQuery) -> Self {
            self.protected_query = Some(input);
            self
        }
        /// <p>The protected query output.</p>
        pub fn set_protected_query(
            mut self,
            input: std::option::Option<crate::model::ProtectedQuery>,
        ) -> Self {
            self.protected_query = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateProtectedQueryOutput`](crate::output::UpdateProtectedQueryOutput).
        pub fn build(self) -> crate::output::UpdateProtectedQueryOutput {
            crate::output::UpdateProtectedQueryOutput {
                protected_query: self.protected_query,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartProtectedQueryOutput {
    /// <p>The protected query.</p>
    #[doc(hidden)]
    pub protected_query: std::option::Option<crate::model::ProtectedQuery>,
    _request_id: Option<String>,
}
impl StartProtectedQueryOutput {
    /// <p>The protected query.</p>
    pub fn protected_query(&self) -> std::option::Option<&crate::model::ProtectedQuery> {
        self.protected_query.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartProtectedQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartProtectedQueryOutput {
    /// Creates a new builder-style object to manufacture [`StartProtectedQueryOutput`](crate::output::StartProtectedQueryOutput).
    pub fn builder() -> crate::output::start_protected_query_output::Builder {
        crate::output::start_protected_query_output::Builder::default()
    }
}

/// See [`StartProtectedQueryOutput`](crate::output::StartProtectedQueryOutput).
pub mod start_protected_query_output {

    /// A builder for [`StartProtectedQueryOutput`](crate::output::StartProtectedQueryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protected_query: std::option::Option<crate::model::ProtectedQuery>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The protected query.</p>
        pub fn protected_query(mut self, input: crate::model::ProtectedQuery) -> Self {
            self.protected_query = Some(input);
            self
        }
        /// <p>The protected query.</p>
        pub fn set_protected_query(
            mut self,
            input: std::option::Option<crate::model::ProtectedQuery>,
        ) -> Self {
            self.protected_query = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartProtectedQueryOutput`](crate::output::StartProtectedQueryOutput).
        pub fn build(self) -> crate::output::StartProtectedQueryOutput {
            crate::output::StartProtectedQueryOutput {
                protected_query: self.protected_query,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProtectedQueriesOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of protected queries.</p>
    #[doc(hidden)]
    pub protected_queries: std::option::Option<std::vec::Vec<crate::model::ProtectedQuerySummary>>,
    _request_id: Option<String>,
}
impl ListProtectedQueriesOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of protected queries.</p>
    pub fn protected_queries(&self) -> std::option::Option<&[crate::model::ProtectedQuerySummary]> {
        self.protected_queries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListProtectedQueriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListProtectedQueriesOutput {
    /// Creates a new builder-style object to manufacture [`ListProtectedQueriesOutput`](crate::output::ListProtectedQueriesOutput).
    pub fn builder() -> crate::output::list_protected_queries_output::Builder {
        crate::output::list_protected_queries_output::Builder::default()
    }
}

/// See [`ListProtectedQueriesOutput`](crate::output::ListProtectedQueriesOutput).
pub mod list_protected_queries_output {

    /// A builder for [`ListProtectedQueriesOutput`](crate::output::ListProtectedQueriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) protected_queries:
            std::option::Option<std::vec::Vec<crate::model::ProtectedQuerySummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `protected_queries`.
        ///
        /// To override the contents of this collection use [`set_protected_queries`](Self::set_protected_queries).
        ///
        /// <p>A list of protected queries.</p>
        pub fn protected_queries(mut self, input: crate::model::ProtectedQuerySummary) -> Self {
            let mut v = self.protected_queries.unwrap_or_default();
            v.push(input);
            self.protected_queries = Some(v);
            self
        }
        /// <p>A list of protected queries.</p>
        pub fn set_protected_queries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProtectedQuerySummary>>,
        ) -> Self {
            self.protected_queries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListProtectedQueriesOutput`](crate::output::ListProtectedQueriesOutput).
        pub fn build(self) -> crate::output::ListProtectedQueriesOutput {
            crate::output::ListProtectedQueriesOutput {
                next_token: self.next_token,
                protected_queries: self.protected_queries,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetProtectedQueryOutput {
    /// <p>The query processing metadata.</p>
    #[doc(hidden)]
    pub protected_query: std::option::Option<crate::model::ProtectedQuery>,
    _request_id: Option<String>,
}
impl GetProtectedQueryOutput {
    /// <p>The query processing metadata.</p>
    pub fn protected_query(&self) -> std::option::Option<&crate::model::ProtectedQuery> {
        self.protected_query.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetProtectedQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProtectedQueryOutput {
    /// Creates a new builder-style object to manufacture [`GetProtectedQueryOutput`](crate::output::GetProtectedQueryOutput).
    pub fn builder() -> crate::output::get_protected_query_output::Builder {
        crate::output::get_protected_query_output::Builder::default()
    }
}

/// See [`GetProtectedQueryOutput`](crate::output::GetProtectedQueryOutput).
pub mod get_protected_query_output {

    /// A builder for [`GetProtectedQueryOutput`](crate::output::GetProtectedQueryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protected_query: std::option::Option<crate::model::ProtectedQuery>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The query processing metadata.</p>
        pub fn protected_query(mut self, input: crate::model::ProtectedQuery) -> Self {
            self.protected_query = Some(input);
            self
        }
        /// <p>The query processing metadata.</p>
        pub fn set_protected_query(
            mut self,
            input: std::option::Option<crate::model::ProtectedQuery>,
        ) -> Self {
            self.protected_query = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetProtectedQueryOutput`](crate::output::GetProtectedQueryOutput).
        pub fn build(self) -> crate::output::GetProtectedQueryOutput {
            crate::output::GetProtectedQueryOutput {
                protected_query: self.protected_query,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMembershipsOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of memberships returned from the ListMemberships operation.</p>
    #[doc(hidden)]
    pub membership_summaries: std::option::Option<std::vec::Vec<crate::model::MembershipSummary>>,
    _request_id: Option<String>,
}
impl ListMembershipsOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of memberships returned from the ListMemberships operation.</p>
    pub fn membership_summaries(&self) -> std::option::Option<&[crate::model::MembershipSummary]> {
        self.membership_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMembershipsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMembershipsOutput {
    /// Creates a new builder-style object to manufacture [`ListMembershipsOutput`](crate::output::ListMembershipsOutput).
    pub fn builder() -> crate::output::list_memberships_output::Builder {
        crate::output::list_memberships_output::Builder::default()
    }
}

/// See [`ListMembershipsOutput`](crate::output::ListMembershipsOutput).
pub mod list_memberships_output {

    /// A builder for [`ListMembershipsOutput`](crate::output::ListMembershipsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) membership_summaries:
            std::option::Option<std::vec::Vec<crate::model::MembershipSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `membership_summaries`.
        ///
        /// To override the contents of this collection use [`set_membership_summaries`](Self::set_membership_summaries).
        ///
        /// <p>The list of memberships returned from the ListMemberships operation.</p>
        pub fn membership_summaries(mut self, input: crate::model::MembershipSummary) -> Self {
            let mut v = self.membership_summaries.unwrap_or_default();
            v.push(input);
            self.membership_summaries = Some(v);
            self
        }
        /// <p>The list of memberships returned from the ListMemberships operation.</p>
        pub fn set_membership_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MembershipSummary>>,
        ) -> Self {
            self.membership_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMembershipsOutput`](crate::output::ListMembershipsOutput).
        pub fn build(self) -> crate::output::ListMembershipsOutput {
            crate::output::ListMembershipsOutput {
                next_token: self.next_token,
                membership_summaries: self.membership_summaries,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMembershipOutput {
    /// <p>The membership that was created.</p>
    #[doc(hidden)]
    pub membership: std::option::Option<crate::model::Membership>,
    _request_id: Option<String>,
}
impl CreateMembershipOutput {
    /// <p>The membership that was created.</p>
    pub fn membership(&self) -> std::option::Option<&crate::model::Membership> {
        self.membership.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMembershipOutput {
    /// Creates a new builder-style object to manufacture [`CreateMembershipOutput`](crate::output::CreateMembershipOutput).
    pub fn builder() -> crate::output::create_membership_output::Builder {
        crate::output::create_membership_output::Builder::default()
    }
}

/// See [`CreateMembershipOutput`](crate::output::CreateMembershipOutput).
pub mod create_membership_output {

    /// A builder for [`CreateMembershipOutput`](crate::output::CreateMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) membership: std::option::Option<crate::model::Membership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The membership that was created.</p>
        pub fn membership(mut self, input: crate::model::Membership) -> Self {
            self.membership = Some(input);
            self
        }
        /// <p>The membership that was created.</p>
        pub fn set_membership(
            mut self,
            input: std::option::Option<crate::model::Membership>,
        ) -> Self {
            self.membership = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMembershipOutput`](crate::output::CreateMembershipOutput).
        pub fn build(self) -> crate::output::CreateMembershipOutput {
            crate::output::CreateMembershipOutput {
                membership: self.membership,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMembershipOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMembershipOutput`](crate::output::DeleteMembershipOutput).
    pub fn builder() -> crate::output::delete_membership_output::Builder {
        crate::output::delete_membership_output::Builder::default()
    }
}

/// See [`DeleteMembershipOutput`](crate::output::DeleteMembershipOutput).
pub mod delete_membership_output {

    /// A builder for [`DeleteMembershipOutput`](crate::output::DeleteMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMembershipOutput`](crate::output::DeleteMembershipOutput).
        pub fn build(self) -> crate::output::DeleteMembershipOutput {
            crate::output::DeleteMembershipOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMembershipOutput {
    /// <p>The membership object.</p>
    #[doc(hidden)]
    pub membership: std::option::Option<crate::model::Membership>,
    _request_id: Option<String>,
}
impl UpdateMembershipOutput {
    /// <p>The membership object.</p>
    pub fn membership(&self) -> std::option::Option<&crate::model::Membership> {
        self.membership.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateMembershipOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMembershipOutput`](crate::output::UpdateMembershipOutput).
    pub fn builder() -> crate::output::update_membership_output::Builder {
        crate::output::update_membership_output::Builder::default()
    }
}

/// See [`UpdateMembershipOutput`](crate::output::UpdateMembershipOutput).
pub mod update_membership_output {

    /// A builder for [`UpdateMembershipOutput`](crate::output::UpdateMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) membership: std::option::Option<crate::model::Membership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The membership object.</p>
        pub fn membership(mut self, input: crate::model::Membership) -> Self {
            self.membership = Some(input);
            self
        }
        /// <p>The membership object.</p>
        pub fn set_membership(
            mut self,
            input: std::option::Option<crate::model::Membership>,
        ) -> Self {
            self.membership = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMembershipOutput`](crate::output::UpdateMembershipOutput).
        pub fn build(self) -> crate::output::UpdateMembershipOutput {
            crate::output::UpdateMembershipOutput {
                membership: self.membership,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMembershipOutput {
    /// <p>The membership retrieved for the provided identifier.</p>
    #[doc(hidden)]
    pub membership: std::option::Option<crate::model::Membership>,
    _request_id: Option<String>,
}
impl GetMembershipOutput {
    /// <p>The membership retrieved for the provided identifier.</p>
    pub fn membership(&self) -> std::option::Option<&crate::model::Membership> {
        self.membership.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMembershipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMembershipOutput {
    /// Creates a new builder-style object to manufacture [`GetMembershipOutput`](crate::output::GetMembershipOutput).
    pub fn builder() -> crate::output::get_membership_output::Builder {
        crate::output::get_membership_output::Builder::default()
    }
}

/// See [`GetMembershipOutput`](crate::output::GetMembershipOutput).
pub mod get_membership_output {

    /// A builder for [`GetMembershipOutput`](crate::output::GetMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) membership: std::option::Option<crate::model::Membership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The membership retrieved for the provided identifier.</p>
        pub fn membership(mut self, input: crate::model::Membership) -> Self {
            self.membership = Some(input);
            self
        }
        /// <p>The membership retrieved for the provided identifier.</p>
        pub fn set_membership(
            mut self,
            input: std::option::Option<crate::model::Membership>,
        ) -> Self {
            self.membership = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMembershipOutput`](crate::output::GetMembershipOutput).
        pub fn build(self) -> crate::output::GetMembershipOutput {
            crate::output::GetMembershipOutput {
                membership: self.membership,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfiguredTableAnalysisRuleOutput {
    /// <p>The entire updated analysis rule.</p>
    #[doc(hidden)]
    pub analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
    _request_id: Option<String>,
}
impl UpdateConfiguredTableAnalysisRuleOutput {
    /// <p>The entire updated analysis rule.</p>
    pub fn analysis_rule(&self) -> std::option::Option<&crate::model::ConfiguredTableAnalysisRule> {
        self.analysis_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateConfiguredTableAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConfiguredTableAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfiguredTableAnalysisRuleOutput`](crate::output::UpdateConfiguredTableAnalysisRuleOutput).
    pub fn builder() -> crate::output::update_configured_table_analysis_rule_output::Builder {
        crate::output::update_configured_table_analysis_rule_output::Builder::default()
    }
}

/// See [`UpdateConfiguredTableAnalysisRuleOutput`](crate::output::UpdateConfiguredTableAnalysisRuleOutput).
pub mod update_configured_table_analysis_rule_output {

    /// A builder for [`UpdateConfiguredTableAnalysisRuleOutput`](crate::output::UpdateConfiguredTableAnalysisRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire updated analysis rule.</p>
        pub fn analysis_rule(mut self, input: crate::model::ConfiguredTableAnalysisRule) -> Self {
            self.analysis_rule = Some(input);
            self
        }
        /// <p>The entire updated analysis rule.</p>
        pub fn set_analysis_rule(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        ) -> Self {
            self.analysis_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConfiguredTableAnalysisRuleOutput`](crate::output::UpdateConfiguredTableAnalysisRuleOutput).
        pub fn build(self) -> crate::output::UpdateConfiguredTableAnalysisRuleOutput {
            crate::output::UpdateConfiguredTableAnalysisRuleOutput {
                analysis_rule: self.analysis_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConfiguredTableAnalysisRuleOutput {
    /// <p>The entire analysis rule output.</p>
    #[doc(hidden)]
    pub analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
    _request_id: Option<String>,
}
impl GetConfiguredTableAnalysisRuleOutput {
    /// <p>The entire analysis rule output.</p>
    pub fn analysis_rule(&self) -> std::option::Option<&crate::model::ConfiguredTableAnalysisRule> {
        self.analysis_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConfiguredTableAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfiguredTableAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetConfiguredTableAnalysisRuleOutput`](crate::output::GetConfiguredTableAnalysisRuleOutput).
    pub fn builder() -> crate::output::get_configured_table_analysis_rule_output::Builder {
        crate::output::get_configured_table_analysis_rule_output::Builder::default()
    }
}

/// See [`GetConfiguredTableAnalysisRuleOutput`](crate::output::GetConfiguredTableAnalysisRuleOutput).
pub mod get_configured_table_analysis_rule_output {

    /// A builder for [`GetConfiguredTableAnalysisRuleOutput`](crate::output::GetConfiguredTableAnalysisRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire analysis rule output.</p>
        pub fn analysis_rule(mut self, input: crate::model::ConfiguredTableAnalysisRule) -> Self {
            self.analysis_rule = Some(input);
            self
        }
        /// <p>The entire analysis rule output.</p>
        pub fn set_analysis_rule(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        ) -> Self {
            self.analysis_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConfiguredTableAnalysisRuleOutput`](crate::output::GetConfiguredTableAnalysisRuleOutput).
        pub fn build(self) -> crate::output::GetConfiguredTableAnalysisRuleOutput {
            crate::output::GetConfiguredTableAnalysisRuleOutput {
                analysis_rule: self.analysis_rule,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p>An empty response that indicates a successful delete.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfiguredTableAnalysisRuleOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteConfiguredTableAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteConfiguredTableAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConfiguredTableAnalysisRuleOutput`](crate::output::DeleteConfiguredTableAnalysisRuleOutput).
    pub fn builder() -> crate::output::delete_configured_table_analysis_rule_output::Builder {
        crate::output::delete_configured_table_analysis_rule_output::Builder::default()
    }
}

/// See [`DeleteConfiguredTableAnalysisRuleOutput`](crate::output::DeleteConfiguredTableAnalysisRuleOutput).
pub mod delete_configured_table_analysis_rule_output {

    /// A builder for [`DeleteConfiguredTableAnalysisRuleOutput`](crate::output::DeleteConfiguredTableAnalysisRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConfiguredTableAnalysisRuleOutput`](crate::output::DeleteConfiguredTableAnalysisRuleOutput).
        pub fn build(self) -> crate::output::DeleteConfiguredTableAnalysisRuleOutput {
            crate::output::DeleteConfiguredTableAnalysisRuleOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableAnalysisRuleOutput {
    /// <p>The entire created analysis rule.</p>
    #[doc(hidden)]
    pub analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
    _request_id: Option<String>,
}
impl CreateConfiguredTableAnalysisRuleOutput {
    /// <p>The entire created analysis rule.</p>
    pub fn analysis_rule(&self) -> std::option::Option<&crate::model::ConfiguredTableAnalysisRule> {
        self.analysis_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateConfiguredTableAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConfiguredTableAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableAnalysisRuleOutput`](crate::output::CreateConfiguredTableAnalysisRuleOutput).
    pub fn builder() -> crate::output::create_configured_table_analysis_rule_output::Builder {
        crate::output::create_configured_table_analysis_rule_output::Builder::default()
    }
}

/// See [`CreateConfiguredTableAnalysisRuleOutput`](crate::output::CreateConfiguredTableAnalysisRuleOutput).
pub mod create_configured_table_analysis_rule_output {

    /// A builder for [`CreateConfiguredTableAnalysisRuleOutput`](crate::output::CreateConfiguredTableAnalysisRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analysis_rule: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire created analysis rule.</p>
        pub fn analysis_rule(mut self, input: crate::model::ConfiguredTableAnalysisRule) -> Self {
            self.analysis_rule = Some(input);
            self
        }
        /// <p>The entire created analysis rule.</p>
        pub fn set_analysis_rule(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAnalysisRule>,
        ) -> Self {
            self.analysis_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConfiguredTableAnalysisRuleOutput`](crate::output::CreateConfiguredTableAnalysisRuleOutput).
        pub fn build(self) -> crate::output::CreateConfiguredTableAnalysisRuleOutput {
            crate::output::CreateConfiguredTableAnalysisRuleOutput {
                analysis_rule: self.analysis_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConfiguredTablesOutput {
    /// <p>The configured tables listed by the request.</p>
    #[doc(hidden)]
    pub configured_table_summaries:
        std::option::Option<std::vec::Vec<crate::model::ConfiguredTableSummary>>,
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListConfiguredTablesOutput {
    /// <p>The configured tables listed by the request.</p>
    pub fn configured_table_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ConfiguredTableSummary]> {
        self.configured_table_summaries.as_deref()
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConfiguredTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListConfiguredTablesOutput {
    /// Creates a new builder-style object to manufacture [`ListConfiguredTablesOutput`](crate::output::ListConfiguredTablesOutput).
    pub fn builder() -> crate::output::list_configured_tables_output::Builder {
        crate::output::list_configured_tables_output::Builder::default()
    }
}

/// See [`ListConfiguredTablesOutput`](crate::output::ListConfiguredTablesOutput).
pub mod list_configured_tables_output {

    /// A builder for [`ListConfiguredTablesOutput`](crate::output::ListConfiguredTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table_summaries:
            std::option::Option<std::vec::Vec<crate::model::ConfiguredTableSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `configured_table_summaries`.
        ///
        /// To override the contents of this collection use [`set_configured_table_summaries`](Self::set_configured_table_summaries).
        ///
        /// <p>The configured tables listed by the request.</p>
        pub fn configured_table_summaries(
            mut self,
            input: crate::model::ConfiguredTableSummary,
        ) -> Self {
            let mut v = self.configured_table_summaries.unwrap_or_default();
            v.push(input);
            self.configured_table_summaries = Some(v);
            self
        }
        /// <p>The configured tables listed by the request.</p>
        pub fn set_configured_table_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConfiguredTableSummary>>,
        ) -> Self {
            self.configured_table_summaries = input;
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConfiguredTablesOutput`](crate::output::ListConfiguredTablesOutput).
        pub fn build(self) -> crate::output::ListConfiguredTablesOutput {
            crate::output::ListConfiguredTablesOutput {
                configured_table_summaries: self.configured_table_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableOutput {
    /// <p>The created configured table.</p>
    #[doc(hidden)]
    pub configured_table: std::option::Option<crate::model::ConfiguredTable>,
    _request_id: Option<String>,
}
impl CreateConfiguredTableOutput {
    /// <p>The created configured table.</p>
    pub fn configured_table(&self) -> std::option::Option<&crate::model::ConfiguredTable> {
        self.configured_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateConfiguredTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConfiguredTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableOutput`](crate::output::CreateConfiguredTableOutput).
    pub fn builder() -> crate::output::create_configured_table_output::Builder {
        crate::output::create_configured_table_output::Builder::default()
    }
}

/// See [`CreateConfiguredTableOutput`](crate::output::CreateConfiguredTableOutput).
pub mod create_configured_table_output {

    /// A builder for [`CreateConfiguredTableOutput`](crate::output::CreateConfiguredTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table: std::option::Option<crate::model::ConfiguredTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The created configured table.</p>
        pub fn configured_table(mut self, input: crate::model::ConfiguredTable) -> Self {
            self.configured_table = Some(input);
            self
        }
        /// <p>The created configured table.</p>
        pub fn set_configured_table(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTable>,
        ) -> Self {
            self.configured_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConfiguredTableOutput`](crate::output::CreateConfiguredTableOutput).
        pub fn build(self) -> crate::output::CreateConfiguredTableOutput {
            crate::output::CreateConfiguredTableOutput {
                configured_table: self.configured_table,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p>The empty output for a successful deletion.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfiguredTableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteConfiguredTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteConfiguredTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConfiguredTableOutput`](crate::output::DeleteConfiguredTableOutput).
    pub fn builder() -> crate::output::delete_configured_table_output::Builder {
        crate::output::delete_configured_table_output::Builder::default()
    }
}

/// See [`DeleteConfiguredTableOutput`](crate::output::DeleteConfiguredTableOutput).
pub mod delete_configured_table_output {

    /// A builder for [`DeleteConfiguredTableOutput`](crate::output::DeleteConfiguredTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConfiguredTableOutput`](crate::output::DeleteConfiguredTableOutput).
        pub fn build(self) -> crate::output::DeleteConfiguredTableOutput {
            crate::output::DeleteConfiguredTableOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfiguredTableOutput {
    /// <p>The updated configured table.</p>
    #[doc(hidden)]
    pub configured_table: std::option::Option<crate::model::ConfiguredTable>,
    _request_id: Option<String>,
}
impl UpdateConfiguredTableOutput {
    /// <p>The updated configured table.</p>
    pub fn configured_table(&self) -> std::option::Option<&crate::model::ConfiguredTable> {
        self.configured_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateConfiguredTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConfiguredTableOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfiguredTableOutput`](crate::output::UpdateConfiguredTableOutput).
    pub fn builder() -> crate::output::update_configured_table_output::Builder {
        crate::output::update_configured_table_output::Builder::default()
    }
}

/// See [`UpdateConfiguredTableOutput`](crate::output::UpdateConfiguredTableOutput).
pub mod update_configured_table_output {

    /// A builder for [`UpdateConfiguredTableOutput`](crate::output::UpdateConfiguredTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table: std::option::Option<crate::model::ConfiguredTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated configured table.</p>
        pub fn configured_table(mut self, input: crate::model::ConfiguredTable) -> Self {
            self.configured_table = Some(input);
            self
        }
        /// <p>The updated configured table.</p>
        pub fn set_configured_table(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTable>,
        ) -> Self {
            self.configured_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConfiguredTableOutput`](crate::output::UpdateConfiguredTableOutput).
        pub fn build(self) -> crate::output::UpdateConfiguredTableOutput {
            crate::output::UpdateConfiguredTableOutput {
                configured_table: self.configured_table,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConfiguredTableOutput {
    /// <p>The retrieved configured table.</p>
    #[doc(hidden)]
    pub configured_table: std::option::Option<crate::model::ConfiguredTable>,
    _request_id: Option<String>,
}
impl GetConfiguredTableOutput {
    /// <p>The retrieved configured table.</p>
    pub fn configured_table(&self) -> std::option::Option<&crate::model::ConfiguredTable> {
        self.configured_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConfiguredTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfiguredTableOutput {
    /// Creates a new builder-style object to manufacture [`GetConfiguredTableOutput`](crate::output::GetConfiguredTableOutput).
    pub fn builder() -> crate::output::get_configured_table_output::Builder {
        crate::output::get_configured_table_output::Builder::default()
    }
}

/// See [`GetConfiguredTableOutput`](crate::output::GetConfiguredTableOutput).
pub mod get_configured_table_output {

    /// A builder for [`GetConfiguredTableOutput`](crate::output::GetConfiguredTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table: std::option::Option<crate::model::ConfiguredTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The retrieved configured table.</p>
        pub fn configured_table(mut self, input: crate::model::ConfiguredTable) -> Self {
            self.configured_table = Some(input);
            self
        }
        /// <p>The retrieved configured table.</p>
        pub fn set_configured_table(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTable>,
        ) -> Self {
            self.configured_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConfiguredTableOutput`](crate::output::GetConfiguredTableOutput).
        pub fn build(self) -> crate::output::GetConfiguredTableOutput {
            crate::output::GetConfiguredTableOutput {
                configured_table: self.configured_table,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConfiguredTableAssociationsOutput {
    /// <p>The retrieved list of configured table associations.</p>
    #[doc(hidden)]
    pub configured_table_association_summaries:
        std::option::Option<std::vec::Vec<crate::model::ConfiguredTableAssociationSummary>>,
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListConfiguredTableAssociationsOutput {
    /// <p>The retrieved list of configured table associations.</p>
    pub fn configured_table_association_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ConfiguredTableAssociationSummary]> {
        self.configured_table_association_summaries.as_deref()
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConfiguredTableAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListConfiguredTableAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`ListConfiguredTableAssociationsOutput`](crate::output::ListConfiguredTableAssociationsOutput).
    pub fn builder() -> crate::output::list_configured_table_associations_output::Builder {
        crate::output::list_configured_table_associations_output::Builder::default()
    }
}

/// See [`ListConfiguredTableAssociationsOutput`](crate::output::ListConfiguredTableAssociationsOutput).
pub mod list_configured_table_associations_output {

    /// A builder for [`ListConfiguredTableAssociationsOutput`](crate::output::ListConfiguredTableAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table_association_summaries:
            std::option::Option<std::vec::Vec<crate::model::ConfiguredTableAssociationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `configured_table_association_summaries`.
        ///
        /// To override the contents of this collection use [`set_configured_table_association_summaries`](Self::set_configured_table_association_summaries).
        ///
        /// <p>The retrieved list of configured table associations.</p>
        pub fn configured_table_association_summaries(
            mut self,
            input: crate::model::ConfiguredTableAssociationSummary,
        ) -> Self {
            let mut v = self
                .configured_table_association_summaries
                .unwrap_or_default();
            v.push(input);
            self.configured_table_association_summaries = Some(v);
            self
        }
        /// <p>The retrieved list of configured table associations.</p>
        pub fn set_configured_table_association_summaries(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ConfiguredTableAssociationSummary>,
            >,
        ) -> Self {
            self.configured_table_association_summaries = input;
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConfiguredTableAssociationsOutput`](crate::output::ListConfiguredTableAssociationsOutput).
        pub fn build(self) -> crate::output::ListConfiguredTableAssociationsOutput {
            crate::output::ListConfiguredTableAssociationsOutput {
                configured_table_association_summaries: self.configured_table_association_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableAssociationOutput {
    /// <p>The entire configured table association object.</p>
    #[doc(hidden)]
    pub configured_table_association: std::option::Option<crate::model::ConfiguredTableAssociation>,
    _request_id: Option<String>,
}
impl CreateConfiguredTableAssociationOutput {
    /// <p>The entire configured table association object.</p>
    pub fn configured_table_association(
        &self,
    ) -> std::option::Option<&crate::model::ConfiguredTableAssociation> {
        self.configured_table_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateConfiguredTableAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConfiguredTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableAssociationOutput`](crate::output::CreateConfiguredTableAssociationOutput).
    pub fn builder() -> crate::output::create_configured_table_association_output::Builder {
        crate::output::create_configured_table_association_output::Builder::default()
    }
}

/// See [`CreateConfiguredTableAssociationOutput`](crate::output::CreateConfiguredTableAssociationOutput).
pub mod create_configured_table_association_output {

    /// A builder for [`CreateConfiguredTableAssociationOutput`](crate::output::CreateConfiguredTableAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table_association:
            std::option::Option<crate::model::ConfiguredTableAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire configured table association object.</p>
        pub fn configured_table_association(
            mut self,
            input: crate::model::ConfiguredTableAssociation,
        ) -> Self {
            self.configured_table_association = Some(input);
            self
        }
        /// <p>The entire configured table association object.</p>
        pub fn set_configured_table_association(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAssociation>,
        ) -> Self {
            self.configured_table_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConfiguredTableAssociationOutput`](crate::output::CreateConfiguredTableAssociationOutput).
        pub fn build(self) -> crate::output::CreateConfiguredTableAssociationOutput {
            crate::output::CreateConfiguredTableAssociationOutput {
                configured_table_association: self.configured_table_association,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfiguredTableAssociationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteConfiguredTableAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteConfiguredTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConfiguredTableAssociationOutput`](crate::output::DeleteConfiguredTableAssociationOutput).
    pub fn builder() -> crate::output::delete_configured_table_association_output::Builder {
        crate::output::delete_configured_table_association_output::Builder::default()
    }
}

/// See [`DeleteConfiguredTableAssociationOutput`](crate::output::DeleteConfiguredTableAssociationOutput).
pub mod delete_configured_table_association_output {

    /// A builder for [`DeleteConfiguredTableAssociationOutput`](crate::output::DeleteConfiguredTableAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConfiguredTableAssociationOutput`](crate::output::DeleteConfiguredTableAssociationOutput).
        pub fn build(self) -> crate::output::DeleteConfiguredTableAssociationOutput {
            crate::output::DeleteConfiguredTableAssociationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfiguredTableAssociationOutput {
    /// <p>The entire updated configured table association.</p>
    #[doc(hidden)]
    pub configured_table_association: std::option::Option<crate::model::ConfiguredTableAssociation>,
    _request_id: Option<String>,
}
impl UpdateConfiguredTableAssociationOutput {
    /// <p>The entire updated configured table association.</p>
    pub fn configured_table_association(
        &self,
    ) -> std::option::Option<&crate::model::ConfiguredTableAssociation> {
        self.configured_table_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateConfiguredTableAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConfiguredTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfiguredTableAssociationOutput`](crate::output::UpdateConfiguredTableAssociationOutput).
    pub fn builder() -> crate::output::update_configured_table_association_output::Builder {
        crate::output::update_configured_table_association_output::Builder::default()
    }
}

/// See [`UpdateConfiguredTableAssociationOutput`](crate::output::UpdateConfiguredTableAssociationOutput).
pub mod update_configured_table_association_output {

    /// A builder for [`UpdateConfiguredTableAssociationOutput`](crate::output::UpdateConfiguredTableAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table_association:
            std::option::Option<crate::model::ConfiguredTableAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire updated configured table association.</p>
        pub fn configured_table_association(
            mut self,
            input: crate::model::ConfiguredTableAssociation,
        ) -> Self {
            self.configured_table_association = Some(input);
            self
        }
        /// <p>The entire updated configured table association.</p>
        pub fn set_configured_table_association(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAssociation>,
        ) -> Self {
            self.configured_table_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConfiguredTableAssociationOutput`](crate::output::UpdateConfiguredTableAssociationOutput).
        pub fn build(self) -> crate::output::UpdateConfiguredTableAssociationOutput {
            crate::output::UpdateConfiguredTableAssociationOutput {
                configured_table_association: self.configured_table_association,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConfiguredTableAssociationOutput {
    /// <p>The entire configured table association object.</p>
    #[doc(hidden)]
    pub configured_table_association: std::option::Option<crate::model::ConfiguredTableAssociation>,
    _request_id: Option<String>,
}
impl GetConfiguredTableAssociationOutput {
    /// <p>The entire configured table association object.</p>
    pub fn configured_table_association(
        &self,
    ) -> std::option::Option<&crate::model::ConfiguredTableAssociation> {
        self.configured_table_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConfiguredTableAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConfiguredTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`GetConfiguredTableAssociationOutput`](crate::output::GetConfiguredTableAssociationOutput).
    pub fn builder() -> crate::output::get_configured_table_association_output::Builder {
        crate::output::get_configured_table_association_output::Builder::default()
    }
}

/// See [`GetConfiguredTableAssociationOutput`](crate::output::GetConfiguredTableAssociationOutput).
pub mod get_configured_table_association_output {

    /// A builder for [`GetConfiguredTableAssociationOutput`](crate::output::GetConfiguredTableAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configured_table_association:
            std::option::Option<crate::model::ConfiguredTableAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire configured table association object.</p>
        pub fn configured_table_association(
            mut self,
            input: crate::model::ConfiguredTableAssociation,
        ) -> Self {
            self.configured_table_association = Some(input);
            self
        }
        /// <p>The entire configured table association object.</p>
        pub fn set_configured_table_association(
            mut self,
            input: std::option::Option<crate::model::ConfiguredTableAssociation>,
        ) -> Self {
            self.configured_table_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConfiguredTableAssociationOutput`](crate::output::GetConfiguredTableAssociationOutput).
        pub fn build(self) -> crate::output::GetConfiguredTableAssociationOutput {
            crate::output::GetConfiguredTableAssociationOutput {
                configured_table_association: self.configured_table_association,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSchemasOutput {
    /// <p>The retrieved list of schemas.</p>
    #[doc(hidden)]
    pub schema_summaries: std::option::Option<std::vec::Vec<crate::model::SchemaSummary>>,
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSchemasOutput {
    /// <p>The retrieved list of schemas.</p>
    pub fn schema_summaries(&self) -> std::option::Option<&[crate::model::SchemaSummary]> {
        self.schema_summaries.as_deref()
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSchemasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSchemasOutput {
    /// Creates a new builder-style object to manufacture [`ListSchemasOutput`](crate::output::ListSchemasOutput).
    pub fn builder() -> crate::output::list_schemas_output::Builder {
        crate::output::list_schemas_output::Builder::default()
    }
}

/// See [`ListSchemasOutput`](crate::output::ListSchemasOutput).
pub mod list_schemas_output {

    /// A builder for [`ListSchemasOutput`](crate::output::ListSchemasOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schema_summaries:
            std::option::Option<std::vec::Vec<crate::model::SchemaSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `schema_summaries`.
        ///
        /// To override the contents of this collection use [`set_schema_summaries`](Self::set_schema_summaries).
        ///
        /// <p>The retrieved list of schemas.</p>
        pub fn schema_summaries(mut self, input: crate::model::SchemaSummary) -> Self {
            let mut v = self.schema_summaries.unwrap_or_default();
            v.push(input);
            self.schema_summaries = Some(v);
            self
        }
        /// <p>The retrieved list of schemas.</p>
        pub fn set_schema_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SchemaSummary>>,
        ) -> Self {
            self.schema_summaries = input;
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSchemasOutput`](crate::output::ListSchemasOutput).
        pub fn build(self) -> crate::output::ListSchemasOutput {
            crate::output::ListSchemasOutput {
                schema_summaries: self.schema_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMembersOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of members returned by the ListMembers operation.</p>
    #[doc(hidden)]
    pub member_summaries: std::option::Option<std::vec::Vec<crate::model::MemberSummary>>,
    _request_id: Option<String>,
}
impl ListMembersOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of members returned by the ListMembers operation.</p>
    pub fn member_summaries(&self) -> std::option::Option<&[crate::model::MemberSummary]> {
        self.member_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListMembersOutput`](crate::output::ListMembersOutput).
    pub fn builder() -> crate::output::list_members_output::Builder {
        crate::output::list_members_output::Builder::default()
    }
}

/// See [`ListMembersOutput`](crate::output::ListMembersOutput).
pub mod list_members_output {

    /// A builder for [`ListMembersOutput`](crate::output::ListMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) member_summaries:
            std::option::Option<std::vec::Vec<crate::model::MemberSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `member_summaries`.
        ///
        /// To override the contents of this collection use [`set_member_summaries`](Self::set_member_summaries).
        ///
        /// <p>The list of members returned by the ListMembers operation.</p>
        pub fn member_summaries(mut self, input: crate::model::MemberSummary) -> Self {
            let mut v = self.member_summaries.unwrap_or_default();
            v.push(input);
            self.member_summaries = Some(v);
            self
        }
        /// <p>The list of members returned by the ListMembers operation.</p>
        pub fn set_member_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberSummary>>,
        ) -> Self {
            self.member_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMembersOutput`](crate::output::ListMembersOutput).
        pub fn build(self) -> crate::output::ListMembersOutput {
            crate::output::ListMembersOutput {
                next_token: self.next_token,
                member_summaries: self.member_summaries,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaAnalysisRuleOutput {
    /// <p>A specification about how data from the configured table can be used.</p>
    #[doc(hidden)]
    pub analysis_rule: std::option::Option<crate::model::AnalysisRule>,
    _request_id: Option<String>,
}
impl GetSchemaAnalysisRuleOutput {
    /// <p>A specification about how data from the configured table can be used.</p>
    pub fn analysis_rule(&self) -> std::option::Option<&crate::model::AnalysisRule> {
        self.analysis_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSchemaAnalysisRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSchemaAnalysisRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetSchemaAnalysisRuleOutput`](crate::output::GetSchemaAnalysisRuleOutput).
    pub fn builder() -> crate::output::get_schema_analysis_rule_output::Builder {
        crate::output::get_schema_analysis_rule_output::Builder::default()
    }
}

/// See [`GetSchemaAnalysisRuleOutput`](crate::output::GetSchemaAnalysisRuleOutput).
pub mod get_schema_analysis_rule_output {

    /// A builder for [`GetSchemaAnalysisRuleOutput`](crate::output::GetSchemaAnalysisRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) analysis_rule: std::option::Option<crate::model::AnalysisRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A specification about how data from the configured table can be used.</p>
        pub fn analysis_rule(mut self, input: crate::model::AnalysisRule) -> Self {
            self.analysis_rule = Some(input);
            self
        }
        /// <p>A specification about how data from the configured table can be used.</p>
        pub fn set_analysis_rule(
            mut self,
            input: std::option::Option<crate::model::AnalysisRule>,
        ) -> Self {
            self.analysis_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSchemaAnalysisRuleOutput`](crate::output::GetSchemaAnalysisRuleOutput).
        pub fn build(self) -> crate::output::GetSchemaAnalysisRuleOutput {
            crate::output::GetSchemaAnalysisRuleOutput {
                analysis_rule: self.analysis_rule,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaOutput {
    /// <p>The entire schema object.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<crate::model::Schema>,
    _request_id: Option<String>,
}
impl GetSchemaOutput {
    /// <p>The entire schema object.</p>
    pub fn schema(&self) -> std::option::Option<&crate::model::Schema> {
        self.schema.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSchemaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSchemaOutput {
    /// Creates a new builder-style object to manufacture [`GetSchemaOutput`](crate::output::GetSchemaOutput).
    pub fn builder() -> crate::output::get_schema_output::Builder {
        crate::output::get_schema_output::Builder::default()
    }
}

/// See [`GetSchemaOutput`](crate::output::GetSchemaOutput).
pub mod get_schema_output {

    /// A builder for [`GetSchemaOutput`](crate::output::GetSchemaOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schema: std::option::Option<crate::model::Schema>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire schema object.</p>
        pub fn schema(mut self, input: crate::model::Schema) -> Self {
            self.schema = Some(input);
            self
        }
        /// <p>The entire schema object.</p>
        pub fn set_schema(mut self, input: std::option::Option<crate::model::Schema>) -> Self {
            self.schema = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSchemaOutput`](crate::output::GetSchemaOutput).
        pub fn build(self) -> crate::output::GetSchemaOutput {
            crate::output::GetSchemaOutput {
                schema: self.schema,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMemberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMemberOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
    pub fn builder() -> crate::output::delete_member_output::Builder {
        crate::output::delete_member_output::Builder::default()
    }
}

/// See [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
pub mod delete_member_output {

    /// A builder for [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
        pub fn build(self) -> crate::output::DeleteMemberOutput {
            crate::output::DeleteMemberOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetSchemaOutput {
    /// <p>The retrieved list of schemas.</p>
    #[doc(hidden)]
    pub schemas: std::option::Option<std::vec::Vec<crate::model::Schema>>,
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::BatchGetSchemaError>>,
    _request_id: Option<String>,
}
impl BatchGetSchemaOutput {
    /// <p>The retrieved list of schemas.</p>
    pub fn schemas(&self) -> std::option::Option<&[crate::model::Schema]> {
        self.schemas.as_deref()
    }
    /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::BatchGetSchemaError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetSchemaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetSchemaOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetSchemaOutput`](crate::output::BatchGetSchemaOutput).
    pub fn builder() -> crate::output::batch_get_schema_output::Builder {
        crate::output::batch_get_schema_output::Builder::default()
    }
}

/// See [`BatchGetSchemaOutput`](crate::output::BatchGetSchemaOutput).
pub mod batch_get_schema_output {

    /// A builder for [`BatchGetSchemaOutput`](crate::output::BatchGetSchemaOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) schemas: std::option::Option<std::vec::Vec<crate::model::Schema>>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::BatchGetSchemaError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `schemas`.
        ///
        /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
        ///
        /// <p>The retrieved list of schemas.</p>
        pub fn schemas(mut self, input: crate::model::Schema) -> Self {
            let mut v = self.schemas.unwrap_or_default();
            v.push(input);
            self.schemas = Some(v);
            self
        }
        /// <p>The retrieved list of schemas.</p>
        pub fn set_schemas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Schema>>,
        ) -> Self {
            self.schemas = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
        pub fn errors(mut self, input: crate::model::BatchGetSchemaError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>Error reasons for schemas that could not be retrieved. One error is returned for every schema that could not be retrieved.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchGetSchemaError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetSchemaOutput`](crate::output::BatchGetSchemaOutput).
        pub fn build(self) -> crate::output::BatchGetSchemaOutput {
            crate::output::BatchGetSchemaOutput {
                schemas: self.schemas,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCollaborationsOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of collaborations.</p>
    #[doc(hidden)]
    pub collaboration_list: std::option::Option<std::vec::Vec<crate::model::CollaborationSummary>>,
    _request_id: Option<String>,
}
impl ListCollaborationsOutput {
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of collaborations.</p>
    pub fn collaboration_list(&self) -> std::option::Option<&[crate::model::CollaborationSummary]> {
        self.collaboration_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCollaborationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCollaborationsOutput {
    /// Creates a new builder-style object to manufacture [`ListCollaborationsOutput`](crate::output::ListCollaborationsOutput).
    pub fn builder() -> crate::output::list_collaborations_output::Builder {
        crate::output::list_collaborations_output::Builder::default()
    }
}

/// See [`ListCollaborationsOutput`](crate::output::ListCollaborationsOutput).
pub mod list_collaborations_output {

    /// A builder for [`ListCollaborationsOutput`](crate::output::ListCollaborationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) collaboration_list:
            std::option::Option<std::vec::Vec<crate::model::CollaborationSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token value retrieved from a previous call to access the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `collaboration_list`.
        ///
        /// To override the contents of this collection use [`set_collaboration_list`](Self::set_collaboration_list).
        ///
        /// <p>The list of collaborations.</p>
        pub fn collaboration_list(mut self, input: crate::model::CollaborationSummary) -> Self {
            let mut v = self.collaboration_list.unwrap_or_default();
            v.push(input);
            self.collaboration_list = Some(v);
            self
        }
        /// <p>The list of collaborations.</p>
        pub fn set_collaboration_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CollaborationSummary>>,
        ) -> Self {
            self.collaboration_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCollaborationsOutput`](crate::output::ListCollaborationsOutput).
        pub fn build(self) -> crate::output::ListCollaborationsOutput {
            crate::output::ListCollaborationsOutput {
                next_token: self.next_token,
                collaboration_list: self.collaboration_list,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCollaborationOutput {
    /// <p>The entire created collaboration object.</p>
    #[doc(hidden)]
    pub collaboration: std::option::Option<crate::model::Collaboration>,
    _request_id: Option<String>,
}
impl CreateCollaborationOutput {
    /// <p>The entire created collaboration object.</p>
    pub fn collaboration(&self) -> std::option::Option<&crate::model::Collaboration> {
        self.collaboration.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCollaborationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCollaborationOutput {
    /// Creates a new builder-style object to manufacture [`CreateCollaborationOutput`](crate::output::CreateCollaborationOutput).
    pub fn builder() -> crate::output::create_collaboration_output::Builder {
        crate::output::create_collaboration_output::Builder::default()
    }
}

/// See [`CreateCollaborationOutput`](crate::output::CreateCollaborationOutput).
pub mod create_collaboration_output {

    /// A builder for [`CreateCollaborationOutput`](crate::output::CreateCollaborationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collaboration: std::option::Option<crate::model::Collaboration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire created collaboration object.</p>
        pub fn collaboration(mut self, input: crate::model::Collaboration) -> Self {
            self.collaboration = Some(input);
            self
        }
        /// <p>The entire created collaboration object.</p>
        pub fn set_collaboration(
            mut self,
            input: std::option::Option<crate::model::Collaboration>,
        ) -> Self {
            self.collaboration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCollaborationOutput`](crate::output::CreateCollaborationOutput).
        pub fn build(self) -> crate::output::CreateCollaborationOutput {
            crate::output::CreateCollaborationOutput {
                collaboration: self.collaboration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCollaborationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCollaborationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteCollaborationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCollaborationOutput`](crate::output::DeleteCollaborationOutput).
    pub fn builder() -> crate::output::delete_collaboration_output::Builder {
        crate::output::delete_collaboration_output::Builder::default()
    }
}

/// See [`DeleteCollaborationOutput`](crate::output::DeleteCollaborationOutput).
pub mod delete_collaboration_output {

    /// A builder for [`DeleteCollaborationOutput`](crate::output::DeleteCollaborationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCollaborationOutput`](crate::output::DeleteCollaborationOutput).
        pub fn build(self) -> crate::output::DeleteCollaborationOutput {
            crate::output::DeleteCollaborationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCollaborationOutput {
    /// <p>The entire collaboration that has been updated.</p>
    #[doc(hidden)]
    pub collaboration: std::option::Option<crate::model::Collaboration>,
    _request_id: Option<String>,
}
impl UpdateCollaborationOutput {
    /// <p>The entire collaboration that has been updated.</p>
    pub fn collaboration(&self) -> std::option::Option<&crate::model::Collaboration> {
        self.collaboration.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateCollaborationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateCollaborationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCollaborationOutput`](crate::output::UpdateCollaborationOutput).
    pub fn builder() -> crate::output::update_collaboration_output::Builder {
        crate::output::update_collaboration_output::Builder::default()
    }
}

/// See [`UpdateCollaborationOutput`](crate::output::UpdateCollaborationOutput).
pub mod update_collaboration_output {

    /// A builder for [`UpdateCollaborationOutput`](crate::output::UpdateCollaborationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collaboration: std::option::Option<crate::model::Collaboration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire collaboration that has been updated.</p>
        pub fn collaboration(mut self, input: crate::model::Collaboration) -> Self {
            self.collaboration = Some(input);
            self
        }
        /// <p>The entire collaboration that has been updated.</p>
        pub fn set_collaboration(
            mut self,
            input: std::option::Option<crate::model::Collaboration>,
        ) -> Self {
            self.collaboration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCollaborationOutput`](crate::output::UpdateCollaborationOutput).
        pub fn build(self) -> crate::output::UpdateCollaborationOutput {
            crate::output::UpdateCollaborationOutput {
                collaboration: self.collaboration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCollaborationOutput {
    /// <p>The entire collaboration for this identifier.</p>
    #[doc(hidden)]
    pub collaboration: std::option::Option<crate::model::Collaboration>,
    _request_id: Option<String>,
}
impl GetCollaborationOutput {
    /// <p>The entire collaboration for this identifier.</p>
    pub fn collaboration(&self) -> std::option::Option<&crate::model::Collaboration> {
        self.collaboration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCollaborationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCollaborationOutput {
    /// Creates a new builder-style object to manufacture [`GetCollaborationOutput`](crate::output::GetCollaborationOutput).
    pub fn builder() -> crate::output::get_collaboration_output::Builder {
        crate::output::get_collaboration_output::Builder::default()
    }
}

/// See [`GetCollaborationOutput`](crate::output::GetCollaborationOutput).
pub mod get_collaboration_output {

    /// A builder for [`GetCollaborationOutput`](crate::output::GetCollaborationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collaboration: std::option::Option<crate::model::Collaboration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The entire collaboration for this identifier.</p>
        pub fn collaboration(mut self, input: crate::model::Collaboration) -> Self {
            self.collaboration = Some(input);
            self
        }
        /// <p>The entire collaboration for this identifier.</p>
        pub fn set_collaboration(
            mut self,
            input: std::option::Option<crate::model::Collaboration>,
        ) -> Self {
            self.collaboration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCollaborationOutput`](crate::output::GetCollaborationOutput).
        pub fn build(self) -> crate::output::GetCollaborationOutput {
            crate::output::GetCollaborationOutput {
                collaboration: self.collaboration,
                _request_id: self._request_id,
            }
        }
    }
}
