// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `BatchGetSchema`.
///
/// <p>Retrieves multiple schemas by their identifiers.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetSchema {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_get_schema_input::Builder,
}
impl BatchGetSchema {
    /// Creates a new `BatchGetSchema`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchGetSchema,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchGetSchemaError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchGetSchemaOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchGetSchemaError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier for the collaboration that the schemas belong to. Currently accepts collaboration ID.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the collaboration that the schemas belong to. Currently accepts collaboration ID.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>The names for the schema objects to retrieve.&gt;</p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.names(input.into());
        self
    }
    /// <p>The names for the schema objects to retrieve.&gt;</p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_names(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateCollaboration`.
///
/// <p>Creates a new collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCollaboration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_collaboration_input::Builder,
}
impl CreateCollaboration {
    /// Creates a new `CreateCollaboration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateCollaboration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateCollaborationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateCollaborationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateCollaborationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `members`.
    ///
    /// To override the contents of this collection use [`set_members`](Self::set_members).
    ///
    /// <p>A list of initial members, not including the creator. This list is immutable.</p>
    pub fn members(mut self, input: crate::model::MemberSpecification) -> Self {
        self.inner = self.inner.members(input);
        self
    }
    /// <p>A list of initial members, not including the creator. This list is immutable.</p>
    pub fn set_members(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::MemberSpecification>>,
    ) -> Self {
        self.inner = self.inner.set_members(input);
        self
    }
    /// <p>The display name for a collaboration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The display name for a collaboration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `creatorMemberAbilities`.
    ///
    /// To override the contents of this collection use [`set_creator_member_abilities`](Self::set_creator_member_abilities).
    ///
    /// <p>The abilities granted to the collaboration creator.</p>
    pub fn creator_member_abilities(mut self, input: crate::model::MemberAbility) -> Self {
        self.inner = self.inner.creator_member_abilities(input);
        self
    }
    /// <p>The abilities granted to the collaboration creator.</p>
    pub fn set_creator_member_abilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::MemberAbility>>,
    ) -> Self {
        self.inner = self.inner.set_creator_member_abilities(input);
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn creator_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.creator_display_name(input.into());
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn set_creator_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_creator_display_name(input);
        self
    }
    /// <p>The settings for client-side encryption with Cryptographic Computing for Clean Rooms.</p>
    pub fn data_encryption_metadata(mut self, input: crate::model::DataEncryptionMetadata) -> Self {
        self.inner = self.inner.data_encryption_metadata(input);
        self
    }
    /// <p>The settings for client-side encryption with Cryptographic Computing for Clean Rooms.</p>
    pub fn set_data_encryption_metadata(
        mut self,
        input: std::option::Option<crate::model::DataEncryptionMetadata>,
    ) -> Self {
        self.inner = self.inner.set_data_encryption_metadata(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::model::CollaborationQueryLogStatus) -> Self {
        self.inner = self.inner.query_log_status(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(
        mut self,
        input: std::option::Option<crate::model::CollaborationQueryLogStatus>,
    ) -> Self {
        self.inner = self.inner.set_query_log_status(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateConfiguredTable`.
///
/// <p>Creates a new configured table resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfiguredTable {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_configured_table_input::Builder,
}
impl CreateConfiguredTable {
    /// Creates a new `CreateConfiguredTable`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateConfiguredTable,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateConfiguredTableOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A reference to the AWS Glue table being configured.</p>
    pub fn table_reference(mut self, input: crate::model::TableReference) -> Self {
        self.inner = self.inner.table_reference(input);
        self
    }
    /// <p>A reference to the AWS Glue table being configured.</p>
    pub fn set_table_reference(
        mut self,
        input: std::option::Option<crate::model::TableReference>,
    ) -> Self {
        self.inner = self.inner.set_table_reference(input);
        self
    }
    /// Appends an item to `allowedColumns`.
    ///
    /// To override the contents of this collection use [`set_allowed_columns`](Self::set_allowed_columns).
    ///
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    pub fn allowed_columns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.allowed_columns(input.into());
        self
    }
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    pub fn set_allowed_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_allowed_columns(input);
        self
    }
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn analysis_method(mut self, input: crate::model::AnalysisMethod) -> Self {
        self.inner = self.inner.analysis_method(input);
        self
    }
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn set_analysis_method(
        mut self,
        input: std::option::Option<crate::model::AnalysisMethod>,
    ) -> Self {
        self.inner = self.inner.set_analysis_method(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateConfiguredTableAnalysisRule`.
///
/// <p>Creates a new analysis rule for a configured table. Currently, only one analysis rule can be created for a given configured table.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfiguredTableAnalysisRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_configured_table_analysis_rule_input::Builder,
}
impl CreateConfiguredTableAnalysisRule {
    /// Creates a new `CreateConfiguredTableAnalysisRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateConfiguredTableAnalysisRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAnalysisRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateConfiguredTableAnalysisRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAnalysisRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    pub fn analysis_rule_type(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        self.inner = self.inner.analysis_rule_type(input);
        self
    }
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    pub fn set_analysis_rule_type(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRuleType>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_type(input);
        self
    }
    /// <p>The entire created configured table analysis rule object.</p>
    pub fn analysis_rule_policy(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRulePolicy,
    ) -> Self {
        self.inner = self.inner.analysis_rule_policy(input);
        self
    }
    /// <p>The entire created configured table analysis rule object.</p>
    pub fn set_analysis_rule_policy(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRulePolicy>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_policy(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateConfiguredTableAssociation`.
///
/// <p>Creates a configured table association. A configured table association links a configured table with a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfiguredTableAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_configured_table_association_input::Builder,
}
impl CreateConfiguredTableAssociation {
    /// Creates a new `CreateConfiguredTableAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateConfiguredTableAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateConfiguredTableAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateMembership`.
///
/// <p>Creates a membership for a specific collaboration identifier and joins the collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMembership {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_membership_input::Builder,
}
impl CreateMembership {
    /// Creates a new `CreateMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateMembershipError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateMembershipOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateMembershipError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique ID for the associated collaboration.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The unique ID for the associated collaboration.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::model::MembershipQueryLogStatus) -> Self {
        self.inner = self.inner.query_log_status(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(
        mut self,
        input: std::option::Option<crate::model::MembershipQueryLogStatus>,
    ) -> Self {
        self.inner = self.inner.set_query_log_status(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteCollaboration`.
///
/// <p>Deletes a collaboration. It can only be called by the collaboration owner.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCollaboration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_collaboration_input::Builder,
}
impl DeleteCollaboration {
    /// Creates a new `DeleteCollaboration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteCollaboration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteCollaborationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteCollaborationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteCollaborationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteConfiguredTable`.
///
/// <p>Deletes a configured table.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfiguredTable {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_configured_table_input::Builder,
}
impl DeleteConfiguredTable {
    /// Creates a new `DeleteConfiguredTable`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteConfiguredTable,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteConfiguredTableOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique ID for the configured table to delete.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The unique ID for the configured table to delete.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteConfiguredTableAnalysisRule`.
///
/// <p>Deletes a configured table analysis rule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfiguredTableAnalysisRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_configured_table_analysis_rule_input::Builder,
}
impl DeleteConfiguredTableAnalysisRule {
    /// Creates a new `DeleteConfiguredTableAnalysisRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteConfiguredTableAnalysisRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAnalysisRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteConfiguredTableAnalysisRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAnalysisRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The analysis rule type to be deleted. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn analysis_rule_type(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        self.inner = self.inner.analysis_rule_type(input);
        self
    }
    /// <p>The analysis rule type to be deleted. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn set_analysis_rule_type(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRuleType>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_type(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteConfiguredTableAssociation`.
///
/// <p>Deletes a configured table association.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConfiguredTableAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_configured_table_association_input::Builder,
}
impl DeleteConfiguredTableAssociation {
    /// Creates a new `DeleteConfiguredTableAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteConfiguredTableAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteConfiguredTableAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    pub fn configured_table_association_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .configured_table_association_identifier(input.into());
        self
    }
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_association_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_configured_table_association_identifier(input);
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteMember`.
///
/// <p>Removes the specified member from a collaboration. The removed member is placed in the Removed status and can't interact with the collaboration. The removed member's data is inaccessible to active members of the collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMember {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_member_input::Builder,
}
impl DeleteMember {
    /// Creates a new `DeleteMember`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteMember,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteMemberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteMemberOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteMemberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier for the associated collaboration.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the associated collaboration.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>The account ID of the member to remove.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the member to remove.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteMembership`.
///
/// <p>Deletes a specified membership. All resources under a membership must be deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMembership {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_membership_input::Builder,
}
impl DeleteMembership {
    /// Creates a new `DeleteMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteMembershipError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteMembershipOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteMembershipError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetCollaboration`.
///
/// <p>Returns metadata about a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetCollaboration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_collaboration_input::Builder,
}
impl GetCollaboration {
    /// Creates a new `GetCollaboration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetCollaboration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetCollaborationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetCollaborationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetCollaborationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetConfiguredTable`.
///
/// <p>Retrieves a configured table.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetConfiguredTable {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_configured_table_input::Builder,
}
impl GetConfiguredTable {
    /// Creates a new `GetConfiguredTable`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetConfiguredTable,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetConfiguredTableOutput,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique ID for the configured table to retrieve.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The unique ID for the configured table to retrieve.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetConfiguredTableAnalysisRule`.
///
/// <p>Retrieves a configured table analysis rule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetConfiguredTableAnalysisRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_configured_table_analysis_rule_input::Builder,
}
impl GetConfiguredTableAnalysisRule {
    /// Creates a new `GetConfiguredTableAnalysisRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetConfiguredTableAnalysisRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAnalysisRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetConfiguredTableAnalysisRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAnalysisRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier for the configured table to retrieve. Currently accepts the configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the configured table to retrieve. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The analysis rule to be retrieved. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn analysis_rule_type(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        self.inner = self.inner.analysis_rule_type(input);
        self
    }
    /// <p>The analysis rule to be retrieved. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn set_analysis_rule_type(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRuleType>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_type(input);
        self
    }
}

/// Fluent builder constructing a request to `GetConfiguredTableAssociation`.
///
/// <p>Retrieves a configured table association.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetConfiguredTableAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_configured_table_association_input::Builder,
}
impl GetConfiguredTableAssociation {
    /// Creates a new `GetConfiguredTableAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetConfiguredTableAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetConfiguredTableAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique ID for the configured table association to retrieve. Currently accepts the configured table ID.</p>
    pub fn configured_table_association_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .configured_table_association_identifier(input.into());
        self
    }
    /// <p>The unique ID for the configured table association to retrieve. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_association_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_configured_table_association_identifier(input);
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetMembership`.
///
/// <p>Retrieves a specified membership for an identifier.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMembership {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_membership_input::Builder,
}
impl GetMembership {
    /// Creates a new `GetMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetMembershipError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetMembershipOutput,
        aws_smithy_http::result::SdkError<crate::error::GetMembershipError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The identifier for a membership resource.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetProtectedQuery`.
///
/// <p>Returns query processing metadata.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetProtectedQuery {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_protected_query_input::Builder,
}
impl GetProtectedQuery {
    /// Creates a new `GetProtectedQuery`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetProtectedQuery,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetProtectedQueryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetProtectedQueryOutput,
        aws_smithy_http::result::SdkError<crate::error::GetProtectedQueryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for a membership in a protected query instance.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The identifier for a membership in a protected query instance.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The identifier for a protected query instance.</p>
    pub fn protected_query_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.protected_query_identifier(input.into());
        self
    }
    /// <p>The identifier for a protected query instance.</p>
    pub fn set_protected_query_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_protected_query_identifier(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSchema`.
///
/// <p>Retrieves the schema for a relation within a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSchema {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_schema_input::Builder,
}
impl GetSchema {
    /// Creates a new `GetSchema`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSchema,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSchemaError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSchemaOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSchemaError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>The name of the relation to retrieve the schema for.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the relation to retrieve the schema for.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetSchemaAnalysisRule`.
///
/// <p>Retrieves a schema analysis rule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSchemaAnalysisRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_schema_analysis_rule_input::Builder,
}
impl GetSchemaAnalysisRule {
    /// Creates a new `GetSchemaAnalysisRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetSchemaAnalysisRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetSchemaAnalysisRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetSchemaAnalysisRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::GetSchemaAnalysisRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>The name of the schema to retrieve the analysis rule for.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the schema to retrieve the analysis rule for.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The type of the schema analysis rule to retrieve. Schema analysis rules are uniquely identified by a combination of the collaboration, the schema name, and their type.</p>
    pub fn r#type(mut self, input: crate::model::AnalysisRuleType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the schema analysis rule to retrieve. Schema analysis rules are uniquely identified by a combination of the collaboration, the schema name, and their type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::AnalysisRuleType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCollaborations`.
///
/// <p>Lists collaborations the caller owns, is active in, or has been invited to.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCollaborations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_collaborations_input::Builder,
}
impl ListCollaborations {
    /// Creates a new `ListCollaborations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCollaborations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCollaborationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCollaborationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCollaborationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCollaborationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCollaborationsPaginator {
        crate::paginator::ListCollaborationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service may return a nextToken even if the maximum results has not been met.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service may return a nextToken even if the maximum results has not been met.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The caller's status in a collaboration.</p>
    pub fn member_status(mut self, input: crate::model::FilterableMemberStatus) -> Self {
        self.inner = self.inner.member_status(input);
        self
    }
    /// <p>The caller's status in a collaboration.</p>
    pub fn set_member_status(
        mut self,
        input: std::option::Option<crate::model::FilterableMemberStatus>,
    ) -> Self {
        self.inner = self.inner.set_member_status(input);
        self
    }
}

/// Fluent builder constructing a request to `ListConfiguredTableAssociations`.
///
/// <p>Lists configured table associations for a membership.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListConfiguredTableAssociations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_configured_table_associations_input::Builder,
}
impl ListConfiguredTableAssociations {
    /// Creates a new `ListConfiguredTableAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListConfiguredTableAssociations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListConfiguredTableAssociationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListConfiguredTableAssociationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListConfiguredTableAssociationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListConfiguredTableAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListConfiguredTableAssociationsPaginator {
        crate::paginator::ListConfiguredTableAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p>A unique identifier for the membership to list configured table associations for. Currently accepts the membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the membership to list configured table associations for. Currently accepts the membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListConfiguredTables`.
///
/// <p>Lists configured tables.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListConfiguredTables {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_configured_tables_input::Builder,
}
impl ListConfiguredTables {
    /// Creates a new `ListConfiguredTables`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListConfiguredTables,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListConfiguredTablesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListConfiguredTablesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListConfiguredTablesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListConfiguredTablesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListConfiguredTablesPaginator {
        crate::paginator::ListConfiguredTablesPaginator::new(self.handle, self.inner)
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMembers`.
///
/// <p>Lists all members within a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMembers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_members_input::Builder,
}
impl ListMembers {
    /// Creates a new `ListMembers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMembers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMembersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMembersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMembersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMembersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMembersPaginator {
        crate::paginator::ListMembersPaginator::new(self.handle, self.inner)
    }
    /// <p>The identifier of the collaboration in which the members are listed.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The identifier of the collaboration in which the members are listed.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMemberships`.
///
/// <p>Lists all memberships resources within the caller's account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMemberships {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_memberships_input::Builder,
}
impl ListMemberships {
    /// Creates a new `ListMemberships`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMemberships,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMembershipsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMembershipsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMembershipsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMembershipsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMembershipsPaginator {
        crate::paginator::ListMembershipsPaginator::new(self.handle, self.inner)
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A filter which will return only memberships in the specified status.</p>
    pub fn status(mut self, input: crate::model::MembershipStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A filter which will return only memberships in the specified status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::MembershipStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProtectedQueries`.
///
/// <p>Lists protected queries, sorted by the most recent query.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProtectedQueries {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_protected_queries_input::Builder,
}
impl ListProtectedQueries {
    /// Creates a new `ListProtectedQueries`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProtectedQueries,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProtectedQueriesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProtectedQueriesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProtectedQueriesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProtectedQueriesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProtectedQueriesPaginator {
        crate::paginator::ListProtectedQueriesPaginator::new(self.handle, self.inner)
    }
    /// <p>The identifier for the membership in the collaboration.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The identifier for the membership in the collaboration.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>A filter on the status of the protected query.</p>
    pub fn status(mut self, input: crate::model::ProtectedQueryStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A filter on the status of the protected query.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::model::ProtectedQueryStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListSchemas`.
///
/// <p>Lists the schemas for relations within a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSchemas {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_schemas_input::Builder,
}
impl ListSchemas {
    /// Creates a new `ListSchemas`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListSchemas,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListSchemasError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListSchemasOutput,
        aws_smithy_http::result::SdkError<crate::error::ListSchemasError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListSchemasPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListSchemasPaginator {
        crate::paginator::ListSchemasPaginator::new(self.handle, self.inner)
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.</p>
    pub fn schema_type(mut self, input: crate::model::SchemaType) -> Self {
        self.inner = self.inner.schema_type(input);
        self
    }
    /// <p>If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.</p>
    pub fn set_schema_type(mut self, input: std::option::Option<crate::model::SchemaType>) -> Self {
        self.inner = self.inner.set_schema_type(input);
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `StartProtectedQuery`.
///
/// <p>Creates a protected query that is started by AWS Clean Rooms.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartProtectedQuery {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_protected_query_input::Builder,
}
impl StartProtectedQuery {
    /// Creates a new `StartProtectedQuery`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartProtectedQuery,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartProtectedQueryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartProtectedQueryOutput,
        aws_smithy_http::result::SdkError<crate::error::StartProtectedQueryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The type of the protected query to be started.</p>
    pub fn r#type(mut self, input: crate::model::ProtectedQueryType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the protected query to be started.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::model::ProtectedQueryType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>A unique identifier for the membership to run this query against. Currently accepts a membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the membership to run this query against. Currently accepts a membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The protected SQL query parameters.</p>
    pub fn sql_parameters(mut self, input: crate::model::ProtectedQuerySqlParameters) -> Self {
        self.inner = self.inner.sql_parameters(input);
        self
    }
    /// <p>The protected SQL query parameters.</p>
    pub fn set_sql_parameters(
        mut self,
        input: std::option::Option<crate::model::ProtectedQuerySqlParameters>,
    ) -> Self {
        self.inner = self.inner.set_sql_parameters(input);
        self
    }
    /// <p>The details needed to write the query results.</p>
    pub fn result_configuration(
        mut self,
        input: crate::model::ProtectedQueryResultConfiguration,
    ) -> Self {
        self.inner = self.inner.result_configuration(input);
        self
    }
    /// <p>The details needed to write the query results.</p>
    pub fn set_result_configuration(
        mut self,
        input: std::option::Option<crate::model::ProtectedQueryResultConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_result_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateCollaboration`.
///
/// <p>Updates collaboration metadata and can only be called by the collaboration owner.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCollaboration {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_collaboration_input::Builder,
}
impl UpdateCollaboration {
    /// Creates a new `UpdateCollaboration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateCollaboration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateCollaborationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateCollaborationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateCollaborationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn collaboration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.collaboration_identifier(input.into());
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn set_collaboration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_collaboration_identifier(input);
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description of the collaboration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the collaboration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConfiguredTable`.
///
/// <p>Updates a configured table.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfiguredTable {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_configured_table_input::Builder,
}
impl UpdateConfiguredTable {
    /// Creates a new `UpdateConfiguredTable`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConfiguredTable,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConfiguredTableOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The identifier for the configured table to update. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>A new name for the configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A new name for the configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A new description for the configured table.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A new description for the configured table.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConfiguredTableAnalysisRule`.
///
/// <p>Updates a configured table analysis rule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfiguredTableAnalysisRule {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_configured_table_analysis_rule_input::Builder,
}
impl UpdateConfiguredTableAnalysisRule {
    /// Creates a new `UpdateConfiguredTableAnalysisRule`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConfiguredTableAnalysisRule,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAnalysisRuleError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConfiguredTableAnalysisRuleOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAnalysisRuleError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn analysis_rule_type(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        self.inner = self.inner.analysis_rule_type(input);
        self
    }
    /// <p>The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.</p>
    pub fn set_analysis_rule_type(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRuleType>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_type(input);
        self
    }
    /// <p>The new analysis rule policy for the configured table analysis rule.</p>
    pub fn analysis_rule_policy(
        mut self,
        input: crate::model::ConfiguredTableAnalysisRulePolicy,
    ) -> Self {
        self.inner = self.inner.analysis_rule_policy(input);
        self
    }
    /// <p>The new analysis rule policy for the configured table analysis rule.</p>
    pub fn set_analysis_rule_policy(
        mut self,
        input: std::option::Option<crate::model::ConfiguredTableAnalysisRulePolicy>,
    ) -> Self {
        self.inner = self.inner.set_analysis_rule_policy(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateConfiguredTableAssociation`.
///
/// <p>Updates a configured table association.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConfiguredTableAssociation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_configured_table_association_input::Builder,
}
impl UpdateConfiguredTableAssociation {
    /// Creates a new `UpdateConfiguredTableAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateConfiguredTableAssociation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAssociationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateConfiguredTableAssociationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAssociationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier for the configured table association to update. Currently accepts the configured table association ID.</p>
    pub fn configured_table_association_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .configured_table_association_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the configured table association to update. Currently accepts the configured table association ID.</p>
    pub fn set_configured_table_association_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .set_configured_table_association_identifier(input);
        self
    }
    /// <p>The unique ID for the membership that the configured table association belongs to.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The unique ID for the membership that the configured table association belongs to.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>A new description for the configured table association.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A new description for the configured table association.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateMembership`.
///
/// <p>Updates a membership.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMembership {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_membership_input::Builder,
}
impl UpdateMembership {
    /// Creates a new `UpdateMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateMembershipError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateMembershipOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateMembershipError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the membership.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The unique identifier of the membership.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::model::MembershipQueryLogStatus) -> Self {
        self.inner = self.inner.query_log_status(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(
        mut self,
        input: std::option::Option<crate::model::MembershipQueryLogStatus>,
    ) -> Self {
        self.inner = self.inner.set_query_log_status(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateProtectedQuery`.
///
/// <p>Updates the processing of a currently running query.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProtectedQuery {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_protected_query_input::Builder,
}
impl UpdateProtectedQuery {
    /// Creates a new `UpdateProtectedQuery`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateProtectedQuery,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateProtectedQueryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateProtectedQueryOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateProtectedQueryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for a member of a protected query instance.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The identifier for a member of a protected query instance.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The identifier for a protected query instance.</p>
    pub fn protected_query_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.protected_query_identifier(input.into());
        self
    }
    /// <p>The identifier for a protected query instance.</p>
    pub fn set_protected_query_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_protected_query_identifier(input);
        self
    }
    /// <p>The target status of a query. Used to update the execution status of a currently running query.</p>
    pub fn target_status(mut self, input: crate::model::TargetProtectedQueryStatus) -> Self {
        self.inner = self.inner.target_status(input);
        self
    }
    /// <p>The target status of a query. Used to update the execution status of a currently running query.</p>
    pub fn set_target_status(
        mut self,
        input: std::option::Option<crate::model::TargetProtectedQueryStatus>,
    ) -> Self {
        self.inner = self.inner.set_target_status(input);
        self
    }
}
