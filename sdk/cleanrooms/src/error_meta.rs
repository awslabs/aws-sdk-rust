// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Caller does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Unexpected error during processing of request.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Request references a resource which does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Request denied because service quota has been exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the specified constraints.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetSchemaError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetSchemaError> for Error {
    fn from(err: crate::error::BatchGetSchemaError) -> Self {
        match err {
            crate::error::BatchGetSchemaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchGetSchemaError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchGetSchemaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchGetSchemaError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchGetSchemaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchGetSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCollaborationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCollaborationError> for Error {
    fn from(err: crate::error::CreateCollaborationError) -> Self {
        match err {
            crate::error::CreateCollaborationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCollaborationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCollaborationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateCollaborationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCollaborationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConfiguredTableError> for Error {
    fn from(err: crate::error::CreateConfiguredTableError) -> Self {
        match err {
            crate::error::CreateConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConfiguredTableError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateConfiguredTableError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateConfiguredTableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConfiguredTableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAnalysisRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::error::CreateConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::error::CreateConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConfiguredTableAnalysisRuleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::CreateConfiguredTableAnalysisRuleError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CreateConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateConfiguredTableAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConfiguredTableAssociationError> for Error {
    fn from(err: crate::error::CreateConfiguredTableAssociationError) -> Self {
        match err {
            crate::error::CreateConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConfiguredTableAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CreateConfiguredTableAssociationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConfiguredTableAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMembershipError> for Error {
    fn from(err: crate::error::CreateMembershipError) -> Self {
        match err {
            crate::error::CreateMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCollaborationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCollaborationError> for Error {
    fn from(err: crate::error::DeleteCollaborationError) -> Self {
        match err {
            crate::error::DeleteCollaborationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCollaborationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCollaborationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCollaborationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfiguredTableError> for Error {
    fn from(err: crate::error::DeleteConfiguredTableError) -> Self {
        match err {
            crate::error::DeleteConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConfiguredTableError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteConfiguredTableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConfiguredTableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAnalysisRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::error::DeleteConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::error::DeleteConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteConfiguredTableAnalysisRuleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeleteConfiguredTableAnalysisRuleError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteConfiguredTableAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfiguredTableAssociationError> for Error {
    fn from(err: crate::error::DeleteConfiguredTableAssociationError) -> Self {
        match err {
            crate::error::DeleteConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteConfiguredTableAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConfiguredTableAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMemberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMemberError> for Error {
    fn from(err: crate::error::DeleteMemberError) -> Self {
        match err {
            crate::error::DeleteMemberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteMemberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteMemberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteMemberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteMemberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMembershipError> for Error {
    fn from(err: crate::error::DeleteMembershipError) -> Self {
        match err {
            crate::error::DeleteMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCollaborationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCollaborationError> for Error {
    fn from(err: crate::error::GetCollaborationError) -> Self {
        match err {
            crate::error::GetCollaborationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCollaborationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCollaborationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCollaborationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConfiguredTableError> for Error {
    fn from(err: crate::error::GetConfiguredTableError) -> Self {
        match err {
            crate::error::GetConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConfiguredTableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConfiguredTableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAnalysisRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::error::GetConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::error::GetConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConfiguredTableAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConfiguredTableAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetConfiguredTableAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConfiguredTableAssociationError> for Error {
    fn from(err: crate::error::GetConfiguredTableAssociationError) -> Self {
        match err {
            crate::error::GetConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetConfiguredTableAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetConfiguredTableAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMembershipError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMembershipError> for Error {
    fn from(err: crate::error::GetMembershipError) -> Self {
        match err {
            crate::error::GetMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProtectedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetProtectedQueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProtectedQueryError> for Error {
    fn from(err: crate::error::GetProtectedQueryError) -> Self {
        match err {
            crate::error::GetProtectedQueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetProtectedQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetProtectedQueryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetProtectedQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSchemaError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSchemaError> for Error {
    fn from(err: crate::error::GetSchemaError) -> Self {
        match err {
            crate::error::GetSchemaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSchemaError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSchemaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSchemaError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSchemaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSchemaAnalysisRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSchemaAnalysisRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSchemaAnalysisRuleError> for Error {
    fn from(err: crate::error::GetSchemaAnalysisRuleError) -> Self {
        match err {
            crate::error::GetSchemaAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSchemaAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSchemaAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSchemaAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSchemaAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSchemaAnalysisRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCollaborationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCollaborationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCollaborationsError> for Error {
    fn from(err: crate::error::ListCollaborationsError) -> Self {
        match err {
            crate::error::ListCollaborationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCollaborationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCollaborationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCollaborationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCollaborationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListConfiguredTableAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListConfiguredTableAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConfiguredTableAssociationsError> for Error {
    fn from(err: crate::error::ListConfiguredTableAssociationsError) -> Self {
        match err {
            crate::error::ListConfiguredTableAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListConfiguredTableAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListConfiguredTableAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListConfiguredTableAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListConfiguredTableAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListConfiguredTablesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListConfiguredTablesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConfiguredTablesError> for Error {
    fn from(err: crate::error::ListConfiguredTablesError) -> Self {
        match err {
            crate::error::ListConfiguredTablesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListConfiguredTablesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListConfiguredTablesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListConfiguredTablesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListConfiguredTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMembersError> for Error {
    fn from(err: crate::error::ListMembersError) -> Self {
        match err {
            crate::error::ListMembersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListMembersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListMembersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListMembersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMembershipsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMembershipsError> for Error {
    fn from(err: crate::error::ListMembershipsError) -> Self {
        match err {
            crate::error::ListMembershipsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListMembershipsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListMembershipsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListMembershipsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProtectedQueriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListProtectedQueriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProtectedQueriesError> for Error {
    fn from(err: crate::error::ListProtectedQueriesError) -> Self {
        match err {
            crate::error::ListProtectedQueriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListProtectedQueriesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListProtectedQueriesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListProtectedQueriesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListProtectedQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSchemasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSchemasError> for Error {
    fn from(err: crate::error::ListSchemasError) -> Self {
        match err {
            crate::error::ListSchemasError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListSchemasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSchemasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListSchemasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSchemasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartProtectedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartProtectedQueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartProtectedQueryError> for Error {
    fn from(err: crate::error::StartProtectedQueryError) -> Self {
        match err {
            crate::error::StartProtectedQueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartProtectedQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartProtectedQueryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartProtectedQueryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartProtectedQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCollaborationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCollaborationError> for Error {
    fn from(err: crate::error::UpdateCollaborationError) -> Self {
        match err {
            crate::error::UpdateCollaborationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateCollaborationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateCollaborationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateCollaborationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConfiguredTableError> for Error {
    fn from(err: crate::error::UpdateConfiguredTableError) -> Self {
        match err {
            crate::error::UpdateConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateConfiguredTableError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateConfiguredTableError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateConfiguredTableError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAnalysisRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::error::UpdateConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::error::UpdateConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateConfiguredTableAnalysisRuleError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::UpdateConfiguredTableAnalysisRuleError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateConfiguredTableAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConfiguredTableAssociationError> for Error {
    fn from(err: crate::error::UpdateConfiguredTableAssociationError) -> Self {
        match err {
            crate::error::UpdateConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateConfiguredTableAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateConfiguredTableAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMembershipError> for Error {
    fn from(err: crate::error::UpdateMembershipError) -> Self {
        match err {
            crate::error::UpdateMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateProtectedQueryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateProtectedQueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateProtectedQueryError> for Error {
    fn from(err: crate::error::UpdateProtectedQueryError) -> Self {
        match err {
            crate::error::UpdateProtectedQueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateProtectedQueryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateProtectedQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateProtectedQueryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateProtectedQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
