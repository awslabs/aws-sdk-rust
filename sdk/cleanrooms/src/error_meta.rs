// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Caller does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Unexpected error during processing of request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Request references a resource which does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Request denied because service quota has been exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the specified constraints.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError> for Error {
    fn from(err: crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError) -> Self {
        match err {
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_get_collaboration_analysis_template::BatchGetCollaborationAnalysisTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_schema::BatchGetSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_schema::BatchGetSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_schema::BatchGetSchemaError> for Error {
    fn from(err: crate::operation::batch_get_schema::BatchGetSchemaError) -> Self {
        match err {
            crate::operation::batch_get_schema::BatchGetSchemaError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_schema::BatchGetSchemaError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_get_schema::BatchGetSchemaError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_get_schema::BatchGetSchemaError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_schema::BatchGetSchemaError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_schema::BatchGetSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_analysis_template::CreateAnalysisTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_analysis_template::CreateAnalysisTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_analysis_template::CreateAnalysisTemplateError> for Error {
    fn from(err: crate::operation::create_analysis_template::CreateAnalysisTemplateError) -> Self {
        match err {
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_analysis_template::CreateAnalysisTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_collaboration::CreateCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_collaboration::CreateCollaborationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_collaboration::CreateCollaborationError> for Error {
    fn from(err: crate::operation::create_collaboration::CreateCollaborationError) -> Self {
        match err {
            crate::operation::create_collaboration::CreateCollaborationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_collaboration::CreateCollaborationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_collaboration::CreateCollaborationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_collaboration::CreateCollaborationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_collaboration::CreateCollaborationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_collaboration::CreateCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_configured_table::CreateConfiguredTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_configured_table::CreateConfiguredTableError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configured_table::CreateConfiguredTableError> for Error {
    fn from(err: crate::operation::create_configured_table::CreateConfiguredTableError) -> Self {
        match err {
            crate::operation::create_configured_table::CreateConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_configured_table::CreateConfiguredTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_configured_table::CreateConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_configured_table::CreateConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_configured_table::CreateConfiguredTableError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_configured_table::CreateConfiguredTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_configured_table::CreateConfiguredTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_configured_table::CreateConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError> for Error {
    fn from(err: crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError) -> Self {
        match err {
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_membership::CreateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_membership::CreateMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_membership::CreateMembershipError> for Error {
    fn from(err: crate::operation::create_membership::CreateMembershipError) -> Self {
        match err {
            crate::operation::create_membership::CreateMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_membership::CreateMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_membership::CreateMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_membership::CreateMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_membership::CreateMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_membership::CreateMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_membership::CreateMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_membership::CreateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_analysis_template::DeleteAnalysisTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_analysis_template::DeleteAnalysisTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_analysis_template::DeleteAnalysisTemplateError> for Error {
    fn from(err: crate::operation::delete_analysis_template::DeleteAnalysisTemplateError) -> Self {
        match err {
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_analysis_template::DeleteAnalysisTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_collaboration::DeleteCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_collaboration::DeleteCollaborationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_collaboration::DeleteCollaborationError> for Error {
    fn from(err: crate::operation::delete_collaboration::DeleteCollaborationError) -> Self {
        match err {
            crate::operation::delete_collaboration::DeleteCollaborationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_collaboration::DeleteCollaborationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_collaboration::DeleteCollaborationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_collaboration::DeleteCollaborationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_collaboration::DeleteCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_configured_table::DeleteConfiguredTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_configured_table::DeleteConfiguredTableError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configured_table::DeleteConfiguredTableError> for Error {
    fn from(err: crate::operation::delete_configured_table::DeleteConfiguredTableError) -> Self {
        match err {
            crate::operation::delete_configured_table::DeleteConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_configured_table::DeleteConfiguredTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_configured_table::DeleteConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_configured_table::DeleteConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_configured_table::DeleteConfiguredTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_configured_table::DeleteConfiguredTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_configured_table::DeleteConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_configured_table_analysis_rule::DeleteConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError> for Error {
    fn from(err: crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError) -> Self {
        match err {
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_member::DeleteMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_member::DeleteMemberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_member::DeleteMemberError> for Error {
    fn from(err: crate::operation::delete_member::DeleteMemberError) -> Self {
        match err {
            crate::operation::delete_member::DeleteMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_member::DeleteMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_member::DeleteMemberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_member::DeleteMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_member::DeleteMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_member::DeleteMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_member::DeleteMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_membership::DeleteMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_membership::DeleteMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_membership::DeleteMembershipError> for Error {
    fn from(err: crate::operation::delete_membership::DeleteMembershipError) -> Self {
        match err {
            crate::operation::delete_membership::DeleteMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_membership::DeleteMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_membership::DeleteMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_membership::DeleteMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_membership::DeleteMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_membership::DeleteMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_membership::DeleteMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_analysis_template::GetAnalysisTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_analysis_template::GetAnalysisTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_analysis_template::GetAnalysisTemplateError> for Error {
    fn from(err: crate::operation::get_analysis_template::GetAnalysisTemplateError) -> Self {
        match err {
            crate::operation::get_analysis_template::GetAnalysisTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_analysis_template::GetAnalysisTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_analysis_template::GetAnalysisTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_analysis_template::GetAnalysisTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_analysis_template::GetAnalysisTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_analysis_template::GetAnalysisTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_collaboration::GetCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_collaboration::GetCollaborationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_collaboration::GetCollaborationError> for Error {
    fn from(err: crate::operation::get_collaboration::GetCollaborationError) -> Self {
        match err {
            crate::operation::get_collaboration::GetCollaborationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_collaboration::GetCollaborationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_collaboration::GetCollaborationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_collaboration::GetCollaborationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_collaboration::GetCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError> for Error {
    fn from(err: crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError) -> Self {
        match err {
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_collaboration_analysis_template::GetCollaborationAnalysisTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_configured_table::GetConfiguredTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_configured_table::GetConfiguredTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configured_table::GetConfiguredTableError> for Error {
    fn from(err: crate::operation::get_configured_table::GetConfiguredTableError) -> Self {
        match err {
            crate::operation::get_configured_table::GetConfiguredTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_configured_table::GetConfiguredTableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_configured_table::GetConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_configured_table::GetConfiguredTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_configured_table::GetConfiguredTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_configured_table::GetConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_configured_table_analysis_rule::GetConfiguredTableAnalysisRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_configured_table_association::GetConfiguredTableAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configured_table_association::GetConfiguredTableAssociationError> for Error {
    fn from(err: crate::operation::get_configured_table_association::GetConfiguredTableAssociationError) -> Self {
        match err {
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_configured_table_association::GetConfiguredTableAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_membership::GetMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_membership::GetMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_membership::GetMembershipError> for Error {
    fn from(err: crate::operation::get_membership::GetMembershipError) -> Self {
        match err {
            crate::operation::get_membership::GetMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_membership::GetMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_membership::GetMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_membership::GetMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_membership::GetMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_membership::GetMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protected_query::GetProtectedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protected_query::GetProtectedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_protected_query::GetProtectedQueryError> for Error {
    fn from(err: crate::operation::get_protected_query::GetProtectedQueryError) -> Self {
        match err {
            crate::operation::get_protected_query::GetProtectedQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_protected_query::GetProtectedQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_protected_query::GetProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_protected_query::GetProtectedQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_protected_query::GetProtectedQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_protected_query::GetProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema::GetSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema::GetSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_schema::GetSchemaError> for Error {
    fn from(err: crate::operation::get_schema::GetSchemaError) -> Self {
        match err {
            crate::operation::get_schema::GetSchemaError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_schema::GetSchemaError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_schema::GetSchemaError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_schema::GetSchemaError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_schema::GetSchemaError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_schema::GetSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError> for Error {
    fn from(err: crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError) -> Self {
        match err {
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_schema_analysis_rule::GetSchemaAnalysisRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_analysis_templates::ListAnalysisTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_analysis_templates::ListAnalysisTemplatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_analysis_templates::ListAnalysisTemplatesError> for Error {
    fn from(err: crate::operation::list_analysis_templates::ListAnalysisTemplatesError) -> Self {
        match err {
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_analysis_templates::ListAnalysisTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError> for Error {
    fn from(err: crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError) -> Self {
        match err {
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_collaboration_analysis_templates::ListCollaborationAnalysisTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collaborations::ListCollaborationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collaborations::ListCollaborationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_collaborations::ListCollaborationsError> for Error {
    fn from(err: crate::operation::list_collaborations::ListCollaborationsError) -> Self {
        match err {
            crate::operation::list_collaborations::ListCollaborationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_collaborations::ListCollaborationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_collaborations::ListCollaborationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_collaborations::ListCollaborationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_collaborations::ListCollaborationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError> for Error {
    fn from(err: crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError) -> Self {
        match err {
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_configured_table_associations::ListConfiguredTableAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_configured_tables::ListConfiguredTablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_configured_tables::ListConfiguredTablesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_configured_tables::ListConfiguredTablesError> for Error {
    fn from(err: crate::operation::list_configured_tables::ListConfiguredTablesError) -> Self {
        match err {
            crate::operation::list_configured_tables::ListConfiguredTablesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_configured_tables::ListConfiguredTablesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_configured_tables::ListConfiguredTablesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_configured_tables::ListConfiguredTablesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_configured_tables::ListConfiguredTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members::ListMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members::ListMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_members::ListMembersError> for Error {
    fn from(err: crate::operation::list_members::ListMembersError) -> Self {
        match err {
            crate::operation::list_members::ListMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_members::ListMembersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_members::ListMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_members::ListMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_members::ListMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_members::ListMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memberships::ListMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memberships::ListMembershipsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_memberships::ListMembershipsError> for Error {
    fn from(err: crate::operation::list_memberships::ListMembershipsError) -> Self {
        match err {
            crate::operation::list_memberships::ListMembershipsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_memberships::ListMembershipsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_memberships::ListMembershipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_memberships::ListMembershipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_memberships::ListMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_protected_queries::ListProtectedQueriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_protected_queries::ListProtectedQueriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_protected_queries::ListProtectedQueriesError> for Error {
    fn from(err: crate::operation::list_protected_queries::ListProtectedQueriesError) -> Self {
        match err {
            crate::operation::list_protected_queries::ListProtectedQueriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_protected_queries::ListProtectedQueriesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_protected_queries::ListProtectedQueriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_protected_queries::ListProtectedQueriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_protected_queries::ListProtectedQueriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_protected_queries::ListProtectedQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schemas::ListSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schemas::ListSchemasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_schemas::ListSchemasError> for Error {
    fn from(err: crate::operation::list_schemas::ListSchemasError) -> Self {
        match err {
            crate::operation::list_schemas::ListSchemasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_schemas::ListSchemasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_schemas::ListSchemasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_schemas::ListSchemasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_schemas::ListSchemasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_schemas::ListSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_protected_query::StartProtectedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_protected_query::StartProtectedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_protected_query::StartProtectedQueryError> for Error {
    fn from(err: crate::operation::start_protected_query::StartProtectedQueryError) -> Self {
        match err {
            crate::operation::start_protected_query::StartProtectedQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_protected_query::StartProtectedQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_protected_query::StartProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_protected_query::StartProtectedQueryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_protected_query::StartProtectedQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_protected_query::StartProtectedQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_protected_query::StartProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_analysis_template::UpdateAnalysisTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_analysis_template::UpdateAnalysisTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_analysis_template::UpdateAnalysisTemplateError> for Error {
    fn from(err: crate::operation::update_analysis_template::UpdateAnalysisTemplateError) -> Self {
        match err {
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_analysis_template::UpdateAnalysisTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_collaboration::UpdateCollaborationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_collaboration::UpdateCollaborationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_collaboration::UpdateCollaborationError> for Error {
    fn from(err: crate::operation::update_collaboration::UpdateCollaborationError) -> Self {
        match err {
            crate::operation::update_collaboration::UpdateCollaborationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_collaboration::UpdateCollaborationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_collaboration::UpdateCollaborationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_collaboration::UpdateCollaborationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_collaboration::UpdateCollaborationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_configured_table::UpdateConfiguredTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_configured_table::UpdateConfiguredTableError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_configured_table::UpdateConfiguredTableError> for Error {
    fn from(err: crate::operation::update_configured_table::UpdateConfiguredTableError) -> Self {
        match err {
            crate::operation::update_configured_table::UpdateConfiguredTableError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_configured_table::UpdateConfiguredTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_configured_table::UpdateConfiguredTableError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_configured_table::UpdateConfiguredTableError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_configured_table::UpdateConfiguredTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_configured_table::UpdateConfiguredTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_configured_table::UpdateConfiguredTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError> for Error {
    fn from(err: crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError) -> Self {
        match err {
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_configured_table_analysis_rule::UpdateConfiguredTableAnalysisRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError> for Error {
    fn from(err: crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError) -> Self {
        match err {
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_configured_table_association::UpdateConfiguredTableAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_membership::UpdateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_membership::UpdateMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_membership::UpdateMembershipError> for Error {
    fn from(err: crate::operation::update_membership::UpdateMembershipError) -> Self {
        match err {
            crate::operation::update_membership::UpdateMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_membership::UpdateMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_membership::UpdateMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_membership::UpdateMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_membership::UpdateMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_membership::UpdateMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_membership::UpdateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_protected_query::UpdateProtectedQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_protected_query::UpdateProtectedQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_protected_query::UpdateProtectedQueryError> for Error {
    fn from(err: crate::operation::update_protected_query::UpdateProtectedQueryError) -> Self {
        match err {
            crate::operation::update_protected_query::UpdateProtectedQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_protected_query::UpdateProtectedQueryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_protected_query::UpdateProtectedQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_protected_query::UpdateProtectedQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_protected_query::UpdateProtectedQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_protected_query::UpdateProtectedQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_protected_query::UpdateProtectedQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
