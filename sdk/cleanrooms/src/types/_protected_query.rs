// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for an AWS Clean Rooms protected query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProtectedQuery {
    /// <p>The identifier for a protected query instance.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The identifier for the membership.</p>
    #[doc(hidden)]
    pub membership_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the membership.</p>
    #[doc(hidden)]
    pub membership_arn: std::option::Option<std::string::String>,
    /// <p>The time at which the protected query was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The protected query SQL parameters.</p>
    #[doc(hidden)]
    pub sql_parameters: std::option::Option<crate::types::ProtectedQuerySqlParameters>,
    /// <p>The status of the query.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ProtectedQueryStatus>,
    /// <p>Contains any details needed to write the query results.</p>
    #[doc(hidden)]
    pub result_configuration: std::option::Option<crate::types::ProtectedQueryResultConfiguration>,
    /// <p>Statistics about protected query execution.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::types::ProtectedQueryStatistics>,
    /// <p>The result of the protected query.</p>
    #[doc(hidden)]
    pub result: std::option::Option<crate::types::ProtectedQueryResult>,
    /// <p>An error thrown by the protected query.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::ProtectedQueryError>,
}
impl ProtectedQuery {
    /// <p>The identifier for a protected query instance.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier for the membership.</p>
    pub fn membership_id(&self) -> std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The ARN of the membership.</p>
    pub fn membership_arn(&self) -> std::option::Option<&str> {
        self.membership_arn.as_deref()
    }
    /// <p>The time at which the protected query was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn sql_parameters(
        &self,
    ) -> std::option::Option<&crate::types::ProtectedQuerySqlParameters> {
        self.sql_parameters.as_ref()
    }
    /// <p>The status of the query.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ProtectedQueryStatus> {
        self.status.as_ref()
    }
    /// <p>Contains any details needed to write the query results.</p>
    pub fn result_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ProtectedQueryResultConfiguration> {
        self.result_configuration.as_ref()
    }
    /// <p>Statistics about protected query execution.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::types::ProtectedQueryStatistics> {
        self.statistics.as_ref()
    }
    /// <p>The result of the protected query.</p>
    pub fn result(&self) -> std::option::Option<&crate::types::ProtectedQueryResult> {
        self.result.as_ref()
    }
    /// <p>An error thrown by the protected query.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::ProtectedQueryError> {
        self.error.as_ref()
    }
}
impl std::fmt::Debug for ProtectedQuery {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProtectedQuery");
        formatter.field("id", &self.id);
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_arn", &self.membership_arn);
        formatter.field("create_time", &self.create_time);
        formatter.field("sql_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("result_configuration", &self.result_configuration);
        formatter.field("statistics", &self.statistics);
        formatter.field("result", &self.result);
        formatter.field("error", &self.error);
        formatter.finish()
    }
}
impl ProtectedQuery {
    /// Creates a new builder-style object to manufacture [`ProtectedQuery`](crate::types::ProtectedQuery).
    pub fn builder() -> crate::types::builders::ProtectedQueryBuilder {
        crate::types::builders::ProtectedQueryBuilder::default()
    }
}

/// A builder for [`ProtectedQuery`](crate::types::ProtectedQuery).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ProtectedQueryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) membership_id: std::option::Option<std::string::String>,
    pub(crate) membership_arn: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) sql_parameters: std::option::Option<crate::types::ProtectedQuerySqlParameters>,
    pub(crate) status: std::option::Option<crate::types::ProtectedQueryStatus>,
    pub(crate) result_configuration:
        std::option::Option<crate::types::ProtectedQueryResultConfiguration>,
    pub(crate) statistics: std::option::Option<crate::types::ProtectedQueryStatistics>,
    pub(crate) result: std::option::Option<crate::types::ProtectedQueryResult>,
    pub(crate) error: std::option::Option<crate::types::ProtectedQueryError>,
}
impl ProtectedQueryBuilder {
    /// <p>The identifier for a protected query instance.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier for a protected query instance.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the membership.</p>
    pub fn membership_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_id = Some(input.into());
        self
    }
    /// <p>The identifier for the membership.</p>
    pub fn set_membership_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The ARN of the membership.</p>
    pub fn membership_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the membership.</p>
    pub fn set_membership_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The time at which the protected query was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time at which the protected query was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn sql_parameters(mut self, input: crate::types::ProtectedQuerySqlParameters) -> Self {
        self.sql_parameters = Some(input);
        self
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn set_sql_parameters(
        mut self,
        input: std::option::Option<crate::types::ProtectedQuerySqlParameters>,
    ) -> Self {
        self.sql_parameters = input;
        self
    }
    /// <p>The status of the query.</p>
    pub fn status(mut self, input: crate::types::ProtectedQueryStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the query.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Contains any details needed to write the query results.</p>
    pub fn result_configuration(
        mut self,
        input: crate::types::ProtectedQueryResultConfiguration,
    ) -> Self {
        self.result_configuration = Some(input);
        self
    }
    /// <p>Contains any details needed to write the query results.</p>
    pub fn set_result_configuration(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryResultConfiguration>,
    ) -> Self {
        self.result_configuration = input;
        self
    }
    /// <p>Statistics about protected query execution.</p>
    pub fn statistics(mut self, input: crate::types::ProtectedQueryStatistics) -> Self {
        self.statistics = Some(input);
        self
    }
    /// <p>Statistics about protected query execution.</p>
    pub fn set_statistics(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryStatistics>,
    ) -> Self {
        self.statistics = input;
        self
    }
    /// <p>The result of the protected query.</p>
    pub fn result(mut self, input: crate::types::ProtectedQueryResult) -> Self {
        self.result = Some(input);
        self
    }
    /// <p>The result of the protected query.</p>
    pub fn set_result(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryResult>,
    ) -> Self {
        self.result = input;
        self
    }
    /// <p>An error thrown by the protected query.</p>
    pub fn error(mut self, input: crate::types::ProtectedQueryError) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>An error thrown by the protected query.</p>
    pub fn set_error(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryError>,
    ) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`ProtectedQuery`](crate::types::ProtectedQuery).
    pub fn build(self) -> crate::types::ProtectedQuery {
        crate::types::ProtectedQuery {
            id: self.id,
            membership_id: self.membership_id,
            membership_arn: self.membership_arn,
            create_time: self.create_time,
            sql_parameters: self.sql_parameters,
            status: self.status,
            result_configuration: self.result_configuration,
            statistics: self.statistics,
            result: self.result,
            error: self.error,
        }
    }
}
impl std::fmt::Debug for ProtectedQueryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProtectedQueryBuilder");
        formatter.field("id", &self.id);
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_arn", &self.membership_arn);
        formatter.field("create_time", &self.create_time);
        formatter.field("sql_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("result_configuration", &self.result_configuration);
        formatter.field("statistics", &self.statistics);
        formatter.field("result", &self.result);
        formatter.field("error", &self.error);
        formatter.finish()
    }
}
