// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An analysis rule for a configured table association. This analysis rule specifies how data from the table can be used within its associated collaboration. In the console, the <code>ConfiguredTableAssociationAnalysisRule</code> is referred to as the <i>collaboration analysis rule</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfiguredTableAssociationAnalysisRule {
    /// <p>The membership identifier for the configured table association analysis rule.</p>
    pub membership_identifier: ::std::string::String,
    /// <p>The unique identifier for the configured table association.</p>
    pub configured_table_association_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the configured table association.</p>
    pub configured_table_association_arn: ::std::string::String,
    /// <p>The policy of the configured table association analysis rule.</p>
    pub policy: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>,
    /// <p>The type of the configured table association analysis rule.</p>
    pub r#type: crate::types::ConfiguredTableAssociationAnalysisRuleType,
    /// <p>The creation time of the configured table association analysis rule.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The update time of the configured table association analysis rule.</p>
    pub update_time: ::aws_smithy_types::DateTime,
}
impl ConfiguredTableAssociationAnalysisRule {
    /// <p>The membership identifier for the configured table association analysis rule.</p>
    pub fn membership_identifier(&self) -> &str {
        use std::ops::Deref;
        self.membership_identifier.deref()
    }
    /// <p>The unique identifier for the configured table association.</p>
    pub fn configured_table_association_id(&self) -> &str {
        use std::ops::Deref;
        self.configured_table_association_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the configured table association.</p>
    pub fn configured_table_association_arn(&self) -> &str {
        use std::ops::Deref;
        self.configured_table_association_arn.deref()
    }
    /// <p>The policy of the configured table association analysis rule.</p>
    pub fn policy(&self) -> ::std::option::Option<&crate::types::ConfiguredTableAssociationAnalysisRulePolicy> {
        self.policy.as_ref()
    }
    /// <p>The type of the configured table association analysis rule.</p>
    pub fn r#type(&self) -> &crate::types::ConfiguredTableAssociationAnalysisRuleType {
        &self.r#type
    }
    /// <p>The creation time of the configured table association analysis rule.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The update time of the configured table association analysis rule.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
}
impl ConfiguredTableAssociationAnalysisRule {
    /// Creates a new builder-style object to manufacture [`ConfiguredTableAssociationAnalysisRule`](crate::types::ConfiguredTableAssociationAnalysisRule).
    pub fn builder() -> crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder {
        crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::default()
    }
}

/// A builder for [`ConfiguredTableAssociationAnalysisRule`](crate::types::ConfiguredTableAssociationAnalysisRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfiguredTableAssociationAnalysisRuleBuilder {
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) configured_table_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) configured_table_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) policy: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>,
    pub(crate) r#type: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConfiguredTableAssociationAnalysisRuleBuilder {
    /// <p>The membership identifier for the configured table association analysis rule.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership identifier for the configured table association analysis rule.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership identifier for the configured table association analysis rule.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The unique identifier for the configured table association.</p>
    /// This field is required.
    pub fn configured_table_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_table_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the configured table association.</p>
    pub fn set_configured_table_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_table_association_id = input;
        self
    }
    /// <p>The unique identifier for the configured table association.</p>
    pub fn get_configured_table_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_table_association_id
    }
    /// <p>The Amazon Resource Name (ARN) of the configured table association.</p>
    /// This field is required.
    pub fn configured_table_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_table_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured table association.</p>
    pub fn set_configured_table_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_table_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured table association.</p>
    pub fn get_configured_table_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_table_association_arn
    }
    /// <p>The policy of the configured table association analysis rule.</p>
    /// This field is required.
    pub fn policy(mut self, input: crate::types::ConfiguredTableAssociationAnalysisRulePolicy) -> Self {
        self.policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy of the configured table association analysis rule.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy>) -> Self {
        self.policy = input;
        self
    }
    /// <p>The policy of the configured table association analysis rule.</p>
    pub fn get_policy(&self) -> &::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRulePolicy> {
        &self.policy
    }
    /// <p>The type of the configured table association analysis rule.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ConfiguredTableAssociationAnalysisRuleType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the configured table association analysis rule.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the configured table association analysis rule.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ConfiguredTableAssociationAnalysisRuleType> {
        &self.r#type
    }
    /// <p>The creation time of the configured table association analysis rule.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the configured table association analysis rule.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The creation time of the configured table association analysis rule.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The update time of the configured table association analysis rule.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The update time of the configured table association analysis rule.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The update time of the configured table association analysis rule.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Consumes the builder and constructs a [`ConfiguredTableAssociationAnalysisRule`](crate::types::ConfiguredTableAssociationAnalysisRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`membership_identifier`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::membership_identifier)
    /// - [`configured_table_association_id`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::configured_table_association_id)
    /// - [`configured_table_association_arn`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::configured_table_association_arn)
    /// - [`r#type`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::type)
    /// - [`create_time`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::create_time)
    /// - [`update_time`](crate::types::builders::ConfiguredTableAssociationAnalysisRuleBuilder::update_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ConfiguredTableAssociationAnalysisRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfiguredTableAssociationAnalysisRule {
            membership_identifier: self.membership_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_identifier",
                    "membership_identifier was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
            configured_table_association_id: self.configured_table_association_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configured_table_association_id",
                    "configured_table_association_id was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
            configured_table_association_arn: self.configured_table_association_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configured_table_association_arn",
                    "configured_table_association_arn was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
            policy: self.policy,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building ConfiguredTableAssociationAnalysisRule",
                )
            })?,
        })
    }
}
