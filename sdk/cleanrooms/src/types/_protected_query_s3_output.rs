// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains output information for protected queries with an S3 output type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectedQueryS3Output {
    /// <p>The S3 location of the result.</p>
    pub location: ::std::string::String,
}
impl ProtectedQueryS3Output {
    /// <p>The S3 location of the result.</p>
    pub fn location(&self) -> &str {
        use std::ops::Deref;
        self.location.deref()
    }
}
impl ProtectedQueryS3Output {
    /// Creates a new builder-style object to manufacture [`ProtectedQueryS3Output`](crate::types::ProtectedQueryS3Output).
    pub fn builder() -> crate::types::builders::ProtectedQueryS3OutputBuilder {
        crate::types::builders::ProtectedQueryS3OutputBuilder::default()
    }
}

/// A builder for [`ProtectedQueryS3Output`](crate::types::ProtectedQueryS3Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtectedQueryS3OutputBuilder {
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl ProtectedQueryS3OutputBuilder {
    /// <p>The S3 location of the result.</p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 location of the result.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The S3 location of the result.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`ProtectedQueryS3Output`](crate::types::ProtectedQueryS3Output).
    /// This method will fail if any of the following fields are not set:
    /// - [`location`](crate::types::builders::ProtectedQueryS3OutputBuilder::location)
    pub fn build(self) -> ::std::result::Result<crate::types::ProtectedQueryS3Output, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtectedQueryS3Output {
            location: self.location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location",
                    "location was not specified but it is required when building ProtectedQueryS3Output",
                )
            })?,
        })
    }
}
