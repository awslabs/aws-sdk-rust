// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Column in configured table that can be used in aggregate function in query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AggregateColumn {
    /// <p>Column names in configured table of aggregate columns.</p>
    #[doc(hidden)]
    pub column_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Aggregation function that can be applied to aggregate column in query.</p>
    #[doc(hidden)]
    pub function: std::option::Option<crate::types::AggregateFunctionName>,
}
impl AggregateColumn {
    /// <p>Column names in configured table of aggregate columns.</p>
    pub fn column_names(&self) -> std::option::Option<&[std::string::String]> {
        self.column_names.as_deref()
    }
    /// <p>Aggregation function that can be applied to aggregate column in query.</p>
    pub fn function(&self) -> std::option::Option<&crate::types::AggregateFunctionName> {
        self.function.as_ref()
    }
}
impl AggregateColumn {
    /// Creates a new builder-style object to manufacture [`AggregateColumn`](crate::types::AggregateColumn).
    pub fn builder() -> crate::types::builders::AggregateColumnBuilder {
        crate::types::builders::AggregateColumnBuilder::default()
    }
}

/// A builder for [`AggregateColumn`](crate::types::AggregateColumn).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregateColumnBuilder {
    pub(crate) column_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) function: std::option::Option<crate::types::AggregateFunctionName>,
}
impl AggregateColumnBuilder {
    /// Appends an item to `column_names`.
    ///
    /// To override the contents of this collection use [`set_column_names`](Self::set_column_names).
    ///
    /// <p>Column names in configured table of aggregate columns.</p>
    pub fn column_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.column_names.unwrap_or_default();
        v.push(input.into());
        self.column_names = Some(v);
        self
    }
    /// <p>Column names in configured table of aggregate columns.</p>
    pub fn set_column_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.column_names = input;
        self
    }
    /// <p>Aggregation function that can be applied to aggregate column in query.</p>
    pub fn function(mut self, input: crate::types::AggregateFunctionName) -> Self {
        self.function = Some(input);
        self
    }
    /// <p>Aggregation function that can be applied to aggregate column in query.</p>
    pub fn set_function(
        mut self,
        input: std::option::Option<crate::types::AggregateFunctionName>,
    ) -> Self {
        self.function = input;
        self
    }
    /// Consumes the builder and constructs a [`AggregateColumn`](crate::types::AggregateColumn).
    pub fn build(self) -> crate::types::AggregateColumn {
        crate::types::AggregateColumn {
            column_names: self.column_names,
            function: self.function,
        }
    }
}
