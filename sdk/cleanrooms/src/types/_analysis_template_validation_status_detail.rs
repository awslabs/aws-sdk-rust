// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status details of the analysis template validation. Clean Rooms Differential Privacy uses a general-purpose query structure to support complex SQL queries and validates whether an analysis template fits that general-purpose query structure. Validation is performed when analysis templates are created and fetched. Because analysis templates are immutable by design, we recommend that you create analysis templates after you associate the configured tables with their analysis rule to your collaboration.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/clean-rooms/latest/userguide/analysis-rules-custom.html#custom-diff-privacy">https://docs.aws.amazon.com/clean-rooms/latest/userguide/analysis-rules-custom.html#custom-diff-privacy</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisTemplateValidationStatusDetail {
    /// <p>The type of validation that was performed.</p>
    pub r#type: crate::types::AnalysisTemplateValidationType,
    /// <p>The status of the validation.</p>
    pub status: crate::types::AnalysisTemplateValidationStatus,
    /// <p>The reasons for the validation results.</p>
    pub reasons: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateValidationStatusReason>>,
}
impl AnalysisTemplateValidationStatusDetail {
    /// <p>The type of validation that was performed.</p>
    pub fn r#type(&self) -> &crate::types::AnalysisTemplateValidationType {
        &self.r#type
    }
    /// <p>The status of the validation.</p>
    pub fn status(&self) -> &crate::types::AnalysisTemplateValidationStatus {
        &self.status
    }
    /// <p>The reasons for the validation results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reasons.is_none()`.
    pub fn reasons(&self) -> &[crate::types::AnalysisTemplateValidationStatusReason] {
        self.reasons.as_deref().unwrap_or_default()
    }
}
impl AnalysisTemplateValidationStatusDetail {
    /// Creates a new builder-style object to manufacture [`AnalysisTemplateValidationStatusDetail`](crate::types::AnalysisTemplateValidationStatusDetail).
    pub fn builder() -> crate::types::builders::AnalysisTemplateValidationStatusDetailBuilder {
        crate::types::builders::AnalysisTemplateValidationStatusDetailBuilder::default()
    }
}

/// A builder for [`AnalysisTemplateValidationStatusDetail`](crate::types::AnalysisTemplateValidationStatusDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisTemplateValidationStatusDetailBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AnalysisTemplateValidationType>,
    pub(crate) status: ::std::option::Option<crate::types::AnalysisTemplateValidationStatus>,
    pub(crate) reasons: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateValidationStatusReason>>,
}
impl AnalysisTemplateValidationStatusDetailBuilder {
    /// <p>The type of validation that was performed.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AnalysisTemplateValidationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of validation that was performed.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AnalysisTemplateValidationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of validation that was performed.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AnalysisTemplateValidationType> {
        &self.r#type
    }
    /// <p>The status of the validation.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AnalysisTemplateValidationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the validation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AnalysisTemplateValidationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the validation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AnalysisTemplateValidationStatus> {
        &self.status
    }
    /// Appends an item to `reasons`.
    ///
    /// To override the contents of this collection use [`set_reasons`](Self::set_reasons).
    ///
    /// <p>The reasons for the validation results.</p>
    pub fn reasons(mut self, input: crate::types::AnalysisTemplateValidationStatusReason) -> Self {
        let mut v = self.reasons.unwrap_or_default();
        v.push(input);
        self.reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reasons for the validation results.</p>
    pub fn set_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateValidationStatusReason>>) -> Self {
        self.reasons = input;
        self
    }
    /// <p>The reasons for the validation results.</p>
    pub fn get_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisTemplateValidationStatusReason>> {
        &self.reasons
    }
    /// Consumes the builder and constructs a [`AnalysisTemplateValidationStatusDetail`](crate::types::AnalysisTemplateValidationStatusDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::AnalysisTemplateValidationStatusDetailBuilder::type)
    /// - [`status`](crate::types::builders::AnalysisTemplateValidationStatusDetailBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AnalysisTemplateValidationStatusDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalysisTemplateValidationStatusDetail {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AnalysisTemplateValidationStatusDetail",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AnalysisTemplateValidationStatusDetail",
                )
            })?,
            reasons: self.reasons,
        })
    }
}
