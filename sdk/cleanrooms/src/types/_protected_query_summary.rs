// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The protected query summary for the objects listed by the request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectedQuerySummary {
    /// <p>The unique ID of the protected query.</p>
    pub id: ::std::string::String,
    /// <p>The unique ID for the membership that initiated the protected query.</p>
    pub membership_id: ::std::string::String,
    /// <p>The unique ARN for the membership that initiated the protected query.</p>
    pub membership_arn: ::std::string::String,
    /// <p>The time the protected query was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.</p>
    pub status: crate::types::ProtectedQueryStatus,
}
impl ProtectedQuerySummary {
    /// <p>The unique ID of the protected query.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The unique ID for the membership that initiated the protected query.</p>
    pub fn membership_id(&self) -> &str {
        use std::ops::Deref;
        self.membership_id.deref()
    }
    /// <p>The unique ARN for the membership that initiated the protected query.</p>
    pub fn membership_arn(&self) -> &str {
        use std::ops::Deref;
        self.membership_arn.deref()
    }
    /// <p>The time the protected query was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.</p>
    pub fn status(&self) -> &crate::types::ProtectedQueryStatus {
        &self.status
    }
}
impl ProtectedQuerySummary {
    /// Creates a new builder-style object to manufacture [`ProtectedQuerySummary`](crate::types::ProtectedQuerySummary).
    pub fn builder() -> crate::types::builders::ProtectedQuerySummaryBuilder {
        crate::types::builders::ProtectedQuerySummaryBuilder::default()
    }
}

/// A builder for [`ProtectedQuerySummary`](crate::types::ProtectedQuerySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtectedQuerySummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_arn: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ProtectedQueryStatus>,
}
impl ProtectedQuerySummaryBuilder {
    /// <p>The unique ID of the protected query.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the protected query.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the protected query.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique ID for the membership that initiated the protected query.</p>
    /// This field is required.
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the membership that initiated the protected query.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The unique ID for the membership that initiated the protected query.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>The unique ARN for the membership that initiated the protected query.</p>
    /// This field is required.
    pub fn membership_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership that initiated the protected query.</p>
    pub fn set_membership_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The unique ARN for the membership that initiated the protected query.</p>
    pub fn get_membership_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_arn
    }
    /// <p>The time the protected query was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the protected query was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the protected query was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ProtectedQueryStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProtectedQueryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the protected query. Value values are `SUBMITTED`, `STARTED`, `CANCELLED`, `CANCELLING`, `FAILED`, `SUCCESS`, `TIMED_OUT`.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProtectedQueryStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ProtectedQuerySummary`](crate::types::ProtectedQuerySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ProtectedQuerySummaryBuilder::id)
    /// - [`membership_id`](crate::types::builders::ProtectedQuerySummaryBuilder::membership_id)
    /// - [`membership_arn`](crate::types::builders::ProtectedQuerySummaryBuilder::membership_arn)
    /// - [`create_time`](crate::types::builders::ProtectedQuerySummaryBuilder::create_time)
    /// - [`status`](crate::types::builders::ProtectedQuerySummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ProtectedQuerySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtectedQuerySummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ProtectedQuerySummary",
                )
            })?,
            membership_id: self.membership_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_id",
                    "membership_id was not specified but it is required when building ProtectedQuerySummary",
                )
            })?,
            membership_arn: self.membership_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_arn",
                    "membership_arn was not specified but it is required when building ProtectedQuerySummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building ProtectedQuerySummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ProtectedQuerySummary",
                )
            })?,
        })
    }
}
