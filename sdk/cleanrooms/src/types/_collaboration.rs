// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The multi-party data share environment. The collaboration contains metadata about its purpose and participants.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Collaboration {
    /// <p>The unique ID for the collaboration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the collaboration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    #[doc(hidden)]
    pub creator_account_id: std::option::Option<std::string::String>,
    /// <p>A display name of the collaboration creator.</p>
    #[doc(hidden)]
    pub creator_display_name: std::option::Option<std::string::String>,
    /// <p>The time when the collaboration was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the collaboration metadata was last updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of a member in a collaboration.</p>
    #[doc(hidden)]
    pub member_status: std::option::Option<crate::types::MemberStatus>,
    /// <p>The unique ID for your membership within the collaboration.</p>
    #[doc(hidden)]
    pub membership_id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for your membership within the collaboration.</p>
    #[doc(hidden)]
    pub membership_arn: std::option::Option<std::string::String>,
    /// <p>The settings for client-side encryption for cryptographic computing.</p>
    #[doc(hidden)]
    pub data_encryption_metadata: std::option::Option<crate::types::DataEncryptionMetadata>,
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    #[doc(hidden)]
    pub query_log_status: std::option::Option<crate::types::CollaborationQueryLogStatus>,
}
impl Collaboration {
    /// <p>The unique ID for the collaboration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The unique ARN for the collaboration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn creator_account_id(&self) -> std::option::Option<&str> {
        self.creator_account_id.as_deref()
    }
    /// <p>A display name of the collaboration creator.</p>
    pub fn creator_display_name(&self) -> std::option::Option<&str> {
        self.creator_display_name.as_deref()
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn member_status(&self) -> std::option::Option<&crate::types::MemberStatus> {
        self.member_status.as_ref()
    }
    /// <p>The unique ID for your membership within the collaboration.</p>
    pub fn membership_id(&self) -> std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The unique ARN for your membership within the collaboration.</p>
    pub fn membership_arn(&self) -> std::option::Option<&str> {
        self.membership_arn.as_deref()
    }
    /// <p>The settings for client-side encryption for cryptographic computing.</p>
    pub fn data_encryption_metadata(
        &self,
    ) -> std::option::Option<&crate::types::DataEncryptionMetadata> {
        self.data_encryption_metadata.as_ref()
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(
        &self,
    ) -> std::option::Option<&crate::types::CollaborationQueryLogStatus> {
        self.query_log_status.as_ref()
    }
}
impl Collaboration {
    /// Creates a new builder-style object to manufacture [`Collaboration`](crate::types::Collaboration).
    pub fn builder() -> crate::types::builders::CollaborationBuilder {
        crate::types::builders::CollaborationBuilder::default()
    }
}

/// A builder for [`Collaboration`](crate::types::Collaboration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CollaborationBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) creator_account_id: std::option::Option<std::string::String>,
    pub(crate) creator_display_name: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) member_status: std::option::Option<crate::types::MemberStatus>,
    pub(crate) membership_id: std::option::Option<std::string::String>,
    pub(crate) membership_arn: std::option::Option<std::string::String>,
    pub(crate) data_encryption_metadata: std::option::Option<crate::types::DataEncryptionMetadata>,
    pub(crate) query_log_status: std::option::Option<crate::types::CollaborationQueryLogStatus>,
}
impl CollaborationBuilder {
    /// <p>The unique ID for the collaboration.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID for the collaboration.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ARN for the collaboration.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the collaboration.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn creator_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_account_id = Some(input.into());
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn set_creator_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creator_account_id = input;
        self
    }
    /// <p>A display name of the collaboration creator.</p>
    pub fn creator_display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_display_name = Some(input.into());
        self
    }
    /// <p>A display name of the collaboration creator.</p>
    pub fn set_creator_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creator_display_name = input;
        self
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn member_status(mut self, input: crate::types::MemberStatus) -> Self {
        self.member_status = Some(input);
        self
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn set_member_status(
        mut self,
        input: std::option::Option<crate::types::MemberStatus>,
    ) -> Self {
        self.member_status = input;
        self
    }
    /// <p>The unique ID for your membership within the collaboration.</p>
    pub fn membership_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_id = Some(input.into());
        self
    }
    /// <p>The unique ID for your membership within the collaboration.</p>
    pub fn set_membership_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The unique ARN for your membership within the collaboration.</p>
    pub fn membership_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for your membership within the collaboration.</p>
    pub fn set_membership_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The settings for client-side encryption for cryptographic computing.</p>
    pub fn data_encryption_metadata(mut self, input: crate::types::DataEncryptionMetadata) -> Self {
        self.data_encryption_metadata = Some(input);
        self
    }
    /// <p>The settings for client-side encryption for cryptographic computing.</p>
    pub fn set_data_encryption_metadata(
        mut self,
        input: std::option::Option<crate::types::DataEncryptionMetadata>,
    ) -> Self {
        self.data_encryption_metadata = input;
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::types::CollaborationQueryLogStatus) -> Self {
        self.query_log_status = Some(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(
        mut self,
        input: std::option::Option<crate::types::CollaborationQueryLogStatus>,
    ) -> Self {
        self.query_log_status = input;
        self
    }
    /// Consumes the builder and constructs a [`Collaboration`](crate::types::Collaboration).
    pub fn build(self) -> crate::types::Collaboration {
        crate::types::Collaboration {
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            creator_account_id: self.creator_account_id,
            creator_display_name: self.creator_display_name,
            create_time: self.create_time,
            update_time: self.update_time,
            member_status: self.member_status,
            membership_id: self.membership_id,
            membership_arn: self.membership_arn,
            data_encryption_metadata: self.data_encryption_metadata,
            query_log_status: self.query_log_status,
        }
    }
}
