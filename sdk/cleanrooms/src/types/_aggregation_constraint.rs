// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Constraint on query output removing output rows that do not meet a minimum number of distinct values of a specified column.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AggregationConstraint {
    /// <p>Column in aggregation constraint for which there must be a minimum number of distinct values in an output row for it to be in the query output.</p>
    #[doc(hidden)]
    pub column_name: std::option::Option<std::string::String>,
    /// <p>The minimum number of distinct values that an output row must be an aggregation of. Minimum threshold of distinct values for a specified column that must exist in an output row for it to be in the query output.</p>
    #[doc(hidden)]
    pub minimum: std::option::Option<i32>,
    /// <p>The type of aggregation the constraint allows. The only valid value is currently `COUNT_DISTINCT`.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::AggregationType>,
}
impl AggregationConstraint {
    /// <p>Column in aggregation constraint for which there must be a minimum number of distinct values in an output row for it to be in the query output.</p>
    pub fn column_name(&self) -> std::option::Option<&str> {
        self.column_name.as_deref()
    }
    /// <p>The minimum number of distinct values that an output row must be an aggregation of. Minimum threshold of distinct values for a specified column that must exist in an output row for it to be in the query output.</p>
    pub fn minimum(&self) -> std::option::Option<i32> {
        self.minimum
    }
    /// <p>The type of aggregation the constraint allows. The only valid value is currently `COUNT_DISTINCT`.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::AggregationType> {
        self.r#type.as_ref()
    }
}
impl AggregationConstraint {
    /// Creates a new builder-style object to manufacture [`AggregationConstraint`](crate::types::AggregationConstraint).
    pub fn builder() -> crate::types::builders::AggregationConstraintBuilder {
        crate::types::builders::AggregationConstraintBuilder::default()
    }
}

/// A builder for [`AggregationConstraint`](crate::types::AggregationConstraint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregationConstraintBuilder {
    pub(crate) column_name: std::option::Option<std::string::String>,
    pub(crate) minimum: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<crate::types::AggregationType>,
}
impl AggregationConstraintBuilder {
    /// <p>Column in aggregation constraint for which there must be a minimum number of distinct values in an output row for it to be in the query output.</p>
    pub fn column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.column_name = Some(input.into());
        self
    }
    /// <p>Column in aggregation constraint for which there must be a minimum number of distinct values in an output row for it to be in the query output.</p>
    pub fn set_column_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The minimum number of distinct values that an output row must be an aggregation of. Minimum threshold of distinct values for a specified column that must exist in an output row for it to be in the query output.</p>
    pub fn minimum(mut self, input: i32) -> Self {
        self.minimum = Some(input);
        self
    }
    /// <p>The minimum number of distinct values that an output row must be an aggregation of. Minimum threshold of distinct values for a specified column that must exist in an output row for it to be in the query output.</p>
    pub fn set_minimum(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>The type of aggregation the constraint allows. The only valid value is currently `COUNT_DISTINCT`.</p>
    pub fn r#type(mut self, input: crate::types::AggregationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of aggregation the constraint allows. The only valid value is currently `COUNT_DISTINCT`.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::AggregationType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`AggregationConstraint`](crate::types::AggregationConstraint).
    pub fn build(self) -> crate::types::AggregationConstraint {
        crate::types::AggregationConstraint {
            column_name: self.column_name,
            minimum: self.minimum,
            r#type: self.r#type,
        }
    }
}
