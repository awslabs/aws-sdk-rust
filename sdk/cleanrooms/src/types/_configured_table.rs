// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A table that has been configured for use in a collaboration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfiguredTable {
    /// <p>The unique ID for the configured table.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the configured table.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>A name for the configured table.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for the configured table.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The AWS Glue table that this configured table represents.</p>
    #[doc(hidden)]
    pub table_reference: std::option::Option<crate::types::TableReference>,
    /// <p>The time the configured table was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the configured table was last updated</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The types of analysis rules associated with this configured table. Valid values are `AGGREGATION` and `LIST`. Currently, only one analysis rule may be associated with a configured table.</p>
    #[doc(hidden)]
    pub analysis_rule_types:
        std::option::Option<std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>>,
    /// <p>The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.</p>
    #[doc(hidden)]
    pub analysis_method: std::option::Option<crate::types::AnalysisMethod>,
    /// <p>The columns within the underlying AWS Glue table that can be utilized within collaborations.</p>
    #[doc(hidden)]
    pub allowed_columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ConfiguredTable {
    /// <p>The unique ID for the configured table.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The unique ARN for the configured table.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A name for the configured table.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the configured table.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The AWS Glue table that this configured table represents.</p>
    pub fn table_reference(&self) -> std::option::Option<&crate::types::TableReference> {
        self.table_reference.as_ref()
    }
    /// <p>The time the configured table was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time the configured table was last updated</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The types of analysis rules associated with this configured table. Valid values are `AGGREGATION` and `LIST`. Currently, only one analysis rule may be associated with a configured table.</p>
    pub fn analysis_rule_types(
        &self,
    ) -> std::option::Option<&[crate::types::ConfiguredTableAnalysisRuleType]> {
        self.analysis_rule_types.as_deref()
    }
    /// <p>The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn analysis_method(&self) -> std::option::Option<&crate::types::AnalysisMethod> {
        self.analysis_method.as_ref()
    }
    /// <p>The columns within the underlying AWS Glue table that can be utilized within collaborations.</p>
    pub fn allowed_columns(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_columns.as_deref()
    }
}
impl ConfiguredTable {
    /// Creates a new builder-style object to manufacture [`ConfiguredTable`](crate::types::ConfiguredTable).
    pub fn builder() -> crate::types::builders::ConfiguredTableBuilder {
        crate::types::builders::ConfiguredTableBuilder::default()
    }
}

/// A builder for [`ConfiguredTable`](crate::types::ConfiguredTable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfiguredTableBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) table_reference: std::option::Option<crate::types::TableReference>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) analysis_rule_types:
        std::option::Option<std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>>,
    pub(crate) analysis_method: std::option::Option<crate::types::AnalysisMethod>,
    pub(crate) allowed_columns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ConfiguredTableBuilder {
    /// <p>The unique ID for the configured table.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID for the configured table.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ARN for the configured table.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the configured table.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>A name for the configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name for the configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The AWS Glue table that this configured table represents.</p>
    pub fn table_reference(mut self, input: crate::types::TableReference) -> Self {
        self.table_reference = Some(input);
        self
    }
    /// <p>The AWS Glue table that this configured table represents.</p>
    pub fn set_table_reference(
        mut self,
        input: std::option::Option<crate::types::TableReference>,
    ) -> Self {
        self.table_reference = input;
        self
    }
    /// <p>The time the configured table was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time the configured table was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the configured table was last updated</p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The time the configured table was last updated</p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// Appends an item to `analysis_rule_types`.
    ///
    /// To override the contents of this collection use [`set_analysis_rule_types`](Self::set_analysis_rule_types).
    ///
    /// <p>The types of analysis rules associated with this configured table. Valid values are `AGGREGATION` and `LIST`. Currently, only one analysis rule may be associated with a configured table.</p>
    pub fn analysis_rule_types(
        mut self,
        input: crate::types::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        let mut v = self.analysis_rule_types.unwrap_or_default();
        v.push(input);
        self.analysis_rule_types = Some(v);
        self
    }
    /// <p>The types of analysis rules associated with this configured table. Valid values are `AGGREGATION` and `LIST`. Currently, only one analysis rule may be associated with a configured table.</p>
    pub fn set_analysis_rule_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConfiguredTableAnalysisRuleType>>,
    ) -> Self {
        self.analysis_rule_types = input;
        self
    }
    /// <p>The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn analysis_method(mut self, input: crate::types::AnalysisMethod) -> Self {
        self.analysis_method = Some(input);
        self
    }
    /// <p>The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn set_analysis_method(
        mut self,
        input: std::option::Option<crate::types::AnalysisMethod>,
    ) -> Self {
        self.analysis_method = input;
        self
    }
    /// Appends an item to `allowed_columns`.
    ///
    /// To override the contents of this collection use [`set_allowed_columns`](Self::set_allowed_columns).
    ///
    /// <p>The columns within the underlying AWS Glue table that can be utilized within collaborations.</p>
    pub fn allowed_columns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_columns.unwrap_or_default();
        v.push(input.into());
        self.allowed_columns = Some(v);
        self
    }
    /// <p>The columns within the underlying AWS Glue table that can be utilized within collaborations.</p>
    pub fn set_allowed_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_columns = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfiguredTable`](crate::types::ConfiguredTable).
    pub fn build(self) -> crate::types::ConfiguredTable {
        crate::types::ConfiguredTable {
            id: self.id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            table_reference: self.table_reference,
            create_time: self.create_time,
            update_time: self.update_time,
            analysis_rule_types: self.analysis_rule_types,
            analysis_method: self.analysis_method,
            allowed_columns: self.allowed_columns,
        }
    }
}
