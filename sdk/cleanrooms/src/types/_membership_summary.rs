// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The membership object listed by the request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MembershipSummary {
    /// <p>The unique ID for the membership's collaboration.</p>
    pub id: ::std::string::String,
    /// <p>The unique ARN for the membership.</p>
    pub arn: ::std::string::String,
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub collaboration_arn: ::std::string::String,
    /// <p>The unique ID for the membership's collaboration.</p>
    pub collaboration_id: ::std::string::String,
    /// <p>The identifier of the Amazon Web Services principal that created the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub collaboration_creator_account_id: ::std::string::String,
    /// <p>The display name of the collaboration creator.</p>
    pub collaboration_creator_display_name: ::std::string::String,
    /// <p>The name for the membership's collaboration.</p>
    pub collaboration_name: ::std::string::String,
    /// <p>The time when the membership was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The time the membership metadata was last updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub status: crate::types::MembershipStatus,
    /// <p>The abilities granted to the collaboration member.</p>
    pub member_abilities: ::std::vec::Vec<crate::types::MemberAbility>,
}
impl MembershipSummary {
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn collaboration_arn(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_arn.deref()
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn collaboration_id(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_id.deref()
    }
    /// <p>The identifier of the Amazon Web Services principal that created the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn collaboration_creator_account_id(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_creator_account_id.deref()
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn collaboration_creator_display_name(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_creator_display_name.deref()
    }
    /// <p>The name for the membership's collaboration.</p>
    pub fn collaboration_name(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_name.deref()
    }
    /// <p>The time when the membership was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn status(&self) -> &crate::types::MembershipStatus {
        &self.status
    }
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn member_abilities(&self) -> &[crate::types::MemberAbility] {
        use std::ops::Deref;
        self.member_abilities.deref()
    }
}
impl MembershipSummary {
    /// Creates a new builder-style object to manufacture [`MembershipSummary`](crate::types::MembershipSummary).
    pub fn builder() -> crate::types::builders::MembershipSummaryBuilder {
        crate::types::builders::MembershipSummaryBuilder::default()
    }
}

/// A builder for [`MembershipSummary`](crate::types::MembershipSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MembershipSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_creator_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_creator_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_name: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::MembershipStatus>,
    pub(crate) member_abilities: ::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>>,
}
impl MembershipSummaryBuilder {
    /// <p>The unique ID for the membership's collaboration.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique ARN for the membership.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    /// This field is required.
    pub fn collaboration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn set_collaboration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_arn = input;
        self
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn get_collaboration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_arn
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    /// This field is required.
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The identifier of the Amazon Web Services principal that created the collaboration. Currently only supports Amazon Web Services account ID.</p>
    /// This field is required.
    pub fn collaboration_creator_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_creator_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Web Services principal that created the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn set_collaboration_creator_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_creator_account_id = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services principal that created the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn get_collaboration_creator_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_creator_account_id
    }
    /// <p>The display name of the collaboration creator.</p>
    /// This field is required.
    pub fn collaboration_creator_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_creator_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn set_collaboration_creator_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_creator_display_name = input;
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn get_collaboration_creator_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_creator_display_name
    }
    /// <p>The name for the membership's collaboration.</p>
    /// This field is required.
    pub fn collaboration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the membership's collaboration.</p>
    pub fn set_collaboration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_name = input;
        self
    }
    /// <p>The name for the membership's collaboration.</p>
    pub fn get_collaboration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_name
    }
    /// <p>The time when the membership was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the membership was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time when the membership was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time the membership metadata was last updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MembershipStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MembershipStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MembershipStatus> {
        &self.status
    }
    /// Appends an item to `member_abilities`.
    ///
    /// To override the contents of this collection use [`set_member_abilities`](Self::set_member_abilities).
    ///
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn member_abilities(mut self, input: crate::types::MemberAbility) -> Self {
        let mut v = self.member_abilities.unwrap_or_default();
        v.push(input);
        self.member_abilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn set_member_abilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>>) -> Self {
        self.member_abilities = input;
        self
    }
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn get_member_abilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>> {
        &self.member_abilities
    }
    /// Consumes the builder and constructs a [`MembershipSummary`](crate::types::MembershipSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::MembershipSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::MembershipSummaryBuilder::arn)
    /// - [`collaboration_arn`](crate::types::builders::MembershipSummaryBuilder::collaboration_arn)
    /// - [`collaboration_id`](crate::types::builders::MembershipSummaryBuilder::collaboration_id)
    /// - [`collaboration_creator_account_id`](crate::types::builders::MembershipSummaryBuilder::collaboration_creator_account_id)
    /// - [`collaboration_creator_display_name`](crate::types::builders::MembershipSummaryBuilder::collaboration_creator_display_name)
    /// - [`collaboration_name`](crate::types::builders::MembershipSummaryBuilder::collaboration_name)
    /// - [`create_time`](crate::types::builders::MembershipSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::MembershipSummaryBuilder::update_time)
    /// - [`status`](crate::types::builders::MembershipSummaryBuilder::status)
    /// - [`member_abilities`](crate::types::builders::MembershipSummaryBuilder::member_abilities)
    pub fn build(self) -> ::std::result::Result<crate::types::MembershipSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MembershipSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building MembershipSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building MembershipSummary",
                )
            })?,
            collaboration_arn: self.collaboration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_arn",
                    "collaboration_arn was not specified but it is required when building MembershipSummary",
                )
            })?,
            collaboration_id: self.collaboration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_id",
                    "collaboration_id was not specified but it is required when building MembershipSummary",
                )
            })?,
            collaboration_creator_account_id: self.collaboration_creator_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_creator_account_id",
                    "collaboration_creator_account_id was not specified but it is required when building MembershipSummary",
                )
            })?,
            collaboration_creator_display_name: self.collaboration_creator_display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_creator_display_name",
                    "collaboration_creator_display_name was not specified but it is required when building MembershipSummary",
                )
            })?,
            collaboration_name: self.collaboration_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_name",
                    "collaboration_name was not specified but it is required when building MembershipSummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building MembershipSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building MembershipSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building MembershipSummary",
                )
            })?,
            member_abilities: self.member_abilities.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "member_abilities",
                    "member_abilities was not specified but it is required when building MembershipSummary",
                )
            })?,
        })
    }
}
