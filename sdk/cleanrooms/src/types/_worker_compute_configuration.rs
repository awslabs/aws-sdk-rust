// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the compute resources for workers running an analysis with the Clean Rooms SQL analytics engine.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkerComputeConfiguration {
    /// <p>The worker compute configuration type.</p>
    pub r#type: ::std::option::Option<crate::types::WorkerComputeType>,
    /// <p>The number of workers.</p>
    /// <p>SQL queries support a minimum value of 2 and a maximum value of 400.</p>
    /// <p>PySpark jobs support a minimum value of 4 and a maximum value of 128.</p>
    pub number: ::std::option::Option<i32>,
    /// <p>The configuration properties for the worker compute environment. These properties allow you to customize the compute settings for your Clean Rooms workloads.</p>
    pub properties: ::std::option::Option<crate::types::WorkerComputeConfigurationProperties>,
}
impl WorkerComputeConfiguration {
    /// <p>The worker compute configuration type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WorkerComputeType> {
        self.r#type.as_ref()
    }
    /// <p>The number of workers.</p>
    /// <p>SQL queries support a minimum value of 2 and a maximum value of 400.</p>
    /// <p>PySpark jobs support a minimum value of 4 and a maximum value of 128.</p>
    pub fn number(&self) -> ::std::option::Option<i32> {
        self.number
    }
    /// <p>The configuration properties for the worker compute environment. These properties allow you to customize the compute settings for your Clean Rooms workloads.</p>
    pub fn properties(&self) -> ::std::option::Option<&crate::types::WorkerComputeConfigurationProperties> {
        self.properties.as_ref()
    }
}
impl WorkerComputeConfiguration {
    /// Creates a new builder-style object to manufacture [`WorkerComputeConfiguration`](crate::types::WorkerComputeConfiguration).
    pub fn builder() -> crate::types::builders::WorkerComputeConfigurationBuilder {
        crate::types::builders::WorkerComputeConfigurationBuilder::default()
    }
}

/// A builder for [`WorkerComputeConfiguration`](crate::types::WorkerComputeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkerComputeConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::WorkerComputeType>,
    pub(crate) number: ::std::option::Option<i32>,
    pub(crate) properties: ::std::option::Option<crate::types::WorkerComputeConfigurationProperties>,
}
impl WorkerComputeConfigurationBuilder {
    /// <p>The worker compute configuration type.</p>
    pub fn r#type(mut self, input: crate::types::WorkerComputeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The worker compute configuration type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WorkerComputeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The worker compute configuration type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WorkerComputeType> {
        &self.r#type
    }
    /// <p>The number of workers.</p>
    /// <p>SQL queries support a minimum value of 2 and a maximum value of 400.</p>
    /// <p>PySpark jobs support a minimum value of 4 and a maximum value of 128.</p>
    pub fn number(mut self, input: i32) -> Self {
        self.number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of workers.</p>
    /// <p>SQL queries support a minimum value of 2 and a maximum value of 400.</p>
    /// <p>PySpark jobs support a minimum value of 4 and a maximum value of 128.</p>
    pub fn set_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number = input;
        self
    }
    /// <p>The number of workers.</p>
    /// <p>SQL queries support a minimum value of 2 and a maximum value of 400.</p>
    /// <p>PySpark jobs support a minimum value of 4 and a maximum value of 128.</p>
    pub fn get_number(&self) -> &::std::option::Option<i32> {
        &self.number
    }
    /// <p>The configuration properties for the worker compute environment. These properties allow you to customize the compute settings for your Clean Rooms workloads.</p>
    pub fn properties(mut self, input: crate::types::WorkerComputeConfigurationProperties) -> Self {
        self.properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration properties for the worker compute environment. These properties allow you to customize the compute settings for your Clean Rooms workloads.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<crate::types::WorkerComputeConfigurationProperties>) -> Self {
        self.properties = input;
        self
    }
    /// <p>The configuration properties for the worker compute environment. These properties allow you to customize the compute settings for your Clean Rooms workloads.</p>
    pub fn get_properties(&self) -> &::std::option::Option<crate::types::WorkerComputeConfigurationProperties> {
        &self.properties
    }
    /// Consumes the builder and constructs a [`WorkerComputeConfiguration`](crate::types::WorkerComputeConfiguration).
    pub fn build(self) -> crate::types::WorkerComputeConfiguration {
        crate::types::WorkerComputeConfiguration {
            r#type: self.r#type,
            number: self.number,
            properties: self.properties,
        }
    }
}
