// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the total number of aggregations, as well as the remaining aggregations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DifferentialPrivacyPrivacyBudgetAggregation {
    /// <p>The different types of aggregation functions that you can perform.</p>
    pub r#type: crate::types::DifferentialPrivacyAggregationType,
    /// <p>The maximum number of aggregation functions that you can perform with the given privacy budget.</p>
    pub max_count: i32,
    /// <p>The remaining number of aggregation functions that can be run with the available privacy budget.</p>
    pub remaining_count: i32,
}
impl DifferentialPrivacyPrivacyBudgetAggregation {
    /// <p>The different types of aggregation functions that you can perform.</p>
    pub fn r#type(&self) -> &crate::types::DifferentialPrivacyAggregationType {
        &self.r#type
    }
    /// <p>The maximum number of aggregation functions that you can perform with the given privacy budget.</p>
    pub fn max_count(&self) -> i32 {
        self.max_count
    }
    /// <p>The remaining number of aggregation functions that can be run with the available privacy budget.</p>
    pub fn remaining_count(&self) -> i32 {
        self.remaining_count
    }
}
impl DifferentialPrivacyPrivacyBudgetAggregation {
    /// Creates a new builder-style object to manufacture [`DifferentialPrivacyPrivacyBudgetAggregation`](crate::types::DifferentialPrivacyPrivacyBudgetAggregation).
    pub fn builder() -> crate::types::builders::DifferentialPrivacyPrivacyBudgetAggregationBuilder {
        crate::types::builders::DifferentialPrivacyPrivacyBudgetAggregationBuilder::default()
    }
}

/// A builder for [`DifferentialPrivacyPrivacyBudgetAggregation`](crate::types::DifferentialPrivacyPrivacyBudgetAggregation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DifferentialPrivacyPrivacyBudgetAggregationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DifferentialPrivacyAggregationType>,
    pub(crate) max_count: ::std::option::Option<i32>,
    pub(crate) remaining_count: ::std::option::Option<i32>,
}
impl DifferentialPrivacyPrivacyBudgetAggregationBuilder {
    /// <p>The different types of aggregation functions that you can perform.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DifferentialPrivacyAggregationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The different types of aggregation functions that you can perform.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DifferentialPrivacyAggregationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The different types of aggregation functions that you can perform.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DifferentialPrivacyAggregationType> {
        &self.r#type
    }
    /// <p>The maximum number of aggregation functions that you can perform with the given privacy budget.</p>
    /// This field is required.
    pub fn max_count(mut self, input: i32) -> Self {
        self.max_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of aggregation functions that you can perform with the given privacy budget.</p>
    pub fn set_max_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_count = input;
        self
    }
    /// <p>The maximum number of aggregation functions that you can perform with the given privacy budget.</p>
    pub fn get_max_count(&self) -> &::std::option::Option<i32> {
        &self.max_count
    }
    /// <p>The remaining number of aggregation functions that can be run with the available privacy budget.</p>
    /// This field is required.
    pub fn remaining_count(mut self, input: i32) -> Self {
        self.remaining_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The remaining number of aggregation functions that can be run with the available privacy budget.</p>
    pub fn set_remaining_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.remaining_count = input;
        self
    }
    /// <p>The remaining number of aggregation functions that can be run with the available privacy budget.</p>
    pub fn get_remaining_count(&self) -> &::std::option::Option<i32> {
        &self.remaining_count
    }
    /// Consumes the builder and constructs a [`DifferentialPrivacyPrivacyBudgetAggregation`](crate::types::DifferentialPrivacyPrivacyBudgetAggregation).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DifferentialPrivacyPrivacyBudgetAggregationBuilder::type)
    /// - [`max_count`](crate::types::builders::DifferentialPrivacyPrivacyBudgetAggregationBuilder::max_count)
    /// - [`remaining_count`](crate::types::builders::DifferentialPrivacyPrivacyBudgetAggregationBuilder::remaining_count)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::DifferentialPrivacyPrivacyBudgetAggregation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DifferentialPrivacyPrivacyBudgetAggregation {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DifferentialPrivacyPrivacyBudgetAggregation",
                )
            })?,
            max_count: self.max_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_count",
                    "max_count was not specified but it is required when building DifferentialPrivacyPrivacyBudgetAggregation",
                )
            })?,
            remaining_count: self.remaining_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "remaining_count",
                    "remaining_count was not specified but it is required when building DifferentialPrivacyPrivacyBudgetAggregation",
                )
            })?,
        })
    }
}
