// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configured table association links a configured table to a collaboration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfiguredTableAssociation {
    /// <p>The unique ARN for the configured table association.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique ID for the configured table association.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The unique ID for the configured table that the association refers to.</p>
    #[doc(hidden)]
    pub configured_table_id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the configured table that the association refers to.</p>
    #[doc(hidden)]
    pub configured_table_arn: std::option::Option<std::string::String>,
    /// <p>The unique ID for the membership this configured table association belongs to.</p>
    #[doc(hidden)]
    pub membership_id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the membership this configured table association belongs to.</p>
    #[doc(hidden)]
    pub membership_arn: std::option::Option<std::string::String>,
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the configured table association, in lowercase. The table is identified by this name when running protected queries against the underlying data.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the configured table association.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The time the configured table association was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the configured table association was last updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ConfiguredTableAssociation {
    /// <p>The unique ARN for the configured table association.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique ID for the configured table association.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The unique ID for the configured table that the association refers to.</p>
    pub fn configured_table_id(&self) -> std::option::Option<&str> {
        self.configured_table_id.as_deref()
    }
    /// <p>The unique ARN for the configured table that the association refers to.</p>
    pub fn configured_table_arn(&self) -> std::option::Option<&str> {
        self.configured_table_arn.as_deref()
    }
    /// <p>The unique ID for the membership this configured table association belongs to.</p>
    pub fn membership_id(&self) -> std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The unique ARN for the membership this configured table association belongs to.</p>
    pub fn membership_arn(&self) -> std::option::Option<&str> {
        self.membership_arn.as_deref()
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The name of the configured table association, in lowercase. The table is identified by this name when running protected queries against the underlying data.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the configured table association.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time the configured table association was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time the configured table association was last updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl ConfiguredTableAssociation {
    /// Creates a new builder-style object to manufacture [`ConfiguredTableAssociation`](crate::types::ConfiguredTableAssociation).
    pub fn builder() -> crate::types::builders::ConfiguredTableAssociationBuilder {
        crate::types::builders::ConfiguredTableAssociationBuilder::default()
    }
}

/// A builder for [`ConfiguredTableAssociation`](crate::types::ConfiguredTableAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfiguredTableAssociationBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) configured_table_id: std::option::Option<std::string::String>,
    pub(crate) configured_table_arn: std::option::Option<std::string::String>,
    pub(crate) membership_id: std::option::Option<std::string::String>,
    pub(crate) membership_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ConfiguredTableAssociationBuilder {
    /// <p>The unique ARN for the configured table association.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the configured table association.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique ID for the configured table association.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID for the configured table association.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID for the configured table that the association refers to.</p>
    pub fn configured_table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.configured_table_id = Some(input.into());
        self
    }
    /// <p>The unique ID for the configured table that the association refers to.</p>
    pub fn set_configured_table_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configured_table_id = input;
        self
    }
    /// <p>The unique ARN for the configured table that the association refers to.</p>
    pub fn configured_table_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.configured_table_arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the configured table that the association refers to.</p>
    pub fn set_configured_table_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configured_table_arn = input;
        self
    }
    /// <p>The unique ID for the membership this configured table association belongs to.</p>
    pub fn membership_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_id = Some(input.into());
        self
    }
    /// <p>The unique ID for the membership this configured table association belongs to.</p>
    pub fn set_membership_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The unique ARN for the membership this configured table association belongs to.</p>
    pub fn membership_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership this configured table association belongs to.</p>
    pub fn set_membership_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The name of the configured table association, in lowercase. The table is identified by this name when running protected queries against the underlying data.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configured table association, in lowercase. The table is identified by this name when running protected queries against the underlying data.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the configured table association.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the configured table association.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The time the configured table association was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time the configured table association was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the configured table association was last updated.</p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The time the configured table association was last updated.</p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfiguredTableAssociation`](crate::types::ConfiguredTableAssociation).
    pub fn build(self) -> crate::types::ConfiguredTableAssociation {
        crate::types::ConfiguredTableAssociation {
            arn: self.arn,
            id: self.id,
            configured_table_id: self.configured_table_id,
            configured_table_arn: self.configured_table_arn,
            membership_id: self.membership_id,
            membership_arn: self.membership_arn,
            role_arn: self.role_arn,
            name: self.name,
            description: self.description,
            create_time: self.create_time,
            update_time: self.update_time,
        }
    }
}
