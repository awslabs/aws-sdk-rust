// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The membership object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Membership {
    /// <p>The unique ID of the membership.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the membership.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    #[doc(hidden)]
    pub collaboration_arn: std::option::Option<std::string::String>,
    /// <p>The unique ID for the membership's collaboration.</p>
    #[doc(hidden)]
    pub collaboration_id: std::option::Option<std::string::String>,
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    #[doc(hidden)]
    pub collaboration_creator_account_id: std::option::Option<std::string::String>,
    /// <p>The display name of the collaboration creator.</p>
    #[doc(hidden)]
    pub collaboration_creator_display_name: std::option::Option<std::string::String>,
    /// <p>The name of the membership's collaboration.</p>
    #[doc(hidden)]
    pub collaboration_name: std::option::Option<std::string::String>,
    /// <p>The time when the membership was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the membership metadata was last updated.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::MembershipStatus>,
    /// <p>The abilities granted to the collaboration member.</p>
    #[doc(hidden)]
    pub member_abilities: std::option::Option<std::vec::Vec<crate::types::MemberAbility>>,
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    #[doc(hidden)]
    pub query_log_status: std::option::Option<crate::types::MembershipQueryLogStatus>,
}
impl Membership {
    /// <p>The unique ID of the membership.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn collaboration_arn(&self) -> std::option::Option<&str> {
        self.collaboration_arn.as_deref()
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn collaboration_id(&self) -> std::option::Option<&str> {
        self.collaboration_id.as_deref()
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn collaboration_creator_account_id(&self) -> std::option::Option<&str> {
        self.collaboration_creator_account_id.as_deref()
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn collaboration_creator_display_name(&self) -> std::option::Option<&str> {
        self.collaboration_creator_display_name.as_deref()
    }
    /// <p>The name of the membership's collaboration.</p>
    pub fn collaboration_name(&self) -> std::option::Option<&str> {
        self.collaboration_name.as_deref()
    }
    /// <p>The time when the membership was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::MembershipStatus> {
        self.status.as_ref()
    }
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn member_abilities(&self) -> std::option::Option<&[crate::types::MemberAbility]> {
        self.member_abilities.as_deref()
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(&self) -> std::option::Option<&crate::types::MembershipQueryLogStatus> {
        self.query_log_status.as_ref()
    }
}
impl Membership {
    /// Creates a new builder-style object to manufacture [`Membership`](crate::types::Membership).
    pub fn builder() -> crate::types::builders::MembershipBuilder {
        crate::types::builders::MembershipBuilder::default()
    }
}

/// A builder for [`Membership`](crate::types::Membership).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MembershipBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) collaboration_arn: std::option::Option<std::string::String>,
    pub(crate) collaboration_id: std::option::Option<std::string::String>,
    pub(crate) collaboration_creator_account_id: std::option::Option<std::string::String>,
    pub(crate) collaboration_creator_display_name: std::option::Option<std::string::String>,
    pub(crate) collaboration_name: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::MembershipStatus>,
    pub(crate) member_abilities: std::option::Option<std::vec::Vec<crate::types::MemberAbility>>,
    pub(crate) query_log_status: std::option::Option<crate::types::MembershipQueryLogStatus>,
}
impl MembershipBuilder {
    /// <p>The unique ID of the membership.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique ID of the membership.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn collaboration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.collaboration_arn = Some(input.into());
        self
    }
    /// <p>The unique ARN for the membership's associated collaboration.</p>
    pub fn set_collaboration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.collaboration_arn = input;
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn collaboration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.collaboration_id = Some(input.into());
        self
    }
    /// <p>The unique ID for the membership's collaboration.</p>
    pub fn set_collaboration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn collaboration_creator_account_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.collaboration_creator_account_id = Some(input.into());
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports AWS account ID.</p>
    pub fn set_collaboration_creator_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.collaboration_creator_account_id = input;
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn collaboration_creator_display_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.collaboration_creator_display_name = Some(input.into());
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn set_collaboration_creator_display_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.collaboration_creator_display_name = input;
        self
    }
    /// <p>The name of the membership's collaboration.</p>
    pub fn collaboration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.collaboration_name = Some(input.into());
        self
    }
    /// <p>The name of the membership's collaboration.</p>
    pub fn set_collaboration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.collaboration_name = input;
        self
    }
    /// <p>The time when the membership was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time when the membership was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The time the membership metadata was last updated.</p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn status(mut self, input: crate::types::MembershipStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the membership. Valid values are `ACTIVE`, `REMOVED`, and `COLLABORATION_DELETED`.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::MembershipStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `member_abilities`.
    ///
    /// To override the contents of this collection use [`set_member_abilities`](Self::set_member_abilities).
    ///
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn member_abilities(mut self, input: crate::types::MemberAbility) -> Self {
        let mut v = self.member_abilities.unwrap_or_default();
        v.push(input);
        self.member_abilities = Some(v);
        self
    }
    /// <p>The abilities granted to the collaboration member.</p>
    pub fn set_member_abilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MemberAbility>>,
    ) -> Self {
        self.member_abilities = input;
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::types::MembershipQueryLogStatus) -> Self {
        self.query_log_status = Some(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(
        mut self,
        input: std::option::Option<crate::types::MembershipQueryLogStatus>,
    ) -> Self {
        self.query_log_status = input;
        self
    }
    /// Consumes the builder and constructs a [`Membership`](crate::types::Membership).
    pub fn build(self) -> crate::types::Membership {
        crate::types::Membership {
            id: self.id,
            arn: self.arn,
            collaboration_arn: self.collaboration_arn,
            collaboration_id: self.collaboration_id,
            collaboration_creator_account_id: self.collaboration_creator_account_id,
            collaboration_creator_display_name: self.collaboration_creator_display_name,
            collaboration_name: self.collaboration_name,
            create_time: self.create_time,
            update_time: self.update_time,
            status: self.status,
            member_abilities: self.member_abilities,
            query_log_status: self.query_log_status,
        }
    }
}
