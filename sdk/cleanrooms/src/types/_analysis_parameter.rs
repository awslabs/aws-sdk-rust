// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Optional. The member who can query can provide this placeholder for a literal data value in an analysis template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AnalysisParameter {
    /// <p>The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.</p>
    pub name: ::std::string::String,
    /// <p>The type of parameter.</p>
    pub r#type: crate::types::ParameterType,
    /// <p>Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
}
impl AnalysisParameter {
    /// <p>The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of parameter.</p>
    pub fn r#type(&self) -> &crate::types::ParameterType {
        &self.r#type
    }
    /// <p>Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl ::std::fmt::Debug for AnalysisParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalysisParameter");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("default_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AnalysisParameter {
    /// Creates a new builder-style object to manufacture [`AnalysisParameter`](crate::types::AnalysisParameter).
    pub fn builder() -> crate::types::builders::AnalysisParameterBuilder {
        crate::types::builders::AnalysisParameterBuilder::default()
    }
}

/// A builder for [`AnalysisParameter`](crate::types::AnalysisParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AnalysisParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ParameterType>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
}
impl AnalysisParameterBuilder {
    /// <p>The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of parameter.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ParameterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of parameter.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ParameterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of parameter.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ParameterType> {
        &self.r#type
    }
    /// <p>Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// Consumes the builder and constructs a [`AnalysisParameter`](crate::types::AnalysisParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AnalysisParameterBuilder::name)
    /// - [`r#type`](crate::types::builders::AnalysisParameterBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::AnalysisParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnalysisParameter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AnalysisParameter",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AnalysisParameter",
                )
            })?,
            default_value: self.default_value,
        })
    }
}
impl ::std::fmt::Debug for AnalysisParameterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AnalysisParameterBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("default_value", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
