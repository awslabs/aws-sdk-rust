// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata of the collaboration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CollaborationSummary {
    /// <p>The identifier for the collaboration.</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the collaboration.</p>
    pub arn: ::std::string::String,
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub name: ::std::string::String,
    /// <p>The identifier used to reference members of the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub creator_account_id: ::std::string::String,
    /// <p>The display name of the collaboration creator.</p>
    pub creator_display_name: ::std::string::String,
    /// <p>The time when the collaboration was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The time the collaboration metadata was last updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The status of a member in a collaboration.</p>
    pub member_status: crate::types::MemberStatus,
    /// <p>The identifier of a member in a collaboration.</p>
    pub membership_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of a member in a collaboration.</p>
    pub membership_arn: ::std::option::Option<::std::string::String>,
}
impl CollaborationSummary {
    /// <p>The identifier for the collaboration.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the collaboration.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn creator_account_id(&self) -> &str {
        use std::ops::Deref;
        self.creator_account_id.deref()
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn creator_display_name(&self) -> &str {
        use std::ops::Deref;
        self.creator_display_name.deref()
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn member_status(&self) -> &crate::types::MemberStatus {
        &self.member_status
    }
    /// <p>The identifier of a member in a collaboration.</p>
    pub fn membership_id(&self) -> ::std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>The ARN of a member in a collaboration.</p>
    pub fn membership_arn(&self) -> ::std::option::Option<&str> {
        self.membership_arn.as_deref()
    }
}
impl CollaborationSummary {
    /// Creates a new builder-style object to manufacture [`CollaborationSummary`](crate::types::CollaborationSummary).
    pub fn builder() -> crate::types::builders::CollaborationSummaryBuilder {
        crate::types::builders::CollaborationSummaryBuilder::default()
    }
}

/// A builder for [`CollaborationSummary`](crate::types::CollaborationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CollaborationSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) creator_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) creator_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) member_status: ::std::option::Option<crate::types::MemberStatus>,
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_arn: ::std::option::Option<::std::string::String>,
}
impl CollaborationSummaryBuilder {
    /// <p>The identifier for the collaboration.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the collaboration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the collaboration.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the collaboration.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the collaboration.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A human-readable identifier provided by the collaboration owner. Display names are not unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports Amazon Web Services account ID.</p>
    /// This field is required.
    pub fn creator_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn set_creator_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_account_id = input;
        self
    }
    /// <p>The identifier used to reference members of the collaboration. Currently only supports Amazon Web Services account ID.</p>
    pub fn get_creator_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_account_id
    }
    /// <p>The display name of the collaboration creator.</p>
    /// This field is required.
    pub fn creator_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn set_creator_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_display_name = input;
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn get_creator_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_display_name
    }
    /// <p>The time when the collaboration was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time when the collaboration was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time the collaboration metadata was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The status of a member in a collaboration.</p>
    /// This field is required.
    pub fn member_status(mut self, input: crate::types::MemberStatus) -> Self {
        self.member_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn set_member_status(mut self, input: ::std::option::Option<crate::types::MemberStatus>) -> Self {
        self.member_status = input;
        self
    }
    /// <p>The status of a member in a collaboration.</p>
    pub fn get_member_status(&self) -> &::std::option::Option<crate::types::MemberStatus> {
        &self.member_status
    }
    /// <p>The identifier of a member in a collaboration.</p>
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a member in a collaboration.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>The identifier of a member in a collaboration.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>The ARN of a member in a collaboration.</p>
    pub fn membership_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a member in a collaboration.</p>
    pub fn set_membership_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_arn = input;
        self
    }
    /// <p>The ARN of a member in a collaboration.</p>
    pub fn get_membership_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_arn
    }
    /// Consumes the builder and constructs a [`CollaborationSummary`](crate::types::CollaborationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CollaborationSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::CollaborationSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::CollaborationSummaryBuilder::name)
    /// - [`creator_account_id`](crate::types::builders::CollaborationSummaryBuilder::creator_account_id)
    /// - [`creator_display_name`](crate::types::builders::CollaborationSummaryBuilder::creator_display_name)
    /// - [`create_time`](crate::types::builders::CollaborationSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::CollaborationSummaryBuilder::update_time)
    /// - [`member_status`](crate::types::builders::CollaborationSummaryBuilder::member_status)
    pub fn build(self) -> ::std::result::Result<crate::types::CollaborationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CollaborationSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CollaborationSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CollaborationSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CollaborationSummary",
                )
            })?,
            creator_account_id: self.creator_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator_account_id",
                    "creator_account_id was not specified but it is required when building CollaborationSummary",
                )
            })?,
            creator_display_name: self.creator_display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator_display_name",
                    "creator_display_name was not specified but it is required when building CollaborationSummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building CollaborationSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building CollaborationSummary",
                )
            })?,
            member_status: self.member_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "member_status",
                    "member_status was not specified but it is required when building CollaborationSummary",
                )
            })?,
            membership_id: self.membership_id,
            membership_arn: self.membership_arn,
        })
    }
}
