// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ParameterType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let parametertype = unimplemented!();
/// match parametertype {
///     ParameterType::Bigint => { /* ... */ },
///     ParameterType::Binary => { /* ... */ },
///     ParameterType::Boolean => { /* ... */ },
///     ParameterType::Byte => { /* ... */ },
///     ParameterType::Char => { /* ... */ },
///     ParameterType::Character => { /* ... */ },
///     ParameterType::Date => { /* ... */ },
///     ParameterType::Decimal => { /* ... */ },
///     ParameterType::Double => { /* ... */ },
///     ParameterType::DoublePrecision => { /* ... */ },
///     ParameterType::Float => { /* ... */ },
///     ParameterType::Int => { /* ... */ },
///     ParameterType::Integer => { /* ... */ },
///     ParameterType::Long => { /* ... */ },
///     ParameterType::Numeric => { /* ... */ },
///     ParameterType::Real => { /* ... */ },
///     ParameterType::Short => { /* ... */ },
///     ParameterType::Smallint => { /* ... */ },
///     ParameterType::String => { /* ... */ },
///     ParameterType::Time => { /* ... */ },
///     ParameterType::Timestamp => { /* ... */ },
///     ParameterType::Timestamptz => { /* ... */ },
///     ParameterType::TimestampLtz => { /* ... */ },
///     ParameterType::TimestampNtz => { /* ... */ },
///     ParameterType::Timetz => { /* ... */ },
///     ParameterType::Tinyint => { /* ... */ },
///     ParameterType::Varbyte => { /* ... */ },
///     ParameterType::Varchar => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `parametertype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ParameterType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ParameterType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ParameterType::NewFeature` is defined.
/// Specifically, when `parametertype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ParameterType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ParameterType {
    #[allow(missing_docs)] // documentation missing in model
    Bigint,
    #[allow(missing_docs)] // documentation missing in model
    Binary,
    #[allow(missing_docs)] // documentation missing in model
    Boolean,
    #[allow(missing_docs)] // documentation missing in model
    Byte,
    #[allow(missing_docs)] // documentation missing in model
    Char,
    #[allow(missing_docs)] // documentation missing in model
    Character,
    #[allow(missing_docs)] // documentation missing in model
    Date,
    #[allow(missing_docs)] // documentation missing in model
    Decimal,
    #[allow(missing_docs)] // documentation missing in model
    Double,
    #[allow(missing_docs)] // documentation missing in model
    DoublePrecision,
    #[allow(missing_docs)] // documentation missing in model
    Float,
    #[allow(missing_docs)] // documentation missing in model
    Int,
    #[allow(missing_docs)] // documentation missing in model
    Integer,
    #[allow(missing_docs)] // documentation missing in model
    Long,
    #[allow(missing_docs)] // documentation missing in model
    Numeric,
    #[allow(missing_docs)] // documentation missing in model
    Real,
    #[allow(missing_docs)] // documentation missing in model
    Short,
    #[allow(missing_docs)] // documentation missing in model
    Smallint,
    #[allow(missing_docs)] // documentation missing in model
    String,
    #[allow(missing_docs)] // documentation missing in model
    Time,
    #[allow(missing_docs)] // documentation missing in model
    Timestamp,
    #[allow(missing_docs)] // documentation missing in model
    Timestamptz,
    #[allow(missing_docs)] // documentation missing in model
    TimestampLtz,
    #[allow(missing_docs)] // documentation missing in model
    TimestampNtz,
    #[allow(missing_docs)] // documentation missing in model
    Timetz,
    #[allow(missing_docs)] // documentation missing in model
    Tinyint,
    #[allow(missing_docs)] // documentation missing in model
    Varbyte,
    #[allow(missing_docs)] // documentation missing in model
    Varchar,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ParameterType {
    fn from(s: &str) -> Self {
        match s {
            "BIGINT" => ParameterType::Bigint,
            "BINARY" => ParameterType::Binary,
            "BOOLEAN" => ParameterType::Boolean,
            "BYTE" => ParameterType::Byte,
            "CHAR" => ParameterType::Char,
            "CHARACTER" => ParameterType::Character,
            "DATE" => ParameterType::Date,
            "DECIMAL" => ParameterType::Decimal,
            "DOUBLE" => ParameterType::Double,
            "DOUBLE_PRECISION" => ParameterType::DoublePrecision,
            "FLOAT" => ParameterType::Float,
            "INT" => ParameterType::Int,
            "INTEGER" => ParameterType::Integer,
            "LONG" => ParameterType::Long,
            "NUMERIC" => ParameterType::Numeric,
            "REAL" => ParameterType::Real,
            "SHORT" => ParameterType::Short,
            "SMALLINT" => ParameterType::Smallint,
            "STRING" => ParameterType::String,
            "TIME" => ParameterType::Time,
            "TIMESTAMP" => ParameterType::Timestamp,
            "TIMESTAMPTZ" => ParameterType::Timestamptz,
            "TIMESTAMP_LTZ" => ParameterType::TimestampLtz,
            "TIMESTAMP_NTZ" => ParameterType::TimestampNtz,
            "TIMETZ" => ParameterType::Timetz,
            "TINYINT" => ParameterType::Tinyint,
            "VARBYTE" => ParameterType::Varbyte,
            "VARCHAR" => ParameterType::Varchar,
            other => ParameterType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ParameterType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ParameterType::from(s))
    }
}
impl ParameterType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ParameterType::Bigint => "BIGINT",
            ParameterType::Binary => "BINARY",
            ParameterType::Boolean => "BOOLEAN",
            ParameterType::Byte => "BYTE",
            ParameterType::Char => "CHAR",
            ParameterType::Character => "CHARACTER",
            ParameterType::Date => "DATE",
            ParameterType::Decimal => "DECIMAL",
            ParameterType::Double => "DOUBLE",
            ParameterType::DoublePrecision => "DOUBLE_PRECISION",
            ParameterType::Float => "FLOAT",
            ParameterType::Int => "INT",
            ParameterType::Integer => "INTEGER",
            ParameterType::Long => "LONG",
            ParameterType::Numeric => "NUMERIC",
            ParameterType::Real => "REAL",
            ParameterType::Short => "SHORT",
            ParameterType::Smallint => "SMALLINT",
            ParameterType::String => "STRING",
            ParameterType::Time => "TIME",
            ParameterType::Timestamp => "TIMESTAMP",
            ParameterType::Timestamptz => "TIMESTAMPTZ",
            ParameterType::TimestampLtz => "TIMESTAMP_LTZ",
            ParameterType::TimestampNtz => "TIMESTAMP_NTZ",
            ParameterType::Timetz => "TIMETZ",
            ParameterType::Tinyint => "TINYINT",
            ParameterType::Varbyte => "VARBYTE",
            ParameterType::Varchar => "VARCHAR",
            ParameterType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BIGINT",
            "BINARY",
            "BOOLEAN",
            "BYTE",
            "CHAR",
            "CHARACTER",
            "DATE",
            "DECIMAL",
            "DOUBLE",
            "DOUBLE_PRECISION",
            "FLOAT",
            "INT",
            "INTEGER",
            "LONG",
            "NUMERIC",
            "REAL",
            "SHORT",
            "SMALLINT",
            "STRING",
            "TIME",
            "TIMESTAMP",
            "TIMESTAMPTZ",
            "TIMESTAMP_LTZ",
            "TIMESTAMP_NTZ",
            "TIMETZ",
            "TINYINT",
            "VARBYTE",
            "VARCHAR",
        ]
    }
}
impl ::std::convert::AsRef<str> for ParameterType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ParameterType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ParameterType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ParameterType::Bigint => write!(f, "BIGINT"),
            ParameterType::Binary => write!(f, "BINARY"),
            ParameterType::Boolean => write!(f, "BOOLEAN"),
            ParameterType::Byte => write!(f, "BYTE"),
            ParameterType::Char => write!(f, "CHAR"),
            ParameterType::Character => write!(f, "CHARACTER"),
            ParameterType::Date => write!(f, "DATE"),
            ParameterType::Decimal => write!(f, "DECIMAL"),
            ParameterType::Double => write!(f, "DOUBLE"),
            ParameterType::DoublePrecision => write!(f, "DOUBLE_PRECISION"),
            ParameterType::Float => write!(f, "FLOAT"),
            ParameterType::Int => write!(f, "INT"),
            ParameterType::Integer => write!(f, "INTEGER"),
            ParameterType::Long => write!(f, "LONG"),
            ParameterType::Numeric => write!(f, "NUMERIC"),
            ParameterType::Real => write!(f, "REAL"),
            ParameterType::Short => write!(f, "SHORT"),
            ParameterType::Smallint => write!(f, "SMALLINT"),
            ParameterType::String => write!(f, "STRING"),
            ParameterType::Time => write!(f, "TIME"),
            ParameterType::Timestamp => write!(f, "TIMESTAMP"),
            ParameterType::Timestamptz => write!(f, "TIMESTAMPTZ"),
            ParameterType::TimestampLtz => write!(f, "TIMESTAMP_LTZ"),
            ParameterType::TimestampNtz => write!(f, "TIMESTAMP_NTZ"),
            ParameterType::Timetz => write!(f, "TIMETZ"),
            ParameterType::Tinyint => write!(f, "TINYINT"),
            ParameterType::Varbyte => write!(f, "VARBYTE"),
            ParameterType::Varchar => write!(f, "VARCHAR"),
            ParameterType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
