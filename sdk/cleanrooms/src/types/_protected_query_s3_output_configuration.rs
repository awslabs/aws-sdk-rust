// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration to write the query results to S3.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProtectedQueryS3OutputConfiguration {
    /// <p>Intended file format of the result.</p>
    #[doc(hidden)]
    pub result_format: std::option::Option<crate::types::ResultFormat>,
    /// <p>The S3 bucket to unload the protected query results.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The S3 prefix to unload the protected query results.</p>
    #[doc(hidden)]
    pub key_prefix: std::option::Option<std::string::String>,
}
impl ProtectedQueryS3OutputConfiguration {
    /// <p>Intended file format of the result.</p>
    pub fn result_format(&self) -> std::option::Option<&crate::types::ResultFormat> {
        self.result_format.as_ref()
    }
    /// <p>The S3 bucket to unload the protected query results.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The S3 prefix to unload the protected query results.</p>
    pub fn key_prefix(&self) -> std::option::Option<&str> {
        self.key_prefix.as_deref()
    }
}
impl ProtectedQueryS3OutputConfiguration {
    /// Creates a new builder-style object to manufacture [`ProtectedQueryS3OutputConfiguration`](crate::types::ProtectedQueryS3OutputConfiguration).
    pub fn builder() -> crate::types::builders::ProtectedQueryS3OutputConfigurationBuilder {
        crate::types::builders::ProtectedQueryS3OutputConfigurationBuilder::default()
    }
}

/// A builder for [`ProtectedQueryS3OutputConfiguration`](crate::types::ProtectedQueryS3OutputConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProtectedQueryS3OutputConfigurationBuilder {
    pub(crate) result_format: std::option::Option<crate::types::ResultFormat>,
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) key_prefix: std::option::Option<std::string::String>,
}
impl ProtectedQueryS3OutputConfigurationBuilder {
    /// <p>Intended file format of the result.</p>
    pub fn result_format(mut self, input: crate::types::ResultFormat) -> Self {
        self.result_format = Some(input);
        self
    }
    /// <p>Intended file format of the result.</p>
    pub fn set_result_format(
        mut self,
        input: std::option::Option<crate::types::ResultFormat>,
    ) -> Self {
        self.result_format = input;
        self
    }
    /// <p>The S3 bucket to unload the protected query results.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>The S3 bucket to unload the protected query results.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The S3 prefix to unload the protected query results.</p>
    pub fn key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_prefix = Some(input.into());
        self
    }
    /// <p>The S3 prefix to unload the protected query results.</p>
    pub fn set_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`ProtectedQueryS3OutputConfiguration`](crate::types::ProtectedQueryS3OutputConfiguration).
    pub fn build(self) -> crate::types::ProtectedQueryS3OutputConfiguration {
        crate::types::ProtectedQueryS3OutputConfiguration {
            result_format: self.result_format,
            bucket: self.bucket,
            key_prefix: self.key_prefix,
        }
    }
}
