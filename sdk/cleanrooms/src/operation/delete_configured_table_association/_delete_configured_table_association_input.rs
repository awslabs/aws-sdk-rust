// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfiguredTableAssociationInput {
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    #[doc(hidden)]
    pub configured_table_association_identifier: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    #[doc(hidden)]
    pub membership_identifier: std::option::Option<std::string::String>,
}
impl DeleteConfiguredTableAssociationInput {
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    pub fn configured_table_association_identifier(&self) -> std::option::Option<&str> {
        self.configured_table_association_identifier.as_deref()
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn membership_identifier(&self) -> std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
}
impl DeleteConfiguredTableAssociationInput {
    /// Creates a new builder-style object to manufacture [`DeleteConfiguredTableAssociationInput`](crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationInput).
    pub fn builder() -> crate::operation::delete_configured_table_association::builders::DeleteConfiguredTableAssociationInputBuilder{
        crate::operation::delete_configured_table_association::builders::DeleteConfiguredTableAssociationInputBuilder::default()
    }
}

/// A builder for [`DeleteConfiguredTableAssociationInput`](crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteConfiguredTableAssociationInputBuilder {
    pub(crate) configured_table_association_identifier: std::option::Option<std::string::String>,
    pub(crate) membership_identifier: std::option::Option<std::string::String>,
}
impl DeleteConfiguredTableAssociationInputBuilder {
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    pub fn configured_table_association_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.configured_table_association_identifier = Some(input.into());
        self
    }
    /// <p>The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.</p>
    pub fn set_configured_table_association_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configured_table_association_identifier = input;
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.membership_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteConfiguredTableAssociationInput`](crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationInput).
    pub fn build(self) -> Result<crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::delete_configured_table_association::DeleteConfiguredTableAssociationInput {
                configured_table_association_identifier: self.configured_table_association_identifier
                ,
                membership_identifier: self.membership_identifier
                ,
            }
        )
    }
}
