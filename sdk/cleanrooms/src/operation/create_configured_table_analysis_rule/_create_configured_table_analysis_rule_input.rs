// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableAnalysisRuleInput {
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    #[doc(hidden)]
    pub configured_table_identifier: std::option::Option<std::string::String>,
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    #[doc(hidden)]
    pub analysis_rule_type: std::option::Option<crate::types::ConfiguredTableAnalysisRuleType>,
    /// <p>The entire created configured table analysis rule object.</p>
    #[doc(hidden)]
    pub analysis_rule_policy: std::option::Option<crate::types::ConfiguredTableAnalysisRulePolicy>,
}
impl CreateConfiguredTableAnalysisRuleInput {
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    pub fn configured_table_identifier(&self) -> std::option::Option<&str> {
        self.configured_table_identifier.as_deref()
    }
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    pub fn analysis_rule_type(
        &self,
    ) -> std::option::Option<&crate::types::ConfiguredTableAnalysisRuleType> {
        self.analysis_rule_type.as_ref()
    }
    /// <p>The entire created configured table analysis rule object.</p>
    pub fn analysis_rule_policy(
        &self,
    ) -> std::option::Option<&crate::types::ConfiguredTableAnalysisRulePolicy> {
        self.analysis_rule_policy.as_ref()
    }
}
impl CreateConfiguredTableAnalysisRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableAnalysisRuleInput`](crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleInput).
    pub fn builder() -> crate::operation::create_configured_table_analysis_rule::builders::CreateConfiguredTableAnalysisRuleInputBuilder{
        crate::operation::create_configured_table_analysis_rule::builders::CreateConfiguredTableAnalysisRuleInputBuilder::default()
    }
}

/// A builder for [`CreateConfiguredTableAnalysisRuleInput`](crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConfiguredTableAnalysisRuleInputBuilder {
    pub(crate) configured_table_identifier: std::option::Option<std::string::String>,
    pub(crate) analysis_rule_type:
        std::option::Option<crate::types::ConfiguredTableAnalysisRuleType>,
    pub(crate) analysis_rule_policy:
        std::option::Option<crate::types::ConfiguredTableAnalysisRulePolicy>,
}
impl CreateConfiguredTableAnalysisRuleInputBuilder {
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.configured_table_identifier = Some(input.into());
        self
    }
    /// <p>The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. </p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configured_table_identifier = input;
        self
    }
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    pub fn analysis_rule_type(
        mut self,
        input: crate::types::ConfiguredTableAnalysisRuleType,
    ) -> Self {
        self.analysis_rule_type = Some(input);
        self
    }
    /// <p>The type of analysis rule. Valid values are AGGREGATION and LIST.</p>
    pub fn set_analysis_rule_type(
        mut self,
        input: std::option::Option<crate::types::ConfiguredTableAnalysisRuleType>,
    ) -> Self {
        self.analysis_rule_type = input;
        self
    }
    /// <p>The entire created configured table analysis rule object.</p>
    pub fn analysis_rule_policy(
        mut self,
        input: crate::types::ConfiguredTableAnalysisRulePolicy,
    ) -> Self {
        self.analysis_rule_policy = Some(input);
        self
    }
    /// <p>The entire created configured table analysis rule object.</p>
    pub fn set_analysis_rule_policy(
        mut self,
        input: std::option::Option<crate::types::ConfiguredTableAnalysisRulePolicy>,
    ) -> Self {
        self.analysis_rule_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConfiguredTableAnalysisRuleInput`](crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleInput).
    pub fn build(self) -> Result<crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_configured_table_analysis_rule::CreateConfiguredTableAnalysisRuleInput {
                configured_table_identifier: self.configured_table_identifier
                ,
                analysis_rule_type: self.analysis_rule_type
                ,
                analysis_rule_policy: self.analysis_rule_policy
                ,
            }
        )
    }
}
