// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMembershipInput {
    /// <p>The unique ID for the associated collaboration.</p>
    pub collaboration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub query_log_status: ::std::option::Option<crate::types::MembershipQueryLogStatus>,
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub default_result_configuration: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
}
impl CreateMembershipInput {
    /// <p>The unique ID for the associated collaboration.</p>
    pub fn collaboration_identifier(&self) -> ::std::option::Option<&str> {
        self.collaboration_identifier.as_deref()
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(&self) -> ::std::option::Option<&crate::types::MembershipQueryLogStatus> {
        self.query_log_status.as_ref()
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn default_result_configuration(&self) -> ::std::option::Option<&crate::types::MembershipProtectedQueryResultConfiguration> {
        self.default_result_configuration.as_ref()
    }
}
impl CreateMembershipInput {
    /// Creates a new builder-style object to manufacture [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
    pub fn builder() -> crate::operation::create_membership::builders::CreateMembershipInputBuilder {
        crate::operation::create_membership::builders::CreateMembershipInputBuilder::default()
    }
}

/// A builder for [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMembershipInputBuilder {
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) query_log_status: ::std::option::Option<crate::types::MembershipQueryLogStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) default_result_configuration: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
}
impl CreateMembershipInputBuilder {
    /// <p>The unique ID for the associated collaboration.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the associated collaboration.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The unique ID for the associated collaboration.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    /// This field is required.
    pub fn query_log_status(mut self, input: crate::types::MembershipQueryLogStatus) -> Self {
        self.query_log_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(mut self, input: ::std::option::Option<crate::types::MembershipQueryLogStatus>) -> Self {
        self.query_log_status = input;
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn get_query_log_status(&self) -> &::std::option::Option<crate::types::MembershipQueryLogStatus> {
        &self.query_log_status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn default_result_configuration(mut self, input: crate::types::MembershipProtectedQueryResultConfiguration) -> Self {
        self.default_result_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn set_default_result_configuration(
        mut self,
        input: ::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration>,
    ) -> Self {
        self.default_result_configuration = input;
        self
    }
    /// <p>The default protected query result configuration as specified by the member who can receive results.</p>
    pub fn get_default_result_configuration(&self) -> &::std::option::Option<crate::types::MembershipProtectedQueryResultConfiguration> {
        &self.default_result_configuration
    }
    /// Consumes the builder and constructs a [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_membership::CreateMembershipInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_membership::CreateMembershipInput {
            collaboration_identifier: self.collaboration_identifier,
            query_log_status: self.query_log_status,
            tags: self.tags,
            default_result_configuration: self.default_result_configuration,
        })
    }
}
