// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableInput {
    /// <p>The name of the configured table.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for the configured table.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A reference to the AWS Glue table being configured.</p>
    #[doc(hidden)]
    pub table_reference: std::option::Option<crate::types::TableReference>,
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    #[doc(hidden)]
    pub allowed_columns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    #[doc(hidden)]
    pub analysis_method: std::option::Option<crate::types::AnalysisMethod>,
}
impl CreateConfiguredTableInput {
    /// <p>The name of the configured table.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the configured table.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A reference to the AWS Glue table being configured.</p>
    pub fn table_reference(&self) -> std::option::Option<&crate::types::TableReference> {
        self.table_reference.as_ref()
    }
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    pub fn allowed_columns(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_columns.as_deref()
    }
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn analysis_method(&self) -> std::option::Option<&crate::types::AnalysisMethod> {
        self.analysis_method.as_ref()
    }
}
impl CreateConfiguredTableInput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableInput`](crate::operation::create_configured_table::CreateConfiguredTableInput).
    pub fn builder(
    ) -> crate::operation::create_configured_table::builders::CreateConfiguredTableInputBuilder
    {
        crate::operation::create_configured_table::builders::CreateConfiguredTableInputBuilder::default()
    }
}

/// A builder for [`CreateConfiguredTableInput`](crate::operation::create_configured_table::CreateConfiguredTableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConfiguredTableInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) table_reference: std::option::Option<crate::types::TableReference>,
    pub(crate) allowed_columns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) analysis_method: std::option::Option<crate::types::AnalysisMethod>,
}
impl CreateConfiguredTableInputBuilder {
    /// <p>The name of the configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the configured table.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A reference to the AWS Glue table being configured.</p>
    pub fn table_reference(mut self, input: crate::types::TableReference) -> Self {
        self.table_reference = Some(input);
        self
    }
    /// <p>A reference to the AWS Glue table being configured.</p>
    pub fn set_table_reference(
        mut self,
        input: std::option::Option<crate::types::TableReference>,
    ) -> Self {
        self.table_reference = input;
        self
    }
    /// Appends an item to `allowed_columns`.
    ///
    /// To override the contents of this collection use [`set_allowed_columns`](Self::set_allowed_columns).
    ///
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    pub fn allowed_columns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_columns.unwrap_or_default();
        v.push(input.into());
        self.allowed_columns = Some(v);
        self
    }
    /// <p>The columns of the underlying table that can be used by collaborations or analysis rules.</p>
    pub fn set_allowed_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_columns = input;
        self
    }
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn analysis_method(mut self, input: crate::types::AnalysisMethod) -> Self {
        self.analysis_method = Some(input);
        self
    }
    /// <p>The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.</p>
    pub fn set_analysis_method(
        mut self,
        input: std::option::Option<crate::types::AnalysisMethod>,
    ) -> Self {
        self.analysis_method = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConfiguredTableInput`](crate::operation::create_configured_table::CreateConfiguredTableInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_configured_table::CreateConfiguredTableInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_configured_table::CreateConfiguredTableInput {
                name: self.name,
                description: self.description,
                table_reference: self.table_reference,
                allowed_columns: self.allowed_columns,
                analysis_method: self.analysis_method,
            },
        )
    }
}
