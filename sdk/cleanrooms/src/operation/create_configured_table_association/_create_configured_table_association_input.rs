// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfiguredTableAssociationInput {
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for the configured table association.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    #[doc(hidden)]
    pub membership_identifier: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    #[doc(hidden)]
    pub configured_table_identifier: std::option::Option<std::string::String>,
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl CreateConfiguredTableAssociationInput {
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the configured table association.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn membership_identifier(&self) -> std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn configured_table_identifier(&self) -> std::option::Option<&str> {
        self.configured_table_identifier.as_deref()
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl CreateConfiguredTableAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateConfiguredTableAssociationInput`](crate::operation::create_configured_table_association::CreateConfiguredTableAssociationInput).
    pub fn builder() -> crate::operation::create_configured_table_association::builders::CreateConfiguredTableAssociationInputBuilder{
        crate::operation::create_configured_table_association::builders::CreateConfiguredTableAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateConfiguredTableAssociationInput`](crate::operation::create_configured_table_association::CreateConfiguredTableAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConfiguredTableAssociationInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) membership_identifier: std::option::Option<std::string::String>,
    pub(crate) configured_table_identifier: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl CreateConfiguredTableAssociationInputBuilder {
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.configured_table_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configured_table_identifier = input;
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConfiguredTableAssociationInput`](crate::operation::create_configured_table_association::CreateConfiguredTableAssociationInput).
    pub fn build(self) -> Result<crate::operation::create_configured_table_association::CreateConfiguredTableAssociationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_configured_table_association::CreateConfiguredTableAssociationInput {
                name: self.name
                ,
                description: self.description
                ,
                membership_identifier: self.membership_identifier
                ,
                configured_table_identifier: self.configured_table_identifier
                ,
                role_arn: self.role_arn
                ,
            }
        )
    }
}
