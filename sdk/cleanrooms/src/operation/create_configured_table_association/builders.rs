// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_configured_table_association::_create_configured_table_association_output::CreateConfiguredTableAssociationOutputBuilder;

pub use crate::operation::create_configured_table_association::_create_configured_table_association_input::CreateConfiguredTableAssociationInputBuilder;

/// Fluent builder constructing a request to `CreateConfiguredTableAssociation`.
///
/// <p>Creates a configured table association. A configured table association links a configured table with a collaboration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateConfiguredTableAssociationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_configured_table_association::builders::CreateConfiguredTableAssociationInputBuilder
            }
impl CreateConfiguredTableAssociationFluentBuilder {
    /// Creates a new `CreateConfiguredTableAssociation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_configured_table_association::CreateConfiguredTableAssociation, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_configured_table_association::CreateConfiguredTableAssociationOutput, aws_smithy_http::result::SdkError<crate::operation::create_configured_table_association::CreateConfiguredTableAssociationError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the configured table association. This name is used to query the underlying configured table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the configured table association.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn configured_table_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configured_table_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.</p>
    pub fn set_configured_table_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configured_table_identifier(input);
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The service will assume this role to access catalog metadata and query the table.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
}
