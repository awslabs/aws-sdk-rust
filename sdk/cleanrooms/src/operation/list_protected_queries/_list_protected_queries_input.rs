// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListProtectedQueriesInput {
    /// <p>The identifier for the membership in the collaboration.</p>
    #[doc(hidden)]
    pub membership_identifier: std::option::Option<std::string::String>,
    /// <p>A filter on the status of the protected query.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ProtectedQueryStatus>,
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListProtectedQueriesInput {
    /// <p>The identifier for the membership in the collaboration.</p>
    pub fn membership_identifier(&self) -> std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>A filter on the status of the protected query.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ProtectedQueryStatus> {
        self.status.as_ref()
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListProtectedQueriesInput {
    /// Creates a new builder-style object to manufacture [`ListProtectedQueriesInput`](crate::operation::list_protected_queries::ListProtectedQueriesInput).
    pub fn builder(
    ) -> crate::operation::list_protected_queries::builders::ListProtectedQueriesInputBuilder {
        crate::operation::list_protected_queries::builders::ListProtectedQueriesInputBuilder::default()
    }
}

/// A builder for [`ListProtectedQueriesInput`](crate::operation::list_protected_queries::ListProtectedQueriesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListProtectedQueriesInputBuilder {
    pub(crate) membership_identifier: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ProtectedQueryStatus>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListProtectedQueriesInputBuilder {
    /// <p>The identifier for the membership in the collaboration.</p>
    pub fn membership_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.membership_identifier = Some(input.into());
        self
    }
    /// <p>The identifier for the membership in the collaboration.</p>
    pub fn set_membership_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>A filter on the status of the protected query.</p>
    pub fn status(mut self, input: crate::types::ProtectedQueryStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A filter on the status of the protected query.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ProtectedQueryStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token value retrieved from a previous call to access the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListProtectedQueriesInput`](crate::operation::list_protected_queries::ListProtectedQueriesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_protected_queries::ListProtectedQueriesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_protected_queries::ListProtectedQueriesInput {
                membership_identifier: self.membership_identifier,
                status: self.status,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
