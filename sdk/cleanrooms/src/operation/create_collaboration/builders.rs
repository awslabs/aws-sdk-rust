// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_collaboration::_create_collaboration_output::CreateCollaborationOutputBuilder;

pub use crate::operation::create_collaboration::_create_collaboration_input::CreateCollaborationInputBuilder;

impl crate::operation::create_collaboration::builders::CreateCollaborationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_collaboration::CreateCollaborationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_collaboration::CreateCollaborationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_collaboration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCollaboration`.
///
/// <p>Creates a new collaboration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCollaborationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_collaboration::builders::CreateCollaborationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_collaboration::CreateCollaborationOutput,
        crate::operation::create_collaboration::CreateCollaborationError,
    > for CreateCollaborationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_collaboration::CreateCollaborationOutput,
            crate::operation::create_collaboration::CreateCollaborationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCollaborationFluentBuilder {
    /// Creates a new `CreateCollaboration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCollaboration as a reference.
    pub fn as_input(&self) -> &crate::operation::create_collaboration::builders::CreateCollaborationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_collaboration::CreateCollaborationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_collaboration::CreateCollaborationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_collaboration::CreateCollaboration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_collaboration::CreateCollaboration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_collaboration::CreateCollaborationOutput,
        crate::operation::create_collaboration::CreateCollaborationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `members`.
    ///
    /// To override the contents of this collection use [`set_members`](Self::set_members).
    ///
    /// <p>A list of initial members, not including the creator. This list is immutable.</p>
    pub fn members(mut self, input: crate::types::MemberSpecification) -> Self {
        self.inner = self.inner.members(input);
        self
    }
    /// <p>A list of initial members, not including the creator. This list is immutable.</p>
    pub fn set_members(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemberSpecification>>) -> Self {
        self.inner = self.inner.set_members(input);
        self
    }
    /// <p>A list of initial members, not including the creator. This list is immutable.</p>
    pub fn get_members(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemberSpecification>> {
        self.inner.get_members()
    }
    /// <p>The display name for a collaboration.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The display name for a collaboration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The display name for a collaboration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the collaboration provided by the collaboration owner.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `creatorMemberAbilities`.
    ///
    /// To override the contents of this collection use [`set_creator_member_abilities`](Self::set_creator_member_abilities).
    ///
    /// <p>The abilities granted to the collaboration creator.</p>
    pub fn creator_member_abilities(mut self, input: crate::types::MemberAbility) -> Self {
        self.inner = self.inner.creator_member_abilities(input);
        self
    }
    /// <p>The abilities granted to the collaboration creator.</p>
    pub fn set_creator_member_abilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>>) -> Self {
        self.inner = self.inner.set_creator_member_abilities(input);
        self
    }
    /// <p>The abilities granted to the collaboration creator.</p>
    pub fn get_creator_member_abilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>> {
        self.inner.get_creator_member_abilities()
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn creator_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.creator_display_name(input.into());
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn set_creator_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_creator_display_name(input);
        self
    }
    /// <p>The display name of the collaboration creator.</p>
    pub fn get_creator_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_creator_display_name()
    }
    /// <p>The settings for client-side encryption with Cryptographic Computing for Clean Rooms.</p>
    pub fn data_encryption_metadata(mut self, input: crate::types::DataEncryptionMetadata) -> Self {
        self.inner = self.inner.data_encryption_metadata(input);
        self
    }
    /// <p>The settings for client-side encryption with Cryptographic Computing for Clean Rooms.</p>
    pub fn set_data_encryption_metadata(mut self, input: ::std::option::Option<crate::types::DataEncryptionMetadata>) -> Self {
        self.inner = self.inner.set_data_encryption_metadata(input);
        self
    }
    /// <p>The settings for client-side encryption with Cryptographic Computing for Clean Rooms.</p>
    pub fn get_data_encryption_metadata(&self) -> &::std::option::Option<crate::types::DataEncryptionMetadata> {
        self.inner.get_data_encryption_metadata()
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn query_log_status(mut self, input: crate::types::CollaborationQueryLogStatus) -> Self {
        self.inner = self.inner.query_log_status(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn set_query_log_status(mut self, input: ::std::option::Option<crate::types::CollaborationQueryLogStatus>) -> Self {
        self.inner = self.inner.set_query_log_status(input);
        self
    }
    /// <p>An indicator as to whether query logging has been enabled or disabled for the collaboration.</p>
    pub fn get_query_log_status(&self) -> &::std::option::Option<crate::types::CollaborationQueryLogStatus> {
        self.inner.get_query_log_status()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The collaboration creator's payment responsibilities set by the collaboration creator.</p>
    /// <p>If the collaboration creator hasn't specified anyone as the member paying for query compute costs, then the member who can query is the default payer.</p>
    pub fn creator_payment_configuration(mut self, input: crate::types::PaymentConfiguration) -> Self {
        self.inner = self.inner.creator_payment_configuration(input);
        self
    }
    /// <p>The collaboration creator's payment responsibilities set by the collaboration creator.</p>
    /// <p>If the collaboration creator hasn't specified anyone as the member paying for query compute costs, then the member who can query is the default payer.</p>
    pub fn set_creator_payment_configuration(mut self, input: ::std::option::Option<crate::types::PaymentConfiguration>) -> Self {
        self.inner = self.inner.set_creator_payment_configuration(input);
        self
    }
    /// <p>The collaboration creator's payment responsibilities set by the collaboration creator.</p>
    /// <p>If the collaboration creator hasn't specified anyone as the member paying for query compute costs, then the member who can query is the default payer.</p>
    pub fn get_creator_payment_configuration(&self) -> &::std::option::Option<crate::types::PaymentConfiguration> {
        self.inner.get_creator_payment_configuration()
    }
}
