// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::accept_eulas::_accept_eulas_output::AcceptEulasOutputBuilder;

pub use crate::operation::accept_eulas::_accept_eulas_input::AcceptEulasInputBuilder;

/// Fluent builder constructing a request to `AcceptEulas`.
///
/// <p>Accept EULAs.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AcceptEulasFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::accept_eulas::builders::AcceptEulasInputBuilder,
}
impl AcceptEulasFluentBuilder {
    /// Creates a new `AcceptEulas`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::accept_eulas::AcceptEulas,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::accept_eulas::AcceptEulasError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::accept_eulas::AcceptEulasOutput,
        aws_smithy_http::result::SdkError<crate::operation::accept_eulas::AcceptEulasError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `eulaIds`.
    ///
    /// To override the contents of this collection use [`set_eula_ids`](Self::set_eula_ids).
    ///
    /// <p>The EULA ID.</p>
    pub fn eula_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.eula_ids(input.into());
        self
    }
    /// <p>The EULA ID.</p>
    pub fn set_eula_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_eula_ids(input);
        self
    }
    /// <p>The studio ID.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.studio_id(input.into());
        self
    }
    /// <p>The studio ID.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_studio_id(input);
        self
    }
}
