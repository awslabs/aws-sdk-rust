// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptEulasOutput {
    /// <p>A collection of EULA acceptances.</p>
    #[doc(hidden)]
    pub eula_acceptances: std::option::Option<std::vec::Vec<crate::types::EulaAcceptance>>,
    _request_id: Option<String>,
}
impl AcceptEulasOutput {
    /// <p>A collection of EULA acceptances.</p>
    pub fn eula_acceptances(&self) -> std::option::Option<&[crate::types::EulaAcceptance]> {
        self.eula_acceptances.as_deref()
    }
}
impl aws_http::request_id::RequestId for AcceptEulasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AcceptEulasOutput {
    /// Creates a new builder-style object to manufacture [`AcceptEulasOutput`](crate::operation::accept_eulas::AcceptEulasOutput).
    pub fn builder() -> crate::operation::accept_eulas::builders::AcceptEulasOutputBuilder {
        crate::operation::accept_eulas::builders::AcceptEulasOutputBuilder::default()
    }
}

/// A builder for [`AcceptEulasOutput`](crate::operation::accept_eulas::AcceptEulasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AcceptEulasOutputBuilder {
    pub(crate) eula_acceptances: std::option::Option<std::vec::Vec<crate::types::EulaAcceptance>>,
    _request_id: Option<String>,
}
impl AcceptEulasOutputBuilder {
    /// Appends an item to `eula_acceptances`.
    ///
    /// To override the contents of this collection use [`set_eula_acceptances`](Self::set_eula_acceptances).
    ///
    /// <p>A collection of EULA acceptances.</p>
    pub fn eula_acceptances(mut self, input: crate::types::EulaAcceptance) -> Self {
        let mut v = self.eula_acceptances.unwrap_or_default();
        v.push(input);
        self.eula_acceptances = Some(v);
        self
    }
    /// <p>A collection of EULA acceptances.</p>
    pub fn set_eula_acceptances(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EulaAcceptance>>,
    ) -> Self {
        self.eula_acceptances = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AcceptEulasOutput`](crate::operation::accept_eulas::AcceptEulasOutput).
    pub fn build(self) -> crate::operation::accept_eulas::AcceptEulasOutput {
        crate::operation::accept_eulas::AcceptEulasOutput {
            eula_acceptances: self.eula_acceptances,
            _request_id: self._request_id,
        }
    }
}
