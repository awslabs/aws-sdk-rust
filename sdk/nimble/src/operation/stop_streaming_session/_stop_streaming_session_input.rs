// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopStreamingSessionInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The streaming session ID for the <code>StopStreamingSessionRequest</code>.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The studioId for the StopStreamingSessionRequest.</p>
    pub studio_id: ::std::option::Option<::std::string::String>,
    /// <p>Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.</p>
    pub volume_retention_mode: ::std::option::Option<crate::types::VolumeRetentionMode>,
}
impl StopStreamingSessionInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The streaming session ID for the <code>StopStreamingSessionRequest</code>.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The studioId for the StopStreamingSessionRequest.</p>
    pub fn studio_id(&self) -> ::std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.</p>
    pub fn volume_retention_mode(&self) -> ::std::option::Option<&crate::types::VolumeRetentionMode> {
        self.volume_retention_mode.as_ref()
    }
}
impl StopStreamingSessionInput {
    /// Creates a new builder-style object to manufacture [`StopStreamingSessionInput`](crate::operation::stop_streaming_session::StopStreamingSessionInput).
    pub fn builder() -> crate::operation::stop_streaming_session::builders::StopStreamingSessionInputBuilder {
        crate::operation::stop_streaming_session::builders::StopStreamingSessionInputBuilder::default()
    }
}

/// A builder for [`StopStreamingSessionInput`](crate::operation::stop_streaming_session::StopStreamingSessionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopStreamingSessionInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) studio_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_retention_mode: ::std::option::Option<crate::types::VolumeRetentionMode>,
}
impl StopStreamingSessionInputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The streaming session ID for the <code>StopStreamingSessionRequest</code>.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The streaming session ID for the <code>StopStreamingSessionRequest</code>.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The streaming session ID for the <code>StopStreamingSessionRequest</code>.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The studioId for the StopStreamingSessionRequest.</p>
    /// This field is required.
    pub fn studio_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.studio_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The studioId for the StopStreamingSessionRequest.</p>
    pub fn set_studio_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// <p>The studioId for the StopStreamingSessionRequest.</p>
    pub fn get_studio_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.studio_id
    }
    /// <p>Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.</p>
    pub fn volume_retention_mode(mut self, input: crate::types::VolumeRetentionMode) -> Self {
        self.volume_retention_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.</p>
    pub fn set_volume_retention_mode(mut self, input: ::std::option::Option<crate::types::VolumeRetentionMode>) -> Self {
        self.volume_retention_mode = input;
        self
    }
    /// <p>Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.</p>
    pub fn get_volume_retention_mode(&self) -> &::std::option::Option<crate::types::VolumeRetentionMode> {
        &self.volume_retention_mode
    }
    /// Consumes the builder and constructs a [`StopStreamingSessionInput`](crate::operation::stop_streaming_session::StopStreamingSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::stop_streaming_session::StopStreamingSessionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::stop_streaming_session::StopStreamingSessionInput {
            client_token: self.client_token,
            session_id: self.session_id,
            studio_id: self.studio_id,
            volume_retention_mode: self.volume_retention_mode,
        })
    }
}
