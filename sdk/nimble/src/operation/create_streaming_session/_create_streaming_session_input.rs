// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamingSessionInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The EC2 Instance type used for the streaming session.</p>
    #[doc(hidden)]
    pub ec2_instance_type: std::option::Option<crate::types::StreamingInstanceType>,
    /// <p>The ID of the launch profile used to control access from the streaming session.</p>
    #[doc(hidden)]
    pub launch_profile_id: std::option::Option<std::string::String>,
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    #[doc(hidden)]
    pub owned_by: std::option::Option<std::string::String>,
    /// <p>The ID of the streaming image.</p>
    #[doc(hidden)]
    pub streaming_image_id: std::option::Option<std::string::String>,
    /// <p>The studio ID. </p>
    #[doc(hidden)]
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateStreamingSessionInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The EC2 Instance type used for the streaming session.</p>
    pub fn ec2_instance_type(&self) -> std::option::Option<&crate::types::StreamingInstanceType> {
        self.ec2_instance_type.as_ref()
    }
    /// <p>The ID of the launch profile used to control access from the streaming session.</p>
    pub fn launch_profile_id(&self) -> std::option::Option<&str> {
        self.launch_profile_id.as_deref()
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn owned_by(&self) -> std::option::Option<&str> {
        self.owned_by.as_deref()
    }
    /// <p>The ID of the streaming image.</p>
    pub fn streaming_image_id(&self) -> std::option::Option<&str> {
        self.streaming_image_id.as_deref()
    }
    /// <p>The studio ID. </p>
    pub fn studio_id(&self) -> std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateStreamingSessionInput {
    /// Creates a new builder-style object to manufacture [`CreateStreamingSessionInput`](crate::operation::create_streaming_session::CreateStreamingSessionInput).
    pub fn builder(
    ) -> crate::operation::create_streaming_session::builders::CreateStreamingSessionInputBuilder
    {
        crate::operation::create_streaming_session::builders::CreateStreamingSessionInputBuilder::default()
    }
}

/// A builder for [`CreateStreamingSessionInput`](crate::operation::create_streaming_session::CreateStreamingSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateStreamingSessionInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) ec2_instance_type: std::option::Option<crate::types::StreamingInstanceType>,
    pub(crate) launch_profile_id: std::option::Option<std::string::String>,
    pub(crate) owned_by: std::option::Option<std::string::String>,
    pub(crate) streaming_image_id: std::option::Option<std::string::String>,
    pub(crate) studio_id: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateStreamingSessionInputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The EC2 Instance type used for the streaming session.</p>
    pub fn ec2_instance_type(mut self, input: crate::types::StreamingInstanceType) -> Self {
        self.ec2_instance_type = Some(input);
        self
    }
    /// <p>The EC2 Instance type used for the streaming session.</p>
    pub fn set_ec2_instance_type(
        mut self,
        input: std::option::Option<crate::types::StreamingInstanceType>,
    ) -> Self {
        self.ec2_instance_type = input;
        self
    }
    /// <p>The ID of the launch profile used to control access from the streaming session.</p>
    pub fn launch_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_profile_id = Some(input.into());
        self
    }
    /// <p>The ID of the launch profile used to control access from the streaming session.</p>
    pub fn set_launch_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_profile_id = input;
        self
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn owned_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.owned_by = Some(input.into());
        self
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn set_owned_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owned_by = input;
        self
    }
    /// <p>The ID of the streaming image.</p>
    pub fn streaming_image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.streaming_image_id = Some(input.into());
        self
    }
    /// <p>The ID of the streaming image.</p>
    pub fn set_streaming_image_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.streaming_image_id = input;
        self
    }
    /// <p>The studio ID. </p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_id = Some(input.into());
        self
    }
    /// <p>The studio ID. </p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateStreamingSessionInput`](crate::operation::create_streaming_session::CreateStreamingSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_streaming_session::CreateStreamingSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_streaming_session::CreateStreamingSessionInput {
                client_token: self.client_token,
                ec2_instance_type: self.ec2_instance_type,
                launch_profile_id: self.launch_profile_id,
                owned_by: self.owned_by,
                streaming_image_id: self.streaming_image_id,
                studio_id: self.studio_id,
                tags: self.tags,
            },
        )
    }
}
