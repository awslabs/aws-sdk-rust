// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_studio_component::_create_studio_component_output::CreateStudioComponentOutputBuilder;

pub use crate::operation::create_studio_component::_create_studio_component_input::CreateStudioComponentInputBuilder;

impl crate::operation::create_studio_component::builders::CreateStudioComponentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_studio_component::CreateStudioComponentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_studio_component::CreateStudioComponentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_studio_component();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateStudioComponent`.
///
/// <p>Creates a studio component resource.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateStudioComponentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_studio_component::builders::CreateStudioComponentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_studio_component::CreateStudioComponentOutput,
        crate::operation::create_studio_component::CreateStudioComponentError,
    > for CreateStudioComponentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_studio_component::CreateStudioComponentOutput,
            crate::operation::create_studio_component::CreateStudioComponentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateStudioComponentFluentBuilder {
    /// Creates a new `CreateStudioComponent`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateStudioComponent as a reference.
    pub fn as_input(&self) -> &crate::operation::create_studio_component::builders::CreateStudioComponentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_studio_component::CreateStudioComponentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_studio_component::CreateStudioComponentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_studio_component::CreateStudioComponent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_studio_component::CreateStudioComponent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_studio_component::CreateStudioComponentOutput,
        crate::operation::create_studio_component::CreateStudioComponentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn configuration(mut self, input: crate::types::StudioComponentConfiguration) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::StudioComponentConfiguration>) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::StudioComponentConfiguration> {
        self.inner.get_configuration()
    }
    /// <p>The description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `ec2SecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_ec2_security_group_ids`](Self::set_ec2_security_group_ids).
    ///
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn ec2_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ec2_security_group_ids(input.into());
        self
    }
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn set_ec2_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_ec2_security_group_ids(input);
        self
    }
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn get_ec2_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_ec2_security_group_ids()
    }
    ///
    /// Appends an item to `initializationScripts`.
    ///
    /// To override the contents of this collection use [`set_initialization_scripts`](Self::set_initialization_scripts).
    ///
    /// <p>Initialization scripts for studio components.</p>
    pub fn initialization_scripts(mut self, input: crate::types::StudioComponentInitializationScript) -> Self {
        self.inner = self.inner.initialization_scripts(input);
        self
    }
    /// <p>Initialization scripts for studio components.</p>
    pub fn set_initialization_scripts(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>>,
    ) -> Self {
        self.inner = self.inner.set_initialization_scripts(input);
        self
    }
    /// <p>Initialization scripts for studio components.</p>
    pub fn get_initialization_scripts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>> {
        self.inner.get_initialization_scripts()
    }
    /// <p>The name for the studio component.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name for the studio component.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name for the studio component.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    ///
    /// Appends an item to `scriptParameters`.
    ///
    /// To override the contents of this collection use [`set_script_parameters`](Self::set_script_parameters).
    ///
    /// <p>Parameters for the studio component scripts.</p>
    pub fn script_parameters(mut self, input: crate::types::ScriptParameterKeyValue) -> Self {
        self.inner = self.inner.script_parameters(input);
        self
    }
    /// <p>Parameters for the studio component scripts.</p>
    pub fn set_script_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>>) -> Self {
        self.inner = self.inner.set_script_parameters(input);
        self
    }
    /// <p>Parameters for the studio component scripts.</p>
    pub fn get_script_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>> {
        self.inner.get_script_parameters()
    }
    /// <p>The studio ID.</p>
    pub fn studio_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.studio_id(input.into());
        self
    }
    /// <p>The studio ID.</p>
    pub fn set_studio_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_studio_id(input);
        self
    }
    /// <p>The studio ID.</p>
    pub fn get_studio_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_studio_id()
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn subtype(mut self, input: crate::types::StudioComponentSubtype) -> Self {
        self.inner = self.inner.subtype(input);
        self
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn set_subtype(mut self, input: ::std::option::Option<crate::types::StudioComponentSubtype>) -> Self {
        self.inner = self.inner.set_subtype(input);
        self
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn get_subtype(&self) -> &::std::option::Option<crate::types::StudioComponentSubtype> {
        self.inner.get_subtype()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The type of the studio component.</p>
    pub fn r#type(mut self, input: crate::types::StudioComponentType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the studio component.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::StudioComponentType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The type of the studio component.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::StudioComponentType> {
        self.inner.get_type()
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn secure_initialization_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.secure_initialization_role_arn(input.into());
        self
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn set_secure_initialization_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_secure_initialization_role_arn(input);
        self
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn get_secure_initialization_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_secure_initialization_role_arn()
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running.</p>
    pub fn runtime_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.runtime_role_arn(input.into());
        self
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running.</p>
    pub fn set_runtime_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_runtime_role_arn(input);
        self
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running.</p>
    pub fn get_runtime_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_runtime_role_arn()
    }
}
