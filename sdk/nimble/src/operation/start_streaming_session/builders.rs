// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_streaming_session::_start_streaming_session_output::StartStreamingSessionOutputBuilder;

pub use crate::operation::start_streaming_session::_start_streaming_session_input::StartStreamingSessionInputBuilder;

/// Fluent builder constructing a request to `StartStreamingSession`.
///
/// <p>Transitions sessions from the <code>STOPPED</code> state into the <code>READY</code> state. The <code>START_IN_PROGRESS</code> state is the intermediate state between the <code>STOPPED</code> and <code>READY</code> states.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartStreamingSessionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_streaming_session::builders::StartStreamingSessionInputBuilder,
}
impl StartStreamingSessionFluentBuilder {
    /// Creates a new `StartStreamingSession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_streaming_session::StartStreamingSession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_streaming_session::StartStreamingSessionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_streaming_session::StartStreamingSessionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_streaming_session::StartStreamingSessionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don’t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The streaming session ID for the <code>StartStreamingSessionRequest</code>.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The streaming session ID for the <code>StartStreamingSessionRequest</code>.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The studio ID for the StartStreamingSessionRequest.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.studio_id(input.into());
        self
    }
    /// <p>The studio ID for the StartStreamingSessionRequest.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_studio_id(input);
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_id(input.into());
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_id(input);
        self
    }
}
