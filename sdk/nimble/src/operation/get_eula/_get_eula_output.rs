// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEulaOutput {
    /// <p>The EULA.</p>
    #[doc(hidden)]
    pub eula: std::option::Option<crate::types::Eula>,
    _request_id: Option<String>,
}
impl GetEulaOutput {
    /// <p>The EULA.</p>
    pub fn eula(&self) -> std::option::Option<&crate::types::Eula> {
        self.eula.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEulaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEulaOutput {
    /// Creates a new builder-style object to manufacture [`GetEulaOutput`](crate::operation::get_eula::GetEulaOutput).
    pub fn builder() -> crate::operation::get_eula::builders::GetEulaOutputBuilder {
        crate::operation::get_eula::builders::GetEulaOutputBuilder::default()
    }
}

/// A builder for [`GetEulaOutput`](crate::operation::get_eula::GetEulaOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEulaOutputBuilder {
    pub(crate) eula: std::option::Option<crate::types::Eula>,
    _request_id: Option<String>,
}
impl GetEulaOutputBuilder {
    /// <p>The EULA.</p>
    pub fn eula(mut self, input: crate::types::Eula) -> Self {
        self.eula = Some(input);
        self
    }
    /// <p>The EULA.</p>
    pub fn set_eula(mut self, input: std::option::Option<crate::types::Eula>) -> Self {
        self.eula = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEulaOutput`](crate::operation::get_eula::GetEulaOutput).
    pub fn build(self) -> crate::operation::get_eula::GetEulaOutput {
        crate::operation::get_eula::GetEulaOutput {
            eula: self.eula,
            _request_id: self._request_id,
        }
    }
}
