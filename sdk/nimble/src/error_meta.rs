// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to perform this operation. Check your IAM policies, and ensure that you are using the correct access keys.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Another operation is in progress. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An internal error has occurred. Please retry your request.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>The specified resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Your current quota does not allow you to perform the request action. You can request increases for some quotas, and other quotas cannot be increased.</p>
    /// <p>Please use Amazon Web Services Service Quotas to request an increase. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request throughput limit was exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>One of the parameters in the request is invalid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::accept_eulas::AcceptEulasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::accept_eulas::AcceptEulasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_eulas::AcceptEulasError> for Error {
    fn from(err: crate::operation::accept_eulas::AcceptEulasError) -> Self {
        match err {
            crate::operation::accept_eulas::AcceptEulasError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::accept_eulas::AcceptEulasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::accept_eulas::AcceptEulasError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::accept_eulas::AcceptEulasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::accept_eulas::AcceptEulasError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::accept_eulas::AcceptEulasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::accept_eulas::AcceptEulasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::accept_eulas::AcceptEulasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_launch_profile::CreateLaunchProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_launch_profile::CreateLaunchProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_launch_profile::CreateLaunchProfileError> for Error {
    fn from(err: crate::operation::create_launch_profile::CreateLaunchProfileError) -> Self {
        match err {
            crate::operation::create_launch_profile::CreateLaunchProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_launch_profile::CreateLaunchProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_image::CreateStreamingImageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_image::CreateStreamingImageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_streaming_image::CreateStreamingImageError> for Error {
    fn from(err: crate::operation::create_streaming_image::CreateStreamingImageError) -> Self {
        match err {
            crate::operation::create_streaming_image::CreateStreamingImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_streaming_image::CreateStreamingImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_session::CreateStreamingSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_session::CreateStreamingSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_streaming_session::CreateStreamingSessionError> for Error {
    fn from(err: crate::operation::create_streaming_session::CreateStreamingSessionError) -> Self {
        match err {
            crate::operation::create_streaming_session::CreateStreamingSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_streaming_session::CreateStreamingSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError>
    for Error
{
    fn from(
        err: crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError,
    ) -> Self {
        match err {
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_streaming_session_stream::CreateStreamingSessionStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_studio::CreateStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_studio::CreateStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_studio::CreateStudioError> for Error {
    fn from(err: crate::operation::create_studio::CreateStudioError) -> Self {
        match err {
            crate::operation::create_studio::CreateStudioError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_studio::CreateStudioError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_studio::CreateStudioError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::create_studio::CreateStudioError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_studio::CreateStudioError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_studio::CreateStudioError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_studio::CreateStudioError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_studio::CreateStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_studio_component::CreateStudioComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_studio_component::CreateStudioComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_studio_component::CreateStudioComponentError> for Error {
    fn from(err: crate::operation::create_studio_component::CreateStudioComponentError) -> Self {
        match err {
            crate::operation::create_studio_component::CreateStudioComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_studio_component::CreateStudioComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_profile::DeleteLaunchProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_profile::DeleteLaunchProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_launch_profile::DeleteLaunchProfileError> for Error {
    fn from(err: crate::operation::delete_launch_profile::DeleteLaunchProfileError) -> Self {
        match err {
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_launch_profile::DeleteLaunchProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError>
    for Error
{
    fn from(
        err: crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError,
    ) -> Self {
        match err {
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_launch_profile_member::DeleteLaunchProfileMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_streaming_image::DeleteStreamingImageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_streaming_image::DeleteStreamingImageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_streaming_image::DeleteStreamingImageError> for Error {
    fn from(err: crate::operation::delete_streaming_image::DeleteStreamingImageError) -> Self {
        match err {
            crate::operation::delete_streaming_image::DeleteStreamingImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_streaming_image::DeleteStreamingImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_streaming_session::DeleteStreamingSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_streaming_session::DeleteStreamingSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_streaming_session::DeleteStreamingSessionError> for Error {
    fn from(err: crate::operation::delete_streaming_session::DeleteStreamingSessionError) -> Self {
        match err {
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_streaming_session::DeleteStreamingSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_studio::DeleteStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio::DeleteStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio::DeleteStudioError> for Error {
    fn from(err: crate::operation::delete_studio::DeleteStudioError) -> Self {
        match err {
            crate::operation::delete_studio::DeleteStudioError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::delete_studio::DeleteStudioError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_studio::DeleteStudioError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_studio::DeleteStudioError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_studio::DeleteStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_component::DeleteStudioComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_component::DeleteStudioComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio_component::DeleteStudioComponentError> for Error {
    fn from(err: crate::operation::delete_studio_component::DeleteStudioComponentError) -> Self {
        match err {
            crate::operation::delete_studio_component::DeleteStudioComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_studio_component::DeleteStudioComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_member::DeleteStudioMemberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_studio_member::DeleteStudioMemberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_studio_member::DeleteStudioMemberError> for Error {
    fn from(err: crate::operation::delete_studio_member::DeleteStudioMemberError) -> Self {
        match err {
            crate::operation::delete_studio_member::DeleteStudioMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_studio_member::DeleteStudioMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_eula::GetEulaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_eula::GetEulaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_eula::GetEulaError> for Error {
    fn from(err: crate::operation::get_eula::GetEulaError) -> Self {
        match err {
            crate::operation::get_eula::GetEulaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_eula::GetEulaError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_eula::GetEulaError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_eula::GetEulaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_eula::GetEulaError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_eula::GetEulaError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_eula::GetEulaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_eula::GetEulaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile::GetLaunchProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile::GetLaunchProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_launch_profile::GetLaunchProfileError> for Error {
    fn from(err: crate::operation::get_launch_profile::GetLaunchProfileError) -> Self {
        match err {
            crate::operation::get_launch_profile::GetLaunchProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_launch_profile::GetLaunchProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError> for Error {
    fn from(
        err: crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError,
    ) -> Self {
        match err {
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_launch_profile_details::GetLaunchProfileDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError>
    for Error
{
    fn from(
        err: crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError,
    ) -> Self {
        match err {
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_launch_profile_member::GetLaunchProfileMemberError> for Error {
    fn from(err: crate::operation::get_launch_profile_member::GetLaunchProfileMemberError) -> Self {
        match err {
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_launch_profile_member::GetLaunchProfileMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_image::GetStreamingImageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_image::GetStreamingImageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_streaming_image::GetStreamingImageError> for Error {
    fn from(err: crate::operation::get_streaming_image::GetStreamingImageError) -> Self {
        match err {
            crate::operation::get_streaming_image::GetStreamingImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_streaming_image::GetStreamingImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session::GetStreamingSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session::GetStreamingSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_streaming_session::GetStreamingSessionError> for Error {
    fn from(err: crate::operation::get_streaming_session::GetStreamingSessionError) -> Self {
        match err {
            crate::operation::get_streaming_session::GetStreamingSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_streaming_session::GetStreamingSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError>
    for Error
{
    fn from(
        err: crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError,
    ) -> Self {
        match err {
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_streaming_session_backup::GetStreamingSessionBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError>
    for Error
{
    fn from(
        err: crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError,
    ) -> Self {
        match err {
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_streaming_session_stream::GetStreamingSessionStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_studio::GetStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_studio::GetStudioError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_studio::GetStudioError> for Error {
    fn from(err: crate::operation::get_studio::GetStudioError) -> Self {
        match err {
            crate::operation::get_studio::GetStudioError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_studio::GetStudioError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_studio::GetStudioError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_studio::GetStudioError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_studio::GetStudioError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_studio::GetStudioError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_studio::GetStudioError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_studio::GetStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_studio_component::GetStudioComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_studio_component::GetStudioComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_studio_component::GetStudioComponentError> for Error {
    fn from(err: crate::operation::get_studio_component::GetStudioComponentError) -> Self {
        match err {
            crate::operation::get_studio_component::GetStudioComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_studio_component::GetStudioComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_studio_member::GetStudioMemberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_studio_member::GetStudioMemberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_studio_member::GetStudioMemberError> for Error {
    fn from(err: crate::operation::get_studio_member::GetStudioMemberError) -> Self {
        match err {
            crate::operation::get_studio_member::GetStudioMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_studio_member::GetStudioMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_eula_acceptances::ListEulaAcceptancesError> for Error {
    fn from(err: crate::operation::list_eula_acceptances::ListEulaAcceptancesError) -> Self {
        match err {
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_eula_acceptances::ListEulaAcceptancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_eulas::ListEulasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_eulas::ListEulasError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_eulas::ListEulasError> for Error {
    fn from(err: crate::operation::list_eulas::ListEulasError) -> Self {
        match err {
            crate::operation::list_eulas::ListEulasError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_eulas::ListEulasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_eulas::ListEulasError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_eulas::ListEulasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_eulas::ListEulasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_eulas::ListEulasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_eulas::ListEulasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_eulas::ListEulasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_launch_profile_members::ListLaunchProfileMembersError> for Error {
    fn from(
        err: crate::operation::list_launch_profile_members::ListLaunchProfileMembersError,
    ) -> Self {
        match err {
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_launch_profile_members::ListLaunchProfileMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_launch_profiles::ListLaunchProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_launch_profiles::ListLaunchProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_launch_profiles::ListLaunchProfilesError> for Error {
    fn from(err: crate::operation::list_launch_profiles::ListLaunchProfilesError) -> Self {
        match err {
            crate::operation::list_launch_profiles::ListLaunchProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_launch_profiles::ListLaunchProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_images::ListStreamingImagesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_images::ListStreamingImagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_streaming_images::ListStreamingImagesError> for Error {
    fn from(err: crate::operation::list_streaming_images::ListStreamingImagesError) -> Self {
        match err {
            crate::operation::list_streaming_images::ListStreamingImagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_streaming_images::ListStreamingImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError>
    for Error
{
    fn from(
        err: crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError,
    ) -> Self {
        match err {
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_sessions::ListStreamingSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_streaming_sessions::ListStreamingSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_streaming_sessions::ListStreamingSessionsError> for Error {
    fn from(err: crate::operation::list_streaming_sessions::ListStreamingSessionsError) -> Self {
        match err {
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_streaming_sessions::ListStreamingSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_studio_components::ListStudioComponentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_studio_components::ListStudioComponentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studio_components::ListStudioComponentsError> for Error {
    fn from(err: crate::operation::list_studio_components::ListStudioComponentsError) -> Self {
        match err {
            crate::operation::list_studio_components::ListStudioComponentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_studio_components::ListStudioComponentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_studio_members::ListStudioMembersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_studio_members::ListStudioMembersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studio_members::ListStudioMembersError> for Error {
    fn from(err: crate::operation::list_studio_members::ListStudioMembersError) -> Self {
        match err {
            crate::operation::list_studio_members::ListStudioMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_studio_members::ListStudioMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_studios::ListStudiosError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_studios::ListStudiosError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_studios::ListStudiosError> for Error {
    fn from(err: crate::operation::list_studios::ListStudiosError) -> Self {
        match err {
            crate::operation::list_studios::ListStudiosError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_studios::ListStudiosError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_studios::ListStudiosError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::list_studios::ListStudiosError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_studios::ListStudiosError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_studios::ListStudiosError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_studios::ListStudiosError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_studios::ListStudiosError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_launch_profile_members::PutLaunchProfileMembersError> for Error {
    fn from(
        err: crate::operation::put_launch_profile_members::PutLaunchProfileMembersError,
    ) -> Self {
        match err {
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_launch_profile_members::PutLaunchProfileMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_studio_members::PutStudioMembersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_studio_members::PutStudioMembersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_studio_members::PutStudioMembersError> for Error {
    fn from(err: crate::operation::put_studio_members::PutStudioMembersError) -> Self {
        match err {
            crate::operation::put_studio_members::PutStudioMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_studio_members::PutStudioMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_streaming_session::StartStreamingSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_streaming_session::StartStreamingSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_streaming_session::StartStreamingSessionError> for Error {
    fn from(err: crate::operation::start_streaming_session::StartStreamingSessionError) -> Self {
        match err {
            crate::operation::start_streaming_session::StartStreamingSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_streaming_session::StartStreamingSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError> for Error {
    fn from(err: crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError) -> Self {
        match err {
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_studio_sso_configuration_repair::StartStudioSSOConfigurationRepairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_streaming_session::StopStreamingSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_streaming_session::StopStreamingSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_streaming_session::StopStreamingSessionError> for Error {
    fn from(err: crate::operation::stop_streaming_session::StopStreamingSessionError) -> Self {
        match err {
            crate::operation::stop_streaming_session::StopStreamingSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_streaming_session::StopStreamingSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_launch_profile::UpdateLaunchProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_launch_profile::UpdateLaunchProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_launch_profile::UpdateLaunchProfileError> for Error {
    fn from(err: crate::operation::update_launch_profile::UpdateLaunchProfileError) -> Self {
        match err {
            crate::operation::update_launch_profile::UpdateLaunchProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_launch_profile::UpdateLaunchProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError>
    for Error
{
    fn from(
        err: crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError,
    ) -> Self {
        match err {
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_launch_profile_member::UpdateLaunchProfileMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_streaming_image::UpdateStreamingImageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_streaming_image::UpdateStreamingImageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_streaming_image::UpdateStreamingImageError> for Error {
    fn from(err: crate::operation::update_streaming_image::UpdateStreamingImageError) -> Self {
        match err {
            crate::operation::update_streaming_image::UpdateStreamingImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_streaming_image::UpdateStreamingImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_studio::UpdateStudioError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_studio::UpdateStudioError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_studio::UpdateStudioError> for Error {
    fn from(err: crate::operation::update_studio::UpdateStudioError) -> Self {
        match err {
            crate::operation::update_studio::UpdateStudioError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::update_studio::UpdateStudioError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_studio::UpdateStudioError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_studio::UpdateStudioError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_studio::UpdateStudioError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_studio_component::UpdateStudioComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_studio_component::UpdateStudioComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_studio_component::UpdateStudioComponentError> for Error {
    fn from(err: crate::operation::update_studio_component::UpdateStudioComponentError) -> Self {
        match err {
            crate::operation::update_studio_component::UpdateStudioComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_studio_component::UpdateStudioComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
