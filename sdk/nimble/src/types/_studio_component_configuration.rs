// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the studio component, based on component type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum StudioComponentConfiguration {
    /// <p>The configuration for a Directory Service for Microsoft Active Directory studio resource.</p>
    ActiveDirectoryConfiguration(crate::types::ActiveDirectoryConfiguration),
    /// <p>The configuration for a render farm that is associated with a studio resource.</p>
    ComputeFarmConfiguration(crate::types::ComputeFarmConfiguration),
    /// <p>The configuration for a license service that is associated with a studio resource.</p>
    LicenseServiceConfiguration(crate::types::LicenseServiceConfiguration),
    /// <p>The configuration for a shared file storage system that is associated with a studio resource.</p>
    SharedFileSystemConfiguration(crate::types::SharedFileSystemConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl StudioComponentConfiguration {
    /// Tries to convert the enum instance into [`ActiveDirectoryConfiguration`](crate::types::StudioComponentConfiguration::ActiveDirectoryConfiguration), extracting the inner [`ActiveDirectoryConfiguration`](crate::types::ActiveDirectoryConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_active_directory_configuration(
        &self,
    ) -> std::result::Result<&crate::types::ActiveDirectoryConfiguration, &Self> {
        if let StudioComponentConfiguration::ActiveDirectoryConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ActiveDirectoryConfiguration`](crate::types::StudioComponentConfiguration::ActiveDirectoryConfiguration).
    pub fn is_active_directory_configuration(&self) -> bool {
        self.as_active_directory_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`ComputeFarmConfiguration`](crate::types::StudioComponentConfiguration::ComputeFarmConfiguration), extracting the inner [`ComputeFarmConfiguration`](crate::types::ComputeFarmConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_compute_farm_configuration(
        &self,
    ) -> std::result::Result<&crate::types::ComputeFarmConfiguration, &Self> {
        if let StudioComponentConfiguration::ComputeFarmConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ComputeFarmConfiguration`](crate::types::StudioComponentConfiguration::ComputeFarmConfiguration).
    pub fn is_compute_farm_configuration(&self) -> bool {
        self.as_compute_farm_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`LicenseServiceConfiguration`](crate::types::StudioComponentConfiguration::LicenseServiceConfiguration), extracting the inner [`LicenseServiceConfiguration`](crate::types::LicenseServiceConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_license_service_configuration(
        &self,
    ) -> std::result::Result<&crate::types::LicenseServiceConfiguration, &Self> {
        if let StudioComponentConfiguration::LicenseServiceConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`LicenseServiceConfiguration`](crate::types::StudioComponentConfiguration::LicenseServiceConfiguration).
    pub fn is_license_service_configuration(&self) -> bool {
        self.as_license_service_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`SharedFileSystemConfiguration`](crate::types::StudioComponentConfiguration::SharedFileSystemConfiguration), extracting the inner [`SharedFileSystemConfiguration`](crate::types::SharedFileSystemConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_shared_file_system_configuration(
        &self,
    ) -> std::result::Result<&crate::types::SharedFileSystemConfiguration, &Self> {
        if let StudioComponentConfiguration::SharedFileSystemConfiguration(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`SharedFileSystemConfiguration`](crate::types::StudioComponentConfiguration::SharedFileSystemConfiguration).
    pub fn is_shared_file_system_configuration(&self) -> bool {
        self.as_shared_file_system_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
