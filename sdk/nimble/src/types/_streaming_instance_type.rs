// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `StreamingInstanceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let streaminginstancetype = unimplemented!();
/// match streaminginstancetype {
///     StreamingInstanceType::G34xlarge => { /* ... */ },
///     StreamingInstanceType::G3sXlarge => { /* ... */ },
///     StreamingInstanceType::G4dn12xlarge => { /* ... */ },
///     StreamingInstanceType::G4dn16xlarge => { /* ... */ },
///     StreamingInstanceType::G4dn2xlarge => { /* ... */ },
///     StreamingInstanceType::G4dn4xlarge => { /* ... */ },
///     StreamingInstanceType::G4dn8xlarge => { /* ... */ },
///     StreamingInstanceType::G4dnXlarge => { /* ... */ },
///     StreamingInstanceType::G516xlarge => { /* ... */ },
///     StreamingInstanceType::G52xlarge => { /* ... */ },
///     StreamingInstanceType::G54xlarge => { /* ... */ },
///     StreamingInstanceType::G58xlarge => { /* ... */ },
///     StreamingInstanceType::G5Xlarge => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `streaminginstancetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `StreamingInstanceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `StreamingInstanceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `StreamingInstanceType::NewFeature` is defined.
/// Specifically, when `streaminginstancetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `StreamingInstanceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum StreamingInstanceType {
    #[allow(missing_docs)] // documentation missing in model
    G34xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G3sXlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dn12xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dn16xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dn2xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dn4xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dn8xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G4dnXlarge,
    #[allow(missing_docs)] // documentation missing in model
    G516xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G52xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G54xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G58xlarge,
    #[allow(missing_docs)] // documentation missing in model
    G5Xlarge,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for StreamingInstanceType {
    fn from(s: &str) -> Self {
        match s {
            "g3.4xlarge" => StreamingInstanceType::G34xlarge,
            "g3s.xlarge" => StreamingInstanceType::G3sXlarge,
            "g4dn.12xlarge" => StreamingInstanceType::G4dn12xlarge,
            "g4dn.16xlarge" => StreamingInstanceType::G4dn16xlarge,
            "g4dn.2xlarge" => StreamingInstanceType::G4dn2xlarge,
            "g4dn.4xlarge" => StreamingInstanceType::G4dn4xlarge,
            "g4dn.8xlarge" => StreamingInstanceType::G4dn8xlarge,
            "g4dn.xlarge" => StreamingInstanceType::G4dnXlarge,
            "g5.16xlarge" => StreamingInstanceType::G516xlarge,
            "g5.2xlarge" => StreamingInstanceType::G52xlarge,
            "g5.4xlarge" => StreamingInstanceType::G54xlarge,
            "g5.8xlarge" => StreamingInstanceType::G58xlarge,
            "g5.xlarge" => StreamingInstanceType::G5Xlarge,
            other => StreamingInstanceType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for StreamingInstanceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(StreamingInstanceType::from(s))
    }
}
impl StreamingInstanceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            StreamingInstanceType::G34xlarge => "g3.4xlarge",
            StreamingInstanceType::G3sXlarge => "g3s.xlarge",
            StreamingInstanceType::G4dn12xlarge => "g4dn.12xlarge",
            StreamingInstanceType::G4dn16xlarge => "g4dn.16xlarge",
            StreamingInstanceType::G4dn2xlarge => "g4dn.2xlarge",
            StreamingInstanceType::G4dn4xlarge => "g4dn.4xlarge",
            StreamingInstanceType::G4dn8xlarge => "g4dn.8xlarge",
            StreamingInstanceType::G4dnXlarge => "g4dn.xlarge",
            StreamingInstanceType::G516xlarge => "g5.16xlarge",
            StreamingInstanceType::G52xlarge => "g5.2xlarge",
            StreamingInstanceType::G54xlarge => "g5.4xlarge",
            StreamingInstanceType::G58xlarge => "g5.8xlarge",
            StreamingInstanceType::G5Xlarge => "g5.xlarge",
            StreamingInstanceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "g3.4xlarge",
            "g3s.xlarge",
            "g4dn.12xlarge",
            "g4dn.16xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g4dn.8xlarge",
            "g4dn.xlarge",
            "g5.16xlarge",
            "g5.2xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "g5.xlarge",
        ]
    }
}
impl AsRef<str> for StreamingInstanceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
