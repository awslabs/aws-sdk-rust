// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a streaming image resource.</p>
/// <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p>
/// <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p>
/// <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StreamingImage {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable description of the streaming image.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of an EC2 machine image with which to create the streaming image.</p>
    pub ec2_image_id: ::std::option::Option<::std::string::String>,
    /// <p>The encryption configuration.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::StreamingImageEncryptionConfiguration>,
    /// <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
    pub eula_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A friendly name for a streaming image resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The owner of the streaming image, either the <code>studioId</code> that contains the streaming image, or <code>amazon</code> for images that are provided by Amazon Nimble Studio.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>The platform of the streaming image, either Windows or Linux.</p>
    pub platform: ::std::option::Option<::std::string::String>,
    /// <p>The current state.</p>
    pub state: ::std::option::Option<crate::types::StreamingImageState>,
    /// <p>The status code.</p>
    pub status_code: ::std::option::Option<crate::types::StreamingImageStatusCode>,
    /// <p>The status message for the streaming image.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the streaming image.</p>
    pub streaming_image_id: ::std::option::Option<::std::string::String>,
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StreamingImage {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A human-readable description of the streaming image.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of an EC2 machine image with which to create the streaming image.</p>
    pub fn ec2_image_id(&self) -> ::std::option::Option<&str> {
        self.ec2_image_id.as_deref()
    }
    /// <p>The encryption configuration.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::StreamingImageEncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.eula_ids.is_none()`.
    pub fn eula_ids(&self) -> &[::std::string::String] {
        self.eula_ids.as_deref().unwrap_or_default()
    }
    /// <p>A friendly name for a streaming image resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The owner of the streaming image, either the <code>studioId</code> that contains the streaming image, or <code>amazon</code> for images that are provided by Amazon Nimble Studio.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The platform of the streaming image, either Windows or Linux.</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The current state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::StreamingImageState> {
        self.state.as_ref()
    }
    /// <p>The status code.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::StreamingImageStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>The status message for the streaming image.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The ID of the streaming image.</p>
    pub fn streaming_image_id(&self) -> ::std::option::Option<&str> {
        self.streaming_image_id.as_deref()
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for StreamingImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingImage");
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("ec2_image_id", &self.ec2_image_id);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.field("eula_ids", &self.eula_ids);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owner", &self.owner);
        formatter.field("platform", &self.platform);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("streaming_image_id", &self.streaming_image_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl StreamingImage {
    /// Creates a new builder-style object to manufacture [`StreamingImage`](crate::types::StreamingImage).
    pub fn builder() -> crate::types::builders::StreamingImageBuilder {
        crate::types::builders::StreamingImageBuilder::default()
    }
}

/// A builder for [`StreamingImage`](crate::types::StreamingImage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StreamingImageBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_image_id: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::StreamingImageEncryptionConfiguration>,
    pub(crate) eula_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::StreamingImageState>,
    pub(crate) status_code: ::std::option::Option<crate::types::StreamingImageStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) streaming_image_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StreamingImageBuilder {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A human-readable description of the streaming image.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable description of the streaming image.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A human-readable description of the streaming image.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of an EC2 machine image with which to create the streaming image.</p>
    pub fn ec2_image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of an EC2 machine image with which to create the streaming image.</p>
    pub fn set_ec2_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_image_id = input;
        self
    }
    /// <p>The ID of an EC2 machine image with which to create the streaming image.</p>
    pub fn get_ec2_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_image_id
    }
    /// <p>The encryption configuration.</p>
    pub fn encryption_configuration(mut self, input: crate::types::StreamingImageEncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption configuration.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::StreamingImageEncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>The encryption configuration.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::StreamingImageEncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Appends an item to `eula_ids`.
    ///
    /// To override the contents of this collection use [`set_eula_ids`](Self::set_eula_ids).
    ///
    /// <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
    pub fn eula_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.eula_ids.unwrap_or_default();
        v.push(input.into());
        self.eula_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
    pub fn set_eula_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.eula_ids = input;
        self
    }
    /// <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
    pub fn get_eula_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.eula_ids
    }
    /// <p>A friendly name for a streaming image resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for a streaming image resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A friendly name for a streaming image resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The owner of the streaming image, either the <code>studioId</code> that contains the streaming image, or <code>amazon</code> for images that are provided by Amazon Nimble Studio.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the streaming image, either the <code>studioId</code> that contains the streaming image, or <code>amazon</code> for images that are provided by Amazon Nimble Studio.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the streaming image, either the <code>studioId</code> that contains the streaming image, or <code>amazon</code> for images that are provided by Amazon Nimble Studio.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The platform of the streaming image, either Windows or Linux.</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform of the streaming image, either Windows or Linux.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform of the streaming image, either Windows or Linux.</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// <p>The current state.</p>
    pub fn state(mut self, input: crate::types::StreamingImageState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::StreamingImageState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::StreamingImageState> {
        &self.state
    }
    /// <p>The status code.</p>
    pub fn status_code(mut self, input: crate::types::StreamingImageStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status code.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::StreamingImageStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status code.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::StreamingImageStatusCode> {
        &self.status_code
    }
    /// <p>The status message for the streaming image.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the streaming image.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message for the streaming image.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The ID of the streaming image.</p>
    pub fn streaming_image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.streaming_image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the streaming image.</p>
    pub fn set_streaming_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.streaming_image_id = input;
        self
    }
    /// <p>The ID of the streaming image.</p>
    pub fn get_streaming_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.streaming_image_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StreamingImage`](crate::types::StreamingImage).
    pub fn build(self) -> crate::types::StreamingImage {
        crate::types::StreamingImage {
            arn: self.arn,
            description: self.description,
            ec2_image_id: self.ec2_image_id,
            encryption_configuration: self.encryption_configuration,
            eula_ids: self.eula_ids,
            name: self.name,
            owner: self.owner,
            platform: self.platform,
            state: self.state,
            status_code: self.status_code,
            status_message: self.status_message,
            streaming_image_id: self.streaming_image_id,
            tags: self.tags,
        }
    }
}
impl ::std::fmt::Debug for StreamingImageBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingImageBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("ec2_image_id", &self.ec2_image_id);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.field("eula_ids", &self.eula_ids);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("owner", &self.owner);
        formatter.field("platform", &self.platform);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("streaming_image_id", &self.streaming_image_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
