// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The launch profile validation result.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidationResult {
    /// <p>The type of the validation result.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::LaunchProfileValidationType>,
    /// <p>The current state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::LaunchProfileValidationState>,
    /// <p>The status code. This will contain the failure reason if the state is <code>VALIDATION_FAILED</code>.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<crate::types::LaunchProfileValidationStatusCode>,
    /// <p>The status message for the validation result.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl ValidationResult {
    /// <p>The type of the validation result.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::LaunchProfileValidationType> {
        self.r#type.as_ref()
    }
    /// <p>The current state.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::LaunchProfileValidationState> {
        self.state.as_ref()
    }
    /// <p>The status code. This will contain the failure reason if the state is <code>VALIDATION_FAILED</code>.</p>
    pub fn status_code(
        &self,
    ) -> std::option::Option<&crate::types::LaunchProfileValidationStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>The status message for the validation result.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl ValidationResult {
    /// Creates a new builder-style object to manufacture [`ValidationResult`](crate::types::ValidationResult).
    pub fn builder() -> crate::types::builders::ValidationResultBuilder {
        crate::types::builders::ValidationResultBuilder::default()
    }
}

/// A builder for [`ValidationResult`](crate::types::ValidationResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ValidationResultBuilder {
    pub(crate) r#type: std::option::Option<crate::types::LaunchProfileValidationType>,
    pub(crate) state: std::option::Option<crate::types::LaunchProfileValidationState>,
    pub(crate) status_code: std::option::Option<crate::types::LaunchProfileValidationStatusCode>,
    pub(crate) status_message: std::option::Option<std::string::String>,
}
impl ValidationResultBuilder {
    /// <p>The type of the validation result.</p>
    pub fn r#type(mut self, input: crate::types::LaunchProfileValidationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the validation result.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::LaunchProfileValidationType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The current state.</p>
    pub fn state(mut self, input: crate::types::LaunchProfileValidationState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::LaunchProfileValidationState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The status code. This will contain the failure reason if the state is <code>VALIDATION_FAILED</code>.</p>
    pub fn status_code(mut self, input: crate::types::LaunchProfileValidationStatusCode) -> Self {
        self.status_code = Some(input);
        self
    }
    /// <p>The status code. This will contain the failure reason if the state is <code>VALIDATION_FAILED</code>.</p>
    pub fn set_status_code(
        mut self,
        input: std::option::Option<crate::types::LaunchProfileValidationStatusCode>,
    ) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status message for the validation result.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message for the validation result.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ValidationResult`](crate::types::ValidationResult).
    pub fn build(self) -> crate::types::ValidationResult {
        crate::types::ValidationResult {
            r#type: self.r#type,
            state: self.state,
            status_code: self.status_code,
            status_message: self.status_message,
        }
    }
}
