// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom volume configuration for the root volumes that are attached to streaming sessions.</p>
/// <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is <code>ACTIVATED</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeConfiguration {
    /// <p>The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i32>,
    /// <p>The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.</p>
    #[doc(hidden)]
    pub throughput: std::option::Option<i32>,
    /// <p>The number of I/O operations per second for the root volume that is attached to streaming session.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
}
impl VolumeConfiguration {
    /// <p>The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.</p>
    pub fn size(&self) -> std::option::Option<i32> {
        self.size
    }
    /// <p>The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.</p>
    pub fn throughput(&self) -> std::option::Option<i32> {
        self.throughput
    }
    /// <p>The number of I/O operations per second for the root volume that is attached to streaming session.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
}
impl VolumeConfiguration {
    /// Creates a new builder-style object to manufacture [`VolumeConfiguration`](crate::types::VolumeConfiguration).
    pub fn builder() -> crate::types::builders::VolumeConfigurationBuilder {
        crate::types::builders::VolumeConfigurationBuilder::default()
    }
}

/// A builder for [`VolumeConfiguration`](crate::types::VolumeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeConfigurationBuilder {
    pub(crate) size: std::option::Option<i32>,
    pub(crate) throughput: std::option::Option<i32>,
    pub(crate) iops: std::option::Option<i32>,
}
impl VolumeConfigurationBuilder {
    /// <p>The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.</p>
    pub fn set_size(mut self, input: std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.</p>
    pub fn throughput(mut self, input: i32) -> Self {
        self.throughput = Some(input);
        self
    }
    /// <p>The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.</p>
    pub fn set_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.throughput = input;
        self
    }
    /// <p>The number of I/O operations per second for the root volume that is attached to streaming session.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The number of I/O operations per second for the root volume that is attached to streaming session.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeConfiguration`](crate::types::VolumeConfiguration).
    pub fn build(self) -> crate::types::VolumeConfiguration {
        crate::types::VolumeConfiguration {
            size: self.size,
            throughput: self.throughput,
            iops: self.iops,
        }
    }
}
