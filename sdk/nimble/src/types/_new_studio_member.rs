// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A new studio user's membership.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NewStudioMember {
    /// <p>The persona.</p>
    #[doc(hidden)]
    pub persona: std::option::Option<crate::types::StudioPersona>,
    /// <p>The principal ID.</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
}
impl NewStudioMember {
    /// <p>The persona.</p>
    pub fn persona(&self) -> std::option::Option<&crate::types::StudioPersona> {
        self.persona.as_ref()
    }
    /// <p>The principal ID.</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
}
impl NewStudioMember {
    /// Creates a new builder-style object to manufacture [`NewStudioMember`](crate::types::NewStudioMember).
    pub fn builder() -> crate::types::builders::NewStudioMemberBuilder {
        crate::types::builders::NewStudioMemberBuilder::default()
    }
}

/// A builder for [`NewStudioMember`](crate::types::NewStudioMember).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NewStudioMemberBuilder {
    pub(crate) persona: std::option::Option<crate::types::StudioPersona>,
    pub(crate) principal_id: std::option::Option<std::string::String>,
}
impl NewStudioMemberBuilder {
    /// <p>The persona.</p>
    pub fn persona(mut self, input: crate::types::StudioPersona) -> Self {
        self.persona = Some(input);
        self
    }
    /// <p>The persona.</p>
    pub fn set_persona(mut self, input: std::option::Option<crate::types::StudioPersona>) -> Self {
        self.persona = input;
        self
    }
    /// <p>The principal ID.</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The principal ID.</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// Consumes the builder and constructs a [`NewStudioMember`](crate::types::NewStudioMember).
    pub fn build(self) -> crate::types::NewStudioMember {
        crate::types::NewStudioMember {
            persona: self.persona,
            principal_id: self.principal_id,
        }
    }
}
