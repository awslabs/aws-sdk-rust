// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A new member that is added to a launch profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NewLaunchProfileMember {
    /// <p>The persona.</p>
    pub persona: crate::types::LaunchProfilePersona,
    /// <p>The principal ID.</p>
    pub principal_id: ::std::string::String,
}
impl NewLaunchProfileMember {
    /// <p>The persona.</p>
    pub fn persona(&self) -> &crate::types::LaunchProfilePersona {
        &self.persona
    }
    /// <p>The principal ID.</p>
    pub fn principal_id(&self) -> &str {
        use std::ops::Deref;
        self.principal_id.deref()
    }
}
impl NewLaunchProfileMember {
    /// Creates a new builder-style object to manufacture [`NewLaunchProfileMember`](crate::types::NewLaunchProfileMember).
    pub fn builder() -> crate::types::builders::NewLaunchProfileMemberBuilder {
        crate::types::builders::NewLaunchProfileMemberBuilder::default()
    }
}

/// A builder for [`NewLaunchProfileMember`](crate::types::NewLaunchProfileMember).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NewLaunchProfileMemberBuilder {
    pub(crate) persona: ::std::option::Option<crate::types::LaunchProfilePersona>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
}
impl NewLaunchProfileMemberBuilder {
    /// <p>The persona.</p>
    /// This field is required.
    pub fn persona(mut self, input: crate::types::LaunchProfilePersona) -> Self {
        self.persona = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persona.</p>
    pub fn set_persona(mut self, input: ::std::option::Option<crate::types::LaunchProfilePersona>) -> Self {
        self.persona = input;
        self
    }
    /// <p>The persona.</p>
    pub fn get_persona(&self) -> &::std::option::Option<crate::types::LaunchProfilePersona> {
        &self.persona
    }
    /// <p>The principal ID.</p>
    /// This field is required.
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal ID.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The principal ID.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// Consumes the builder and constructs a [`NewLaunchProfileMember`](crate::types::NewLaunchProfileMember).
    /// This method will fail if any of the following fields are not set:
    /// - [`persona`](crate::types::builders::NewLaunchProfileMemberBuilder::persona)
    /// - [`principal_id`](crate::types::builders::NewLaunchProfileMemberBuilder::principal_id)
    pub fn build(self) -> ::std::result::Result<crate::types::NewLaunchProfileMember, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NewLaunchProfileMember {
            persona: self.persona.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "persona",
                    "persona was not specified but it is required when building NewLaunchProfileMember",
                )
            })?,
            principal_id: self.principal_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_id",
                    "principal_id was not specified but it is required when building NewLaunchProfileMember",
                )
            })?,
        })
    }
}
