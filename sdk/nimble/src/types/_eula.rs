// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a EULA resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Eula {
    /// <p>The EULA content.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The EULA ID.</p>
    #[doc(hidden)]
    pub eula_id: std::option::Option<std::string::String>,
    /// <p>The name for the EULA.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl Eula {
    /// <p>The EULA content.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The EULA ID.</p>
    pub fn eula_id(&self) -> std::option::Option<&str> {
        self.eula_id.as_deref()
    }
    /// <p>The name for the EULA.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl Eula {
    /// Creates a new builder-style object to manufacture [`Eula`](crate::types::Eula).
    pub fn builder() -> crate::types::builders::EulaBuilder {
        crate::types::builders::EulaBuilder::default()
    }
}

/// A builder for [`Eula`](crate::types::Eula).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EulaBuilder {
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) eula_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl EulaBuilder {
    /// <p>The EULA content.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The EULA content.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The EULA ID.</p>
    pub fn eula_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.eula_id = Some(input.into());
        self
    }
    /// <p>The EULA ID.</p>
    pub fn set_eula_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.eula_id = input;
        self
    }
    /// <p>The name for the EULA.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name for the EULA.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`Eula`](crate::types::Eula).
    pub fn build(self) -> crate::types::Eula {
        crate::types::Eula {
            content: self.content,
            created_at: self.created_at,
            eula_id: self.eula_id,
            name: self.name,
            updated_at: self.updated_at,
        }
    }
}
