// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The upload storage root location (folder) on streaming workstations where files are uploaded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StreamingSessionStorageRoot {
    /// <p>The folder path in Linux workstations where files are uploaded.</p>
    #[doc(hidden)]
    pub linux: std::option::Option<std::string::String>,
    /// <p>The folder path in Windows workstations where files are uploaded.</p>
    #[doc(hidden)]
    pub windows: std::option::Option<std::string::String>,
}
impl StreamingSessionStorageRoot {
    /// <p>The folder path in Linux workstations where files are uploaded.</p>
    pub fn linux(&self) -> std::option::Option<&str> {
        self.linux.as_deref()
    }
    /// <p>The folder path in Windows workstations where files are uploaded.</p>
    pub fn windows(&self) -> std::option::Option<&str> {
        self.windows.as_deref()
    }
}
impl std::fmt::Debug for StreamingSessionStorageRoot {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingSessionStorageRoot");
        formatter.field("linux", &"*** Sensitive Data Redacted ***");
        formatter.field("windows", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StreamingSessionStorageRoot {
    /// Creates a new builder-style object to manufacture [`StreamingSessionStorageRoot`](crate::types::StreamingSessionStorageRoot).
    pub fn builder() -> crate::types::builders::StreamingSessionStorageRootBuilder {
        crate::types::builders::StreamingSessionStorageRootBuilder::default()
    }
}

/// A builder for [`StreamingSessionStorageRoot`](crate::types::StreamingSessionStorageRoot).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct StreamingSessionStorageRootBuilder {
    pub(crate) linux: std::option::Option<std::string::String>,
    pub(crate) windows: std::option::Option<std::string::String>,
}
impl StreamingSessionStorageRootBuilder {
    /// <p>The folder path in Linux workstations where files are uploaded.</p>
    pub fn linux(mut self, input: impl Into<std::string::String>) -> Self {
        self.linux = Some(input.into());
        self
    }
    /// <p>The folder path in Linux workstations where files are uploaded.</p>
    pub fn set_linux(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.linux = input;
        self
    }
    /// <p>The folder path in Windows workstations where files are uploaded.</p>
    pub fn windows(mut self, input: impl Into<std::string::String>) -> Self {
        self.windows = Some(input.into());
        self
    }
    /// <p>The folder path in Windows workstations where files are uploaded.</p>
    pub fn set_windows(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.windows = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamingSessionStorageRoot`](crate::types::StreamingSessionStorageRoot).
    pub fn build(self) -> crate::types::StreamingSessionStorageRoot {
        crate::types::StreamingSessionStorageRoot {
            linux: self.linux,
            windows: self.windows,
        }
    }
}
impl std::fmt::Debug for StreamingSessionStorageRootBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingSessionStorageRootBuilder");
        formatter.field("linux", &"*** Sensitive Data Redacted ***");
        formatter.field("windows", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
