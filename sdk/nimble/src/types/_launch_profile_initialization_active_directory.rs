// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The launch profile initialization Active Directory contains information required for the launch profile to connect to the Active Directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LaunchProfileInitializationActiveDirectory {
    /// <p>A collection of custom attributes for an Active Directory computer.</p>
    pub computer_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ActiveDirectoryComputerAttribute>>,
    /// <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The directory name.</p>
    pub directory_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS IP address.</p>
    pub dns_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name for the organizational unit distinguished name.</p>
    pub organizational_unit_distinguished_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for a studio component resource.</p>
    pub studio_component_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the studio component.</p>
    pub studio_component_name: ::std::option::Option<::std::string::String>,
}
impl LaunchProfileInitializationActiveDirectory {
    /// <p>A collection of custom attributes for an Active Directory computer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.computer_attributes.is_none()`.
    pub fn computer_attributes(&self) -> &[crate::types::ActiveDirectoryComputerAttribute] {
        self.computer_attributes.as_deref().unwrap_or_default()
    }
    /// <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The directory name.</p>
    pub fn directory_name(&self) -> ::std::option::Option<&str> {
        self.directory_name.as_deref()
    }
    /// <p>The DNS IP address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ip_addresses.is_none()`.
    pub fn dns_ip_addresses(&self) -> &[::std::string::String] {
        self.dns_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The name for the organizational unit distinguished name.</p>
    pub fn organizational_unit_distinguished_name(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_distinguished_name.as_deref()
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn studio_component_id(&self) -> ::std::option::Option<&str> {
        self.studio_component_id.as_deref()
    }
    /// <p>The name for the studio component.</p>
    pub fn studio_component_name(&self) -> ::std::option::Option<&str> {
        self.studio_component_name.as_deref()
    }
}
impl ::std::fmt::Debug for LaunchProfileInitializationActiveDirectory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LaunchProfileInitializationActiveDirectory");
        formatter.field("computer_attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("directory_name", &self.directory_name);
        formatter.field("dns_ip_addresses", &self.dns_ip_addresses);
        formatter.field("organizational_unit_distinguished_name", &self.organizational_unit_distinguished_name);
        formatter.field("studio_component_id", &self.studio_component_id);
        formatter.field("studio_component_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl LaunchProfileInitializationActiveDirectory {
    /// Creates a new builder-style object to manufacture [`LaunchProfileInitializationActiveDirectory`](crate::types::LaunchProfileInitializationActiveDirectory).
    pub fn builder() -> crate::types::builders::LaunchProfileInitializationActiveDirectoryBuilder {
        crate::types::builders::LaunchProfileInitializationActiveDirectoryBuilder::default()
    }
}

/// A builder for [`LaunchProfileInitializationActiveDirectory`](crate::types::LaunchProfileInitializationActiveDirectory).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct LaunchProfileInitializationActiveDirectoryBuilder {
    pub(crate) computer_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ActiveDirectoryComputerAttribute>>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) directory_name: ::std::option::Option<::std::string::String>,
    pub(crate) dns_ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) organizational_unit_distinguished_name: ::std::option::Option<::std::string::String>,
    pub(crate) studio_component_id: ::std::option::Option<::std::string::String>,
    pub(crate) studio_component_name: ::std::option::Option<::std::string::String>,
}
impl LaunchProfileInitializationActiveDirectoryBuilder {
    /// Appends an item to `computer_attributes`.
    ///
    /// To override the contents of this collection use [`set_computer_attributes`](Self::set_computer_attributes).
    ///
    /// <p>A collection of custom attributes for an Active Directory computer.</p>
    pub fn computer_attributes(mut self, input: crate::types::ActiveDirectoryComputerAttribute) -> Self {
        let mut v = self.computer_attributes.unwrap_or_default();
        v.push(input);
        self.computer_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of custom attributes for an Active Directory computer.</p>
    pub fn set_computer_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActiveDirectoryComputerAttribute>>) -> Self {
        self.computer_attributes = input;
        self
    }
    /// <p>A collection of custom attributes for an Active Directory computer.</p>
    pub fn get_computer_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActiveDirectoryComputerAttribute>> {
        &self.computer_attributes
    }
    /// <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The directory ID of the Directory Service for Microsoft Active Directory to access using this launch profile.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The directory name.</p>
    pub fn directory_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory name.</p>
    pub fn set_directory_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_name = input;
        self
    }
    /// <p>The directory name.</p>
    pub fn get_directory_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_name
    }
    /// Appends an item to `dns_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_dns_ip_addresses`](Self::set_dns_ip_addresses).
    ///
    /// <p>The DNS IP address.</p>
    pub fn dns_ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.dns_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The DNS IP address.</p>
    pub fn set_dns_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ip_addresses = input;
        self
    }
    /// <p>The DNS IP address.</p>
    pub fn get_dns_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ip_addresses
    }
    /// <p>The name for the organizational unit distinguished name.</p>
    pub fn organizational_unit_distinguished_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_distinguished_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the organizational unit distinguished name.</p>
    pub fn set_organizational_unit_distinguished_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_distinguished_name = input;
        self
    }
    /// <p>The name for the organizational unit distinguished name.</p>
    pub fn get_organizational_unit_distinguished_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_distinguished_name
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn studio_component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.studio_component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn set_studio_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.studio_component_id = input;
        self
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn get_studio_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.studio_component_id
    }
    /// <p>The name for the studio component.</p>
    pub fn studio_component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.studio_component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the studio component.</p>
    pub fn set_studio_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.studio_component_name = input;
        self
    }
    /// <p>The name for the studio component.</p>
    pub fn get_studio_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.studio_component_name
    }
    /// Consumes the builder and constructs a [`LaunchProfileInitializationActiveDirectory`](crate::types::LaunchProfileInitializationActiveDirectory).
    pub fn build(self) -> crate::types::LaunchProfileInitializationActiveDirectory {
        crate::types::LaunchProfileInitializationActiveDirectory {
            computer_attributes: self.computer_attributes,
            directory_id: self.directory_id,
            directory_name: self.directory_name,
            dns_ip_addresses: self.dns_ip_addresses,
            organizational_unit_distinguished_name: self.organizational_unit_distinguished_name,
            studio_component_id: self.studio_component_id,
            studio_component_name: self.studio_component_name,
        }
    }
}
impl ::std::fmt::Debug for LaunchProfileInitializationActiveDirectoryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LaunchProfileInitializationActiveDirectoryBuilder");
        formatter.field("computer_attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("directory_name", &self.directory_name);
        formatter.field("dns_ip_addresses", &self.dns_ip_addresses);
        formatter.field("organizational_unit_distinguished_name", &self.organizational_unit_distinguished_name);
        formatter.field("studio_component_id", &self.studio_component_id);
        formatter.field("studio_component_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
