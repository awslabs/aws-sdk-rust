// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A studio component represents a network resource to be used by a studio's users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.</p>
/// <p>Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.</p>
/// <p>A studio component also has a set of initialization scripts that are returned by <code>GetLaunchProfileInitialization</code>. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StudioComponent {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the studio component, based on component type.</p>
    pub configuration: ::std::option::Option<crate::types::StudioComponentConfiguration>,
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user ID of the user that created the studio component.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable description for the studio component resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub ec2_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Initialization scripts for studio components.</p>
    pub initialization_scripts: ::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>>,
    /// <p>A friendly name for the studio component resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Parameters for the studio component scripts.</p>
    pub script_parameters: ::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>>,
    /// <p>The current state.</p>
    pub state: ::std::option::Option<crate::types::StudioComponentState>,
    /// <p>The status code.</p>
    pub status_code: ::std::option::Option<crate::types::StudioComponentStatusCode>,
    /// <p>The status message for the studio component.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for a studio component resource.</p>
    pub studio_component_id: ::std::option::Option<::std::string::String>,
    /// <p>The specific subtype of a studio component.</p>
    pub subtype: ::std::option::Option<crate::types::StudioComponentSubtype>,
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The type of the studio component.</p>
    pub r#type: ::std::option::Option<crate::types::StudioComponentType>,
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user ID of the user that most recently updated the resource.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub secure_initialization_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. </p>
    pub runtime_role_arn: ::std::option::Option<::std::string::String>,
}
impl StudioComponent {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::StudioComponentConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user ID of the user that created the studio component.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>A human-readable description for the studio component resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The EC2 security groups that control access to the studio component.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_security_group_ids.is_none()`.
    pub fn ec2_security_group_ids(&self) -> &[::std::string::String] {
        self.ec2_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>Initialization scripts for studio components.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.initialization_scripts.is_none()`.
    pub fn initialization_scripts(&self) -> &[crate::types::StudioComponentInitializationScript] {
        self.initialization_scripts.as_deref().unwrap_or_default()
    }
    /// <p>A friendly name for the studio component resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Parameters for the studio component scripts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.script_parameters.is_none()`.
    pub fn script_parameters(&self) -> &[crate::types::ScriptParameterKeyValue] {
        self.script_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The current state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::StudioComponentState> {
        self.state.as_ref()
    }
    /// <p>The status code.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::StudioComponentStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>The status message for the studio component.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn studio_component_id(&self) -> ::std::option::Option<&str> {
        self.studio_component_id.as_deref()
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn subtype(&self) -> ::std::option::Option<&crate::types::StudioComponentSubtype> {
        self.subtype.as_ref()
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The type of the studio component.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::StudioComponentType> {
        self.r#type.as_ref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user ID of the user that most recently updated the resource.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn secure_initialization_role_arn(&self) -> ::std::option::Option<&str> {
        self.secure_initialization_role_arn.as_deref()
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. </p>
    pub fn runtime_role_arn(&self) -> ::std::option::Option<&str> {
        self.runtime_role_arn.as_deref()
    }
}
impl ::std::fmt::Debug for StudioComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StudioComponent");
        formatter.field("arn", &self.arn);
        formatter.field("configuration", &self.configuration);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("ec2_security_group_ids", &self.ec2_security_group_ids);
        formatter.field("initialization_scripts", &self.initialization_scripts);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("script_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("studio_component_id", &self.studio_component_id);
        formatter.field("subtype", &self.subtype);
        formatter.field("tags", &self.tags);
        formatter.field("r#type", &self.r#type);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("secure_initialization_role_arn", &self.secure_initialization_role_arn);
        formatter.field("runtime_role_arn", &self.runtime_role_arn);
        formatter.finish()
    }
}
impl StudioComponent {
    /// Creates a new builder-style object to manufacture [`StudioComponent`](crate::types::StudioComponent).
    pub fn builder() -> crate::types::builders::StudioComponentBuilder {
        crate::types::builders::StudioComponentBuilder::default()
    }
}

/// A builder for [`StudioComponent`](crate::types::StudioComponent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StudioComponentBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::StudioComponentConfiguration>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) initialization_scripts: ::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) script_parameters: ::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>>,
    pub(crate) state: ::std::option::Option<crate::types::StudioComponentState>,
    pub(crate) status_code: ::std::option::Option<crate::types::StudioComponentStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) studio_component_id: ::std::option::Option<::std::string::String>,
    pub(crate) subtype: ::std::option::Option<crate::types::StudioComponentSubtype>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::StudioComponentType>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) secure_initialization_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) runtime_role_arn: ::std::option::Option<::std::string::String>,
}
impl StudioComponentBuilder {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn configuration(mut self, input: crate::types::StudioComponentConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::StudioComponentConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the studio component, based on component type.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::StudioComponentConfiguration> {
        &self.configuration
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user ID of the user that created the studio component.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID of the user that created the studio component.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user ID of the user that created the studio component.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>A human-readable description for the studio component resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable description for the studio component resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A human-readable description for the studio component resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `ec2_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_ec2_security_group_ids`](Self::set_ec2_security_group_ids).
    ///
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn ec2_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ec2_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.ec2_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn set_ec2_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ec2_security_group_ids = input;
        self
    }
    /// <p>The EC2 security groups that control access to the studio component.</p>
    pub fn get_ec2_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ec2_security_group_ids
    }
    /// Appends an item to `initialization_scripts`.
    ///
    /// To override the contents of this collection use [`set_initialization_scripts`](Self::set_initialization_scripts).
    ///
    /// <p>Initialization scripts for studio components.</p>
    pub fn initialization_scripts(mut self, input: crate::types::StudioComponentInitializationScript) -> Self {
        let mut v = self.initialization_scripts.unwrap_or_default();
        v.push(input);
        self.initialization_scripts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Initialization scripts for studio components.</p>
    pub fn set_initialization_scripts(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>>,
    ) -> Self {
        self.initialization_scripts = input;
        self
    }
    /// <p>Initialization scripts for studio components.</p>
    pub fn get_initialization_scripts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StudioComponentInitializationScript>> {
        &self.initialization_scripts
    }
    /// <p>A friendly name for the studio component resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for the studio component resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A friendly name for the studio component resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `script_parameters`.
    ///
    /// To override the contents of this collection use [`set_script_parameters`](Self::set_script_parameters).
    ///
    /// <p>Parameters for the studio component scripts.</p>
    pub fn script_parameters(mut self, input: crate::types::ScriptParameterKeyValue) -> Self {
        let mut v = self.script_parameters.unwrap_or_default();
        v.push(input);
        self.script_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Parameters for the studio component scripts.</p>
    pub fn set_script_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>>) -> Self {
        self.script_parameters = input;
        self
    }
    /// <p>Parameters for the studio component scripts.</p>
    pub fn get_script_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScriptParameterKeyValue>> {
        &self.script_parameters
    }
    /// <p>The current state.</p>
    pub fn state(mut self, input: crate::types::StudioComponentState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::StudioComponentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::StudioComponentState> {
        &self.state
    }
    /// <p>The status code.</p>
    pub fn status_code(mut self, input: crate::types::StudioComponentStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status code.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::StudioComponentStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status code.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::StudioComponentStatusCode> {
        &self.status_code
    }
    /// <p>The status message for the studio component.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the studio component.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message for the studio component.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn studio_component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.studio_component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn set_studio_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.studio_component_id = input;
        self
    }
    /// <p>The unique identifier for a studio component resource.</p>
    pub fn get_studio_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.studio_component_id
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn subtype(mut self, input: crate::types::StudioComponentSubtype) -> Self {
        self.subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn set_subtype(mut self, input: ::std::option::Option<crate::types::StudioComponentSubtype>) -> Self {
        self.subtype = input;
        self
    }
    /// <p>The specific subtype of a studio component.</p>
    pub fn get_subtype(&self) -> &::std::option::Option<crate::types::StudioComponentSubtype> {
        &self.subtype
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The type of the studio component.</p>
    pub fn r#type(mut self, input: crate::types::StudioComponentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the studio component.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::StudioComponentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the studio component.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::StudioComponentType> {
        &self.r#type
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user ID of the user that most recently updated the resource.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID of the user that most recently updated the resource.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user ID of the user that most recently updated the resource.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn secure_initialization_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_initialization_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn set_secure_initialization_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_initialization_role_arn = input;
        self
    }
    /// <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.</p>
    pub fn get_secure_initialization_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_initialization_role_arn
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. </p>
    pub fn runtime_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. </p>
    pub fn set_runtime_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_role_arn = input;
        self
    }
    /// <p>An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. </p>
    pub fn get_runtime_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_role_arn
    }
    /// Consumes the builder and constructs a [`StudioComponent`](crate::types::StudioComponent).
    pub fn build(self) -> crate::types::StudioComponent {
        crate::types::StudioComponent {
            arn: self.arn,
            configuration: self.configuration,
            created_at: self.created_at,
            created_by: self.created_by,
            description: self.description,
            ec2_security_group_ids: self.ec2_security_group_ids,
            initialization_scripts: self.initialization_scripts,
            name: self.name,
            script_parameters: self.script_parameters,
            state: self.state,
            status_code: self.status_code,
            status_message: self.status_message,
            studio_component_id: self.studio_component_id,
            subtype: self.subtype,
            tags: self.tags,
            r#type: self.r#type,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            secure_initialization_role_arn: self.secure_initialization_role_arn,
            runtime_role_arn: self.runtime_role_arn,
        }
    }
}
impl ::std::fmt::Debug for StudioComponentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StudioComponentBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("configuration", &self.configuration);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("ec2_security_group_ids", &self.ec2_security_group_ids);
        formatter.field("initialization_scripts", &self.initialization_scripts);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("script_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field("studio_component_id", &self.studio_component_id);
        formatter.field("subtype", &self.subtype);
        formatter.field("tags", &self.tags);
        formatter.field("r#type", &self.r#type);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("updated_by", &self.updated_by);
        formatter.field("secure_initialization_role_arn", &self.secure_initialization_role_arn);
        formatter.field("runtime_role_arn", &self.runtime_role_arn);
        formatter.finish()
    }
}
