// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a studio resource.</p>
/// <p>A studio is the core resource used with Nimble Studio. You must create a studio first, before any other resource type can be created. All other resources you create and manage in Nimble Studio are contained within a studio.</p>
/// <p>When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the Nimble Studio portal via IAM Identity Center and your identity source.</p>
/// <p>The user role must have the <code>AmazonNimbleStudio-StudioUser</code> managed policy attached for the portal to function properly.</p>
/// <p>The admin role must have the <code>AmazonNimbleStudio-StudioAdmin</code> managed policy attached for the portal to function properly.</p>
/// <p>Your studio roles must trust the <code>identity.nimble.amazonaws.com</code> service principal to function properly.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Studio {
    /// <p>The IAM role that studio admins assume when logging in to the Nimble Studio portal.</p>
    #[doc(hidden)]
    pub admin_role_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A friendly name for the studio.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region where the studio resource is located.</p>
    #[doc(hidden)]
    pub home_region: std::option::Option<std::string::String>,
    /// <p>The IAM Identity Center application client ID used to integrate with IAM Identity Center. This ID allows IAM Identity Center users to log in to Nimble Studio portal.</p>
    #[doc(hidden)]
    pub sso_client_id: std::option::Option<std::string::String>,
    /// <p>The current state of the studio resource.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::StudioState>,
    /// <p>Status codes that provide additional detail on the studio state.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<crate::types::StudioStatusCode>,
    /// <p>Additional detail on the studio state.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Configuration of the encryption method that is used for the studio.</p>
    #[doc(hidden)]
    pub studio_encryption_configuration:
        std::option::Option<crate::types::StudioEncryptionConfiguration>,
    /// <p>The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.</p>
    #[doc(hidden)]
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>
    #[doc(hidden)]
    pub studio_name: std::option::Option<std::string::String>,
    /// <p>The address of the web page for the studio.</p>
    #[doc(hidden)]
    pub studio_url: std::option::Option<std::string::String>,
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The IAM role that studio users assume when logging in to the Nimble Studio portal.</p>
    #[doc(hidden)]
    pub user_role_arn: std::option::Option<std::string::String>,
}
impl Studio {
    /// <p>The IAM role that studio admins assume when logging in to the Nimble Studio portal.</p>
    pub fn admin_role_arn(&self) -> std::option::Option<&str> {
        self.admin_role_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>A friendly name for the studio.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The Amazon Web Services Region where the studio resource is located.</p>
    pub fn home_region(&self) -> std::option::Option<&str> {
        self.home_region.as_deref()
    }
    /// <p>The IAM Identity Center application client ID used to integrate with IAM Identity Center. This ID allows IAM Identity Center users to log in to Nimble Studio portal.</p>
    pub fn sso_client_id(&self) -> std::option::Option<&str> {
        self.sso_client_id.as_deref()
    }
    /// <p>The current state of the studio resource.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::StudioState> {
        self.state.as_ref()
    }
    /// <p>Status codes that provide additional detail on the studio state.</p>
    pub fn status_code(&self) -> std::option::Option<&crate::types::StudioStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>Additional detail on the studio state.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Configuration of the encryption method that is used for the studio.</p>
    pub fn studio_encryption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::StudioEncryptionConfiguration> {
        self.studio_encryption_configuration.as_ref()
    }
    /// <p>The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.</p>
    pub fn studio_id(&self) -> std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>
    pub fn studio_name(&self) -> std::option::Option<&str> {
        self.studio_name.as_deref()
    }
    /// <p>The address of the web page for the studio.</p>
    pub fn studio_url(&self) -> std::option::Option<&str> {
        self.studio_url.as_deref()
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The IAM role that studio users assume when logging in to the Nimble Studio portal.</p>
    pub fn user_role_arn(&self) -> std::option::Option<&str> {
        self.user_role_arn.as_deref()
    }
}
impl std::fmt::Debug for Studio {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Studio");
        formatter.field("admin_role_arn", &self.admin_role_arn);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("home_region", &self.home_region);
        formatter.field("sso_client_id", &self.sso_client_id);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field(
            "studio_encryption_configuration",
            &self.studio_encryption_configuration,
        );
        formatter.field("studio_id", &self.studio_id);
        formatter.field("studio_name", &self.studio_name);
        formatter.field("studio_url", &self.studio_url);
        formatter.field("tags", &self.tags);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("user_role_arn", &self.user_role_arn);
        formatter.finish()
    }
}
impl Studio {
    /// Creates a new builder-style object to manufacture [`Studio`](crate::types::Studio).
    pub fn builder() -> crate::types::builders::StudioBuilder {
        crate::types::builders::StudioBuilder::default()
    }
}

/// A builder for [`Studio`](crate::types::Studio).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct StudioBuilder {
    pub(crate) admin_role_arn: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) home_region: std::option::Option<std::string::String>,
    pub(crate) sso_client_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::StudioState>,
    pub(crate) status_code: std::option::Option<crate::types::StudioStatusCode>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) studio_encryption_configuration:
        std::option::Option<crate::types::StudioEncryptionConfiguration>,
    pub(crate) studio_id: std::option::Option<std::string::String>,
    pub(crate) studio_name: std::option::Option<std::string::String>,
    pub(crate) studio_url: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) user_role_arn: std::option::Option<std::string::String>,
}
impl StudioBuilder {
    /// <p>The IAM role that studio admins assume when logging in to the Nimble Studio portal.</p>
    pub fn admin_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role that studio admins assume when logging in to the Nimble Studio portal.</p>
    pub fn set_admin_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.admin_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>A friendly name for the studio.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>A friendly name for the studio.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The Amazon Web Services Region where the studio resource is located.</p>
    pub fn home_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the studio resource is located.</p>
    pub fn set_home_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.home_region = input;
        self
    }
    /// <p>The IAM Identity Center application client ID used to integrate with IAM Identity Center. This ID allows IAM Identity Center users to log in to Nimble Studio portal.</p>
    pub fn sso_client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sso_client_id = Some(input.into());
        self
    }
    /// <p>The IAM Identity Center application client ID used to integrate with IAM Identity Center. This ID allows IAM Identity Center users to log in to Nimble Studio portal.</p>
    pub fn set_sso_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sso_client_id = input;
        self
    }
    /// <p>The current state of the studio resource.</p>
    pub fn state(mut self, input: crate::types::StudioState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the studio resource.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::StudioState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Status codes that provide additional detail on the studio state.</p>
    pub fn status_code(mut self, input: crate::types::StudioStatusCode) -> Self {
        self.status_code = Some(input);
        self
    }
    /// <p>Status codes that provide additional detail on the studio state.</p>
    pub fn set_status_code(
        mut self,
        input: std::option::Option<crate::types::StudioStatusCode>,
    ) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Additional detail on the studio state.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Additional detail on the studio state.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Configuration of the encryption method that is used for the studio.</p>
    pub fn studio_encryption_configuration(
        mut self,
        input: crate::types::StudioEncryptionConfiguration,
    ) -> Self {
        self.studio_encryption_configuration = Some(input);
        self
    }
    /// <p>Configuration of the encryption method that is used for the studio.</p>
    pub fn set_studio_encryption_configuration(
        mut self,
        input: std::option::Option<crate::types::StudioEncryptionConfiguration>,
    ) -> Self {
        self.studio_encryption_configuration = input;
        self
    }
    /// <p>The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// <p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>
    pub fn studio_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_name = Some(input.into());
        self
    }
    /// <p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>
    pub fn set_studio_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_name = input;
        self
    }
    /// <p>The address of the web page for the studio.</p>
    pub fn studio_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_url = Some(input.into());
        self
    }
    /// <p>The address of the web page for the studio.</p>
    pub fn set_studio_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_url = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The IAM role that studio users assume when logging in to the Nimble Studio portal.</p>
    pub fn user_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role that studio users assume when logging in to the Nimble Studio portal.</p>
    pub fn set_user_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Studio`](crate::types::Studio).
    pub fn build(self) -> crate::types::Studio {
        crate::types::Studio {
            admin_role_arn: self.admin_role_arn,
            arn: self.arn,
            created_at: self.created_at,
            display_name: self.display_name,
            home_region: self.home_region,
            sso_client_id: self.sso_client_id,
            state: self.state,
            status_code: self.status_code,
            status_message: self.status_message,
            studio_encryption_configuration: self.studio_encryption_configuration,
            studio_id: self.studio_id,
            studio_name: self.studio_name,
            studio_url: self.studio_url,
            tags: self.tags,
            updated_at: self.updated_at,
            user_role_arn: self.user_role_arn,
        }
    }
}
impl std::fmt::Debug for StudioBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StudioBuilder");
        formatter.field("admin_role_arn", &self.admin_role_arn);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("home_region", &self.home_region);
        formatter.field("sso_client_id", &self.sso_client_id);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("status_message", &self.status_message);
        formatter.field(
            "studio_encryption_configuration",
            &self.studio_encryption_configuration,
        );
        formatter.field("studio_id", &self.studio_id);
        formatter.field("studio_name", &self.studio_name);
        formatter.field("studio_url", &self.studio_url);
        formatter.field("tags", &self.tags);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("user_role_arn", &self.user_role_arn);
        formatter.finish()
    }
}
