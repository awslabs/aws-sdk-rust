// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `StreamingSessionStatusCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let streamingsessionstatuscode = unimplemented!();
/// match streamingsessionstatuscode {
///     StreamingSessionStatusCode::ActiveDirectoryDomainJoinError => { /* ... */ },
///     StreamingSessionStatusCode::AmiValidationError => { /* ... */ },
///     StreamingSessionStatusCode::DecryptStreamingImageError => { /* ... */ },
///     StreamingSessionStatusCode::InitializationScriptError => { /* ... */ },
///     StreamingSessionStatusCode::InsufficientCapacity => { /* ... */ },
///     StreamingSessionStatusCode::InternalError => { /* ... */ },
///     StreamingSessionStatusCode::NetworkConnectionError => { /* ... */ },
///     StreamingSessionStatusCode::NetworkInterfaceError => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionCreateInProgress => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionDeleted => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionDeleteInProgress => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionReady => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionStarted => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionStartInProgress => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionStopped => { /* ... */ },
///     StreamingSessionStatusCode::StreamingSessionStopInProgress => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `streamingsessionstatuscode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `StreamingSessionStatusCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `StreamingSessionStatusCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `StreamingSessionStatusCode::NewFeature` is defined.
/// Specifically, when `streamingsessionstatuscode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `StreamingSessionStatusCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum StreamingSessionStatusCode {
    #[allow(missing_docs)] // documentation missing in model
    ActiveDirectoryDomainJoinError,
    #[allow(missing_docs)] // documentation missing in model
    AmiValidationError,
    #[allow(missing_docs)] // documentation missing in model
    DecryptStreamingImageError,
    #[allow(missing_docs)] // documentation missing in model
    InitializationScriptError,
    #[allow(missing_docs)] // documentation missing in model
    InsufficientCapacity,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    NetworkConnectionError,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInterfaceError,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionCreateInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionDeleted,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionDeleteInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionReady,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionStarted,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionStartInProgress,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionStopped,
    #[allow(missing_docs)] // documentation missing in model
    StreamingSessionStopInProgress,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for StreamingSessionStatusCode {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR" => {
                StreamingSessionStatusCode::ActiveDirectoryDomainJoinError
            }
            "AMI_VALIDATION_ERROR" => StreamingSessionStatusCode::AmiValidationError,
            "DECRYPT_STREAMING_IMAGE_ERROR" => {
                StreamingSessionStatusCode::DecryptStreamingImageError
            }
            "INITIALIZATION_SCRIPT_ERROR" => StreamingSessionStatusCode::InitializationScriptError,
            "INSUFFICIENT_CAPACITY" => StreamingSessionStatusCode::InsufficientCapacity,
            "INTERNAL_ERROR" => StreamingSessionStatusCode::InternalError,
            "NETWORK_CONNECTION_ERROR" => StreamingSessionStatusCode::NetworkConnectionError,
            "NETWORK_INTERFACE_ERROR" => StreamingSessionStatusCode::NetworkInterfaceError,
            "STREAMING_SESSION_CREATE_IN_PROGRESS" => {
                StreamingSessionStatusCode::StreamingSessionCreateInProgress
            }
            "STREAMING_SESSION_DELETED" => StreamingSessionStatusCode::StreamingSessionDeleted,
            "STREAMING_SESSION_DELETE_IN_PROGRESS" => {
                StreamingSessionStatusCode::StreamingSessionDeleteInProgress
            }
            "STREAMING_SESSION_READY" => StreamingSessionStatusCode::StreamingSessionReady,
            "STREAMING_SESSION_STARTED" => StreamingSessionStatusCode::StreamingSessionStarted,
            "STREAMING_SESSION_START_IN_PROGRESS" => {
                StreamingSessionStatusCode::StreamingSessionStartInProgress
            }
            "STREAMING_SESSION_STOPPED" => StreamingSessionStatusCode::StreamingSessionStopped,
            "STREAMING_SESSION_STOP_IN_PROGRESS" => {
                StreamingSessionStatusCode::StreamingSessionStopInProgress
            }
            other => StreamingSessionStatusCode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for StreamingSessionStatusCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(StreamingSessionStatusCode::from(s))
    }
}
impl StreamingSessionStatusCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            StreamingSessionStatusCode::ActiveDirectoryDomainJoinError => {
                "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR"
            }
            StreamingSessionStatusCode::AmiValidationError => "AMI_VALIDATION_ERROR",
            StreamingSessionStatusCode::DecryptStreamingImageError => {
                "DECRYPT_STREAMING_IMAGE_ERROR"
            }
            StreamingSessionStatusCode::InitializationScriptError => "INITIALIZATION_SCRIPT_ERROR",
            StreamingSessionStatusCode::InsufficientCapacity => "INSUFFICIENT_CAPACITY",
            StreamingSessionStatusCode::InternalError => "INTERNAL_ERROR",
            StreamingSessionStatusCode::NetworkConnectionError => "NETWORK_CONNECTION_ERROR",
            StreamingSessionStatusCode::NetworkInterfaceError => "NETWORK_INTERFACE_ERROR",
            StreamingSessionStatusCode::StreamingSessionCreateInProgress => {
                "STREAMING_SESSION_CREATE_IN_PROGRESS"
            }
            StreamingSessionStatusCode::StreamingSessionDeleted => "STREAMING_SESSION_DELETED",
            StreamingSessionStatusCode::StreamingSessionDeleteInProgress => {
                "STREAMING_SESSION_DELETE_IN_PROGRESS"
            }
            StreamingSessionStatusCode::StreamingSessionReady => "STREAMING_SESSION_READY",
            StreamingSessionStatusCode::StreamingSessionStarted => "STREAMING_SESSION_STARTED",
            StreamingSessionStatusCode::StreamingSessionStartInProgress => {
                "STREAMING_SESSION_START_IN_PROGRESS"
            }
            StreamingSessionStatusCode::StreamingSessionStopped => "STREAMING_SESSION_STOPPED",
            StreamingSessionStatusCode::StreamingSessionStopInProgress => {
                "STREAMING_SESSION_STOP_IN_PROGRESS"
            }
            StreamingSessionStatusCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR",
            "AMI_VALIDATION_ERROR",
            "DECRYPT_STREAMING_IMAGE_ERROR",
            "INITIALIZATION_SCRIPT_ERROR",
            "INSUFFICIENT_CAPACITY",
            "INTERNAL_ERROR",
            "NETWORK_CONNECTION_ERROR",
            "NETWORK_INTERFACE_ERROR",
            "STREAMING_SESSION_CREATE_IN_PROGRESS",
            "STREAMING_SESSION_DELETED",
            "STREAMING_SESSION_DELETE_IN_PROGRESS",
            "STREAMING_SESSION_READY",
            "STREAMING_SESSION_STARTED",
            "STREAMING_SESSION_START_IN_PROGRESS",
            "STREAMING_SESSION_STOPPED",
            "STREAMING_SESSION_STOP_IN_PROGRESS",
        ]
    }
}
impl AsRef<str> for StreamingSessionStatusCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
