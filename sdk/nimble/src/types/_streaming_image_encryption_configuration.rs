// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how a streaming image is encrypted.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamingImageEncryptionConfiguration {
    /// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
    #[doc(hidden)]
    pub key_arn: std::option::Option<std::string::String>,
    /// <p>The type of KMS key that is used to encrypt studio data.</p>
    #[doc(hidden)]
    pub key_type: std::option::Option<crate::types::StreamingImageEncryptionConfigurationKeyType>,
}
impl StreamingImageEncryptionConfiguration {
    /// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
    pub fn key_arn(&self) -> std::option::Option<&str> {
        self.key_arn.as_deref()
    }
    /// <p>The type of KMS key that is used to encrypt studio data.</p>
    pub fn key_type(
        &self,
    ) -> std::option::Option<&crate::types::StreamingImageEncryptionConfigurationKeyType> {
        self.key_type.as_ref()
    }
}
impl StreamingImageEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`StreamingImageEncryptionConfiguration`](crate::types::StreamingImageEncryptionConfiguration).
    pub fn builder() -> crate::types::builders::StreamingImageEncryptionConfigurationBuilder {
        crate::types::builders::StreamingImageEncryptionConfigurationBuilder::default()
    }
}

/// A builder for [`StreamingImageEncryptionConfiguration`](crate::types::StreamingImageEncryptionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamingImageEncryptionConfigurationBuilder {
    pub(crate) key_arn: std::option::Option<std::string::String>,
    pub(crate) key_type:
        std::option::Option<crate::types::StreamingImageEncryptionConfigurationKeyType>,
}
impl StreamingImageEncryptionConfigurationBuilder {
    /// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
    pub fn key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_arn = Some(input.into());
        self
    }
    /// <p>The ARN for a KMS key that is used to encrypt studio data.</p>
    pub fn set_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The type of KMS key that is used to encrypt studio data.</p>
    pub fn key_type(
        mut self,
        input: crate::types::StreamingImageEncryptionConfigurationKeyType,
    ) -> Self {
        self.key_type = Some(input);
        self
    }
    /// <p>The type of KMS key that is used to encrypt studio data.</p>
    pub fn set_key_type(
        mut self,
        input: std::option::Option<crate::types::StreamingImageEncryptionConfigurationKeyType>,
    ) -> Self {
        self.key_type = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamingImageEncryptionConfiguration`](crate::types::StreamingImageEncryptionConfiguration).
    pub fn build(self) -> crate::types::StreamingImageEncryptionConfiguration {
        crate::types::StreamingImageEncryptionConfiguration {
            key_arn: self.key_arn,
            key_type: self.key_type,
        }
    }
}
